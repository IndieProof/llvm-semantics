#!/usr/bin/perl
# this program prints a generated .ll file to stdout and its corresponding test .out file to stderr
use strict;


my $bitsize = 2;
my $instruction = 'sub';
my $resultFun = \&f; # used to compute expected result of $instruction


sub f {
	my ($x, $y) = (@_);
	return signed($x - $y);
}
sub signed {
	my ($x) = (@_);
	my $range = 2**$bitsize;
	my $smax = 2**($bitsize-1) - 1;
	my $smin = -(2**($bitsize-1));
	
	my $result = $x % $range;
	if ($result > $smax) { $result -= $range; }
	if ($result < $smin) { $result += $range; }
	if ($result < $smin || $result > $smax) { die "this shouldn't happen"; }
	return $result;
}

# print .ll header
my $printFunction = "\@__fsl.print.i$bitsize";
print 'target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"' . "\n";
print 'target triple = "x86_64-unknown-linux-gnu"' . "\n";
print "declare void $printFunction(i$bitsize)\n";

# generate function
print "define void \@f() nounwind uwtable {\n";
my $testNum = 0;
for (my $x = 0; $x < 2**$bitsize; $x++) {
	for (my $y = 0; $y < 2**$bitsize; $y++) {
		my $currTest = "%test$testNum";
		print "\t$currTest = $instruction i$bitsize $x, $y\n";
		print "\tcall void $printFunction(i$bitsize $currTest)\n";
		print STDERR &$resultFun($x, $y) . "\n";
		$testNum++;
	}
}
print "\tret void\n";
print "}\n";

# call generated functions
print "define i32 \@main() nounwind uwtable {\n";
print "\tcall void \@f()\n";
print "\tret i32 0\n";
print "}\n";

# print .out footer
print STDERR <<END;
<result>
  <returnValue>
    0
  </returnValue>
</result>
END
