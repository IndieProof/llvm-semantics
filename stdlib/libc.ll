; ModuleID = 'a64l.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fl = type { %struct.fl*, [32 x void (i8*)*], [32 x i8*] }
%struct.timespec.29 = type { i64, i64 }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.__FILE_s.67 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.67*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.67*, i8*, i64)*, i64 (%struct.__FILE_s.67*, i8*, i64)*, i64 (%struct.__FILE_s.67*, i64, i32)*, i8*, i64, %struct.__FILE_s.67*, %struct.__FILE_s.67*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.67*)*, i8* }
%struct.passwd.71 = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.sockaddr_in.123 = type { i16, i16, %struct.in_addr.124, [8 x i8] }
%struct.in_addr.124 = type { i32 }
%struct.tm.136 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__FILE_s.52 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.52*, i8*, i64)*, i64 (%struct.__FILE_s.52*, i8*, i64)*, i64 (%struct.__FILE_s.52*, i64, i32)*, i8*, i64, %struct.__FILE_s.52*, %struct.__FILE_s.52*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.group.142 = type { i8*, i8*, i32, i8** }
%struct.hostent = type { i8*, i8**, i32, i32, i8** }
%struct.hostent.152 = type { i8*, i8**, i32, i32, i8** }
%struct.passwd.167 = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.servent = type { i8*, i8**, i32, i8* }
%struct.servent.175 = type { i8*, i8**, i32, i8* }
%struct.spwd.182 = type { i8*, i8*, i64, i64, i64, i64, i64, i64, i64 }
%struct.match = type { %struct.match*, [1 x i8] }
%struct.tm.197 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.entry = type { %struct.ENTRY, i64 }
%struct.ENTRY = type { i8*, i8* }
%struct.pollfd.214 = type { i32, i16, i16 }
%struct.__libc = type { i8*, i32, i32, i64*, i32 (void ()*)*, void ()*, void ()*, i32, i32, %struct.__FILE_s.52*, i32 }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.anon.254 = type { i64, i64*, i64, [64 x %struct.bin], [2 x i32], [2 x i32] }
%struct.bin = type { [2 x i32], %struct.chunk*, %struct.chunk* }
%struct.chunk = type { i64, i64, %struct.chunk*, %struct.chunk* }
%struct.mntent = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.protoent = type { i8*, i8**, i32 }
%struct.atfork_funcs = type { void ()*, void ()*, void ()*, %struct.atfork_funcs*, %struct.atfork_funcs* }
%struct.__res_state = type { i32, i32, i64, i32, [3 x %struct.sockaddr_in.530], i16, [7 x i8*], [256 x i8], i64, i8, i8, [2 x i8], [10 x %struct.anon.531], i8*, i8*, i32, i32, i32, %union.anon.532 }
%struct.sockaddr_in.530 = type { i16, i16, %struct.in_addr.533, [8 x i8] }
%struct.in_addr.533 = type { i32 }
%struct.anon.531 = type { %struct.in_addr.533, i32 }
%union.anon.532 = type { %struct.anon.0 }
%struct.anon.0 = type { i16, [3 x i16], [3 x i32], i16, i16, [3 x %struct.sockaddr_in6.534*], [2 x i32] }
%struct.sockaddr_in6.534 = type { i16, i16, i32, %struct.in6_addr.535, i32 }
%struct.in6_addr.535 = type { %union.anon.1.536 }
%union.anon.1.536 = type { [4 x i32] }
%struct.anon.550 = type { i64, %struct.sem_t.549*, i32 }
%struct.sem_t.549 = type { [8 x i32] }
%struct.rlimit = type { i64, i64 }
%struct.sigset_t.599 = type { [16 x i64] }
%struct.__FILE_s = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i64, i32)*, i8*, i64, %struct.__FILE_s*, %struct.__FILE_s*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__FILE_s.69 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i64, i32)*, i8*, i64, %struct.__FILE_s.69*, %struct.__FILE_s.69*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__FILE_s.642 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i64, i32)*, i8*, i64, %struct.__FILE_s.642*, %struct.__FILE_s.642*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.anon.692 = type { i16, i8, i8 }
%struct.rule = type { i8, i8, i16, i32 }
%struct.__FILE_s.737 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.737*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.737*, i8*, i64)*, i64 (%struct.__FILE_s.737*, i8*, i64)*, i64 (%struct.__FILE_s.737*, i64, i32)*, i8*, i64, %struct.__FILE_s.737*, %struct.__FILE_s.737*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.737*)*, i8* }
%struct.termios.26 = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.__FILE_s.27 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.27*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.27*, i8*, i64)*, i64 (%struct.__FILE_s.27*, i8*, i64)*, i64 (%struct.__FILE_s.27*, i64, i32)*, i8*, i64, %struct.__FILE_s.27*, %struct.__FILE_s.27*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.27*)*, i8* }
%struct.crypt_data = type opaque
%struct.__FILE_s.61 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.61*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.61*, i8*, i64)*, i64 (%struct.__FILE_s.61*, i8*, i64)*, i64 (%struct.__FILE_s.61*, i64, i32)*, i8*, i64, %struct.__FILE_s.61*, %struct.__FILE_s.61*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.61*)*, i8* }
%struct.__FILE_s.64 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.64*, i8*, i64)*, i64 (%struct.__FILE_s.64*, i8*, i64)*, i64 (%struct.__FILE_s.64*, i64, i32)*, i8*, i64, %struct.__FILE_s.64*, %struct.__FILE_s.64*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__FILE_s.65 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.65*, i8*, i64)*, i64 (%struct.__FILE_s.65*, i8*, i64)*, i64 (%struct.__FILE_s.65*, i64, i32)*, i8*, i64, %struct.__FILE_s.65*, %struct.__FILE_s.65*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__FILE_s.37 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.37*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.37*, i8*, i64)*, i64 (%struct.__FILE_s.37*, i8*, i64)*, i64 (%struct.__FILE_s.37*, i64, i32)*, i8*, i64, %struct.__FILE_s.37*, %struct.__FILE_s.37*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.37*)*, i8* }
%struct.__FILE_s.75 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.75*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.75*, i8*, i64)*, i64 (%struct.__FILE_s.75*, i8*, i64)*, i64 (%struct.__FILE_s.75*, i64, i32)*, i8*, i64, %struct.__FILE_s.75*, %struct.__FILE_s.75*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.75*)*, i8* }
%struct.__FILE_s.76 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.76*, i8*, i64)*, i64 (%struct.__FILE_s.76*, i8*, i64)*, i64 (%struct.__FILE_s.76*, i64, i32)*, i8*, i64, %struct.__FILE_s.76*, %struct.__FILE_s.76*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__FILE_s.85 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.85*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.85*, i8*, i64)*, i64 (%struct.__FILE_s.85*, i8*, i64)*, i64 (%struct.__FILE_s.85*, i64, i32)*, i8*, i64, %struct.__FILE_s.85*, %struct.__FILE_s.85*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.85*)*, i8* }
%struct.__FILE_s.86 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.86*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.86*, i8*, i64)*, i64 (%struct.__FILE_s.86*, i8*, i64)*, i64 (%struct.__FILE_s.86*, i64, i32)*, i8*, i64, %struct.__FILE_s.86*, %struct.__FILE_s.86*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.86*)*, i8* }
%struct.__FILE_s.90 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.90*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.90*, i8*, i64)*, i64 (%struct.__FILE_s.90*, i8*, i64)*, i64 (%struct.__FILE_s.90*, i64, i32)*, i8*, i64, %struct.__FILE_s.90*, %struct.__FILE_s.90*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.90*)*, i8* }
%struct.__FILE_s.96 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.96*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.96*, i8*, i64)*, i64 (%struct.__FILE_s.96*, i8*, i64)*, i64 (%struct.__FILE_s.96*, i64, i32)*, i8*, i64, %struct.__FILE_s.96*, %struct.__FILE_s.96*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.96*)*, i8* }
%struct.__FILE_s.70 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.70*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.70*, i8*, i64)*, i64 (%struct.__FILE_s.70*, i8*, i64)*, i64 (%struct.__FILE_s.70*, i64, i32)*, i8*, i64, %struct.__FILE_s.70*, %struct.__FILE_s.70*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.70*)*, i8* }
%struct.dirent.139 = type { i64, i64, i16, i8, [256 x i8] }
%struct.__pthread.579 = type { %struct.__pthread.579*, i32, i32, i32, i32, i32*, i64, i64, i32, i32, i32, i8*, i64, i8*, i8* (i8*)*, i8*, i32, i32, %struct.__ptcb.580*, i8**, %struct.pthread_attr_t.581, i32, %struct.anon.582, i32, i32, %struct.__locale.583*, i32 }
%struct.__ptcb.580 = type { void (i8*)*, i8*, %struct.__ptcb.580* }
%struct.pthread_attr_t.581 = type { %union.anon.584 }
%union.anon.584 = type { [7 x i64] }
%struct.anon.582 = type { i8**, i64, i8* }
%struct.__locale.583 = type opaque
%struct.sigaction.585 = type { %union.anon.0.586, %struct.sigset_t.587, i32, void ()* }
%union.anon.0.586 = type { void (i32)* }
%struct.sigset_t.587 = type { [16 x i64] }
%struct.statfs = type { i64, i64, i64, i64, i64, i64, i64, %struct.fsid_t, i64, i64, i64, [4 x i64] }
%struct.fsid_t = type { [2 x i32] }
%struct.__va_list_tag.635 = type { i32, i32, i8*, i8* }
%struct.utmpx = type { i16, i32, [32 x i8], [4 x i8], [32 x i8], [256 x i8], %struct.anon.717, i64, %struct.timeval.718, [4 x i32], [20 x i8] }
%struct.anon.717 = type { i16, i16 }
%struct.timeval.718 = type { i64, i64 }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.timeval = type { i64, i64 }
%struct.timex = type { i32, i64, i64, i64, i64, i32, i64, i64, i64, %struct.timeval, i64, i64, i64, i32, i64, i64, i64, i64, i64, i32, [11 x i32] }
%struct.timex.0 = type { i32, i64, i64, i64, i64, i32, i64, i64, i64, %struct.timeval.1, i64, i64, i64, i32, i64, i64, i64, i64, i64, i32, [11 x i32] }
%struct.timeval.1 = type { i64, i64 }
%struct.aiocb = type { i32, i32, i32, i8*, i64, %struct.sigevent, i8*, [2 x i32], i32, i64, i64, i8*, i8*, [16 x i8] }
%struct.sigevent = type { %union.sigval, i32, i32, void (i8*)*, %struct.pthread_attr_t*, [32 x i8] }
%union.sigval = type { i8* }
%struct.pthread_attr_t = type { %union.anon }
%union.anon = type { [7 x i64] }
%struct.aiocb.2 = type { i32, i32, i32, i8*, i64, %struct.sigevent.3, i8*, [2 x i32], i32, i64, i64, i8*, i8*, [16 x i8] }
%struct.sigevent.3 = type { %union.sigval.4, i32, i32, void (i8*)*, %struct.pthread_attr_t.5*, [32 x i8] }
%union.sigval.4 = type { i8* }
%struct.pthread_attr_t.5 = type { %union.anon.6 }
%union.anon.6 = type { [7 x i64] }
%struct.aiocb.7 = type { i32, i32, i32, i8*, i64, %struct.sigevent.8, i8*, [2 x i32], i32, i64, i64, i8*, i8*, [16 x i8] }
%struct.sigevent.8 = type { %union.sigval.9, i32, i32, void (i8*)*, %struct.pthread_attr_t.10*, [32 x i8] }
%union.sigval.9 = type { i8* }
%struct.pthread_attr_t.10 = type { %union.anon.11 }
%union.anon.11 = type { [7 x i64] }
%struct.aiocb.12 = type { i32, i32, i32, i8*, i64, %struct.sigevent.13, i8*, [2 x i32], i32, i64, i64, i8*, i8*, [16 x i8] }
%struct.sigevent.13 = type { %union.sigval.14, i32, i32, void (i8*)*, %struct.pthread_attr_t.15*, [32 x i8] }
%union.sigval.14 = type { i8* }
%struct.pthread_attr_t.15 = type { %union.anon.16 }
%union.anon.16 = type { [7 x i64] }
%struct.aiocb.17 = type { i32, i32, i32, i8*, i64, %struct.sigevent.18, i8*, [2 x i32], i32, i64, i64, i8*, i8*, [16 x i8] }
%struct.sigevent.18 = type { %union.sigval.19, i32, i32, void (i8*)*, %struct.pthread_attr_t.20*, [32 x i8] }
%union.sigval.19 = type { i8* }
%struct.pthread_attr_t.20 = type { %union.anon.21 }
%union.anon.21 = type { [7 x i64] }
%struct.timespec = type { i64, i64 }
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.sockaddr.24 = type { i16, [14 x i8] }
%struct.__ptcb = type { void (i8*)*, i8*, %struct.__ptcb* }
%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.termios.25 = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.timespec.28 = type { i64, i64 }
%struct.timespec.30 = type { i64, i64 }
%struct.tms = type { i64, i64, i64, i64 }
%struct.timespec.32 = type { i64, i64 }
%struct.__DIR_s = type { i32, i32, i64, i32, i32, [2048 x i8] }
%struct.sockaddr.33 = type { i16, [14 x i8] }
%struct.des_ctx = type { i32, [32 x i8], [56 x i8], [64 x i8], [16 x i32], [16 x i32], [8 x [256 x i32]], [8 x [256 x i32]], [8 x [128 x i32]], [8 x [128 x i32]], [8 x [128 x i32]], [8 x [128 x i32]], [4 x [256 x i32]] }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.__DIR_s.36 = type { i32, i32, i64, i32, i32, [2048 x i8] }
%union.anon.38 = type { %struct.sockaddr_in6 }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }
%struct.in6_addr = type { %union.anon.0 }
%union.anon.0 = type { [4 x i32] }
%struct.pollfd = type { i32, i16, i16 }
%struct.__va_list_tag.42 = type { i32, i32, i8*, i8* }
%struct.__locale = type { i32 }
%struct.epoll_event = type <{ i32, %union.epoll_data }>
%union.epoll_data = type { i8* }
%struct.epoll_event.43 = type <{ i32, %union.epoll_data.44 }>
%union.epoll_data.44 = type { i8* }
%struct.sigset_t = type { [16 x i64] }
%struct.epoll_event.45 = type <{ i32, %union.epoll_data.46 }>
%union.epoll_data.46 = type { i8* }
%struct.__va_list_tag.48 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.49 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.50 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.51 = type { i32, i32, i8*, i8* }
%struct.__FILE_s.54 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.54*, i8*, i64)*, i64 (%struct.__FILE_s.54*, i8*, i64)*, i64 (%struct.__FILE_s.54*, i64, i32)*, i8*, i64, %struct.__FILE_s.54*, %struct.__FILE_s.54*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__va_list_tag.57 = type { i32, i32, i8*, i8* }
%struct.__DIR_s.58 = type { i32, i32, i64, i32, i32, [2048 x i8] }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.59, %struct.timespec.59, %struct.timespec.59, [3 x i64] }
%struct.timespec.59 = type { i64, i64 }
%struct.termios.62 = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.__libc.60 = type { i8*, i32, i32, i64*, i32 (void ()*)*, void ()*, void ()*, i32, i32, %struct.__FILE_s.61*, i32 }
%struct.fenv_t = type { i16, i16, i16, i16, i16, i16, i32, i16, [2 x i8], i32, i16, i16, i32 }
%struct.__libc.68 = type { i8*, i32, i32, i64*, i32 (void ()*)*, void ()*, void ()*, i32, i32, %struct.__FILE_s.67*, i32 }
%union.fpos_t = type { double, [8 x i8] }
%struct.__FILE_s.72 = type opaque
%struct.mbstate_t = type { i32, i32 }
%struct.__FILE_s.77 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.77*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.77*, i8*, i64)*, i64 (%struct.__FILE_s.77*, i8*, i64)*, i64 (%struct.__FILE_s.77*, i64, i32)*, i8*, i64, %struct.__FILE_s.77*, %struct.__FILE_s.77*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.77*)*, i8* }
%struct.__FILE_s.79 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.79*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.79*, i8*, i64)*, i64 (%struct.__FILE_s.79*, i8*, i64)*, i64 (%struct.__FILE_s.79*, i64, i32)*, i8*, i64, %struct.__FILE_s.79*, %struct.__FILE_s.79*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.79*)*, i8* }
%struct.__libc.78 = type { i8*, i32, i32, i64*, i32 (void ()*)*, void ()*, void ()*, i32, i32, %struct.__FILE_s.79*, i32 }
%struct.termios.82 = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.mbstate_t.89 = type { i32, i32 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr.91*, i8*, %struct.addrinfo* }
%struct.sockaddr.91 = type opaque
%struct.__locale.92 = type { i32 }
%struct.__FILE_s.94 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.94*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.94*, i8*, i64)*, i64 (%struct.__FILE_s.94*, i8*, i64)*, i64 (%struct.__FILE_s.94*, i64, i32)*, i8*, i64, %struct.__FILE_s.94*, %struct.__FILE_s.94*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.94*)*, i8* }
%struct.__va_list_tag.95 = type { i32, i32, i8*, i8* }
%union.fpos_t.98 = type { double, [8 x i8] }
%struct.stat.99 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.100, %struct.timespec.100, %struct.timespec.100, [3 x i64] }
%struct.timespec.100 = type { i64, i64 }
%struct.stat.104 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.105, %struct.timespec.105, %struct.timespec.105, [3 x i64] }
%struct.timespec.105 = type { i64, i64 }
%struct.__FILE_s.106 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.106*, i8*, i64)*, i64 (%struct.__FILE_s.106*, i8*, i64)*, i64 (%struct.__FILE_s.106*, i64, i32)*, i8*, i64, %struct.__FILE_s.106*, %struct.__FILE_s.106*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__pthread = type { %struct.__pthread*, i32, i32, i32, i32, i32*, i64, i64, i32, i32, i32, i8*, i64, i8*, i8* (i8*)*, i8*, i32, i32, %struct.__ptcb.107*, i8**, %struct.pthread_attr_t.108, i32, %struct.anon, i32, i32, %struct.__locale.109*, i32 }
%struct.__ptcb.107 = type { void (i8*)*, i8*, %struct.__ptcb.107* }
%struct.pthread_attr_t.108 = type { %union.anon.110 }
%union.anon.110 = type { [7 x i64] }
%struct.anon = type { i8**, i64, i8* }
%struct.__locale.109 = type { i32 }
%struct.stat.111 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.112, %struct.timespec.112, %struct.timespec.112, [3 x i64] }
%struct.timespec.112 = type { i64, i64 }
%struct.FTW = type { i32, i32 }
%struct.__FILE_s.113 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.113*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.113*, i8*, i64)*, i64 (%struct.__FILE_s.113*, i8*, i64)*, i64 (%struct.__FILE_s.113*, i64, i32)*, i8*, i64, %struct.__FILE_s.113*, %struct.__FILE_s.113*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.113*)*, i8* }
%struct.timespec.114 = type { i64, i64 }
%struct.timeval.115 = type { i64, i64 }
%struct.__FILE_s.117 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.117*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.117*, i8*, i64)*, i64 (%struct.__FILE_s.117*, i8*, i64)*, i64 (%struct.__FILE_s.117*, i64, i32)*, i8*, i64, %struct.__FILE_s.117*, %struct.__FILE_s.117*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.117*)*, i8* }
%struct.__FILE_s.118 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.118*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.118*, i8*, i64)*, i64 (%struct.__FILE_s.118*, i8*, i64)*, i64 (%struct.__FILE_s.118*, i64, i32)*, i8*, i64, %struct.__FILE_s.118*, %struct.__FILE_s.118*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.118*)*, i8* }
%struct.__va_list_tag.119 = type { i32, i32, i8*, i8* }
%struct.__FILE_s.121 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.121*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.121*, i8*, i64)*, i64 (%struct.__FILE_s.121*, i8*, i64)*, i64 (%struct.__FILE_s.121*, i64, i32)*, i8*, i64, %struct.__FILE_s.121*, %struct.__FILE_s.121*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.121*)*, i8* }
%struct.__va_list_tag.122 = type { i32, i32, i8*, i8* }
%struct.addrinfo.125 = type { i32, i32, i32, i32, i32, %struct.sockaddr.126*, i8*, %struct.addrinfo.125* }
%struct.sockaddr.126 = type { i16, [14 x i8] }
%union.sa = type { %struct.sockaddr_in6.127 }
%struct.sockaddr_in6.127 = type { i16, i16, i32, %struct.in6_addr.128, i32 }
%struct.in6_addr.128 = type { %union.anon.129 }
%union.anon.129 = type { [4 x i32] }
%struct.aibuf = type { %struct.addrinfo.125, %union.sa }
%struct.__FILE_s.132 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.132*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.132*, i8*, i64)*, i64 (%struct.__FILE_s.132*, i8*, i64)*, i64 (%struct.__FILE_s.132*, i64, i32)*, i8*, i64, %struct.__FILE_s.132*, %struct.__FILE_s.132*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.132*)*, i8* }
%struct.__FILE_s.138 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.138*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.138*, i8*, i64)*, i64 (%struct.__FILE_s.138*, i8*, i64)*, i64 (%struct.__FILE_s.138*, i64, i32)*, i8*, i64, %struct.__FILE_s.138*, %struct.__FILE_s.138*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.138*)*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__FILE_s.140 = type opaque
%struct.group.144 = type { i8*, i8*, i32, i8** }
%union.anon.147 = type { %struct.sockaddr_in6.148 }
%struct.sockaddr_in6.148 = type { i16, i16, i32, %struct.in6_addr.149, i32 }
%struct.in6_addr.149 = type { %union.anon.0.150 }
%union.anon.0.150 = type { [4 x i32] }
%struct.sockaddr.151 = type { i16, [14 x i8] }
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.itimerval = type { %struct.timeval.158, %struct.timeval.158 }
%struct.timeval.158 = type { i64, i64 }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.termios.162 = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.sockaddr.163 = type { i16, [14 x i8] }
%struct.rusage = type { %struct.timeval.171, %struct.timeval.171, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [16 x i64] }
%struct.timeval.171 = type { i64, i64 }
%struct.sockaddr_in.177 = type { i16, i16, %struct.in_addr.178, [8 x i8] }
%struct.in_addr.178 = type { i32 }
%struct.sockaddr.181 = type { i16, [14 x i8] }
%struct.spwd = type { i8*, i8*, i64, i64, i64, i64, i64, i64, i64 }
%struct.timeval.188 = type { i64, i64 }
%struct.glob_t = type { i64, i8**, i64, i32, [5 x i8*] }
%struct.dirent.193 = type { i64, i64, i16, i8, [256 x i8] }
%struct.if_nameindex = type { i32, i8* }
%struct.ifreq = type { %union.anon.200, %union.anon.0.201 }
%union.anon.200 = type { [16 x i8] }
%union.anon.0.201 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.if_nameindex.202 = type { i32, i8* }
%struct.ifconf = type { i32, %union.anon.203 }
%union.anon.203 = type { i8* }
%struct.ifreq.204 = type { %union.anon.0.205, %union.anon.1 }
%union.anon.0.205 = type { [16 x i8] }
%union.anon.1 = type { %struct.ifmap.206 }
%struct.ifmap.206 = type { i64, i64, i16, i8, i8, i8 }
%struct.ifreq.207 = type { %union.anon.208, %union.anon.0.209 }
%union.anon.208 = type { [16 x i8] }
%union.anon.0.209 = type { %struct.ifmap.210 }
%struct.ifmap.210 = type { i64, i64, i16, i8, i8, i8 }
%struct.sockaddr_in.211 = type { i16, i16, %struct.in_addr.212, [8 x i8] }
%struct.in_addr.212 = type { i32 }
%struct.in_addr.213 = type { i32 }
%struct.node = type { %struct.node*, %struct.node* }
%struct.intparse = type { i64, i32, i64, i8, i8, i8, i8 }
%struct.__va_list_tag.217 = type { i32, i32, i8*, i8* }
%struct.__locale.218 = type opaque
%struct.__locale.219 = type opaque
%struct.__locale.221 = type opaque
%struct.__locale.222 = type opaque
%struct.__locale.223 = type opaque
%struct.__locale.224 = type opaque
%struct.__locale.225 = type opaque
%struct.__locale.226 = type opaque
%struct.__locale.227 = type opaque
%struct.__locale.228 = type opaque
%struct.__locale.229 = type opaque
%struct.__locale.230 = type opaque
%struct.__locale.231 = type opaque
%struct.__locale.232 = type opaque
%struct.__locale.233 = type opaque
%struct.__locale.234 = type opaque
%struct.__locale.235 = type opaque
%struct.__locale.236 = type opaque
%struct.__locale.237 = type opaque
%struct.__locale.238 = type opaque
%struct.__locale.239 = type opaque
%struct.range = type { [3 x i8], i8 }
%struct.__locale.240 = type opaque
%struct.__locale.241 = type opaque
%struct.__locale.242 = type opaque
%struct.__locale.243 = type opaque
%struct.flock = type { i16, i16, i64, i64, i32 }
%struct.stat.250 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.251, %struct.timespec.251, %struct.timespec.251, [3 x i64] }
%struct.timespec.251 = type { i64, i64 }
%struct.timeval.252 = type { i64, i64 }
%struct.mq_attr = type { i64, i64, i64, i64, [4 x i64] }
%struct.sigevent.267 = type { %union.sigval.268, i32, i32, void (i8*)*, %struct.pthread_attr_t.269*, [32 x i8] }
%union.sigval.268 = type { i8* }
%struct.pthread_attr_t.269 = type { %union.anon.0.270 }
%union.anon.0.270 = type { [7 x i64] }
%struct.pthread_barrier_t = type { %union.anon.271 }
%union.anon.271 = type { [4 x i8*] }
%struct.args = type { %struct.pthread_barrier_t, i32, %struct.sigevent.267* }
%struct.__pthread.272 = type opaque
%struct.__va_list_tag.273 = type { i32, i32, i8*, i8* }
%struct.mq_attr.274 = type { i64, i64, i64, i64, [4 x i64] }
%struct.timespec.275 = type { i64, i64 }
%struct.timespec.276 = type { i64, i64 }
%struct.__va_list_tag.280 = type { i32, i32, i8*, i8* }
%struct.msqid_ds = type { %struct.ipc_perm, i64, i64, i64, i64, i64, i64, i32, i32, [2 x i64] }
%struct.ipc_perm = type { i32, i32, i32, i32, i32, i32, i32, i64, i64 }
%struct.timespec.281 = type { i64, i64 }
%struct.netent = type { i8*, i8**, i32, i32 }
%struct.__locale.285 = type { i32 }
%struct.history = type { %struct.history*, i64, i64, i32, i32 }
%struct.dirent.290 = type { i64, i64, i16, i8, [256 x i8] }
%struct.__locale.291 = type opaque
%struct.__va_list_tag.292 = type { i32, i32, i8*, i8* }
%struct.__FILE_s.295 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.295*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.295*, i8*, i64)*, i64 (%struct.__FILE_s.295*, i8*, i64)*, i64 (%struct.__FILE_s.295*, i64, i32)*, i8*, i64, %struct.__FILE_s.295*, %struct.__FILE_s.295*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.295*)*, i8* }
%struct.__libc.294 = type { i8*, i32, i32, i64*, i32 (void ()*)*, void ()*, void ()*, i32, i32, %struct.__FILE_s.295*, i32 }
%struct.__va_list_tag.296 = type { i32, i32, i8*, i8* }
%struct.__FILE_s.300 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.300*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.300*, i8*, i64)*, i64 (%struct.__FILE_s.300*, i8*, i64)*, i64 (%struct.__FILE_s.300*, i64, i32)*, i8*, i64, %struct.__FILE_s.300*, %struct.__FILE_s.300*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.300*)*, i8* }
%struct.__libc.299 = type { i8*, i32, i32, i64*, i32 (void ()*)*, void ()*, void ()*, i32, i32, %struct.__FILE_s.300*, i32 }
%struct.posix_spawnattr_t = type { i32, i32, %struct.sigset_t.307, %struct.sigset_t.307, i32, i32, [16 x i32] }
%struct.sigset_t.307 = type { [16 x i64] }
%struct.posix_spawnattr_t.308 = type { i32, i32, %struct.sigset_t.309, %struct.sigset_t.309, i32, i32, [16 x i32] }
%struct.sigset_t.309 = type { [16 x i64] }
%struct.posix_spawnattr_t.310 = type { i32, i32, %struct.sigset_t.311, %struct.sigset_t.311, i32, i32, [16 x i32] }
%struct.sigset_t.311 = type { [16 x i64] }
%struct.posix_spawnattr_t.312 = type { i32, i32, %struct.sigset_t.313, %struct.sigset_t.313, i32, i32, [16 x i32] }
%struct.sigset_t.313 = type { [16 x i64] }
%struct.posix_spawnattr_t.314 = type { i32, i32, %struct.sigset_t.315, %struct.sigset_t.315, i32, i32, [16 x i32] }
%struct.sigset_t.315 = type { [16 x i64] }
%struct.posix_spawnattr_t.316 = type { i32, i32, %struct.sigset_t.317, %struct.sigset_t.317, i32, i32, [16 x i32] }
%struct.sigset_t.317 = type { [16 x i64] }
%struct.posix_spawnattr_t.318 = type { i32, i32, %struct.sigset_t.319, %struct.sigset_t.319, i32, i32, [16 x i32] }
%struct.sigset_t.319 = type { [16 x i64] }
%struct.posix_spawnattr_t.320 = type { i32, i32, %struct.sigset_t.321, %struct.sigset_t.321, i32, i32, [16 x i32] }
%struct.sigset_t.321 = type { [16 x i64] }
%struct.posix_spawnattr_t.322 = type { i32, i32, %struct.sigset_t.323, %struct.sigset_t.323, i32, i32, [16 x i32] }
%struct.sigset_t.323 = type { [16 x i64] }
%struct.posix_spawnattr_t.324 = type { i32, i32, %struct.sigset_t.325, %struct.sigset_t.325, i32, i32, [16 x i32] }
%struct.sigset_t.325 = type { [16 x i64] }
%struct.posix_spawn_file_actions_t = type { [2 x i32], i8*, [16 x i32] }
%struct.fdop = type { %struct.fdop*, %struct.fdop*, i32, i32, i32, i32, i32, [0 x i8] }
%struct.posix_spawn_file_actions_t.326 = type { [2 x i32], i8*, [16 x i32] }
%struct.fdop.327 = type { %struct.fdop.327*, %struct.fdop.327*, i32, i32, i32, i32, i32, [0 x i8] }
%struct.posix_spawn_file_actions_t.328 = type { [2 x i32], i8*, [16 x i32] }
%struct.fdop.329 = type { %struct.fdop.329*, %struct.fdop.329*, i32, i32, i32, i32, i32, [0 x i8] }
%struct.posix_spawn_file_actions_t.330 = type { [2 x i32], i8*, [16 x i32] }
%struct.fdop.331 = type { %struct.fdop.331*, %struct.fdop.331*, i32, i32, i32, i32, i32, [0 x i8] }
%struct.posix_spawn_file_actions_t.332 = type { [2 x i32], i8*, [16 x i32] }
%struct.posix_spawn_file_actions_t.333 = type { [2 x i32], i8*, [16 x i32] }
%struct.posix_spawnattr_t.334 = type { i32, i32, %struct.sigset_t.335, %struct.sigset_t.335, i32, i32, [16 x i32] }
%struct.sigset_t.335 = type { [16 x i64] }
%struct.sigaction = type { %union.anon.336, %struct.sigset_t.335, i32, void ()* }
%union.anon.336 = type { void (i32)* }
%struct.fdop.337 = type { %struct.fdop.337*, %struct.fdop.337*, i32, i32, i32, i32, i32, [0 x i8] }
%struct.__va_list_tag.341 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.342 = type { i32, i32, i8*, i8* }
%struct.rlimit.343 = type { i64, i64 }
%struct.fd_set = type { [16 x i64] }
%struct.timespec.344 = type { i64, i64 }
%struct.sigset_t.345 = type { [16 x i64] }
%struct.__siginfo = type { i32, i32, i32, %union.anon.347 }
%union.anon.347 = type { %struct.anon.1, [88 x i8] }
%struct.anon.1 = type { i32, i32, i32, i64, i64 }
%struct.pthread_attr_t.349 = type { %union.anon.350 }
%union.anon.350 = type { [7 x i64] }
%struct.pthread_attr_t.351 = type { %union.anon.352 }
%union.anon.352 = type { [7 x i64] }
%struct.pthread_attr_t.353 = type { %union.anon.354 }
%union.anon.354 = type { [7 x i64] }
%struct.pthread_attr_t.355 = type { %union.anon.356 }
%union.anon.356 = type { [7 x i64] }
%struct.sched_param = type { i32, i32, %struct.timespec.357, %struct.timespec.357, i32 }
%struct.timespec.357 = type { i64, i64 }
%struct.pthread_attr_t.358 = type { %union.anon.359 }
%union.anon.359 = type { [7 x i64] }
%struct.pthread_attr_t.360 = type { %union.anon.361 }
%union.anon.361 = type { [7 x i64] }
%struct.pthread_attr_t.366 = type { %union.anon.367 }
%union.anon.367 = type { [7 x i64] }
%struct.pthread_attr_t.368 = type { %union.anon.369 }
%union.anon.369 = type { [7 x i64] }
%struct.sched_param.370 = type { i32, i32, %struct.timespec.371, %struct.timespec.371, i32 }
%struct.timespec.371 = type { i64, i64 }
%struct.pthread_attr_t.372 = type { %union.anon.373 }
%union.anon.373 = type { [7 x i64] }
%struct.pthread_attr_t.374 = type { %union.anon.375 }
%union.anon.375 = type { [7 x i64] }
%struct.instance = type { i32, i32, i32, i32 }
%struct.pthread_cond_t = type { %union.anon.382 }
%union.anon.382 = type { [6 x i8*] }
%struct.pthread_cond_t.389 = type { %union.anon.390 }
%union.anon.390 = type { [6 x i8*] }
%struct.pthread_cond_t.391 = type { %union.anon.392 }
%union.anon.392 = type { [6 x i8*] }
%struct.pthread_cond_t.393 = type { %union.anon.394 }
%union.anon.394 = type { [6 x i8*] }
%struct.pthread_cond_t.395 = type { %union.anon.396 }
%union.anon.396 = type { [6 x i8*] }
%struct.pthread_mutex_t = type { %union.anon.0.397 }
%union.anon.0.397 = type { [5 x i8*] }
%struct.cm = type { %struct.pthread_cond_t.395*, %struct.pthread_mutex_t* }
%struct.__pthread.410 = type { %struct.__pthread.410*, i32, i32, i32, i32, i32*, i64, i64, i32, i32, i32, i8*, i64, i8*, i8* (i8*)*, i8*, i32, i32, %struct.__ptcb.411*, i8**, %struct.pthread_attr_t.412, i32, %struct.anon.413, i32, i32, %struct.__locale.414*, i32 }
%struct.__ptcb.411 = type { void (i8*)*, i8*, %struct.__ptcb.411* }
%struct.pthread_attr_t.412 = type { %union.anon.415 }
%union.anon.415 = type { [7 x i64] }
%struct.anon.413 = type { i8**, i64, i8* }
%struct.__locale.414 = type opaque
%struct.__pthread.416 = type opaque
%struct.__pthread.424 = type { %struct.__pthread.424*, i32, i32, i32, i32, i32*, i64, i64, i32, i32, i32, i8*, i64, i8*, i8* (i8*)*, i8*, i32, i32, %struct.__ptcb.425*, i8**, %struct.pthread_attr_t.426, i32, %struct.anon.427, i32, i32, %struct.__locale.428*, i32 }
%struct.__ptcb.425 = type { void (i8*)*, i8*, %struct.__ptcb.425* }
%struct.pthread_attr_t.426 = type { %union.anon.429 }
%union.anon.429 = type { [7 x i64] }
%struct.anon.427 = type { i8**, i64, i8* }
%struct.__locale.428 = type opaque
%struct.pthread_mutex_t.430 = type { %union.anon.431 }
%union.anon.431 = type { [5 x i8*] }
%struct.pthread_mutex_t.438 = type { %union.anon.439 }
%union.anon.439 = type { [5 x i8*] }
%struct.pthread_mutex_t.440 = type { %union.anon.441 }
%union.anon.441 = type { [5 x i8*] }
%struct.timespec.444 = type { i64, i64 }
%struct.pthread_rwlockattr_t = type { [2 x i32] }
%struct.pthread_rwlockattr_t.471 = type { [2 x i32] }
%struct.pthread_rwlockattr_t.472 = type { [2 x i32] }
%struct.pthread_rwlockattr_t.473 = type { [2 x i32] }
%struct.pthread_rwlock_t = type { %union.anon.474 }
%union.anon.474 = type { [7 x i8*] }
%struct.pthread_rwlock_t.475 = type { %union.anon.476 }
%union.anon.476 = type { [7 x i8*] }
%struct.pthread_rwlockattr_t.477 = type { [2 x i32] }
%struct.pthread_rwlock_t.478 = type { %union.anon.479 }
%union.anon.479 = type { [7 x i8*] }
%struct.timespec.480 = type { i64, i64 }
%struct.pthread_rwlock_t.484 = type { %union.anon.485 }
%union.anon.485 = type { [7 x i8*] }
%struct.pthread_rwlock_t.491 = type { %union.anon.492 }
%union.anon.492 = type { [7 x i8*] }
%struct.sigset_t.502 = type { [16 x i64] }
%struct.__va_list_tag.503 = type { i32, i32, i8*, i8* }
%struct.sigset_t.511 = type { [16 x i64] }
%struct.iovec = type { i8*, i64 }
%struct.msghdr = type { i8*, i32, %struct.iovec.519*, i32, i32, i8*, i32, i32, i32 }
%struct.iovec.519 = type { i8*, i64 }
%struct.regex_t = type { i64, i8*, [4 x i8*], i64 }
%struct.tre_ast_node_t = type { i32, i8*, i32, i32, i32, i32, %struct.tre_pos_and_tags_t*, %struct.tre_pos_and_tags_t* }
%struct.tre_pos_and_tags_t = type { i32, i32, i32, i32*, i32, i32, i32*, i32 }
%struct.tre_parse_ctx_t = type { %struct.tre_mem_struct*, %struct.tre_stack_rec*, %struct.tre_ast_node_t*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32 }
%struct.tre_mem_struct = type { %struct.tre_list*, %struct.tre_list*, i8*, i64, i32, i8** }
%struct.tre_list = type { i8*, %struct.tre_list* }
%struct.tre_stack_rec = type { i32, i32, i32, i32, i8** }
%struct.tre_literal_t = type { i64, i64, i32, i32, i32* }
%struct.tnfa = type { %struct.tnfa_transition*, i32, %struct.tnfa_transition*, %struct.tnfa_transition*, %struct.tre_submatch_data*, i32, i32*, i32, i32, i32, i32, i32 }
%struct.tnfa_transition = type { i32, i32, %struct.tnfa_transition*, i32, i32*, i32, %union.anon.521, i32* }
%union.anon.521 = type { i32 }
%struct.tre_submatch_data = type { i32, i32, i32* }
%struct.tre_tag_states_t = type { i32, i32 }
%struct.regex_t.522 = type { i64, i8*, [4 x i8*], i64 }
%struct.regex_t.523 = type { i64, i8*, [4 x i8*], i64 }
%struct.regmatch_t = type { i64, i64 }
%struct.tnfa.524 = type { %struct.tnfa_transition.525*, i32, %struct.tnfa_transition.525*, %struct.tnfa_transition.525*, %struct.tre_submatch_data.526*, i32, i32*, i32, i32, i32, i32, i32 }
%struct.tnfa_transition.525 = type { i32, i32, %struct.tnfa_transition.525*, i32, i32*, i32, %union.anon.527, i32* }
%union.anon.527 = type { i32 }
%struct.tre_submatch_data.526 = type { i32, i32, i32* }
%struct.tre_backtrack_struct = type { %struct.tre_backtrack_item_t, %struct.tre_backtrack_struct*, %struct.tre_backtrack_struct* }
%struct.tre_backtrack_item_t = type { i32, i8*, %struct.tnfa_transition.525*, i32, i32, i32* }
%struct.tre_tnfa_reach_t = type { %struct.tnfa_transition.525*, i32* }
%struct.tre_reach_pos_t = type { i32, i32** }
%struct.__DIR_s.537 = type { i32, i32, i64, i32, i32, [2048 x i8] }
%struct.rctx = type { void (%struct.rctx*)*, i8*, i32, i32 (...)*, i32, i32, i32, i32, i32 }
%struct.__va_list_tag.541 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.543 = type { i32, i32, i8*, i8* }
%struct.__DIR_s.544 = type { i32, i32, i64, i32, i32, [2048 x i8] }
%struct.fd_set.545 = type { [16 x i64] }
%struct.timeval.546 = type { i64, i64 }
%struct.__va_list_tag.547 = type { i32, i32, i8*, i8* }
%struct.sem_t = type { [8 x i32] }
%struct.sem_t.548 = type { [8 x i32] }
%struct.__va_list_tag.552 = type { i32, i32, i8*, i8* }
%struct.stat.554 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.29, %struct.timespec.29, %struct.timespec.29, [3 x i64] }
%struct.sembuf = type { i16, i16, i16 }
%struct.sem_t.555 = type { [8 x i32] }
%struct.sem_t.556 = type { [8 x i32] }
%struct.msghdr.561 = type { i8*, i32, %struct.iovec.562*, i32, i32, i8*, i32, i32, i32 }
%struct.iovec.562 = type { i8*, i64 }
%struct.servent.565 = type { i8*, i8**, i32, i8* }
%struct.__FILE_s.566 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.566*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.566*, i8*, i64)*, i64 (%struct.__FILE_s.566*, i8*, i64)*, i64 (%struct.__FILE_s.566*, i64, i32)*, i8*, i64, %struct.__FILE_s.566*, %struct.__FILE_s.566*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.566*)*, i8* }
%struct.itimerval.568 = type { %struct.timeval.569, %struct.timeval.569 }
%struct.timeval.569 = type { i64, i64 }
%struct.rlimit.571 = type { i64, i64 }
%struct.ctx = type { %struct.rlimit.571*, i32, i32 }
%struct.timeval.572 = type { i64, i64 }
%struct.ctx.577 = type { i32, i32, i32, i32, i32, i32 }
%struct.shmid_ds = type { %struct.ipc_perm.578, i64, i64, i64, i64, i32, i32, i64, i64, i64 }
%struct.ipc_perm.578 = type { i32, i32, i32, i32, i32, i32, i32, i64, i64 }
%struct.anon.7 = type { i8*, i64, void ()*, %struct.sigset_t.587 }
%struct.sigset_t.588 = type { [16 x i64] }
%struct.stack_t = type { i8*, i32, i64 }
%struct.sigset_t.589 = type { [16 x i64] }
%struct.sigset_t.590 = type { [16 x i64] }
%struct.sigset_t.591 = type { [16 x i64] }
%struct.sigaction.593 = type { %union.anon.594, %struct.sigset_t.590, i32, void ()* }
%union.anon.594 = type { void (i32)* }
%struct.sigset_t.602 = type { [16 x i64] }
%struct.sigset_t.607 = type { [16 x i64] }
%struct.__siginfo.609 = type { i32, i32, i32, %union.anon.610 }
%union.anon.610 = type { %struct.anon.1.611, [88 x i8] }
%struct.anon.1.611 = type { i32, i32, i32, i64, i64 }
%struct.sigaction.615 = type { %union.anon.616, %struct.sigset_t.590, i32, void ()* }
%union.anon.616 = type { void (i32)* }
%struct.sigset_t.619 = type { [16 x i64] }
%struct.__siginfo.620 = type { i32, i32, i32, %union.anon.621 }
%union.anon.621 = type { %struct.anon.1.622, [88 x i8] }
%struct.anon.1.622 = type { i32, i32, i32, i64, i64 }
%struct.timespec.623 = type { i64, i64 }
%struct.__va_list_tag.636 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.637 = type { i32, i32, i8*, i8* }
%struct.statvfs = type <{ i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [6 x i32] }>
%struct.__FILE_s.643 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.643*)*, i8*, i8*, i8*, i8*, {}*, i64 (%struct.__FILE_s.643*, i8*, i64)*, i64 (%struct.__FILE_s.643*, i64, i32)*, i8*, i64, %struct.__FILE_s.643*, %struct.__FILE_s.643*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.643*)*, i8* }
%struct.iovec.644 = type { i8*, i64 }
%struct.__FILE_s.646 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.646*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.646*, i8*, i64)*, i64 (%struct.__FILE_s.646*, i8*, i64)*, {}*, i8*, i64, %struct.__FILE_s.646*, %struct.__FILE_s.646*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.646*)*, i8* }
%struct.__FILE_s.647 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.647*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.647*, i8*, i64)*, {}*, i64 (%struct.__FILE_s.647*, i64, i32)*, i8*, i64, %struct.__FILE_s.647*, %struct.__FILE_s.647*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.647*)*, i8* }
%struct.iovec.648 = type { i8*, i64 }
%struct.termios.651 = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.__locale.653 = type opaque
%struct.__locale.654 = type opaque
%struct.__locale.655 = type opaque
%struct.tm.656 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__locale.657 = type opaque
%struct.__locale.659 = type opaque
%struct.__locale.663 = type opaque
%struct.__va_list_tag.664 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.665 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.666 = type { i32, i32, i8*, i8* }
%struct.sysinfo = type opaque
%struct.sigaction.671 = type { %union.anon.672, %struct.sigset_t.590, i32, void ()* }
%union.anon.672 = type { void (i32)* }
%struct.__DIR_s.675 = type { i32, i32, i64, i32, i32, [2048 x i8] }
%struct.itimerspec = type { %struct.timespec.680, %struct.timespec.680 }
%struct.timespec.680 = type { i64, i64 }
%struct.itimerspec.681 = type { %struct.timespec.682, %struct.timespec.682 }
%struct.timespec.682 = type { i64, i64 }
%struct.tms.683 = type { i64, i64, i64, i64 }
%struct.timespec.686 = type { i64, i64 }
%struct.__locale.688 = type opaque
%struct.__FILE_s.689 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.689*, i8*, i64)*, i64 (%struct.__FILE_s.689*, i8*, i64)*, i64 (%struct.__FILE_s.689*, i64, i32)*, i8*, i64, %struct.__FILE_s.689*, %struct.__FILE_s.689*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__locale.690 = type opaque
%struct.__locale.691 = type opaque
%struct.__locale.693 = type opaque
%struct.__FILE_s.694 = type { i32, i8*, i8*, {}*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.694*, i8*, i64)*, i64 (%struct.__FILE_s.694*, i8*, i64)*, i64 (%struct.__FILE_s.694*, i64, i32)*, i8*, i64, %struct.__FILE_s.694*, %struct.__FILE_s.694*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, {}*, i8* }
%struct.__locale.695 = type opaque
%struct.node.698 = type { i8*, %struct.node.698*, %struct.node.698*, i32 }
%struct.__va_list_tag.704 = type { i32, i32, i8*, i8* }
%struct.__FILE_s.706 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.706*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.706*, i8*, i64)*, i64 (%struct.__FILE_s.706*, i8*, i64)*, i64 (%struct.__FILE_s.706*, i64, i32)*, i8*, i64, %struct.__FILE_s.706*, %struct.__FILE_s.706*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.706*)*, i8* }
%struct.__FILE_s.707 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.707*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.707*, i8*, i64)*, i64 (%struct.__FILE_s.707*, i8*, i64)*, i64 (%struct.__FILE_s.707*, i64, i32)*, i8*, i64, %struct.__FILE_s.707*, %struct.__FILE_s.707*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.707*)*, i8* }
%struct.utimbuf = type { i64, i64 }
%struct.timeval.716 = type { i64, i64 }
%struct.__FILE_s.721 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.721*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.721*, i8*, i64)*, i64 (%struct.__FILE_s.721*, i8*, i64)*, i64 (%struct.__FILE_s.721*, i64, i32)*, i8*, i64, %struct.__FILE_s.721*, %struct.__FILE_s.721*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.721*)*, i8* }
%struct.__va_list_tag.723 = type { i32, i32, i8*, i8* }
%union.arg = type { i64 }
%struct.rctx.726 = type { void (%struct.rctx.726*)*, i8*, i32, i32 (...)*, i32, i32, i32, i32, i32 }
%union.arg.729 = type { x86_fp80 }
%struct.rctx.732 = type { void (%struct.rctx.732*)*, i8*, i32, i32 (...)*, i32, i32, i32, i32, i32 }
%struct.rctx.741 = type { void (%struct.rctx.741*)*, i8*, i32, i32 (...)*, i32, i32, i32, i32, i32 }
%struct.__FILE_s.743 = type { i32, i8*, i8*, i32 (%struct.__FILE_s.743*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.743*, i8*, i64)*, i64 (%struct.__FILE_s.743*, i8*, i64)*, i64 (%struct.__FILE_s.743*, i64, i32)*, i8*, i64, %struct.__FILE_s.743*, %struct.__FILE_s.743*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.743*)*, i8* }
%struct.cookie = type { i32*, i64 }
%struct.rctx.745 = type { void (%struct.rctx.745*)*, i8*, i32, i32 (...)*, i32, i32, i32, i32, i32 }
%struct.__va_list_tag.747 = type { i32, i32, i8*, i8* }
%struct.__va_list_tag.749 = type { i32, i32, i8*, i8* }
%struct.rusage.750 = type { %struct.timeval.751, %struct.timeval.751, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [16 x i64] }
%struct.timeval.751 = type { i64, i64 }
%struct.__siginfo.754 = type { i32, i32, i32, %union.anon.755 }
%union.anon.755 = type { %struct.anon.1.756, [88 x i8] }
%struct.anon.1.756 = type { i32, i32, i32, i64, i64 }
%struct.mbstate_t.757 = type { i32, i32 }
%struct.__locale.758 = type opaque
%struct.__locale.759 = type opaque
%struct.__locale.762 = type opaque
%struct.__locale.768 = type opaque
%struct.__locale.770 = type opaque
%struct.__locale.771 = type opaque
%struct.range.772 = type { [3 x i8], i8 }
%struct.wordexp_t = type { i64, i8**, i64 }
%struct.iovec.775 = type { i8*, i64 }

@digits = internal constant [65 x i8] c"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 16
@l64a.s = internal global [7 x i8] zeroinitializer, align 1
@pio2_lo = internal constant float 0x3E74442D00000000, align 4
@pi1 = internal constant double 0x400921FB54442D18, align 8
@pi2 = internal constant double 0x3CA1A80000000000, align 8
@pio2_lo1 = internal constant double 0x3C91A62633145C07, align 8
@seq = internal global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"%.3s %.3s%3d %.2d:%.2d:%.2d %d\0A\00", align 1
@asctime.buf = internal global [26 x i8] zeroinitializer, align 16
@.str2 = private unnamed_addr constant [35 x i8] c"Assertion failed: %s (%s: %s: %d)\0A\00", align 1
@tiny = internal constant float 0x39B4484C00000000, align 4
@pi_lo = internal constant float 0xBE7777A5C0000000, align 4
@pi13 = internal constant double 0x400921FB54442D18, align 8
@pi24 = internal constant double 0x3CA1A80000000000, align 8
@tiny5 = internal constant x86_fp80 0xK3C1AAB70FE17C79AC800, align 16
@tiny6 = internal constant double 1.000000e-300, align 8
@pi_lo7 = internal constant double 0x3CA1A62633145C07, align 8
@atanhi = internal unnamed_addr constant [4 x float] [float 0x3FDDAC6700000000, float 0x3FE921FB40000000, float 0x3FEF730BC0000000, float 0x3FF921FB40000000], align 16
@atanlo = internal constant [4 x float] [float 0x3E3586ED20000000, float 0x3E64442D00000000, float 0x3E6281F680000000, float 0x3E74442D00000000], align 16
@atanhi12 = internal unnamed_addr constant [4 x double] [double 0x3FDDAC670561BB4F, double 0x3FE921FB54442D18, double 0x3FEF730BD281F69B, double 0x3FF921FB54442D18], align 16
@atanlo13 = internal constant [4 x double] [double 0x3C7A2B7F222F65E2, double 0x3C81A62633145C07, double 0x3C7007887AF0CBBD, double 0x3C91A62633145C07], align 16
@head = internal unnamed_addr global %struct.fl* null, align 8
@builtin = internal global %struct.fl zeroinitializer, align 8
@.str16 = private unnamed_addr constant [2 x i8] c".\00", align 1
@__cgt = global i32 (i32, %struct.timespec.29*)* @__vdso_clock_gettime, align 8
@.str56 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str1 = private unnamed_addr constant [14 x i8] c"/bin:/usr/bin\00", align 1
@.str257 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@C1hi = internal constant double 0x3FA5555555555555, align 8
@C1lo = internal constant double 0x3C44D80000000000, align 8
@invpio2hi = internal constant double 0x3FE45F306DC9C883, align 8
@invpio2lo = internal constant double 0xBC86B00000000000, align 8
@pio2_1thi = internal constant double 0xBD72E7B9676733AF, align 8
@pio2_1tlo = internal constant double 0x3A1C080000000000, align 8
@pio2_2thi = internal constant double 0x3AE8A2E03707344A, align 8
@pio2_2tlo = internal constant double 0x3780280000000000, align 8
@pio2_3thi = internal constant double 0xB8576B7ED8FBBACC, align 8
@pio2_3tlo = internal constant double 0xB4D9C00000000000, align 8
@crypt.buf = internal global [128 x i8] zeroinitializer, align 16
@m_sbox = internal unnamed_addr constant [4 x [4096 x i8]] [[4096 x i8] c"\EF\E3\E1\ED\E8\E4\EE\E7\E6\EF\EB\E2\E3\E8\E4\EE\E9\EC\E7\E0\E2\E1\ED\EA\EC\E6\E0\E9\E5\EB\EA\E5\E0\ED\EE\E8\E7\EA\EB\E1\EA\E3\E4\EF\ED\E4\E1\E2\E5\EB\E8\E6\EC\E7\E6\EC\E9\E0\E3\E5\E2\EE\EF\E9\0F\03\01\0D\08\04\0E\07\06\0F\0B\02\03\08\04\0E\09\0C\07\00\02\01\0D\0A\0C\06\00\09\05\0B\0A\05\00\0D\0E\08\07\0A\0B\01\0A\03\04\0F\0D\04\01\02\05\0B\08\06\0C\07\06\0C\09\00\03\05\02\0E\0F\09OCAMHDNGFOKBCHDNILG@BAMJLF@IEKJE@MNHGJKAJCDOMDABEKHFLGFLI@CEBNOI\FF\F3\F1\FD\F8\F4\FE\F7\F6\FF\FB\F2\F3\F8\F4\FE\F9\FC\F7\F0\F2\F1\FD\FA\FC\F6\F0\F9\F5\FB\FA\F5\F0\FD\FE\F8\F7\FA\FB\F1\FA\F3\F4\FF\FD\F4\F1\F2\F5\FB\F8\F6\FC\F7\F6\FC\F9\F0\F3\F5\F2\FE\FF\F9\DF\D3\D1\DD\D8\D4\DE\D7\D6\DF\DB\D2\D3\D8\D4\DE\D9\DC\D7\D0\D2\D1\DD\DA\DC\D6\D0\D9\D5\DB\DA\D5\D0\DD\DE\D8\D7\DA\DB\D1\DA\D3\D4\DF\DD\D4\D1\D2\D5\DB\D8\D6\DC\D7\D6\DC\D9\D0\D3\D5\D2\DE\DF\D9\7Fsq}xt~wv\7F{rsxt~y|wprq}z|vpyu{zup}~xwz{qzst\7F}tqru{xv|wv|ypsur~\7Fy\1F\13\11\1D\18\14\1E\17\16\1F\1B\12\13\18\14\1E\19\1C\17\10\12\11\1D\1A\1C\16\10\19\15\1B\1A\15\10\1D\1E\18\17\1A\1B\11\1A\13\14\1F\1D\14\11\12\15\1B\18\16\1C\17\16\1C\19\10\13\15\12\1E\1F\19OCAMHDNGFOKBCHDNILG@BAMJLF@IEKJE@MNHGJKAJCDOMDABEKHFLGFLI@CEBNOI/#!-($.'&/+\22#($.),' \22!-*,& )%+*% -.('*+!*#$/-$!\22%+(&,'&,) #%\22./)\EF\E3\E1\ED\E8\E4\EE\E7\E6\EF\EB\E2\E3\E8\E4\EE\E9\EC\E7\E0\E2\E1\ED\EA\EC\E6\E0\E9\E5\EB\EA\E5\E0\ED\EE\E8\E7\EA\EB\E1\EA\E3\E4\EF\ED\E4\E1\E2\E5\EB\E8\E6\EC\E7\E6\EC\E9\E0\E3\E5\E2\EE\EF\E9\FF\F3\F1\FD\F8\F4\FE\F7\F6\FF\FB\F2\F3\F8\F4\FE\F9\FC\F7\F0\F2\F1\FD\FA\FC\F6\F0\F9\F5\FB\FA\F5\F0\FD\FE\F8\F7\FA\FB\F1\FA\F3\F4\FF\FD\F4\F1\F2\F5\FB\F8\F6\FC\F7\F6\FC\F9\F0\F3\F5\F2\FE\FF\F9/#!-($.'&/+\22#($.),' \22!-*,& )%+*% -.('*+!*#$/-$!\22%+(&,'&,) #%\22./)\BF\B3\B1\BD\B8\B4\BE\B7\B6\BF\BB\B2\B3\B8\B4\BE\B9\BC\B7\B0\B2\B1\BD\BA\BC\B6\B0\B9\B5\BB\BA\B5\B0\BD\BE\B8\B7\BA\BB\B1\BA\B3\B4\BF\BD\B4\B1\B2\B5\BB\B8\B6\BC\B7\B6\BC\B9\B0\B3\B5\B2\BE\BF\B9\DF\D3\D1\DD\D8\D4\DE\D7\D6\DF\DB\D2\D3\D8\D4\DE\D9\DC\D7\D0\D2\D1\DD\DA\DC\D6\D0\D9\D5\DB\DA\D5\D0\DD\DE\D8\D7\DA\DB\D1\DA\D3\D4\DF\DD\D4\D1\D2\D5\DB\D8\D6\DC\D7\D6\DC\D9\D0\D3\D5\D2\DE\DF\D9\8F\83\81\8D\88\84\8E\87\86\8F\8B\82\83\88\84\8E\89\8C\87\80\82\81\8D\8A\8C\86\80\89\85\8B\8A\85\80\8D\8E\88\87\8A\8B\81\8A\83\84\8F\8D\84\81\82\85\8B\88\86\8C\87\86\8C\89\80\83\85\82\8E\8F\89\1F\13\11\1D\18\14\1E\17\16\1F\1B\12\13\18\14\1E\19\1C\17\10\12\11\1D\1A\1C\16\10\19\15\1B\1A\15\10\1D\1E\18\17\1A\1B\11\1A\13\14\1F\1D\14\11\12\15\1B\18\16\1C\17\16\1C\19\10\13\15\12\1E\1F\19?31=84>76?;2384>9<7021=:<6095;:50=>87:;1:34?=4125;86<76<90352>?9\AF\A3\A1\AD\A8\A4\AE\A7\A6\AF\AB\A2\A3\A8\A4\AE\A9\AC\A7\A0\A2\A1\AD\AA\AC\A6\A0\A9\A5\AB\AA\A5\A0\AD\AE\A8\A7\AA\AB\A1\AA\A3\A4\AF\AD\A4\A1\A2\A5\AB\A8\A6\AC\A7\A6\AC\A9\A0\A3\A5\A2\AE\AF\A9\AF\A3\A1\AD\A8\A4\AE\A7\A6\AF\AB\A2\A3\A8\A4\AE\A9\AC\A7\A0\A2\A1\AD\AA\AC\A6\A0\A9\A5\AB\AA\A5\A0\AD\AE\A8\A7\AA\AB\A1\AA\A3\A4\AF\AD\A4\A1\A2\A5\AB\A8\A6\AC\A7\A6\AC\A9\A0\A3\A5\A2\AE\AF\A9ocamhdngfokbchdnilg`bamjlf`iekje`mnhgjkajcdomdabekhflgfli`cebnoiocamhdngfokbchdnilg`bamjlf`iekje`mnhgjkajcdomdabekhflgfli`cebnoi\CF\C3\C1\CD\C8\C4\CE\C7\C6\CF\CB\C2\C3\C8\C4\CE\C9\CC\C7\C0\C2\C1\CD\CA\CC\C6\C0\C9\C5\CB\CA\C5\C0\CD\CE\C8\C7\CA\CB\C1\CA\C3\C4\CF\CD\C4\C1\C2\C5\CB\C8\C6\CC\C7\C6\CC\C9\C0\C3\C5\C2\CE\CF\C9\CF\C3\C1\CD\C8\C4\CE\C7\C6\CF\CB\C2\C3\C8\C4\CE\C9\CC\C7\C0\C2\C1\CD\CA\CC\C6\C0\C9\C5\CB\CA\C5\C0\CD\CE\C8\C7\CA\CB\C1\CA\C3\C4\CF\CD\C4\C1\C2\C5\CB\C8\C6\CC\C7\C6\CC\C9\C0\C3\C5\C2\CE\CF\C9\BF\B3\B1\BD\B8\B4\BE\B7\B6\BF\BB\B2\B3\B8\B4\BE\B9\BC\B7\B0\B2\B1\BD\BA\BC\B6\B0\B9\B5\BB\BA\B5\B0\BD\BE\B8\B7\BA\BB\B1\BA\B3\B4\BF\BD\B4\B1\B2\B5\BB\B8\B6\BC\B7\B6\BC\B9\B0\B3\B5\B2\BE\BF\B9_SQ]XT^WV_[RSXT^Y\5CWPRQ]Z\5CVPYU[ZUP]^XWZ[QZST_]TQRU[XV\5CWV\5CYPSUR^_Y\9F\93\91\9D\98\94\9E\97\96\9F\9B\92\93\98\94\9E\99\9C\97\90\92\91\9D\9A\9C\96\90\99\95\9B\9A\95\90\9D\9E\98\97\9A\9B\91\9A\93\94\9F\9D\94\91\92\95\9B\98\96\9C\97\96\9C\99\90\93\95\92\9E\9F\99\9F\93\91\9D\98\94\9E\97\96\9F\9B\92\93\98\94\9E\99\9C\97\90\92\91\9D\9A\9C\96\90\99\95\9B\9A\95\90\9D\9E\98\97\9A\9B\91\9A\93\94\9F\9D\94\91\92\95\9B\98\96\9C\97\96\9C\99\90\93\95\92\9E\9F\99_SQ]XT^WV_[RSXT^Y\5CWPRQ]Z\5CVPYU[ZUP]^XWZ[QZST_]TQRU[XV\5CWV\5CYPSUR^_Y\0F\03\01\0D\08\04\0E\07\06\0F\0B\02\03\08\04\0E\09\0C\07\00\02\01\0D\0A\0C\06\00\09\05\0B\0A\05\00\0D\0E\08\07\0A\0B\01\0A\03\04\0F\0D\04\01\02\05\0B\08\06\0C\07\06\0C\09\00\03\05\02\0E\0F\09?31=84>76?;2384>9<7021=:<6095;:50=>87:;1:34?=4125;86<76<90352>?9\7Fsq}xt~wv\7F{rsxt~y|wprq}z|vpyu{zup}~xwz{qzst\7F}tqru{xv|wv|ypsur~\7Fy\8F\83\81\8D\88\84\8E\87\86\8F\8B\82\83\88\84\8E\89\8C\87\80\82\81\8D\8A\8C\86\80\89\85\8B\8A\85\80\8D\8E\88\87\8A\8B\81\8A\83\84\8F\8D\84\81\82\85\8B\88\86\8C\87\86\8C\89\80\83\85\82\8E\8F\89OCAMHDNGFOKBCHDNILG@BAMJLF@IEKJE@MNHGJKAJCDOMDABEKHFLGFLI@CEBNOI\FF\F3\F1\FD\F8\F4\FE\F7\F6\FF\FB\F2\F3\F8\F4\FE\F9\FC\F7\F0\F2\F1\FD\FA\FC\F6\F0\F9\F5\FB\FA\F5\F0\FD\FE\F8\F7\FA\FB\F1\FA\F3\F4\FF\FD\F4\F1\F2\F5\FB\F8\F6\FC\F7\F6\FC\F9\F0\F3\F5\F2\FE\FF\F9\1F\13\11\1D\18\14\1E\17\16\1F\1B\12\13\18\14\1E\19\1C\17\10\12\11\1D\1A\1C\16\10\19\15\1B\1A\15\10\1D\1E\18\17\1A\1B\11\1A\13\14\1F\1D\14\11\12\15\1B\18\16\1C\17\16\1C\19\10\13\15\12\1E\1F\19\CF\C3\C1\CD\C8\C4\CE\C7\C6\CF\CB\C2\C3\C8\C4\CE\C9\CC\C7\C0\C2\C1\CD\CA\CC\C6\C0\C9\C5\CB\CA\C5\C0\CD\CE\C8\C7\CA\CB\C1\CA\C3\C4\CF\CD\C4\C1\C2\C5\CB\C8\C6\CC\C7\C6\CC\C9\C0\C3\C5\C2\CE\CF\C9\EF\E3\E1\ED\E8\E4\EE\E7\E6\EF\EB\E2\E3\E8\E4\EE\E9\EC\E7\E0\E2\E1\ED\EA\EC\E6\E0\E9\E5\EB\EA\E5\E0\ED\EE\E8\E7\EA\EB\E1\EA\E3\E4\EF\ED\E4\E1\E2\E5\EB\E8\E6\EC\E7\E6\EC\E9\E0\E3\E5\E2\EE\EF\E9\8F\83\81\8D\88\84\8E\87\86\8F\8B\82\83\88\84\8E\89\8C\87\80\82\81\8D\8A\8C\86\80\89\85\8B\8A\85\80\8D\8E\88\87\8A\8B\81\8A\83\84\8F\8D\84\81\82\85\8B\88\86\8C\87\86\8C\89\80\83\85\82\8E\8F\89\8F\83\81\8D\88\84\8E\87\86\8F\8B\82\83\88\84\8E\89\8C\87\80\82\81\8D\8A\8C\86\80\89\85\8B\8A\85\80\8D\8E\88\87\8A\8B\81\8A\83\84\8F\8D\84\81\82\85\8B\88\86\8C\87\86\8C\89\80\83\85\82\8E\8F\89/#!-($.'&/+\22#($.),' \22!-*,& )%+*% -.('*+!*#$/-$!\22%+(&,'&,) #%\22./)\DF\D3\D1\DD\D8\D4\DE\D7\D6\DF\DB\D2\D3\D8\D4\DE\D9\DC\D7\D0\D2\D1\DD\DA\DC\D6\D0\D9\D5\DB\DA\D5\D0\DD\DE\D8\D7\DA\DB\D1\DA\D3\D4\DF\DD\D4\D1\D2\D5\DB\D8\D6\DC\D7\D6\DC\D9\D0\D3\D5\D2\DE\DF\D9OCAMHDNGFOKBCHDNILG@BAMJLF@IEKJE@MNHGJKAJCDOMDABEKHFLGFLI@CEBNOIocamhdngfokbchdnilg`bamjlf`iekje`mnhgjkajcdomdabekhflgfli`cebnoisq}xt~wv\7F{rsxt~y|wprq}z|vpyu{zup}~xwz{qzst\7F}tqru{xv|wv|ypsur~\7Fy\FF\F3\F1\FD\F8\F4\FE\F7\F6\FF\FB\F2\F3\F8\F4\FE\F9\FC\F7\F0\F2\F1\FD\FA\FC\F6\F0\F9\F5\FB\FA\F5\F0\FD\FE\F8\F7\FA\FB\F1\FA\F3\F4\FF\FD\F4\F1\F2\F5\FB\F8\F6\FC\F7\F6\FC\F9\F0\F3\F5\F2\FE\FF\F9_SQ]XT^WV_[RSXT^Y\5CWPRQ]Z\5CVPYU[ZUP]^XWZ[QZST_]TQRU[XV\5CWV\5CYPSUR^_Y\CF\C3\C1\CD\C8\C4\CE\C7\C6\CF\CB\C2\C3\C8\C4\CE\C9\CC\C7\C0\C2\C1\CD\CA\CC\C6\C0\C9\C5\CB\CA\C5\C0\CD\CE\C8\C7\CA\CB\C1\CA\C3\C4\CF\CD\C4\C1\C2\C5\CB\C8\C6\CC\C7\C6\CC\C9\C0\C3\C5\C2\CE\CF\C9\BF\B3\B1\BD\B8\B4\BE\B7\B6\BF\BB\B2\B3\B8\B4\BE\B9\BC\B7\B0\B2\B1\BD\BA\BC\B6\B0\B9\B5\BB\BA\B5\B0\BD\BE\B8\B7\BA\BB\B1\BA\B3\B4\BF\BD\B4\B1\B2\B5\BB\B8\B6\BC\B7\B6\BC\B9\B0\B3\B5\B2\BE\BF\B9\9F\93\91\9D\98\94\9E\97\96\9F\9B\92\93\98\94\9E\99\9C\97\90\92\91\9D\9A\9C\96\90\99\95\9B\9A\95\90\9D\9E\98\97\9A\9B\91\9A\93\94\9F\9D\94\91\92\95\9B\98\96\9C\97\96\9C\99\90\93\95\92\9E\9F\99?31=84>76?;2384>9<7021=:<6095;:50=>87:;1:34?=4125;86<76<90352>?9\7Fsq}xt~wv\7F{rsxt~y|wprq}z|vpyu{zup}~xwz{qzst\7F}tqru{xv|wv|ypsur~\7Fy\EF\E3\E1\ED\E8\E4\EE\E7\E6\EF\EB\E2\E3\E8\E4\EE\E9\EC\E7\E0\E2\E1\ED\EA\EC\E6\E0\E9\E5\EB\EA\E5\E0\ED\EE\E8\E7\EA\EB\E1\EA\E3\E4\EF\ED\E4\E1\E2\E5\EB\E8\E6\EC\E7\E6\EC\E9\E0\E3\E5\E2\EE\EF\E9?31=84>76?;2384>9<7021=:<6095;:50=>87:;1:34?=4125;86<76<90352>?9\AF\A3\A1\AD\A8\A4\AE\A7\A6\AF\AB\A2\A3\A8\A4\AE\A9\AC\A7\A0\A2\A1\AD\AA\AC\A6\A0\A9\A5\AB\AA\A5\A0\AD\AE\A8\A7\AA\AB\A1\AA\A3\A4\AF\AD\A4\A1\A2\A5\AB\A8\A6\AC\A7\A6\AC\A9\A0\A3\A5\A2\AE\AF\A9\AF\A3\A1\AD\A8\A4\AE\A7\A6\AF\AB\A2\A3\A8\A4\AE\A9\AC\A7\A0\A2\A1\AD\AA\AC\A6\A0\A9\A5\AB\AA\A5\A0\AD\AE\A8\A7\AA\AB\A1\AA\A3\A4\AF\AD\A4\A1\A2\A5\AB\A8\A6\AC\A7\A6\AC\A9\A0\A3\A5\A2\AE\AF\A9\0F\03\01\0D\08\04\0E\07\06\0F\0B\02\03\08\04\0E\09\0C\07\00\02\01\0D\0A\0C\06\00\09\05\0B\0A\05\00\0D\0E\08\07\0A\0B\01\0A\03\04\0F\0D\04\01\02\05\0B\08\06\0C\07\06\0C\09\00\03\05\02\0E\0F\09_SQ]XT^WV_[RSXT^Y\5CWPRQ]Z\5CVPYU[ZUP]^XWZ[QZST_]TQRU[XV\5CWV\5CYPSUR^_Yocamhdngfokbchdnilg`bamjlf`iekje`mnhgjkajcdomdabekhflgfli`cebnoi\0F\03\01\0D\08\04\0E\07\06\0F\0B\02\03\08\04\0E\09\0C\07\00\02\01\0D\0A\0C\06\00\09\05\0B\0A\05\00\0D\0E\08\07\0A\0B\01\0A\03\04\0F\0D\04\01\02\05\0B\08\06\0C\07\06\0C\09\00\03\05\02\0E\0F\09\DF\D3\D1\DD\D8\D4\DE\D7\D6\DF\DB\D2\D3\D8\D4\DE\D9\DC\D7\D0\D2\D1\DD\DA\DC\D6\D0\D9\D5\DB\DA\D5\D0\DD\DE\D8\D7\DA\DB\D1\DA\D3\D4\DF\DD\D4\D1\D2\D5\DB\D8\D6\DC\D7\D6\DC\D9\D0\D3\D5\D2\DE\DF\D9", [4096 x i8] c"\A7\AD\AD\A8\AE\AB\A3\A5\A0\A6\A6\AF\A9\A0\AA\A3\A1\A4\A2\A7\A8\A2\A5\AC\AB\A1\AC\AA\A4\AE\AF\A9\AA\A3\A6\AF\A9\A0\A0\A6\AC\AA\AB\A1\A7\AD\AD\A8\AF\A9\A1\A4\A3\A5\AE\AB\A5\AC\A2\A7\A8\A2\A4\AE\D7\DD\DD\D8\DE\DB\D3\D5\D0\D6\D6\DF\D9\D0\DA\D3\D1\D4\D2\D7\D8\D2\D5\DC\DB\D1\DC\DA\D4\DE\DF\D9\DA\D3\D6\DF\D9\D0\D0\D6\DC\DA\DB\D1\D7\DD\DD\D8\DF\D9\D1\D4\D3\D5\DE\DB\D5\DC\D2\D7\D8\D2\D4\DE\07\0D\0D\08\0E\0B\03\05\00\06\06\0F\09\00\0A\03\01\04\02\07\08\02\05\0C\0B\01\0C\0A\04\0E\0F\09\0A\03\06\0F\09\00\00\06\0C\0A\0B\01\07\0D\0D\08\0F\09\01\04\03\05\0E\0B\05\0C\02\07\08\02\04\0Ew}}x~{supvv\7Fypzsqtrwxru|{q|zt~\7Fyzsv\7Fyppv|z{qw}}x\7Fyqtsu~{u|rwxrt~\97\9D\9D\98\9E\9B\93\95\90\96\96\9F\99\90\9A\93\91\94\92\97\98\92\95\9C\9B\91\9C\9A\94\9E\9F\99\9A\93\96\9F\99\90\90\96\9C\9A\9B\91\97\9D\9D\98\9F\99\91\94\93\95\9E\9B\95\9C\92\97\98\92\94\9E\07\0D\0D\08\0E\0B\03\05\00\06\06\0F\09\00\0A\03\01\04\02\07\08\02\05\0C\0B\01\0C\0A\04\0E\0F\09\0A\03\06\0F\09\00\00\06\0C\0A\0B\01\07\0D\0D\08\0F\09\01\04\03\05\0E\0B\05\0C\02\07\08\02\04\0E\E7\ED\ED\E8\EE\EB\E3\E5\E0\E6\E6\EF\E9\E0\EA\E3\E1\E4\E2\E7\E8\E2\E5\EC\EB\E1\EC\EA\E4\EE\EF\E9\EA\E3\E6\EF\E9\E0\E0\E6\EC\EA\EB\E1\E7\ED\ED\E8\EF\E9\E1\E4\E3\E5\EE\EB\E5\EC\E2\E7\E8\E2\E4\EE\97\9D\9D\98\9E\9B\93\95\90\96\96\9F\99\90\9A\93\91\94\92\97\98\92\95\9C\9B\91\9C\9A\94\9E\9F\99\9A\93\96\9F\99\90\90\96\9C\9A\9B\91\97\9D\9D\98\9F\99\91\94\93\95\9E\9B\95\9C\92\97\98\92\94\9Egmmhnkce`ffoi`jcadbghbelkaljdnoijcfoi``fljkagmmhoiadcenkelbghbdn7==8>;35066?90:31427825<;1<:4>?9:36?9006<:;17==8?91435>;5<27824>7==8>;35066?90:31427825<;1<:4>?9:36?9006<:;17==8?91435>;5<27824>GMMHNKCE@FFOI@JCADBGHBELKALJDNOIJCFOI@@FLJKAGMMHOIADCENKELBGHBDN\F7\FD\FD\F8\FE\FB\F3\F5\F0\F6\F6\FF\F9\F0\FA\F3\F1\F4\F2\F7\F8\F2\F5\FC\FB\F1\FC\FA\F4\FE\FF\F9\FA\F3\F6\FF\F9\F0\F0\F6\FC\FA\FB\F1\F7\FD\FD\F8\FF\F9\F1\F4\F3\F5\FE\FB\F5\FC\F2\F7\F8\F2\F4\FEgmmhnkce`ffoi`jcadbghbelkaljdnoijcfoi``fljkagmmhoiadcenkelbghbdnW]]X^[SUPVV_YPZSQTRWXRU\5C[Q\5CZT^_YZSV_YPPV\5CZ[QW]]X_YQTSU^[U\5CRWXRT^\A7\AD\AD\A8\AE\AB\A3\A5\A0\A6\A6\AF\A9\A0\AA\A3\A1\A4\A2\A7\A8\A2\A5\AC\AB\A1\AC\AA\A4\AE\AF\A9\AA\A3\A6\AF\A9\A0\A0\A6\AC\AA\AB\A1\A7\AD\AD\A8\AF\A9\A1\A4\A3\A5\AE\AB\A5\AC\A2\A7\A8\A2\A4\AE\17\1D\1D\18\1E\1B\13\15\10\16\16\1F\19\10\1A\13\11\14\12\17\18\12\15\1C\1B\11\1C\1A\14\1E\1F\19\1A\13\16\1F\19\10\10\16\1C\1A\1B\11\17\1D\1D\18\1F\19\11\14\13\15\1E\1B\15\1C\12\17\18\12\14\1E'--(.+#% &&/) *#!$\22'(\22%,+!,*$./)*#&/)  &,*+!'--(/)!$#%.+%,\22'(\22$.\D7\DD\DD\D8\DE\DB\D3\D5\D0\D6\D6\DF\D9\D0\DA\D3\D1\D4\D2\D7\D8\D2\D5\DC\DB\D1\DC\DA\D4\DE\DF\D9\DA\D3\D6\DF\D9\D0\D0\D6\DC\DA\DB\D1\D7\DD\DD\D8\DF\D9\D1\D4\D3\D5\DE\DB\D5\DC\D2\D7\D8\D2\D4\DE\87\8D\8D\88\8E\8B\83\85\80\86\86\8F\89\80\8A\83\81\84\82\87\88\82\85\8C\8B\81\8C\8A\84\8E\8F\89\8A\83\86\8F\89\80\80\86\8C\8A\8B\81\87\8D\8D\88\8F\89\81\84\83\85\8E\8B\85\8C\82\87\88\82\84\8E\C7\CD\CD\C8\CE\CB\C3\C5\C0\C6\C6\CF\C9\C0\CA\C3\C1\C4\C2\C7\C8\C2\C5\CC\CB\C1\CC\CA\C4\CE\CF\C9\CA\C3\C6\CF\C9\C0\C0\C6\CC\CA\CB\C1\C7\CD\CD\C8\CF\C9\C1\C4\C3\C5\CE\CB\C5\CC\C2\C7\C8\C2\C4\CEW]]X^[SUPVV_YPZSQTRWXRU\5C[Q\5CZT^_YZSV_YPPV\5CZ[QW]]X_YQTSU^[U\5CRWXRT^w}}x~{supvv\7Fypzsqtrwxru|{q|zt~\7Fyzsv\7Fyppv|z{qw}}x\7Fyqtsu~{u|rwxrt~\E7\ED\ED\E8\EE\EB\E3\E5\E0\E6\E6\EF\E9\E0\EA\E3\E1\E4\E2\E7\E8\E2\E5\EC\EB\E1\EC\EA\E4\EE\EF\E9\EA\E3\E6\EF\E9\E0\E0\E6\EC\EA\EB\E1\E7\ED\ED\E8\EF\E9\E1\E4\E3\E5\EE\EB\E5\EC\E2\E7\E8\E2\E4\EE\B7\BD\BD\B8\BE\BB\B3\B5\B0\B6\B6\BF\B9\B0\BA\B3\B1\B4\B2\B7\B8\B2\B5\BC\BB\B1\BC\BA\B4\BE\BF\B9\BA\B3\B6\BF\B9\B0\B0\B6\BC\BA\BB\B1\B7\BD\BD\B8\BF\B9\B1\B4\B3\B5\BE\BB\B5\BC\B2\B7\B8\B2\B4\BE\C7\CD\CD\C8\CE\CB\C3\C5\C0\C6\C6\CF\C9\C0\CA\C3\C1\C4\C2\C7\C8\C2\C5\CC\CB\C1\CC\CA\C4\CE\CF\C9\CA\C3\C6\CF\C9\C0\C0\C6\CC\CA\CB\C1\C7\CD\CD\C8\CF\C9\C1\C4\C3\C5\CE\CB\C5\CC\C2\C7\C8\C2\C4\CEGMMHNKCE@FFOI@JCADBGHBELKALJDNOIJCFOI@@FLJKAGMMHOIADCENKELBGHBDN\B7\BD\BD\B8\BE\BB\B3\B5\B0\B6\B6\BF\B9\B0\BA\B3\B1\B4\B2\B7\B8\B2\B5\BC\BB\B1\BC\BA\B4\BE\BF\B9\BA\B3\B6\BF\B9\B0\B0\B6\BC\BA\BB\B1\B7\BD\BD\B8\BF\B9\B1\B4\B3\B5\BE\BB\B5\BC\B2\B7\B8\B2\B4\BE'--(.+#% &&/) *#!$\22'(\22%,+!,*$./)*#&/)  &,*+!'--(/)!$#%.+%,\22'(\22$.\F7\FD\FD\F8\FE\FB\F3\F5\F0\F6\F6\FF\F9\F0\FA\F3\F1\F4\F2\F7\F8\F2\F5\FC\FB\F1\FC\FA\F4\FE\FF\F9\FA\F3\F6\FF\F9\F0\F0\F6\FC\FA\FB\F1\F7\FD\FD\F8\FF\F9\F1\F4\F3\F5\FE\FB\F5\FC\F2\F7\F8\F2\F4\FE\87\8D\8D\88\8E\8B\83\85\80\86\86\8F\89\80\8A\83\81\84\82\87\88\82\85\8C\8B\81\8C\8A\84\8E\8F\89\8A\83\86\8F\89\80\80\86\8C\8A\8B\81\87\8D\8D\88\8F\89\81\84\83\85\8E\8B\85\8C\82\87\88\82\84\8E\17\1D\1D\18\1E\1B\13\15\10\16\16\1F\19\10\1A\13\11\14\12\17\18\12\15\1C\1B\11\1C\1A\14\1E\1F\19\1A\13\16\1F\19\10\10\16\1C\1A\1B\11\17\1D\1D\18\1F\19\11\14\13\15\1E\1B\15\1C\12\17\18\12\14\1E\D7\DD\DD\D8\DE\DB\D3\D5\D0\D6\D6\DF\D9\D0\DA\D3\D1\D4\D2\D7\D8\D2\D5\DC\DB\D1\DC\DA\D4\DE\DF\D9\DA\D3\D6\DF\D9\D0\D0\D6\DC\DA\DB\D1\D7\DD\DD\D8\DF\D9\D1\D4\D3\D5\DE\DB\D5\DC\D2\D7\D8\D2\D4\DE\17\1D\1D\18\1E\1B\13\15\10\16\16\1F\19\10\1A\13\11\14\12\17\18\12\15\1C\1B\11\1C\1A\14\1E\1F\19\1A\13\16\1F\19\10\10\16\1C\1A\1B\11\17\1D\1D\18\1F\19\11\14\13\15\1E\1B\15\1C\12\17\18\12\14\1Egmmhnkce`ffoi`jcadbghbelkaljdnoijcfoi``fljkagmmhoiadcenkelbghbdn\A7\AD\AD\A8\AE\AB\A3\A5\A0\A6\A6\AF\A9\A0\AA\A3\A1\A4\A2\A7\A8\A2\A5\AC\AB\A1\AC\AA\A4\AE\AF\A9\AA\A3\A6\AF\A9\A0\A0\A6\AC\AA\AB\A1\A7\AD\AD\A8\AF\A9\A1\A4\A3\A5\AE\AB\A5\AC\A2\A7\A8\A2\A4\AEGMMHNKCE@FFOI@JCADBGHBELKALJDNOIJCFOI@@FLJKAGMMHOIADCENKELBGHBDN\D7\DD\DD\D8\DE\DB\D3\D5\D0\D6\D6\DF\D9\D0\DA\D3\D1\D4\D2\D7\D8\D2\D5\DC\DB\D1\DC\DA\D4\DE\DF\D9\DA\D3\D6\DF\D9\D0\D0\D6\DC\DA\DB\D1\D7\DD\DD\D8\DF\D9\D1\D4\D3\D5\DE\DB\D5\DC\D2\D7\D8\D2\D4\DE\97\9D\9D\98\9E\9B\93\95\90\96\96\9F\99\90\9A\93\91\94\92\97\98\92\95\9C\9B\91\9C\9A\94\9E\9F\99\9A\93\96\9F\99\90\90\96\9C\9A\9B\91\97\9D\9D\98\9F\99\91\94\93\95\9E\9B\95\9C\92\97\98\92\94\9E\07\0D\0D\08\0E\0B\03\05\00\06\06\0F\09\00\0A\03\01\04\02\07\08\02\05\0C\0B\01\0C\0A\04\0E\0F\09\0A\03\06\0F\09\00\00\06\0C\0A\0B\01\07\0D\0D\08\0F\09\01\04\03\05\0E\0B\05\0C\02\07\08\02\04\0E\87\8D\8D\88\8E\8B\83\85\80\86\86\8F\89\80\8A\83\81\84\82\87\88\82\85\8C\8B\81\8C\8A\84\8E\8F\89\8A\83\86\8F\89\80\80\86\8C\8A\8B\81\87\8D\8D\88\8F\89\81\84\83\85\8E\8B\85\8C\82\87\88\82\84\8Egmmhnkce`ffoi`jcadbghbelkaljdnoijcfoi``fljkagmmhoiadcenkelbghbdn\F7\FD\FD\F8\FE\FB\F3\F5\F0\F6\F6\FF\F9\F0\FA\F3\F1\F4\F2\F7\F8\F2\F5\FC\FB\F1\FC\FA\F4\FE\FF\F9\FA\F3\F6\FF\F9\F0\F0\F6\FC\FA\FB\F1\F7\FD\FD\F8\FF\F9\F1\F4\F3\F5\FE\FB\F5\FC\F2\F7\F8\F2\F4\FE\97\9D\9D\98\9E\9B\93\95\90\96\96\9F\99\90\9A\93\91\94\92\97\98\92\95\9C\9B\91\9C\9A\94\9E\9F\99\9A\93\96\9F\99\90\90\96\9C\9A\9B\91\97\9D\9D\98\9F\99\91\94\93\95\9E\9B\95\9C\92\97\98\92\94\9E7==8>;35066?90:31427825<;1<:4>?9:36?9006<:;17==8?91435>;5<27824>\87\8D\8D\88\8E\8B\83\85\80\86\86\8F\89\80\8A\83\81\84\82\87\88\82\85\8C\8B\81\8C\8A\84\8E\8F\89\8A\83\86\8F\89\80\80\86\8C\8A\8B\81\87\8D\8D\88\8F\89\81\84\83\85\8E\8B\85\8C\82\87\88\82\84\8E\07\0D\0D\08\0E\0B\03\05\00\06\06\0F\09\00\0A\03\01\04\02\07\08\02\05\0C\0B\01\0C\0A\04\0E\0F\09\0A\03\06\0F\09\00\00\06\0C\0A\0B\01\07\0D\0D\08\0F\09\01\04\03\05\0E\0B\05\0C\02\07\08\02\04\0Ew}}x~{supvv\7Fypzsqtrwxru|{q|zt~\7Fyzsv\7Fyppv|z{qw}}x\7Fyqtsu~{u|rwxrt~\B7\BD\BD\B8\BE\BB\B3\B5\B0\B6\B6\BF\B9\B0\BA\B3\B1\B4\B2\B7\B8\B2\B5\BC\BB\B1\BC\BA\B4\BE\BF\B9\BA\B3\B6\BF\B9\B0\B0\B6\BC\BA\BB\B1\B7\BD\BD\B8\BF\B9\B1\B4\B3\B5\BE\BB\B5\BC\B2\B7\B8\B2\B4\BEGMMHNKCE@FFOI@JCADBGHBELKALJDNOIJCFOI@@FLJKAGMMHOIADCENKELBGHBDN\17\1D\1D\18\1E\1B\13\15\10\16\16\1F\19\10\1A\13\11\14\12\17\18\12\15\1C\1B\11\1C\1A\14\1E\1F\19\1A\13\16\1F\19\10\10\16\1C\1A\1B\11\17\1D\1D\18\1F\19\11\14\13\15\1E\1B\15\1C\12\17\18\12\14\1E\F7\FD\FD\F8\FE\FB\F3\F5\F0\F6\F6\FF\F9\F0\FA\F3\F1\F4\F2\F7\F8\F2\F5\FC\FB\F1\FC\FA\F4\FE\FF\F9\FA\F3\F6\FF\F9\F0\F0\F6\FC\FA\FB\F1\F7\FD\FD\F8\FF\F9\F1\F4\F3\F5\FE\FB\F5\FC\F2\F7\F8\F2\F4\FE'--(.+#% &&/) *#!$\22'(\22%,+!,*$./)*#&/)  &,*+!'--(/)!$#%.+%,\22'(\22$.\E7\ED\ED\E8\EE\EB\E3\E5\E0\E6\E6\EF\E9\E0\EA\E3\E1\E4\E2\E7\E8\E2\E5\EC\EB\E1\EC\EA\E4\EE\EF\E9\EA\E3\E6\EF\E9\E0\E0\E6\EC\EA\EB\E1\E7\ED\ED\E8\EF\E9\E1\E4\E3\E5\EE\EB\E5\EC\E2\E7\E8\E2\E4\EE\C7\CD\CD\C8\CE\CB\C3\C5\C0\C6\C6\CF\C9\C0\CA\C3\C1\C4\C2\C7\C8\C2\C5\CC\CB\C1\CC\CA\C4\CE\CF\C9\CA\C3\C6\CF\C9\C0\C0\C6\CC\CA\CB\C1\C7\CD\CD\C8\CF\C9\C1\C4\C3\C5\CE\CB\C5\CC\C2\C7\C8\C2\C4\CE7==8>;35066?90:31427825<;1<:4>?9:36?9006<:;17==8?91435>;5<27824>W]]X^[SUPVV_YPZSQTRWXRU\5C[Q\5CZT^_YZSV_YPPV\5CZ[QW]]X_YQTSU^[U\5CRWXRT^\B7\BD\BD\B8\BE\BB\B3\B5\B0\B6\B6\BF\B9\B0\BA\B3\B1\B4\B2\B7\B8\B2\B5\BC\BB\B1\BC\BA\B4\BE\BF\B9\BA\B3\B6\BF\B9\B0\B0\B6\BC\BA\BB\B1\B7\BD\BD\B8\BF\B9\B1\B4\B3\B5\BE\BB\B5\BC\B2\B7\B8\B2\B4\BE\A7\AD\AD\A8\AE\AB\A3\A5\A0\A6\A6\AF\A9\A0\AA\A3\A1\A4\A2\A7\A8\A2\A5\AC\AB\A1\AC\AA\A4\AE\AF\A9\AA\A3\A6\AF\A9\A0\A0\A6\AC\AA\AB\A1\A7\AD\AD\A8\AF\A9\A1\A4\A3\A5\AE\AB\A5\AC\A2\A7\A8\A2\A4\AEW]]X^[SUPVV_YPZSQTRWXRU\5C[Q\5CZT^_YZSV_YPPV\5CZ[QW]]X_YQTSU^[U\5CRWXRT^\E7\ED\ED\E8\EE\EB\E3\E5\E0\E6\E6\EF\E9\E0\EA\E3\E1\E4\E2\E7\E8\E2\E5\EC\EB\E1\EC\EA\E4\EE\EF\E9\EA\E3\E6\EF\E9\E0\E0\E6\EC\EA\EB\E1\E7\ED\ED\E8\EF\E9\E1\E4\E3\E5\EE\EB\E5\EC\E2\E7\E8\E2\E4\EE'--(.+#% &&/) *#!$\22'(\22%,+!,*$./)*#&/)  &,*+!'--(/)!$#%.+%,\22'(\22$.w}}x~{supvv\7Fypzsqtrwxru|{q|zt~\7Fyzsv\7Fyppv|z{qw}}x\7Fyqtsu~{u|rwxrt~\C7\CD\CD\C8\CE\CB\C3\C5\C0\C6\C6\CF\C9\C0\CA\C3\C1\C4\C2\C7\C8\C2\C5\CC\CB\C1\CC\CA\C4\CE\CF\C9\CA\C3\C6\CF\C9\C0\C0\C6\CC\CA\CB\C1\C7\CD\CD\C8\CF\C9\C1\C4\C3\C5\CE\CB\C5\CC\C2\C7\C8\C2\C4\CE", [4096 x i8] c|zq\7Fzt\7Frywr|vyxupv}qs}t~~pw{us{xyt~s\7Fru|ryxu|\7Fszw{p~tqzwqv}p{xv}LJAOJDOBIGBLFIHE@FMACMDNN@GKECKHIDNCOBELBIHELOCJGK@NDAJGAFM@KHFM\AC\AA\A1\AF\AA\A4\AF\A2\A9\A7\A2\AC\A6\A9\A8\A5\A0\A6\AD\A1\A3\AD\A4\AE\AE\A0\A7\AB\A5\A3\AB\A8\A9\A4\AE\A3\AF\A2\A5\AC\A2\A9\A8\A5\AC\AF\A3\AA\A7\AB\A0\AE\A4\A1\AA\A7\A1\A6\AD\A0\AB\A8\A6\AD|zq\7Fzt\7Frywr|vyxupv}qs}t~~pw{us{xyt~s\7Fru|ryxu|\7Fszw{p~tqzwqv}p{xv}\BC\BA\B1\BF\BA\B4\BF\B2\B9\B7\B2\BC\B6\B9\B8\B5\B0\B6\BD\B1\B3\BD\B4\BE\BE\B0\B7\BB\B5\B3\BB\B8\B9\B4\BE\B3\BF\B2\B5\BC\B2\B9\B8\B5\BC\BF\B3\BA\B7\BB\B0\BE\B4\B1\BA\B7\B1\B6\BD\B0\BB\B8\B6\BD\DC\DA\D1\DF\DA\D4\DF\D2\D9\D7\D2\DC\D6\D9\D8\D5\D0\D6\DD\D1\D3\DD\D4\DE\DE\D0\D7\DB\D5\D3\DB\D8\D9\D4\DE\D3\DF\D2\D5\DC\D2\D9\D8\D5\DC\DF\D3\DA\D7\DB\D0\DE\D4\D1\DA\D7\D1\D6\DD\D0\DB\D8\D6\DDljaojdobigblfihe`fmacmdnn`gkeckhidncobelbihelocjgk`ndajgafm`khfmljaojdobigblfihe`fmacmdnn`gkeckhidncobelbihelocjgk`ndajgafm`khfm|zq\7Fzt\7Frywr|vyxupv}qs}t~~pw{us{xyt~s\7Fru|ryxu|\7Fszw{p~tqzwqv}p{xv}|zq\7Fzt\7Frywr|vyxupv}qs}t~~pw{us{xyt~s\7Fru|ryxu|\7Fszw{p~tqzwqv}p{xv}ljaojdobigblfihe`fmacmdnn`gkeckhidncobelbihelocjgk`ndajgafm`khfm\9C\9A\91\9F\9A\94\9F\92\99\97\92\9C\96\99\98\95\90\96\9D\91\93\9D\94\9E\9E\90\97\9B\95\93\9B\98\99\94\9E\93\9F\92\95\9C\92\99\98\95\9C\9F\93\9A\97\9B\90\9E\94\91\9A\97\91\96\9D\90\9B\98\96\9D\FC\FA\F1\FF\FA\F4\FF\F2\F9\F7\F2\FC\F6\F9\F8\F5\F0\F6\FD\F1\F3\FD\F4\FE\FE\F0\F7\FB\F5\F3\FB\F8\F9\F4\FE\F3\FF\F2\F5\FC\F2\F9\F8\F5\FC\FF\F3\FA\F7\FB\F0\FE\F4\F1\FA\F7\F1\F6\FD\F0\FB\F8\F6\FD\CC\CA\C1\CF\CA\C4\CF\C2\C9\C7\C2\CC\C6\C9\C8\C5\C0\C6\CD\C1\C3\CD\C4\CE\CE\C0\C7\CB\C5\C3\CB\C8\C9\C4\CE\C3\CF\C2\C5\CC\C2\C9\C8\C5\CC\CF\C3\CA\C7\CB\C0\CE\C4\C1\CA\C7\C1\C6\CD\C0\CB\C8\C6\CD\0C\0A\01\0F\0A\04\0F\02\09\07\02\0C\06\09\08\05\00\06\0D\01\03\0D\04\0E\0E\00\07\0B\05\03\0B\08\09\04\0E\03\0F\02\05\0C\02\09\08\05\0C\0F\03\0A\07\0B\00\0E\04\01\0A\07\01\06\0D\00\0B\08\06\0D\5CZQ_ZT_RYWR\5CVYXUPV]QS]T^^PW[US[XYT^S_RU\5CRYXU\5C_SZW[P^TQZWQV]P[XV]\9C\9A\91\9F\9A\94\9F\92\99\97\92\9C\96\99\98\95\90\96\9D\91\93\9D\94\9E\9E\90\97\9B\95\93\9B\98\99\94\9E\93\9F\92\95\9C\92\99\98\95\9C\9F\93\9A\97\9B\90\9E\94\91\9A\97\91\96\9D\90\9B\98\96\9Dljaojdobigblfihe`fmacmdnn`gkeckhidncobelbihelocjgk`ndajgafm`khfmx i8] c"MABOHMDHFJOCKGADJLIECFNKE@@NLIGBGBKADNAGIDLJNHBM@OFLJIM@OCCEEFHK\DD\D1\D2\DF\D8\DD\D4\D8\D6\DA\DF\D3\DB\D7\D1\D4\DA\DC\D9\D5\D3\D6\DE\DB\D5\D0\D0\DE\DC\D9\D7\D2\D7\D2\DB\D1\D4\DE\D1\D7\D9\D4\DC\DA\DE\D8\D2\DD\D0\DF\D6\DC\DA\D9\DD\D0\DF\D3\D3\D5\D5\D6\D8\DB\BD\B1\B2\BF\B8\BD\B4\B8\B6\BA\BF\B3\BB\B7\B1\B4\BA\BC\B9\B5\B3\B6\BE\BB\B5\B0\B0\BE\BC\B9\B7\B2\B7\B2\BB\B1\B4\BE\B1\B7\B9\B4\BC\BA\BE\B8\B2\BD\B0\BF\B6\BC\BA\B9\BD\B0\BF\B3\B3\B5\B5\B6\B8\BB\0D\01\02\0F\08\0D\04\08\06\0A\0F\03\0B\07\01\04\0A\0C\09\05\03\06\0E\0B\05\00\00\0E\0C\09\07\02\07\02\0B\01\04\0E\01\07\09\04\0C\0A\0E\08\02\0D\00\0F\06\0C\0A\09\0D\00\0F\03\03\05\05\06\08\0B-!\22/(-$(&*/#+'!$*,)%#&.+%  .,)'\22'\22+!$.!')$,*.(\22- /&,*)- /##%%&(+\BD\B1\B2\BF\B8\BD\B4\B8\B6\BA\BF\B3\BB\B7\B1\B4\BA\BC\B9\B5\B3\B6\BE\BB\B5\B0\B0\BE\BC\B9\B7\B2\B7\B2\BB\B1\B4\BE\B1\B7\B9\B4\BC\BA\BE\B8\B2\BD\B0\BF\B6\BC\BA\B9\BD\B0\BF\B3\B3\B5\B5\B6\B8\BB\ED\E1\E2\EF\E8\ED\E4\E8\E6\EA\EF\E3\EB\E7\E1\E4\EA\EC\E9\E5\E3\E6\EE\EB\E5\E0\E0\EE\EC\E9\E7\E2\E7\E2\EB\E1\E4\EE\E1\E7\E9\E4\EC\EA\EE\E8\E2\ED\E0\EF\E6\EC\EA\E9\ED\E0\EF\E3\E3\E5\E5\E6\E8\EB}qr\7Fx}txvz\7Fs{wqtz|yusv~{upp~|ywrwr{qt~qwyt|z~xr}p\7Fv|zy}p\7Fssuuvx{\FD\F1\F2\FF\F8\FD\F4\F8\F6\FA\FF\F3\FB\F7\F1\F4\FA\FC\F9\F5\F3\F6\FE\FB\F5\F0\F0\FE\FC\F9\F7\F2\F7\F2\FB\F1\F4\FE\F1\F7\F9\F4\FC\FA\FE\F8\F2\FD\F0\FF\F6\FC\FA\F9\FD\F0\FF\F3\F3\F5\F5\F6\F8\FBMABOHMDHFJOCKGADJLIECFNKE@@NLIGBGBKADNAGIDLJNHBM@OFLJIM@OCCEEFHK\0D\01\02\0F\08\0D\04\08\06\0A\0F\03\0B\07\01\04\0A\0C\09\05\03\06\0E\0B\05\00\00\0E\0C\09\07\02\07\02\0B\01\04\0E\01\07\09\04\0C\0A\0E\08\02\0D\00\0F\06\0C\0A\09\0D\00\0F\03\03\05\05\06\08\0B\9D\91\92\9F\98\9D\94\98\96\9A\9F\93\9B\97\91\94\9A\9C\99\95\93\96\9E\9B\95\90\90\9E\9C\99\97\92\97\92\9B\91\94\9E\91\97\99\94\9C\9A\9E\98\92\9D\90\9F\96\9C\9A\99\9D\90\9F\93\93\95\95\96\98\9B\8D\81\82\8F\88\8D\84\88\86\8A\8F\83\8B\87\81\84\8A\8C\89\85\83\86\8E\8B\85\80\80\8E\8C\89\87\82\87\82\8B\81\84\8E\81\87\89\84\8C\8A\8E\88\82\8D\80\8F\86\8C\8A\89\8D\80\8F\83\83\85\85\86\88\8B\1D\11\12\1F\18\1D\14\18\16\1A\1F\13\1B\17\11\14\1A\1C\19\15\13\16\1E\1B\15\10\10\1E\1C\19\17\12\17\12\1B\11\14\1E\11\17\19\14\1C\1A\1E\18\12\1D\10\1F\16\1C\1A\19\1D\10\1F\13\13\15\15\16\18\1B\DD\D1\D2\DF\D8\DD\D4\D8\D6\DA\DF\D3\DB\D7\D1\D4\DA\DC\D9\D5\D3\D6\DE\DB\D5\D0\D0\DE\DC\D9\D7\D2\D7\D2\DB\D1\D4\DE\D1\D7\D9\D4\DC\DA\DE\D8\D2\DD\D0\DF\D6\DC\DA\D9\DD\D0\DF\D3\D3\D5\D5\D6\D8\DB\AD\A1\A2\AF\A8\AD\A4\A8\A6\AA\AF\A3\AB\A7\A1\A4\AA\AC\A9\A5\A3\A6\AE\AB\A5\A0\A0\AE\AC\A9\A7\A2\A7\A2\AB\A1\A4\AE\A1\A7\A9\A4\AC\AA\AE\A8\A2\AD\A0\AF\A6\AC\AA\A9\AD\A0\AF\A3\A3\A5\A5\A6\A8\AB=12?8=486:?3;714:<9536>;500><97272;14>1794<:>82=0?6<:9=0?335568;\ED\E1\E2\EF\E8\ED\E4\E8\E6\EA\EF\E3\EB\E7\E1\E4\EA\EC\E9\E5\E3\E6\EE\EB\E5\E0\E0\EE\EC\E9\E7\E2\E7\E2\EB\E1\E4\EE\E1\E7\E9\E4\EC\EA\EE\E8\E2\ED\E0\EF\E6\EC\EA\E9\ED\E0\EF\E3\E3\E5\E5\E6\E8\EB\CD\C1\C2\CF\C8\CD\C4\C8\C6\CA\CF\C3\CB\C7\C1\C4\CA\CC\C9\C5\C3\C6\CE\CB\C5\C0\C0\CE\CC\C9\C7\C2\C7\C2\CB\C1\C4\CE\C1\C7\C9\C4\CC\CA\CE\C8\C2\CD\C0\CF\C6\CC\CA\C9\CD\C0\CF\C3\C3\C5\C5\C6\C8\CB=12?8=486:?3;714:<9536>;500><97272;14>1794<:>82=0?6<:9=0?335568;\9D\91\92\9F\98\9D\94\98\96\9A\9F\93\9B\97\91\94\9A\9C\99\95\93\96\9E\9B\95\90\90\9E\9C\99\97\92\97\92\9B\91\94\9E\91\97\99\94\9C\9A\9E\98\92\9D\90\9F\96\9C\9A\99\9D\90\9F\93\93\95\95\96\98\9B]QR_X]TXVZ_S[WQTZ\5CYUSV^[UPP^\5CYWRWR[QT^QWYT\5CZ^XR]P_V\5CZY]P_SSUUVX[}qr\7Fx}txvz\7Fs{wqtz|yusv~{upp~|ywrwr{qt~qwyt|z~xr}p\7Fv|zy}p\7Fssuuvx{mabohmdhfjockgadjliecfnke``nligbgbkadnagidljnhbm`ofljim`occeefhk\8D\81\82\8F\88\8D\84\88\86\8A\8F\83\8B\87\81\84\8A\8C\89\85\83\86\8E\8B\85\80\80\8E\8C\89\87\82\87\82\8B\81\84\8E\81\87\89\84\8C\8A\8E\88\82\8D\80\8F\86\8C\8A\89\8D\80\8F\83\83\85\85\86\88\8B\1D\11\12\1F\18\1D\14\18\16\1A\1F\13\1B\17\11\14\1A\1C\19\15\13\16\1E\1B\15\10\10\1E\1C\19\17\12\17\12\1B\11\14\1E\11\17\19\14\1C\1A\1E\18\12\1D\10\1F\16\1C\1A\19\1D\10\1F\13\13\15\15\16\18\1Bmabohmdhfjockgadjliecfnke``nligbgbkadnagidljnhbm`ofljim`occeefhk\1D\11\12\1F\18\1D\14\18\16\1A\1F\13\1B\17\11\14\1A\1C\19\15\13\16\1E\1B\15\10\10\1E\1C\19\17\12\17\12\1B\11\14\1E\11\17\19\14\1C\1A\1E\18\12\1D\10\1F\16\1C\1A\19\1D\10\1F\13\13\15\15\16\18\1Bmabohmdhfjockgadjliecfnke``nligbgbkadnagidljnhbm`ofljim`occeefhkMABOHMDHFJOCKGADJLIECFNKE@@NLIGBGBKADNAGIDLJNHBM@OFLJIM@OCCEEFHK\BD\B1\B2\BF\B8\BD\B4\B8\B6\BA\BF\B3\BB\B7\B1\B4\BA\BC\B9\B5\B3\B6\BE\BB\B5\B0\B0\BE\BC\B9\B7\B2\B7\B2\BB\B1\B4\BE\B1\B7\B9\B4\BC\BA\BE\B8\B2\BD\B0\BF\B6\BC\BA\B9\BD\B0\BF\B3\B3\B5\B5\B6\B8\BB\BD\B1\B2\BF\B8\BD\B4\B8\B6\BA\BF\B3\BB\B7\B1\B4\BA\BC\B9\B5\B3\B6\BE\BB\B5\B0\B0\BE\BC\B9\B7\B2\B7\B2\BB\B1\B4\BE\B1\B7\B9\B4\BC\BA\BE\B8\B2\BD\B0\BF\B6\BC\BA\B9\BD\B0\BF\B3\B3\B5\B5\B6\B8\BB\DD\D1\D2\DF\D8\DD\D4\D8\D6\DA\DF\D3\DB\D7\D1\D4\DA\DC\D9\D5\D3\D6\DE\DB\D5\D0\D0\DE\DC\D9\D7\D2\D7\D2\DB\D1\D4\DE\D1\D7\D9\D4\DC\DA\DE\D8\D2\DD\D0\DF\D6\DC\DA\D9\DD\D0\DF\D3\D3\D5\D5\D6\D8\DB\DD\D1\D2\DF\D8\DD\D4\D8\D6\DA\DF\D3\DB\D7\D1\D4\DA\DC\D9\D5\D3\D6\DE\DB\D5\D0\D0\DE\DC\D9\D7\D2\D7\D2\DB\D1\D4\DE\D1\D7\D9\D4\DC\DA\DE\D8\D2\DD\D0\DF\D6\DC\DA\D9\DD\D0\DF\D3\D3\D5\D5\D6\D8\DB\8D\81\82\8F\88\8D\84\88\86\8A\8F\83\8B\87\81\84\8A\8C\89\85\83\86\8E\8B\85\80\80\8E\8C\89\87\82\87\82\8B\81\84\8E\81\87\89\84\8C\8A\8E\88\82\8D\80\8F\86\8C\8A\89\8D\80\8F\83\83\85\85\86\88\8B\CD\C1\C2\CF\C8\CD\C4\C8\C6\CA\CF\C3\CB\C7\C1\C4\CA\CC\C9\C5\C3\C6\CE\CB\C5\C0\C0\CE\CC\C9\C7\C2\C7\C2\CB\C1\C4\CE\C1\C7\C9\C4\CC\CA\CE\C8\C2\CD\C0\CF\C6\CC\CA\C9\CD\C0\CF\C3\C3\C5\C5\C6\C8\CB\1D\11\12\1F\18\1D\14\18\16\1A\1F\13\1B\17\11\14\1A\1C\19\15\13\16\1E\1B\15\10\10\1E\1C\19\17\12\17\12\1B\11\14\1E\11\17\19\14\1C\1A\1E\18\12\1D\10\1F\16\1C\1A\19\1D\10\1F\13\13\15\15\16\18\1B=12?8=486:?3;714:<9536>;500><97272;14>1794<:>82=0?6<:9=0?335568;MABOHMDHFJOCKGADJLIECFNKE@@NLIGBGBKADNAGIDLJNHBM@OFLJIM@OCCEEFHK}qr\7Fx}txvz\7Fs{wqtz|yusv~{upp~|ywrwr{qt~qwyt|z~xr}p\7Fv|zy}p\7Fssuuvx{\AD\A1\A2\AF\A8\AD\A4\A8\A6\AA\AF\A3\AB\A7\A1\A4\AA\AC\A9\A5\A3\A6\AE\AB\A5\A0\A0\AE\AC\A9\A7\A2\A7\A2\AB\A1\A4\AE\A1\A7\A9\A4\AC\AA\AE\A8\A2\AD\A0\AF\A6\AC\AA\A9\AD\A0\AF\A3\A3\A5\A5\A6\A8\AB\ED\E1\E2\EF\E8\ED\E4\E8\E6\EA\EF\E3\EB\E7\E1\E4\EA\EC\E9\E5\E3\E6\EE\EB\E5\E0\E0\EE\EC\E9\E7\E2\E7\E2\EB\E1\E4\EE\E1\E7\E9\E4\EC\EA\EE\E8\E2\ED\E0\EF\E6\EC\EA\E9\ED\E0\EF\E3\E3\E5\E5\E6\E8\EB}qr\7Fx}txvz\7Fs{wqtz|yusv~{upp~|ywrwr{qt~qwyt|z~xr}p\7Fv|zy}p\7Fssuuvx{mabohmdhfjockgadjliecfnke``nligbgbkadnagidljnhbm`ofljim`occeefhkalign 16
@key_shifts = internal unnamed_addr constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@key_perm = internal unnamed_addr constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@comp_perm = internal unnamed_addr constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@final_perm = internal unnamed_addr constant [64 x i8] c"91)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\0780( \18\10\08\00:2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06", align 16
@pbox = internal unnamed_addr constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@ctermid.s2 = internal unnamed_addr global i8* null, align 8
@.str84 = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@.str185 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str86 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str87 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str188 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str89 = private unnamed_addr constant [2 x i8] c".\00", align 1
@__dns_doqueries.sa = private unnamed_addr constant { %struct.sockaddr_in, [12 x i8] } { %struct.sockaddr_in zeroinitializer, [12 x i8] undef }, align 4
@.str90 = private unnamed_addr constant [17 x i8] c"/etc/resolv.conf\00", align 1
@.str191 = private unnamed_addr constant [11 x i8] c"nameserver\00", align 1
@__dns_count_addrs.p = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 4, i32 1], [2 x i32] [i32 16, i32 28]], align 16
@.str292 = private unnamed_addr constant [25 x i8] c"%d.%d.%d.%d.in-addr.arpa\00", align 1
@mkptr6.xdigits = internal unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 16
@.str3 = private unnamed_addr constant [9 x i8] c"ip6.arpa\00", align 1
@.str95 = private unnamed_addr constant [14 x i8] c"unknown error\00", align 1
@ecvt.buf = internal global [16 x i8] zeroinitializer, align 16
@.str98 = private unnamed_addr constant [5 x i8] c"%.*e\00", align 1
@__environ = global i8** null, align 8
@.str101 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str106 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str1107 = private unnamed_addr constant [29 x i8] c"/usr/local/bin:/bin:/usr/bin\00", align 1
@twom100 = internal constant float 0x39B0000000000000, align 4
@exp2ft = internal unnamed_addr constant [16 x double] [double 0x3FE6A09E667F3BCD, double 0x3FE7A11473EB0187, double 0x3FE8ACE5422AA0DB, double 0x3FE9C49182A3F090, double 0x3FEAE89F995AD3AD, double 0x3FEC199BDD85529C, double 0x3FED5818DCFBA487, double 0x3FEEA4AFA2A490DA, double 1.000000e+00, double 0x3FF0B5586CF9890F, double 0x3FF172B83C7D517B, double 0x3FF2387A6E756238, double 0x3FF306FE0A31B715, double 0x3FF3DEA64C123422, double 0x3FF4BFDAD5362A27, double 0x3FF5AB07DD485429], align 16
@twom10000 = internal constant x86_fp80 0xK18EF8000000000000000, align 16
@tbl = internal unnamed_addr constant [256 x double] [double 0x3FE6A09E667F3BCD, double 0xBC8BDD3413B26480, double 0x3FE6C012750BDABF, double 0xBC62895667FF0C00, double 0x3FE6DFB23C651A2F, double 0xBC5BBE3A683C8800, double 0x3FE6FF7DF9519484, double 0xBC783C0F25860F00, double 0x3FE71F75E8EC5F74, double 0xBC716E4786887B00, double 0x3FE73F9A48A58174, double 0xBC80A8D96C65D500, double 0x3FE75FEB564267C9, double 0xBC80245957316E00, double 0x3FE780694FDE5D3F, double 0x3C8866B80A021600, double 0x3FE7A11473EB0187, double 0xBC741577EE049900, double 0x3FE7C1ED0130C132, double 0x3C8F124CD1164E00, double 0x3FE7E2F336CF4E62, double 0x3C605D02BA157A00, double 0x3FE80427543E1A12, double 0xBC827C86626D9700, double 0x3FE82589994CCE13, double 0xBC8D4C1DD4153300, double 0x3FE8471A4623C7AD, double 0xBC78D684A341CE00, double 0x3FE868D99B4492ED, double 0xBC8FC6F89BD4F680, double 0x3FE88AC7D98A6699, double 0x3C8994C2F37CB500, double 0x3FE8ACE5422AA0DB, double 0x3C86E9F156864B00, double 0x3FE8CF3216B5448C, double 0xBC60D55E32E9E400, double 0x3FE8F1AE99157736, double 0x3C75CC13A2E39700, double 0x3FE9145B0B91FFC6, double 0xBC8DD6792E582500, double 0x3FE93737B0CDC5E5, double 0xBC575FC781B58000, double 0x3FE95A44CBC8520F, double 0xBC664B7C96A5F000, double 0x3FE97D829FDE4E50, double 0xBC8D185B7C1B8600, double 0x3FE9A0F170CA07BA, double 0xBC8173BD91CEE600, double 0x3FE9C49182A3F090, double 0x3C6C7C46B071F200, double 0x3FE9E86319E32323, double 0x3C6824CA78E64C00, double 0x3FEA0C667B5DE565, double 0xBC8359495D1CD500, double 0x3FEA309BEC4A2D33, double 0x3C86305C7DDC3680, double 0x3FEA5503B23E255D, double 0xBC8D2F6EDB8D4200, double 0x3FEA799E1330B358, double 0x3C8BCB7ECAC56400, double 0x3FEA9E6B5579FDBF, double 0x3C80FAC90EF7FD00, double 0x3FEAC36BBFD3F37A, double 0xBC7F9234CAE76D00, double 0x3FEAE89F995AD3AD, double 0x3C87A1CD345DCC80, double 0x3FEB0E07298DB666, double 0xBC8BDEF54C80E400, double 0x3FEB33A2B84F15FB, double 0xBC52805E3084D800, double 0x3FEB59728DE5593A, double 0xBC8C71DFBBBA6E00, double 0x3FEB7F76F2FB5E47, double 0xBC65584F7E54AC00, double 0x3FEBA5B030A1064A, double 0xBC8EFCD30E542900, double 0x3FEBCC1E904BC1D2, double 0x3C723DD07A2D9F00, double 0x3FEBF2C25BD71E09, double 0xBC8EFDCA3F6B9C80, double 0x3FEC199BDD85529C, double 0x3C71106589504900, double 0x3FEC40AB5FFFD07A, double 0x3C8B4537E083C600, double 0x3FEC67F12E57D14B, double 0x3C82884DFF483C80, double 0x3FEC8F6D9406E7B5, double 0x3C61ACBC48805C00, double 0x3FECB720DCEF9069, double 0x3C6503CBD1E94A00, double 0x3FECDF0B555DC3FA, double 0xBC7DD83B53829D00, double 0x3FED072D4A07897C, double 0xBC8CBC3743797A80, double 0x3FED2F87080D89F2, double 0xBC8D487B719D8580, double 0x3FED5818DCFBA487, double 0x3C72ED02D75B3700, double 0x3FED80E316C98398, double 0xBC811EC18BEDE000, double 0x3FEDA9E603DB3285, double 0x3C8C2300696DB500, double 0x3FEDD321F301B460, double 0x3C82DA5778F01900, double 0x3FEDFC97337B9B5F, double 0xBC81A5CD4F184B80, double 0x3FEE264614F5A129, double 0xBC87B627817A1480, double 0x3FEE502EE78B3FF6, double 0x3C739E8980A9CD00, double 0x3FEE7A51FBC74C83, double 0x3C82D522CA0C8E00, double 0x3FEEA4AFA2A490DA, double 0xBC8E9C23179C2880, double 0x3FEECF482D8E67F1, double 0xBC8C93F3B411AD80, double 0x3FEEFA1BEE615A27, double 0x3C8DC7F486A4B680, double 0x3FEF252B376BBA97, double 0x3C83A1A5BF0D8E80, double 0x3FEF50765B6E4540, double 0x3C89D3E12DD8A180, double 0x3FEF7BFDAD9CBE14, double 0xBC8DBB12D0063500, double 0x3FEFA7C1819E90D8, double 0x3C774853F3A59300, double 0x3FEFD3C22B8F71F1, double 0x3C52EB7496657800, double 1.000000e+00, double 0.000000e+00, double 0x3FF0163DA9FB3335, double 0x3C9B61299AB8CD80, double 0x3FF02C9A3E778061, double 0xBC719083535B0800, double 0x3FF04315E86E7F85, double 0xBC90A31C1977C980, double 0x3FF059B0D3158574, double 0x3C8D73E2A475B400, double 0x3FF0706B29DDF6DE, double 0xBC8C91DFE2B13C00, double 0x3FF0874518759BC8, double 0x3C6186BE4BB28400, double 0x3FF09E3ECAC6F383, double 0x3C91487818316100, double 0x3FF0B5586CF9890F, double 0x3C98A62E4ADC6100, double 0x3FF0CC922B7247F7, double 0x3C901EDC16E24F80, double 0x3FF0E3EC32D3D1A2, double 0x3C403A1727C58000, double 0x3FF0FB66AFFED31B, double 0xBC6B9BEDC44EBC00, double 0x3FF11301D0125B51, double 0xBC96C51039449B00, double 0x3FF12ABDC06C31CC, double 0xBC51B514B36CA800, double 0x3FF1429AAEA92DE0, double 0xBC932FBF9AF13680, double 0x3FF15A98C8A58E51, double 0x3C82406AB9EEAB00, double 0x3FF172B83C7D517B, double 0xBC819041B9D78A00, double 0x3FF18AF9388C8DEA, double 0xBC911023D1970F80, double 0x3FF1A35BEB6FCB75, double 0x3C8E5B4C7B496900, double 0x3FF1BBE084045CD4, double 0xBC995386352EF600, double 0x3FF1D4873168B9AA, double 0x3C9E016E00A26400, double 0x3FF1ED5022FCD91D, double 0xBC91DF98027BB780, double 0x3FF2063B88628CD6, double 0x3C8DC775814A8500, double 0x3FF21F49917DDC96, double 0x3C82A97E9494A600, double 0x3FF2387A6E756238, double 0x3C99B07EB6C70580, double 0x3FF251CE4FB2A63F, double 0x3C8AC155BEF4F500, double 0x3FF26B4565E27CDD, double 0x3C82BD339940EA00, double 0x3FF284DFE1F56381, double 0xBC9A4C3A8C3F0D80, double 0x3FF29E9DF51FDEE1, double 0x3C8612E8AFAD1200, double 0x3FF2B87FD0DAD990, double 0xBC410ADCD6382000, double 0x3FF2D285A6E4030B, double 0x3C90024754DB4200, double 0x3FF2ECAFA93E2F56, double 0x3C71CA0F45D52400, double 0x3FF306FE0A31B715, double 0x3C86F46AD2318300, double 0x3FF32170FC4CD831, double 0x3C8A9CE78E180400, double 0x3FF33C08B26416FF, double 0x3C93272184365980, double 0x3FF356C55F929FF1, double 0xBC8B5CEE5C4E4600, double 0x3FF371A7373AA9CB, double 0xBC963AEABF42EB00, double 0x3FF38CAE6D05D866, double 0xBC9E958D3C990480, double 0x3FF3A7DB34E59FF7, double 0xBC75E436D661F600, double 0x3FF3C32DC313A8E5, double 0xBC9EFFF8375D2A00, double 0x3FF3DEA64C123422, double 0x3C8ADA0911F09F00, double 0x3FF3FA4504AC801C, double 0xBC97D023F956FA00, double 0x3FF4160A21F72E2A, double 0xBC5EF3691C309000, double 0x3FF431F5D950A897, double 0xBC81C7DDE35F7A00, double 0x3FF44E086061892D, double 0x3C489B7A04EF8000, double 0x3FF46A41ED1D0057, double 0x3C9C944BD1648A80, double 0x3FF486A2B5C13CD0, double 0x3C73C1A3B6906200, double 0x3FF4A32AF0D7D3DE, double 0x3C99CB62F3D1BE80, double 0x3FF4BFDAD5362A27, double 0x3C7D4397AFEC4200, double 0x3FF4DCB299FDDD0D, double 0x3C98ECDBBC6A7800, double 0x3FF4F9B2769D2CA7, double 0xBC94B309D2595800, double 0x3FF516DAA2CF6642, double 0xBC8F768569BD9400, double 0x3FF5342B569D4F82, double 0xBC807ABE1DB13D00, double 0x3FF551A4CA5D920F, double 0xBC8D689CEFEDE600, double 0x3FF56F4736B527DA, double 0x3C99BB2C011D9380, double 0x3FF58D12D497C7FD, double 0x3C8295E15B9A1E00, double 0x3FF5AB07DD485429, double 0x3C96324C05464780, double 0x3FF5C9268A5946B7, double 0x3C3C4B1B81698000, double 0x3FF5E76F15AD2148, double 0x3C9BA6F93080E680, double 0x3FF605E1B976DC09, double 0xBC93E2429B56DE80, double 0x3FF6247EB03A5585, double 0xBC9383C17E40B480, double 0x3FF6434634CCC320, double 0xBC8C483C759D8900, double 0x3FF6623882552225, double 0xBC9BB60987591C00, double 0x3FF68155D44CA973, double 0x3C6038AE44F74000], align 16
@twom1000 = internal constant double 0x170000000000000, align 8
@tbl117 = internal unnamed_addr constant [512 x double] [double 0x3FE6A09E667F3D5D, double 0x3D39880000000000, double 0x3FE6B052FA751744, double 0x3CD8000000000000, double 0x3FE6C012750BD9FE, double 0xBD28780000000000, double 0x3FE6CFDCDDD476BF, double 0x3D1EC00000000000, double 0x3FE6DFB23C651A29, double 0xBCD8000000000000, double 0x3FE6EF9298593AE3, double 0xBCBC000000000000, double 0x3FE6FF7DF9519386, double 0xBD2FD80000000000, double 0x3FE70F7466F42DA3, double 0xBD2C880000000000, double 0x3FE71F75E8EC5FC3, double 0x3D13C00000000000, double 0x3FE72F8286EACF05, double 0xBD38300000000000, double 0x3FE73F9A48A58152, double 0xBD00C00000000000, double 0x3FE74FBD35D7CCFC, double 0x3D2F880000000000, double 0x3FE75FEB564267F1, double 0x3D03E00000000000, double 0x3FE77024B1AB6D48, double 0xBD27D00000000000, double 0x3FE780694FDE5D38, double 0xBCDD000000000000, double 0x3FE790B938AC1D00, double 0x3CE3000000000000, double 0x3FE7A11473EB0178, double 0xBCED000000000000, double 0x3FE7B17B0976D060, double 0x3D20400000000000, double 0x3FE7C1ED0130C133, double 0x3CA0000000000000, double 0x3FE7D26A62FF8636, double 0xBD26900000000000, double 0x3FE7E2F336CF4E3B, double 0xBD02E00000000000, double 0x3FE7F3878491C3E8, double 0xBD24580000000000, double 0x3FE80427543E1B4E, double 0x3D33000000000000, double 0x3FE814D2ADD1071A, double 0x3D0F000000000000, double 0x3FE82589994CCD7E, double 0xBD21C00000000000, double 0x3FE8364C1EB942D0, double 0x3D29D00000000000, double 0x3FE8471A4623CAB5, double 0x3D47100000000000, double 0x3FE857F4179F5BBC, double 0x3D22600000000000, double 0x3FE868D99B4491AF, double 0xBD32C40000000000, double 0x3FE879CAD931A395, double 0xBD23000000000000, double 0x3FE88AC7D98A65B8, double 0xBD2A800000000000, double 0x3FE89BD0A4785800, double 0xBCED000000000000, double 0x3FE8ACE5422AA223, double 0x3D33280000000000, double 0x3FE8BE05BAD619FA, double 0x3D42B40000000000, double 0x3FE8CF3216B54383, double 0xBD2ED00000000000, double 0x3FE8E06A5E08664C, double 0xBD20500000000000, double 0x3FE8F1AE99157807, double 0x3D28280000000000, double 0x3FE902FED0282C0E, double 0xBD1CB00000000000, double 0x3FE9145B0B91FF96, double 0xBD05E00000000000, double 0x3FE925C353AA2FF9, double 0x3CF5400000000000, double 0x3FE93737B0CDC64A, double 0x3D17200000000000, double 0x3FE948B82B5F98AE, double 0xBD09000000000000, double 0x3FE95A44CBC852CB, double 0x3D25680000000000, double 0x3FE96BDD9A766F21, double 0xBD36D00000000000, double 0x3FE97D829FDE4E2A, double 0xBD01000000000000, double 0x3FE98F33E47A23A3, double 0x3D2D000000000000, double 0x3FE9A0F170CA0604, double 0xBD38A40000000000, double 0x3FE9B2BB4D53FF89, double 0x3D355C0000000000, double 0x3FE9C49182A3F15B, double 0x3D26B80000000000, double 0x3FE9D674194BB8C5, double 0xBCEC000000000000, double 0x3FE9E86319E3238E, double 0x3D17D00000000000, double 0x3FE9FA5E8D07F302, double 0x3D16400000000000, double 0x3FEA0C667B5DE54D, double 0xBCF5000000000000, double 0x3FEA1E7AED8EB8F6, double 0x3D09E00000000000, double 0x3FEA309BEC4A2E27, double 0x3D2AD80000000000, double 0x3FEA42C980460A5D, double 0xBD1AF00000000000, double 0x3FEA5503B23E259B, double 0x3D0B600000000000, double 0x3FEA674A8AF46213, double 0x3D38880000000000, double 0x3FEA799E1330B3A7, double 0x3D11200000000000, double 0x3FEA8BFE53C12E8D, double 0x3D06C00000000000, double 0x3FEA9E6B5579FCD2, double 0xBD29B80000000000, double 0x3FEAB0E521356FB8, double 0x3D2B700000000000, double 0x3FEAC36BBFD3F381, double 0x3CD9000000000000, double 0x3FEAD5FF3A3C2780, double 0x3CE4000000000000, double 0x3FEAE89F995AD2A3, double 0xBD2C900000000000, double 0x3FEAFB4CE622F367, double 0x3D16500000000000, double 0x3FEB0E07298DB790, double 0x3D2FD40000000000, double 0x3FEB20CE6C9A89A9, double 0x3D12700000000000, double 0x3FEB33A2B84F1A4B, double 0x3D4D470000000000, double 0x3FEB468415B747E7, double 0xBD38380000000000, double 0x3FEB59728DE5593A, double 0x3C98000000000000, double 0x3FEB6C6E29F1C56A, double 0x3D0AD00000000000, double 0x3FEB7F76F2FB5E50, double 0x3CDE800000000000, double 0x3FEB928CF22749B2, double 0xBD04C00000000000, double 0x3FEBA5B030A10603, double 0xBD0D700000000000, double 0x3FEBB8E0B79A6F66, double 0x3D0D900000000000, double 0x3FEBCC1E904BC1FF, double 0x3D02A00000000000, double 0x3FEBDF69C3F3A16F, double 0xBD1F780000000000, double 0x3FEBF2C25BD71DB8, double 0xBD10A00000000000, double 0x3FEC06286141B2E9, double 0xBD11400000000000, double 0x3FEC199BDD8552E0, double 0x3D0BE00000000000, double 0x3FEC2D1CD9FA64EE, double 0xBD09400000000000, double 0x3FEC40AB5FFFD02F, double 0xBD0ED00000000000, double 0x3FEC544778FAFD15, double 0x3D39660000000000, double 0x3FEC67F12E57D0CB, double 0xBD1A100000000000, double 0x3FEC7BA88988C1B6, double 0xBD58458000000000, double 0x3FEC8F6D9406E733, double 0xBD1A480000000000, double 0x3FECA3405751C4DF, double 0x3CCB000000000000, double 0x3FECB720DCEF9094, double 0x3D01400000000000, double 0x3FECCB0F2E6D1689, double 0x3CF0200000000000, double 0x3FECDF0B555DC412, double 0x3CF3600000000000, double 0x3FECF3155B5BAB3B, double 0xBD06900000000000, double 0x3FED072D4A0789BC, double 0x3D09A00000000000, double 0x3FED1B532B08C8FA, double 0xBD15E00000000000, double 0x3FED2F87080D8A85, double 0x3D1D280000000000, double 0x3FED43C8EACAA203, double 0x3D01A00000000000, double 0x3FED5818DCFBA491, double 0x3CDF000000000000, double 0x3FED6C76E862E6A1, double 0xBD03A00000000000, double 0x3FED80E316C9834E, double 0xBD0CD80000000000, double 0x3FED955D71FF6090, double 0x3CF4C00000000000, double 0x3FEDA9E603DB32AE, double 0x3CFF900000000000, double 0x3FEDBE7CD63A8325, double 0x3CE9800000000000, double 0x3FEDD321F301B445, double 0xBCF5200000000000, double 0x3FEDE7D5641C05BF, double 0xBD1D700000000000, double 0x3FEDFC97337B9AEC, double 0xBD16140000000000, double 0x3FEE11676B197D5E, double 0x3D0B480000000000, double 0x3FEE264614F5A3E7, double 0x3D40CE0000000000, double 0x3FEE3B333B16EE5C, double 0x3D0C680000000000, double 0x3FEE502EE78B3FB4, double 0xBD09300000000000, double 0x3FEE653924676D68, double 0xBCE5000000000000, double 0x3FEE7A51FBC74C44, double 0xBD07F80000000000, double 0x3FEE8F7977CDB726, double 0xBCF3700000000000, double 0x3FEEA4AFA2A490E8, double 0x3CE5D00000000000, double 0x3FEEB9F4867CCAE4, double 0x3D161A0000000000, double 0x3FEECF482D8E680D, double 0x3CF5500000000000, double 0x3FEEE4AAA2188514, double 0x3CC6400000000000, double 0x3FEEFA1BEE615A13, double 0xBCEE800000000000, double 0x3FEF0F9C1CB64106, double 0xBCFA880000000000, double 0x3FEF252B376BB963, double 0xBD2C900000000000, double 0x3FEF3AC948DD7275, double 0x3CAA000000000000, double 0x3FEF50765B6E4524, double 0xBCF4F00000000000, double 0x3FEF6632798844FD, double 0x3CCA800000000000, double 0x3FEF7BFDAD9CBE38, double 0x3CFABC0000000000, double 0x3FEF91D802243C82, double 0xBCD4600000000000, double 0x3FEFA7C1819E908E, double 0xBD0B0C0000000000, double 0x3FEFBDBA3692D511, double 0xBCC0E00000000000, double 0x3FEFD3C22B8F7194, double 0xBD10DE8000000000, double 0x3FEFE9D96B2A23EE, double 0x3CEE430000000000, double 1.000000e+00, double 0.000000e+00, double 0x3FF00B1AFA5ABCBE, double 0xBCB3400000000000, double 0x3FF0163DA9FB3303, double 0xBD12170000000000, double 0x3FF02168143B0282, double 0x3CBA400000000000, double 0x3FF02C9A3E77806C, double 0x3CEF980000000000, double 0x3FF037D42E11BBCA, double 0xBCC7400000000000, double 0x3FF04315E86E7F89, double 0x3CD8300000000000, double 0x3FF04E5F72F65467, double 0xBD1A3F0000000000, double 0x3FF059B0D315855A, double 0xBD02840000000000, double 0x3FF0650A0E3C1F95, double 0x3CF1600000000000, double 0x3FF0706B29DDF71A, double 0x3D15240000000000, double 0x3FF07BD42B72A82D, double 0xBCE9A00000000000, double 0x3FF0874518759BD0, double 0x3CE6400000000000, double 0x3FF092BDF66607C8, double 0xBD00780000000000, double 0x3FF09E3ECAC6F383, double 0xBC98000000000000, double 0x3FF0A9C79B1F3930, double 0x3CFFA00000000000, double 0x3FF0B5586CF988FC, double 0xBCFAC80000000000, double 0x3FF0C0F145E46C8A, double 0x3CD9C00000000000, double 0x3FF0CC922B724816, double 0x3D05200000000000, double 0x3FF0D83B23395DD8, double 0xBCFAD00000000000, double 0x3FF0E3EC32D3D1F3, double 0x3D1BAC0000000000, double 0x3FF0EFA55FDFA9A6, double 0xBD04E80000000000, double 0x3FF0FB66AFFED2F0, double 0xBD0D300000000000, double 0x3FF1073028D7234B, double 0x3CF1500000000000, double 0x3FF11301D0125B5B, double 0x3CEC000000000000, double 0x3FF11EDBAB5E2AF9, double 0x3D16BC0000000000, double 0x3FF12ABDC06C31D5, double 0x3CE8400000000000, double 0x3FF136A814F2047D, double 0xBD0ED00000000000, double 0x3FF1429AAEA92DE9, double 0x3CE8E00000000000, double 0x3FF14E95934F3138, double 0x3CEB400000000000, double 0x3FF15A98C8A58E71, double 0x3D05300000000000, double 0x3FF166A45471C3DF, double 0x3D03380000000000, double 0x3FF172B83C7D5211, double 0x3D28D40000000000, double 0x3FF17ED48695BB9F, double 0xBD05D00000000000, double 0x3FF18AF9388C8D93, double 0xBD1C880000000000, double 0x3FF1972658375D66, double 0x3D11F00000000000, double 0x3FF1A35BEB6FCBA7, double 0x3D10480000000000, double 0x3FF1AF99F81387E3, double 0xBD47390000000000, double 0x3FF1BBE084045D54, double 0x3D24E40000000000, double 0x3FF1C82F95281C43, double 0xBD0A200000000000, double 0x3FF1D4873168B9B2, double 0x3CE3800000000000, double 0x3FF1E0E75EB44031, double 0x3CEAC00000000000, double 0x3FF1ED5022FCD938, double 0x3D01900000000000, double 0x3FF1F9C18438CDF7, double 0xBD1B780000000000, double 0x3FF2063B88628D8F, double 0x3D2D940000000000, double 0x3FF212BE3578A81E, double 0x3CD8000000000000, double 0x3FF21F49917DDD41, double 0x3D2B340000000000, double 0x3FF22BDDA2791323, double 0x3D19F80000000000, double 0x3FF2387A6E7561E7, double 0xBD19C80000000000, double 0x3FF2451FFB821427, double 0x3D02300000000000, double 0x3FF251CE4FB2A602, double 0xBD13480000000000, double 0x3FF25E85711ECEB0, double 0x3D12700000000000, double 0x3FF26B4565E27D16, double 0x3D11D00000000000, double 0x3FF2780E341DE00F, double 0x3D31EE0000000000, double 0x3FF284DFE1F5633E, double 0xBD14C00000000000, double 0x3FF291BA7591BB30, double 0xBD13D80000000000, double 0x3FF29E9DF51FDF09, double 0x3D08B00000000000, double 0x3FF2AB8A66D10E9B, double 0xBD227C0000000000, double 0x3FF2B87FD0DADA3A, double 0x3D2A340000000000, double 0x3FF2C57E39771AF9, double 0xBD10800000000000, double 0x3FF2D285A6E402D9, double 0xBD0ED00000000000, double 0x3FF2DF961F641579, double 0xBCF4200000000000, double 0x3FF2ECAFA93E2ECF, double 0xBD24980000000000, double 0x3FF2F9D24ABD8822, double 0xBD16300000000000, double 0x3FF306FE0A31B625, double 0xBD32360000000000, double 0x3FF31432EDEEA50B, double 0xBD70DF8000000000, double 0x3FF32170FC4CD7B8, double 0xBD22480000000000, double 0x3FF32EB83BA8E9A2, double 0xBD25980000000000, double 0x3FF33C08B2641766, double 0x3D1ED00000000000, double 0x3FF3496266E3FA27, double 0xBCDC000000000000, double 0x3FF356C55F929F0F, double 0xBD30D80000000000, double 0x3FF36431A2DE88B9, double 0x3D22C80000000000, double 0x3FF371A7373AAA39, double 0x3D20600000000000, double 0x3FF37F26231E74FE, double 0xBD16600000000000, double 0x3FF38CAE6D05D838, double 0xBD0AE00000000000, double 0x3FF39A401B713EC3, double 0xBD44720000000000, double 0x3FF3A7DB34E5A020, double 0x3D08200000000000, double 0x3FF3B57FBFEC6E95, double 0x3D3E800000000000, double 0x3FF3C32DC313A8F2, double 0x3CEF800000000000, double 0x3FF3D0E544EDE122, double 0xBD17A00000000000, double 0x3FF3DEA64C1234BB, double 0x3D26300000000000, double 0x3FF3EC70DF1C4ECC, double 0xBD48A60000000000, double 0x3FF3FA4504AC7E8C, double 0xBD3CDC0000000000, double 0x3FF40822C367A0BB, double 0x3D25B80000000000, double 0x3FF4160A21F72E95, double 0x3D1EC00000000000, double 0x3FF423FB27094646, double 0xBD13600000000000, double 0x3FF431F5D950A920, double 0x3D23980000000000, double 0x3FF43FFA3F84B9EB, double 0x3CFA000000000000, double 0x3FF44E0860618919, double 0xBCF6C00000000000, double 0x3FF45C2042A7D201, double 0xBD0BC00000000000, double 0x3FF46A41ED1D0016, double 0xBD12800000000000, double 0x3FF4786D668B3326, double 0x3D30E00000000000, double 0x3FF486A2B5C13C00, double 0xBD2D400000000000, double 0x3FF494E1E192AF04, double 0x3D0C200000000000, double 0x3FF4A32AF0D7D372, double 0xBD1E500000000000, double 0x3FF4B17DEA6DB801, double 0x3D07800000000000, double 0x3FF4BFDAD53629E1, double 0xBD13800000000000, double 0x3FF4CE41B817C132, double 0x3D00800000000000, double 0x3FF4DCB299FDDDDB, double 0x3D2C700000000000, double 0x3FF4EB2D81D8AB96, double 0xBD1CE00000000000, double 0x3FF4F9B2769D2D02, double 0x3D19200000000000, double 0x3FF508417F4531C1, double 0xBD08C00000000000, double 0x3FF516DAA2CF662A, double 0xBCFA000000000000, double 0x3FF5257DE83F51EA, double 0x3D4A080000000000, double 0x3FF5342B569D4EDA, double 0xBD26D80000000000, double 0x3FF542E2F4F6AC1A, double 0xBD32440000000000, double 0x3FF551A4CA5D94DB, double 0x3D483C0000000000, double 0x3FF56070DDE9116B, double 0x3D24B00000000000, double 0x3FF56F4736B529DE, double 0x3D415A0000000000, double 0x3FF57E27DBE2C40E, double 0xBD29E00000000000, double 0x3FF58D12D497C76F, double 0xBD23080000000000, double 0x3FF59C0827FF0B4C, double 0x3D4DEC0000000000, double 0x3FF5AB07DD485427, double 0xBCC4000000000000, double 0x3FF5BA11FBA87AF4, double 0x3D30080000000000, double 0x3FF5C9268A59460B, double 0xBD26C80000000000, double 0x3FF5D84590998E3F, double 0x3D469A0000000000, double 0x3FF5E76F15AD20E1, double 0xBD1B400000000000, double 0x3FF5F6A320DCEBCA, double 0x3D17700000000000, double 0x3FF605E1B976DCB8, double 0x3D26F80000000000, double 0x3FF6152AE6CDF715, double 0x3D01000000000000, double 0x3FF6247EB03A5531, double 0xBD15D00000000000, double 0x3FF633DD1D1929B5, double 0xBD12D00000000000, double 0x3FF6434634CCC313, double 0xBCEA800000000000, double 0x3FF652B9FEBC8EFA, double 0xBD28600000000000, double 0x3FF6623882553397, double 0x3D71FE0000000000, double 0x3FF671C1C708328E, double 0xBD37200000000000, double 0x3FF68155D44CA97E, double 0x3CE6800000000000, double 0x3FF690F4B19E9471, double 0xBD29780000000000], align 16
@twom100118 = internal constant float 0x39B0000000000000, align 4
@ln2HI = internal unnamed_addr constant [2 x float] [float 0x3FE62E4000000000, float 0xBFE62E4000000000], align 4
@ln2LO = internal unnamed_addr constant [2 x float] [float 0x3EB7F7D1C0000000, float 0xBEB7F7D1C0000000], align 4
@halF = internal unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
@P = internal constant [3 x x86_fp80] [x86_fp80 0xK3FF2844E6EAF225F424E, x86_fp80 0xK3FF9F83688665163F39E, x86_fp80 0xK3FFEFFFFFFFFFFFFFFFE], align 16
@Q = internal constant [4 x x86_fp80] [x86_fp80 0xK3FECC975B5E1B2FCFF1E, x86_fp80 0xK3FF6A571CDA845B5FF3E, x86_fp80 0xK3FFCE8B84CC43F039EE1, x86_fp80 0xK40008000000000000000], align 16
@twom1000129 = internal constant double 0x170000000000000, align 8
@ln2HI130 = internal unnamed_addr constant [2 x double] [double 0x3FE62E42FEE00000, double 0xBFE62E42FEE00000], align 16
@ln2LO131 = internal unnamed_addr constant [2 x double] [double 0x3DEA39EF35793C76, double 0xBDEA39EF35793C76], align 16
@halF132 = internal unnamed_addr constant [2 x double] [double 5.000000e-01, double -5.000000e-01], align 16
@.str149 = private unnamed_addr constant [5 x i8] c"%.*f\00", align 1
@.str1150 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str2151 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str3152 = private unnamed_addr constant [16 x i8] c"000000000000000\00", align 1
@.str153 = private unnamed_addr constant [4 x i8] c"rwa\00", align 1
@fexecve.proc = internal constant [17 x i8] c"/proc/self/fd/%d\00", align 16
@dummy158 = internal constant %struct.__FILE_s.67* null, align 8
@fgetpwent.line = internal global i8* null, align 8
@fgetpwent.pw = internal global %struct.passwd.71 zeroinitializer, align 8
@.str165 = private unnamed_addr constant [4 x i8] c"rwa\00", align 1
@Zero = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@Zero166 = internal unnamed_addr constant [2 x x86_fp80] [x86_fp80 0xK00000000000000000000, x86_fp80 0xK80000000000000000000], align 16
@Zero167 = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double -0.000000e+00], align 16
@.str168 = private unnamed_addr constant [4 x i8] c"rwa\00", align 1
@fpathconf.values = internal unnamed_addr constant [21 x i16] [i16 8, i16 255, i16 255, i16 255, i16 4096, i16 4096, i16 1, i16 1, i16 0, i16 1, i16 -1, i16 -1, i16 -1, i16 64, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 255, i16 1], align 16
@.str177 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@msgs = internal constant [239 x i8] c"Invalid flags\00Name does not resolve\00Try again\00Non-recoverable error\00Unknown error\00Unrecognized address family or invalid length\00Unrecognized socket type\00Unrecognized service\00Unknown error\00Out of memory\00System error\00Overflow\00\00Unknown error\00", align 16
@.str192 = private unnamed_addr constant [5 x i8] c"%.*g\00", align 1
@getaddrinfo.sa = private unnamed_addr constant { %struct.sockaddr_in.123, [12 x i8] } { %struct.sockaddr_in.123 zeroinitializer, [12 x i8] undef }, align 4
@.str193 = private unnamed_addr constant [11 x i8] c"/etc/hosts\00", align 1
@.str1194 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str195 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str1196 = private unnamed_addr constant [2 x i8] c".\00", align 1
@getdate.tmbuf = internal global %struct.tm.136 zeroinitializer, align 8
@.str199 = private unnamed_addr constant [8 x i8] c"DATEMSK\00", align 1
@getdate_err = common global i32 0, align 4
@.str1200 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@f = internal unnamed_addr global %struct.__FILE_s.52* null, align 8
@getgrent.line = internal global i8* null, align 8
@getgrent.mem = internal global i8** null, align 8
@getgrent.gr = internal global %struct.group.142 zeroinitializer, align 8
@.str205 = private unnamed_addr constant [11 x i8] c"/etc/group\00", align 1
@.str1206 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str207 = private unnamed_addr constant [11 x i8] c"/etc/group\00", align 1
@.str1208 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@gethostbyaddr.h = internal global %struct.hostent zeroinitializer, align 8
@gethostbyaddr.buf = internal global [64 x i64] zeroinitializer, align 16
@gethostbyname2.h = internal global %struct.hostent.152 zeroinitializer, align 8
@gethostbyname2.buf = internal global [64 x i64] zeroinitializer, align 16
@.str215 = private unnamed_addr constant [8 x i8] c"LOGNAME\00", align 1
@.str216 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@optind = global i32 1, align 4
@opterr = global i32 1, align 4
@optpos = internal unnamed_addr global i32 0, align 4
@optopt = common global i32 0, align 4
@.str221 = private unnamed_addr constant [19 x i8] c": illegal option: \00", align 1
@.str1222 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str2223 = private unnamed_addr constant [32 x i8] c": option requires an argument: \00", align 1
@optarg = common global i8* null, align 8
@getpass.password = internal global [128 x i8] zeroinitializer, align 16
@.str228 = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@f233 = internal unnamed_addr global %struct.__FILE_s.52* null, align 8
@getpwent.line = internal global i8* null, align 8
@getpwent.pw = internal global %struct.passwd.167 zeroinitializer, align 8
@.str234 = private unnamed_addr constant [12 x i8] c"/etc/passwd\00", align 1
@.str1235 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str236 = private unnamed_addr constant [12 x i8] c"/etc/passwd\00", align 1
@.str1237 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@getservbyname.se = internal global %struct.servent zeroinitializer, align 8
@getservbyname.buf = internal global [4 x i64] zeroinitializer, align 16
@.str242 = private unnamed_addr constant [4 x i8] c"tcp\00", align 1
@.str1243 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@getservbyport.se = internal global %struct.servent.175 zeroinitializer, align 8
@getservbyport.buf = internal global [4 x i64] zeroinitializer, align 16
@.str246 = private unnamed_addr constant [4 x i8] c"tcp\00", align 1
@.str1247 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@getspnam.sp = internal global %struct.spwd.182 zeroinitializer, align 8
@getspnam.line = internal unnamed_addr global i8* null, align 8
@.str250 = private unnamed_addr constant [19 x i8] c"/etc/tcb/%s/shadow\00", align 1
@.str1251 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str2252 = private unnamed_addr constant [12 x i8] c"/etc/shadow\00", align 1
@glob.head = private unnamed_addr constant { %struct.match*, [1 x i8], [7 x i8] } { %struct.match* null, [1 x i8] zeroinitializer, [7 x i8] undef }, align 8
@.str256 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str1257 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str2258 = private unnamed_addr constant [2 x i8] c".\00", align 1
@gmtime.tm = internal global %struct.tm.197 zeroinitializer, align 8
@h_errno = common global i32 0, align 4
@mask = internal unnamed_addr global i64 0, align 8
@used = internal unnamed_addr global i64 0, align 8
@tab = internal unnamed_addr global %struct.entry* null, align 8
@msgs261 = internal constant [84 x i8] c"Host not found\00Try again\00Non-recoverable error\00Address not available\00\00Unknown error\00", align 16
@jis0208 = internal unnamed_addr constant [84 x [94 x i16]] [[94 x i16] [i16 12288, i16 12289, i16 12290, i16 -244, i16 -242, i16 12539, i16 -230, i16 -229, i16 -225, i16 -255, i16 12443, i16 12444, i16 180, i16 -192, i16 168, i16 -194, i16 -29, i16 -193, i16 12541, i16 12542, i16 12445, i16 12446, i16 12291, i16 20189, i16 12293, i16 12294, i16 12295, i16 12540, i16 8213, i16 8208, i16 -241, i16 92, i16 12316, i16 8214, i16 -164, i16 8230, i16 8229, i16 8216, i16 8217, i16 8220, i16 8221, i16 -248, i16 -247, i16 12308, i16 12309, i16 -197, i16 -195, i16 -165, i16 -163, i16 12296, i16 12297, i16 12298, i16 12299, i16 12300, i16 12301, i16 12302, i16 12303, i16 12304, i16 12305, i16 -245, i16 8722, i16 177, i16 215, i16 247, i16 -227, i16 8800, i16 -228, i16 -226, i16 8806, i16 8807, i16 8734, i16 8756, i16 9794, i16 9792, i16 176, i16 8242, i16 8243, i16 8451, i16 -27, i16 -252, i16 162, i16 163, i16 -251, i16 -253, i16 -250, i16 -246, i16 -224, i16 167, i16 9734, i16 9733, i16 9675, i16 9679, i16 9678, i16 9671], [94 x i16] [i16 9670, i16 9633, i16 9632, i16 9651, i16 9650, i16 9661, i16 9660, i16 8251, i16 12306, i16 8594, i16 8592, i16 8593, i16 8595, i16 12307, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8712, i16 8715, i16 8838, i16 8839, i16 8834, i16 8835, i16 8746, i16 8745, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8743, i16 8744, i16 172, i16 8658, i16 8660, i16 8704, i16 8707, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8736, i16 8869, i16 8978, i16 8706, i16 8711, i16 8801, i16 8786, i16 8810, i16 8811, i16 8730, i16 8765, i16 8733, i16 8757, i16 8747, i16 8748, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8491, i16 8240, i16 9839, i16 9837, i16 9834, i16 8224, i16 8225, i16 182, i16 0, i16 0, i16 0, i16 0, i16 9711], [94 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 -240, i16 -239, i16 -238, i16 -237, i16 -236, i16 -235, i16 -234, i16 -233, i16 -232, i16 -231, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 -223, i16 -222, i16 -221, i16 -220, i16 -219, i16 -218, i16 -217, i16 -216, i16 -215, i16 -214, i16 -213, i16 -212, i16 -211, i16 -210, i16 -209, i16 -208, i16 -207, i16 -206, i16 -205, i16 -204, i16 -203, i16 -202, i16 -201, i16 -200, i16 -199, i16 -198, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 -191, i16 -190, i16 -189, i16 -188, i16 -187, i16 -186, i16 -185, i16 -184, i16 -183, i16 -182, i16 -181, i16 -180, i16 -179, i16 -178, i16 -177, i16 -176, i16 -175, i16 -174, i16 -173, i16 -172, i16 -171, i16 -170, i16 -169, i16 -168, i16 -167, i16 -166, i16 0, i16 0, i16 0, i16 0], [94 x i16] [i16 12353, i16 12354, i16 12355, i16 12356, i16 12357, i16 12358, i16 12359, i16 12360, i16 12361, i16 12362, i16 12363, i16 12364, i16 12365, i16 12366, i16 12367, i16 12368, i16 12369, i16 12370, i16 12371, i16 12372, i16 12373, i16 12374, i16 12375, i16 12376, i16 12377, i16 12378, i16 12379, i16 12380, i16 12381, i16 12382, i16 12383, i16 12384, i16 12385, i16 12386, i16 12387, i16 12388, i16 12389, i16 12390, i16 12391, i16 12392, i16 12393, i16 12394, i16 12395, i16 12396, i16 12397, i16 12398, i16 12399, i16 12400, i16 12401, i16 12402, i16 12403, i16 12404, i16 12405, i16 12406, i16 12407, i16 12408, i16 12409, i16 12410, i16 12411, i16 12412, i16 12413, i16 12414, i16 12415, i16 12416, i16 12417, i16 12418, i16 12419, i16 12420, i16 12421, i16 12422, i16 12423, i16 12424, i16 12425, i16 12426, i16 12427, i16 12428, i16 12429, i16 12430, i16 12431, i16 12432, i16 12433, i16 12434, i16 12435, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [94 x i16] [i16 12449, i16 12450, i16 12451, i16 12452, i16 12453, i16 12454, i16 12455, i16 12456, i16 12457, i16 12458, i16 12459, i16 12460, i16 12461, i16 12462, i16 12463, i16 12464, i16 12465, i16 12466, i16 12467, i16 12468, i16 12469, i16 12470, i16 12471, i16 12472, i16 12473, i16 12474, i16 12475, i16 12476, i16 12477, i16 12478, i16 12479, i16 12480, i16 12481, i16 12482, i16 12483, i16 12484, i16 12485, i16 12486, i16 12487, i16 12488, i16 12489, i16 12490, i16 12491, i16 12492, i16 12493, i16 12494, i16 12495, i16 12496, i16 12497, i16 12498, i16 12499, i16 12500, i16 12501, i16 12502, i16 12503, i16 12504, i16 12505, i16 12506, i16 12507, i16 12508, i16 12509, i16 12510, i16 12511, i16 12512, i16 12513, i16 12514, i16 12515, i16 12516, i16 12517, i16 12518, i16 12519, i16 12520, i16 12521, i16 12522, i16 12523, i16 12524, i16 12525, i16 12526, i16 12527, i16 12528, i16 12529, i16 12530, i16 12531, i16 12532, i16 12533, i16 12534, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [94 x i16] [i16 913, i16 914, i16 915, i16 916, i16 917, i16 918, i16 919, i16 920, i16 921, i16 922, i16 923, i16 924, i16 925, i16 926, i16 927, i16 928, i16 929, i16 931, i16 932, i16 933, i16 934, i16 935, i16 936, i16 937, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 945, i16 946, i16 947, i16 948, i16 949, i16 950, i16 951, i16 952, i16 953, i16 954, i16 955, i16 956, i16 957, i16 958, i16 959, i16 960, i16 961, i16 963, i16 964, i16 965, i16 966, i16 967, i16 968, i16 969, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [94 x i16] [i16 1040, i16 1041, i16 1042, i16 1043, i16 1044, i16 1045, i16 1025, i16 1046, i16 1047, i16 1048, i16 1049, i16 1050, i16 1051, i16 1052, i16 1053, i16 1054, i16 1055, i16 1056, i16 1057, i16 1058, i16 1059, i16 1060, i16 1061, i16 1062, i16 1063, i16 1064, i16 1065, i16 1066, i16 1067, i16 1068, i16 1069, i16 1070, i16 1071, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1072, i16 1073, i16 1074, i16 1075, i16 1076, i16 1077, i16 1105, i16 1078, i16 1079, i16 1080, i16 1081, i16 1082, i16 1083, i16 1084, i16 1085, i16 1086, i16 1087, i16 1088, i16 1089, i16 1090, i16 1091, i16 1092, i16 1093, i16 1094, i16 1095, i16 1096, i16 1097, i16 1098, i16 1099, i16 1100, i16 1101, i16 1102, i16 1103, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [94 x i16] [i16 9472, i16 9474, i16 9484, i16 9488, i16 9496, i16 9492, i16 9500, i16 9516, i16 9508, i16 9524, i16 9532, i16 9473, i16 9475, i16 9487, i16 9491, i16 9499, i16 9495, i16 9507, i16 9523, i16 9515, i16 9531, i16 9547, i16 9504, i16 9519, i16 9512, i16 9527, i16 9535, i16 9501, i16 9520, i16 9509, i16 9528, i16 9538, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [94 x i16] zeroinitializer, [94 x i16] zeroinitializer, [94 x i16] zeroinitializer, [94 x i16] zeroinitializer, [94 x i16] zeroinitializer, [94 x i16] zeroinitializer, [94 x i16] zeroinitializer, [94 x i16] [i16 20124, i16 21782, i16 23043, i16 -27073, i16 21696, i16 24859, i16 25384, i16 23030, i16 -28638, i16 -31627, i16 -31972, i16 31312, i16 24746, i16 25569, i16 28197, i16 26093, i16 -31642, i16 -32090, i16 -25611, i16 26771, i16 22311, i16 26017, i16 25201, i16 23451, i16 22992, i16 -31109, i16 -26380, i16 32098, i16 32190, i16 -25714, i16 25110, i16 31903, i16 -30537, i16 23433, i16 24245, i16 25353, i16 26263, i16 26696, i16 -27193, i16 -26739, i16 26447, i16 20197, i16 20234, i16 20301, i16 20381, i16 20553, i16 22258, i16 22839, i16 22996, i16 23041, i16 23561, i16 24799, i16 24847, i16 24944, i16 26131, i16 26885, i16 28858, i16 30031, i16 30064, i16 31227, i16 32173, i16 32239, i16 -32573, i16 -31730, i16 -30621, i16 -29950, i16 -28587, i16 -28550, i16 21307, i16 20117, i16 20133, i16 22495, i16 -32590, i16 -28479, i16 30959, i16 19968, i16 22769, i16 28322, i16 -28616, i16 31282, i16 -31960, i16 -32117, i16 -25553, i16 20801, i16 21360, i16 21693, i16 21729, i16 22240, i16 23035, i16 24341, i16 -26382, i16 28139, i16 -32540, i16 -31443], [94 x i16] [i16 -27038, i16 -27024, i16 -26976, i16 -26629, i16 21515, i16 21491, i16 23431, i16 28879, i16 32701, i16 -28734, i16 -26904, i16 21359, i16 -25252, i16 31418, i16 19985, i16 30867, i16 -32260, i16 28198, i16 22040, i16 21764, i16 27421, i16 -31462, i16 -25541, i16 23013, i16 21417, i16 28006, i16 29916, i16 -27249, i16 22082, i16 20113, i16 -28597, i16 -26894, i16 -31921, i16 -26356, i16 21473, i16 21942, i16 23344, i16 24433, i16 26144, i16 26355, i16 26628, i16 27704, i16 27891, i16 27945, i16 29787, i16 30408, i16 31310, i16 -26572, i16 -32015, i16 -30629, i16 -30112, i16 -27923, i16 28082, i16 30123, i16 30410, i16 -26171, i16 24742, i16 -29951, i16 -29302, i16 -27214, i16 27022, i16 21421, i16 20870, i16 22290, i16 22576, i16 22852, i16 23476, i16 24310, i16 24616, i16 25513, i16 25588, i16 27839, i16 28436, i16 28814, i16 28948, i16 29017, i16 29141, i16 29503, i16 32257, i16 -32138, i16 -32047, i16 -31337, i16 -28576, i16 -28069, i16 -25317, i16 22633, i16 26044, i16 27738, i16 29989, i16 20985, i16 22830, i16 22885, i16 24448, i16 24540], [94 x i16] [i16 25276, i16 26106, i16 27178, i16 27431, i16 27572, i16 29579, i16 32705, i16 -30378, i16 -25300, i16 -25330, i16 -24892, i16 23713, i16 27798, i16 -31877, i16 20740, i16 23627, i16 25014, i16 -32314, i16 26742, i16 29281, i16 20057, i16 20474, i16 21368, i16 24681, i16 28201, i16 31311, i16 -26637, i16 19979, i16 21270, i16 20206, i16 20309, i16 20285, i16 20385, i16 20339, i16 21152, i16 21487, i16 22025, i16 22799, i16 23233, i16 23478, i16 23521, i16 31185, i16 26247, i16 26524, i16 26550, i16 27468, i16 27827, i16 28779, i16 29634, i16 31117, i16 31166, i16 31292, i16 31623, i16 -32079, i16 -32037, i16 -31996, i16 -31881, i16 -31761, i16 -31789, i16 -30874, i16 -30030, i16 22057, i16 -29528, i16 -28698, i16 -28594, i16 -26850, i16 -31094, i16 20420, i16 23784, i16 25105, i16 29273, i16 30011, i16 -32283, i16 -32067, i16 -30978, i16 -29504, i16 -26939, i16 -26349, i16 -26155, i16 20171, i16 20250, i16 -30237, i16 22238, i16 22602, i16 22730, i16 24315, i16 24555, i16 24618, i16 24724, i16 24674, i16 25040, i16 25106, i16 25296, i16 25913], [94 x i16] [i16 -25791, i16 26214, i16 26800, i16 28023, i16 28784, i16 30028, i16 30342, i16 32117, i16 -32091, i16 -30727, i16 -27253, i16 -26994, i16 -29539, i16 20977, i16 21182, i16 22806, i16 21683, i16 23475, i16 23830, i16 24936, i16 27010, i16 28079, i16 30861, i16 -31541, i16 -30633, i16 -30094, i16 -27737, i16 -25928, i16 28012, i16 -26200, i16 -31015, i16 22435, i16 26623, i16 -31026, i16 -28146, i16 21123, i16 22151, i16 21508, i16 24275, i16 25313, i16 25785, i16 26684, i16 26680, i16 27579, i16 29554, i16 30906, i16 31339, i16 -30310, i16 -30254, i16 -29333, i16 -28925, i16 -28435, i16 -27229, i16 -26988, i16 -26775, i16 23398, i16 23731, i16 27005, i16 -26547, i16 -26546, i16 25499, i16 31520, i16 27179, i16 27263, i16 26806, i16 -25587, i16 28511, i16 21106, i16 21917, i16 24688, i16 25324, i16 27963, i16 28167, i16 28369, i16 -31653, i16 -30448, i16 -28860, i16 19988, i16 -25543, i16 21494, i16 26907, i16 27194, i16 -26748, i16 26666, i16 20828, i16 31427, i16 -31566, i16 -28196, i16 -27764, i16 22107, i16 -25304, i16 26658, i16 -31995, i16 -31695], [94 x i16] [i16 31909, i16 21000, i16 -32059, i16 29926, i16 20094, i16 20355, i16 20896, i16 23506, i16 21002, i16 21208, i16 21223, i16 24059, i16 21914, i16 22570, i16 23014, i16 23436, i16 23448, i16 23515, i16 24178, i16 24185, i16 24739, i16 24863, i16 24931, i16 25022, i16 25563, i16 25954, i16 26577, i16 26707, i16 26874, i16 27454, i16 27475, i16 27735, i16 28450, i16 28567, i16 28485, i16 29872, i16 29976, i16 30435, i16 30475, i16 31487, i16 31649, i16 31777, i16 32233, i16 32566, i16 32752, i16 -32611, i16 -32154, i16 -31842, i16 -30285, i16 -30004, i16 -29525, i16 -28540, i16 -27567, i16 -27245, i16 -27247, i16 -27230, i16 -27035, i16 -26669, i16 -26328, i16 -32232, i16 20024, i16 21547, i16 23736, i16 24012, i16 29609, i16 30284, i16 30524, i16 23721, i16 32747, i16 -29429, i16 -26943, i16 -26607, i16 -26540, i16 -26536, i16 20225, i16 20238, i16 21361, i16 21916, i16 22120, i16 22522, i16 22855, i16 23305, i16 23492, i16 23696, i16 24076, i16 24190, i16 24524, i16 25582, i16 26426, i16 26071, i16 26082, i16 26399, i16 26827, i16 26820], [94 x i16] [i16 27231, i16 24112, i16 27589, i16 27671, i16 27773, i16 30079, i16 31048, i16 23395, i16 31232, i16 32000, i16 24509, i16 -30321, i16 -30184, i16 -29516, i16 -29321, i16 -28980, i16 -28899, i16 -26398, i16 -26098, i16 -25796, i16 20096, i16 20605, i16 20736, i16 22931, i16 23452, i16 25135, i16 25216, i16 25836, i16 27450, i16 29344, i16 30097, i16 31047, i16 32681, i16 -30725, i16 -30020, i16 -29840, i16 25516, i16 -31798, i16 -26720, i16 21513, i16 21507, i16 21931, i16 26708, i16 27224, i16 -30096, i16 30759, i16 26485, i16 -24883, i16 21364, i16 23458, i16 -32486, i16 -31152, i16 -28666, i16 19992, i16 20037, i16 20167, i16 20241, i16 21450, i16 21560, i16 23470, i16 24339, i16 24613, i16 25937, i16 26429, i16 27714, i16 27762, i16 27875, i16 28792, i16 29699, i16 31350, i16 31406, i16 31496, i16 32026, i16 31998, i16 32102, i16 26087, i16 29275, i16 21435, i16 23621, i16 24040, i16 25298, i16 25312, i16 25369, i16 28192, i16 -31142, i16 -30159, i16 -29219, i16 -27912, i16 28417, i16 31142, i16 -25766, i16 20136, i16 20139, i16 20140], [94 x i16] [i16 20379, i16 20384, i16 20689, i16 20807, i16 31478, i16 20849, i16 20982, i16 21332, i16 21281, i16 21375, i16 21483, i16 21932, i16 22659, i16 23777, i16 24375, i16 24394, i16 24623, i16 24656, i16 24685, i16 25375, i16 25945, i16 27211, i16 27841, i16 29378, i16 29421, i16 30703, i16 -32520, i16 -32507, i16 -32248, i16 -31410, i16 -28425, i16 -27679, i16 -26625, i16 -26281, i16 -26022, i16 20208, i16 20957, i16 23597, i16 26241, i16 26989, i16 23616, i16 26354, i16 26997, i16 29577, i16 26704, i16 31873, i16 20677, i16 21220, i16 22343, i16 24062, i16 -27866, i16 26020, i16 27427, i16 27453, i16 29748, i16 31105, i16 31165, i16 31563, i16 32202, i16 -32071, i16 -31796, i16 -30593, i16 -30369, i16 -29895, i16 -28719, i16 -28207, i16 21535, i16 -28032, i16 20061, i16 20534, i16 21477, i16 21306, i16 29399, i16 29590, i16 30697, i16 -32026, i16 -29009, i16 -26170, i16 -26168, i16 -26158, i16 20855, i16 24858, i16 -31138, i16 21936, i16 31354, i16 20598, i16 23507, i16 -28601, i16 -27003, i16 20018, i16 27355, i16 -28185, i16 23633, i16 23624], [94 x i16] [i16 25496, i16 31391, i16 27795, i16 -26764, i16 -28831, i16 31402, i16 29066, i16 -27000, i16 31874, i16 26647, i16 32368, i16 26705, i16 -27796, i16 21234, i16 21531, i16 -31317, i16 -30189, i16 32676, i16 -28979, i16 -28447, i16 21350, i16 -30584, i16 31041, i16 20418, i16 20670, i16 21009, i16 20804, i16 21843, i16 22317, i16 29674, i16 22411, i16 22865, i16 24418, i16 24452, i16 24693, i16 24950, i16 24935, i16 25001, i16 25522, i16 25658, i16 25964, i16 26223, i16 26690, i16 28179, i16 30054, i16 31293, i16 31995, i16 32076, i16 32153, i16 32331, i16 32619, i16 -31986, i16 -31926, i16 -31027, i16 -30200, i16 -30109, i16 -29850, i16 -28931, i16 -26598, i16 -25201, i16 -32072, i16 -28722, i16 -25624, i16 21127, i16 25119, i16 25731, i16 28608, i16 -26983, i16 26689, i16 20625, i16 27424, i16 27770, i16 28500, i16 31348, i16 32080, i16 -30656, i16 -30173, i16 26376, i16 20214, i16 20537, i16 20518, i16 20581, i16 20860, i16 21048, i16 21091, i16 21927, i16 22287, i16 22533, i16 23244, i16 24314, i16 25010, i16 25080, i16 25331, i16 25458], [94 x i16] [i16 26908, i16 27177, i16 29309, i16 29356, i16 29486, i16 30740, i16 30831, i16 32121, i16 30476, i16 -32599, i16 -30325, i16 -29927, i16 -29470, i16 -28974, i16 -28573, i16 -27787, i16 -27014, i16 -26539, i16 -26093, i16 -24968, i16 20803, i16 21407, i16 21427, i16 24187, i16 24358, i16 28187, i16 28304, i16 29572, i16 29694, i16 32067, i16 -32201, i16 -30208, i16 -29958, i16 -27056, i16 20046, i16 20491, i16 21476, i16 21628, i16 22266, i16 22993, i16 23396, i16 24049, i16 24235, i16 24359, i16 25144, i16 25925, i16 26543, i16 28246, i16 29392, i16 31946, i16 -30540, i16 -32607, i16 -32543, i16 -31760, i16 -31154, i16 -30073, i16 -29208, i16 -28105, i16 -26937, i16 -26521, i16 -24813, i16 20116, i16 20114, i16 20237, i16 21320, i16 21577, i16 21566, i16 23087, i16 24460, i16 24481, i16 24735, i16 26791, i16 27278, i16 29786, i16 30849, i16 -30050, i16 -30044, i16 -29833, i16 -28272, i16 20062, i16 -25655, i16 20132, i16 20348, i16 20399, i16 20505, i16 20502, i16 20809, i16 20844, i16 21151, i16 21177, i16 21246, i16 21402, i16 21475, i16 21521], [94 x i16] [i16 21518, i16 21897, i16 22353, i16 22434, i16 22909, i16 23380, i16 23389, i16 23439, i16 24037, i16 24039, i16 24055, i16 24184, i16 24195, i16 24218, i16 24247, i16 24344, i16 24658, i16 24908, i16 25239, i16 25304, i16 25511, i16 25915, i16 26114, i16 26179, i16 26356, i16 26477, i16 26657, i16 26775, i16 27083, i16 27743, i16 27946, i16 28009, i16 28207, i16 28317, i16 30002, i16 30343, i16 30828, i16 31295, i16 31968, i16 32005, i16 32024, i16 32094, i16 32177, i16 -32747, i16 -32765, i16 -32593, i16 -32591, i16 -32428, i16 -32369, i16 -32214, i16 -31918, i16 -30644, i16 -30623, i16 -29925, i16 -29534, i16 -29444, i16 -28470, i16 -28299, i16 -28047, i16 30783, i16 -27908, i16 -27228, i16 -27059, i16 -26619, i16 -26215, i16 -25896, i16 -25285, i16 21083, i16 21163, i16 21495, i16 21512, i16 22741, i16 25335, i16 28640, i16 -29590, i16 -28833, i16 -24903, i16 20811, i16 21051, i16 21578, i16 22269, i16 31296, i16 -28297, i16 -25248, i16 -24878, i16 29508, i16 28425, i16 -32400, i16 29969, i16 24573, i16 24794, i16 -25944, i16 29403, i16 -28740], [94 x i16] [i16 27492, i16 -26621, i16 20170, i16 22256, i16 22372, i16 22718, i16 23130, i16 24680, i16 25031, i16 26127, i16 26118, i16 26681, i16 26801, i16 28151, i16 30165, i16 32058, i16 -32146, i16 -25790, i16 20123, i16 20304, i16 21449, i16 21766, i16 23919, i16 24038, i16 24046, i16 26619, i16 27801, i16 29811, i16 30722, i16 -30128, i16 -27754, i16 -30497, i16 22352, i16 24231, i16 25387, i16 20661, i16 20652, i16 20877, i16 26368, i16 21705, i16 22622, i16 22971, i16 23472, i16 24425, i16 25165, i16 25505, i16 26685, i16 27507, i16 28168, i16 28797, i16 -28217, i16 29312, i16 30741, i16 30758, i16 31085, i16 25998, i16 32048, i16 -31780, i16 -30527, i16 -28919, i16 -26981, i16 21092, i16 22312, i16 26448, i16 32618, i16 -29535, i16 20916, i16 22338, i16 -27094, i16 22586, i16 27018, i16 -32588, i16 21682, i16 23822, i16 22524, i16 30869, i16 -25094, i16 20316, i16 21066, i16 21643, i16 25662, i16 26152, i16 26388, i16 26613, i16 31364, i16 31574, i16 32034, i16 -27857, i16 26716, i16 -25683, i16 31545, i16 21273, i16 20874, i16 21047], [94 x i16] [i16 23519, i16 25334, i16 25774, i16 25830, i16 26413, i16 27578, i16 -31319, i16 -26927, i16 30352, i16 -25642, i16 25420, i16 -27898, i16 -25685, i16 30399, i16 26194, i16 19977, i16 20632, i16 21442, i16 23665, i16 24808, i16 25746, i16 25955, i16 26719, i16 29158, i16 29642, i16 29987, i16 31639, i16 32386, i16 -31083, i16 -29821, i16 -29477, i16 -28296, i16 -26352, i16 26028, i16 26283, i16 27531, i16 20181, i16 20180, i16 20282, i16 20351, i16 21050, i16 21496, i16 21490, i16 21987, i16 22235, i16 22763, i16 22987, i16 22985, i16 23039, i16 23376, i16 23629, i16 24066, i16 24107, i16 24535, i16 24605, i16 25351, i16 25903, i16 23388, i16 26031, i16 26045, i16 26088, i16 26525, i16 27490, i16 27515, i16 27663, i16 29509, i16 31049, i16 31169, i16 31992, i16 32025, i16 32043, i16 -32606, i16 -32510, i16 -32269, i16 -30314, i16 -30114, i16 -30103, i16 -30106, i16 -30068, i16 -29970, i16 -29497, i16 -29476, i16 -26932, i16 -26372, i16 27503, i16 20107, i16 20284, i16 20365, i16 20816, i16 23383, i16 23546, i16 24904, i16 25345, i16 26178], [94 x i16] [i16 27425, i16 28363, i16 27835, i16 29246, i16 29885, i16 30164, i16 30913, i16 31034, i16 -32756, i16 -32717, i16 -32278, i16 -31596, i16 -28770, i16 27728, i16 -24961, i16 24335, i16 -29864, i16 -25301, i16 31482, i16 -28936, i16 23437, i16 -26901, i16 19971, i16 21489, i16 22519, i16 22833, i16 23241, i16 23460, i16 24713, i16 28287, i16 28422, i16 30142, i16 -29462, i16 23455, i16 -31488, i16 31712, i16 20594, i16 26612, i16 -32099, i16 23649, i16 -31414, i16 32286, i16 -32242, i16 20889, i16 23556, i16 25448, i16 -29338, i16 26012, i16 29038, i16 31038, i16 32023, i16 -32763, i16 -29923, i16 -28982, i16 -28562, i16 -31033, i16 -28502, i16 20511, i16 21242, i16 23610, i16 26451, i16 28796, i16 29237, i16 -28340, i16 -28216, i16 -27861, i16 -32027, i16 23490, i16 24369, i16 24825, i16 20027, i16 21462, i16 23432, i16 25163, i16 26417, i16 27530, i16 29417, i16 29664, i16 31278, i16 -32405, i16 -29277, i16 -28334, i16 -26218, i16 20754, i16 21463, i16 21610, i16 23551, i16 25480, i16 27193, i16 32172, i16 -26880, i16 22234, i16 21454, i16 21608], [94 x i16] [i16 23447, i16 23601, i16 24030, i16 20462, i16 24833, i16 25342, i16 27954, i16 31168, i16 31179, i16 32066, i16 32333, i16 32722, i16 -32275, i16 -32225, i16 -31600, i16 -30650, i16 -30350, i16 -29808, i16 -29068, i16 -28881, i16 -28623, i16 -28341, i16 -28308, i16 -26938, i16 -28260, i16 20160, i16 20303, i16 20805, i16 21313, i16 24467, i16 25102, i16 26580, i16 27713, i16 28171, i16 29539, i16 32294, i16 -28211, i16 -28029, i16 21460, i16 22809, i16 23487, i16 28113, i16 31069, i16 32302, i16 31899, i16 22654, i16 29087, i16 20986, i16 -30637, i16 -28688, i16 20426, i16 23803, i16 26149, i16 30636, i16 31459, i16 -32228, i16 -26113, i16 20934, i16 24490, i16 26092, i16 26991, i16 27529, i16 28147, i16 28310, i16 28516, i16 30462, i16 32020, i16 24033, i16 -28555, i16 -28281, i16 -26618, i16 20966, i16 21021, i16 25152, i16 26257, i16 26329, i16 28186, i16 24246, i16 32210, i16 32626, i16 26360, i16 -31313, i16 -31241, i16 -29960, i16 21161, i16 21465, i16 22899, i16 24207, i16 24464, i16 24661, i16 -27932, i16 -27036, i16 20663, i16 20767], [94 x i16] [i16 21213, i16 21280, i16 21319, i16 21484, i16 21736, i16 21830, i16 21809, i16 22039, i16 22888, i16 22974, i16 23100, i16 23477, i16 23558, i16 23567, i16 23569, i16 23578, i16 24196, i16 24202, i16 24288, i16 24432, i16 25215, i16 25220, i16 25307, i16 25484, i16 25463, i16 26119, i16 26124, i16 26157, i16 26230, i16 26494, i16 26786, i16 27167, i16 27189, i16 27836, i16 28040, i16 28169, i16 28248, i16 28988, i16 28966, i16 29031, i16 30151, i16 30465, i16 30813, i16 30977, i16 31077, i16 31216, i16 31456, i16 31505, i16 31911, i16 32057, i16 -32618, i16 -31786, i16 -31605, i16 -31415, i16 -30627, i16 -30477, i16 -30177, i16 -30148, i16 -30124, i16 -30093, i16 -29599, i16 -29474, i16 -28252, i16 -28058, i16 -27778, i16 -27624, i16 -26980, i16 -26728, i16 19978, i16 19976, i16 19998, i16 20055, i16 20887, i16 21104, i16 22478, i16 22580, i16 22732, i16 23330, i16 24120, i16 24773, i16 25854, i16 26465, i16 26454, i16 27972, i16 29366, i16 30067, i16 31331, i16 -31560, i16 -29838, i16 -28232, i16 -27872, i16 22065, i16 22516, i16 -26370], [94 x i16] [i16 25325, i16 26893, i16 27542, i16 29165, i16 32340, i16 -32649, i16 -32142, i16 -30234, i16 -26401, i16 -30891, i16 -28751, i16 23611, i16 20280, i16 20449, i16 20405, i16 21767, i16 23072, i16 23517, i16 23529, i16 24515, i16 24910, i16 25391, i16 26032, i16 26187, i16 26862, i16 27035, i16 28024, i16 28145, i16 30003, i16 30137, i16 30495, i16 31070, i16 31206, i16 32051, i16 -32285, i16 -32081, i16 -31318, i16 -30294, i16 -30150, i16 -29013, i16 -28773, i16 -28622, i16 -28195, i16 -26873, i16 20154, i16 20161, i16 20995, i16 22645, i16 22764, i16 23563, i16 29978, i16 23613, i16 -32434, i16 -30198, i16 -28731, i16 -27037, i16 -26771, i16 31525, i16 -30001, i16 -26616, i16 -28318, i16 22259, i16 21416, i16 -28649, i16 21561, i16 22402, i16 24101, i16 25512, i16 27700, i16 28810, i16 30561, i16 31883, i16 32736, i16 -30608, i16 -28606, i16 -28332, i16 -27888, i16 -27880, i16 -26993, i16 29790, i16 -25916, i16 23815, i16 23913, i16 25968, i16 26530, i16 -29272, i16 -26917, i16 25454, i16 26441, i16 26905, i16 -31803, i16 -26601, i16 -26944, i16 -30466], [94 x i16] [i16 28548, i16 25722, i16 23544, i16 19990, i16 28716, i16 30045, i16 26159, i16 20932, i16 21046, i16 21218, i16 22995, i16 24449, i16 24615, i16 25104, i16 25919, i16 25972, i16 26143, i16 26228, i16 26866, i16 26646, i16 27491, i16 28165, i16 29298, i16 29983, i16 30427, i16 31934, i16 -32682, i16 22768, i16 -30467, i16 -30337, i16 -30048, i16 -30061, i16 -30005, i16 -28643, i16 -28270, i16 -26798, i16 -26791, i16 25993, i16 31246, i16 -32506, i16 -26949, i16 24109, i16 24796, i16 25114, i16 26021, i16 26132, i16 26512, i16 30707, i16 31309, i16 31821, i16 32318, i16 -32502, i16 -29524, i16 -29340, i16 -29215, i16 -29089, i16 30889, i16 20999, i16 25305, i16 25509, i16 25666, i16 25240, i16 -30163, i16 31363, i16 31680, i16 -30036, i16 -26902, i16 32118, i16 -32244, i16 -30903, i16 20185, i16 20808, i16 21315, i16 21344, i16 23459, i16 23554, i16 23574, i16 24029, i16 25126, i16 25159, i16 25776, i16 26643, i16 26676, i16 27849, i16 27973, i16 27927, i16 26579, i16 28508, i16 29006, i16 29053, i16 26059, i16 31359, i16 31661, i16 32218], [94 x i16] [i16 32330, i16 32680, i16 -32390, i16 -32229, i16 -32199, i16 -31322, i16 -30098, i16 -29490, i16 -29195, i16 -28552, i16 -28553, i16 -27987, i16 -28015, i16 -27261, i16 -25682, i16 21069, i16 21892, i16 28472, i16 28982, i16 20840, i16 31109, i16 32341, i16 -32333, i16 31950, i16 22092, i16 22609, i16 23720, i16 25514, i16 26366, i16 26365, i16 26970, i16 29401, i16 30095, i16 30094, i16 30990, i16 31062, i16 31199, i16 31895, i16 32032, i16 32068, i16 -31225, i16 -30156, i16 -27077, i16 -28575, i16 -24800, i16 20711, i16 21109, i16 21452, i16 21474, i16 20489, i16 21930, i16 22766, i16 22863, i16 29245, i16 23435, i16 23652, i16 21277, i16 24803, i16 24819, i16 25436, i16 25475, i16 25407, i16 25531, i16 25805, i16 26089, i16 26361, i16 24035, i16 27085, i16 27133, i16 28437, i16 29157, i16 20105, i16 30185, i16 30456, i16 31379, i16 31967, i16 32207, i16 32156, i16 -32671, i16 -31927, i16 -31912, i16 -31636, i16 -31556, i16 -31237, i16 -30523, i16 -29328, i16 -28671, i16 -28563, i16 -27753, i16 -26852, i16 -26094, i16 20687, i16 22679, i16 24974], [94 x i16] [i16 -32301, i16 -31435, i16 -29432, i16 -28640, i16 20419, i16 20596, i16 21063, i16 21363, i16 24687, i16 25417, i16 26463, i16 28204, i16 -29261, i16 -28641, i16 20439, i16 23646, i16 -29494, i16 26063, i16 32154, i16 21330, i16 -30570, i16 20854, i16 25539, i16 23384, i16 23403, i16 23562, i16 25613, i16 26449, i16 -28580, i16 20182, i16 22810, i16 22826, i16 27760, i16 -30127, i16 21822, i16 22549, i16 22949, i16 24816, i16 25171, i16 26561, i16 -32203, i16 26965, i16 -27072, i16 -26172, i16 -26072, i16 20307, i16 22534, i16 23550, i16 -32752, i16 23729, i16 24111, i16 24453, i16 24608, i16 24907, i16 25140, i16 26367, i16 27888, i16 28382, i16 -32562, i16 -32385, i16 -32044, i16 -30581, i16 -29512, i16 -28672, i16 -28626, i16 -26998, i16 -24869, i16 -25637, i16 20195, i16 21488, i16 22823, i16 31532, i16 -28275, i16 -26548, i16 -25095, i16 28381, i16 28711, i16 21331, i16 21828, i16 23429, i16 25176, i16 25246, i16 25299, i16 27810, i16 28655, i16 29730, i16 -30185, i16 -27592, i16 28609, i16 -29954, i16 -31944, i16 20967, i16 -30984, i16 21482], [94 x i16] [i16 21481, i16 20294, i16 -28588, i16 -28752, i16 22890, i16 -32463, i16 24061, i16 31466, i16 -28737, i16 26842, i16 -29641, i16 29432, i16 -25528, i16 27197, i16 -30032, i16 20025, i16 21336, i16 22022, i16 22374, i16 25285, i16 25506, i16 26086, i16 27470, i16 28129, i16 28251, i16 28845, i16 30701, i16 31471, i16 31658, i16 32187, i16 -32707, i16 -32570, i16 -31029, i16 -30059, i16 -27813, i16 22243, i16 22727, i16 24382, i16 26029, i16 26262, i16 27264, i16 27573, i16 30007, i16 -30009, i16 20516, i16 30693, i16 22320, i16 24347, i16 24677, i16 26234, i16 27744, i16 30196, i16 31258, i16 32622, i16 -32268, i16 -30952, i16 -28603, i16 -26189, i16 31689, i16 30044, i16 31481, i16 31569, i16 -31548, i16 -28656, i16 31209, i16 31378, i16 -31946, i16 23265, i16 30528, i16 20013, i16 20210, i16 23449, i16 24544, i16 25277, i16 26172, i16 26609, i16 27880, i16 -31125, i16 -30601, i16 -30149, i16 -28338, i16 -27917, i16 -26160, i16 27159, i16 28710, i16 29482, i16 -32025, i16 -31657, i16 -29521, i16 19969, i16 20806, i16 20939, i16 21899, i16 23541], [94 x i16] [i16 24086, i16 24115, i16 24193, i16 24340, i16 24373, i16 24427, i16 24500, i16 25074, i16 25361, i16 26274, i16 26397, i16 28526, i16 29266, i16 30010, i16 30522, i16 -32652, i16 -32455, i16 -32392, i16 -30858, i16 -30017, i16 -29988, i16 -29307, i16 -29197, i16 -28006, i16 -27273, i16 -26622, i16 -25371, i16 21189, i16 25431, i16 30452, i16 26389, i16 27784, i16 29645, i16 -29501, i16 -27730, i16 -27021, i16 27941, i16 22684, i16 26894, i16 27084, i16 -28675, i16 -27750, i16 30171, i16 -28646, i16 22618, i16 26626, i16 25524, i16 27131, i16 20291, i16 28460, i16 26584, i16 -28741, i16 -31450, i16 32180, i16 -27820, i16 26943, i16 28528, i16 22378, i16 22775, i16 23340, i16 32044, i16 29226, i16 21514, i16 -28189, i16 -25164, i16 20141, i16 20302, i16 20572, i16 20597, i16 21059, i16 -29538, i16 21576, i16 22564, i16 23450, i16 24093, i16 24213, i16 24237, i16 24311, i16 24351, i16 24716, i16 25269, i16 25402, i16 25552, i16 26799, i16 27712, i16 30855, i16 31118, i16 31243, i16 32224, i16 -32185, i16 -30206, i16 -29978, i16 -29116, i16 -28653], [94 x i16] [i16 -28488, i16 -28371, i16 -28200, i16 -24818, i16 27877, i16 25688, i16 25826, i16 25973, i16 28404, i16 30340, i16 31515, i16 -28567, i16 -27695, i16 28346, i16 21746, i16 24505, i16 25764, i16 -28851, i16 -28691, i16 -28092, i16 20856, i16 22635, i16 22825, i16 23637, i16 24215, i16 28155, i16 32399, i16 29980, i16 -29508, i16 -28958, i16 -26533, i16 28857, i16 20253, i16 27583, i16 28593, i16 30000, i16 -26885, i16 20814, i16 21520, i16 22581, i16 22615, i16 22956, i16 23648, i16 24466, i16 26007, i16 26460, i16 28193, i16 30331, i16 -31777, i16 -29459, i16 -28652, i16 -28419, i16 -27827, i16 30757, i16 30778, i16 21162, i16 24230, i16 22303, i16 22900, i16 24594, i16 20498, i16 20826, i16 20908, i16 20941, i16 20992, i16 21776, i16 22612, i16 22616, i16 22871, i16 23445, i16 23798, i16 23947, i16 24764, i16 25237, i16 25645, i16 26481, i16 26691, i16 26812, i16 26847, i16 30423, i16 28120, i16 28271, i16 28059, i16 28783, i16 29128, i16 24403, i16 30168, i16 31095, i16 31561, i16 31572, i16 31570, i16 31958, i16 32113, i16 21040], [94 x i16] [i16 -31645, i16 -31383, i16 -31260, i16 -30194, i16 -29948, i16 -29626, i16 -29169, i16 -28669, i16 -28657, i16 -27623, i16 -27018, i16 -26579, i16 -26064, i16 -27176, i16 20685, i16 21205, i16 21516, i16 22530, i16 23566, i16 24999, i16 25758, i16 27934, i16 30643, i16 31461, i16 -32524, i16 -31740, i16 -28589, i16 -28027, i16 23776, i16 -25337, i16 21311, i16 24471, i16 24499, i16 28060, i16 29305, i16 30563, i16 31167, i16 31716, i16 27602, i16 29420, i16 -30035, i16 26627, i16 27233, i16 20984, i16 31361, i16 26932, i16 23626, i16 -25354, i16 -32021, i16 23493, i16 -28343, i16 28702, i16 22136, i16 23663, i16 24775, i16 25958, i16 27788, i16 -29606, i16 -28607, i16 -26605, i16 21585, i16 26311, i16 -28147, i16 22856, i16 -28509, i16 20869, i16 20045, i16 20970, i16 -31335, i16 -29938, i16 28760, i16 25466, i16 -27829, i16 26978, i16 -26188, i16 32260, i16 30071, i16 21335, i16 26976, i16 -28961, i16 -26909, i16 27741, i16 20108, i16 23612, i16 24336, i16 -28695, i16 21250, i16 -29487, i16 -32631, i16 -31111, i16 24319, i16 26085, i16 20083, i16 20837], [94 x i16] [i16 22914, i16 23615, i16 -26642, i16 20219, i16 22922, i16 24525, i16 -30067, i16 28641, i16 31152, i16 31074, i16 23527, i16 -31631, i16 29483, i16 29105, i16 24180, i16 24565, i16 25467, i16 25754, i16 29123, i16 31896, i16 20035, i16 24316, i16 20043, i16 22492, i16 22178, i16 24745, i16 28611, i16 32013, i16 -32515, i16 -32461, i16 -32321, i16 -28750, i16 -30313, i16 -31068, i16 24052, i16 25226, i16 25773, i16 -30329, i16 26487, i16 27874, i16 27966, i16 29750, i16 30772, i16 23110, i16 32629, i16 -32083, i16 -26196, i16 20467, i16 24259, i16 25309, i16 25490, i16 25943, i16 26479, i16 30403, i16 29260, i16 -32564, i16 -32582, i16 -28887, i16 -28339, i16 20493, i16 22521, i16 23186, i16 26757, i16 26995, i16 29028, i16 29437, i16 -29513, i16 22770, i16 -29472, i16 -27030, i16 -28647, i16 -30849, i16 31204, i16 30695, i16 -31703, i16 20271, i16 21093, i16 21338, i16 25293, i16 26575, i16 27850, i16 30333, i16 31636, i16 31893, i16 -32202, i16 -31356, i16 -28693, i16 26333, i16 28448, i16 29190, i16 32283, i16 -31829, i16 -26175, i16 -24922], [94 x i16] [i16 20989, i16 31665, i16 30834, i16 31672, i16 -32633, i16 31560, i16 27368, i16 24161, i16 -32628, i16 30033, i16 30048, i16 20843, i16 -28062, i16 28300, i16 30330, i16 -28265, i16 -25878, i16 20240, i16 32624, i16 25244, i16 31567, i16 -27227, i16 -25367, i16 22138, i16 22617, i16 -31004, i16 -26948, i16 20276, i16 21028, i16 21322, i16 21453, i16 21467, i16 24070, i16 25644, i16 26001, i16 26495, i16 27710, i16 27726, i16 29256, i16 29359, i16 29677, i16 30036, i16 32321, i16 -32212, i16 -31255, i16 -29527, i16 31684, i16 -28218, i16 29033, i16 -26606, i16 -26385, i16 25405, i16 26217, i16 30058, i16 30436, i16 30928, i16 -31421, i16 -30994, i16 21290, i16 21329, i16 21542, i16 22915, i16 24199, i16 24444, i16 24754, i16 25161, i16 25209, i16 25259, i16 26000, i16 27604, i16 27852, i16 30130, i16 30382, i16 30865, i16 31192, i16 32203, i16 32631, i16 -32603, i16 -30549, i16 -30023, i16 -29509, i16 -28545, i16 -26786, i16 -26405, i16 27147, i16 31800, i16 20633, i16 23614, i16 24494, i16 26503, i16 27608, i16 29749, i16 30473, i16 32654], [94 x i16] [i16 -24773, i16 26570, i16 31255, i16 21305, i16 30091, i16 -25875, i16 24422, i16 -32355, i16 -31759, i16 -32616, i16 24380, i16 24517, i16 30050, i16 31558, i16 -28612, i16 26727, i16 23019, i16 23195, i16 32016, i16 30334, i16 -29908, i16 20469, i16 24426, i16 27161, i16 27703, i16 28418, i16 29922, i16 31080, i16 -30616, i16 -30123, i16 -29575, i16 24287, i16 25551, i16 30149, i16 31186, i16 -32041, i16 -27864, i16 -27918, i16 -31588, i16 -30995, i16 -25555, i16 21697, i16 24428, i16 25996, i16 27996, i16 28693, i16 -29529, i16 -29485, i16 -26565, i16 25935, i16 29942, i16 19981, i16 20184, i16 22496, i16 22827, i16 23142, i16 23500, i16 20904, i16 24067, i16 24220, i16 24598, i16 25206, i16 25975, i16 26023, i16 26222, i16 28014, i16 29238, i16 31526, i16 -32432, i16 -32358, i16 -32103, i16 -29860, i16 -29536, i16 -29466, i16 -29324, i16 -27108, i16 -27068, i16 20398, i16 25771, i16 27494, i16 -32226, i16 -31647, i16 -31382, i16 -28440, i16 23553, i16 26963, i16 -26456, i16 -31622, i16 -31401, i16 20239, i16 21103, i16 24489, i16 24133, i16 26381], [94 x i16] [i16 31119, i16 -32391, i16 -30457, i16 -30330, i16 28149, i16 24343, i16 25173, i16 27832, i16 20175, i16 29289, i16 -25710, i16 20998, i16 21563, i16 22132, i16 22707, i16 24996, i16 25198, i16 28954, i16 22894, i16 31881, i16 31966, i16 32027, i16 -26896, i16 25991, i16 -32674, i16 19993, i16 20341, i16 20853, i16 22592, i16 24163, i16 24179, i16 24330, i16 26564, i16 20006, i16 -31427, i16 -27255, i16 -27045, i16 31859, i16 -26623, i16 20731, i16 22721, i16 30294, i16 30887, i16 21029, i16 30629, i16 -31471, i16 31622, i16 20559, i16 22793, i16 29255, i16 31687, i16 32232, i16 -28742, i16 -28716, i16 -28595, i16 20415, i16 21193, i16 23081, i16 24321, i16 -26707, i16 20445, i16 -32233, i16 -27926, i16 22275, i16 25429, i16 27497, i16 29995, i16 -30500, i16 -28908, i16 31298, i16 21215, i16 22675, i16 24917, i16 25098, i16 26286, i16 27597, i16 31807, i16 -31767, i16 20515, i16 20472, i16 21253, i16 21574, i16 22577, i16 22857, i16 23453, i16 23792, i16 23791, i16 23849, i16 24214, i16 25265, i16 25447, i16 25918, i16 26041, i16 26379], [94 x i16] [i16 27861, i16 27873, i16 28921, i16 30770, i16 32299, i16 -32546, i16 -32077, i16 -31732, i16 -31508, i16 -30974, i16 -30446, i16 -30166, i16 -29622, i16 -28506, i16 -27950, i16 -26371, i16 -25357, i16 -25236, i16 20047, i16 20129, i16 20621, i16 21078, i16 22346, i16 22952, i16 24125, i16 24536, i16 24537, i16 25151, i16 26292, i16 26395, i16 26576, i16 26834, i16 20882, i16 32033, i16 -32598, i16 -32344, i16 -29952, i16 -29556, i16 -29505, i16 -28034, i16 -27086, i16 21536, i16 -26580, i16 21271, i16 20693, i16 21340, i16 22696, i16 25778, i16 26420, i16 29287, i16 30566, i16 31302, i16 -28186, i16 21187, i16 27809, i16 27526, i16 22528, i16 24140, i16 22868, i16 26412, i16 32763, i16 20961, i16 30406, i16 25705, i16 30952, i16 -25772, i16 -24901, i16 22475, i16 22969, i16 26151, i16 26522, i16 27598, i16 21737, i16 27097, i16 24149, i16 -32356, i16 26517, i16 -25686, i16 26622, i16 -25518, i16 26717, i16 20134, i16 20451, i16 21448, i16 25273, i16 26411, i16 27819, i16 -28732, i16 20397, i16 32365, i16 -24897, i16 19975, i16 24930, i16 28288], [94 x i16] [i16 28459, i16 -31469, i16 21619, i16 26410, i16 -25787, i16 24051, i16 31637, i16 23724, i16 23494, i16 -30948, i16 28234, i16 -31535, i16 31252, i16 -32504, i16 22937, i16 31885, i16 27665, i16 30496, i16 21209, i16 22818, i16 28961, i16 29279, i16 30683, i16 -26841, i16 -25247, i16 26891, i16 23167, i16 23064, i16 20901, i16 21517, i16 21629, i16 26126, i16 30431, i16 -28681, i16 -28008, i16 -25356, i16 23018, i16 29277, i16 28357, i16 20813, i16 26825, i16 32191, i16 32236, i16 -26782, i16 -24902, i16 25720, i16 27169, i16 -31998, i16 22916, i16 23391, i16 27611, i16 29467, i16 30450, i16 32178, i16 -32745, i16 -31591, i16 20786, i16 26408, i16 -24871, i16 30446, i16 26466, i16 21247, i16 -26363, i16 23588, i16 25147, i16 31870, i16 -29520, i16 21839, i16 24758, i16 32011, i16 -27264, i16 21249, i16 20063, i16 20918, i16 22812, i16 29242, i16 -32714, i16 -28210, i16 24357, i16 30690, i16 21380, i16 24441, i16 32004, i16 -31316, i16 -30157, i16 -29043, i16 -26794, i16 26611, i16 -31314, i16 -27565, i16 24841, i16 24840, i16 27833, i16 30290], [94 x i16] [i16 -29971, i16 -28872, i16 21807, i16 20305, i16 20778, i16 21191, i16 21451, i16 23461, i16 24189, i16 24736, i16 24962, i16 25558, i16 26377, i16 26586, i16 28263, i16 28044, i16 29494, i16 29495, i16 30001, i16 31056, i16 -30507, i16 -30056, i16 -28598, i16 -28527, i16 -28427, i16 -26940, i16 -30835, i16 22805, i16 20104, i16 20313, i16 19982, i16 -30071, i16 -28865, i16 -26608, i16 20653, i16 24188, i16 22934, i16 23481, i16 24248, i16 25562, i16 25594, i16 25793, i16 26332, i16 26954, i16 27096, i16 27915, i16 28342, i16 29076, i16 29992, i16 31407, i16 32650, i16 -32768, i16 -31671, i16 -31543, i16 -30335, i16 -29919, i16 -29174, i16 -28571, i16 -27011, i16 -26358, i16 24958, i16 25233, i16 27442, i16 27779, i16 28020, i16 32716, i16 32764, i16 28096, i16 32645, i16 -30790, i16 -30472, i16 26469, i16 -31823, i16 -26564, i16 -26889, i16 27931, i16 32097, i16 -31683, i16 -28310, i16 20081, i16 21365, i16 23888, i16 27396, i16 28651, i16 -31283, i16 -31187, i16 -30297, i16 21033, i16 21519, i16 23653, i16 26446, i16 26792, i16 29702, i16 29827], [94 x i16] [i16 30178, i16 -30513, i16 -30495, i16 -28212, i16 -26910, i16 -27016, i16 24459, i16 29575, i16 31435, i16 -31666, i16 25504, i16 30053, i16 21129, i16 27969, i16 28316, i16 29705, i16 30041, i16 30827, i16 31890, i16 -27002, i16 31452, i16 -24691, i16 20406, i16 24942, i16 26053, i16 -31140, i16 20102, i16 20142, i16 20698, i16 20001, i16 20940, i16 23534, i16 26009, i16 26753, i16 28092, i16 29471, i16 30274, i16 30637, i16 31260, i16 31975, i16 -32145, i16 -29998, i16 -28548, i16 -28209, i16 -27019, i16 -26600, i16 21147, i16 32209, i16 20523, i16 21400, i16 26519, i16 28107, i16 29136, i16 29747, i16 -32280, i16 -28886, i16 -26973, i16 -25513, i16 -24929, i16 29792, i16 22593, i16 28057, i16 32047, i16 -26530, i16 20196, i16 20278, i16 20363, i16 20919, i16 21169, i16 23994, i16 24604, i16 29618, i16 31036, i16 -32045, i16 -28108, i16 -26953, i16 -26890, i16 -26870, i16 -24937, i16 -24734, i16 26278, i16 27508, i16 21015, i16 21155, i16 28872, i16 -30526, i16 24265, i16 24651, i16 24976, i16 28451, i16 29001, i16 31806, i16 32244, i16 -32657], [94 x i16] [i16 -31506, i16 -28637, i16 -27860, i16 21570, i16 -25745, i16 27347, i16 28809, i16 -29502, i16 -29201, i16 -26830, i16 21172, i16 23105, i16 24266, i16 24324, i16 26391, i16 27004, i16 27028, i16 28010, i16 28431, i16 29282, i16 29436, i16 31725, i16 -32767, i16 -32642, i16 -30901, i16 -28466, i16 20845, i16 -24941, i16 31108, i16 -32629, i16 -27854, i16 -29994, i16 20525, i16 21644, i16 -30095, i16 27498, i16 -29500, i16 -32505, i16 24785, i16 26528, i16 -25102, i16 20121, i16 20120, i16 -25584, i16 -30101, i16 -31295, i16 -31384, i16 26880, i16 28286, i16 30871, i16 -32427, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [94 x i16] [i16 24332, i16 19984, i16 19989, i16 20010, i16 20017, i16 20022, i16 20028, i16 20031, i16 20034, i16 20054, i16 20056, i16 20098, i16 20101, i16 -29589, i16 20106, i16 -32238, i16 24333, i16 20110, i16 20126, i16 20127, i16 20128, i16 20130, i16 20144, i16 20147, i16 20150, i16 20174, i16 20173, i16 20164, i16 20166, i16 20162, i16 20183, i16 20190, i16 20205, i16 20191, i16 20215, i16 20233, i16 20314, i16 20272, i16 20315, i16 20317, i16 20311, i16 20295, i16 20342, i16 20360, i16 20367, i16 20376, i16 20347, i16 20329, i16 20336, i16 20369, i16 20335, i16 20358, i16 20374, i16 20760, i16 20436, i16 20447, i16 20430, i16 20440, i16 20443, i16 20433, i16 20442, i16 20432, i16 20452, i16 20453, i16 20506, i16 20520, i16 20500, i16 20522, i16 20517, i16 20485, i16 20252, i16 20470, i16 20513, i16 20521, i16 20524, i16 20478, i16 20463, i16 20497, i16 20486, i16 20547, i16 20551, i16 26371, i16 20565, i16 20560, i16 20552, i16 20570, i16 20566, i16 20588, i16 20600, i16 20608, i16 20634, i16 20613, i16 20660, i16 20658], [94 x i16] [i16 20681, i16 20682, i16 20659, i16 20674, i16 20694, i16 20702, i16 20709, i16 20717, i16 20707, i16 20718, i16 20729, i16 20725, i16 20745, i16 20737, i16 20738, i16 20758, i16 20757, i16 20756, i16 20762, i16 20769, i16 20794, i16 20791, i16 20796, i16 20795, i16 20799, i16 20800, i16 20818, i16 20812, i16 20820, i16 20834, i16 31480, i16 20841, i16 20842, i16 20846, i16 20864, i16 20866, i16 22232, i16 20876, i16 20873, i16 20879, i16 20881, i16 20883, i16 20885, i16 20886, i16 20900, i16 20902, i16 20898, i16 20905, i16 20906, i16 20907, i16 20915, i16 20913, i16 20914, i16 20912, i16 20917, i16 20925, i16 20933, i16 20937, i16 20955, i16 20960, i16 -31147, i16 20969, i16 20973, i16 20976, i16 20981, i16 20990, i16 20996, i16 21003, i16 21012, i16 21006, i16 21031, i16 21034, i16 21038, i16 21043, i16 21049, i16 21071, i16 21060, i16 21067, i16 21068, i16 21086, i16 21076, i16 21098, i16 21108, i16 21097, i16 21107, i16 21119, i16 21117, i16 21133, i16 21140, i16 21138, i16 21105, i16 21128, i16 21137, i16 -28760], [94 x i16] [i16 -28761, i16 21164, i16 21165, i16 21180, i16 21173, i16 21185, i16 21197, i16 21207, i16 21214, i16 21219, i16 21222, i16 -26387, i16 21216, i16 21235, i16 21237, i16 21240, i16 21241, i16 21254, i16 21256, i16 30008, i16 21261, i16 21264, i16 21263, i16 21269, i16 21274, i16 21283, i16 21295, i16 21297, i16 21299, i16 21304, i16 21312, i16 21318, i16 21317, i16 19991, i16 21321, i16 21325, i16 20950, i16 21342, i16 21353, i16 21358, i16 22808, i16 21371, i16 21367, i16 21378, i16 21398, i16 21408, i16 21414, i16 21413, i16 21422, i16 21424, i16 21430, i16 21443, i16 31762, i16 -26919, i16 21471, i16 26364, i16 29166, i16 21486, i16 21480, i16 21485, i16 21498, i16 21505, i16 21565, i16 21568, i16 21548, i16 21549, i16 21564, i16 21550, i16 21558, i16 21545, i16 21533, i16 21582, i16 21647, i16 21621, i16 21646, i16 21599, i16 21617, i16 21623, i16 21616, i16 21650, i16 21627, i16 21632, i16 21622, i16 21636, i16 21648, i16 21638, i16 21703, i16 21666, i16 21688, i16 21669, i16 21676, i16 21700, i16 21704, i16 21672], [94 x i16] [i16 21675, i16 21698, i16 21668, i16 21694, i16 21692, i16 21720, i16 21733, i16 21734, i16 21775, i16 21780, i16 21757, i16 21742, i16 21741, i16 21754, i16 21730, i16 21817, i16 21824, i16 21859, i16 21836, i16 21806, i16 21852, i16 21829, i16 21846, i16 21847, i16 21816, i16 21811, i16 21853, i16 21913, i16 21888, i16 21679, i16 21898, i16 21919, i16 21883, i16 21886, i16 21912, i16 21918, i16 21934, i16 21884, i16 21891, i16 21929, i16 21895, i16 21928, i16 21978, i16 21957, i16 21983, i16 21956, i16 21980, i16 21988, i16 21972, i16 22036, i16 22007, i16 22038, i16 22014, i16 22013, i16 22043, i16 22009, i16 22094, i16 22096, i16 29151, i16 22068, i16 22070, i16 22066, i16 22072, i16 22123, i16 22116, i16 22063, i16 22124, i16 22122, i16 22150, i16 22144, i16 22154, i16 22176, i16 22164, i16 22159, i16 22181, i16 22190, i16 22198, i16 22196, i16 22210, i16 22204, i16 22209, i16 22211, i16 22208, i16 22216, i16 22222, i16 22225, i16 22227, i16 22231, i16 22254, i16 22265, i16 22272, i16 22271, i16 22276, i16 22281], [94 x i16] [i16 22280, i16 22283, i16 22285, i16 22291, i16 22296, i16 22294, i16 21959, i16 22300, i16 22310, i16 22327, i16 22328, i16 22350, i16 22331, i16 22336, i16 22351, i16 22377, i16 22464, i16 22408, i16 22369, i16 22399, i16 22409, i16 22419, i16 22432, i16 22451, i16 22436, i16 22442, i16 22448, i16 22467, i16 22470, i16 22484, i16 22482, i16 22483, i16 22538, i16 22486, i16 22499, i16 22539, i16 22553, i16 22557, i16 22642, i16 22561, i16 22626, i16 22603, i16 22640, i16 27584, i16 22610, i16 22589, i16 22649, i16 22661, i16 22713, i16 22687, i16 22699, i16 22714, i16 22750, i16 22715, i16 22712, i16 22702, i16 22725, i16 22739, i16 22737, i16 22743, i16 22745, i16 22744, i16 22757, i16 22748, i16 22756, i16 22751, i16 22767, i16 22778, i16 22777, i16 22779, i16 22780, i16 22781, i16 22786, i16 22794, i16 22800, i16 22811, i16 26790, i16 22821, i16 22828, i16 22829, i16 22834, i16 22840, i16 22846, i16 31442, i16 22869, i16 22864, i16 22862, i16 22874, i16 22872, i16 22882, i16 22880, i16 22887, i16 22892, i16 22889], [94 x i16] [i16 22904, i16 22913, i16 22941, i16 20318, i16 20395, i16 22947, i16 22962, i16 22982, i16 23016, i16 23004, i16 22925, i16 23001, i16 23002, i16 23077, i16 23071, i16 23057, i16 23068, i16 23049, i16 23066, i16 23104, i16 23148, i16 23113, i16 23093, i16 23094, i16 23138, i16 23146, i16 23194, i16 23228, i16 23230, i16 23243, i16 23234, i16 23229, i16 23267, i16 23255, i16 23270, i16 23273, i16 23254, i16 23290, i16 23291, i16 23308, i16 23307, i16 23318, i16 23346, i16 23248, i16 23338, i16 23350, i16 23358, i16 23363, i16 23365, i16 23360, i16 23377, i16 23381, i16 23386, i16 23387, i16 23397, i16 23401, i16 23408, i16 23411, i16 23413, i16 23416, i16 25992, i16 23418, i16 23424, i16 23427, i16 23462, i16 23480, i16 23491, i16 23495, i16 23497, i16 23508, i16 23504, i16 23524, i16 23526, i16 23522, i16 23518, i16 23525, i16 23531, i16 23536, i16 23542, i16 23539, i16 23557, i16 23559, i16 23560, i16 23565, i16 23571, i16 23584, i16 23586, i16 23592, i16 23608, i16 23609, i16 23617, i16 23622, i16 23630, i16 23635], [94 x i16] [i16 23632, i16 23631, i16 23409, i16 23660, i16 23662, i16 20066, i16 23670, i16 23673, i16 23692, i16 23697, i16 23700, i16 22939, i16 23723, i16 23739, i16 23734, i16 23740, i16 23735, i16 23749, i16 23742, i16 23751, i16 23769, i16 23785, i16 23805, i16 23802, i16 23789, i16 23948, i16 23786, i16 23819, i16 23829, i16 23831, i16 23900, i16 23839, i16 23835, i16 23825, i16 23828, i16 23842, i16 23834, i16 23833, i16 23832, i16 23884, i16 23890, i16 23886, i16 23883, i16 23916, i16 23923, i16 23926, i16 23943, i16 23940, i16 23938, i16 23970, i16 23965, i16 23980, i16 23982, i16 23997, i16 23952, i16 23991, i16 23996, i16 24009, i16 24013, i16 24019, i16 24018, i16 24022, i16 24027, i16 24043, i16 24050, i16 24053, i16 24075, i16 24090, i16 24089, i16 24081, i16 24091, i16 24118, i16 24119, i16 24132, i16 24131, i16 24128, i16 24142, i16 24151, i16 24148, i16 24159, i16 24162, i16 24164, i16 24135, i16 24181, i16 24182, i16 24186, i16 -24900, i16 24191, i16 24224, i16 24257, i16 24258, i16 24264, i16 24272, i16 24271], [94 x i16] [i16 24278, i16 24291, i16 24285, i16 24282, i16 24283, i16 24290, i16 24289, i16 24296, i16 24297, i16 24300, i16 24305, i16 24307, i16 24304, i16 24308, i16 24312, i16 24318, i16 24323, i16 24329, i16 24413, i16 24412, i16 24331, i16 24337, i16 24342, i16 24361, i16 24365, i16 24376, i16 24385, i16 24392, i16 24396, i16 24398, i16 24367, i16 24401, i16 24406, i16 24407, i16 24409, i16 24417, i16 24429, i16 24435, i16 24439, i16 24451, i16 24450, i16 24447, i16 24458, i16 24456, i16 24465, i16 24455, i16 24478, i16 24473, i16 24472, i16 24480, i16 24488, i16 24493, i16 24508, i16 24534, i16 24571, i16 24548, i16 24568, i16 24561, i16 24541, i16 24755, i16 24575, i16 24609, i16 24672, i16 24601, i16 24592, i16 24617, i16 24590, i16 24625, i16 24603, i16 24597, i16 24619, i16 24614, i16 24591, i16 24634, i16 24666, i16 24641, i16 24682, i16 24695, i16 24671, i16 24650, i16 24646, i16 24653, i16 24675, i16 24643, i16 24676, i16 24642, i16 24684, i16 24683, i16 24665, i16 24705, i16 24717, i16 24807, i16 24707, i16 24730], [94 x i16] [i16 24708, i16 24731, i16 24726, i16 24727, i16 24722, i16 24743, i16 24715, i16 24801, i16 24760, i16 24800, i16 24787, i16 24756, i16 24560, i16 24765, i16 24774, i16 24757, i16 24792, i16 24909, i16 24853, i16 24838, i16 24822, i16 24823, i16 24832, i16 24820, i16 24826, i16 24835, i16 24865, i16 24827, i16 24817, i16 24845, i16 24846, i16 24903, i16 24894, i16 24872, i16 24871, i16 24906, i16 24895, i16 24892, i16 24876, i16 24884, i16 24893, i16 24898, i16 24900, i16 24947, i16 24951, i16 24920, i16 24921, i16 24922, i16 24939, i16 24948, i16 24943, i16 24933, i16 24945, i16 24927, i16 24925, i16 24915, i16 24949, i16 24985, i16 24982, i16 24967, i16 25004, i16 24980, i16 24986, i16 24970, i16 24977, i16 25003, i16 25006, i16 25036, i16 25034, i16 25033, i16 25079, i16 25032, i16 25027, i16 25030, i16 25018, i16 25035, i16 32633, i16 25037, i16 25062, i16 25059, i16 25078, i16 25082, i16 25076, i16 25087, i16 25085, i16 25084, i16 25086, i16 25088, i16 25096, i16 25097, i16 25101, i16 25100, i16 25108, i16 25115], [94 x i16] [i16 25118, i16 25121, i16 25130, i16 25134, i16 25136, i16 25138, i16 25139, i16 25153, i16 25166, i16 25182, i16 25187, i16 25179, i16 25184, i16 25192, i16 25212, i16 25218, i16 25225, i16 25214, i16 25234, i16 25235, i16 25238, i16 25300, i16 25219, i16 25236, i16 25303, i16 25297, i16 25275, i16 25295, i16 25343, i16 25286, i16 25812, i16 25288, i16 25308, i16 25292, i16 25290, i16 25282, i16 25287, i16 25243, i16 25289, i16 25356, i16 25326, i16 25329, i16 25383, i16 25346, i16 25352, i16 25327, i16 25333, i16 25424, i16 25406, i16 25421, i16 25628, i16 25423, i16 25494, i16 25486, i16 25472, i16 25515, i16 25462, i16 25507, i16 25487, i16 25481, i16 25503, i16 25525, i16 25451, i16 25449, i16 25534, i16 25577, i16 25536, i16 25542, i16 25571, i16 25545, i16 25554, i16 25590, i16 25540, i16 25622, i16 25652, i16 25606, i16 25619, i16 25638, i16 25654, i16 25885, i16 25623, i16 25640, i16 25615, i16 25703, i16 25711, i16 25718, i16 25678, i16 25898, i16 25749, i16 25747, i16 25765, i16 25769, i16 25736, i16 25788], [94 x i16] [i16 25818, i16 25810, i16 25797, i16 25799, i16 25787, i16 25816, i16 25794, i16 25841, i16 25831, i16 -32247, i16 25824, i16 25825, i16 25260, i16 25827, i16 25839, i16 25900, i16 25846, i16 25844, i16 25842, i16 25850, i16 25856, i16 25853, i16 25880, i16 25884, i16 25861, i16 25892, i16 25891, i16 25899, i16 25908, i16 25909, i16 25911, i16 25910, i16 25912, i16 30027, i16 25928, i16 25942, i16 25941, i16 25933, i16 25944, i16 25950, i16 25949, i16 25970, i16 25976, i16 25986, i16 25987, i16 -29814, i16 26011, i16 26015, i16 26027, i16 26039, i16 26051, i16 26054, i16 26049, i16 26052, i16 26060, i16 26066, i16 26075, i16 26073, i16 26080, i16 26081, i16 26097, i16 26482, i16 26122, i16 26115, i16 26107, i16 26483, i16 26165, i16 26166, i16 26164, i16 26140, i16 26191, i16 26180, i16 26185, i16 26177, i16 26206, i16 26205, i16 26212, i16 26215, i16 26216, i16 26207, i16 26210, i16 26224, i16 26243, i16 26248, i16 26254, i16 26249, i16 26244, i16 26264, i16 26269, i16 26305, i16 26297, i16 26313, i16 26302, i16 26300], [94 x i16] [i16 26308, i16 26296, i16 26326, i16 26330, i16 26336, i16 26175, i16 26342, i16 26345, i16 26352, i16 26357, i16 26359, i16 26383, i16 26390, i16 26398, i16 26406, i16 26407, i16 -26824, i16 26414, i16 26431, i16 26422, i16 26433, i16 26424, i16 26423, i16 26438, i16 26462, i16 26464, i16 26457, i16 26467, i16 26468, i16 26505, i16 26480, i16 26537, i16 26492, i16 26474, i16 26508, i16 26507, i16 26534, i16 26529, i16 26501, i16 26551, i16 26607, i16 26548, i16 26604, i16 26547, i16 26601, i16 26552, i16 26596, i16 26590, i16 26589, i16 26594, i16 26606, i16 26553, i16 26574, i16 26566, i16 26599, i16 27292, i16 26654, i16 26694, i16 26665, i16 26688, i16 26701, i16 26674, i16 26702, i16 26803, i16 26667, i16 26713, i16 26723, i16 26743, i16 26751, i16 26783, i16 26767, i16 26797, i16 26772, i16 26781, i16 26779, i16 26755, i16 27310, i16 26809, i16 26740, i16 26805, i16 26784, i16 26810, i16 26895, i16 26765, i16 26750, i16 26881, i16 26826, i16 26888, i16 26840, i16 26914, i16 26918, i16 26849, i16 26892, i16 26829], [94 x i16] [i16 26836, i16 26855, i16 26837, i16 26934, i16 26898, i16 26884, i16 26839, i16 26851, i16 26917, i16 26873, i16 26848, i16 26863, i16 26920, i16 26922, i16 26906, i16 26915, i16 26913, i16 26822, i16 27001, i16 26999, i16 26972, i16 27000, i16 26987, i16 26964, i16 27006, i16 26990, i16 26937, i16 26996, i16 26941, i16 26969, i16 26928, i16 26977, i16 26974, i16 26973, i16 27009, i16 26986, i16 27058, i16 27054, i16 27088, i16 27071, i16 27073, i16 27091, i16 27070, i16 27086, i16 23528, i16 27082, i16 27101, i16 27067, i16 27075, i16 27047, i16 27182, i16 27025, i16 27040, i16 27036, i16 27029, i16 27060, i16 27102, i16 27112, i16 27138, i16 27163, i16 27135, i16 27402, i16 27129, i16 27122, i16 27111, i16 27141, i16 27057, i16 27166, i16 27117, i16 27156, i16 27115, i16 27146, i16 27154, i16 27329, i16 27171, i16 27155, i16 27204, i16 27148, i16 27250, i16 27190, i16 27256, i16 27207, i16 27234, i16 27225, i16 27238, i16 27208, i16 27192, i16 27170, i16 27280, i16 27277, i16 27296, i16 27268, i16 27298, i16 27299], [94 x i16] [i16 27287, i16 -31209, i16 27323, i16 27331, i16 27330, i16 27320, i16 27315, i16 27308, i16 27358, i16 27345, i16 27359, i16 27306, i16 27354, i16 27370, i16 27387, i16 27397, i16 -31210, i16 27386, i16 27410, i16 27414, i16 -25807, i16 27423, i16 27448, i16 27447, i16 30428, i16 27449, i16 -26386, i16 27463, i16 27459, i16 27465, i16 27472, i16 27481, i16 27476, i16 27483, i16 27487, i16 27489, i16 27512, i16 27513, i16 27519, i16 27520, i16 27524, i16 27523, i16 27533, i16 27544, i16 27541, i16 27550, i16 27556, i16 27562, i16 27563, i16 27567, i16 27570, i16 27569, i16 27571, i16 27575, i16 27580, i16 27590, i16 27595, i16 27603, i16 27615, i16 27628, i16 27627, i16 27635, i16 27631, i16 -24898, i16 27656, i16 27667, i16 27668, i16 27675, i16 27684, i16 27683, i16 27742, i16 27733, i16 27746, i16 27754, i16 27778, i16 27789, i16 27802, i16 27777, i16 27803, i16 27774, i16 27752, i16 27763, i16 27794, i16 27792, i16 27844, i16 27889, i16 27859, i16 27837, i16 27863, i16 27845, i16 27869, i16 27822, i16 27825, i16 27838], [94 x i16] [i16 27834, i16 27867, i16 27887, i16 27865, i16 27882, i16 27935, i16 -30643, i16 27958, i16 27947, i16 27965, i16 27960, i16 27929, i16 27957, i16 27955, i16 27922, i16 27916, i16 28003, i16 28051, i16 28004, i16 27994, i16 28025, i16 27993, i16 28046, i16 28053, i16 28644, i16 28037, i16 28153, i16 28181, i16 28170, i16 28085, i16 28103, i16 28134, i16 28088, i16 28102, i16 28140, i16 28126, i16 28108, i16 28136, i16 28114, i16 28101, i16 28154, i16 28121, i16 28132, i16 28117, i16 28138, i16 28142, i16 28205, i16 28270, i16 28206, i16 28185, i16 28274, i16 28255, i16 28222, i16 28195, i16 28267, i16 28203, i16 28278, i16 28237, i16 28191, i16 28227, i16 28218, i16 28238, i16 28196, i16 28415, i16 28189, i16 28216, i16 28290, i16 28330, i16 28312, i16 28361, i16 28343, i16 28371, i16 28349, i16 28335, i16 28356, i16 28338, i16 28372, i16 28373, i16 28303, i16 28325, i16 28354, i16 28319, i16 28481, i16 28433, i16 28748, i16 28396, i16 28408, i16 28414, i16 28479, i16 28402, i16 28465, i16 28399, i16 28466, i16 28364], [94 x i16] [i16 28478, i16 28435, i16 28407, i16 28550, i16 28538, i16 28536, i16 28545, i16 28544, i16 28527, i16 28507, i16 28659, i16 28525, i16 28546, i16 28540, i16 28504, i16 28558, i16 28561, i16 28610, i16 28518, i16 28595, i16 28579, i16 28577, i16 28580, i16 28601, i16 28614, i16 28586, i16 28639, i16 28629, i16 28652, i16 28628, i16 28632, i16 28657, i16 28654, i16 28635, i16 28681, i16 28683, i16 28666, i16 28689, i16 28673, i16 28687, i16 28670, i16 28699, i16 28698, i16 28532, i16 28701, i16 28696, i16 28703, i16 28720, i16 28734, i16 28722, i16 28753, i16 28771, i16 28825, i16 28818, i16 28847, i16 28913, i16 28844, i16 28856, i16 28851, i16 28846, i16 28895, i16 28875, i16 28893, i16 28889, i16 28937, i16 28925, i16 28956, i16 28953, i16 29029, i16 29013, i16 29064, i16 29030, i16 29026, i16 29004, i16 29014, i16 29036, i16 29071, i16 29179, i16 29060, i16 29077, i16 29096, i16 29100, i16 29143, i16 29113, i16 29118, i16 29138, i16 29129, i16 29140, i16 29134, i16 29152, i16 29164, i16 29159, i16 29173, i16 29180], [94 x i16] [i16 29177, i16 29183, i16 29197, i16 29200, i16 29211, i16 29224, i16 29229, i16 29228, i16 29232, i16 29234, i16 29243, i16 29244, i16 29247, i16 29248, i16 29254, i16 29259, i16 29272, i16 29300, i16 29310, i16 29314, i16 29313, i16 29319, i16 29330, i16 29334, i16 29346, i16 29351, i16 29369, i16 29362, i16 29379, i16 29382, i16 29380, i16 29390, i16 29394, i16 29410, i16 29408, i16 29409, i16 29433, i16 29431, i16 20495, i16 29463, i16 29450, i16 29468, i16 29462, i16 29469, i16 29492, i16 29487, i16 29481, i16 29477, i16 29502, i16 29518, i16 29519, i16 -24872, i16 29527, i16 29546, i16 29544, i16 29552, i16 29560, i16 29557, i16 29563, i16 29562, i16 29640, i16 29619, i16 29646, i16 29627, i16 29632, i16 29669, i16 29678, i16 29662, i16 29858, i16 29701, i16 29807, i16 29733, i16 29688, i16 29746, i16 29754, i16 29781, i16 29759, i16 29791, i16 29785, i16 29761, i16 29788, i16 29801, i16 29808, i16 29795, i16 29802, i16 29814, i16 29822, i16 29835, i16 29854, i16 29863, i16 29898, i16 29903, i16 29908, i16 29681], [94 x i16] [i16 29920, i16 29923, i16 29927, i16 29929, i16 29934, i16 29938, i16 29936, i16 29937, i16 29944, i16 29943, i16 29956, i16 29955, i16 29957, i16 29964, i16 29966, i16 29965, i16 29973, i16 29971, i16 29982, i16 29990, i16 29996, i16 30012, i16 30020, i16 30029, i16 30026, i16 30025, i16 30043, i16 30022, i16 30042, i16 30057, i16 30052, i16 30055, i16 30059, i16 30061, i16 30072, i16 30070, i16 30086, i16 30087, i16 30068, i16 30090, i16 30089, i16 30082, i16 30100, i16 30106, i16 30109, i16 30117, i16 30115, i16 30146, i16 30131, i16 30147, i16 30133, i16 30141, i16 30136, i16 30140, i16 30129, i16 30157, i16 30154, i16 30162, i16 30169, i16 30179, i16 30174, i16 30206, i16 30207, i16 30204, i16 30209, i16 30192, i16 30202, i16 30194, i16 30195, i16 30219, i16 30221, i16 30217, i16 30239, i16 30247, i16 30240, i16 30241, i16 30242, i16 30244, i16 30260, i16 30256, i16 30267, i16 30279, i16 30280, i16 30278, i16 30300, i16 30296, i16 30305, i16 30306, i16 30312, i16 30313, i16 30314, i16 30311, i16 30316, i16 30320], [94 x i16] [i16 30322, i16 30326, i16 30328, i16 30332, i16 30336, i16 30339, i16 30344, i16 30347, i16 30350, i16 30358, i16 30355, i16 30361, i16 30362, i16 30384, i16 30388, i16 30392, i16 30393, i16 30394, i16 30402, i16 30413, i16 30422, i16 30418, i16 30430, i16 30433, i16 30437, i16 30439, i16 30442, i16 -31185, i16 30459, i16 30472, i16 30471, i16 30468, i16 30505, i16 30500, i16 30494, i16 30501, i16 30502, i16 30491, i16 30519, i16 30520, i16 30535, i16 30554, i16 30568, i16 30571, i16 30555, i16 30565, i16 30591, i16 30590, i16 30585, i16 30606, i16 30603, i16 30609, i16 30624, i16 30622, i16 30640, i16 30646, i16 30649, i16 30655, i16 30652, i16 30653, i16 30651, i16 30663, i16 30669, i16 30679, i16 30682, i16 30684, i16 30691, i16 30702, i16 30716, i16 30732, i16 30738, i16 31014, i16 30752, i16 31018, i16 30789, i16 30862, i16 30836, i16 30854, i16 30844, i16 30874, i16 30860, i16 30883, i16 30901, i16 30890, i16 30895, i16 30929, i16 30918, i16 30923, i16 30932, i16 30910, i16 30908, i16 30917, i16 30922, i16 30956], [94 x i16] [i16 30951, i16 30938, i16 30973, i16 30964, i16 30983, i16 30994, i16 30993, i16 31001, i16 31020, i16 31019, i16 31040, i16 31072, i16 31063, i16 31071, i16 31066, i16 31061, i16 31059, i16 31098, i16 31103, i16 31114, i16 31133, i16 31143, i16 -24757, i16 31146, i16 31150, i16 31155, i16 31161, i16 31162, i16 31177, i16 31189, i16 31207, i16 31212, i16 31201, i16 31203, i16 31240, i16 31245, i16 31256, i16 31257, i16 31264, i16 31263, i16 31104, i16 31281, i16 31291, i16 31294, i16 31287, i16 31299, i16 31319, i16 31305, i16 31329, i16 31330, i16 31337, i16 -24675, i16 31344, i16 31353, i16 31357, i16 31368, i16 31383, i16 31381, i16 31384, i16 31382, i16 31401, i16 31432, i16 31408, i16 31414, i16 31429, i16 31428, i16 31423, i16 -28541, i16 31431, i16 31434, i16 31437, i16 31439, i16 31445, i16 31443, i16 31449, i16 31450, i16 31453, i16 31457, i16 31458, i16 31462, i16 31469, i16 31472, i16 31490, i16 31503, i16 31498, i16 31494, i16 31539, i16 31512, i16 31513, i16 31518, i16 31541, i16 31528, i16 31542, i16 31568], [94 x i16] [i16 31610, i16 31492, i16 31565, i16 31499, i16 31564, i16 31557, i16 31605, i16 31589, i16 31604, i16 31591, i16 31600, i16 31601, i16 31596, i16 31598, i16 31645, i16 31640, i16 31647, i16 31629, i16 31644, i16 31642, i16 31627, i16 31634, i16 31631, i16 31581, i16 31641, i16 31691, i16 31681, i16 31692, i16 31695, i16 31668, i16 31686, i16 31709, i16 31721, i16 31761, i16 31764, i16 31718, i16 31717, i16 31840, i16 31744, i16 31751, i16 31763, i16 31731, i16 31735, i16 31767, i16 31757, i16 31734, i16 31779, i16 31783, i16 31786, i16 31775, i16 31799, i16 31787, i16 31805, i16 31820, i16 31811, i16 31828, i16 31823, i16 31808, i16 31824, i16 31832, i16 31839, i16 31844, i16 31830, i16 31845, i16 31852, i16 31861, i16 31875, i16 31888, i16 31908, i16 31917, i16 31906, i16 31915, i16 31905, i16 31912, i16 31923, i16 31922, i16 31921, i16 31918, i16 31929, i16 31933, i16 31936, i16 31941, i16 31938, i16 31960, i16 31954, i16 31964, i16 31970, i16 -25797, i16 31983, i16 31986, i16 31988, i16 31990, i16 31994, i16 32006], [94 x i16] [i16 32002, i16 32028, i16 32021, i16 32010, i16 32069, i16 32075, i16 32046, i16 32050, i16 32063, i16 32053, i16 32070, i16 32115, i16 32086, i16 32078, i16 32114, i16 32104, i16 32110, i16 32079, i16 32099, i16 32147, i16 32137, i16 32091, i16 32143, i16 32125, i16 32155, i16 32186, i16 32174, i16 32163, i16 32181, i16 32199, i16 32189, i16 32171, i16 32317, i16 32162, i16 32175, i16 32220, i16 32184, i16 32159, i16 32176, i16 32216, i16 32221, i16 32228, i16 32222, i16 32251, i16 32242, i16 32225, i16 32261, i16 32266, i16 32291, i16 32289, i16 32274, i16 32305, i16 32287, i16 32265, i16 32267, i16 32290, i16 32326, i16 32358, i16 32315, i16 32309, i16 32313, i16 32323, i16 32311, i16 32306, i16 32314, i16 32359, i16 32349, i16 32342, i16 32350, i16 32345, i16 32346, i16 32377, i16 32362, i16 32361, i16 32380, i16 32379, i16 32387, i16 32213, i16 32381, i16 -28754, i16 32383, i16 32392, i16 32393, i16 32396, i16 32402, i16 32400, i16 32403, i16 32404, i16 32406, i16 32398, i16 32411, i16 32412, i16 32568, i16 32570], [94 x i16] [i16 32581, i16 32588, i16 32589, i16 32590, i16 32592, i16 32593, i16 32597, i16 32596, i16 32600, i16 32607, i16 32608, i16 32616, i16 32617, i16 32615, i16 32632, i16 32642, i16 32646, i16 32643, i16 32648, i16 32647, i16 32652, i16 32660, i16 32670, i16 32669, i16 32666, i16 32675, i16 32687, i16 32690, i16 32697, i16 32686, i16 32694, i16 32696, i16 -29839, i16 32709, i16 32710, i16 32714, i16 32725, i16 32724, i16 32737, i16 32742, i16 32745, i16 32755, i16 32761, i16 -26404, i16 -32762, i16 -32764, i16 -32757, i16 -32750, i16 -32744, i16 -32743, i16 -32740, i16 -32735, i16 -32728, i16 -32705, i16 -32709, i16 -32694, i16 -32698, i16 -32686, i16 -32680, i16 -32678, i16 -32673, i16 -32670, i16 -32664, i16 -32653, i16 -32654, i16 -32656, i16 -32650, i16 -32647, i16 -32643, i16 -32641, i16 -32636, i16 -32634, i16 -32635, i16 -32613, i16 -32621, i16 -32614, i16 -32595, i16 20880, i16 -32596, i16 -32549, i16 -32539, i16 -32551, i16 -32547, i16 -32572, i16 -32550, i16 -32554, i16 -32503, i16 -32529, i16 -32527, i16 -32485, i16 -32471, i16 -32477, i16 -32465, i16 -32437], [94 x i16] [i16 -26997, i16 -32442, i16 -32450, i16 -32429, i16 -32431, i16 -32516, i16 -32399, i16 -32402, i16 -32411, i16 -32410, i16 -32396, i16 -32381, i16 -32376, i16 -32374, i16 -32384, i16 -32382, i16 -32352, i16 -32363, i16 -32348, i16 -32349, i16 -32417, i16 -32365, i16 -32343, i16 -32336, i16 -32331, i16 -32322, i16 -32328, i16 -32323, i16 -32320, i16 -32318, i16 -32326, i16 -32311, i16 -32307, i16 -32303, i16 -32295, i16 -32296, i16 -32312, i16 -32294, i16 -32289, i16 -32288, i16 -32281, i16 -32262, i16 -32261, i16 -32258, i16 -32255, i16 -32254, i16 -32251, i16 -32249, i16 -32246, i16 -32243, i16 -32240, i16 -32234, i16 -32215, i16 -32213, i16 -32200, i16 -32205, i16 -32192, i16 -32167, i16 -32168, i16 -32163, i16 -32166, i16 -32161, i16 -32156, i16 -32158, i16 -32152, i16 -32150, i16 -32149, i16 -32210, i16 -32143, i16 -32137, i16 -32136, i16 -32130, i16 -32115, i16 -32110, i16 -32085, i16 -32097, i16 -32069, i16 -32084, i16 -32031, i16 -32029, i16 -32033, i16 -32046, i16 -32012, i16 -32013, i16 -32006, i16 -31853, i16 -31997, i16 -32005, i16 -32007, i16 -32034, i16 -31994, i16 -32036, i16 -31991, i16 -32039], [94 x i16] [i16 -31947, i16 -31948, i16 -31978, i16 -31950, i16 -31951, i16 -31936, i16 -31943, i16 -31920, i16 -31931, i16 -31953, i16 -31957, i16 -31977, i16 -31976, i16 -31867, i16 -31846, i16 -31830, i16 -31841, i16 -31838, i16 -31850, i16 -31965, i16 -31858, i16 -31865, i16 -31862, i16 -31876, i16 -31819, i16 -31885, i16 -31883, i16 -31840, i16 -31863, i16 -31832, i16 -31756, i16 -31725, i16 -31765, i16 -31794, i16 -31747, i16 -31741, i16 -31784, i16 -31733, i16 -31807, i16 -31753, i16 -31737, i16 -31776, i16 -31758, i16 -31731, i16 -31710, i16 -31712, i16 -31811, i16 -31688, i16 -31482, i16 -31749, i16 -31635, i16 -31702, i16 -31684, i16 -31398, i16 -31612, i16 -31625, i16 -31637, i16 -31571, i16 -31634, i16 -31614, i16 -31639, i16 -31674, i16 -31700, i16 -31633, i16 -31623, i16 -31691, i16 -31542, i16 -31646, i16 -31559, i16 -31553, i16 -31585, i16 -31527, i16 -31539, i16 -31557, i16 -31526, i16 -31536, i16 -31551, i16 -31546, i16 -31530, i16 -31583, i16 -31455, i16 -31489, i16 -31500, i16 -31465, i16 -31464, i16 -31444, i16 -31457, i16 -31467, i16 -31468, i16 -31492, i16 -31424, i16 -31389, i16 -31400, i16 -31416], [94 x i16] [i16 -31423, i16 -31230, i16 -31413, i16 -31403, i16 -31360, i16 -31324, i16 -31352, i16 -31343, i16 -31350, i16 -31320, i16 -31379, i16 -31340, i16 -31333, i16 -31254, i16 -31353, i16 -31332, i16 -31369, i16 -31362, i16 -31344, i16 -31287, i16 -31302, i16 -31281, i16 -31303, i16 -31280, i16 -31275, i16 -31267, i16 -31259, i16 -31268, i16 -31239, i16 -31222, i16 -31213, i16 -31221, i16 -31234, i16 -31238, i16 -31226, i16 -31198, i16 -31206, i16 -31184, i16 -31169, i16 -31155, i16 20053, i16 -31148, i16 -31137, i16 -31129, i16 -31119, i16 -31085, i16 -31069, i16 -31063, i16 -31062, i16 -31093, i16 -31092, i16 -31050, i16 -31057, i16 -31036, i16 -31034, i16 -31056, i16 -31031, i16 -30685, i16 -31061, i16 -31020, i16 -31010, i16 -30999, i16 -30996, i16 -31009, i16 -31013, i16 -30993, i16 -30958, i16 -30970, i16 -30968, i16 -30976, i16 -30973, i16 -30981, i16 -30959, i16 -30967, i16 -30963, i16 -30983, i16 -30966, i16 -30924, i16 -30913, i16 -30921, i16 -30917, i16 -30939, i16 -30935, i16 -30950, i16 -30880, i16 -30881, i16 -30856, i16 -30900, i16 -30898, i16 -30860, i16 -30889, i16 -30872, i16 -30866, i16 -30887], [94 x i16] [i16 -30893, i16 -30877, i16 -30870, i16 -30715, i16 -30814, i16 -30817, i16 -30846, i16 -30801, i16 -30773, i16 -30787, i16 -30784, i16 -30768, i16 -26922, i16 -30805, i16 -30780, i16 -30797, i16 -30777, i16 -30778, i16 -30789, i16 -30737, i16 -30734, i16 -30752, i16 -30705, i16 -30707, i16 -30722, i16 -30730, i16 -30729, i16 -30706, i16 -30766, i16 -30703, i16 -30698, i16 -30699, i16 -30686, i16 -30687, i16 -30671, i16 -30666, i16 -30663, i16 -30681, i16 -30661, i16 -30652, i16 -30654, i16 -30638, i16 -30631, i16 -30626, i16 -30622, i16 -30613, i16 -30591, i16 -30594, i16 -30562, i16 -30603, i16 -30595, i16 -30539, i16 -30606, i16 -30590, i16 -30569, i16 -30574, i16 -30546, i16 -30567, i16 -30558, i16 -30579, i16 -30556, i16 -30544, i16 -30529, i16 -30543, i16 -30525, i16 -30524, i16 -30508, i16 -30504, i16 -30503, i16 -30499, i16 -30471, i16 -30462, i16 -30468, i16 -30476, i16 -30488, i16 -30478, i16 -30460, i16 -30452, i16 -30454, i16 -30445, i16 -30397, i16 -30434, i16 -30427, i16 -30422, i16 -30421, i16 -30399, i16 -30396, i16 -30405, i16 -30410, i16 -30408, i16 -30388, i16 -30435, i16 -30368, i16 -30370], [94 x i16] [i16 -30362, i16 -30364, i16 -30355, i16 -30358, i16 -30353, i16 -30348, i16 -30345, i16 -30338, i16 -30333, i16 -30328, i16 -30326, i16 -30317, i16 -30312, i16 -30303, i16 -30295, i16 -30298, i16 -30292, i16 -30289, i16 -30286, i16 -30278, i16 -30275, i16 -30273, i16 -30272, i16 -30246, i16 -30244, i16 -30243, i16 -30233, i16 -30220, i16 -30216, i16 -30205, i16 -30186, i16 -30192, i16 -30196, i16 -30181, i16 -30179, i16 -30171, i16 -30154, i16 -30143, i16 -30117, i16 -30126, i16 -30138, i16 -30136, i16 -30084, i16 -30099, i16 -30100, i16 -30110, i16 -30075, i16 -30078, i16 -30076, i16 -30040, i16 -30047, i16 -30063, i16 -30043, i16 -30042, i16 -30054, i16 -30045, i16 -30012, i16 -30003, i16 -30014, i16 -29990, i16 -29973, i16 -29965, i16 -29977, i16 -29980, i16 -29967, i16 -29932, i16 -29984, i16 -29982, i16 -29961, i16 -29986, i16 -29989, i16 -29940, i16 -29945, i16 -29926, i16 -29983, i16 -29930, i16 -29936, i16 -29929, i16 -29920, i16 -29901, i16 -26709, i16 -29914, i16 -29909, i16 -29890, i16 -29912, i16 -29887, i16 -29876, i16 -29873, i16 -29874, i16 -29879, i16 -29866, i16 -29861, i16 -29862, i16 -29845], [94 x i16] [i16 -29857, i16 -29844, i16 -29841, i16 -29836, i16 -29827, i16 -29824, i16 -29812, i16 -29810, i16 -29806, i16 -29805, i16 -29802, i16 -29799, i16 -29798, i16 -29638, i16 -29631, i16 -29633, i16 -29624, i16 -29620, i16 -29618, i16 -29616, i16 -29611, i16 -29598, i16 -29588, i16 -29576, i16 -29574, i16 -29566, i16 -29559, i16 -29563, i16 -29558, i16 -29555, i16 -29554, i16 -29548, i16 -29572, i16 -29544, i16 25117, i16 -29523, i16 -29526, i16 -29507, i16 -29518, i16 -29517, i16 -29522, i16 -29514, i16 -29496, i16 -29503, i16 -29468, i16 -29469, i16 -29478, i16 -29443, i16 -29446, i16 -29445, i16 -29436, i16 -29435, i16 -29430, i16 -29433, i16 -29425, i16 -29427, i16 -29424, i16 -24754, i16 -29421, i16 -29491, i16 -29420, i16 -29418, i16 -29337, i16 -29331, i16 -29327, i16 -29325, i16 -29311, i16 -29287, i16 -29246, i16 -29250, i16 -29254, i16 -29233, i16 -29222, i16 -29226, i16 -29236, i16 -29221, i16 -29237, i16 -29206, i16 -29205, i16 -29217, i16 -29213, i16 -29188, i16 -29176, i16 -29175, i16 -29185, i16 -29155, i16 -29154, i16 -29168, i16 -29153, i16 -29118, i16 -29131, i16 -29136, i16 -29132, i16 -29110], [94 x i16] [i16 -29113, i16 -29111, i16 -29108, i16 -29104, i16 -29112, i16 -29095, i16 -29084, i16 -29088, i16 -29142, i16 -29085, i16 -29099, i16 -29066, i16 -29070, i16 -29060, i16 -29055, i16 -29049, i16 -29051, i16 -29052, i16 -29045, i16 -29046, i16 -29037, i16 -29039, i16 -29036, i16 -29031, i16 -29014, i16 -29023, i16 -29012, i16 -29008, i16 -28986, i16 -29007, i16 -28994, i16 -28987, i16 -28984, i16 -28981, i16 -28965, i16 -28957, i16 -28932, i16 -28933, i16 -28949, i16 -28930, i16 -28918, i16 -28923, i16 -28907, i16 -28910, i16 -28903, i16 -28909, i16 -28900, i16 -28897, i16 -28901, i16 -28916, i16 -28890, i16 -28877, i16 -28869, i16 -28871, i16 -28859, i16 -28862, i16 -28866, i16 -28852, i16 -28855, i16 -28858, i16 -28850, i16 -28841, i16 -28836, i16 -28830, i16 -28829, i16 -28828, i16 -28772, i16 -28769, i16 -28765, i16 -28755, i16 -28753, i16 -28745, i16 -28710, i16 -28699, i16 -28702, i16 -28694, i16 -28689, i16 -28537, i16 -28684, i16 -28667, i16 -28679, i16 -28678, i16 -28655, i16 -28651, i16 -28639, i16 -28659, i16 -28642, i16 -28650, i16 -28661, i16 -28633, i16 -28618, i16 -28619, i16 -28615, i16 -28680], [94 x i16] [i16 -28593, i16 -28592, i16 -28591, i16 -28590, i16 -28658, i16 -28599, i16 -28610, i16 -28586, i16 -28584, i16 -28578, i16 -28568, i16 -28561, i16 -28554, i16 -26968, i16 -28558, i16 -28542, i16 -28547, i16 -28543, i16 -28544, i16 -28534, i16 -28535, i16 -28529, i16 -28504, i16 -28497, i16 -28495, i16 -28491, i16 -28446, i16 -28444, i16 25160, i16 -28453, i16 -28414, i16 -28398, i16 -28391, i16 -28366, i16 -28368, i16 -28342, i16 -28330, i16 -28328, i16 -28317, i16 -28315, i16 -28311, i16 -28301, i16 -28302, i16 -28277, i16 -28279, i16 -28286, i16 -28254, i16 -28245, i16 -28241, i16 -28246, i16 -28235, i16 -28236, i16 -28230, i16 -28224, i16 -28223, i16 -28215, i16 -28213, i16 -28208, i16 -28202, i16 -28193, i16 -28191, i16 -28197, i16 -28164, i16 -28171, i16 -28170, i16 -28130, i16 -28161, i16 -28140, i16 -28116, i16 -28139, i16 -28143, i16 -28066, i16 -28073, i16 -28091, i16 -28087, i16 -28060, i16 -28088, i16 -28011, i16 -28097, i16 -28085, i16 -28080, i16 -28004, i16 -28010, i16 -28013, i16 -28005, i16 -28070, i16 -27953, i16 -27975, i16 -27977, i16 -27927, i16 -27889, i16 -27910, i16 -27836, i16 -27858], [94 x i16] [i16 -27879, i16 -27870, i16 -27878, i16 -27869, i16 -27846, i16 -27851, i16 -27845, i16 -27812, i16 -27808, i16 -27780, i16 -27794, i16 -27818, i16 -27728, i16 -27732, i16 -27731, i16 -27756, i16 -27719, i16 -27690, i16 -27689, i16 -27672, i16 -27675, i16 -27688, i16 -27709, i16 -27683, i16 -27696, i16 -27704, i16 -27676, i16 -27622, i16 -27628, i16 -27629, i16 -27645, i16 -27641, i16 -27632, i16 -27594, i16 -27605, i16 -27595, i16 -27615, i16 -27590, i16 -27583, i16 -27566, i16 -27580, i16 -27557, i16 -27552, i16 -27550, i16 -27554, i16 -27542, i16 -28119, i16 -27536, i16 -27531, i16 -27529, i16 -27523, i16 -27558, i16 -27524, i16 -27522, i16 -27519, i16 -27521, i16 -27262, i16 -27257, i16 -27254, i16 -27244, i16 -27242, i16 -27240, i16 -27239, i16 -27232, i16 -27224, i16 -27225, i16 -27219, i16 -27204, i16 -27205, i16 -27207, i16 -27202, i16 -27190, i16 28662, i16 -27197, i16 -27187, i16 -27188, i16 -27179, i16 -27180, i16 -27178, i16 -27172, i16 -27167, i16 -27163, i16 -27166, i16 -27103, i16 -27096, i16 -27090, i16 -27089, i16 -27070, i16 -27060, i16 -27057, i16 -27061, i16 -27017, i16 -27044, i16 -27042], [94 x i16] [i16 -27043, i16 -27041, i16 -27034, i16 -27022, i16 -27028, i16 -26995, i16 -26984, i16 -26987, i16 -26985, i16 -26966, i16 -26969, i16 -26959, i16 -26958, i16 -26960, i16 -26956, i16 -26954, i16 -26952, i16 -26951, i16 -26930, i16 -26933, i16 -26935, i16 -26931, i16 -30387, i16 -26916, i16 -26867, i16 -26923, i16 -26887, i16 -26876, i16 -26874, i16 -26872, i16 -26861, i16 -26866, i16 -26863, i16 -26865, i16 -26858, i16 -26855, i16 -26844, i16 -26838, i16 -26832, i16 -26823, i16 -26819, i16 -26818, i16 -26812, i16 -26810, i16 -26808, i16 -26814, i16 -26807, i16 -26788, i16 -26784, i16 -26780, i16 -26778, i16 -26776, i16 21202, i16 -26773, i16 -26767, i16 -26759, i16 -26747, i16 -26756, i16 -26751, i16 -26758, i16 -26746, i16 -26741, i16 -26737, i16 -26736, i16 -26724, i16 -26712, i16 -26714, i16 -26717, i16 -26701, i16 -26700, i16 -26685, i16 -26682, i16 -26680, i16 -26677, i16 -26660, i16 -26643, i16 -24753, i16 -26638, i16 31455, i16 -26634, i16 -26635, i16 -26609, i16 -26612, i16 -26568, i16 -26588, i16 -26591, i16 -26569, i16 -26563, i16 -26554, i16 -26545, i16 -26549, i16 -26517, i16 -26513, i16 -26512], [94 x i16] [i16 -26511, i16 -26508, i16 -26509, i16 -26454, i16 -26449, i16 -26447, i16 -26442, i16 -26428, i16 -26429, i16 -26426, i16 -26391, i16 -26389, i16 -26365, i16 -26359, i16 -26350, i16 -26348, i16 -26344, i16 -26335, i16 -26339, i16 -26338, i16 -26332, i16 -26336, i16 -26324, i16 -26322, i16 -26307, i16 -26306, i16 -26302, i16 -26295, i16 -26299, i16 -26288, i16 -26293, i16 -26287, i16 -26286, i16 -26292, i16 -26283, i16 -26217, i16 -26216, i16 -26203, i16 -26195, i16 -26194, i16 -26180, i16 -26145, i16 -26149, i16 -26147, i16 -26152, i16 -26159, i16 -26131, i16 -26130, i16 -26127, i16 -26126, i16 -26117, i16 -26120, i16 -26111, i16 -26097, i16 -26107, i16 -26142, i16 -26087, i16 -26069, i16 -26057, i16 -26043, i16 -26046, i16 -26048, i16 -26045, i16 -26050, i16 -26027, i16 -26035, i16 -26021, i16 -26025, i16 -26017, i16 -26014, i16 -26011, i16 -26012, i16 -26007, i16 -26005, i16 -26006, i16 -25939, i16 -25936, i16 -25924, i16 -25920, i16 -25905, i16 -25903, i16 -25901, i16 -25900, i16 -25890, i16 -25889, i16 -25886, i16 -25885, i16 -25882, i16 -25873, i16 -25877, i16 -25874, i16 -25868, i16 -25871, i16 -25865], [94 x i16] [i16 -25861, i16 -25850, i16 -25832, i16 -25830, i16 -25825, i16 -25822, i16 -25821, i16 -25819, i16 -25817, i16 -25816, i16 -25815, i16 -25814, i16 -25810, i16 -25809, i16 -25806, i16 -25788, i16 -25789, i16 -25777, i16 -25779, i16 -25778, i16 -25775, i16 -25768, i16 -25740, i16 -25709, i16 -25725, i16 -25711, i16 -25706, i16 -25705, i16 -25697, i16 -25696, i16 -25688, i16 -25676, i16 -25664, i16 -25654, i16 -25671, i16 -25658, i16 -25649, i16 -25647, i16 -25646, i16 -25629, i16 -25630, i16 -25628, i16 -25644, i16 -25631, i16 -25542, i16 -25614, i16 -25615, i16 -25616, i16 -25579, i16 -25580, i16 -25591, i16 -25581, i16 -25588, i16 -25594, i16 -25592, i16 -25582, i16 -25590, i16 -25596, i16 -25554, i16 -25573, i16 -25563, i16 -25564, i16 -25567, i16 -25552, i16 -25529, i16 -25550, i16 -25530, i16 -25538, i16 -25510, i16 -25504, i16 -25497, i16 -25482, i16 -25480, i16 -25369, i16 -25364, i16 -25360, i16 -25335, i16 -25336, i16 -25365, i16 -25341, i16 -25338, i16 -25302, i16 -25306, i16 -25169, i16 -25309, i16 -25313, i16 -25276, i16 -25323, i16 -25326, i16 -25279, i16 -25281, i16 -25282, i16 -25274, i16 -25272], [94 x i16] [i16 -25251, i16 -25250, i16 -25244, i16 -25263, i16 -25264, i16 -25255, i16 -25230, i16 -25207, i16 -25209, i16 -25173, i16 -25233, i16 -25222, i16 -25190, i16 -25180, i16 -25175, i16 -25166, i16 -25148, i16 -25151, i16 -25157, i16 -25160, i16 -25158, i16 -25146, i16 -25137, i16 -25150, i16 -25127, i16 -25133, i16 -25096, i16 -25114, i16 -25107, i16 -25105, i16 -25091, i16 -25062, i16 -25061, i16 -25058, i16 -24971, i16 -24967, i16 -24963, i16 -24959, i16 -24952, i16 -24949, i16 -24948, i16 -24942, i16 -24939, i16 -24943, i16 -24931, i16 -24923, i16 -24919, i16 -24904, i16 -24918, i16 -24915, i16 -26783, i16 -24884, i16 -24882, i16 -24881, i16 -24880, i16 -24876, i16 -24868, i16 -24866, i16 -24867, i16 -24864, i16 -24859, i16 -24856, i16 -24849, i16 -24844, i16 -24842, i16 -24841, i16 -24839, i16 -24837, i16 -24836, i16 -24835, i16 -24825, i16 -24824, i16 30391, i16 -24811, i16 -24799, i16 -24788, i16 -24770, i16 -24758, i16 -24750, i16 -24748, i16 -24733, i16 -24737, i16 -24736, i16 -24735, i16 -24730, i16 -24729, i16 -24724, i16 -24726, i16 -24713, i16 -24718, i16 -24714, i16 -24683, i16 -24676, i16 -24672], [94 x i16] [i16 22575, i16 27079, i16 -28583, i16 29796, i16 20956, i16 29081, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0]], align 16
@charmaps = internal constant [3964 x i8] c"utf8\00\00\C8wchart\00\00\C7ucs2\00ucs2be\00\00\C4ucs2le\00\00\C5utf16\00utf16be\00\00\C2utf16le\00\00\C1ucs4\00ucs4be\00utf32\00utf32be\00\00\C0ucs4le\00utf32le\00\00\C3ascii\00usascii\00iso646\00iso646us\00\00\C6eucjp\00\00\D0shiftjis\00sjis\00\00\D1gb18030\00\00\D8gbk\00\00\D9gb2312\00\00\DAiso88591\00latin1\00\00\80iso88592\00\00 \00T\00\89\12\00 \01\06\00\00\98A\86\1A\7F\000H \00X \C9\12\00$\11\C6#\00\9CQ\C6\1A\80PB\88 Z\00\00\C0\04\00\10q\01\00\1D\00p\02\00)\00\00\C0\07!0\01\05\00\00X\01\00\00^\D0\01\80\1D\00\00\80\06\00[\00\00\00\05\00\14\81\01\00\1E\00\80\02\00*\00\00\00\08\224\11\05\00\00\5C\01\00\00_\D4\01\C0\1D\00\00\90F$iso88593\00\00 \00\D4\00\09\00\00\040\03\00\00\F4@F\0B?\00\10@ \00\D8\00\00\00\00\00@\03\00\00\F8P\86\0B@\00\10\80 \00\00\00@\00\00l\90\01\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\BC\00\00\00+\00\00\00\00\00\C8!\06\00\00\00\00@\00\00p\A0\01\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\C0\00\00\00,\00\00\00\00\00\CC1F$iso88594\00\00 \00T0\04\17\00\DC`\04\00\00\981B\0Cl\000\08\00\00X I\17\00\E0p\C4#\00\9CA\82\0CmHA\C8\14\11\00\00\00\00\00\00\00\C0\0E\1D\00p\02\00%\00\00@\0E!8AE\10\00\00\00\00\00\00\E0\01\00\00\00\B8\01\07\00\12\00\00\00\00\00\00\00\00\0F\1E\00\80\02\00&\00\00\80\0E\22<Q\85\10\00\00\00\00\00\00\E4\01\00\00\00\BC\11G$iso88595\00\00 \00\883\0E9\E5\98s\0E:\E9\A8\B3\0E;\ED\00\E0\CE;\F0\C4#\CF<\F4\D4c\CF=\F8\E4\A3\CF>\FC\F4\E3\CF?\00\05$\D0@\04\15d\D0A\08%\A4\D0B\0C5\E4\D0C\10E$\D1D\14Ud\D1E\18e\A4\D1F\1Cu\E4\D1G \85$\D2H$\95d\D2I(\A5\A4\D2J,\B5\E4\D2K5\C2\14\93L3\D1T\93M7\E1\94\93N;\0D\C0SOiso88596\00\00 \00\04\10@\00\00\04\10@\00\01\04\10@\00s\01\10@\00\01\04\10@\00\01\04\10@\00\01\04\10\00]\01\04\10@]\01\D8u\17^y\E9\B5\17_}\F9\F5\17`\81\096\18a\85\19v\18b\89)\B6\18c\8D9\F6X\00\01\04\10@\00\90E&\D9d\94Uf\D9e\98e\A6\D9f\9Cu\E6\D9g\A0\85&Z\00\01\04\10@\00\01\04\10@\00\01\04\10@\00iso88597\00\00 \00\90X\22\003\D2\08\00\00\00\00\A0\09\00\00\00\10\80\88\00\00\00\00\00\9Bp\D2\09\00\9E|\02\0A\00\A1\00 \CA(\A4\94b\CA)\A8\A4\A2\CA*\AC\B4\E2\CA+\B0\C4\22\CB,\B4\D4\12\80-\B7\E0\92\8B.\BB\F0\D2\8B/\BF\00\13\8C0\C3\10S\8C1\C7 \93\8C2\CB0\D3\8C3\CF@\13\8D4\D3PS\8D5\D7`\93\8D6\DBp\D3\8D7\DF\80\13N\00iso88598\00\00 \00\04\00\00\00\00\00\00\00\00\00\00\C0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0\00\00\00\00\00@\00\01\04\10@\00\01\04\10@\00\01\04\10@\00\01\04\10@\00\01\04\10@\00\01\04\10@\00\01\04\10@\00\01\04\10\C0\88SQU\95UWa\95\95V[q\D5\95W_\81\15\96Xc\91U\96Yg\A1\95\96Zk\B1\D5V\00\01x\F8a\00iso88599\00\00P-\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F4@\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F8P\06\00iso885910\00\00 \00T0B\0C9\DC\10\04\00F\84`\06\1B\83\00\00\87\14\00X@\82\0C:\E0 \04\00G\88pF\1B\84\88\18\C7\14\11\00\00\00\00\00\00\00\C0\0E\1D\00p\02\00%\00\00\00\00\008A\05\00\00\00\00\80\1B\00\E0\01\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\0F\1E\00\80\02\00&\00\00\00\00\00<Q\05\00\00\00\00\C0\1B\00\E4\01\00\00\00\00\00\C0\10iso885911\00tis620\00\00 \00\BC\06[l\B2\CDF[m\B6\DD\86[n\BA\ED\C6[o\BE\FD\06\5Cp\C2\0DG\5Cq\C6\1D\87\5Cr\CA-\C7\5Cs\CE=\07]t\D2MG]u\D6]\87]v\DAm\C7]w\DE}\07^x\E2\8DG^y\E6\9D\87^\00\01\04\10@z\EA\AD\C7^{\EE\BD\07_|\F2\CDG_}\F6\DD\87_~\FA\ED\C7_\7F\FE\FD\07`\80\02\0EH`\81\01\04\10@\00iso885913\00\00 \00\A0\08\00\00\00\A4\08\00\00\0D\00\C0\05\00\00\00\00\C0\02\00\00\00\00\00'\02\00\00\00\10\00\D0\05\00\00\00\00\80\03\15\EC\10\C1\05\00\00p\C2\08\1D\00\F0G\091\04\91\83\11f0\E1\04\00T\00\00\00\00x(\01\06\1C\00\042\08\00\16\F0 \01\06\00\00\80\02\09\1E\00\00\88\092\08\A1\C3\11g4\F1\04\00U\00\00\00\00y,\11F\1C\00\08BH\89iso885914\00\00 \00\18x \00\1Bp\80 \00\14\02`a\82\1A\02\00\80\1F\0A.\F8\02\0C\0C6\08\80\83\15>x!\84\1Bb\98a\84\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00z\00\00\00\00\00\00\00\80\84\00\00\00\00\00\00\00\C0\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00{\00\00\00\00\00\00\00\C0\84\00\00\00\00\00\00\00\D0\07\00iso885915\00latin9\00\00$3\02`\06\00g\00\00\00\00\00\00\00\00\00\00\00\00\00\00\83\00\00\00\00\84\00\00\00\00Xd\E1\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00iso885916\00\00 \00T`\81\123\A6h\06\00g\00\A0\08\00\7F\00\00H \00\00\D0\C1\12\83\A0\08\00\00\84x\B0\08\00Xd\E1\87 \00\00\00\C0\04\00\5C\00\00\00\00\00\00\00\00\00\00\00\00\00!0\01\00\00\00X\01\00\18v\00\00\00\00\00\9C\C0\08\00\00\00\00\00\05\00`\00\00\00\00\00\00\00\00\00\00\00\00\00\224\01\00\00\00\5C\01@\18w\00\00\00\00\00\A0\D0\08\00cp1250\00windows1250\00\00\003\06`b\00)\B6\A8\E2\8A\01\B8h\C6\8B`\A81\C8\1F\01\90X\E2\89(\B2\08b\88\01\D8x\06\8Ca\ACA\08 \00<\02\89\12\00T\00\00\00\00\00@\06\00\00\00\00@ \00\00 \C9\12\00\00\00\00\00\00XP\06\00HP\92\84 Z\00\00\C0\04\00\10q\01\00\1D\00p\02\00)\00\00\C0\07!0\01\05\00\00X\01\00\00^\D0\01\80\1D\00\00\80\06\00[\00\00\00\05\00\14\81\01\00\1E\00\80\02\00*\00\00\00\08\224\11\05\00\00\5C\01\00\00_\D4\01\C0\1D\00\00\90F$cp1251\00windows1251\00\00\00\E3\90c\A2L)\B6\A8\E2\8A3\BA\A8\CE\8B\EB\B4\C3\CE;1\91X\E2\89(\B2\08b\88\01\D8\88\13\8C9\ED\A4SO\00\B8\C3S:\00\F8\04\00\00\E2\00P\0E\00\00\00\00\00:\00\00pNM?\01\00\00\000\D58\13\007\99C\93M\F0\C4#\CF<\F4\D4c\CF=\F8\E4\A3\CF>\FC\F4\E3\CF?\00\05$\D0@\04\15d\D0A\08%\A4\D0B\0C5\E4\D0C\10E$\D1D\14Ud\D1E\18e\A4\D1F\1Cu\E4\D1G \85$\D2H$\95d\D2I(\A5\A4\D2J,\B5\E4\D2Kcp1252\00windows1252\00\00\003\06`b!)\B6\A8\E2\8A\8E\B8h\C6\8BX\040H\00\01\90X\E2\89(\B2\08b\88\93\D8x\06\8CY\04@\88\1F\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00cp1253\00windows1253\00\00\003\06`b!)\B6\A8\E2\8A\01\B8\18\C0\8B\01\04\10@\00\01\90X\E2\89(\B2\08b\88\01\D8\18\00\8C\01\04\10@\00\00p\D2\09\00\00\00\00\00\00\00\00\10\00\00\00\00\00\80\88\00\00\00\00\00\9B\00\00\00\00\9E|\02\0A\00\A1\00 \CA(\A4\94b\CA)\A8\A4\A2\CA*\AC\B4\E2\CA+\B0\C4\22\CB,\B4\D4\12\80-\B7\E0\92\8B.\BB\F0\D2\8B/\BF\00\13\8C0\C3\10S\8C1\C7 \93\8C2\CB0\D3\8C3\CF@\13\8D4\D3PS\8D5\D7`\93\8D6\DBp\D3\8D7\DF\80\13N\00cp1254\00windows1254\00\00\003\06`b!)\B6\A8\E2\8A\8E\B8h\C6\8BX\04\10@\00\01\90X\E2\89(\B2\08b\88\93\D8x\06\8CY\04\10\80\1F\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F4@\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F8P\06\00cp1255\00windows1255\00\00\003\06`b!)\B6\A8\E2\8A\8E\B8\18\C0\8B\01\04\10@\00\01\90X\E2\89(\B2\08b\88\93\D8\18\00\8C\01\04\10@\00\00\00\00\00\001\02\00\00\00\00\00\C0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0\00\00\00\00\00\00\00@\05%\D4PD\15e\D4QH%\15\80RK1\D5\94SOA\15\95Tn\BD\05W\5Cr\05\10@\00\01\04\10@\00SQU\95UWa\95\95V[q\D5\95W_\81\15\96Xc\91U\96Yg\A1\95\96Zk\B1\D5V\00\01x\F8a\00cp1256\00windows1256\00\00\003\92fb!)\B6\A8\E2\8A\8E\B88\DA\8BX\94\86\9Ai\AA\91X\E2\89(\B2\08b\88\A9\D9x\1A\8CYp\D8\E1j\00\CC\05\00\00\00\00\00\00\00\00\00\C0\1A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@\17\00\00\00\00@]\AD\D9u\17^y\E9\B5\17_}\F9\F5\17`\81\096\18a\85\19v\18b\89)\B6\18\00\8C5\E6\D8c\90E&\D9d\00P\06@e\96]\86\19\00\00\00\00\00\00\99i\06\00\00\9Bq\D6\99g\00|\06\1A\00\A1\01 \1A\00\00x\F8\A1kcp1257\00windows1257\00\00\003\06`b\00)\B6\A8\E2\8A\01\B8\18\C0\8B\01\10\F0\88\02\01\90X\E2\89(\B2\08b\88\01\D8\18\00\8C\01\18 I\00\00\04\00\00\00\00\04\00\00\00\0D\00\C0\05\00\00\00\00\C0\02\00\00\00\00\00\00\00\00\00\00\10\00\D0\05\00\00\00\00\80\03\15\EC\10\C1\05\00\00p\C2\08\1D\00\F0G\091\04\91\83\11f0\E1\04\00T\00\00\00\00x(\01\06\1C\00\042\08\00\16\F0 \01\06\00\00\80\02\09\1E\00\00\88\092\08\A1\C3\11g4\F1\04\00U\00\00\00\00y,\11F\1C\00\08BH$cp1258\00windows1258\00\00\003\06`b!)\B6\A8\E2\8A\8E\B8\18\C0\8BX\04\10@\00\01\90X\E2\89(\B2\08b\88\93\D8\18\00\8CY\04\10\80\1F\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\C0\04\00\00\00\00\00\00\00\00\00\00\95\00\00\00\00!\00\80\09\00\00\18\02\00\00\00\00\00\00\00\00 r\09\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\96\00\00\00\00\22\00\90\09\00\00\1C\02\00\00\00\00\00\00\00\00$\22#\00koi8r\00\00\00>\FE\08d\90B\0EId\91F\1E\89\A4\99g\A2\99\A6\9Ak\B2\D9&\8Fn\DE\88c\8E:\EE(@\8F\07 \90\C0\03I*\B9$LL6\E9\E4\93PF)\E5\94TVi\E5\95Xf\A9\A58[r\D9\A5\97_\82\19\A6\98c\92Yf\01.A\14\91I\14UD\D2D%a\94\91F\1Bq\D4\91G\1F\BD\04RH\22\8Dd\91D,\ADt\11J-\A5t\92J\0E\C1\13\8FA\F4\D4C\D0<\05\E1\93\8F>\FB\F0\D3\8F?\FF<\04P@\02\0Dd\8F<\0C-t\0FB\0D%t\90Bkoi8u\00\00\00>\FE\08d\90B\0EId\91F\1E\89\A4\99g\A2\99\A6\9Ak\B2\D9&\8Fn\DE\88c\8E:\EE(@\8F\07 \90\C0\03I*\B9$L35Y\93MPF)\E5\94T\FEd\E5\95Xf\A9\A58\E5py\0E:_\82\19\A6\98c\FATf\01.A\14\91I\14UD\D2D%a\94\91F\1Bq\D4\91G\1F\BD\04RH\22\8Dd\91D,\ADt\11J-\A5t\92J\0E\C1\13\8FA\F4\D4C\D0<\05\E1\93\8F>\FB\F0\D3\8F?\FF<\04P@\02\0Dd\8F<\0C-t\0FB\0D%t\90B\00", align 16
@gb18030 = internal unnamed_addr constant [126 x [190 x i16]] [[190 x i16] [i16 19970, i16 19972, i16 19973, i16 19974, i16 19983, i16 19986, i16 19991, i16 19999, i16 20000, i16 20001, i16 20003, i16 20006, i16 20009, i16 20014, i16 20015, i16 20017, i16 20019, i16 20021, i16 20023, i16 20028, i16 20032, i16 20033, i16 20034, i16 20036, i16 20038, i16 20042, i16 20049, i16 20053, i16 20055, i16 20058, i16 20059, i16 20066, i16 20067, i16 20068, i16 20069, i16 20071, i16 20072, i16 20074, i16 20075, i16 20076, i16 20077, i16 20078, i16 20079, i16 20082, i16 20084, i16 20085, i16 20086, i16 20087, i16 20088, i16 20089, i16 20090, i16 20091, i16 20092, i16 20093, i16 20095, i16 20096, i16 20097, i16 20098, i16 20099, i16 20100, i16 20101, i16 20103, i16 20106, i16 20112, i16 20118, i16 20119, i16 20121, i16 20124, i16 20125, i16 20126, i16 20131, i16 20138, i16 20143, i16 20144, i16 20145, i16 20148, i16 20150, i16 20151, i16 20152, i16 20153, i16 20156, i16 20157, i16 20158, i16 20168, i16 20172, i16 20175, i16 20176, i16 20178, i16 20186, i16 20187, i16 20188, i16 20192, i16 20194, i16 20198, i16 20199, i16 20201, i16 20205, i16 20206, i16 20207, i16 20209, i16 20212, i16 20216, i16 20217, i16 20218, i16 20220, i16 20222, i16 20224, i16 20226, i16 20227, i16 20228, i16 20229, i16 20230, i16 20231, i16 20232, i16 20235, i16 20236, i16 20242, i16 20243, i16 20244, i16 20245, i16 20246, i16 20252, i16 20253, i16 20257, i16 20259, i16 20264, i16 20265, i16 20268, i16 20269, i16 20270, i16 20273, i16 20275, i16 20277, i16 20279, i16 20281, i16 20283, i16 20286, i16 20287, i16 20288, i16 20289, i16 20290, i16 20292, i16 20293, i16 20295, i16 20296, i16 20297, i16 20298, i16 20299, i16 20300, i16 20306, i16 20308, i16 20310, i16 20321, i16 20322, i16 20326, i16 20328, i16 20330, i16 20331, i16 20333, i16 20334, i16 20337, i16 20338, i16 20341, i16 20343, i16 20344, i16 20345, i16 20346, i16 20349, i16 20352, i16 20353, i16 20354, i16 20357, i16 20358, i16 20359, i16 20362, i16 20364, i16 20366, i16 20368, i16 20370, i16 20371, i16 20373, i16 20374, i16 20376, i16 20377, i16 20378, i16 20380, i16 20382, i16 20383, i16 20385, i16 20386], [190 x i16] [i16 20388, i16 20395, i16 20397, i16 20400, i16 20401, i16 20402, i16 20403, i16 20404, i16 20406, i16 20407, i16 20408, i16 20409, i16 20410, i16 20411, i16 20412, i16 20413, i16 20414, i16 20416, i16 20417, i16 20418, i16 20422, i16 20423, i16 20424, i16 20425, i16 20427, i16 20428, i16 20429, i16 20434, i16 20435, i16 20436, i16 20437, i16 20438, i16 20441, i16 20443, i16 20448, i16 20450, i16 20452, i16 20453, i16 20455, i16 20459, i16 20460, i16 20464, i16 20466, i16 20468, i16 20469, i16 20470, i16 20471, i16 20473, i16 20475, i16 20476, i16 20477, i16 20479, i16 20480, i16 20481, i16 20482, i16 20483, i16 20484, i16 20485, i16 20486, i16 20487, i16 20488, i16 20489, i16 20490, i16 20491, i16 20494, i16 20496, i16 20497, i16 20499, i16 20501, i16 20502, i16 20503, i16 20507, i16 20509, i16 20510, i16 20512, i16 20514, i16 20515, i16 20516, i16 20519, i16 20523, i16 20527, i16 20528, i16 20529, i16 20530, i16 20531, i16 20532, i16 20533, i16 20534, i16 20535, i16 20536, i16 20537, i16 20539, i16 20541, i16 20543, i16 20544, i16 20545, i16 20546, i16 20548, i16 20549, i16 20550, i16 20553, i16 20554, i16 20555, i16 20557, i16 20560, i16 20561, i16 20562, i16 20563, i16 20564, i16 20566, i16 20567, i16 20568, i16 20569, i16 20571, i16 20573, i16 20574, i16 20575, i16 20576, i16 20577, i16 20578, i16 20579, i16 20580, i16 20582, i16 20583, i16 20584, i16 20585, i16 20586, i16 20587, i16 20589, i16 20590, i16 20591, i16 20592, i16 20593, i16 20594, i16 20595, i16 20596, i16 20597, i16 20600, i16 20601, i16 20602, i16 20604, i16 20605, i16 20609, i16 20610, i16 20611, i16 20612, i16 20614, i16 20615, i16 20617, i16 20618, i16 20619, i16 20620, i16 20622, i16 20623, i16 20624, i16 20625, i16 20626, i16 20627, i16 20628, i16 20629, i16 20630, i16 20631, i16 20632, i16 20633, i16 20634, i16 20635, i16 20636, i16 20637, i16 20638, i16 20639, i16 20640, i16 20641, i16 20642, i16 20644, i16 20646, i16 20650, i16 20651, i16 20653, i16 20654, i16 20655, i16 20656, i16 20657, i16 20659, i16 20660, i16 20661, i16 20662, i16 20663, i16 20664, i16 20665, i16 20668], [190 x i16] [i16 20669, i16 20670, i16 20671, i16 20672, i16 20673, i16 20674, i16 20675, i16 20676, i16 20677, i16 20678, i16 20679, i16 20680, i16 20681, i16 20682, i16 20683, i16 20684, i16 20685, i16 20686, i16 20688, i16 20689, i16 20690, i16 20691, i16 20692, i16 20693, i16 20695, i16 20696, i16 20697, i16 20699, i16 20700, i16 20701, i16 20702, i16 20703, i16 20704, i16 20705, i16 20706, i16 20707, i16 20708, i16 20709, i16 20712, i16 20713, i16 20714, i16 20715, i16 20719, i16 20720, i16 20721, i16 20722, i16 20724, i16 20726, i16 20727, i16 20728, i16 20729, i16 20730, i16 20732, i16 20733, i16 20734, i16 20735, i16 20736, i16 20737, i16 20738, i16 20739, i16 20740, i16 20741, i16 20744, i16 20745, i16 20746, i16 20748, i16 20749, i16 20750, i16 20751, i16 20752, i16 20753, i16 20755, i16 20756, i16 20757, i16 20758, i16 20759, i16 20760, i16 20761, i16 20762, i16 20763, i16 20764, i16 20765, i16 20766, i16 20767, i16 20768, i16 20770, i16 20771, i16 20772, i16 20773, i16 20774, i16 20775, i16 20776, i16 20777, i16 20778, i16 20779, i16 20780, i16 20781, i16 20782, i16 20783, i16 20784, i16 20785, i16 20786, i16 20787, i16 20788, i16 20789, i16 20790, i16 20791, i16 20792, i16 20793, i16 20794, i16 20795, i16 20796, i16 20797, i16 20798, i16 20802, i16 20807, i16 20810, i16 20812, i16 20814, i16 20815, i16 20816, i16 20818, i16 20819, i16 20823, i16 20824, i16 20825, i16 20827, i16 20829, i16 20830, i16 20831, i16 20832, i16 20833, i16 20835, i16 20836, i16 20838, i16 20839, i16 20841, i16 20842, i16 20847, i16 20850, i16 20858, i16 20862, i16 20863, i16 20867, i16 20868, i16 20870, i16 20871, i16 20874, i16 20875, i16 20878, i16 20879, i16 20880, i16 20881, i16 20883, i16 20884, i16 20888, i16 20890, i16 20893, i16 20894, i16 20895, i16 20897, i16 20899, i16 20902, i16 20903, i16 20904, i16 20905, i16 20906, i16 20909, i16 20910, i16 20916, i16 20920, i16 20921, i16 20922, i16 20926, i16 20927, i16 20929, i16 20930, i16 20931, i16 20933, i16 20936, i16 20938, i16 20941, i16 20942, i16 20944, i16 20946, i16 20947, i16 20948, i16 20949, i16 20950, i16 20951], [190 x i16] [i16 20952, i16 20953, i16 20954, i16 20956, i16 20958, i16 20959, i16 20962, i16 20963, i16 20965, i16 20966, i16 20967, i16 20968, i16 20969, i16 20970, i16 20972, i16 20974, i16 20977, i16 20978, i16 20980, i16 20983, i16 20990, i16 20996, i16 20997, i16 21001, i16 21003, i16 21004, i16 21007, i16 21008, i16 21011, i16 21012, i16 21013, i16 21020, i16 21022, i16 21023, i16 21025, i16 21026, i16 21027, i16 21029, i16 21030, i16 21031, i16 21034, i16 21036, i16 21039, i16 21041, i16 21042, i16 21044, i16 21045, i16 21052, i16 21054, i16 21060, i16 21061, i16 21062, i16 21063, i16 21064, i16 21065, i16 21067, i16 21070, i16 21071, i16 21074, i16 21075, i16 21077, i16 21079, i16 21080, i16 21081, i16 21082, i16 21083, i16 21085, i16 21087, i16 21088, i16 21090, i16 21091, i16 21092, i16 21094, i16 21096, i16 21099, i16 21100, i16 21101, i16 21102, i16 21104, i16 21105, i16 21107, i16 21108, i16 21109, i16 21110, i16 21111, i16 21112, i16 21113, i16 21114, i16 21115, i16 21116, i16 21118, i16 21120, i16 21123, i16 21124, i16 21125, i16 21126, i16 21127, i16 21129, i16 21130, i16 21131, i16 21132, i16 21133, i16 21134, i16 21135, i16 21137, i16 21138, i16 21140, i16 21141, i16 21142, i16 21143, i16 21144, i16 21145, i16 21146, i16 21148, i16 21156, i16 21157, i16 21158, i16 21159, i16 21166, i16 21167, i16 21168, i16 21172, i16 21173, i16 21174, i16 21175, i16 21176, i16 21177, i16 21178, i16 21179, i16 21180, i16 21181, i16 21184, i16 21185, i16 21186, i16 21188, i16 21189, i16 21190, i16 21192, i16 21194, i16 21196, i16 21197, i16 21198, i16 21199, i16 21201, i16 21203, i16 21204, i16 21205, i16 21207, i16 21209, i16 21210, i16 21211, i16 21212, i16 21213, i16 21214, i16 21216, i16 21217, i16 21218, i16 21219, i16 21221, i16 21222, i16 21223, i16 21224, i16 21225, i16 21226, i16 21227, i16 21228, i16 21229, i16 21230, i16 21231, i16 21233, i16 21234, i16 21235, i16 21236, i16 21237, i16 21238, i16 21239, i16 21240, i16 21243, i16 21244, i16 21245, i16 21249, i16 21250, i16 21251, i16 21252, i16 21255, i16 21257, i16 21258, i16 21259, i16 21260, i16 21262], [190 x i16] [i16 21265, i16 21266, i16 21267, i16 21268, i16 21272, i16 21275, i16 21276, i16 21278, i16 21279, i16 21282, i16 21284, i16 21285, i16 21287, i16 21288, i16 21289, i16 21291, i16 21292, i16 21293, i16 21295, i16 21296, i16 21297, i16 21298, i16 21299, i16 21300, i16 21301, i16 21302, i16 21303, i16 21304, i16 21308, i16 21309, i16 21312, i16 21314, i16 21316, i16 21318, i16 21323, i16 21324, i16 21325, i16 21328, i16 21332, i16 21336, i16 21337, i16 21339, i16 21341, i16 21349, i16 21352, i16 21354, i16 21356, i16 21357, i16 21362, i16 21366, i16 21369, i16 21371, i16 21372, i16 21373, i16 21374, i16 21376, i16 21377, i16 21379, i16 21383, i16 21384, i16 21386, i16 21390, i16 21391, i16 21392, i16 21393, i16 21394, i16 21395, i16 21396, i16 21398, i16 21399, i16 21401, i16 21403, i16 21404, i16 21406, i16 21408, i16 21409, i16 21412, i16 21415, i16 21418, i16 21419, i16 21420, i16 21421, i16 21423, i16 21424, i16 21425, i16 21426, i16 21427, i16 21428, i16 21429, i16 21431, i16 21432, i16 21433, i16 21434, i16 21436, i16 21437, i16 21438, i16 21440, i16 21443, i16 21444, i16 21445, i16 21446, i16 21447, i16 21454, i16 21455, i16 21456, i16 21458, i16 21459, i16 21461, i16 21466, i16 21468, i16 21469, i16 21470, i16 21473, i16 21474, i16 21479, i16 21492, i16 21498, i16 21502, i16 21503, i16 21504, i16 21506, i16 21509, i16 21511, i16 21515, i16 21524, i16 21528, i16 21529, i16 21530, i16 21532, i16 21538, i16 21540, i16 21541, i16 21546, i16 21552, i16 21555, i16 21558, i16 21559, i16 21562, i16 21565, i16 21567, i16 21569, i16 21570, i16 21572, i16 21573, i16 21575, i16 21577, i16 21580, i16 21581, i16 21582, i16 21583, i16 21585, i16 21594, i16 21597, i16 21598, i16 21599, i16 21600, i16 21601, i16 21603, i16 21605, i16 21607, i16 21609, i16 21610, i16 21611, i16 21612, i16 21613, i16 21614, i16 21615, i16 21616, i16 21620, i16 21625, i16 21626, i16 21630, i16 21631, i16 21633, i16 21635, i16 21637, i16 21639, i16 21640, i16 21641, i16 21642, i16 21645, i16 21649, i16 21651, i16 21655, i16 21656, i16 21660, i16 21662, i16 21663, i16 21664, i16 21665], [190 x i16] [i16 21666, i16 21669, i16 21678, i16 21680, i16 21682, i16 21685, i16 21686, i16 21687, i16 21689, i16 21690, i16 21692, i16 21694, i16 21699, i16 21701, i16 21706, i16 21707, i16 21718, i16 21720, i16 21723, i16 21728, i16 21729, i16 21730, i16 21731, i16 21732, i16 21739, i16 21740, i16 21743, i16 21744, i16 21745, i16 21748, i16 21749, i16 21750, i16 21751, i16 21752, i16 21753, i16 21755, i16 21758, i16 21760, i16 21762, i16 21763, i16 21764, i16 21765, i16 21768, i16 21770, i16 21771, i16 21772, i16 21773, i16 21774, i16 21778, i16 21779, i16 21781, i16 21782, i16 21783, i16 21784, i16 21785, i16 21786, i16 21788, i16 21789, i16 21790, i16 21791, i16 21793, i16 21797, i16 21798, i16 21800, i16 21801, i16 21803, i16 21805, i16 21810, i16 21812, i16 21813, i16 21814, i16 21816, i16 21817, i16 21818, i16 21819, i16 21821, i16 21824, i16 21826, i16 21829, i16 21831, i16 21832, i16 21835, i16 21836, i16 21837, i16 21838, i16 21839, i16 21841, i16 21842, i16 21843, i16 21844, i16 21847, i16 21848, i16 21849, i16 21850, i16 21851, i16 21853, i16 21854, i16 21855, i16 21856, i16 21858, i16 21859, i16 21864, i16 21865, i16 21867, i16 21871, i16 21872, i16 21873, i16 21874, i16 21875, i16 21876, i16 21881, i16 21882, i16 21885, i16 21887, i16 21893, i16 21894, i16 21900, i16 21901, i16 21902, i16 21904, i16 21906, i16 21907, i16 21909, i16 21910, i16 21911, i16 21914, i16 21915, i16 21918, i16 21920, i16 21921, i16 21922, i16 21923, i16 21924, i16 21925, i16 21926, i16 21928, i16 21929, i16 21930, i16 21931, i16 21932, i16 21933, i16 21934, i16 21935, i16 21936, i16 21938, i16 21940, i16 21942, i16 21944, i16 21946, i16 21948, i16 21951, i16 21952, i16 21953, i16 21954, i16 21955, i16 21958, i16 21959, i16 21960, i16 21962, i16 21963, i16 21966, i16 21967, i16 21968, i16 21973, i16 21975, i16 21976, i16 21977, i16 21978, i16 21979, i16 21982, i16 21984, i16 21986, i16 21991, i16 21993, i16 21997, i16 21998, i16 22000, i16 22001, i16 22004, i16 22006, i16 22008, i16 22009, i16 22010, i16 22011, i16 22012, i16 22015, i16 22018, i16 22019, i16 22020, i16 22021], [190 x i16] [i16 22022, i16 22023, i16 22026, i16 22027, i16 22029, i16 22032, i16 22033, i16 22034, i16 22035, i16 22036, i16 22037, i16 22038, i16 22039, i16 22041, i16 22042, i16 22044, i16 22045, i16 22048, i16 22049, i16 22050, i16 22053, i16 22054, i16 22056, i16 22057, i16 22058, i16 22059, i16 22062, i16 22063, i16 22064, i16 22067, i16 22069, i16 22071, i16 22072, i16 22074, i16 22076, i16 22077, i16 22078, i16 22080, i16 22081, i16 22082, i16 22083, i16 22084, i16 22085, i16 22086, i16 22087, i16 22088, i16 22089, i16 22090, i16 22091, i16 22095, i16 22096, i16 22097, i16 22098, i16 22099, i16 22101, i16 22102, i16 22106, i16 22107, i16 22109, i16 22110, i16 22111, i16 22112, i16 22113, i16 22115, i16 22117, i16 22118, i16 22119, i16 22125, i16 22126, i16 22127, i16 22128, i16 22130, i16 22131, i16 22132, i16 22133, i16 22135, i16 22136, i16 22137, i16 22138, i16 22141, i16 22142, i16 22143, i16 22144, i16 22145, i16 22146, i16 22147, i16 22148, i16 22151, i16 22152, i16 22153, i16 22154, i16 22155, i16 22156, i16 22157, i16 22160, i16 22161, i16 22162, i16 22164, i16 22165, i16 22166, i16 22167, i16 22168, i16 22169, i16 22170, i16 22171, i16 22172, i16 22173, i16 22174, i16 22175, i16 22176, i16 22177, i16 22178, i16 22180, i16 22181, i16 22182, i16 22183, i16 22184, i16 22185, i16 22186, i16 22187, i16 22188, i16 22189, i16 22190, i16 22192, i16 22193, i16 22194, i16 22195, i16 22196, i16 22197, i16 22198, i16 22200, i16 22201, i16 22202, i16 22203, i16 22205, i16 22206, i16 22207, i16 22208, i16 22209, i16 22210, i16 22211, i16 22212, i16 22213, i16 22214, i16 22215, i16 22216, i16 22217, i16 22219, i16 22220, i16 22221, i16 22222, i16 22223, i16 22224, i16 22225, i16 22226, i16 22227, i16 22229, i16 22230, i16 22232, i16 22233, i16 22236, i16 22243, i16 22245, i16 22246, i16 22247, i16 22248, i16 22249, i16 22250, i16 22252, i16 22254, i16 22255, i16 22258, i16 22259, i16 22262, i16 22263, i16 22264, i16 22267, i16 22268, i16 22272, i16 22273, i16 22274, i16 22277, i16 22279, i16 22283, i16 22284, i16 22285, i16 22286, i16 22287, i16 22288, i16 22289], [190 x i16] [i16 22290, i16 22291, i16 22292, i16 22293, i16 22294, i16 22295, i16 22296, i16 22297, i16 22298, i16 22299, i16 22301, i16 22302, i16 22304, i16 22305, i16 22306, i16 22308, i16 22309, i16 22310, i16 22311, i16 22315, i16 22321, i16 22322, i16 22324, i16 22325, i16 22326, i16 22327, i16 22328, i16 22332, i16 22333, i16 22335, i16 22337, i16 22339, i16 22340, i16 22341, i16 22342, i16 22344, i16 22345, i16 22347, i16 22354, i16 22355, i16 22356, i16 22357, i16 22358, i16 22360, i16 22361, i16 22370, i16 22371, i16 22373, i16 22375, i16 22380, i16 22382, i16 22384, i16 22385, i16 22386, i16 22388, i16 22389, i16 22392, i16 22393, i16 22394, i16 22397, i16 22398, i16 22399, i16 22400, i16 22401, i16 22407, i16 22408, i16 22409, i16 22410, i16 22413, i16 22414, i16 22415, i16 22416, i16 22417, i16 22420, i16 22421, i16 22422, i16 22423, i16 22424, i16 22425, i16 22426, i16 22428, i16 22429, i16 22430, i16 22431, i16 22437, i16 22440, i16 22442, i16 22444, i16 22447, i16 22448, i16 22449, i16 22451, i16 22453, i16 22454, i16 22455, i16 22457, i16 22458, i16 22459, i16 22460, i16 22461, i16 22462, i16 22463, i16 22464, i16 22465, i16 22468, i16 22469, i16 22470, i16 22471, i16 22472, i16 22473, i16 22474, i16 22476, i16 22477, i16 22480, i16 22481, i16 22483, i16 22486, i16 22487, i16 22491, i16 22492, i16 22494, i16 22497, i16 22498, i16 22499, i16 22501, i16 22502, i16 22503, i16 22504, i16 22505, i16 22506, i16 22507, i16 22508, i16 22510, i16 22512, i16 22513, i16 22514, i16 22515, i16 22517, i16 22518, i16 22519, i16 22523, i16 22524, i16 22526, i16 22527, i16 22529, i16 22531, i16 22532, i16 22533, i16 22536, i16 22537, i16 22538, i16 22540, i16 22542, i16 22543, i16 22544, i16 22546, i16 22547, i16 22548, i16 22550, i16 22551, i16 22552, i16 22554, i16 22555, i16 22556, i16 22557, i16 22559, i16 22562, i16 22563, i16 22565, i16 22566, i16 22567, i16 22568, i16 22569, i16 22571, i16 22572, i16 22573, i16 22574, i16 22575, i16 22577, i16 22578, i16 22579, i16 22580, i16 22582, i16 22583, i16 22584, i16 22585, i16 22586, i16 22587, i16 22588, i16 22589], [190 x i16] [i16 22590, i16 22591, i16 22592, i16 22593, i16 22594, i16 22595, i16 22597, i16 22598, i16 22599, i16 22600, i16 22601, i16 22602, i16 22603, i16 22606, i16 22607, i16 22608, i16 22610, i16 22611, i16 22613, i16 22614, i16 22615, i16 22617, i16 22618, i16 22619, i16 22620, i16 22621, i16 22623, i16 22624, i16 22625, i16 22626, i16 22627, i16 22628, i16 22630, i16 22631, i16 22632, i16 22633, i16 22634, i16 22637, i16 22638, i16 22639, i16 22640, i16 22641, i16 22642, i16 22643, i16 22644, i16 22645, i16 22646, i16 22647, i16 22648, i16 22649, i16 22650, i16 22651, i16 22652, i16 22653, i16 22655, i16 22658, i16 22660, i16 22662, i16 22663, i16 22664, i16 22666, i16 22667, i16 22668, i16 22669, i16 22670, i16 22671, i16 22672, i16 22673, i16 22676, i16 22677, i16 22678, i16 22679, i16 22680, i16 22683, i16 22684, i16 22685, i16 22688, i16 22689, i16 22690, i16 22691, i16 22692, i16 22693, i16 22694, i16 22695, i16 22698, i16 22699, i16 22700, i16 22701, i16 22702, i16 22703, i16 22704, i16 22705, i16 22706, i16 22707, i16 22708, i16 22709, i16 22710, i16 22711, i16 22712, i16 22713, i16 22714, i16 22715, i16 22717, i16 22718, i16 22719, i16 22720, i16 22722, i16 22723, i16 22724, i16 22726, i16 22727, i16 22728, i16 22729, i16 22730, i16 22731, i16 22732, i16 22733, i16 22734, i16 22735, i16 22736, i16 22738, i16 22739, i16 22740, i16 22742, i16 22743, i16 22744, i16 22745, i16 22746, i16 22747, i16 22748, i16 22749, i16 22750, i16 22751, i16 22752, i16 22753, i16 22754, i16 22755, i16 22757, i16 22758, i16 22759, i16 22760, i16 22761, i16 22762, i16 22765, i16 22767, i16 22769, i16 22770, i16 22772, i16 22773, i16 22775, i16 22776, i16 22778, i16 22779, i16 22780, i16 22781, i16 22782, i16 22783, i16 22784, i16 22785, i16 22787, i16 22789, i16 22790, i16 22792, i16 22793, i16 22794, i16 22795, i16 22796, i16 22798, i16 22800, i16 22801, i16 22802, i16 22803, i16 22807, i16 22808, i16 22811, i16 22813, i16 22814, i16 22816, i16 22817, i16 22818, i16 22819, i16 22822, i16 22824, i16 22828, i16 22832, i16 22834, i16 22835, i16 22837, i16 22838, i16 22843], [190 x i16] [i16 22845, i16 22846, i16 22847, i16 22848, i16 22851, i16 22853, i16 22854, i16 22858, i16 22860, i16 22861, i16 22864, i16 22866, i16 22867, i16 22873, i16 22875, i16 22876, i16 22877, i16 22878, i16 22879, i16 22881, i16 22883, i16 22884, i16 22886, i16 22887, i16 22888, i16 22889, i16 22890, i16 22891, i16 22892, i16 22893, i16 22894, i16 22895, i16 22896, i16 22897, i16 22898, i16 22901, i16 22903, i16 22906, i16 22907, i16 22908, i16 22910, i16 22911, i16 22912, i16 22917, i16 22921, i16 22923, i16 22924, i16 22926, i16 22927, i16 22928, i16 22929, i16 22932, i16 22933, i16 22936, i16 22938, i16 22939, i16 22940, i16 22941, i16 22943, i16 22944, i16 22945, i16 22946, i16 22950, i16 22951, i16 22956, i16 22957, i16 22960, i16 22961, i16 22963, i16 22964, i16 22965, i16 22966, i16 22967, i16 22968, i16 22970, i16 22972, i16 22973, i16 22975, i16 22976, i16 22977, i16 22978, i16 22979, i16 22980, i16 22981, i16 22983, i16 22984, i16 22985, i16 22988, i16 22989, i16 22990, i16 22991, i16 22997, i16 22998, i16 23001, i16 23003, i16 23006, i16 23007, i16 23008, i16 23009, i16 23010, i16 23012, i16 23014, i16 23015, i16 23017, i16 23018, i16 23019, i16 23021, i16 23022, i16 23023, i16 23024, i16 23025, i16 23026, i16 23027, i16 23028, i16 23029, i16 23030, i16 23031, i16 23032, i16 23034, i16 23036, i16 23037, i16 23038, i16 23040, i16 23042, i16 23050, i16 23051, i16 23053, i16 23054, i16 23055, i16 23056, i16 23058, i16 23060, i16 23061, i16 23062, i16 23063, i16 23065, i16 23066, i16 23067, i16 23069, i16 23070, i16 23073, i16 23074, i16 23076, i16 23078, i16 23079, i16 23080, i16 23082, i16 23083, i16 23084, i16 23085, i16 23086, i16 23087, i16 23088, i16 23091, i16 23093, i16 23095, i16 23096, i16 23097, i16 23098, i16 23099, i16 23101, i16 23102, i16 23103, i16 23105, i16 23106, i16 23107, i16 23108, i16 23109, i16 23111, i16 23112, i16 23115, i16 23116, i16 23117, i16 23118, i16 23119, i16 23120, i16 23121, i16 23122, i16 23123, i16 23124, i16 23126, i16 23127, i16 23128, i16 23129, i16 23131, i16 23132, i16 23133, i16 23134, i16 23135, i16 23136], [190 x i16] [i16 23137, i16 23139, i16 23140, i16 23141, i16 23142, i16 23144, i16 23145, i16 23147, i16 23148, i16 23149, i16 23150, i16 23151, i16 23152, i16 23153, i16 23154, i16 23155, i16 23160, i16 23161, i16 23163, i16 23164, i16 23165, i16 23166, i16 23168, i16 23169, i16 23170, i16 23171, i16 23172, i16 23173, i16 23174, i16 23175, i16 23176, i16 23177, i16 23178, i16 23179, i16 23180, i16 23181, i16 23182, i16 23183, i16 23184, i16 23185, i16 23187, i16 23188, i16 23189, i16 23190, i16 23191, i16 23192, i16 23193, i16 23196, i16 23197, i16 23198, i16 23199, i16 23200, i16 23201, i16 23202, i16 23203, i16 23204, i16 23205, i16 23206, i16 23207, i16 23208, i16 23209, i16 23211, i16 23212, i16 23213, i16 23214, i16 23215, i16 23216, i16 23217, i16 23220, i16 23222, i16 23223, i16 23225, i16 23226, i16 23227, i16 23228, i16 23229, i16 23231, i16 23232, i16 23235, i16 23236, i16 23237, i16 23238, i16 23239, i16 23240, i16 23242, i16 23243, i16 23245, i16 23246, i16 23247, i16 23248, i16 23249, i16 23251, i16 23253, i16 23255, i16 23257, i16 23258, i16 23259, i16 23261, i16 23262, i16 23263, i16 23266, i16 23268, i16 23269, i16 23271, i16 23272, i16 23274, i16 23276, i16 23277, i16 23278, i16 23279, i16 23280, i16 23282, i16 23283, i16 23284, i16 23285, i16 23286, i16 23287, i16 23288, i16 23289, i16 23290, i16 23291, i16 23292, i16 23293, i16 23294, i16 23295, i16 23296, i16 23297, i16 23298, i16 23299, i16 23300, i16 23301, i16 23302, i16 23303, i16 23304, i16 23306, i16 23307, i16 23308, i16 23309, i16 23310, i16 23311, i16 23312, i16 23313, i16 23314, i16 23315, i16 23316, i16 23317, i16 23320, i16 23321, i16 23322, i16 23323, i16 23324, i16 23325, i16 23326, i16 23327, i16 23328, i16 23329, i16 23330, i16 23331, i16 23332, i16 23333, i16 23334, i16 23335, i16 23336, i16 23337, i16 23338, i16 23339, i16 23340, i16 23341, i16 23342, i16 23343, i16 23344, i16 23345, i16 23347, i16 23349, i16 23350, i16 23352, i16 23353, i16 23354, i16 23355, i16 23356, i16 23357, i16 23358, i16 23359, i16 23361, i16 23362, i16 23363, i16 23364, i16 23365, i16 23366, i16 23367], [190 x i16] [i16 23368, i16 23369, i16 23370, i16 23371, i16 23372, i16 23373, i16 23374, i16 23375, i16 23378, i16 23382, i16 23390, i16 23392, i16 23393, i16 23399, i16 23400, i16 23403, i16 23405, i16 23406, i16 23407, i16 23410, i16 23412, i16 23414, i16 23415, i16 23416, i16 23417, i16 23419, i16 23420, i16 23422, i16 23423, i16 23426, i16 23430, i16 23434, i16 23437, i16 23438, i16 23440, i16 23441, i16 23442, i16 23444, i16 23446, i16 23455, i16 23463, i16 23464, i16 23465, i16 23468, i16 23469, i16 23470, i16 23471, i16 23473, i16 23474, i16 23479, i16 23482, i16 23483, i16 23484, i16 23488, i16 23489, i16 23491, i16 23496, i16 23497, i16 23498, i16 23499, i16 23501, i16 23502, i16 23503, i16 23505, i16 23508, i16 23509, i16 23510, i16 23511, i16 23512, i16 23513, i16 23514, i16 23515, i16 23516, i16 23520, i16 23522, i16 23523, i16 23526, i16 23527, i16 23529, i16 23530, i16 23531, i16 23532, i16 23533, i16 23535, i16 23537, i16 23538, i16 23539, i16 23540, i16 23541, i16 23542, i16 23543, i16 23549, i16 23550, i16 23552, i16 23554, i16 23555, i16 23557, i16 23559, i16 23560, i16 23563, i16 23564, i16 23565, i16 23566, i16 23568, i16 23570, i16 23571, i16 23575, i16 23577, i16 23579, i16 23582, i16 23583, i16 23584, i16 23585, i16 23587, i16 23590, i16 23592, i16 23593, i16 23594, i16 23595, i16 23597, i16 23598, i16 23599, i16 23600, i16 23602, i16 23603, i16 23605, i16 23606, i16 23607, i16 23619, i16 23620, i16 23622, i16 23623, i16 23628, i16 23629, i16 23634, i16 23635, i16 23636, i16 23638, i16 23639, i16 23640, i16 23642, i16 23643, i16 23644, i16 23645, i16 23647, i16 23650, i16 23652, i16 23655, i16 23656, i16 23657, i16 23658, i16 23659, i16 23660, i16 23661, i16 23664, i16 23666, i16 23667, i16 23668, i16 23669, i16 23670, i16 23671, i16 23672, i16 23675, i16 23676, i16 23677, i16 23678, i16 23680, i16 23683, i16 23684, i16 23685, i16 23686, i16 23687, i16 23689, i16 23690, i16 23691, i16 23694, i16 23695, i16 23698, i16 23699, i16 23701, i16 23709, i16 23710, i16 23711, i16 23712, i16 23713, i16 23716, i16 23717, i16 23718, i16 23719, i16 23720], [190 x i16] [i16 23722, i16 23726, i16 23727, i16 23728, i16 23730, i16 23732, i16 23734, i16 23737, i16 23738, i16 23739, i16 23740, i16 23742, i16 23744, i16 23746, i16 23747, i16 23749, i16 23750, i16 23751, i16 23752, i16 23753, i16 23754, i16 23756, i16 23757, i16 23758, i16 23759, i16 23760, i16 23761, i16 23763, i16 23764, i16 23765, i16 23766, i16 23767, i16 23768, i16 23770, i16 23771, i16 23772, i16 23773, i16 23774, i16 23775, i16 23776, i16 23778, i16 23779, i16 23783, i16 23785, i16 23787, i16 23788, i16 23790, i16 23791, i16 23793, i16 23794, i16 23795, i16 23796, i16 23797, i16 23798, i16 23799, i16 23800, i16 23801, i16 23802, i16 23804, i16 23805, i16 23806, i16 23807, i16 23808, i16 23809, i16 23812, i16 23813, i16 23816, i16 23817, i16 23818, i16 23819, i16 23820, i16 23821, i16 23823, i16 23824, i16 23825, i16 23826, i16 23827, i16 23829, i16 23831, i16 23832, i16 23833, i16 23834, i16 23836, i16 23837, i16 23839, i16 23840, i16 23841, i16 23842, i16 23843, i16 23845, i16 23848, i16 23850, i16 23851, i16 23852, i16 23855, i16 23856, i16 23857, i16 23858, i16 23859, i16 23861, i16 23862, i16 23863, i16 23864, i16 23865, i16 23866, i16 23867, i16 23868, i16 23871, i16 23872, i16 23873, i16 23874, i16 23875, i16 23876, i16 23877, i16 23878, i16 23880, i16 23881, i16 23885, i16 23886, i16 23887, i16 23888, i16 23889, i16 23890, i16 23891, i16 23892, i16 23893, i16 23894, i16 23895, i16 23897, i16 23898, i16 23900, i16 23902, i16 23903, i16 23904, i16 23905, i16 23906, i16 23907, i16 23908, i16 23909, i16 23910, i16 23911, i16 23912, i16 23914, i16 23917, i16 23918, i16 23920, i16 23921, i16 23922, i16 23923, i16 23925, i16 23926, i16 23927, i16 23928, i16 23929, i16 23930, i16 23931, i16 23932, i16 23933, i16 23934, i16 23935, i16 23936, i16 23937, i16 23939, i16 23940, i16 23941, i16 23942, i16 23943, i16 23944, i16 23945, i16 23946, i16 23947, i16 23948, i16 23949, i16 23950, i16 23951, i16 23952, i16 23953, i16 23954, i16 23955, i16 23956, i16 23957, i16 23958, i16 23959, i16 23960, i16 23962, i16 23963, i16 23964, i16 23966, i16 23967, i16 23968], [190 x i16] [i16 23969, i16 23970, i16 23971, i16 23972, i16 23973, i16 23974, i16 23975, i16 23976, i16 23977, i16 23978, i16 23979, i16 23980, i16 23981, i16 23982, i16 23983, i16 23984, i16 23985, i16 23986, i16 23987, i16 23988, i16 23989, i16 23990, i16 23992, i16 23993, i16 23994, i16 23995, i16 23996, i16 23997, i16 23998, i16 23999, i16 24000, i16 24001, i16 24002, i16 24003, i16 24004, i16 24006, i16 24007, i16 24008, i16 24009, i16 24010, i16 24011, i16 24012, i16 24014, i16 24015, i16 24016, i16 24017, i16 24018, i16 24019, i16 24020, i16 24021, i16 24022, i16 24023, i16 24024, i16 24025, i16 24026, i16 24028, i16 24031, i16 24032, i16 24035, i16 24036, i16 24042, i16 24044, i16 24045, i16 24048, i16 24053, i16 24054, i16 24056, i16 24057, i16 24058, i16 24059, i16 24060, i16 24063, i16 24064, i16 24068, i16 24071, i16 24073, i16 24074, i16 24075, i16 24077, i16 24078, i16 24082, i16 24083, i16 24087, i16 24094, i16 24095, i16 24096, i16 24097, i16 24098, i16 24099, i16 24100, i16 24101, i16 24104, i16 24105, i16 24106, i16 24107, i16 24108, i16 24111, i16 24112, i16 24114, i16 24115, i16 24116, i16 24117, i16 24118, i16 24121, i16 24122, i16 24126, i16 24127, i16 24128, i16 24129, i16 24131, i16 24134, i16 24135, i16 24136, i16 24137, i16 24138, i16 24139, i16 24141, i16 24142, i16 24143, i16 24144, i16 24145, i16 24146, i16 24147, i16 24150, i16 24151, i16 24152, i16 24153, i16 24154, i16 24156, i16 24157, i16 24159, i16 24160, i16 24163, i16 24164, i16 24165, i16 24166, i16 24167, i16 24168, i16 24169, i16 24170, i16 24171, i16 24172, i16 24173, i16 24174, i16 24175, i16 24176, i16 24177, i16 24181, i16 24183, i16 24185, i16 24190, i16 24193, i16 24194, i16 24195, i16 24197, i16 24200, i16 24201, i16 24204, i16 24205, i16 24206, i16 24210, i16 24216, i16 24219, i16 24221, i16 24225, i16 24226, i16 24227, i16 24228, i16 24232, i16 24233, i16 24234, i16 24235, i16 24236, i16 24238, i16 24239, i16 24240, i16 24241, i16 24242, i16 24244, i16 24250, i16 24251, i16 24252, i16 24253, i16 24255, i16 24256, i16 24257, i16 24258, i16 24259, i16 24260, i16 24261], [190 x i16] [i16 24262, i16 24263, i16 24264, i16 24267, i16 24268, i16 24269, i16 24270, i16 24271, i16 24272, i16 24276, i16 24277, i16 24279, i16 24280, i16 24281, i16 24282, i16 24284, i16 24285, i16 24286, i16 24287, i16 24288, i16 24289, i16 24290, i16 24291, i16 24292, i16 24293, i16 24294, i16 24295, i16 24297, i16 24299, i16 24300, i16 24301, i16 24302, i16 24303, i16 24304, i16 24305, i16 24306, i16 24307, i16 24309, i16 24312, i16 24313, i16 24315, i16 24316, i16 24317, i16 24325, i16 24326, i16 24327, i16 24329, i16 24332, i16 24333, i16 24334, i16 24336, i16 24338, i16 24340, i16 24342, i16 24345, i16 24346, i16 24348, i16 24349, i16 24350, i16 24353, i16 24354, i16 24355, i16 24356, i16 24360, i16 24363, i16 24364, i16 24366, i16 24368, i16 24370, i16 24371, i16 24372, i16 24373, i16 24374, i16 24375, i16 24376, i16 24379, i16 24381, i16 24382, i16 24383, i16 24385, i16 24386, i16 24387, i16 24388, i16 24389, i16 24390, i16 24391, i16 24392, i16 24393, i16 24394, i16 24395, i16 24396, i16 24397, i16 24398, i16 24399, i16 24401, i16 24404, i16 24409, i16 24410, i16 24411, i16 24412, i16 24414, i16 24415, i16 24416, i16 24419, i16 24421, i16 24423, i16 24424, i16 24427, i16 24430, i16 24431, i16 24434, i16 24436, i16 24437, i16 24438, i16 24440, i16 24442, i16 24445, i16 24446, i16 24447, i16 24451, i16 24454, i16 24461, i16 24462, i16 24463, i16 24465, i16 24467, i16 24468, i16 24470, i16 24474, i16 24475, i16 24477, i16 24478, i16 24479, i16 24480, i16 24482, i16 24483, i16 24484, i16 24485, i16 24486, i16 24487, i16 24489, i16 24491, i16 24492, i16 24495, i16 24496, i16 24497, i16 24498, i16 24499, i16 24500, i16 24502, i16 24504, i16 24505, i16 24506, i16 24507, i16 24510, i16 24511, i16 24512, i16 24513, i16 24514, i16 24519, i16 24520, i16 24522, i16 24523, i16 24526, i16 24531, i16 24532, i16 24533, i16 24538, i16 24539, i16 24540, i16 24542, i16 24543, i16 24546, i16 24547, i16 24549, i16 24550, i16 24552, i16 24553, i16 24556, i16 24559, i16 24560, i16 24562, i16 24563, i16 24564, i16 24566, i16 24567, i16 24569, i16 24570, i16 24572, i16 24583], [190 x i16] [i16 24584, i16 24585, i16 24587, i16 24588, i16 24592, i16 24593, i16 24595, i16 24599, i16 24600, i16 24602, i16 24606, i16 24607, i16 24610, i16 24611, i16 24612, i16 24620, i16 24621, i16 24622, i16 24624, i16 24625, i16 24626, i16 24627, i16 24628, i16 24630, i16 24631, i16 24632, i16 24633, i16 24634, i16 24637, i16 24638, i16 24640, i16 24644, i16 24645, i16 24646, i16 24647, i16 24648, i16 24649, i16 24650, i16 24652, i16 24654, i16 24655, i16 24657, i16 24659, i16 24660, i16 24662, i16 24663, i16 24664, i16 24667, i16 24668, i16 24670, i16 24671, i16 24672, i16 24673, i16 24677, i16 24678, i16 24686, i16 24689, i16 24690, i16 24692, i16 24693, i16 24695, i16 24702, i16 24704, i16 24705, i16 24706, i16 24709, i16 24710, i16 24711, i16 24712, i16 24714, i16 24715, i16 24718, i16 24719, i16 24720, i16 24721, i16 24723, i16 24725, i16 24727, i16 24728, i16 24729, i16 24732, i16 24734, i16 24737, i16 24738, i16 24740, i16 24741, i16 24743, i16 24745, i16 24746, i16 24750, i16 24752, i16 24755, i16 24757, i16 24758, i16 24759, i16 24761, i16 24762, i16 24765, i16 24766, i16 24767, i16 24768, i16 24769, i16 24770, i16 24771, i16 24772, i16 24775, i16 24776, i16 24777, i16 24780, i16 24781, i16 24782, i16 24783, i16 24784, i16 24786, i16 24787, i16 24788, i16 24790, i16 24791, i16 24793, i16 24795, i16 24798, i16 24801, i16 24802, i16 24803, i16 24804, i16 24805, i16 24810, i16 24817, i16 24818, i16 24821, i16 24823, i16 24824, i16 24827, i16 24828, i16 24829, i16 24830, i16 24831, i16 24834, i16 24835, i16 24836, i16 24837, i16 24839, i16 24842, i16 24843, i16 24844, i16 24848, i16 24849, i16 24850, i16 24851, i16 24852, i16 24854, i16 24855, i16 24856, i16 24857, i16 24859, i16 24860, i16 24861, i16 24862, i16 24865, i16 24866, i16 24869, i16 24872, i16 24873, i16 24874, i16 24876, i16 24877, i16 24878, i16 24879, i16 24880, i16 24881, i16 24882, i16 24883, i16 24884, i16 24885, i16 24886, i16 24887, i16 24888, i16 24889, i16 24890, i16 24891, i16 24892, i16 24893, i16 24894, i16 24896, i16 24897, i16 24898, i16 24899, i16 24900, i16 24901, i16 24902], [190 x i16] [i16 24903, i16 24905, i16 24907, i16 24909, i16 24911, i16 24912, i16 24914, i16 24915, i16 24916, i16 24918, i16 24919, i16 24920, i16 24921, i16 24922, i16 24923, i16 24924, i16 24926, i16 24927, i16 24928, i16 24929, i16 24931, i16 24932, i16 24933, i16 24934, i16 24937, i16 24938, i16 24939, i16 24940, i16 24941, i16 24942, i16 24943, i16 24945, i16 24946, i16 24947, i16 24948, i16 24950, i16 24952, i16 24953, i16 24954, i16 24955, i16 24956, i16 24957, i16 24958, i16 24959, i16 24960, i16 24961, i16 24962, i16 24963, i16 24964, i16 24965, i16 24966, i16 24967, i16 24968, i16 24969, i16 24970, i16 24972, i16 24973, i16 24975, i16 24976, i16 24977, i16 24978, i16 24979, i16 24981, i16 24982, i16 24983, i16 24984, i16 24985, i16 24986, i16 24987, i16 24988, i16 24990, i16 24991, i16 24992, i16 24993, i16 24994, i16 24995, i16 24996, i16 24997, i16 24998, i16 25002, i16 25003, i16 25005, i16 25006, i16 25007, i16 25008, i16 25009, i16 25010, i16 25011, i16 25012, i16 25013, i16 25014, i16 25016, i16 25017, i16 25018, i16 25019, i16 25020, i16 25021, i16 25023, i16 25024, i16 25025, i16 25027, i16 25028, i16 25029, i16 25030, i16 25031, i16 25033, i16 25036, i16 25037, i16 25038, i16 25039, i16 25040, i16 25043, i16 25045, i16 25046, i16 25047, i16 25048, i16 25049, i16 25050, i16 25051, i16 25052, i16 25053, i16 25054, i16 25055, i16 25056, i16 25057, i16 25058, i16 25059, i16 25060, i16 25061, i16 25063, i16 25064, i16 25065, i16 25066, i16 25067, i16 25068, i16 25069, i16 25070, i16 25071, i16 25072, i16 25073, i16 25074, i16 25075, i16 25076, i16 25078, i16 25079, i16 25080, i16 25081, i16 25082, i16 25083, i16 25084, i16 25085, i16 25086, i16 25088, i16 25089, i16 25090, i16 25091, i16 25092, i16 25093, i16 25095, i16 25097, i16 25107, i16 25108, i16 25113, i16 25116, i16 25117, i16 25118, i16 25120, i16 25123, i16 25126, i16 25127, i16 25128, i16 25129, i16 25131, i16 25133, i16 25135, i16 25136, i16 25137, i16 25138, i16 25141, i16 25142, i16 25144, i16 25145, i16 25146, i16 25147, i16 25148, i16 25154, i16 25156, i16 25157, i16 25158, i16 25162], [190 x i16] [i16 25167, i16 25168, i16 25173, i16 25174, i16 25175, i16 25177, i16 25178, i16 25180, i16 25181, i16 25182, i16 25183, i16 25184, i16 25185, i16 25186, i16 25188, i16 25189, i16 25192, i16 25201, i16 25202, i16 25204, i16 25205, i16 25207, i16 25208, i16 25210, i16 25211, i16 25213, i16 25217, i16 25218, i16 25219, i16 25221, i16 25222, i16 25223, i16 25224, i16 25227, i16 25228, i16 25229, i16 25230, i16 25231, i16 25232, i16 25236, i16 25241, i16 25244, i16 25245, i16 25246, i16 25251, i16 25254, i16 25255, i16 25257, i16 25258, i16 25261, i16 25262, i16 25263, i16 25264, i16 25266, i16 25267, i16 25268, i16 25270, i16 25271, i16 25272, i16 25274, i16 25278, i16 25280, i16 25281, i16 25283, i16 25291, i16 25295, i16 25297, i16 25301, i16 25309, i16 25310, i16 25312, i16 25313, i16 25316, i16 25322, i16 25323, i16 25328, i16 25330, i16 25333, i16 25336, i16 25337, i16 25338, i16 25339, i16 25344, i16 25347, i16 25348, i16 25349, i16 25350, i16 25354, i16 25355, i16 25356, i16 25357, i16 25359, i16 25360, i16 25362, i16 25363, i16 25364, i16 25365, i16 25367, i16 25368, i16 25369, i16 25372, i16 25382, i16 25383, i16 25385, i16 25388, i16 25389, i16 25390, i16 25392, i16 25393, i16 25395, i16 25396, i16 25397, i16 25398, i16 25399, i16 25400, i16 25403, i16 25404, i16 25406, i16 25407, i16 25408, i16 25409, i16 25412, i16 25415, i16 25416, i16 25418, i16 25425, i16 25426, i16 25427, i16 25428, i16 25430, i16 25431, i16 25432, i16 25433, i16 25434, i16 25435, i16 25436, i16 25437, i16 25440, i16 25444, i16 25445, i16 25446, i16 25448, i16 25450, i16 25451, i16 25452, i16 25455, i16 25456, i16 25458, i16 25459, i16 25460, i16 25461, i16 25464, i16 25465, i16 25468, i16 25469, i16 25470, i16 25471, i16 25473, i16 25475, i16 25476, i16 25477, i16 25478, i16 25483, i16 25485, i16 25489, i16 25491, i16 25492, i16 25493, i16 25495, i16 25497, i16 25498, i16 25499, i16 25500, i16 25501, i16 25502, i16 25503, i16 25505, i16 25508, i16 25510, i16 25515, i16 25519, i16 25521, i16 25522, i16 25525, i16 25526, i16 25529, i16 25531, i16 25533, i16 25535, i16 25536], [190 x i16] [i16 25537, i16 25538, i16 25539, i16 25541, i16 25543, i16 25544, i16 25546, i16 25547, i16 25548, i16 25553, i16 25555, i16 25556, i16 25557, i16 25559, i16 25560, i16 25561, i16 25562, i16 25563, i16 25564, i16 25565, i16 25567, i16 25570, i16 25572, i16 25573, i16 25574, i16 25575, i16 25576, i16 25579, i16 25580, i16 25582, i16 25583, i16 25584, i16 25585, i16 25587, i16 25589, i16 25591, i16 25593, i16 25594, i16 25595, i16 25596, i16 25598, i16 25603, i16 25604, i16 25606, i16 25607, i16 25608, i16 25609, i16 25610, i16 25613, i16 25614, i16 25617, i16 25618, i16 25621, i16 25622, i16 25623, i16 25624, i16 25625, i16 25626, i16 25629, i16 25631, i16 25634, i16 25635, i16 25636, i16 25637, i16 25639, i16 25640, i16 25641, i16 25643, i16 25646, i16 25647, i16 25648, i16 25649, i16 25650, i16 25651, i16 25653, i16 25654, i16 25655, i16 25656, i16 25657, i16 25659, i16 25660, i16 25662, i16 25664, i16 25666, i16 25667, i16 25673, i16 25675, i16 25676, i16 25677, i16 25678, i16 25679, i16 25680, i16 25681, i16 25683, i16 25685, i16 25686, i16 25687, i16 25689, i16 25690, i16 25691, i16 25692, i16 25693, i16 25695, i16 25696, i16 25697, i16 25698, i16 25699, i16 25700, i16 25701, i16 25702, i16 25704, i16 25706, i16 25707, i16 25708, i16 25710, i16 25711, i16 25712, i16 25713, i16 25714, i16 25715, i16 25716, i16 25717, i16 25718, i16 25719, i16 25723, i16 25724, i16 25725, i16 25726, i16 25727, i16 25728, i16 25729, i16 25731, i16 25734, i16 25736, i16 25737, i16 25738, i16 25739, i16 25740, i16 25741, i16 25742, i16 25743, i16 25744, i16 25747, i16 25748, i16 25751, i16 25752, i16 25754, i16 25755, i16 25756, i16 25757, i16 25759, i16 25760, i16 25761, i16 25762, i16 25763, i16 25765, i16 25766, i16 25767, i16 25768, i16 25770, i16 25771, i16 25775, i16 25777, i16 25778, i16 25779, i16 25780, i16 25782, i16 25785, i16 25787, i16 25789, i16 25790, i16 25791, i16 25793, i16 25795, i16 25796, i16 25798, i16 25799, i16 25800, i16 25801, i16 25802, i16 25803, i16 25804, i16 25807, i16 25809, i16 25811, i16 25812, i16 25813, i16 25814, i16 25817, i16 25818], [190 x i16] [i16 25819, i16 25820, i16 25821, i16 25823, i16 25824, i16 25825, i16 25827, i16 25829, i16 25831, i16 25832, i16 25833, i16 25834, i16 25835, i16 25836, i16 25837, i16 25838, i16 25839, i16 25840, i16 25841, i16 25842, i16 25843, i16 25844, i16 25845, i16 25846, i16 25847, i16 25848, i16 25849, i16 25850, i16 25851, i16 25852, i16 25853, i16 25854, i16 25855, i16 25857, i16 25858, i16 25859, i16 25860, i16 25861, i16 25862, i16 25863, i16 25864, i16 25866, i16 25867, i16 25868, i16 25869, i16 25870, i16 25871, i16 25872, i16 25873, i16 25875, i16 25876, i16 25877, i16 25878, i16 25879, i16 25881, i16 25882, i16 25883, i16 25884, i16 25885, i16 25886, i16 25887, i16 25888, i16 25889, i16 25890, i16 25891, i16 25892, i16 25894, i16 25895, i16 25896, i16 25897, i16 25898, i16 25900, i16 25901, i16 25904, i16 25905, i16 25906, i16 25907, i16 25911, i16 25914, i16 25916, i16 25917, i16 25920, i16 25921, i16 25922, i16 25923, i16 25924, i16 25926, i16 25927, i16 25930, i16 25931, i16 25933, i16 25934, i16 25936, i16 25938, i16 25939, i16 25940, i16 25943, i16 25944, i16 25946, i16 25948, i16 25951, i16 25952, i16 25953, i16 25956, i16 25957, i16 25959, i16 25960, i16 25961, i16 25962, i16 25965, i16 25966, i16 25967, i16 25969, i16 25971, i16 25973, i16 25974, i16 25976, i16 25977, i16 25978, i16 25979, i16 25980, i16 25981, i16 25982, i16 25983, i16 25984, i16 25985, i16 25986, i16 25987, i16 25988, i16 25989, i16 25990, i16 25992, i16 25993, i16 25994, i16 25997, i16 25998, i16 25999, i16 26002, i16 26004, i16 26005, i16 26006, i16 26008, i16 26010, i16 26013, i16 26014, i16 26016, i16 26018, i16 26019, i16 26022, i16 26024, i16 26026, i16 26028, i16 26030, i16 26033, i16 26034, i16 26035, i16 26036, i16 26037, i16 26038, i16 26039, i16 26040, i16 26042, i16 26043, i16 26046, i16 26047, i16 26048, i16 26050, i16 26055, i16 26056, i16 26057, i16 26058, i16 26061, i16 26064, i16 26065, i16 26067, i16 26068, i16 26069, i16 26072, i16 26073, i16 26074, i16 26075, i16 26076, i16 26077, i16 26078, i16 26079, i16 26081, i16 26083, i16 26084, i16 26090, i16 26091], [190 x i16] [i16 26098, i16 26099, i16 26100, i16 26101, i16 26104, i16 26105, i16 26107, i16 26108, i16 26109, i16 26110, i16 26111, i16 26113, i16 26116, i16 26117, i16 26119, i16 26120, i16 26121, i16 26123, i16 26125, i16 26128, i16 26129, i16 26130, i16 26134, i16 26135, i16 26136, i16 26138, i16 26139, i16 26140, i16 26142, i16 26145, i16 26146, i16 26147, i16 26148, i16 26150, i16 26153, i16 26154, i16 26155, i16 26156, i16 26158, i16 26160, i16 26162, i16 26163, i16 26167, i16 26168, i16 26169, i16 26170, i16 26171, i16 26173, i16 26175, i16 26176, i16 26178, i16 26180, i16 26181, i16 26182, i16 26183, i16 26184, i16 26185, i16 26186, i16 26189, i16 26190, i16 26192, i16 26193, i16 26200, i16 26201, i16 26203, i16 26204, i16 26205, i16 26206, i16 26208, i16 26210, i16 26211, i16 26213, i16 26215, i16 26217, i16 26218, i16 26219, i16 26220, i16 26221, i16 26225, i16 26226, i16 26227, i16 26229, i16 26232, i16 26233, i16 26235, i16 26236, i16 26237, i16 26239, i16 26240, i16 26241, i16 26243, i16 26245, i16 26246, i16 26248, i16 26249, i16 26250, i16 26251, i16 26253, i16 26254, i16 26255, i16 26256, i16 26258, i16 26259, i16 26260, i16 26261, i16 26264, i16 26265, i16 26266, i16 26267, i16 26268, i16 26270, i16 26271, i16 26272, i16 26273, i16 26274, i16 26275, i16 26276, i16 26277, i16 26278, i16 26281, i16 26282, i16 26283, i16 26284, i16 26285, i16 26287, i16 26288, i16 26289, i16 26290, i16 26291, i16 26293, i16 26294, i16 26295, i16 26296, i16 26298, i16 26299, i16 26300, i16 26301, i16 26303, i16 26304, i16 26305, i16 26306, i16 26307, i16 26308, i16 26309, i16 26310, i16 26311, i16 26312, i16 26313, i16 26314, i16 26315, i16 26316, i16 26317, i16 26318, i16 26319, i16 26320, i16 26321, i16 26322, i16 26323, i16 26324, i16 26325, i16 26326, i16 26327, i16 26328, i16 26330, i16 26334, i16 26335, i16 26336, i16 26337, i16 26338, i16 26339, i16 26340, i16 26341, i16 26343, i16 26344, i16 26346, i16 26347, i16 26348, i16 26349, i16 26350, i16 26351, i16 26353, i16 26357, i16 26358, i16 26360, i16 26362, i16 26363, i16 26365, i16 26369, i16 26370, i16 26371], [190 x i16] [i16 26372, i16 26373, i16 26374, i16 26375, i16 26380, i16 26382, i16 26383, i16 26385, i16 26386, i16 26387, i16 26390, i16 26392, i16 26393, i16 26394, i16 26396, i16 26398, i16 26400, i16 26401, i16 26402, i16 26403, i16 26404, i16 26405, i16 26407, i16 26409, i16 26414, i16 26416, i16 26418, i16 26419, i16 26422, i16 26423, i16 26424, i16 26425, i16 26427, i16 26428, i16 26430, i16 26431, i16 26433, i16 26436, i16 26437, i16 26439, i16 26442, i16 26443, i16 26445, i16 26450, i16 26452, i16 26453, i16 26455, i16 26456, i16 26457, i16 26458, i16 26459, i16 26461, i16 26466, i16 26467, i16 26468, i16 26470, i16 26471, i16 26475, i16 26476, i16 26478, i16 26481, i16 26484, i16 26486, i16 26488, i16 26489, i16 26490, i16 26491, i16 26493, i16 26496, i16 26498, i16 26499, i16 26501, i16 26502, i16 26504, i16 26506, i16 26508, i16 26509, i16 26510, i16 26511, i16 26513, i16 26514, i16 26515, i16 26516, i16 26518, i16 26521, i16 26523, i16 26527, i16 26528, i16 26529, i16 26532, i16 26534, i16 26537, i16 26540, i16 26542, i16 26545, i16 26546, i16 26548, i16 26553, i16 26554, i16 26555, i16 26556, i16 26557, i16 26558, i16 26559, i16 26560, i16 26562, i16 26565, i16 26566, i16 26567, i16 26568, i16 26569, i16 26570, i16 26571, i16 26572, i16 26573, i16 26574, i16 26581, i16 26582, i16 26583, i16 26587, i16 26591, i16 26593, i16 26595, i16 26596, i16 26598, i16 26599, i16 26600, i16 26602, i16 26603, i16 26605, i16 26606, i16 26610, i16 26613, i16 26614, i16 26615, i16 26616, i16 26617, i16 26618, i16 26619, i16 26620, i16 26622, i16 26625, i16 26626, i16 26627, i16 26628, i16 26630, i16 26637, i16 26640, i16 26642, i16 26644, i16 26645, i16 26648, i16 26649, i16 26650, i16 26651, i16 26652, i16 26654, i16 26655, i16 26656, i16 26658, i16 26659, i16 26660, i16 26661, i16 26662, i16 26663, i16 26664, i16 26667, i16 26668, i16 26669, i16 26670, i16 26671, i16 26672, i16 26673, i16 26676, i16 26677, i16 26678, i16 26682, i16 26683, i16 26687, i16 26695, i16 26699, i16 26701, i16 26703, i16 26706, i16 26710, i16 26711, i16 26712, i16 26713, i16 26714, i16 26715], [190 x i16] [i16 26716, i16 26717, i16 26718, i16 26719, i16 26730, i16 26732, i16 26733, i16 26734, i16 26735, i16 26736, i16 26737, i16 26738, i16 26739, i16 26741, i16 26744, i16 26745, i16 26746, i16 26747, i16 26748, i16 26749, i16 26750, i16 26751, i16 26752, i16 26754, i16 26756, i16 26759, i16 26760, i16 26761, i16 26762, i16 26763, i16 26764, i16 26765, i16 26766, i16 26768, i16 26769, i16 26770, i16 26772, i16 26773, i16 26774, i16 26776, i16 26777, i16 26778, i16 26779, i16 26780, i16 26781, i16 26782, i16 26783, i16 26784, i16 26785, i16 26787, i16 26788, i16 26789, i16 26793, i16 26794, i16 26795, i16 26796, i16 26798, i16 26801, i16 26802, i16 26804, i16 26806, i16 26807, i16 26808, i16 26809, i16 26810, i16 26811, i16 26812, i16 26813, i16 26814, i16 26815, i16 26817, i16 26819, i16 26820, i16 26821, i16 26822, i16 26823, i16 26824, i16 26826, i16 26828, i16 26830, i16 26831, i16 26832, i16 26833, i16 26835, i16 26836, i16 26838, i16 26839, i16 26841, i16 26843, i16 26844, i16 26845, i16 26846, i16 26847, i16 26849, i16 26850, i16 26852, i16 26853, i16 26854, i16 26855, i16 26856, i16 26857, i16 26858, i16 26859, i16 26860, i16 26861, i16 26863, i16 26866, i16 26867, i16 26868, i16 26870, i16 26871, i16 26872, i16 26875, i16 26877, i16 26878, i16 26879, i16 26880, i16 26882, i16 26883, i16 26884, i16 26886, i16 26887, i16 26888, i16 26889, i16 26890, i16 26892, i16 26895, i16 26897, i16 26899, i16 26900, i16 26901, i16 26902, i16 26903, i16 26904, i16 26905, i16 26906, i16 26907, i16 26908, i16 26909, i16 26910, i16 26913, i16 26914, i16 26915, i16 26917, i16 26918, i16 26919, i16 26920, i16 26921, i16 26922, i16 26923, i16 26924, i16 26926, i16 26927, i16 26929, i16 26930, i16 26931, i16 26933, i16 26934, i16 26935, i16 26936, i16 26938, i16 26939, i16 26940, i16 26942, i16 26944, i16 26945, i16 26947, i16 26948, i16 26949, i16 26950, i16 26951, i16 26952, i16 26953, i16 26954, i16 26955, i16 26956, i16 26957, i16 26958, i16 26959, i16 26960, i16 26961, i16 26962, i16 26963, i16 26965, i16 26966, i16 26968, i16 26969, i16 26971, i16 26972, i16 26975], [190 x i16] [i16 26977, i16 26978, i16 26980, i16 26981, i16 26983, i16 26984, i16 26985, i16 26986, i16 26988, i16 26989, i16 26991, i16 26992, i16 26994, i16 26995, i16 26996, i16 26997, i16 26998, i16 27002, i16 27003, i16 27005, i16 27006, i16 27007, i16 27009, i16 27011, i16 27013, i16 27018, i16 27019, i16 27020, i16 27022, i16 27023, i16 27024, i16 27025, i16 27026, i16 27027, i16 27030, i16 27031, i16 27033, i16 27034, i16 27037, i16 27038, i16 27039, i16 27040, i16 27041, i16 27042, i16 27043, i16 27044, i16 27045, i16 27046, i16 27049, i16 27050, i16 27052, i16 27054, i16 27055, i16 27056, i16 27058, i16 27059, i16 27061, i16 27062, i16 27064, i16 27065, i16 27066, i16 27068, i16 27069, i16 27070, i16 27071, i16 27072, i16 27074, i16 27075, i16 27076, i16 27077, i16 27078, i16 27079, i16 27080, i16 27081, i16 27083, i16 27085, i16 27087, i16 27089, i16 27090, i16 27091, i16 27093, i16 27094, i16 27095, i16 27096, i16 27097, i16 27098, i16 27100, i16 27101, i16 27102, i16 27105, i16 27106, i16 27107, i16 27108, i16 27109, i16 27110, i16 27111, i16 27112, i16 27113, i16 27114, i16 27115, i16 27116, i16 27118, i16 27119, i16 27120, i16 27121, i16 27123, i16 27124, i16 27125, i16 27126, i16 27127, i16 27128, i16 27129, i16 27130, i16 27131, i16 27132, i16 27134, i16 27136, i16 27137, i16 27138, i16 27139, i16 27140, i16 27141, i16 27142, i16 27143, i16 27144, i16 27145, i16 27147, i16 27148, i16 27149, i16 27150, i16 27151, i16 27152, i16 27153, i16 27154, i16 27155, i16 27156, i16 27157, i16 27158, i16 27161, i16 27162, i16 27163, i16 27164, i16 27165, i16 27166, i16 27168, i16 27170, i16 27171, i16 27172, i16 27173, i16 27174, i16 27175, i16 27177, i16 27179, i16 27180, i16 27181, i16 27182, i16 27184, i16 27186, i16 27187, i16 27188, i16 27190, i16 27191, i16 27192, i16 27193, i16 27194, i16 27195, i16 27196, i16 27199, i16 27200, i16 27201, i16 27202, i16 27203, i16 27205, i16 27206, i16 27208, i16 27209, i16 27210, i16 27211, i16 27212, i16 27213, i16 27214, i16 27215, i16 27217, i16 27218, i16 27219, i16 27220, i16 27221, i16 27222, i16 27223, i16 27226], [190 x i16] [i16 27228, i16 27229, i16 27230, i16 27231, i16 27232, i16 27234, i16 27235, i16 27236, i16 27238, i16 27239, i16 27240, i16 27241, i16 27242, i16 27243, i16 27244, i16 27245, i16 27246, i16 27247, i16 27248, i16 27250, i16 27251, i16 27252, i16 27253, i16 27254, i16 27255, i16 27256, i16 27258, i16 27259, i16 27261, i16 27262, i16 27263, i16 27265, i16 27266, i16 27267, i16 27269, i16 27270, i16 27271, i16 27272, i16 27273, i16 27274, i16 27275, i16 27276, i16 27277, i16 27279, i16 27282, i16 27283, i16 27284, i16 27285, i16 27286, i16 27288, i16 27289, i16 27290, i16 27291, i16 27292, i16 27293, i16 27294, i16 27295, i16 27297, i16 27298, i16 27299, i16 27300, i16 27301, i16 27302, i16 27303, i16 27304, i16 27306, i16 27309, i16 27310, i16 27311, i16 27312, i16 27313, i16 27314, i16 27315, i16 27316, i16 27317, i16 27318, i16 27319, i16 27320, i16 27321, i16 27322, i16 27323, i16 27324, i16 27325, i16 27326, i16 27327, i16 27328, i16 27329, i16 27330, i16 27331, i16 27332, i16 27333, i16 27334, i16 27335, i16 27336, i16 27337, i16 27338, i16 27339, i16 27340, i16 27341, i16 27342, i16 27343, i16 27344, i16 27345, i16 27346, i16 27347, i16 27348, i16 27349, i16 27350, i16 27351, i16 27352, i16 27353, i16 27354, i16 27355, i16 27356, i16 27357, i16 27358, i16 27359, i16 27360, i16 27361, i16 27362, i16 27363, i16 27364, i16 27365, i16 27366, i16 27367, i16 27368, i16 27369, i16 27370, i16 27371, i16 27372, i16 27373, i16 27374, i16 27375, i16 27376, i16 27377, i16 27378, i16 27379, i16 27380, i16 27381, i16 27382, i16 27383, i16 27384, i16 27385, i16 27386, i16 27387, i16 27388, i16 27389, i16 27390, i16 27391, i16 27392, i16 27393, i16 27394, i16 27395, i16 27396, i16 27397, i16 27398, i16 27399, i16 27400, i16 27401, i16 27402, i16 27403, i16 27404, i16 27405, i16 27406, i16 27407, i16 27408, i16 27409, i16 27410, i16 27411, i16 27412, i16 27413, i16 27414, i16 27415, i16 27416, i16 27417, i16 27418, i16 27419, i16 27420, i16 27421, i16 27422, i16 27423, i16 27429, i16 27430, i16 27432, i16 27433, i16 27434, i16 27435, i16 27436, i16 27437, i16 27438], [190 x i16] [i16 27439, i16 27440, i16 27441, i16 27443, i16 27444, i16 27445, i16 27446, i16 27448, i16 27451, i16 27452, i16 27453, i16 27455, i16 27456, i16 27457, i16 27458, i16 27460, i16 27461, i16 27464, i16 27466, i16 27467, i16 27469, i16 27470, i16 27471, i16 27472, i16 27473, i16 27474, i16 27475, i16 27476, i16 27477, i16 27478, i16 27479, i16 27480, i16 27482, i16 27483, i16 27484, i16 27485, i16 27486, i16 27487, i16 27488, i16 27489, i16 27496, i16 27497, i16 27499, i16 27500, i16 27501, i16 27502, i16 27503, i16 27504, i16 27505, i16 27506, i16 27507, i16 27508, i16 27509, i16 27510, i16 27511, i16 27512, i16 27514, i16 27517, i16 27518, i16 27519, i16 27520, i16 27525, i16 27528, i16 27532, i16 27534, i16 27535, i16 27536, i16 27537, i16 27540, i16 27541, i16 27543, i16 27544, i16 27545, i16 27548, i16 27549, i16 27550, i16 27551, i16 27552, i16 27554, i16 27555, i16 27556, i16 27557, i16 27558, i16 27559, i16 27560, i16 27561, i16 27563, i16 27564, i16 27565, i16 27566, i16 27567, i16 27568, i16 27569, i16 27570, i16 27574, i16 27576, i16 27577, i16 27578, i16 27579, i16 27580, i16 27581, i16 27582, i16 27584, i16 27587, i16 27588, i16 27590, i16 27591, i16 27592, i16 27593, i16 27594, i16 27596, i16 27598, i16 27600, i16 27601, i16 27608, i16 27610, i16 27612, i16 27613, i16 27614, i16 27615, i16 27616, i16 27618, i16 27619, i16 27620, i16 27621, i16 27622, i16 27623, i16 27624, i16 27625, i16 27628, i16 27629, i16 27630, i16 27632, i16 27633, i16 27634, i16 27636, i16 27638, i16 27639, i16 27640, i16 27642, i16 27643, i16 27644, i16 27646, i16 27647, i16 27648, i16 27649, i16 27650, i16 27651, i16 27652, i16 27656, i16 27657, i16 27658, i16 27659, i16 27660, i16 27662, i16 27666, i16 27671, i16 27676, i16 27677, i16 27678, i16 27680, i16 27683, i16 27685, i16 27691, i16 27692, i16 27693, i16 27697, i16 27699, i16 27702, i16 27703, i16 27705, i16 27706, i16 27707, i16 27708, i16 27710, i16 27711, i16 27715, i16 27716, i16 27717, i16 27720, i16 27723, i16 27724, i16 27725, i16 27726, i16 27727, i16 27729, i16 27730, i16 27731, i16 27734, i16 27736], [190 x i16] [i16 27737, i16 27738, i16 27746, i16 27747, i16 27749, i16 27750, i16 27751, i16 27755, i16 27756, i16 27757, i16 27758, i16 27759, i16 27761, i16 27763, i16 27765, i16 27767, i16 27768, i16 27770, i16 27771, i16 27772, i16 27775, i16 27776, i16 27780, i16 27783, i16 27786, i16 27787, i16 27789, i16 27790, i16 27793, i16 27794, i16 27797, i16 27798, i16 27799, i16 27800, i16 27802, i16 27804, i16 27805, i16 27806, i16 27808, i16 27810, i16 27816, i16 27820, i16 27823, i16 27824, i16 27828, i16 27829, i16 27830, i16 27831, i16 27834, i16 27840, i16 27841, i16 27842, i16 27843, i16 27846, i16 27847, i16 27848, i16 27851, i16 27853, i16 27854, i16 27855, i16 27857, i16 27858, i16 27864, i16 27865, i16 27866, i16 27868, i16 27869, i16 27871, i16 27876, i16 27878, i16 27879, i16 27881, i16 27884, i16 27885, i16 27890, i16 27892, i16 27897, i16 27903, i16 27904, i16 27906, i16 27907, i16 27909, i16 27910, i16 27912, i16 27913, i16 27914, i16 27917, i16 27919, i16 27920, i16 27921, i16 27923, i16 27924, i16 27925, i16 27926, i16 27928, i16 27932, i16 27933, i16 27935, i16 27936, i16 27937, i16 27938, i16 27939, i16 27940, i16 27942, i16 27944, i16 27945, i16 27948, i16 27949, i16 27951, i16 27952, i16 27956, i16 27958, i16 27959, i16 27960, i16 27962, i16 27967, i16 27968, i16 27970, i16 27972, i16 27977, i16 27980, i16 27984, i16 27989, i16 27990, i16 27991, i16 27992, i16 27995, i16 27997, i16 27999, i16 28001, i16 28002, i16 28004, i16 28005, i16 28007, i16 28008, i16 28011, i16 28012, i16 28013, i16 28016, i16 28017, i16 28018, i16 28019, i16 28021, i16 28022, i16 28025, i16 28026, i16 28027, i16 28029, i16 28030, i16 28031, i16 28032, i16 28033, i16 28035, i16 28036, i16 28038, i16 28039, i16 28042, i16 28043, i16 28045, i16 28047, i16 28048, i16 28050, i16 28054, i16 28055, i16 28056, i16 28057, i16 28058, i16 28060, i16 28066, i16 28069, i16 28076, i16 28077, i16 28080, i16 28081, i16 28083, i16 28084, i16 28086, i16 28087, i16 28089, i16 28090, i16 28091, i16 28092, i16 28093, i16 28094, i16 28097, i16 28098, i16 28099, i16 28104, i16 28105, i16 28106], [190 x i16] [i16 28109, i16 28110, i16 28111, i16 28112, i16 28114, i16 28115, i16 28116, i16 28117, i16 28119, i16 28122, i16 28123, i16 28124, i16 28127, i16 28130, i16 28131, i16 28133, i16 28135, i16 28136, i16 28137, i16 28138, i16 28141, i16 28143, i16 28144, i16 28146, i16 28148, i16 28149, i16 28150, i16 28152, i16 28154, i16 28157, i16 28158, i16 28159, i16 28160, i16 28161, i16 28162, i16 28163, i16 28164, i16 28166, i16 28167, i16 28168, i16 28169, i16 28171, i16 28175, i16 28178, i16 28179, i16 28181, i16 28184, i16 28185, i16 28187, i16 28188, i16 28190, i16 28191, i16 28194, i16 28198, i16 28199, i16 28200, i16 28202, i16 28204, i16 28206, i16 28208, i16 28209, i16 28211, i16 28213, i16 28214, i16 28215, i16 28217, i16 28219, i16 28220, i16 28221, i16 28222, i16 28223, i16 28224, i16 28225, i16 28226, i16 28229, i16 28230, i16 28231, i16 28232, i16 28233, i16 28234, i16 28235, i16 28236, i16 28239, i16 28240, i16 28241, i16 28242, i16 28245, i16 28247, i16 28249, i16 28250, i16 28252, i16 28253, i16 28254, i16 28256, i16 28257, i16 28258, i16 28259, i16 28260, i16 28261, i16 28262, i16 28263, i16 28264, i16 28265, i16 28266, i16 28268, i16 28269, i16 28271, i16 28272, i16 28273, i16 28274, i16 28275, i16 28276, i16 28277, i16 28278, i16 28279, i16 28280, i16 28281, i16 28282, i16 28283, i16 28284, i16 28285, i16 28288, i16 28289, i16 28290, i16 28292, i16 28295, i16 28296, i16 28298, i16 28299, i16 28300, i16 28301, i16 28302, i16 28305, i16 28306, i16 28307, i16 28308, i16 28309, i16 28310, i16 28311, i16 28313, i16 28314, i16 28315, i16 28317, i16 28318, i16 28320, i16 28321, i16 28323, i16 28324, i16 28326, i16 28328, i16 28329, i16 28331, i16 28332, i16 28333, i16 28334, i16 28336, i16 28339, i16 28341, i16 28344, i16 28345, i16 28348, i16 28350, i16 28351, i16 28352, i16 28355, i16 28356, i16 28357, i16 28358, i16 28360, i16 28361, i16 28362, i16 28364, i16 28365, i16 28366, i16 28368, i16 28370, i16 28374, i16 28376, i16 28377, i16 28379, i16 28380, i16 28381, i16 28387, i16 28391, i16 28394, i16 28395, i16 28396, i16 28397, i16 28398, i16 28399], [190 x i16] [i16 28400, i16 28401, i16 28402, i16 28403, i16 28405, i16 28406, i16 28407, i16 28408, i16 28410, i16 28411, i16 28412, i16 28413, i16 28414, i16 28415, i16 28416, i16 28417, i16 28419, i16 28420, i16 28421, i16 28423, i16 28424, i16 28426, i16 28427, i16 28428, i16 28429, i16 28430, i16 28432, i16 28433, i16 28434, i16 28438, i16 28439, i16 28440, i16 28441, i16 28442, i16 28443, i16 28444, i16 28445, i16 28446, i16 28447, i16 28449, i16 28450, i16 28451, i16 28453, i16 28454, i16 28455, i16 28456, i16 28460, i16 28462, i16 28464, i16 28466, i16 28468, i16 28469, i16 28471, i16 28472, i16 28473, i16 28474, i16 28475, i16 28476, i16 28477, i16 28479, i16 28480, i16 28481, i16 28482, i16 28483, i16 28484, i16 28485, i16 28488, i16 28489, i16 28490, i16 28492, i16 28494, i16 28495, i16 28496, i16 28497, i16 28498, i16 28499, i16 28500, i16 28501, i16 28502, i16 28503, i16 28505, i16 28506, i16 28507, i16 28509, i16 28511, i16 28512, i16 28513, i16 28515, i16 28516, i16 28517, i16 28519, i16 28520, i16 28521, i16 28522, i16 28523, i16 28524, i16 28527, i16 28528, i16 28529, i16 28531, i16 28533, i16 28534, i16 28535, i16 28537, i16 28539, i16 28541, i16 28542, i16 28543, i16 28544, i16 28545, i16 28546, i16 28547, i16 28549, i16 28550, i16 28551, i16 28554, i16 28555, i16 28559, i16 28560, i16 28561, i16 28562, i16 28563, i16 28564, i16 28565, i16 28566, i16 28567, i16 28568, i16 28569, i16 28570, i16 28571, i16 28573, i16 28574, i16 28575, i16 28576, i16 28578, i16 28579, i16 28580, i16 28581, i16 28582, i16 28584, i16 28585, i16 28586, i16 28587, i16 28588, i16 28589, i16 28590, i16 28591, i16 28592, i16 28593, i16 28594, i16 28596, i16 28597, i16 28599, i16 28600, i16 28602, i16 28603, i16 28604, i16 28605, i16 28606, i16 28607, i16 28609, i16 28611, i16 28612, i16 28613, i16 28614, i16 28615, i16 28616, i16 28618, i16 28619, i16 28620, i16 28621, i16 28622, i16 28623, i16 28624, i16 28627, i16 28628, i16 28629, i16 28630, i16 28631, i16 28632, i16 28633, i16 28634, i16 28635, i16 28636, i16 28637, i16 28639, i16 28642, i16 28643, i16 28644, i16 28645], [190 x i16] [i16 28646, i16 28647, i16 28648, i16 28649, i16 28650, i16 28651, i16 28652, i16 28653, i16 28656, i16 28657, i16 28658, i16 28659, i16 28660, i16 28661, i16 28662, i16 28663, i16 28664, i16 28665, i16 28666, i16 28667, i16 28668, i16 28669, i16 28670, i16 28671, i16 28672, i16 28673, i16 28674, i16 28675, i16 28676, i16 28677, i16 28678, i16 28679, i16 28680, i16 28681, i16 28682, i16 28683, i16 28684, i16 28685, i16 28686, i16 28687, i16 28688, i16 28690, i16 28691, i16 28692, i16 28693, i16 28694, i16 28695, i16 28696, i16 28697, i16 28700, i16 28701, i16 28702, i16 28703, i16 28704, i16 28705, i16 28706, i16 28708, i16 28709, i16 28710, i16 28711, i16 28712, i16 28713, i16 28714, i16 28715, i16 28716, i16 28717, i16 28718, i16 28719, i16 28720, i16 28721, i16 28722, i16 28723, i16 28724, i16 28726, i16 28727, i16 28728, i16 28730, i16 28731, i16 28732, i16 28733, i16 28734, i16 28735, i16 28736, i16 28737, i16 28738, i16 28739, i16 28740, i16 28741, i16 28742, i16 28743, i16 28744, i16 28745, i16 28746, i16 28747, i16 28749, i16 28750, i16 28752, i16 28753, i16 28754, i16 28755, i16 28756, i16 28757, i16 28758, i16 28759, i16 28760, i16 28761, i16 28762, i16 28763, i16 28764, i16 28765, i16 28767, i16 28768, i16 28769, i16 28770, i16 28771, i16 28772, i16 28773, i16 28774, i16 28775, i16 28776, i16 28777, i16 28778, i16 28782, i16 28785, i16 28786, i16 28787, i16 28788, i16 28791, i16 28793, i16 28794, i16 28795, i16 28797, i16 28801, i16 28802, i16 28803, i16 28804, i16 28806, i16 28807, i16 28808, i16 28811, i16 28812, i16 28813, i16 28815, i16 28816, i16 28817, i16 28819, i16 28823, i16 28824, i16 28826, i16 28827, i16 28830, i16 28831, i16 28832, i16 28833, i16 28834, i16 28835, i16 28836, i16 28837, i16 28838, i16 28839, i16 28840, i16 28841, i16 28842, i16 28848, i16 28850, i16 28852, i16 28853, i16 28854, i16 28858, i16 28862, i16 28863, i16 28868, i16 28869, i16 28870, i16 28871, i16 28873, i16 28875, i16 28876, i16 28877, i16 28878, i16 28879, i16 28880, i16 28881, i16 28882, i16 28883, i16 28884, i16 28885, i16 28886, i16 28887, i16 28890], [190 x i16] [i16 28892, i16 28893, i16 28894, i16 28896, i16 28897, i16 28898, i16 28899, i16 28901, i16 28906, i16 28910, i16 28912, i16 28913, i16 28914, i16 28915, i16 28916, i16 28917, i16 28918, i16 28920, i16 28922, i16 28923, i16 28924, i16 28926, i16 28927, i16 28928, i16 28929, i16 28930, i16 28931, i16 28932, i16 28933, i16 28934, i16 28935, i16 28936, i16 28939, i16 28940, i16 28941, i16 28942, i16 28943, i16 28945, i16 28946, i16 28948, i16 28951, i16 28955, i16 28956, i16 28957, i16 28958, i16 28959, i16 28960, i16 28961, i16 28962, i16 28963, i16 28964, i16 28965, i16 28967, i16 28968, i16 28969, i16 28970, i16 28971, i16 28972, i16 28973, i16 28974, i16 28978, i16 28979, i16 28980, i16 28981, i16 28983, i16 28984, i16 28985, i16 28986, i16 28987, i16 28988, i16 28989, i16 28990, i16 28991, i16 28992, i16 28993, i16 28994, i16 28995, i16 28996, i16 28998, i16 28999, i16 29000, i16 29001, i16 29003, i16 29005, i16 29007, i16 29008, i16 29009, i16 29010, i16 29011, i16 29012, i16 29013, i16 29014, i16 29015, i16 29016, i16 29017, i16 29018, i16 29019, i16 29021, i16 29023, i16 29024, i16 29025, i16 29026, i16 29027, i16 29029, i16 29033, i16 29034, i16 29035, i16 29036, i16 29037, i16 29039, i16 29040, i16 29041, i16 29044, i16 29045, i16 29046, i16 29047, i16 29049, i16 29051, i16 29052, i16 29054, i16 29055, i16 29056, i16 29057, i16 29058, i16 29059, i16 29061, i16 29062, i16 29063, i16 29064, i16 29065, i16 29067, i16 29068, i16 29069, i16 29070, i16 29072, i16 29073, i16 29074, i16 29075, i16 29077, i16 29078, i16 29079, i16 29082, i16 29083, i16 29084, i16 29085, i16 29086, i16 29089, i16 29090, i16 29091, i16 29092, i16 29093, i16 29094, i16 29095, i16 29097, i16 29098, i16 29099, i16 29101, i16 29102, i16 29103, i16 29104, i16 29105, i16 29106, i16 29108, i16 29110, i16 29111, i16 29112, i16 29114, i16 29115, i16 29116, i16 29117, i16 29118, i16 29119, i16 29120, i16 29121, i16 29122, i16 29124, i16 29125, i16 29126, i16 29127, i16 29128, i16 29129, i16 29130, i16 29131, i16 29132, i16 29133, i16 29135, i16 29136, i16 29137, i16 29138, i16 29139], [190 x i16] [i16 29142, i16 29143, i16 29144, i16 29145, i16 29146, i16 29147, i16 29148, i16 29149, i16 29150, i16 29151, i16 29153, i16 29154, i16 29155, i16 29156, i16 29158, i16 29160, i16 29161, i16 29162, i16 29163, i16 29164, i16 29165, i16 29167, i16 29168, i16 29169, i16 29170, i16 29171, i16 29172, i16 29173, i16 29174, i16 29175, i16 29176, i16 29178, i16 29179, i16 29180, i16 29181, i16 29182, i16 29183, i16 29184, i16 29185, i16 29186, i16 29187, i16 29188, i16 29189, i16 29191, i16 29192, i16 29193, i16 29194, i16 29195, i16 29196, i16 29197, i16 29198, i16 29199, i16 29200, i16 29201, i16 29202, i16 29203, i16 29204, i16 29205, i16 29206, i16 29207, i16 29208, i16 29209, i16 29210, i16 29211, i16 29212, i16 29214, i16 29215, i16 29216, i16 29217, i16 29218, i16 29219, i16 29220, i16 29221, i16 29222, i16 29223, i16 29225, i16 29227, i16 29229, i16 29230, i16 29231, i16 29234, i16 29235, i16 29236, i16 29242, i16 29244, i16 29246, i16 29248, i16 29249, i16 29250, i16 29251, i16 29252, i16 29253, i16 29254, i16 29257, i16 29258, i16 29259, i16 29262, i16 29263, i16 29264, i16 29265, i16 29267, i16 29268, i16 29269, i16 29271, i16 29272, i16 29274, i16 29276, i16 29278, i16 29280, i16 29283, i16 29284, i16 29285, i16 29288, i16 29290, i16 29291, i16 29292, i16 29293, i16 29296, i16 29297, i16 29299, i16 29300, i16 29302, i16 29303, i16 29304, i16 29307, i16 29308, i16 29309, i16 29314, i16 29315, i16 29317, i16 29318, i16 29319, i16 29320, i16 29321, i16 29324, i16 29326, i16 29328, i16 29329, i16 29331, i16 29332, i16 29333, i16 29334, i16 29335, i16 29336, i16 29337, i16 29338, i16 29339, i16 29340, i16 29341, i16 29342, i16 29344, i16 29345, i16 29346, i16 29347, i16 29348, i16 29349, i16 29350, i16 29351, i16 29352, i16 29353, i16 29354, i16 29355, i16 29358, i16 29361, i16 29362, i16 29363, i16 29365, i16 29370, i16 29371, i16 29372, i16 29373, i16 29374, i16 29375, i16 29376, i16 29381, i16 29382, i16 29383, i16 29385, i16 29386, i16 29387, i16 29388, i16 29391, i16 29393, i16 29395, i16 29396, i16 29397, i16 29398, i16 29400, i16 29402, i16 29403], [190 x i16] [i16 -6970, i16 -6969, i16 -6968, i16 -6967, i16 -6966, i16 -6965, i16 -6964, i16 -6963, i16 -6962, i16 -6961, i16 -6960, i16 -6959, i16 -6958, i16 -6957, i16 -6956, i16 -6955, i16 -6954, i16 -6953, i16 -6952, i16 -6951, i16 -6950, i16 -6949, i16 -6948, i16 -6947, i16 -6946, i16 -6945, i16 -6944, i16 -6943, i16 -6942, i16 -6941, i16 -6940, i16 -6939, i16 -6938, i16 -6937, i16 -6936, i16 -6935, i16 -6934, i16 -6933, i16 -6932, i16 -6931, i16 -6930, i16 -6929, i16 -6928, i16 -6927, i16 -6926, i16 -6925, i16 -6924, i16 -6923, i16 -6922, i16 -6921, i16 -6920, i16 -6919, i16 -6918, i16 -6917, i16 -6916, i16 -6915, i16 -6914, i16 -6913, i16 -6912, i16 -6911, i16 -6910, i16 -6909, i16 -6908, i16 -6907, i16 -6906, i16 -6905, i16 -6904, i16 -6903, i16 -6902, i16 -6901, i16 -6900, i16 -6899, i16 -6898, i16 -6897, i16 -6896, i16 -6895, i16 -6894, i16 -6893, i16 -6892, i16 -6891, i16 -6890, i16 -6889, i16 -6888, i16 -6887, i16 -6886, i16 -6885, i16 -6884, i16 -6883, i16 -6882, i16 -6881, i16 -6880, i16 -6879, i16 -6878, i16 -6877, i16 -6876, i16 -6875, i16 12288, i16 12289, i16 12290, i16 183, i16 713, i16 711, i16 168, i16 12291, i16 12293, i16 8212, i16 -162, i16 8214, i16 8230, i16 8216, i16 8217, i16 8220, i16 8221, i16 12308, i16 12309, i16 12296, i16 12297, i16 12298, i16 12299, i16 12300, i16 12301, i16 12302, i16 12303, i16 12310, i16 12311, i16 12304, i16 12305, i16 177, i16 215, i16 247, i16 8758, i16 8743, i16 8744, i16 8721, i16 8719, i16 8746, i16 8745, i16 8712, i16 8759, i16 8730, i16 8869, i16 8741, i16 8736, i16 8978, i16 8857, i16 8747, i16 8750, i16 8801, i16 8780, i16 8776, i16 8765, i16 8733, i16 8800, i16 8814, i16 8815, i16 8804, i16 8805, i16 8734, i16 8757, i16 8756, i16 9794, i16 9792, i16 176, i16 8242, i16 8243, i16 8451, i16 -252, i16 164, i16 -32, i16 -31, i16 8240, i16 167, i16 8470, i16 9734, i16 9733, i16 9675, i16 9679, i16 9678, i16 9671, i16 9670, i16 9633, i16 9632, i16 9651, i16 9650, i16 8251, i16 8594, i16 8592, i16 8593, i16 8595, i16 12307], [190 x i16] [i16 -6874, i16 -6873, i16 -6872, i16 -6871, i16 -6870, i16 -6869, i16 -6868, i16 -6867, i16 -6866, i16 -6865, i16 -6864, i16 -6863, i16 -6862, i16 -6861, i16 -6860, i16 -6859, i16 -6858, i16 -6857, i16 -6856, i16 -6855, i16 -6854, i16 -6853, i16 -6852, i16 -6851, i16 -6850, i16 -6849, i16 -6848, i16 -6847, i16 -6846, i16 -6845, i16 -6844, i16 -6843, i16 -6842, i16 -6841, i16 -6840, i16 -6839, i16 -6838, i16 -6837, i16 -6836, i16 -6835, i16 -6834, i16 -6833, i16 -6832, i16 -6831, i16 -6830, i16 -6829, i16 -6828, i16 -6827, i16 -6826, i16 -6825, i16 -6824, i16 -6823, i16 -6822, i16 -6821, i16 -6820, i16 -6819, i16 -6818, i16 -6817, i16 -6816, i16 -6815, i16 -6814, i16 -6813, i16 -6812, i16 -6811, i16 -6810, i16 -6809, i16 -6808, i16 -6807, i16 -6806, i16 -6805, i16 -6804, i16 -6803, i16 -6802, i16 -6801, i16 -6800, i16 -6799, i16 -6798, i16 -6797, i16 -6796, i16 -6795, i16 -6794, i16 -6793, i16 -6792, i16 -6791, i16 -6790, i16 -6789, i16 -6788, i16 -6787, i16 -6786, i16 -6785, i16 -6784, i16 -6783, i16 -6782, i16 -6781, i16 -6780, i16 -6779, i16 8560, i16 8561, i16 8562, i16 8563, i16 8564, i16 8565, i16 8566, i16 8567, i16 8568, i16 8569, i16 -6298, i16 -6297, i16 -6296, i16 -6295, i16 -6294, i16 -6293, i16 9352, i16 9353, i16 9354, i16 9355, i16 9356, i16 9357, i16 9358, i16 9359, i16 9360, i16 9361, i16 9362, i16 9363, i16 9364, i16 9365, i16 9366, i16 9367, i16 9368, i16 9369, i16 9370, i16 9371, i16 9332, i16 9333, i16 9334, i16 9335, i16 9336, i16 9337, i16 9338, i16 9339, i16 9340, i16 9341, i16 9342, i16 9343, i16 9344, i16 9345, i16 9346, i16 9347, i16 9348, i16 9349, i16 9350, i16 9351, i16 9312, i16 9313, i16 9314, i16 9315, i16 9316, i16 9317, i16 9318, i16 9319, i16 9320, i16 9321, i16 8364, i16 -6291, i16 12832, i16 12833, i16 12834, i16 12835, i16 12836, i16 12837, i16 12838, i16 12839, i16 12840, i16 12841, i16 -6290, i16 -6289, i16 8544, i16 8545, i16 8546, i16 8547, i16 8548, i16 8549, i16 8550, i16 8551, i16 8552, i16 8553, i16 8554, i16 8555, i16 -6288, i16 -6287], [190 x i16] [i16 -6778, i16 -6777, i16 -6776, i16 -6775, i16 -6774, i16 -6773, i16 -6772, i16 -6771, i16 -6770, i16 -6769, i16 -6768, i16 -6767, i16 -6766, i16 -6765, i16 -6764, i16 -6763, i16 -6762, i16 -6761, i16 -6760, i16 -6759, i16 -6758, i16 -6757, i16 -6756, i16 -6755, i16 -6754, i16 -6753, i16 -6752, i16 -6751, i16 -6750, i16 -6749, i16 -6748, i16 -6747, i16 -6746, i16 -6745, i16 -6744, i16 -6743, i16 -6742, i16 -6741, i16 -6740, i16 -6739, i16 -6738, i16 -6737, i16 -6736, i16 -6735, i16 -6734, i16 -6733, i16 -6732, i16 -6731, i16 -6730, i16 -6729, i16 -6728, i16 -6727, i16 -6726, i16 -6725, i16 -6724, i16 -6723, i16 -6722, i16 -6721, i16 -6720, i16 -6719, i16 -6718, i16 -6717, i16 -6716, i16 -6715, i16 -6714, i16 -6713, i16 -6712, i16 -6711, i16 -6710, i16 -6709, i16 -6708, i16 -6707, i16 -6706, i16 -6705, i16 -6704, i16 -6703, i16 -6702, i16 -6701, i16 -6700, i16 -6699, i16 -6698, i16 -6697, i16 -6696, i16 -6695, i16 -6694, i16 -6693, i16 -6692, i16 -6691, i16 -6690, i16 -6689, i16 -6688, i16 -6687, i16 -6686, i16 -6685, i16 -6684, i16 -6683, i16 -255, i16 -254, i16 -253, i16 -27, i16 -251, i16 -250, i16 -249, i16 -248, i16 -247, i16 -246, i16 -245, i16 -244, i16 -243, i16 -242, i16 -241, i16 -240, i16 -239, i16 -238, i16 -237, i16 -236, i16 -235, i16 -234, i16 -233, i16 -232, i16 -231, i16 -230, i16 -229, i16 -228, i16 -227, i16 -226, i16 -225, i16 -224, i16 -223, i16 -222, i16 -221, i16 -220, i16 -219, i16 -218, i16 -217, i16 -216, i16 -215, i16 -214, i16 -213, i16 -212, i16 -211, i16 -210, i16 -209, i16 -208, i16 -207, i16 -206, i16 -205, i16 -204, i16 -203, i16 -202, i16 -201, i16 -200, i16 -199, i16 -198, i16 -197, i16 -196, i16 -195, i16 -194, i16 -193, i16 -192, i16 -191, i16 -190, i16 -189, i16 -188, i16 -187, i16 -186, i16 -185, i16 -184, i16 -183, i16 -182, i16 -181, i16 -180, i16 -179, i16 -178, i16 -177, i16 -176, i16 -175, i16 -174, i16 -173, i16 -172, i16 -171, i16 -170, i16 -169, i16 -168, i16 -167, i16 -166, i16 -165, i16 -164, i16 -163, i16 -29], [190 x i16] [i16 -6682, i16 -6681, i16 -6680, i16 -6679, i16 -6678, i16 -6677, i16 -6676, i16 -6675, i16 -6674, i16 -6673, i16 -6672, i16 -6671, i16 -6670, i16 -6669, i16 -6668, i16 -6667, i16 -6666, i16 -6665, i16 -6664, i16 -6663, i16 -6662, i16 -6661, i16 -6660, i16 -6659, i16 -6658, i16 -6657, i16 -6656, i16 -6655, i16 -6654, i16 -6653, i16 -6652, i16 -6651, i16 -6650, i16 -6649, i16 -6648, i16 -6647, i16 -6646, i16 -6645, i16 -6644, i16 -6643, i16 -6642, i16 -6641, i16 -6640, i16 -6639, i16 -6638, i16 -6637, i16 -6636, i16 -6635, i16 -6634, i16 -6633, i16 -6632, i16 -6631, i16 -6630, i16 -6629, i16 -6628, i16 -6627, i16 -6626, i16 -6625, i16 -6624, i16 -6623, i16 -6622, i16 -6621, i16 -6620, i16 -6619, i16 -6618, i16 -6617, i16 -6616, i16 -6615, i16 -6614, i16 -6613, i16 -6612, i16 -6611, i16 -6610, i16 -6609, i16 -6608, i16 -6607, i16 -6606, i16 -6605, i16 -6604, i16 -6603, i16 -6602, i16 -6601, i16 -6600, i16 -6599, i16 -6598, i16 -6597, i16 -6596, i16 -6595, i16 -6594, i16 -6593, i16 -6592, i16 -6591, i16 -6590, i16 -6589, i16 -6588, i16 -6587, i16 12353, i16 12354, i16 12355, i16 12356, i16 12357, i16 12358, i16 12359, i16 12360, i16 12361, i16 12362, i16 12363, i16 12364, i16 12365, i16 12366, i16 12367, i16 12368, i16 12369, i16 12370, i16 12371, i16 12372, i16 12373, i16 12374, i16 12375, i16 12376, i16 12377, i16 12378, i16 12379, i16 12380, i16 12381, i16 12382, i16 12383, i16 12384, i16 12385, i16 12386, i16 12387, i16 12388, i16 12389, i16 12390, i16 12391, i16 12392, i16 12393, i16 12394, i16 12395, i16 12396, i16 12397, i16 12398, i16 12399, i16 12400, i16 12401, i16 12402, i16 12403, i16 12404, i16 12405, i16 12406, i16 12407, i16 12408, i16 12409, i16 12410, i16 12411, i16 12412, i16 12413, i16 12414, i16 12415, i16 12416, i16 12417, i16 12418, i16 12419, i16 12420, i16 12421, i16 12422, i16 12423, i16 12424, i16 12425, i16 12426, i16 12427, i16 12428, i16 12429, i16 12430, i16 12431, i16 12432, i16 12433, i16 12434, i16 12435, i16 -6286, i16 -6285, i16 -6284, i16 -6283, i16 -6282, i16 -6281, i16 -6280, i16 -6279, i16 -6278, i16 -6277, i16 -6276], [190 x i16] [i16 -6586, i16 -6585, i16 -6584, i16 -6583, i16 -6582, i16 -6581, i16 -6580, i16 -6579, i16 -6578, i16 -6577, i16 -6576, i16 -6575, i16 -6574, i16 -6573, i16 -6572, i16 -6571, i16 -6570, i16 -6569, i16 -6568, i16 -6567, i16 -6566, i16 -6565, i16 -6564, i16 -6563, i16 -6562, i16 -6561, i16 -6560, i16 -6559, i16 -6558, i16 -6557, i16 -6556, i16 -6555, i16 -6554, i16 -6553, i16 -6552, i16 -6551, i16 -6550, i16 -6549, i16 -6548, i16 -6547, i16 -6546, i16 -6545, i16 -6544, i16 -6543, i16 -6542, i16 -6541, i16 -6540, i16 -6539, i16 -6538, i16 -6537, i16 -6536, i16 -6535, i16 -6534, i16 -6533, i16 -6532, i16 -6531, i16 -6530, i16 -6529, i16 -6528, i16 -6527, i16 -6526, i16 -6525, i16 -6524, i16 -6523, i16 -6522, i16 -6521, i16 -6520, i16 -6519, i16 -6518, i16 -6517, i16 -6516, i16 -6515, i16 -6514, i16 -6513, i16 -6512, i16 -6511, i16 -6510, i16 -6509, i16 -6508, i16 -6507, i16 -6506, i16 -6505, i16 -6504, i16 -6503, i16 -6502, i16 -6501, i16 -6500, i16 -6499, i16 -6498, i16 -6497, i16 -6496, i16 -6495, i16 -6494, i16 -6493, i16 -6492, i16 -6491, i16 12449, i16 12450, i16 12451, i16 12452, i16 12453, i16 12454, i16 12455, i16 12456, i16 12457, i16 12458, i16 12459, i16 12460, i16 12461, i16 12462, i16 12463, i16 12464, i16 12465, i16 12466, i16 12467, i16 12468, i16 12469, i16 12470, i16 12471, i16 12472, i16 12473, i16 12474, i16 12475, i16 12476, i16 12477, i16 12478, i16 12479, i16 12480, i16 12481, i16 12482, i16 12483, i16 12484, i16 12485, i16 12486, i16 12487, i16 12488, i16 12489, i16 12490, i16 12491, i16 12492, i16 12493, i16 12494, i16 12495, i16 12496, i16 12497, i16 12498, i16 12499, i16 12500, i16 12501, i16 12502, i16 12503, i16 12504, i16 12505, i16 12506, i16 12507, i16 12508, i16 12509, i16 12510, i16 12511, i16 12512, i16 12513, i16 12514, i16 12515, i16 12516, i16 12517, i16 12518, i16 12519, i16 12520, i16 12521, i16 12522, i16 12523, i16 12524, i16 12525, i16 12526, i16 12527, i16 12528, i16 12529, i16 12530, i16 12531, i16 12532, i16 12533, i16 12534, i16 -6275, i16 -6274, i16 -6273, i16 -6272, i16 -6271, i16 -6270, i16 -6269, i16 -6268], [190 x i16] [i16 -6490, i16 -6489, i16 -6488, i16 -6487, i16 -6486, i16 -6485, i16 -6484, i16 -6483, i16 -6482, i16 -6481, i16 -6480, i16 -6479, i16 -6478, i16 -6477, i16 -6476, i16 -6475, i16 -6474, i16 -6473, i16 -6472, i16 -6471, i16 -6470, i16 -6469, i16 -6468, i16 -6467, i16 -6466, i16 -6465, i16 -6464, i16 -6463, i16 -6462, i16 -6461, i16 -6460, i16 -6459, i16 -6458, i16 -6457, i16 -6456, i16 -6455, i16 -6454, i16 -6453, i16 -6452, i16 -6451, i16 -6450, i16 -6449, i16 -6448, i16 -6447, i16 -6446, i16 -6445, i16 -6444, i16 -6443, i16 -6442, i16 -6441, i16 -6440, i16 -6439, i16 -6438, i16 -6437, i16 -6436, i16 -6435, i16 -6434, i16 -6433, i16 -6432, i16 -6431, i16 -6430, i16 -6429, i16 -6428, i16 -6427, i16 -6426, i16 -6425, i16 -6424, i16 -6423, i16 -6422, i16 -6421, i16 -6420, i16 -6419, i16 -6418, i16 -6417, i16 -6416, i16 -6415, i16 -6414, i16 -6413, i16 -6412, i16 -6411, i16 -6410, i16 -6409, i16 -6408, i16 -6407, i16 -6406, i16 -6405, i16 -6404, i16 -6403, i16 -6402, i16 -6401, i16 -6400, i16 -6399, i16 -6398, i16 -6397, i16 -6396, i16 -6395, i16 913, i16 914, i16 915, i16 916, i16 917, i16 918, i16 919, i16 920, i16 921, i16 922, i16 923, i16 924, i16 925, i16 926, i16 927, i16 928, i16 929, i16 931, i16 932, i16 933, i16 934, i16 935, i16 936, i16 937, i16 -6267, i16 -6266, i16 -6265, i16 -6264, i16 -6263, i16 -6262, i16 -6261, i16 -6260, i16 945, i16 946, i16 947, i16 948, i16 949, i16 950, i16 951, i16 952, i16 953, i16 954, i16 955, i16 956, i16 957, i16 958, i16 959, i16 960, i16 961, i16 963, i16 964, i16 965, i16 966, i16 967, i16 968, i16 969, i16 -6259, i16 -6258, i16 -6257, i16 -6256, i16 -6255, i16 -6254, i16 -6253, i16 -459, i16 -458, i16 -455, i16 -454, i16 -449, i16 -448, i16 -451, i16 -450, i16 -447, i16 -446, i16 -445, i16 -444, i16 -6252, i16 -6251, i16 -453, i16 -452, i16 -457, i16 -456, i16 -463, i16 -6250, i16 -461, i16 -460, i16 -6249, i16 -6248, i16 -6247, i16 -6246, i16 -6245, i16 -6244, i16 -6243, i16 -6242, i16 -6241], [190 x i16] [i16 -6394, i16 -6393, i16 -6392, i16 -6391, i16 -6390, i16 -6389, i16 -6388, i16 -6387, i16 -6386, i16 -6385, i16 -6384, i16 -6383, i16 -6382, i16 -6381, i16 -6380, i16 -6379, i16 -6378, i16 -6377, i16 -6376, i16 -6375, i16 -6374, i16 -6373, i16 -6372, i16 -6371, i16 -6370, i16 -6369, i16 -6368, i16 -6367, i16 -6366, i16 -6365, i16 -6364, i16 -6363, i16 -6362, i16 -6361, i16 -6360, i16 -6359, i16 -6358, i16 -6357, i16 -6356, i16 -6355, i16 -6354, i16 -6353, i16 -6352, i16 -6351, i16 -6350, i16 -6349, i16 -6348, i16 -6347, i16 -6346, i16 -6345, i16 -6344, i16 -6343, i16 -6342, i16 -6341, i16 -6340, i16 -6339, i16 -6338, i16 -6337, i16 -6336, i16 -6335, i16 -6334, i16 -6333, i16 -6332, i16 -6331, i16 -6330, i16 -6329, i16 -6328, i16 -6327, i16 -6326, i16 -6325, i16 -6324, i16 -6323, i16 -6322, i16 -6321, i16 -6320, i16 -6319, i16 -6318, i16 -6317, i16 -6316, i16 -6315, i16 -6314, i16 -6313, i16 -6312, i16 -6311, i16 -6310, i16 -6309, i16 -6308, i16 -6307, i16 -6306, i16 -6305, i16 -6304, i16 -6303, i16 -6302, i16 -6301, i16 -6300, i16 -6299, i16 1040, i16 1041, i16 1042, i16 1043, i16 1044, i16 1045, i16 1025, i16 1046, i16 1047, i16 1048, i16 1049, i16 1050, i16 1051, i16 1052, i16 1053, i16 1054, i16 1055, i16 1056, i16 1057, i16 1058, i16 1059, i16 1060, i16 1061, i16 1062, i16 1063, i16 1064, i16 1065, i16 1066, i16 1067, i16 1068, i16 1069, i16 1070, i16 1071, i16 -6240, i16 -6239, i16 -6238, i16 -6237, i16 -6236, i16 -6235, i16 -6234, i16 -6233, i16 -6232, i16 -6231, i16 -6230, i16 -6229, i16 -6228, i16 -6227, i16 -6226, i16 1072, i16 1073, i16 1074, i16 1075, i16 1076, i16 1077, i16 1105, i16 1078, i16 1079, i16 1080, i16 1081, i16 1082, i16 1083, i16 1084, i16 1085, i16 1086, i16 1087, i16 1088, i16 1089, i16 1090, i16 1091, i16 1092, i16 1093, i16 1094, i16 1095, i16 1096, i16 1097, i16 1098, i16 1099, i16 1100, i16 1101, i16 1102, i16 1103, i16 -6225, i16 -6224, i16 -6223, i16 -6222, i16 -6221, i16 -6220, i16 -6219, i16 -6218, i16 -6217, i16 -6216, i16 -6215, i16 -6214, i16 -6213], [190 x i16] [i16 714, i16 715, i16 729, i16 8211, i16 8213, i16 8229, i16 8245, i16 8453, i16 8457, i16 8598, i16 8599, i16 8600, i16 8601, i16 8725, i16 8735, i16 8739, i16 8786, i16 8806, i16 8807, i16 8895, i16 9552, i16 9553, i16 9554, i16 9555, i16 9556, i16 9557, i16 9558, i16 9559, i16 9560, i16 9561, i16 9562, i16 9563, i16 9564, i16 9565, i16 9566, i16 9567, i16 9568, i16 9569, i16 9570, i16 9571, i16 9572, i16 9573, i16 9574, i16 9575, i16 9576, i16 9577, i16 9578, i16 9579, i16 9580, i16 9581, i16 9582, i16 9583, i16 9584, i16 9585, i16 9586, i16 9587, i16 9601, i16 9602, i16 9603, i16 9604, i16 9605, i16 9606, i16 9607, i16 9608, i16 9609, i16 9610, i16 9611, i16 9612, i16 9613, i16 9614, i16 9615, i16 9619, i16 9620, i16 9621, i16 9660, i16 9661, i16 9698, i16 9699, i16 9700, i16 9701, i16 9737, i16 8853, i16 12306, i16 12317, i16 12318, i16 -6212, i16 -6211, i16 -6210, i16 -6209, i16 -6208, i16 -6207, i16 -6206, i16 -6205, i16 -6204, i16 -6203, i16 -6202, i16 257, i16 225, i16 462, i16 224, i16 275, i16 233, i16 283, i16 232, i16 299, i16 237, i16 464, i16 236, i16 333, i16 243, i16 466, i16 242, i16 363, i16 250, i16 468, i16 249, i16 470, i16 472, i16 474, i16 476, i16 252, i16 234, i16 593, i16 -6201, i16 324, i16 328, i16 505, i16 609, i16 -6199, i16 -6198, i16 -6197, i16 -6196, i16 12549, i16 12550, i16 12551, i16 12552, i16 12553, i16 12554, i16 12555, i16 12556, i16 12557, i16 12558, i16 12559, i16 12560, i16 12561, i16 12562, i16 12563, i16 12564, i16 12565, i16 12566, i16 12567, i16 12568, i16 12569, i16 12570, i16 12571, i16 12572, i16 12573, i16 12574, i16 12575, i16 12576, i16 12577, i16 12578, i16 12579, i16 12580, i16 12581, i16 12582, i16 12583, i16 12584, i16 12585, i16 -6195, i16 -6194, i16 -6193, i16 -6192, i16 -6191, i16 -6190, i16 -6189, i16 -6188, i16 -6187, i16 -6186, i16 -6185, i16 -6184, i16 -6183, i16 -6182, i16 -6181, i16 -6180, i16 -6179, i16 -6178, i16 -6177, i16 -6176, i16 -6175], [190 x i16] [i16 12321, i16 12322, i16 12323, i16 12324, i16 12325, i16 12326, i16 12327, i16 12328, i16 12329, i16 12963, i16 13198, i16 13199, i16 13212, i16 13213, i16 13214, i16 13217, i16 13252, i16 13262, i16 13265, i16 13266, i16 13269, i16 -464, i16 -30, i16 -28, i16 -6174, i16 8481, i16 12849, i16 -6173, i16 8208, i16 -6172, i16 -6171, i16 -6170, i16 12540, i16 12443, i16 12444, i16 12541, i16 12542, i16 12294, i16 12445, i16 12446, i16 -439, i16 -438, i16 -437, i16 -436, i16 -435, i16 -434, i16 -433, i16 -432, i16 -431, i16 -430, i16 -428, i16 -427, i16 -426, i16 -425, i16 -423, i16 -422, i16 -421, i16 -420, i16 -419, i16 -418, i16 -417, i16 -416, i16 -415, i16 -414, i16 -413, i16 -412, i16 -411, i16 -410, i16 -408, i16 -407, i16 -406, i16 -405, i16 12350, i16 12272, i16 12273, i16 12274, i16 12275, i16 12276, i16 12277, i16 12278, i16 12279, i16 12280, i16 12281, i16 12282, i16 12283, i16 12295, i16 -6156, i16 -6155, i16 -6154, i16 -6153, i16 -6152, i16 -6151, i16 -6150, i16 -6149, i16 -6148, i16 -6147, i16 -6146, i16 -6145, i16 -6144, i16 9472, i16 9473, i16 9474, i16 9475, i16 9476, i16 9477, i16 9478, i16 9479, i16 9480, i16 9481, i16 9482, i16 9483, i16 9484, i16 9485, i16 9486, i16 9487, i16 9488, i16 9489, i16 9490, i16 9491, i16 9492, i16 9493, i16 9494, i16 9495, i16 9496, i16 9497, i16 9498, i16 9499, i16 9500, i16 9501, i16 9502, i16 9503, i16 9504, i16 9505, i16 9506, i16 9507, i16 9508, i16 9509, i16 9510, i16 9511, i16 9512, i16 9513, i16 9514, i16 9515, i16 9516, i16 9517, i16 9518, i16 9519, i16 9520, i16 9521, i16 9522, i16 9523, i16 9524, i16 9525, i16 9526, i16 9527, i16 9528, i16 9529, i16 9530, i16 9531, i16 9532, i16 9533, i16 9534, i16 9535, i16 9536, i16 9537, i16 9538, i16 9539, i16 9540, i16 9541, i16 9542, i16 9543, i16 9544, i16 9545, i16 9546, i16 9547, i16 -6143, i16 -6142, i16 -6141, i16 -6140, i16 -6139, i16 -6138, i16 -6137, i16 -6136, i16 -6135, i16 -6134, i16 -6133, i16 -6132, i16 -6131, i16 -6130, i16 -6129], [190 x i16] [i16 29404, i16 29405, i16 29407, i16 29410, i16 29411, i16 29412, i16 29413, i16 29414, i16 29415, i16 29418, i16 29419, i16 29429, i16 29430, i16 29433, i16 29437, i16 29438, i16 29439, i16 29440, i16 29442, i16 29444, i16 29445, i16 29446, i16 29447, i16 29448, i16 29449, i16 29451, i16 29452, i16 29453, i16 29455, i16 29456, i16 29457, i16 29458, i16 29460, i16 29464, i16 29465, i16 29466, i16 29471, i16 29472, i16 29475, i16 29476, i16 29478, i16 29479, i16 29480, i16 29485, i16 29487, i16 29488, i16 29490, i16 29491, i16 29493, i16 29494, i16 29498, i16 29499, i16 29500, i16 29501, i16 29504, i16 29505, i16 29506, i16 29507, i16 29508, i16 29509, i16 29510, i16 29511, i16 29512, i16 29513, i16 29514, i16 29515, i16 29516, i16 29518, i16 29519, i16 29521, i16 29523, i16 29524, i16 29525, i16 29526, i16 29528, i16 29529, i16 29530, i16 29531, i16 29532, i16 29533, i16 29534, i16 29535, i16 29537, i16 29538, i16 29539, i16 29540, i16 29541, i16 29542, i16 29543, i16 29544, i16 29545, i16 29546, i16 29547, i16 29550, i16 29552, i16 29553, i16 -8192, i16 -8191, i16 -8190, i16 -8189, i16 -8188, i16 -8187, i16 -8186, i16 -8185, i16 -8184, i16 -8183, i16 -8182, i16 -8181, i16 -8180, i16 -8179, i16 -8178, i16 -8177, i16 -8176, i16 -8175, i16 -8174, i16 -8173, i16 -8172, i16 -8171, i16 -8170, i16 -8169, i16 -8168, i16 -8167, i16 -8166, i16 -8165, i16 -8164, i16 -8163, i16 -8162, i16 -8161, i16 -8160, i16 -8159, i16 -8158, i16 -8157, i16 -8156, i16 -8155, i16 -8154, i16 -8153, i16 -8152, i16 -8151, i16 -8150, i16 -8149, i16 -8148, i16 -8147, i16 -8146, i16 -8145, i16 -8144, i16 -8143, i16 -8142, i16 -8141, i16 -8140, i16 -8139, i16 -8138, i16 -8137, i16 -8136, i16 -8135, i16 -8134, i16 -8133, i16 -8132, i16 -8131, i16 -8130, i16 -8129, i16 -8128, i16 -8127, i16 -8126, i16 -8125, i16 -8124, i16 -8123, i16 -8122, i16 -8121, i16 -8120, i16 -8119, i16 -8118, i16 -8117, i16 -8116, i16 -8115, i16 -8114, i16 -8113, i16 -8112, i16 -8111, i16 -8110, i16 -8109, i16 -8108, i16 -8107, i16 -8106, i16 -8105, i16 -8104, i16 -8103, i16 -8102, i16 -8101, i16 -8100, i16 -8099], [190 x i16] [i16 29554, i16 29555, i16 29556, i16 29557, i16 29558, i16 29559, i16 29560, i16 29561, i16 29562, i16 29563, i16 29564, i16 29565, i16 29567, i16 29568, i16 29569, i16 29570, i16 29571, i16 29573, i16 29574, i16 29576, i16 29578, i16 29580, i16 29581, i16 29583, i16 29584, i16 29586, i16 29587, i16 29588, i16 29589, i16 29591, i16 29592, i16 29593, i16 29594, i16 29596, i16 29597, i16 29598, i16 29600, i16 29601, i16 29603, i16 29604, i16 29605, i16 29606, i16 29607, i16 29608, i16 29610, i16 29612, i16 29613, i16 29617, i16 29620, i16 29621, i16 29622, i16 29624, i16 29625, i16 29628, i16 29629, i16 29630, i16 29631, i16 29633, i16 29635, i16 29636, i16 29637, i16 29638, i16 29639, i16 29643, i16 29644, i16 29646, i16 29650, i16 29651, i16 29652, i16 29653, i16 29654, i16 29655, i16 29656, i16 29658, i16 29659, i16 29660, i16 29661, i16 29663, i16 29665, i16 29666, i16 29667, i16 29668, i16 29670, i16 29672, i16 29674, i16 29675, i16 29676, i16 29678, i16 29679, i16 29680, i16 29681, i16 29683, i16 29684, i16 29685, i16 29686, i16 29687, i16 -8098, i16 -8097, i16 -8096, i16 -8095, i16 -8094, i16 -8093, i16 -8092, i16 -8091, i16 -8090, i16 -8089, i16 -8088, i16 -8087, i16 -8086, i16 -8085, i16 -8084, i16 -8083, i16 -8082, i16 -8081, i16 -8080, i16 -8079, i16 -8078, i16 -8077, i16 -8076, i16 -8075, i16 -8074, i16 -8073, i16 -8072, i16 -8071, i16 -8070, i16 -8069, i16 -8068, i16 -8067, i16 -8066, i16 -8065, i16 -8064, i16 -8063, i16 -8062, i16 -8061, i16 -8060, i16 -8059, i16 -8058, i16 -8057, i16 -8056, i16 -8055, i16 -8054, i16 -8053, i16 -8052, i16 -8051, i16 -8050, i16 -8049, i16 -8048, i16 -8047, i16 -8046, i16 -8045, i16 -8044, i16 -8043, i16 -8042, i16 -8041, i16 -8040, i16 -8039, i16 -8038, i16 -8037, i16 -8036, i16 -8035, i16 -8034, i16 -8033, i16 -8032, i16 -8031, i16 -8030, i16 -8029, i16 -8028, i16 -8027, i16 -8026, i16 -8025, i16 -8024, i16 -8023, i16 -8022, i16 -8021, i16 -8020, i16 -8019, i16 -8018, i16 -8017, i16 -8016, i16 -8015, i16 -8014, i16 -8013, i16 -8012, i16 -8011, i16 -8010, i16 -8009, i16 -8008, i16 -8007, i16 -8006, i16 -8005], [190 x i16] [i16 29688, i16 29689, i16 29690, i16 29691, i16 29692, i16 29693, i16 29694, i16 29695, i16 29696, i16 29697, i16 29698, i16 29700, i16 29703, i16 29704, i16 29707, i16 29708, i16 29709, i16 29710, i16 29713, i16 29714, i16 29715, i16 29716, i16 29717, i16 29718, i16 29719, i16 29720, i16 29721, i16 29724, i16 29725, i16 29726, i16 29727, i16 29728, i16 29729, i16 29731, i16 29732, i16 29735, i16 29737, i16 29739, i16 29741, i16 29743, i16 29745, i16 29746, i16 29751, i16 29752, i16 29753, i16 29754, i16 29755, i16 29757, i16 29758, i16 29759, i16 29760, i16 29762, i16 29763, i16 29764, i16 29765, i16 29766, i16 29767, i16 29768, i16 29769, i16 29770, i16 29771, i16 29772, i16 29773, i16 29774, i16 29775, i16 29776, i16 29777, i16 29778, i16 29779, i16 29780, i16 29782, i16 29784, i16 29789, i16 29792, i16 29793, i16 29794, i16 29795, i16 29796, i16 29797, i16 29798, i16 29799, i16 29800, i16 29801, i16 29802, i16 29803, i16 29804, i16 29806, i16 29807, i16 29809, i16 29810, i16 29811, i16 29812, i16 29813, i16 29816, i16 29817, i16 29818, i16 -8004, i16 -8003, i16 -8002, i16 -8001, i16 -8000, i16 -7999, i16 -7998, i16 -7997, i16 -7996, i16 -7995, i16 -7994, i16 -7993, i16 -7992, i16 -7991, i16 -7990, i16 -7989, i16 -7988, i16 -7987, i16 -7986, i16 -7985, i16 -7984, i16 -7983, i16 -7982, i16 -7981, i16 -7980, i16 -7979, i16 -7978, i16 -7977, i16 -7976, i16 -7975, i16 -7974, i16 -7973, i16 -7972, i16 -7971, i16 -7970, i16 -7969, i16 -7968, i16 -7967, i16 -7966, i16 -7965, i16 -7964, i16 -7963, i16 -7962, i16 -7961, i16 -7960, i16 -7959, i16 -7958, i16 -7957, i16 -7956, i16 -7955, i16 -7954, i16 -7953, i16 -7952, i16 -7951, i16 -7950, i16 -7949, i16 -7948, i16 -7947, i16 -7946, i16 -7945, i16 -7944, i16 -7943, i16 -7942, i16 -7941, i16 -7940, i16 -7939, i16 -7938, i16 -7937, i16 -7936, i16 -7935, i16 -7934, i16 -7933, i16 -7932, i16 -7931, i16 -7930, i16 -7929, i16 -7928, i16 -7927, i16 -7926, i16 -7925, i16 -7924, i16 -7923, i16 -7922, i16 -7921, i16 -7920, i16 -7919, i16 -7918, i16 -7917, i16 -7916, i16 -7915, i16 -7914, i16 -7913, i16 -7912, i16 -7911], [190 x i16] [i16 29819, i16 29820, i16 29821, i16 29823, i16 29826, i16 29828, i16 29829, i16 29830, i16 29832, i16 29833, i16 29834, i16 29836, i16 29837, i16 29839, i16 29841, i16 29842, i16 29843, i16 29844, i16 29845, i16 29846, i16 29847, i16 29848, i16 29849, i16 29850, i16 29851, i16 29853, i16 29855, i16 29856, i16 29857, i16 29858, i16 29859, i16 29860, i16 29861, i16 29862, i16 29866, i16 29867, i16 29868, i16 29869, i16 29870, i16 29871, i16 29872, i16 29873, i16 29874, i16 29875, i16 29876, i16 29877, i16 29878, i16 29879, i16 29880, i16 29881, i16 29883, i16 29884, i16 29885, i16 29886, i16 29887, i16 29888, i16 29889, i16 29890, i16 29891, i16 29892, i16 29893, i16 29894, i16 29895, i16 29896, i16 29897, i16 29898, i16 29899, i16 29900, i16 29901, i16 29902, i16 29903, i16 29904, i16 29905, i16 29907, i16 29908, i16 29909, i16 29910, i16 29911, i16 29912, i16 29913, i16 29914, i16 29915, i16 29917, i16 29919, i16 29921, i16 29925, i16 29927, i16 29928, i16 29929, i16 29930, i16 29931, i16 29932, i16 29933, i16 29936, i16 29937, i16 29938, i16 -7910, i16 -7909, i16 -7908, i16 -7907, i16 -7906, i16 -7905, i16 -7904, i16 -7903, i16 -7902, i16 -7901, i16 -7900, i16 -7899, i16 -7898, i16 -7897, i16 -7896, i16 -7895, i16 -7894, i16 -7893, i16 -7892, i16 -7891, i16 -7890, i16 -7889, i16 -7888, i16 -7887, i16 -7886, i16 -7885, i16 -7884, i16 -7883, i16 -7882, i16 -7881, i16 -7880, i16 -7879, i16 -7878, i16 -7877, i16 -7876, i16 -7875, i16 -7874, i16 -7873, i16 -7872, i16 -7871, i16 -7870, i16 -7869, i16 -7868, i16 -7867, i16 -7866, i16 -7865, i16 -7864, i16 -7863, i16 -7862, i16 -7861, i16 -7860, i16 -7859, i16 -7858, i16 -7857, i16 -7856, i16 -7855, i16 -7854, i16 -7853, i16 -7852, i16 -7851, i16 -7850, i16 -7849, i16 -7848, i16 -7847, i16 -7846, i16 -7845, i16 -7844, i16 -7843, i16 -7842, i16 -7841, i16 -7840, i16 -7839, i16 -7838, i16 -7837, i16 -7836, i16 -7835, i16 -7834, i16 -7833, i16 -7832, i16 -7831, i16 -7830, i16 -7829, i16 -7828, i16 -7827, i16 -7826, i16 -7825, i16 -7824, i16 -7823, i16 -7822, i16 -7821, i16 -7820, i16 -7819, i16 -7818, i16 -7817], [190 x i16] [i16 29939, i16 29941, i16 29944, i16 29945, i16 29946, i16 29947, i16 29948, i16 29949, i16 29950, i16 29952, i16 29953, i16 29954, i16 29955, i16 29957, i16 29958, i16 29959, i16 29960, i16 29961, i16 29962, i16 29963, i16 29964, i16 29966, i16 29968, i16 29970, i16 29972, i16 29973, i16 29974, i16 29975, i16 29979, i16 29981, i16 29982, i16 29984, i16 29985, i16 29986, i16 29987, i16 29988, i16 29990, i16 29991, i16 29994, i16 29998, i16 30004, i16 30006, i16 30009, i16 30012, i16 30013, i16 30015, i16 30017, i16 30018, i16 30019, i16 30020, i16 30022, i16 30023, i16 30025, i16 30026, i16 30029, i16 30032, i16 30033, i16 30034, i16 30035, i16 30037, i16 30038, i16 30039, i16 30040, i16 30045, i16 30046, i16 30047, i16 30048, i16 30049, i16 30050, i16 30051, i16 30052, i16 30055, i16 30056, i16 30057, i16 30059, i16 30060, i16 30061, i16 30062, i16 30063, i16 30064, i16 30065, i16 30067, i16 30069, i16 30070, i16 30071, i16 30074, i16 30075, i16 30076, i16 30077, i16 30078, i16 30080, i16 30081, i16 30082, i16 30084, i16 30085, i16 30087, i16 -7816, i16 -7815, i16 -7814, i16 -7813, i16 -7812, i16 -7811, i16 -7810, i16 -7809, i16 -7808, i16 -7807, i16 -7806, i16 -7805, i16 -7804, i16 -7803, i16 -7802, i16 -7801, i16 -7800, i16 -7799, i16 -7798, i16 -7797, i16 -7796, i16 -7795, i16 -7794, i16 -7793, i16 -7792, i16 -7791, i16 -7790, i16 -7789, i16 -7788, i16 -7787, i16 -7786, i16 -7785, i16 -7784, i16 -7783, i16 -7782, i16 -7781, i16 -7780, i16 -7779, i16 -7778, i16 -7777, i16 -7776, i16 -7775, i16 -7774, i16 -7773, i16 -7772, i16 -7771, i16 -7770, i16 -7769, i16 -7768, i16 -7767, i16 -7766, i16 -7765, i16 -7764, i16 -7763, i16 -7762, i16 -7761, i16 -7760, i16 -7759, i16 -7758, i16 -7757, i16 -7756, i16 -7755, i16 -7754, i16 -7753, i16 -7752, i16 -7751, i16 -7750, i16 -7749, i16 -7748, i16 -7747, i16 -7746, i16 -7745, i16 -7744, i16 -7743, i16 -7742, i16 -7741, i16 -7740, i16 -7739, i16 -7738, i16 -7737, i16 -7736, i16 -7735, i16 -7734, i16 -7733, i16 -7732, i16 -7731, i16 -7730, i16 -7729, i16 -7728, i16 -7727, i16 -7726, i16 -7725, i16 -7724, i16 -7723], [190 x i16] [i16 30088, i16 30089, i16 30090, i16 30092, i16 30093, i16 30094, i16 30096, i16 30099, i16 30101, i16 30104, i16 30107, i16 30108, i16 30110, i16 30114, i16 30118, i16 30119, i16 30120, i16 30121, i16 30122, i16 30125, i16 30134, i16 30135, i16 30138, i16 30139, i16 30143, i16 30144, i16 30145, i16 30150, i16 30155, i16 30156, i16 30158, i16 30159, i16 30160, i16 30161, i16 30163, i16 30167, i16 30169, i16 30170, i16 30172, i16 30173, i16 30175, i16 30176, i16 30177, i16 30181, i16 30185, i16 30188, i16 30189, i16 30190, i16 30191, i16 30194, i16 30195, i16 30197, i16 30198, i16 30199, i16 30200, i16 30202, i16 30203, i16 30205, i16 30206, i16 30210, i16 30212, i16 30214, i16 30215, i16 30216, i16 30217, i16 30219, i16 30221, i16 30222, i16 30223, i16 30225, i16 30226, i16 30227, i16 30228, i16 30230, i16 30234, i16 30236, i16 30237, i16 30238, i16 30241, i16 30243, i16 30247, i16 30248, i16 30252, i16 30254, i16 30255, i16 30257, i16 30258, i16 30262, i16 30263, i16 30265, i16 30266, i16 30267, i16 30269, i16 30273, i16 30274, i16 30276, i16 -7722, i16 -7721, i16 -7720, i16 -7719, i16 -7718, i16 -7717, i16 -7716, i16 -7715, i16 -7714, i16 -7713, i16 -7712, i16 -7711, i16 -7710, i16 -7709, i16 -7708, i16 -7707, i16 -7706, i16 -7705, i16 -7704, i16 -7703, i16 -7702, i16 -7701, i16 -7700, i16 -7699, i16 -7698, i16 -7697, i16 -7696, i16 -7695, i16 -7694, i16 -7693, i16 -7692, i16 -7691, i16 -7690, i16 -7689, i16 -7688, i16 -7687, i16 -7686, i16 -7685, i16 -7684, i16 -7683, i16 -7682, i16 -7681, i16 -7680, i16 -7679, i16 -7678, i16 -7677, i16 -7676, i16 -7675, i16 -7674, i16 -7673, i16 -7672, i16 -7671, i16 -7670, i16 -7669, i16 -7668, i16 -7667, i16 -7666, i16 -7665, i16 -7664, i16 -7663, i16 -7662, i16 -7661, i16 -7660, i16 -7659, i16 -7658, i16 -7657, i16 -7656, i16 -7655, i16 -7654, i16 -7653, i16 -7652, i16 -7651, i16 -7650, i16 -7649, i16 -7648, i16 -7647, i16 -7646, i16 -7645, i16 -7644, i16 -7643, i16 -7642, i16 -7641, i16 -7640, i16 -7639, i16 -7638, i16 -7637, i16 -7636, i16 -7635, i16 -7634, i16 -7633, i16 -7632, i16 -7631, i16 -7630, i16 -7629], [190 x i16] [i16 30277, i16 30278, i16 30279, i16 30280, i16 30281, i16 30282, i16 30283, i16 30286, i16 30287, i16 30288, i16 30289, i16 30290, i16 30291, i16 30293, i16 30295, i16 30296, i16 30297, i16 30298, i16 30299, i16 30301, i16 30303, i16 30304, i16 30305, i16 30306, i16 30308, i16 30309, i16 30310, i16 30311, i16 30312, i16 30313, i16 30314, i16 30316, i16 30317, i16 30318, i16 30320, i16 30321, i16 30322, i16 30323, i16 30324, i16 30325, i16 30326, i16 30327, i16 30329, i16 30330, i16 30332, i16 30335, i16 30336, i16 30337, i16 30339, i16 30341, i16 30345, i16 30346, i16 30348, i16 30349, i16 30351, i16 30352, i16 30354, i16 30356, i16 30357, i16 30359, i16 30360, i16 30362, i16 30363, i16 30364, i16 30365, i16 30366, i16 30367, i16 30368, i16 30369, i16 30370, i16 30371, i16 30373, i16 30374, i16 30375, i16 30376, i16 30377, i16 30378, i16 30379, i16 30380, i16 30381, i16 30383, i16 30384, i16 30387, i16 30389, i16 30390, i16 30391, i16 30392, i16 30393, i16 30394, i16 30395, i16 30396, i16 30397, i16 30398, i16 30400, i16 30401, i16 30403, i16 21834, i16 -27073, i16 22467, i16 25384, i16 21710, i16 21769, i16 21696, i16 30353, i16 30284, i16 -31428, i16 30702, i16 -32130, i16 30861, i16 29233, i16 -26984, i16 -26739, i16 27688, i16 23433, i16 20474, i16 25353, i16 26263, i16 23736, i16 -32518, i16 26696, i16 -32594, i16 26114, i16 30414, i16 20985, i16 25942, i16 29100, i16 32753, i16 -30588, i16 20658, i16 22885, i16 25034, i16 28595, i16 -32083, i16 25420, i16 25170, i16 21485, i16 21543, i16 31494, i16 20843, i16 30116, i16 24052, i16 25300, i16 -29237, i16 -26762, i16 25226, i16 -32743, i16 22365, i16 -26824, i16 32610, i16 29240, i16 30333, i16 26575, i16 30334, i16 25670, i16 20336, i16 -29403, i16 25308, i16 31255, i16 26001, i16 29677, i16 25644, i16 25203, i16 -32212, i16 -26495, i16 26495, i16 29256, i16 25198, i16 25292, i16 20276, i16 29923, i16 21322, i16 21150, i16 32458, i16 -28506, i16 24110, i16 26758, i16 27036, i16 -32384, i16 32465, i16 26834, i16 30917, i16 -31092, i16 -27311, i16 20621, i16 -29660, i16 -32034, i16 -32546, i16 21253, i16 -30446, i16 21093], [190 x i16] [i16 30404, i16 30407, i16 30409, i16 30411, i16 30412, i16 30419, i16 30421, i16 30425, i16 30426, i16 30428, i16 30429, i16 30430, i16 30432, i16 30433, i16 30434, i16 30435, i16 30436, i16 30438, i16 30439, i16 30440, i16 30441, i16 30442, i16 30443, i16 30444, i16 30445, i16 30448, i16 30451, i16 30453, i16 30454, i16 30455, i16 30458, i16 30459, i16 30461, i16 30463, i16 30464, i16 30466, i16 30467, i16 30469, i16 30470, i16 30474, i16 30476, i16 30478, i16 30479, i16 30480, i16 30481, i16 30482, i16 30483, i16 30484, i16 30485, i16 30486, i16 30487, i16 30488, i16 30491, i16 30492, i16 30493, i16 30494, i16 30497, i16 30499, i16 30500, i16 30501, i16 30503, i16 30506, i16 30507, i16 30508, i16 30510, i16 30512, i16 30513, i16 30514, i16 30515, i16 30516, i16 30521, i16 30523, i16 30525, i16 30526, i16 30527, i16 30530, i16 30532, i16 30533, i16 30534, i16 30536, i16 30537, i16 30538, i16 30539, i16 30540, i16 30541, i16 30542, i16 30543, i16 30546, i16 30547, i16 30548, i16 30549, i16 30550, i16 30551, i16 30552, i16 30553, i16 30556, i16 -31356, i16 -26887, i16 20445, i16 22561, i16 -26255, i16 23453, i16 25265, i16 25253, i16 26292, i16 -29575, i16 -25459, i16 29190, i16 26479, i16 30865, i16 24754, i16 21329, i16 21271, i16 -28792, i16 -32564, i16 -29411, i16 -27487, i16 20493, i16 29384, i16 22791, i16 24811, i16 28953, i16 -30549, i16 22868, i16 -32017, i16 26412, i16 31528, i16 23849, i16 32503, i16 29997, i16 27893, i16 -29082, i16 -28680, i16 -28612, i16 -24773, i16 27604, i16 -28391, i16 31508, i16 24444, i16 30887, i16 -31530, i16 -31427, i16 27605, i16 27609, i16 27606, i16 24065, i16 24199, i16 30201, i16 -27155, i16 25949, i16 24330, i16 24517, i16 -28769, i16 22721, i16 -32318, i16 -28545, i16 -27045, i16 -26707, i16 -28743, i16 32534, i16 -29396, i16 25153, i16 20415, i16 21464, i16 21342, i16 -28760, i16 -28759, i16 -28757, i16 -28595, i16 26631, i16 24426, i16 -32360, i16 -30616, i16 -25386, i16 24971, i16 21035, i16 30250, i16 24428, i16 25996, i16 28626, i16 28392, i16 23486, i16 25672, i16 20853, i16 20912, i16 26564, i16 19993, i16 31177, i16 -26244, i16 28851], [190 x i16] [i16 30557, i16 30558, i16 30559, i16 30560, i16 30564, i16 30567, i16 30569, i16 30570, i16 30573, i16 30574, i16 30575, i16 30576, i16 30577, i16 30578, i16 30579, i16 30580, i16 30581, i16 30582, i16 30583, i16 30584, i16 30586, i16 30587, i16 30588, i16 30593, i16 30594, i16 30595, i16 30598, i16 30599, i16 30600, i16 30601, i16 30602, i16 30603, i16 30607, i16 30608, i16 30611, i16 30612, i16 30613, i16 30614, i16 30615, i16 30616, i16 30617, i16 30618, i16 30619, i16 30620, i16 30621, i16 30622, i16 30625, i16 30627, i16 30628, i16 30630, i16 30632, i16 30635, i16 30637, i16 30638, i16 30639, i16 30641, i16 30642, i16 30644, i16 30646, i16 30647, i16 30648, i16 30649, i16 30650, i16 30652, i16 30654, i16 30656, i16 30657, i16 30658, i16 30659, i16 30660, i16 30661, i16 30662, i16 30663, i16 30664, i16 30665, i16 30666, i16 30667, i16 30668, i16 30670, i16 30671, i16 30672, i16 30673, i16 30674, i16 30675, i16 30676, i16 30677, i16 30678, i16 30680, i16 30681, i16 30682, i16 30685, i16 30686, i16 30687, i16 30688, i16 30689, i16 30692, i16 30149, i16 24182, i16 29627, i16 -31776, i16 25773, i16 25320, i16 -27467, i16 27874, i16 21338, i16 21187, i16 25615, i16 -27454, i16 31636, i16 20271, i16 24091, i16 -32202, i16 -32490, i16 -32374, i16 28196, i16 27850, i16 -25997, i16 25429, i16 21340, i16 21754, i16 -30619, i16 22496, i16 19981, i16 24067, i16 27493, i16 31807, i16 -28440, i16 24598, i16 25830, i16 29468, i16 -30527, i16 26448, i16 25165, i16 -29406, i16 30572, i16 -29143, i16 -28217, i16 24425, i16 -31780, i16 -31455, i16 -26352, i16 21442, i16 -31083, i16 27531, i16 24813, i16 24808, i16 28799, i16 -32051, i16 -32207, i16 20179, i16 27815, i16 -31281, i16 25805, i16 31961, i16 27133, i16 26361, i16 -31927, i16 21397, i16 31574, i16 20391, i16 20876, i16 27979, i16 23618, i16 -29075, i16 25554, i16 21449, i16 -31956, i16 -31946, i16 26597, i16 30900, i16 25661, i16 23519, i16 23700, i16 24046, i16 -29721, i16 25286, i16 26612, i16 -29574, i16 25600, i16 25530, i16 -30903, i16 -26229, i16 -29673, i16 32544, i16 -27406, i16 20135, i16 -27120, i16 -26460, i16 26124, i16 29462], [190 x i16] [i16 30694, i16 30696, i16 30698, i16 30703, i16 30704, i16 30705, i16 30706, i16 30708, i16 30709, i16 30711, i16 30713, i16 30714, i16 30715, i16 30716, i16 30723, i16 30724, i16 30725, i16 30726, i16 30727, i16 30728, i16 30730, i16 30731, i16 30734, i16 30735, i16 30736, i16 30739, i16 30741, i16 30745, i16 30747, i16 30750, i16 30752, i16 30753, i16 30754, i16 30756, i16 30760, i16 30762, i16 30763, i16 30766, i16 30767, i16 30769, i16 30770, i16 30771, i16 30773, i16 30774, i16 30781, i16 30783, i16 30785, i16 30786, i16 30787, i16 30788, i16 30790, i16 30792, i16 30793, i16 30794, i16 30795, i16 30797, i16 30799, i16 30801, i16 30803, i16 30804, i16 30808, i16 30809, i16 30810, i16 30811, i16 30812, i16 30814, i16 30815, i16 30816, i16 30817, i16 30818, i16 30819, i16 30820, i16 30821, i16 30822, i16 30823, i16 30824, i16 30825, i16 30831, i16 30832, i16 30833, i16 30834, i16 30835, i16 30836, i16 30837, i16 30838, i16 30840, i16 30841, i16 30842, i16 30843, i16 30845, i16 30846, i16 30847, i16 30848, i16 30849, i16 30850, i16 30851, i16 22330, i16 23581, i16 24120, i16 -27265, i16 20607, i16 -32608, i16 21378, i16 25950, i16 30021, i16 21809, i16 20513, i16 -29307, i16 25220, i16 -27490, i16 26397, i16 22066, i16 28526, i16 24034, i16 21557, i16 28818, i16 -28826, i16 25199, i16 25764, i16 25507, i16 24443, i16 28552, i16 -28428, i16 -32285, i16 -28752, i16 23576, i16 26216, i16 24561, i16 27785, i16 -27064, i16 -29311, i16 -30612, i16 25745, i16 31216, i16 22478, i16 27225, i16 25104, i16 21576, i16 20056, i16 31243, i16 24809, i16 28548, i16 -29734, i16 25215, i16 -28642, i16 -25973, i16 31204, i16 21507, i16 30196, i16 25345, i16 21273, i16 27744, i16 -28705, i16 24347, i16 -26000, i16 -32709, i16 -24705, i16 20360, i16 23610, i16 -29340, i16 32709, i16 26021, i16 28861, i16 20805, i16 20914, i16 -31125, i16 23815, i16 23456, i16 25277, i16 -28308, i16 30068, i16 -29172, i16 31264, i16 24833, i16 31609, i16 20167, i16 32504, i16 30597, i16 19985, i16 -32275, i16 21021, i16 20986, i16 27249, i16 21416, i16 -29049, i16 -27388, i16 -26929, i16 28353, i16 -27036, i16 26970], [190 x i16] [i16 30852, i16 30853, i16 30854, i16 30856, i16 30858, i16 30859, i16 30863, i16 30864, i16 30866, i16 30868, i16 30869, i16 30870, i16 30873, i16 30877, i16 30878, i16 30880, i16 30882, i16 30884, i16 30886, i16 30888, i16 30889, i16 30890, i16 30891, i16 30892, i16 30893, i16 30894, i16 30895, i16 30901, i16 30902, i16 30903, i16 30904, i16 30906, i16 30907, i16 30908, i16 30909, i16 30911, i16 30912, i16 30914, i16 30915, i16 30916, i16 30918, i16 30919, i16 30920, i16 30924, i16 30925, i16 30926, i16 30927, i16 30929, i16 30930, i16 30931, i16 30934, i16 30935, i16 30936, i16 30938, i16 30939, i16 30940, i16 30941, i16 30942, i16 30943, i16 30944, i16 30945, i16 30946, i16 30947, i16 30948, i16 30949, i16 30950, i16 30951, i16 30953, i16 30954, i16 30955, i16 30957, i16 30958, i16 30959, i16 30960, i16 30961, i16 30963, i16 30965, i16 30966, i16 30968, i16 30969, i16 30971, i16 30972, i16 30973, i16 30974, i16 30975, i16 30976, i16 30978, i16 30979, i16 30980, i16 30982, i16 30983, i16 30984, i16 30985, i16 30986, i16 30987, i16 30988, i16 30784, i16 20648, i16 30679, i16 25616, i16 -30234, i16 22788, i16 25571, i16 24029, i16 31359, i16 26941, i16 20256, i16 -32199, i16 21912, i16 20018, i16 30126, i16 31383, i16 24162, i16 24202, i16 -27153, i16 21019, i16 21561, i16 28810, i16 25462, i16 -27356, i16 22402, i16 26149, i16 26943, i16 -28281, i16 21767, i16 28147, i16 32431, i16 -30686, i16 25139, i16 32496, i16 30133, i16 -31960, i16 30913, i16 -26932, i16 -28770, i16 24904, i16 29943, i16 -29747, i16 27492, i16 21050, i16 -29360, i16 27425, i16 -32662, i16 -31631, i16 22257, i16 21254, i16 20174, i16 19995, i16 20945, i16 31895, i16 -28277, i16 31751, i16 20419, i16 -29057, i16 31713, i16 31388, i16 25703, i16 23828, i16 20652, i16 -32506, i16 30209, i16 31929, i16 28140, i16 32736, i16 26449, i16 23384, i16 23544, i16 30923, i16 25774, i16 25619, i16 25514, i16 25387, i16 -27367, i16 25645, i16 -28738, i16 31572, i16 30249, i16 25171, i16 22823, i16 21574, i16 27513, i16 20643, i16 25140, i16 24102, i16 27526, i16 20195, i16 -29385, i16 -30581, i16 24453, i16 -28626], [190 x i16] [i16 30989, i16 30990, i16 30991, i16 30992, i16 30993, i16 30994, i16 30996, i16 30997, i16 30998, i16 30999, i16 31000, i16 31001, i16 31002, i16 31003, i16 31004, i16 31005, i16 31007, i16 31008, i16 31009, i16 31010, i16 31011, i16 31013, i16 31014, i16 31015, i16 31016, i16 31017, i16 31018, i16 31019, i16 31020, i16 31021, i16 31022, i16 31023, i16 31024, i16 31025, i16 31026, i16 31027, i16 31029, i16 31030, i16 31031, i16 31032, i16 31033, i16 31037, i16 31039, i16 31042, i16 31043, i16 31044, i16 31045, i16 31047, i16 31050, i16 31051, i16 31052, i16 31053, i16 31054, i16 31055, i16 31056, i16 31057, i16 31058, i16 31060, i16 31061, i16 31064, i16 31065, i16 31073, i16 31075, i16 31076, i16 31078, i16 31081, i16 31082, i16 31083, i16 31084, i16 31086, i16 31088, i16 31089, i16 31090, i16 31091, i16 31092, i16 31093, i16 31094, i16 31097, i16 31099, i16 31100, i16 31101, i16 31102, i16 31103, i16 31106, i16 31107, i16 31110, i16 31111, i16 31112, i16 31113, i16 31115, i16 31116, i16 31117, i16 31118, i16 31120, i16 31121, i16 31122, i16 24608, i16 -32707, i16 25285, i16 20025, i16 21333, i16 -28424, i16 25528, i16 -32570, i16 26086, i16 27694, i16 20294, i16 24814, i16 28129, i16 -29730, i16 24377, i16 -31029, i16 24403, i16 25377, i16 20826, i16 -31903, i16 26723, i16 20992, i16 25443, i16 -29112, i16 20498, i16 23707, i16 31095, i16 23548, i16 21040, i16 31291, i16 24764, i16 -28589, i16 30423, i16 24503, i16 24471, i16 30340, i16 -29076, i16 28783, i16 30331, i16 31561, i16 30634, i16 20979, i16 -28525, i16 22564, i16 20302, i16 28404, i16 -28694, i16 25932, i16 31515, i16 29380, i16 28068, i16 32735, i16 23265, i16 25269, i16 24213, i16 22320, i16 -31614, i16 31532, i16 24093, i16 24351, i16 -28654, i16 32532, i16 -26464, i16 25474, i16 28359, i16 30872, i16 28857, i16 20856, i16 -26789, i16 22443, i16 30005, i16 20291, i16 30008, i16 24215, i16 24806, i16 22880, i16 28096, i16 27583, i16 30857, i16 21500, i16 -26923, i16 20939, i16 20993, i16 25481, i16 21514, i16 -27501, i16 -29693, i16 -29236, i16 29241, i16 30879, i16 -30858, i16 -28691, i16 -29683, i16 21472], [190 x i16] [i16 31123, i16 31124, i16 31125, i16 31126, i16 31127, i16 31128, i16 31129, i16 31131, i16 31132, i16 31133, i16 31134, i16 31135, i16 31136, i16 31137, i16 31138, i16 31139, i16 31140, i16 31141, i16 31142, i16 31144, i16 31145, i16 31146, i16 31147, i16 31148, i16 31149, i16 31150, i16 31151, i16 31152, i16 31153, i16 31154, i16 31156, i16 31157, i16 31158, i16 31159, i16 31160, i16 31164, i16 31167, i16 31170, i16 31172, i16 31173, i16 31175, i16 31176, i16 31178, i16 31180, i16 31182, i16 31183, i16 31184, i16 31187, i16 31188, i16 31190, i16 31191, i16 31193, i16 31194, i16 31195, i16 31196, i16 31197, i16 31198, i16 31200, i16 31201, i16 31202, i16 31205, i16 31208, i16 31210, i16 31212, i16 31214, i16 31217, i16 31218, i16 31219, i16 31220, i16 31221, i16 31222, i16 31223, i16 31225, i16 31226, i16 31228, i16 31230, i16 31231, i16 31233, i16 31236, i16 31237, i16 31239, i16 31240, i16 31241, i16 31242, i16 31244, i16 31247, i16 31248, i16 31249, i16 31250, i16 31251, i16 31253, i16 31254, i16 31256, i16 31257, i16 31259, i16 31260, i16 19969, i16 30447, i16 21486, i16 -27511, i16 -26506, i16 -24818, i16 -27347, i16 23450, i16 -29790, i16 20002, i16 19996, i16 20908, i16 -31645, i16 25026, i16 21160, i16 26635, i16 20375, i16 24683, i16 20923, i16 27934, i16 20828, i16 25238, i16 26007, i16 -27039, i16 -29626, i16 -28649, i16 30168, i16 -28419, i16 30563, i16 27602, i16 29322, i16 29420, i16 -29701, i16 22581, i16 30585, i16 -29364, i16 26460, i16 -27328, i16 -32614, i16 24230, i16 28193, i16 22930, i16 31471, i16 30701, i16 -27333, i16 27573, i16 26029, i16 32526, i16 22534, i16 20817, i16 -27105, i16 23545, i16 22697, i16 21544, i16 -29070, i16 25958, i16 -26497, i16 22244, i16 -27491, i16 30462, i16 -28607, i16 25479, i16 21702, i16 22810, i16 22842, i16 22427, i16 -29006, i16 26421, i16 -29190, i16 -32203, i16 21057, i16 24816, i16 22549, i16 -30978, i16 23784, i16 -25019, i16 20420, i16 -26467, i16 -29767, i16 23077, i16 24694, i16 21380, i16 25212, i16 -28593, i16 -28414, i16 -26241, i16 24681, i16 -32756, i16 20799, i16 -32717, i16 23572, i16 -26251, i16 27953, i16 20108], [190 x i16] [i16 31261, i16 31263, i16 31265, i16 31266, i16 31268, i16 31269, i16 31270, i16 31271, i16 31272, i16 31273, i16 31274, i16 31275, i16 31276, i16 31277, i16 31278, i16 31279, i16 31280, i16 31281, i16 31282, i16 31284, i16 31285, i16 31286, i16 31288, i16 31290, i16 31294, i16 31296, i16 31297, i16 31298, i16 31299, i16 31300, i16 31301, i16 31303, i16 31304, i16 31305, i16 31306, i16 31307, i16 31308, i16 31309, i16 31310, i16 31311, i16 31312, i16 31314, i16 31315, i16 31316, i16 31317, i16 31318, i16 31320, i16 31321, i16 31322, i16 31323, i16 31324, i16 31325, i16 31326, i16 31327, i16 31328, i16 31329, i16 31330, i16 31331, i16 31332, i16 31333, i16 31334, i16 31335, i16 31336, i16 31337, i16 31338, i16 31339, i16 31340, i16 31341, i16 31342, i16 31343, i16 31345, i16 31346, i16 31347, i16 31349, i16 31355, i16 31356, i16 31357, i16 31358, i16 31362, i16 31365, i16 31367, i16 31369, i16 31370, i16 31371, i16 31372, i16 31374, i16 31375, i16 31376, i16 31379, i16 31380, i16 31385, i16 31386, i16 31387, i16 31390, i16 31393, i16 31394, i16 -29392, i16 21457, i16 32602, i16 31567, i16 20240, i16 20047, i16 -27136, i16 27861, i16 29648, i16 -31255, i16 24070, i16 30058, i16 32763, i16 27146, i16 30718, i16 -27502, i16 32321, i16 20961, i16 28902, i16 21453, i16 -28716, i16 -31997, i16 -29399, i16 29359, i16 -26259, i16 27867, i16 22346, i16 -32077, i16 26041, i16 -32598, i16 25151, i16 -27086, i16 22952, i16 20223, i16 -29761, i16 32442, i16 25918, i16 -31758, i16 -26786, i16 21857, i16 -26402, i16 -32603, i16 21290, i16 -29699, i16 21536, i16 -32582, i16 24223, i16 27832, i16 -29383, i16 -32084, i16 -28326, i16 21545, i16 27675, i16 20998, i16 32439, i16 22367, i16 28954, i16 27774, i16 31881, i16 22859, i16 20221, i16 24575, i16 24868, i16 31914, i16 20016, i16 23553, i16 26539, i16 -30974, i16 23792, i16 -27381, i16 -26418, i16 30127, i16 28925, i16 -28638, i16 20911, i16 32541, i16 -29763, i16 22857, i16 20964, i16 20315, i16 21542, i16 22827, i16 25975, i16 -32604, i16 23413, i16 25206, i16 25282, i16 -28784, i16 24133, i16 27679, i16 31526, i16 20239, i16 20440, i16 26381], [190 x i16] [i16 31395, i16 31396, i16 31399, i16 31401, i16 31402, i16 31403, i16 31406, i16 31407, i16 31408, i16 31409, i16 31410, i16 31412, i16 31413, i16 31414, i16 31415, i16 31416, i16 31417, i16 31418, i16 31419, i16 31420, i16 31421, i16 31422, i16 31424, i16 31425, i16 31426, i16 31427, i16 31428, i16 31429, i16 31430, i16 31431, i16 31432, i16 31433, i16 31434, i16 31436, i16 31437, i16 31438, i16 31439, i16 31440, i16 31441, i16 31442, i16 31443, i16 31444, i16 31445, i16 31447, i16 31448, i16 31450, i16 31451, i16 31452, i16 31453, i16 31457, i16 31458, i16 31460, i16 31463, i16 31464, i16 31465, i16 31466, i16 31467, i16 31468, i16 31470, i16 31472, i16 31473, i16 31474, i16 31475, i16 31476, i16 31477, i16 31478, i16 31479, i16 31480, i16 31483, i16 31484, i16 31486, i16 31488, i16 31489, i16 31490, i16 31493, i16 31495, i16 31497, i16 31500, i16 31501, i16 31502, i16 31504, i16 31506, i16 31507, i16 31510, i16 31511, i16 31512, i16 31514, i16 31516, i16 31517, i16 31519, i16 31521, i16 31522, i16 31523, i16 31527, i16 31529, i16 31533, i16 28014, i16 28074, i16 31119, i16 -30543, i16 24343, i16 29995, i16 25242, i16 -28795, i16 20463, i16 -28196, i16 26023, i16 -32465, i16 -32431, i16 24220, i16 -32432, i16 -29324, i16 21103, i16 -30330, i16 -29365, i16 22797, i16 20613, i16 20184, i16 -27108, i16 29238, i16 -32391, i16 -29409, i16 23500, i16 -29789, i16 -27068, i16 22919, i16 32538, i16 21648, i16 22134, i16 22030, i16 -29723, i16 25913, i16 27010, i16 -27495, i16 30422, i16 28297, i16 24178, i16 29976, i16 26438, i16 26577, i16 31487, i16 -32611, i16 -29322, i16 24863, i16 31174, i16 25954, i16 -29341, i16 20872, i16 21018, i16 -27486, i16 32568, i16 -32613, i16 32434, i16 23703, i16 28207, i16 26464, i16 31705, i16 30347, i16 -25896, i16 -32369, i16 32660, i16 31957, i16 25630, i16 -27312, i16 31295, i16 21578, i16 21733, i16 27468, i16 25601, i16 25096, i16 -25027, i16 -32525, i16 30105, i16 21106, i16 -26775, i16 -31653, i16 26684, i16 -31004, i16 -27135, i16 -26988, i16 -27412, i16 20010, i16 21508, i16 32473, i16 26681, i16 -29217, i16 -32747, i16 26356, i16 24218, i16 32697], [190 x i16] [i16 31535, i16 31536, i16 31538, i16 31540, i16 31541, i16 31542, i16 31543, i16 31545, i16 31547, i16 31549, i16 31551, i16 31552, i16 31553, i16 31554, i16 31555, i16 31556, i16 31558, i16 31560, i16 31562, i16 31565, i16 31566, i16 31571, i16 31573, i16 31575, i16 31577, i16 31580, i16 31582, i16 31583, i16 31585, i16 31587, i16 31588, i16 31589, i16 31590, i16 31591, i16 31592, i16 31593, i16 31594, i16 31595, i16 31596, i16 31597, i16 31599, i16 31600, i16 31603, i16 31604, i16 31606, i16 31608, i16 31610, i16 31612, i16 31613, i16 31615, i16 31617, i16 31618, i16 31619, i16 31620, i16 31622, i16 31623, i16 31624, i16 31625, i16 31626, i16 31627, i16 31628, i16 31630, i16 31631, i16 31633, i16 31634, i16 31635, i16 31638, i16 31640, i16 31641, i16 31642, i16 31643, i16 31646, i16 31647, i16 31648, i16 31651, i16 31652, i16 31653, i16 31662, i16 31663, i16 31664, i16 31666, i16 31667, i16 31669, i16 31670, i16 31671, i16 31673, i16 31674, i16 31675, i16 31676, i16 31677, i16 31678, i16 31679, i16 31680, i16 31682, i16 31683, i16 31684, i16 22466, i16 -32705, i16 26775, i16 24037, i16 25915, i16 21151, i16 24685, i16 -24678, i16 20379, i16 -29012, i16 20844, i16 23467, i16 24339, i16 24041, i16 27742, i16 25329, i16 -29407, i16 20849, i16 -27479, i16 21246, i16 27807, i16 -32033, i16 29399, i16 22434, i16 26500, i16 -29395, i16 22815, i16 -28772, i16 -31801, i16 21653, i16 31629, i16 20272, i16 27837, i16 23396, i16 22993, i16 -24813, i16 21476, i16 -31030, i16 -25944, i16 -29641, i16 -32607, i16 25925, i16 -26498, i16 22266, i16 -26937, i16 21038, i16 29916, i16 21072, i16 23521, i16 25346, i16 -30462, i16 20054, i16 25296, i16 24618, i16 26874, i16 20851, i16 23448, i16 20896, i16 -30270, i16 31649, i16 -26234, i16 32592, i16 24815, i16 28748, i16 -29393, i16 20809, i16 24191, i16 -28645, i16 29808, i16 -30268, i16 22317, i16 30789, i16 24402, i16 -24673, i16 -27142, i16 -28824, i16 -25796, i16 -29727, i16 30328, i16 26690, i16 26588, i16 -29206, i16 -29387, i16 21053, i16 -28790, i16 28378, i16 26829, i16 -27387, i16 -28435, i16 22269, i16 26524, i16 -30471, i16 -28729, i16 21704], [190 x i16] [i16 31685, i16 31688, i16 31689, i16 31690, i16 31691, i16 31693, i16 31694, i16 31695, i16 31696, i16 31698, i16 31700, i16 31701, i16 31702, i16 31703, i16 31704, i16 31707, i16 31708, i16 31710, i16 31711, i16 31712, i16 31714, i16 31715, i16 31716, i16 31719, i16 31720, i16 31721, i16 31723, i16 31724, i16 31725, i16 31727, i16 31728, i16 31730, i16 31731, i16 31732, i16 31733, i16 31734, i16 31736, i16 31737, i16 31738, i16 31739, i16 31741, i16 31743, i16 31744, i16 31745, i16 31746, i16 31747, i16 31748, i16 31749, i16 31750, i16 31752, i16 31753, i16 31754, i16 31757, i16 31758, i16 31760, i16 31761, i16 31762, i16 31763, i16 31764, i16 31765, i16 31767, i16 31768, i16 31769, i16 31770, i16 31771, i16 31772, i16 31773, i16 31774, i16 31776, i16 31777, i16 31778, i16 31779, i16 31780, i16 31781, i16 31784, i16 31785, i16 31787, i16 31788, i16 31789, i16 31790, i16 31791, i16 31792, i16 31793, i16 31794, i16 31795, i16 31796, i16 31797, i16 31798, i16 31799, i16 31801, i16 31802, i16 31803, i16 31804, i16 31805, i16 31806, i16 31810, i16 -25928, i16 23401, i16 28023, i16 27686, i16 20133, i16 23475, i16 -25977, i16 -28317, i16 25000, i16 -28497, i16 -26647, i16 21547, i16 28085, i16 23506, i16 20989, i16 21898, i16 32597, i16 32752, i16 25788, i16 25421, i16 26097, i16 25022, i16 24717, i16 28938, i16 27735, i16 27721, i16 22831, i16 26477, i16 -32214, i16 22741, i16 22158, i16 -29590, i16 27627, i16 -28451, i16 22909, i16 -32745, i16 21495, i16 28009, i16 21621, i16 21917, i16 -31881, i16 -31793, i16 26680, i16 31166, i16 21644, i16 20309, i16 21512, i16 30418, i16 -29559, i16 -27134, i16 27827, i16 28088, i16 -29333, i16 -30448, i16 -24988, i16 -29382, i16 22079, i16 -24879, i16 30165, i16 24456, i16 29408, i16 24680, i16 21756, i16 20136, i16 27178, i16 -30623, i16 24658, i16 -28816, i16 21700, i16 28888, i16 -31111, i16 -25025, i16 27946, i16 23439, i16 24344, i16 32418, i16 21897, i16 20399, i16 29492, i16 21564, i16 21402, i16 20505, i16 21518, i16 21628, i16 20046, i16 24573, i16 29786, i16 22774, i16 -31637, i16 -32543, i16 -30860, i16 29392, i16 31946, i16 28246], [190 x i16] [i16 31811, i16 31812, i16 31813, i16 31814, i16 31815, i16 31816, i16 31817, i16 31818, i16 31819, i16 31820, i16 31822, i16 31823, i16 31824, i16 31825, i16 31826, i16 31827, i16 31828, i16 31829, i16 31830, i16 31831, i16 31832, i16 31833, i16 31834, i16 31835, i16 31836, i16 31837, i16 31838, i16 31839, i16 31840, i16 31841, i16 31842, i16 31843, i16 31844, i16 31845, i16 31846, i16 31847, i16 31848, i16 31849, i16 31850, i16 31851, i16 31852, i16 31853, i16 31854, i16 31855, i16 31856, i16 31857, i16 31858, i16 31861, i16 31862, i16 31863, i16 31864, i16 31865, i16 31866, i16 31870, i16 31871, i16 31872, i16 31873, i16 31874, i16 31875, i16 31876, i16 31877, i16 31878, i16 31879, i16 31880, i16 31882, i16 31883, i16 31884, i16 31885, i16 31886, i16 31887, i16 31888, i16 31891, i16 31892, i16 31894, i16 31897, i16 31898, i16 31899, i16 31904, i16 31905, i16 31907, i16 31910, i16 31911, i16 31912, i16 31913, i16 31915, i16 31916, i16 31917, i16 31919, i16 31920, i16 31924, i16 31925, i16 31926, i16 31927, i16 31928, i16 31930, i16 31931, i16 24359, i16 -31154, i16 21804, i16 25252, i16 20114, i16 27818, i16 25143, i16 -32079, i16 21719, i16 21326, i16 29502, i16 28369, i16 30011, i16 21010, i16 21270, i16 -29731, i16 27088, i16 24458, i16 24576, i16 28142, i16 22351, i16 27426, i16 29615, i16 26707, i16 -28712, i16 32531, i16 25442, i16 24739, i16 21796, i16 30186, i16 -29598, i16 28949, i16 28067, i16 23462, i16 24187, i16 -31918, i16 24908, i16 -24892, i16 30970, i16 -30889, i16 31783, i16 30343, i16 20976, i16 24822, i16 29004, i16 26179, i16 24140, i16 24653, i16 -29682, i16 28784, i16 25381, i16 -28791, i16 24509, i16 24674, i16 -31020, i16 22238, i16 27585, i16 24724, i16 24935, i16 21321, i16 24800, i16 26214, i16 -29377, i16 31229, i16 20250, i16 28905, i16 27719, i16 -29773, i16 -29710, i16 32472, i16 -31900, i16 26127, i16 23130, i16 -25790, i16 27985, i16 28151, i16 -29631, i16 27963, i16 20249, i16 28779, i16 -31817, i16 25110, i16 24785, i16 -26867, i16 -29401, i16 31096, i16 20987, i16 22334, i16 22522, i16 26426, i16 30072, i16 31293, i16 31215, i16 31637], [190 x i16] [i16 31935, i16 31936, i16 31938, i16 31939, i16 31940, i16 31942, i16 31945, i16 31947, i16 31950, i16 31951, i16 31952, i16 31953, i16 31954, i16 31955, i16 31956, i16 31960, i16 31962, i16 31963, i16 31965, i16 31966, i16 31969, i16 31970, i16 31971, i16 31972, i16 31973, i16 31974, i16 31975, i16 31977, i16 31978, i16 31979, i16 31980, i16 31981, i16 31982, i16 31984, i16 31985, i16 31986, i16 31987, i16 31988, i16 31989, i16 31990, i16 31991, i16 31993, i16 31994, i16 31996, i16 31997, i16 31998, i16 31999, i16 32000, i16 32001, i16 32002, i16 32003, i16 32004, i16 32005, i16 32006, i16 32007, i16 32008, i16 32009, i16 32011, i16 32012, i16 32013, i16 32014, i16 32015, i16 32016, i16 32017, i16 32018, i16 32019, i16 32020, i16 32021, i16 32022, i16 32023, i16 32024, i16 32025, i16 32026, i16 32027, i16 32028, i16 32029, i16 32030, i16 32031, i16 32033, i16 32035, i16 32036, i16 32037, i16 32038, i16 32040, i16 32041, i16 32042, i16 32044, i16 32045, i16 32046, i16 32048, i16 32049, i16 32050, i16 32051, i16 32052, i16 32053, i16 32054, i16 -32628, i16 -26267, i16 -28679, i16 28608, i16 -29787, i16 -25055, i16 23020, i16 32489, i16 32521, i16 21513, i16 26497, i16 26840, i16 -28783, i16 31821, i16 -26938, i16 21450, i16 24613, i16 30142, i16 27762, i16 21363, i16 23241, i16 32423, i16 25380, i16 20960, i16 -32502, i16 24049, i16 -31521, i16 25216, i16 20864, i16 23395, i16 20238, i16 31085, i16 21058, i16 24760, i16 27982, i16 23492, i16 23490, i16 -29791, i16 -29776, i16 26082, i16 24524, i16 -27067, i16 22931, i16 32487, i16 32426, i16 22025, i16 26551, i16 22841, i16 20339, i16 23478, i16 21152, i16 -31910, i16 -26486, i16 -29378, i16 30002, i16 -27458, i16 20551, i16 31292, i16 20215, i16 26550, i16 -25986, i16 23233, i16 27516, i16 30417, i16 22362, i16 23574, i16 31546, i16 -27148, i16 29006, i16 20860, i16 -32599, i16 -32144, i16 22904, i16 32516, i16 -31961, i16 26816, i16 26604, i16 30897, i16 30839, i16 25315, i16 25441, i16 31616, i16 20461, i16 21098, i16 20943, i16 -31920, i16 27099, i16 -28044, i16 -29195, i16 -29391, i16 -30271, i16 -27346, i16 31661, i16 20214], [190 x i16] [i16 32055, i16 32056, i16 32057, i16 32058, i16 32059, i16 32060, i16 32061, i16 32062, i16 32063, i16 32064, i16 32065, i16 32066, i16 32067, i16 32068, i16 32069, i16 32070, i16 32071, i16 32072, i16 32073, i16 32074, i16 32075, i16 32076, i16 32077, i16 32078, i16 32079, i16 32080, i16 32081, i16 32082, i16 32083, i16 32084, i16 32085, i16 32086, i16 32087, i16 32088, i16 32089, i16 32090, i16 32091, i16 32092, i16 32093, i16 32094, i16 32095, i16 32096, i16 32097, i16 32098, i16 32099, i16 32100, i16 32101, i16 32102, i16 32103, i16 32104, i16 32105, i16 32106, i16 32107, i16 32108, i16 32109, i16 32111, i16 32112, i16 32113, i16 32114, i16 32115, i16 32116, i16 32117, i16 32118, i16 32120, i16 32121, i16 32122, i16 32123, i16 32124, i16 32125, i16 32126, i16 32127, i16 32128, i16 32129, i16 32130, i16 32131, i16 32132, i16 32133, i16 32134, i16 32135, i16 32136, i16 32137, i16 32138, i16 32139, i16 32140, i16 32141, i16 32142, i16 32143, i16 32144, i16 32145, i16 32146, i16 32147, i16 32148, i16 32149, i16 32150, i16 32151, i16 32152, i16 20581, i16 -32208, i16 21073, i16 -26257, i16 28176, i16 28293, i16 28071, i16 24314, i16 20725, i16 23004, i16 23558, i16 27974, i16 27743, i16 30086, i16 -31605, i16 26728, i16 22870, i16 -29774, i16 21280, i16 -28303, i16 -27059, i16 -31415, i16 26898, i16 30977, i16 28966, i16 -32522, i16 20132, i16 -28470, i16 27975, i16 -25980, i16 23047, i16 22204, i16 25605, i16 -27408, i16 30699, i16 20389, i16 -32486, i16 29409, i16 -30254, i16 -26246, i16 32564, i16 32478, i16 21119, i16 25945, i16 -28299, i16 -28801, i16 -28797, i16 21483, i16 31382, i16 25581, i16 25509, i16 30342, i16 31224, i16 -30633, i16 -27082, i16 25130, i16 21163, i16 -32126, i16 26708, i16 26480, i16 25463, i16 30571, i16 31469, i16 27905, i16 32467, i16 -30237, i16 22992, i16 25106, i16 -31287, i16 -32091, i16 30028, i16 20511, i16 20171, i16 30117, i16 -29717, i16 23626, i16 24062, i16 31563, i16 26020, i16 -28207, i16 20170, i16 27941, i16 -30369, i16 32039, i16 -27354, i16 20165, i16 -29656, i16 -28709, i16 -26765, i16 26187, i16 31105, i16 -28719, i16 28908, i16 28024], [190 x i16] [i16 32153, i16 32154, i16 32155, i16 32156, i16 32157, i16 32158, i16 32159, i16 32160, i16 32161, i16 32162, i16 32163, i16 32164, i16 32165, i16 32167, i16 32168, i16 32169, i16 32170, i16 32171, i16 32172, i16 32173, i16 32175, i16 32176, i16 32177, i16 32178, i16 32179, i16 32180, i16 32181, i16 32182, i16 32183, i16 32184, i16 32185, i16 32186, i16 32187, i16 32188, i16 32189, i16 32190, i16 32191, i16 32192, i16 32193, i16 32194, i16 32195, i16 32196, i16 32197, i16 32198, i16 32199, i16 32200, i16 32201, i16 32202, i16 32203, i16 32204, i16 32205, i16 32206, i16 32207, i16 32208, i16 32209, i16 32210, i16 32211, i16 32212, i16 32213, i16 32214, i16 32215, i16 32216, i16 32217, i16 32218, i16 32219, i16 32220, i16 32221, i16 32222, i16 32223, i16 32224, i16 32225, i16 32226, i16 32227, i16 32228, i16 32229, i16 32230, i16 32231, i16 32232, i16 32233, i16 32234, i16 32235, i16 32236, i16 32237, i16 32238, i16 32239, i16 32240, i16 32241, i16 32242, i16 32243, i16 32244, i16 32245, i16 32246, i16 32247, i16 32248, i16 32249, i16 32250, i16 23613, i16 21170, i16 -31930, i16 20834, i16 -31986, i16 30555, i16 26230, i16 -25416, i16 20140, i16 24778, i16 31934, i16 31923, i16 32463, i16 20117, i16 -29850, i16 26223, i16 -26488, i16 -26791, i16 22659, i16 25964, i16 -27300, i16 24452, i16 30153, i16 -26794, i16 31455, i16 31454, i16 20928, i16 28847, i16 31384, i16 25578, i16 31350, i16 32416, i16 29590, i16 -26643, i16 20037, i16 28792, i16 20061, i16 -28334, i16 21417, i16 25937, i16 26087, i16 -32260, i16 -32251, i16 21646, i16 23601, i16 30106, i16 -26720, i16 25304, i16 29401, i16 30141, i16 23621, i16 -25991, i16 -31798, i16 23616, i16 21632, i16 30697, i16 20030, i16 27822, i16 -32678, i16 25298, i16 25454, i16 24040, i16 20855, i16 -29219, i16 -29154, i16 -27345, i16 20465, i16 21477, i16 24807, i16 28844, i16 21095, i16 25424, i16 -25021, i16 23071, i16 20518, i16 30519, i16 21367, i16 32482, i16 25733, i16 25899, i16 25225, i16 25496, i16 20500, i16 29237, i16 -30263, i16 20915, i16 -29760, i16 32477, i16 22343, i16 -31796, i16 -27481, i16 20891, i16 21531, i16 23803], [190 x i16] [i16 32251, i16 32252, i16 32253, i16 32254, i16 32255, i16 32256, i16 32257, i16 32258, i16 32259, i16 32260, i16 32261, i16 32262, i16 32263, i16 32264, i16 32265, i16 32266, i16 32267, i16 32268, i16 32269, i16 32270, i16 32271, i16 32272, i16 32273, i16 32274, i16 32275, i16 32276, i16 32277, i16 32278, i16 32279, i16 32280, i16 32281, i16 32282, i16 32283, i16 32284, i16 32285, i16 32286, i16 32287, i16 32288, i16 32289, i16 32290, i16 32291, i16 32292, i16 32293, i16 32294, i16 32295, i16 32296, i16 32297, i16 32298, i16 32299, i16 32300, i16 32301, i16 32302, i16 32303, i16 32304, i16 32305, i16 32306, i16 32307, i16 32308, i16 32309, i16 32310, i16 32311, i16 32312, i16 32313, i16 32314, i16 32316, i16 32317, i16 32318, i16 32319, i16 32320, i16 32322, i16 32323, i16 32324, i16 32325, i16 32326, i16 32328, i16 32329, i16 32330, i16 32331, i16 32332, i16 32333, i16 32334, i16 32335, i16 32336, i16 32337, i16 32338, i16 32339, i16 32340, i16 32341, i16 32342, i16 32343, i16 32344, i16 32345, i16 32346, i16 32347, i16 32348, i16 32349, i16 20426, i16 31459, i16 27994, i16 -28447, i16 -25969, i16 21888, i16 21654, i16 21345, i16 21679, i16 24320, i16 25577, i16 26999, i16 20975, i16 24936, i16 21002, i16 22570, i16 21208, i16 22350, i16 30733, i16 30475, i16 24247, i16 24951, i16 31968, i16 25179, i16 25239, i16 20130, i16 28821, i16 -32765, i16 25335, i16 28900, i16 -26784, i16 22391, i16 -32037, i16 26607, i16 26869, i16 30933, i16 -26473, i16 31185, i16 22771, i16 21683, i16 21487, i16 28212, i16 20811, i16 21051, i16 23458, i16 -29698, i16 -32593, i16 21827, i16 22438, i16 24691, i16 22353, i16 21549, i16 31354, i16 24656, i16 23380, i16 25511, i16 25248, i16 21475, i16 25187, i16 23495, i16 26543, i16 21741, i16 31391, i16 -32026, i16 -28297, i16 24211, i16 -30492, i16 22840, i16 22446, i16 25358, i16 -29208, i16 -32529, i16 22359, i16 31607, i16 20393, i16 24555, i16 23485, i16 27454, i16 21281, i16 31568, i16 29378, i16 26694, i16 30719, i16 30518, i16 26103, i16 20917, i16 20111, i16 30420, i16 23743, i16 31397, i16 -31627, i16 22862, i16 -25791, i16 20608], [190 x i16] [i16 32350, i16 32351, i16 32352, i16 32353, i16 32354, i16 32355, i16 32356, i16 32357, i16 32358, i16 32359, i16 32360, i16 32361, i16 32362, i16 32363, i16 32364, i16 32365, i16 32366, i16 32367, i16 32368, i16 32369, i16 32370, i16 32371, i16 32372, i16 32373, i16 32374, i16 32375, i16 32376, i16 32377, i16 32378, i16 32379, i16 32380, i16 32381, i16 32382, i16 32383, i16 32384, i16 32385, i16 32387, i16 32388, i16 32389, i16 32390, i16 32391, i16 32392, i16 32393, i16 32394, i16 32395, i16 32396, i16 32397, i16 32398, i16 32399, i16 32400, i16 32401, i16 32402, i16 32403, i16 32404, i16 32405, i16 32406, i16 32407, i16 32408, i16 32409, i16 32410, i16 32412, i16 32413, i16 32414, i16 32430, i16 32436, i16 32443, i16 32444, i16 32470, i16 32484, i16 32492, i16 32505, i16 32522, i16 32528, i16 32542, i16 32567, i16 32569, i16 32571, i16 32572, i16 32573, i16 32574, i16 32575, i16 32576, i16 32577, i16 32579, i16 32582, i16 32583, i16 32584, i16 32585, i16 32586, i16 32587, i16 32588, i16 32589, i16 32590, i16 32591, i16 32594, i16 32595, i16 -26232, i16 24871, i16 28291, i16 22372, i16 26118, i16 25414, i16 22256, i16 25324, i16 25193, i16 24275, i16 -27116, i16 22403, i16 25289, i16 21895, i16 -30943, i16 -32438, i16 -28765, i16 21862, i16 -31823, i16 26469, i16 -29354, i16 -31523, i16 23146, i16 26639, i16 25318, i16 31726, i16 -27119, i16 20848, i16 28572, i16 -29648, i16 25597, i16 -30264, i16 25042, i16 32518, i16 28866, i16 28389, i16 29701, i16 27028, i16 29436, i16 24266, i16 -28466, i16 26391, i16 28010, i16 25438, i16 21171, i16 29282, i16 -32767, i16 20332, i16 23013, i16 -28310, i16 28889, i16 28061, i16 21202, i16 20048, i16 -26889, i16 -27283, i16 -31362, i16 30922, i16 32047, i16 20769, i16 22418, i16 25794, i16 -32629, i16 31867, i16 27882, i16 26865, i16 26974, i16 20919, i16 21400, i16 26792, i16 29313, i16 -24882, i16 31729, i16 29432, i16 31163, i16 28435, i16 29702, i16 26446, i16 -28212, i16 -25436, i16 31036, i16 -31863, i16 -31916, i16 21519, i16 26647, i16 20029, i16 21385, i16 21169, i16 30782, i16 21382, i16 21033, i16 20616, i16 20363, i16 20432], [190 x i16] [i16 32598, i16 32601, i16 32603, i16 32604, i16 32605, i16 32606, i16 32608, i16 32611, i16 32612, i16 32613, i16 32614, i16 32615, i16 32619, i16 32620, i16 32621, i16 32623, i16 32624, i16 32627, i16 32629, i16 32630, i16 32631, i16 32632, i16 32634, i16 32635, i16 32636, i16 32637, i16 32639, i16 32640, i16 32642, i16 32643, i16 32644, i16 32645, i16 32646, i16 32647, i16 32648, i16 32649, i16 32651, i16 32653, i16 32655, i16 32656, i16 32657, i16 32658, i16 32659, i16 32661, i16 32662, i16 32663, i16 32664, i16 32665, i16 32667, i16 32668, i16 32672, i16 32674, i16 32675, i16 32677, i16 32678, i16 32680, i16 32681, i16 32682, i16 32683, i16 32684, i16 32685, i16 32686, i16 32689, i16 32691, i16 32692, i16 32693, i16 32694, i16 32695, i16 32698, i16 32699, i16 32702, i16 32704, i16 32706, i16 32707, i16 32708, i16 32710, i16 32711, i16 32712, i16 32713, i16 32715, i16 32717, i16 32719, i16 32720, i16 32721, i16 32722, i16 32723, i16 32726, i16 32727, i16 32729, i16 32730, i16 32731, i16 32732, i16 32733, i16 32734, i16 32738, i16 32739, i16 30178, i16 31435, i16 31890, i16 27813, i16 -26954, i16 21147, i16 29827, i16 21737, i16 20457, i16 -32684, i16 -31822, i16 -28706, i16 -27280, i16 24265, i16 24604, i16 28063, i16 24088, i16 25947, i16 -32456, i16 -27394, i16 24651, i16 28860, i16 32451, i16 31918, i16 20937, i16 26753, i16 31921, i16 -32145, i16 20004, i16 -28794, i16 -28209, i16 26238, i16 20142, i16 -29691, i16 25769, i16 -32694, i16 20698, i16 30103, i16 29134, i16 23525, i16 -28739, i16 28518, i16 20102, i16 25730, i16 -27293, i16 24278, i16 26009, i16 21015, i16 -30526, i16 28872, i16 21155, i16 29454, i16 29747, i16 26519, i16 30967, i16 -26858, i16 20020, i16 -28485, i16 -25378, i16 28107, i16 20955, i16 -29375, i16 21533, i16 25294, i16 29618, i16 -31759, i16 -26890, i16 -24700, i16 -27453, i16 20278, i16 32666, i16 20940, i16 28789, i16 -27019, i16 23725, i16 -26490, i16 21478, i16 20196, i16 28316, i16 29705, i16 27060, i16 30827, i16 -26225, i16 30041, i16 21016, i16 30244, i16 27969, i16 26611, i16 20845, i16 -24679, i16 -32693, i16 21657, i16 31548, i16 31423], [190 x i16] [i16 32740, i16 32743, i16 32744, i16 32746, i16 32747, i16 32748, i16 32749, i16 32751, i16 32754, i16 32756, i16 32757, i16 32758, i16 32759, i16 32760, i16 32761, i16 32762, i16 32765, i16 32766, i16 32767, i16 -32766, i16 -32761, i16 -32760, i16 -32759, i16 -32758, i16 -32754, i16 -32753, i16 -32751, i16 -32749, i16 -32742, i16 -32741, i16 -32739, i16 -32738, i16 -32737, i16 -32735, i16 -32733, i16 -32732, i16 -32725, i16 -32724, i16 -32723, i16 -32722, i16 -32721, i16 -32720, i16 -32718, i16 -32716, i16 -32711, i16 -32710, i16 -32708, i16 -32706, i16 -32704, i16 -32703, i16 -32700, i16 -32699, i16 -32697, i16 -32696, i16 -32695, i16 -32690, i16 -32689, i16 -32688, i16 -32687, i16 -32685, i16 -32683, i16 -32682, i16 -32681, i16 -32679, i16 -32677, i16 -32676, i16 -32675, i16 -32674, i16 -32673, i16 -32672, i16 -32671, i16 -32670, i16 -32669, i16 -32668, i16 -32667, i16 -32666, i16 -32665, i16 -32664, i16 -32661, i16 -32660, i16 -32659, i16 -32658, i16 -32657, i16 -32656, i16 -32654, i16 -32653, i16 -32652, i16 -32651, i16 -32650, i16 -32649, i16 -32648, i16 -32647, i16 -32646, i16 -32645, i16 -32644, i16 -32643, i16 -27002, i16 22404, i16 25314, i16 -27065, i16 27004, i16 23044, i16 25602, i16 31699, i16 28431, i16 -27061, i16 -32090, i16 21346, i16 -26491, i16 24208, i16 28809, i16 25523, i16 21348, i16 -31153, i16 -25471, i16 -24941, i16 30860, i16 -26830, i16 -29201, i16 -29374, i16 -24961, i16 28510, i16 31108, i16 24405, i16 -27066, i16 25134, i16 -25996, i16 21525, i16 -27427, i16 20387, i16 26053, i16 23653, i16 23649, i16 32533, i16 -31151, i16 27695, i16 24459, i16 29575, i16 28388, i16 32511, i16 23782, i16 25371, i16 23402, i16 28390, i16 21365, i16 20081, i16 25504, i16 30053, i16 25249, i16 -28818, i16 20262, i16 20177, i16 27814, i16 32438, i16 -29766, i16 -31715, i16 -30790, i16 32599, i16 -28613, i16 -27357, i16 31657, i16 -25951, i16 -30472, i16 -31683, i16 27931, i16 -25978, i16 32476, i16 22920, i16 -24901, i16 29595, i16 30721, i16 -31102, i16 -26004, i16 -25982, i16 22043, i16 21527, i16 22475, i16 20080, i16 -24922, i16 21334, i16 -28728, i16 -32503, i16 30610, i16 -26222, i16 -30994, i16 28385, i16 -31469, i16 26364, i16 24930, i16 28459], [190 x i16] [i16 -32642, i16 -32639, i16 -32638, i16 -32635, i16 -32632, i16 -32630, i16 -32627, i16 -32626, i16 -32625, i16 -32624, i16 -32623, i16 -32622, i16 -32620, i16 -32619, i16 -32617, i16 -32615, i16 -32610, i16 -32605, i16 -32602, i16 -32601, i16 -32600, i16 -32596, i16 -32592, i16 -32589, i16 -32587, i16 -32586, i16 -32584, i16 -32583, i16 -32581, i16 -32571, i16 -32569, i16 -32568, i16 -32567, i16 -32566, i16 -32565, i16 -32561, i16 -32560, i16 -32559, i16 -32558, i16 -32557, i16 -32556, i16 -32555, i16 -32552, i16 -32545, i16 -32544, i16 -32542, i16 -32541, i16 -32538, i16 -32530, i16 -32523, i16 -32521, i16 -32519, i16 -32517, i16 -32514, i16 -32513, i16 -32512, i16 -32511, i16 -32509, i16 -32508, i16 -32507, i16 -32505, i16 -32504, i16 -32501, i16 -32500, i16 -32491, i16 -32489, i16 -32487, i16 -32485, i16 -32484, i16 -32483, i16 -32481, i16 -32480, i16 -32479, i16 -32478, i16 -32477, i16 -32476, i16 -32475, i16 -32474, i16 -32473, i16 -32472, i16 -32471, i16 -32470, i16 -32469, i16 -32467, i16 -32466, i16 -32464, i16 -32461, i16 -32460, i16 -32459, i16 -32457, i16 -32455, i16 -32454, i16 -32453, i16 -32452, i16 -32451, i16 -32449, i16 -29655, i16 -32110, i16 -31957, i16 30450, i16 27667, i16 24537, i16 -31811, i16 29483, i16 -31995, i16 -27366, i16 27611, i16 30683, i16 -27450, i16 21359, i16 -31998, i16 20882, i16 24125, i16 -29556, i16 -29384, i16 20040, i16 29611, i16 26522, i16 26757, i16 -28298, i16 -26871, i16 29028, i16 27809, i16 30473, i16 23186, i16 -27327, i16 27599, i16 32654, i16 26151, i16 23504, i16 22969, i16 23194, i16 -27160, i16 -27145, i16 20204, i16 -31732, i16 -31591, i16 27308, i16 30431, i16 -27344, i16 29467, i16 26790, i16 23391, i16 30511, i16 -28262, i16 -26783, i16 31964, i16 -28681, i16 -29668, i16 24357, i16 31859, i16 31192, i16 -30267, i16 27852, i16 -30948, i16 23494, i16 24130, i16 26825, i16 30496, i16 32501, i16 20885, i16 20813, i16 21193, i16 23081, i16 32517, i16 -26782, i16 -32041, i16 25551, i16 30596, i16 -31280, i16 31186, i16 28218, i16 24217, i16 22937, i16 -31471, i16 28781, i16 27665, i16 25279, i16 30399, i16 25935, i16 24751, i16 -27139, i16 26126, i16 -30817, i16 -25053, i16 -27411, i16 21517, i16 21629, i16 -29652, i16 25720], [190 x i16] [i16 -32448, i16 -32447, i16 -32446, i16 -32445, i16 -32444, i16 -32443, i16 -32441, i16 -32439, i16 -32435, i16 -32434, i16 -32433, i16 -32430, i16 -32426, i16 -32425, i16 -32424, i16 -32421, i16 -32420, i16 -32419, i16 -32418, i16 -32417, i16 -32415, i16 -32414, i16 -32413, i16 -32412, i16 -32410, i16 -32408, i16 -32406, i16 -32405, i16 -32404, i16 -32401, i16 -32398, i16 -32397, i16 -32395, i16 -32394, i16 -32393, i16 -32392, i16 -32383, i16 -32381, i16 -32380, i16 -32379, i16 -32378, i16 -32377, i16 -32375, i16 -32373, i16 -32372, i16 -32371, i16 -32370, i16 -32368, i16 -32366, i16 -32365, i16 -32364, i16 -32363, i16 -32362, i16 -32361, i16 -32359, i16 -32358, i16 -32354, i16 -32353, i16 -32352, i16 -32351, i16 -32350, i16 -32348, i16 -32347, i16 -32345, i16 -32343, i16 -32341, i16 -32340, i16 -32339, i16 -32338, i16 -32337, i16 -32336, i16 -32335, i16 -32334, i16 -32332, i16 -32331, i16 -32330, i16 -32329, i16 -32328, i16 -32327, i16 -32324, i16 -32323, i16 -32322, i16 -32321, i16 -32316, i16 -32315, i16 -32313, i16 -32312, i16 -32311, i16 -32309, i16 -32307, i16 -32306, i16 -32305, i16 -32304, i16 -32303, i16 -32302, i16 -32301, i16 25721, i16 -31215, i16 27169, i16 -32356, i16 30952, i16 25705, i16 -25772, i16 25273, i16 26411, i16 -31829, i16 22696, i16 -24872, i16 27819, i16 28448, i16 23518, i16 -27060, i16 -29685, i16 29279, i16 26576, i16 25287, i16 29281, i16 20137, i16 22982, i16 27597, i16 22675, i16 26286, i16 24149, i16 21215, i16 24917, i16 26408, i16 30446, i16 30566, i16 29287, i16 31302, i16 25343, i16 21738, i16 21584, i16 -27488, i16 -28509, i16 23068, i16 32435, i16 27670, i16 20035, i16 22902, i16 -32752, i16 22856, i16 21335, i16 30007, i16 -26946, i16 22218, i16 25376, i16 -32495, i16 24700, i16 -27143, i16 28118, i16 21602, i16 -26239, i16 20869, i16 23273, i16 -32515, i16 22958, i16 -26861, i16 20522, i16 27877, i16 23612, i16 25311, i16 20320, i16 21311, i16 -32389, i16 -28666, i16 28346, i16 -31445, i16 25288, i16 24180, i16 30910, i16 25781, i16 25467, i16 24565, i16 23064, i16 -28289, i16 -25057, i16 23615, i16 25423, i16 -32702, i16 23421, i16 21870, i16 -27318, i16 -27315, i16 28037, i16 24744, i16 26592, i16 29406, i16 20957, i16 23425], [190 x i16] [i16 -32300, i16 -32299, i16 -32298, i16 -32297, i16 -32296, i16 -32295, i16 -32294, i16 -32293, i16 -32292, i16 -32291, i16 -32290, i16 -32289, i16 -32288, i16 -32287, i16 -32286, i16 -32284, i16 -32283, i16 -32282, i16 -32280, i16 -32279, i16 -32277, i16 -32274, i16 -32273, i16 -32272, i16 -32271, i16 -32270, i16 -32267, i16 -32266, i16 -32265, i16 -32264, i16 -32263, i16 -32262, i16 -32259, i16 -32257, i16 -32253, i16 -32249, i16 -32248, i16 -32247, i16 -32246, i16 -32245, i16 -32242, i16 -32241, i16 -32239, i16 -32237, i16 -32235, i16 -32234, i16 -32233, i16 -32232, i16 -32231, i16 -32230, i16 -32227, i16 -32224, i16 -32220, i16 -32219, i16 -32218, i16 -32217, i16 -32215, i16 -32210, i16 -32206, i16 -32198, i16 -32196, i16 -32195, i16 -32193, i16 -32192, i16 -32191, i16 -32190, i16 -32189, i16 -32187, i16 -32186, i16 -32184, i16 -32182, i16 -32180, i16 -32179, i16 -32178, i16 -32176, i16 -32175, i16 -32174, i16 -32173, i16 -32172, i16 -32171, i16 -32170, i16 -32169, i16 -32167, i16 -32165, i16 -32164, i16 -32163, i16 -32162, i16 -32160, i16 -32159, i16 -32158, i16 -32157, i16 -32156, i16 -32155, i16 -32154, i16 -32153, i16 -32151, i16 25319, i16 27870, i16 29275, i16 25197, i16 -27474, i16 32445, i16 -32493, i16 27987, i16 20892, i16 24324, i16 22900, i16 21162, i16 24594, i16 22899, i16 26262, i16 -31152, i16 30111, i16 25386, i16 25062, i16 31983, i16 -29702, i16 21734, i16 27431, i16 -25051, i16 27572, i16 -31275, i16 21589, i16 20598, i16 27812, i16 21866, i16 -29260, i16 29228, i16 24085, i16 24597, i16 29750, i16 25293, i16 25490, i16 29260, i16 24472, i16 28227, i16 27966, i16 25856, i16 28504, i16 30424, i16 30928, i16 30460, i16 30036, i16 21028, i16 21467, i16 20051, i16 24222, i16 26049, i16 -32726, i16 -32554, i16 25243, i16 21638, i16 21032, i16 28846, i16 -30579, i16 -29231, i16 27873, i16 21624, i16 -32550, i16 22521, i16 -30476, i16 -29356, i16 -27030, i16 -28339, i16 20329, i16 27803, i16 21943, i16 30406, i16 30768, i16 25256, i16 28921, i16 28558, i16 24429, i16 -31508, i16 26842, i16 30844, i16 31735, i16 -32344, i16 26379, i16 -25009, i16 25447, i16 30896, i16 22383, i16 30738, i16 -26823, i16 25209, i16 25259, i16 21128, i16 29749, i16 27607], [190 x i16] [i16 -32150, i16 -32149, i16 -32148, i16 -32147, i16 -32143, i16 -32139, i16 -32138, i16 -32137, i16 -32136, i16 -32133, i16 -32132, i16 -32128, i16 -32127, i16 -32125, i16 -32123, i16 -32122, i16 -32121, i16 -32119, i16 -32116, i16 -32112, i16 -32109, i16 -32108, i16 -32107, i16 -32106, i16 -32102, i16 -32101, i16 -32098, i16 -32096, i16 -32094, i16 -32093, i16 -32089, i16 -32078, i16 -32075, i16 -32074, i16 -32070, i16 -32069, i16 -32068, i16 -32065, i16 -32064, i16 -32062, i16 -32061, i16 -32059, i16 -32058, i16 -32055, i16 -32048, i16 -32042, i16 -32039, i16 -32038, i16 -32035, i16 -32030, i16 -32025, i16 -32024, i16 -32023, i16 -32022, i16 -32020, i16 -32019, i16 -32018, i16 -32016, i16 -32014, i16 -32013, i16 -32011, i16 -32010, i16 -32008, i16 -32006, i16 -32004, i16 -32003, i16 -32002, i16 -32001, i16 -32000, i16 -31990, i16 -31989, i16 -31987, i16 -31984, i16 -31982, i16 -31981, i16 -31978, i16 -31976, i16 -31975, i16 -31971, i16 -31970, i16 -31969, i16 -31968, i16 -31967, i16 -31966, i16 -31965, i16 -31964, i16 -31963, i16 -31962, i16 -31959, i16 -31958, i16 -31954, i16 -31952, i16 -31950, i16 -31945, i16 -31941, i16 -31939, i16 21860, i16 -32450, i16 30130, i16 30382, i16 21305, i16 30174, i16 20731, i16 23617, i16 -29844, i16 31687, i16 20559, i16 29255, i16 -25961, i16 -26408, i16 28418, i16 29922, i16 31080, i16 25735, i16 30629, i16 25340, i16 -26479, i16 -29397, i16 21697, i16 -32680, i16 20050, i16 22378, i16 -32007, i16 -31731, i16 24179, i16 20973, i16 29942, i16 -29756, i16 23631, i16 22369, i16 27900, i16 -26489, i16 23110, i16 30772, i16 -25788, i16 -28693, i16 31893, i16 21078, i16 25169, i16 -27398, i16 20166, i16 -31866, i16 -31647, i16 -31767, i16 -31566, i16 22484, i16 26420, i16 22275, i16 26222, i16 28006, i16 -29647, i16 26333, i16 28689, i16 26399, i16 27450, i16 26646, i16 25114, i16 22971, i16 19971, i16 20932, i16 28422, i16 26578, i16 27791, i16 20854, i16 26827, i16 22855, i16 27495, i16 30054, i16 23822, i16 -32496, i16 -24752, i16 26071, i16 31048, i16 31041, i16 -25967, i16 -29321, i16 23682, i16 20062, i16 20225, i16 21551, i16 22865, i16 30732, i16 22120, i16 27668, i16 -28732, i16 24323, i16 27773, i16 27875, i16 -29781, i16 25488], [190 x i16] [i16 -31938, i16 -31937, i16 -31935, i16 -31934, i16 -31932, i16 -31931, i16 -31928, i16 -31926, i16 -31925, i16 -31924, i16 -31923, i16 -31922, i16 -31917, i16 -31915, i16 -31914, i16 -31913, i16 -31912, i16 -31911, i16 -31907, i16 -31902, i16 -31888, i16 -31887, i16 -31886, i16 -31885, i16 -31884, i16 -31883, i16 -31882, i16 -31879, i16 -31878, i16 -31874, i16 -31873, i16 -31872, i16 -31871, i16 -31870, i16 -31869, i16 -31868, i16 -31865, i16 -31864, i16 -31862, i16 -31861, i16 -31860, i16 -31859, i16 -31857, i16 -31856, i16 -31855, i16 -31852, i16 -31851, i16 -31850, i16 -31849, i16 -31847, i16 -31846, i16 -31843, i16 -31841, i16 -31839, i16 -31838, i16 -31837, i16 -31836, i16 -31835, i16 -31834, i16 -31833, i16 -31828, i16 -31827, i16 -31826, i16 -31825, i16 -31819, i16 -31813, i16 -31810, i16 -31809, i16 -31806, i16 -31805, i16 -31804, i16 -31802, i16 -31800, i16 -31799, i16 -31797, i16 -31795, i16 -31794, i16 -31792, i16 -31791, i16 -31790, i16 -31789, i16 -31787, i16 -31785, i16 -31783, i16 -31782, i16 -31781, i16 -31778, i16 -31774, i16 -31773, i16 -31772, i16 -31770, i16 -31769, i16 -31768, i16 -31765, i16 -31764, i16 -31763, i16 24688, i16 27965, i16 29301, i16 25190, i16 -27506, i16 -27451, i16 21315, i16 -28735, i16 31614, i16 20191, i16 -29658, i16 20094, i16 -24876, i16 -27471, i16 -27469, i16 21069, i16 28508, i16 -28573, i16 27973, i16 -29644, i16 22545, i16 23884, i16 27424, i16 27465, i16 26538, i16 21595, i16 -32428, i16 32652, i16 22681, i16 -31433, i16 24378, i16 25250, i16 27207, i16 -27335, i16 25970, i16 24708, i16 26725, i16 30631, i16 20052, i16 20392, i16 24039, i16 -26728, i16 25772, i16 32728, i16 23789, i16 20431, i16 31373, i16 20999, i16 -31996, i16 19988, i16 24623, i16 31363, i16 -27482, i16 20405, i16 20146, i16 31206, i16 29748, i16 21220, i16 -32071, i16 25810, i16 31165, i16 23517, i16 27777, i16 -26798, i16 -28805, i16 27682, i16 20542, i16 21375, i16 28165, i16 25806, i16 26228, i16 27696, i16 24773, i16 -26505, i16 -29705, i16 24198, i16 29756, i16 31351, i16 31179, i16 19992, i16 -28495, i16 29699, i16 27714, i16 22234, i16 -28341, i16 27845, i16 -29301, i16 21306, i16 -31034, i16 26354, i16 -29009, i16 23624, i16 -25999, i16 28192], [190 x i16] [i16 -31762, i16 -31761, i16 -31757, i16 -31756, i16 -31755, i16 -31754, i16 -31753, i16 -31750, i16 -31749, i16 -31748, i16 -31746, i16 -31745, i16 -31744, i16 -31742, i16 -31739, i16 -31737, i16 -31736, i16 -31735, i16 -31734, i16 -31728, i16 -31726, i16 -31725, i16 -31724, i16 -31723, i16 -31722, i16 -31721, i16 -31719, i16 -31718, i16 -31717, i16 -31714, i16 -31713, i16 -31712, i16 -31711, i16 -31710, i16 -31709, i16 -31703, i16 -31702, i16 -31701, i16 -31700, i16 -31699, i16 -31698, i16 -31697, i16 -31696, i16 -31694, i16 -31693, i16 -31692, i16 -31691, i16 -31690, i16 -31689, i16 -31687, i16 -31686, i16 -31685, i16 -31682, i16 -31681, i16 -31680, i16 -31679, i16 -31678, i16 -31677, i16 -31676, i16 -31675, i16 -31673, i16 -31672, i16 -31671, i16 -31670, i16 -31669, i16 -31668, i16 -31667, i16 -31666, i16 -31665, i16 -31664, i16 -31662, i16 -31661, i16 -31660, i16 -31659, i16 -31658, i16 -31656, i16 -31651, i16 -31650, i16 -31649, i16 -31648, i16 -31646, i16 -31644, i16 -31643, i16 -31642, i16 -31641, i16 -31640, i16 -31638, i16 -31634, i16 -31633, i16 -31632, i16 -31630, i16 -31628, i16 -31625, i16 -31623, i16 -31621, i16 -31620, i16 21462, i16 23094, i16 -24693, i16 -29277, i16 21435, i16 22280, i16 -26457, i16 26435, i16 -28261, i16 27849, i16 20840, i16 30154, i16 25331, i16 29356, i16 21048, i16 21149, i16 32570, i16 28820, i16 30264, i16 21364, i16 -25014, i16 27063, i16 30830, i16 -26944, i16 -30503, i16 32676, i16 28982, i16 29123, i16 20873, i16 26579, i16 29924, i16 22756, i16 25880, i16 22199, i16 -29783, i16 -26250, i16 25200, i16 32469, i16 24825, i16 28909, i16 22764, i16 20161, i16 20154, i16 24525, i16 -26649, i16 20219, i16 -29788, i16 20995, i16 22922, i16 32427, i16 25172, i16 20173, i16 26085, i16 25102, i16 -31944, i16 -31543, i16 -31901, i16 -30835, i16 29076, i16 28342, i16 23481, i16 32466, i16 20887, i16 25545, i16 26580, i16 -32631, i16 -31943, i16 -30699, i16 20754, i16 23418, i16 22914, i16 -28751, i16 20083, i16 27741, i16 20837, i16 -30427, i16 -28817, i16 -27090, i16 -31414, i16 29790, i16 -27376, i16 -27152, i16 28070, i16 -32027, i16 24369, i16 25746, i16 27922, i16 -31704, i16 -32402, i16 -25405, i16 22622, i16 -29349, i16 19977, i16 21441], [190 x i16] [i16 -31619, i16 -31618, i16 -31617, i16 -31616, i16 -31615, i16 -31613, i16 -31612, i16 -31611, i16 -31610, i16 -31606, i16 -31603, i16 -31601, i16 -31600, i16 -31599, i16 -31598, i16 -31597, i16 -31596, i16 -31595, i16 -31594, i16 -31592, i16 -31590, i16 -31589, i16 -31587, i16 -31586, i16 -31585, i16 -31584, i16 -31582, i16 -31581, i16 -31580, i16 -31579, i16 -31578, i16 -31577, i16 -31576, i16 -31575, i16 -31574, i16 -31573, i16 -31572, i16 -31571, i16 -31570, i16 -31568, i16 -31567, i16 -31565, i16 -31563, i16 -31562, i16 -31561, i16 -31557, i16 -31556, i16 -31554, i16 -31552, i16 -31550, i16 -31549, i16 -31547, i16 -31546, i16 -31545, i16 -31544, i16 -31541, i16 -31540, i16 -31538, i16 -31537, i16 -31534, i16 -31532, i16 -31531, i16 -31529, i16 -31528, i16 -31527, i16 -31526, i16 -31525, i16 -31524, i16 -31522, i16 -31519, i16 -31518, i16 -31516, i16 -31513, i16 -31512, i16 -31511, i16 -31510, i16 -31509, i16 -31507, i16 -31506, i16 -31505, i16 -31503, i16 -31502, i16 -31501, i16 -31500, i16 -31499, i16 -31498, i16 -31497, i16 -31496, i16 -31495, i16 -31494, i16 -31493, i16 -31491, i16 -31490, i16 -31488, i16 -31487, i16 -31486, i16 20254, i16 25955, i16 26705, i16 21971, i16 20007, i16 25620, i16 -25958, i16 25195, i16 23234, i16 29791, i16 -32142, i16 28073, i16 26862, i16 20711, i16 -31858, i16 30722, i16 26432, i16 21049, i16 27801, i16 32433, i16 20667, i16 21861, i16 29022, i16 31579, i16 26194, i16 29642, i16 -32021, i16 26441, i16 23665, i16 21024, i16 29053, i16 -30613, i16 -27158, i16 -27051, i16 25797, i16 -29343, i16 -32333, i16 21892, i16 27733, i16 25159, i16 32558, i16 22674, i16 20260, i16 21830, i16 -29361, i16 26188, i16 19978, i16 23578, i16 -30477, i16 26786, i16 25422, i16 31245, i16 28903, i16 -32115, i16 21242, i16 -26634, i16 23569, i16 21736, i16 -28491, i16 32461, i16 22882, i16 -29366, i16 -31033, i16 -32244, i16 -32243, i16 -29338, i16 25668, i16 23556, i16 24913, i16 28041, i16 31038, i16 -29762, i16 30775, i16 30003, i16 21627, i16 20280, i16 -29013, i16 28145, i16 23072, i16 32453, i16 31070, i16 27784, i16 23457, i16 23158, i16 29978, i16 -32578, i16 24910, i16 28183, i16 22768, i16 29983, i16 29989, i16 29298, i16 21319, i16 32499], [190 x i16] [i16 -31485, i16 -31484, i16 -31483, i16 -31482, i16 -31481, i16 -31480, i16 -31479, i16 -31478, i16 -31477, i16 -31475, i16 -31474, i16 -31473, i16 -31472, i16 -31470, i16 -31468, i16 -31467, i16 -31466, i16 -31464, i16 -31463, i16 -31461, i16 -31460, i16 -31459, i16 -31458, i16 -31456, i16 -31454, i16 -31453, i16 -31452, i16 -31451, i16 -31450, i16 -31449, i16 -31448, i16 -31447, i16 -31446, i16 -31443, i16 -31442, i16 -31441, i16 -31440, i16 -31439, i16 -31438, i16 -31437, i16 -31436, i16 -31435, i16 -31434, i16 -31426, i16 -31425, i16 -31424, i16 -31423, i16 -31422, i16 -31420, i16 -31419, i16 -31418, i16 -31417, i16 -31413, i16 -31412, i16 -31411, i16 -31410, i16 -31409, i16 -31408, i16 -31407, i16 -31406, i16 -31405, i16 -31404, i16 -31403, i16 -31401, i16 -31400, i16 -31398, i16 -31397, i16 -31396, i16 -31395, i16 -31393, i16 -31392, i16 -31391, i16 -31390, i16 -31389, i16 -31387, i16 -31386, i16 -31385, i16 -31383, i16 -31382, i16 -31381, i16 -31380, i16 -31379, i16 -31378, i16 -31377, i16 -31376, i16 -31375, i16 -31373, i16 -31371, i16 -31370, i16 -31369, i16 -31368, i16 -31364, i16 -31363, i16 -31361, i16 -31360, i16 -31359, i16 30465, i16 30427, i16 21097, i16 -32548, i16 22307, i16 24072, i16 22833, i16 29422, i16 26045, i16 28287, i16 -29737, i16 23608, i16 -31119, i16 21313, i16 30707, i16 25342, i16 26102, i16 20160, i16 -26401, i16 -31104, i16 23454, i16 -29754, i16 21490, i16 30690, i16 20351, i16 23630, i16 -25994, i16 22987, i16 24335, i16 31034, i16 22763, i16 19990, i16 26623, i16 20107, i16 25325, i16 -30061, i16 -28643, i16 21183, i16 26159, i16 21980, i16 22124, i16 -28670, i16 20181, i16 20365, i16 -28214, i16 -26256, i16 27663, i16 24066, i16 24643, i16 23460, i16 -30266, i16 -29739, i16 25910, i16 25163, i16 -26218, i16 23432, i16 23551, i16 25480, i16 21806, i16 21463, i16 30246, i16 20861, i16 -31444, i16 26530, i16 26803, i16 27530, i16 25234, i16 -28781, i16 21460, i16 -32238, i16 28113, i16 30095, i16 20070, i16 -29362, i16 23408, i16 29087, i16 -31313, i16 26257, i16 26329, i16 32626, i16 -30976, i16 -24883, i16 -24800, i16 23646, i16 26415, i16 -28688, i16 26641, i16 26463, i16 25101, i16 31446, i16 22661, i16 24246, i16 25968, i16 28465], [190 x i16] [i16 -31358, i16 -31357, i16 -31354, i16 -31352, i16 -31351, i16 -31350, i16 -31349, i16 -31348, i16 -31347, i16 -31346, i16 -31344, i16 -31343, i16 -31342, i16 -31341, i16 -31340, i16 -31339, i16 -31338, i16 -31337, i16 -31336, i16 -31335, i16 -31334, i16 -31331, i16 -31330, i16 -31329, i16 -31328, i16 -31327, i16 -31326, i16 -31325, i16 -31323, i16 -31322, i16 -31321, i16 -31319, i16 -31317, i16 -31316, i16 -31315, i16 -31311, i16 -31310, i16 -31309, i16 -31308, i16 -31307, i16 -31306, i16 -31304, i16 -31302, i16 -31301, i16 -31300, i16 -31299, i16 -31298, i16 -31297, i16 -31296, i16 -31294, i16 -31293, i16 -31292, i16 -31291, i16 -31290, i16 -31289, i16 -31288, i16 -31286, i16 -31285, i16 -31284, i16 -31283, i16 -31282, i16 -31279, i16 -31278, i16 -31276, i16 -31274, i16 -31273, i16 -31272, i16 -31271, i16 -31270, i16 -31269, i16 -31267, i16 -31266, i16 -31265, i16 -31264, i16 -31263, i16 -31262, i16 -31261, i16 -31259, i16 -31258, i16 -31257, i16 -31256, i16 -31254, i16 -31253, i16 -31252, i16 -31251, i16 -31250, i16 -31249, i16 -31248, i16 -31247, i16 -31246, i16 -31245, i16 -31244, i16 -31243, i16 -31242, i16 -31241, i16 -31240, i16 24661, i16 21047, i16 -32755, i16 25684, i16 -30608, i16 29993, i16 24069, i16 26643, i16 25332, i16 -26852, i16 21452, i16 29245, i16 -29695, i16 27700, i16 30561, i16 31246, i16 21550, i16 30636, i16 -26502, i16 -32228, i16 -29708, i16 30805, i16 26388, i16 28865, i16 26031, i16 25749, i16 22070, i16 24605, i16 31169, i16 21496, i16 19997, i16 27515, i16 -32634, i16 23546, i16 21987, i16 22235, i16 20282, i16 20284, i16 -26254, i16 24051, i16 26494, i16 -32712, i16 24578, i16 -26494, i16 -28671, i16 23435, i16 -29764, i16 -29707, i16 25628, i16 -32168, i16 25822, i16 22013, i16 -32049, i16 -28315, i16 20439, i16 32032, i16 -28641, i16 31903, i16 20723, i16 22609, i16 28335, i16 23487, i16 -29751, i16 -32637, i16 -28296, i16 -31588, i16 31639, i16 -31107, i16 -26997, i16 -26993, i16 32485, i16 -25901, i16 30862, i16 23681, i16 31319, i16 -28606, i16 -26969, i16 31071, i16 23385, i16 25439, i16 31499, i16 -31535, i16 26797, i16 21766, i16 32553, i16 29712, i16 32034, i16 -27391, i16 25152, i16 22604, i16 20182, i16 23427, i16 22905, i16 22612], [190 x i16] [i16 -31239, i16 -31238, i16 -31236, i16 -31235, i16 -31234, i16 -31232, i16 -31231, i16 -31230, i16 -31229, i16 -31228, i16 -31226, i16 -31225, i16 -31224, i16 -31223, i16 -31222, i16 -31221, i16 -31220, i16 -31219, i16 -31218, i16 -31217, i16 -31216, i16 -31214, i16 -31213, i16 -31212, i16 -31211, i16 -31209, i16 -31208, i16 -31207, i16 -31206, i16 -31205, i16 -31204, i16 -31203, i16 -31202, i16 -31201, i16 -31200, i16 -31199, i16 -31198, i16 -31197, i16 -31196, i16 -31195, i16 -31194, i16 -31192, i16 -31190, i16 -31189, i16 -31188, i16 -31187, i16 -31186, i16 -31185, i16 -31184, i16 -31183, i16 -31182, i16 -31181, i16 -31180, i16 -31179, i16 -31178, i16 -31177, i16 -31175, i16 -31174, i16 -31173, i16 -31171, i16 -31170, i16 -31169, i16 -31168, i16 -31167, i16 -31166, i16 -31165, i16 -31164, i16 -31163, i16 -31162, i16 -31161, i16 -31160, i16 -31159, i16 -31158, i16 -31157, i16 -31156, i16 -31150, i16 -31149, i16 -31147, i16 -31146, i16 -31145, i16 -31144, i16 -31143, i16 -31141, i16 -31140, i16 -31139, i16 -31137, i16 -31136, i16 -31135, i16 -31133, i16 -31132, i16 -31131, i16 -31130, i16 -31129, i16 -31128, i16 -31127, i16 -31126, i16 29549, i16 25374, i16 -29109, i16 -29169, i16 -32562, i16 -32044, i16 25260, i16 21488, i16 27888, i16 -28322, i16 22826, i16 24577, i16 27760, i16 22349, i16 25674, i16 -29398, i16 30251, i16 28393, i16 22363, i16 27264, i16 30192, i16 28525, i16 -29651, i16 -29688, i16 22374, i16 27631, i16 -30574, i16 30899, i16 25506, i16 21497, i16 28845, i16 27748, i16 22616, i16 25642, i16 22530, i16 26848, i16 -32357, i16 21776, i16 31958, i16 20504, i16 -28998, i16 28108, i16 -29281, i16 28907, i16 25487, i16 28059, i16 28372, i16 32486, i16 -31740, i16 26691, i16 -28669, i16 28120, i16 -27018, i16 -29784, i16 22871, i16 29305, i16 -31260, i16 -32386, i16 30140, i16 -30070, i16 26799, i16 21076, i16 -29150, i16 -27375, i16 25552, i16 -26472, i16 -29116, i16 21884, i16 20307, i16 26367, i16 22159, i16 24789, i16 28053, i16 21059, i16 23625, i16 22825, i16 28155, i16 22635, i16 30000, i16 29980, i16 24684, i16 -32236, i16 -32442, i16 25361, i16 26465, i16 -28702, i16 30522, i16 -29197, i16 -29388, i16 -27455, i16 24086, i16 21381, i16 21548, i16 28867], [190 x i16] [i16 -31123, i16 -31121, i16 -31120, i16 -31118, i16 -31117, i16 -31116, i16 -31115, i16 -31114, i16 -31113, i16 -31112, i16 -31101, i16 -31100, i16 -31099, i16 -31098, i16 -31097, i16 -31096, i16 -31095, i16 -31090, i16 -31089, i16 -31088, i16 -31087, i16 -31086, i16 -31084, i16 -31082, i16 -31081, i16 -31080, i16 -31079, i16 -31078, i16 -31077, i16 -31074, i16 -31073, i16 -31072, i16 -31071, i16 -31070, i16 -31067, i16 -31066, i16 -31061, i16 -31059, i16 -31058, i16 -31054, i16 -31053, i16 -31049, i16 -31048, i16 -31047, i16 -31045, i16 -31044, i16 -31043, i16 -31042, i16 -31041, i16 -31039, i16 -31038, i16 -31037, i16 -31035, i16 -31032, i16 -31028, i16 -31027, i16 -31022, i16 -31021, i16 -31019, i16 -31018, i16 -31017, i16 -31014, i16 -31012, i16 -31011, i16 -31008, i16 -31007, i16 -31006, i16 -31005, i16 -31003, i16 -31002, i16 -31001, i16 -31000, i16 -30998, i16 -30997, i16 -30996, i16 -30993, i16 -30987, i16 -30986, i16 -30985, i16 -30982, i16 -30981, i16 -30980, i16 -30979, i16 -30977, i16 -30975, i16 -30972, i16 -30971, i16 -30970, i16 -30965, i16 -30964, i16 -30962, i16 -30961, i16 -30960, i16 -30959, i16 -30956, i16 -30954, i16 27712, i16 24311, i16 20572, i16 20141, i16 24237, i16 25402, i16 -32185, i16 -28646, i16 26704, i16 -28306, i16 30643, i16 21516, i16 -27428, i16 24420, i16 31461, i16 26742, i16 25413, i16 31570, i16 32479, i16 30171, i16 20599, i16 25237, i16 22836, i16 -28657, i16 20984, i16 31171, i16 31361, i16 22270, i16 24466, i16 -28652, i16 28034, i16 23648, i16 22303, i16 21520, i16 20820, i16 28237, i16 22242, i16 25512, i16 -26477, i16 -32385, i16 -30955, i16 -30422, i16 -28672, i16 21534, i16 23663, i16 -32320, i16 25302, i16 25176, i16 -32463, i16 -25035, i16 -27072, i16 -26002, i16 -25988, i16 26925, i16 22949, i16 25299, i16 21822, i16 25366, i16 21703, i16 -31015, i16 27964, i16 23043, i16 29926, i16 -30564, i16 27498, i16 22806, i16 -29620, i16 24367, i16 28286, i16 29609, i16 -26499, i16 20024, i16 28919, i16 23436, i16 30871, i16 25405, i16 26202, i16 30358, i16 24779, i16 23451, i16 23113, i16 19975, i16 -32427, i16 27754, i16 29579, i16 20129, i16 26505, i16 32593, i16 24448, i16 26106, i16 26395, i16 24536, i16 22916, i16 23041], [190 x i16] [i16 -30951, i16 -30949, i16 -30947, i16 -30945, i16 -30944, i16 -30940, i16 -30938, i16 -30937, i16 -30936, i16 -30934, i16 -30933, i16 -30932, i16 -30931, i16 -30929, i16 -30928, i16 -30926, i16 -30925, i16 -30923, i16 -30922, i16 -30920, i16 -30919, i16 -30918, i16 -30916, i16 -30915, i16 -30912, i16 -30911, i16 -30910, i16 -30909, i16 -30908, i16 -30907, i16 -30906, i16 -30902, i16 -30901, i16 -30899, i16 -30897, i16 -30896, i16 -30895, i16 -30894, i16 -30892, i16 -30891, i16 -30890, i16 -30888, i16 -30886, i16 -30885, i16 -30884, i16 -30883, i16 -30882, i16 -30881, i16 -30879, i16 -30878, i16 -30874, i16 -30873, i16 -30872, i16 -30871, i16 -30870, i16 -30869, i16 -30868, i16 -30867, i16 -30865, i16 -30863, i16 -30862, i16 -30861, i16 -30859, i16 -30857, i16 -30856, i16 -30855, i16 -30854, i16 -30849, i16 -30848, i16 -30847, i16 -30844, i16 -30842, i16 -30841, i16 -30839, i16 -30838, i16 -30836, i16 -30834, i16 -30833, i16 -30832, i16 -30831, i16 -30830, i16 -30828, i16 -30827, i16 -30826, i16 -30824, i16 -30823, i16 -30822, i16 -30821, i16 -30820, i16 -30819, i16 -30818, i16 -30816, i16 -30815, i16 -30814, i16 -30813, i16 -30812, i16 24013, i16 24494, i16 21361, i16 -26650, i16 -28707, i16 26693, i16 22260, i16 21807, i16 24799, i16 20026, i16 28493, i16 32500, i16 -32057, i16 -31730, i16 22996, i16 20255, i16 20266, i16 23614, i16 32428, i16 26410, i16 -31462, i16 21619, i16 30031, i16 -32573, i16 21890, i16 -25777, i16 20301, i16 28205, i16 -29677, i16 23561, i16 24944, i16 21355, i16 30239, i16 28201, i16 -31094, i16 25991, i16 -27141, i16 32441, i16 21563, i16 31283, i16 32010, i16 -27154, i16 21985, i16 32705, i16 29934, i16 25373, i16 -30953, i16 28065, i16 31389, i16 25105, i16 26017, i16 21351, i16 25569, i16 27779, i16 24043, i16 21596, i16 -27480, i16 20044, i16 27745, i16 -29716, i16 23627, i16 26080, i16 -32100, i16 26791, i16 21566, i16 21556, i16 27595, i16 27494, i16 20116, i16 25410, i16 21320, i16 -32226, i16 20237, i16 20398, i16 22366, i16 25098, i16 -26882, i16 26212, i16 29289, i16 21247, i16 21153, i16 24735, i16 -29713, i16 26132, i16 29081, i16 26512, i16 -30337, i16 30802, i16 30717, i16 26224, i16 22075, i16 21560, i16 -27359, i16 29306], [190 x i16] [i16 -30811, i16 -30810, i16 -30809, i16 -30807, i16 -30806, i16 -30802, i16 -30800, i16 -30799, i16 -30798, i16 -30796, i16 -30794, i16 -30793, i16 -30792, i16 -30791, i16 -30789, i16 -30788, i16 -30786, i16 -30785, i16 -30783, i16 -30782, i16 -30781, i16 -30780, i16 -30779, i16 -30777, i16 -30776, i16 -30775, i16 -30772, i16 -30771, i16 -30770, i16 -30769, i16 -30768, i16 -30764, i16 -30763, i16 -30762, i16 -30761, i16 -30760, i16 -30759, i16 -30758, i16 -30756, i16 -30755, i16 -30754, i16 -30753, i16 -30751, i16 -30750, i16 -30749, i16 -30748, i16 -30746, i16 -30745, i16 -30744, i16 -30743, i16 -30741, i16 -30740, i16 -30739, i16 -30737, i16 -30736, i16 -30735, i16 -30734, i16 -30733, i16 -30732, i16 -30731, i16 -30730, i16 -30729, i16 -30728, i16 -30726, i16 -30725, i16 -30724, i16 -30723, i16 -30721, i16 -30720, i16 -30719, i16 -30718, i16 -30716, i16 -30715, i16 -30714, i16 -30713, i16 -30712, i16 -30711, i16 -30709, i16 -30708, i16 -30707, i16 -30706, i16 -30705, i16 -30704, i16 -30703, i16 -30702, i16 -30700, i16 -30697, i16 -30696, i16 -30695, i16 -30694, i16 -30692, i16 -30691, i16 -30690, i16 -30689, i16 -30688, i16 -30685, i16 31232, i16 24687, i16 24076, i16 24713, i16 -32355, i16 22805, i16 24796, i16 29060, i16 28911, i16 28330, i16 27728, i16 29312, i16 27268, i16 -30547, i16 24109, i16 20064, i16 23219, i16 21916, i16 -27421, i16 27927, i16 31995, i16 -26983, i16 25103, i16 32454, i16 30606, i16 -31106, i16 21283, i16 -26850, i16 -28778, i16 26247, i16 23777, i16 20384, i16 29421, i16 19979, i16 21414, i16 22799, i16 21523, i16 25472, i16 -27352, i16 20808, i16 20185, i16 -25444, i16 32420, i16 21688, i16 -29404, i16 -30636, i16 -32201, i16 -27150, i16 28046, i16 24358, i16 23244, i16 26174, i16 -27031, i16 29616, i16 29486, i16 21439, i16 -32390, i16 -26235, i16 32673, i16 23466, i16 -27017, i16 -27056, i16 32447, i16 30456, i16 21410, i16 -27274, i16 -26215, i16 31665, i16 -30396, i16 28248, i16 20065, i16 32724, i16 31077, i16 -29722, i16 24819, i16 21709, i16 20139, i16 -26503, i16 24055, i16 27233, i16 20687, i16 21521, i16 -29599, i16 -31705, i16 30813, i16 -26876, i16 21066, i16 21742, i16 22179, i16 -27392, i16 28040, i16 23477, i16 28102, i16 26195], [190 x i16] [i16 -30684, i16 -30683, i16 -30682, i16 -30681, i16 -30680, i16 -30679, i16 -30678, i16 -30677, i16 -30676, i16 -30675, i16 -30674, i16 -30673, i16 -30672, i16 -30671, i16 -30669, i16 -30668, i16 -30667, i16 -30666, i16 -30665, i16 -30664, i16 -30662, i16 -30661, i16 -30659, i16 -30658, i16 -30657, i16 -30655, i16 -30654, i16 -30653, i16 -30650, i16 -30649, i16 -30648, i16 -30647, i16 -30646, i16 -30645, i16 -30642, i16 -30641, i16 -30640, i16 -30639, i16 -30638, i16 -30637, i16 -30635, i16 -30634, i16 -30632, i16 -30630, i16 -30629, i16 -30628, i16 -30627, i16 -30626, i16 -30625, i16 -30624, i16 -30618, i16 -30617, i16 -30614, i16 -30611, i16 -30609, i16 -30607, i16 -30605, i16 -30604, i16 -30603, i16 -30602, i16 -30600, i16 -30599, i16 -30598, i16 -30597, i16 -30596, i16 -30592, i16 -30589, i16 -30586, i16 -30585, i16 -30583, i16 -30582, i16 -30580, i16 -30578, i16 -30577, i16 -30576, i16 -30575, i16 -30573, i16 -30572, i16 -30571, i16 -30569, i16 -30568, i16 -30567, i16 -30566, i16 -30565, i16 -30563, i16 -30562, i16 -30561, i16 -30560, i16 -30559, i16 -30557, i16 -30555, i16 -30554, i16 -30553, i16 -30552, i16 -30551, i16 -30550, i16 23567, i16 23389, i16 26657, i16 -32618, i16 21880, i16 31505, i16 25928, i16 26964, i16 20123, i16 27463, i16 -30898, i16 -26741, i16 21327, i16 25375, i16 25658, i16 -28502, i16 26012, i16 -32575, i16 -29680, i16 20889, i16 26800, i16 21368, i16 -30727, i16 25032, i16 27844, i16 27899, i16 -29662, i16 23633, i16 -31318, i16 -32081, i16 -27380, i16 27427, i16 -28773, i16 26032, i16 24571, i16 24515, i16 20449, i16 -30651, i16 26143, i16 -32411, i16 29481, i16 24826, i16 20852, i16 21009, i16 22411, i16 24418, i16 -28510, i16 -30644, i16 -28270, i16 24184, i16 26447, i16 24615, i16 22995, i16 20804, i16 20982, i16 -32520, i16 21256, i16 27769, i16 -26940, i16 29066, i16 20241, i16 20462, i16 32670, i16 26429, i16 21957, i16 -27384, i16 31168, i16 -30570, i16 32483, i16 22687, i16 25100, i16 -26880, i16 -31142, i16 22040, i16 -26501, i16 24464, i16 -29768, i16 -31548, i16 -28329, i16 21465, i16 26093, i16 24207, i16 30044, i16 24676, i16 32110, i16 23167, i16 32490, i16 32493, i16 -28823, i16 21927, i16 23459, i16 24748, i16 26059, i16 29572], [190 x i16] [i16 -30548, i16 -30546, i16 -30545, i16 -30544, i16 -30542, i16 -30541, i16 -30540, i16 -30539, i16 -30538, i16 -30536, i16 -30535, i16 -30534, i16 -30533, i16 -30531, i16 -30530, i16 -30529, i16 -30528, i16 -30525, i16 -30524, i16 -30521, i16 -30520, i16 -30518, i16 -30517, i16 -30516, i16 -30515, i16 -30513, i16 -30512, i16 -30511, i16 -30509, i16 -30506, i16 -30505, i16 -30502, i16 -30501, i16 -30500, i16 -30499, i16 -30498, i16 -30496, i16 -30495, i16 -30490, i16 -30489, i16 -30487, i16 -30486, i16 -30485, i16 -30484, i16 -30483, i16 -30482, i16 -30481, i16 -30478, i16 -30475, i16 -30474, i16 -30473, i16 -30470, i16 -30469, i16 -30467, i16 -30465, i16 -30464, i16 -30463, i16 -30461, i16 -30460, i16 -30459, i16 -30458, i16 -30457, i16 -30456, i16 -30455, i16 -30453, i16 -30452, i16 -30451, i16 -30450, i16 -30449, i16 -30447, i16 -30444, i16 -30443, i16 -30442, i16 -30441, i16 -30440, i16 -30436, i16 -30435, i16 -30434, i16 -30433, i16 -30432, i16 -30430, i16 -30429, i16 -30428, i16 -30426, i16 -30425, i16 -30424, i16 -30423, i16 -30420, i16 -30419, i16 -30418, i16 -30417, i16 -30415, i16 -30414, i16 -30413, i16 -30411, i16 -30409, i16 -28663, i16 30307, i16 30505, i16 32474, i16 -26764, i16 -31333, i16 23398, i16 31348, i16 -26902, i16 -30656, i16 21195, i16 29071, i16 24490, i16 26092, i16 -29726, i16 23547, i16 -26001, i16 24033, i16 27529, i16 27739, i16 -29779, i16 -29777, i16 -28662, i16 -28731, i16 21387, i16 25276, i16 -25050, i16 -25043, i16 21568, i16 20011, i16 -32067, i16 29273, i16 -31076, i16 23830, i16 -30631, i16 28079, i16 -26939, i16 21713, i16 20122, i16 -29770, i16 28937, i16 21693, i16 -27127, i16 28895, i16 28153, i16 30416, i16 20005, i16 30740, i16 -30958, i16 23721, i16 24310, i16 -30208, i16 -26468, i16 -27122, i16 28814, i16 27839, i16 22852, i16 25513, i16 30524, i16 -30643, i16 28436, i16 -32141, i16 22576, i16 29141, i16 21388, i16 30746, i16 -26943, i16 21761, i16 24422, i16 28976, i16 23476, i16 -29670, i16 -25972, i16 27523, i16 22830, i16 -25041, i16 31207, i16 26472, i16 25196, i16 20335, i16 30113, i16 32650, i16 27915, i16 -27085, i16 27687, i16 20208, i16 30162, i16 20859, i16 26679, i16 28478, i16 -28544, i16 -32400, i16 22934, i16 29814], [190 x i16] [i16 -30408, i16 -30407, i16 -30406, i16 -30405, i16 -30404, i16 -30403, i16 -30402, i16 -30401, i16 -30400, i16 -30398, i16 -30397, i16 -30395, i16 -30394, i16 -30393, i16 -30392, i16 -30391, i16 -30390, i16 -30389, i16 -30388, i16 -30387, i16 -30386, i16 -30385, i16 -30384, i16 -30383, i16 -30382, i16 -30381, i16 -30380, i16 -30379, i16 -30378, i16 -30377, i16 -30376, i16 -30375, i16 -30374, i16 -30373, i16 -30372, i16 -30371, i16 -30368, i16 -30367, i16 -30366, i16 -30365, i16 -30364, i16 -30363, i16 -30361, i16 -30360, i16 -30359, i16 -30358, i16 -30357, i16 -30356, i16 -30355, i16 -30354, i16 -30353, i16 -30352, i16 -30351, i16 -30350, i16 -30349, i16 -30348, i16 -30347, i16 -30346, i16 -30345, i16 -30344, i16 -30343, i16 -30342, i16 -30340, i16 -30339, i16 -30338, i16 -30336, i16 -30334, i16 -30332, i16 -30331, i16 -30329, i16 -30328, i16 -30327, i16 -30326, i16 -30325, i16 -30324, i16 -30323, i16 -30322, i16 -30321, i16 -30320, i16 -30319, i16 -30318, i16 -30317, i16 -30316, i16 -30315, i16 -30314, i16 -30313, i16 -30312, i16 -30311, i16 -30310, i16 -30309, i16 -30308, i16 -30307, i16 -30306, i16 -30305, i16 -30304, i16 -30303, i16 25671, i16 23591, i16 -28571, i16 31377, i16 -29661, i16 23002, i16 21676, i16 -32256, i16 -31889, i16 -30335, i16 -32768, i16 26928, i16 22094, i16 -32714, i16 29239, i16 -28210, i16 20918, i16 20063, i16 -26507, i16 25494, i16 19994, i16 21494, i16 26355, i16 -32437, i16 22812, i16 28082, i16 19968, i16 22777, i16 21307, i16 25558, i16 -27407, i16 20381, i16 20234, i16 -30621, i16 -26480, i16 22839, i16 -28585, i16 31227, i16 20202, i16 -32528, i16 30097, i16 27778, i16 23452, i16 23016, i16 24413, i16 26885, i16 -31103, i16 20506, i16 24050, i16 20057, i16 30691, i16 20197, i16 -32134, i16 25233, i16 26131, i16 -28527, i16 23673, i16 20159, i16 24441, i16 -32314, i16 -28616, i16 -32636, i16 30123, i16 20134, i16 -30508, i16 24847, i16 27589, i16 24518, i16 20041, i16 30410, i16 28322, i16 -29725, i16 -29778, i16 -29686, i16 -29743, i16 24322, i16 32764, i16 32716, i16 32462, i16 -31947, i16 -31893, i16 22240, i16 27575, i16 -26637, i16 -27084, i16 23035, i16 21535, i16 -27402, i16 28139, i16 23493, i16 -26258, i16 23609, i16 24341, i16 -26992], [190 x i16] [i16 -30302, i16 -30301, i16 -30300, i16 -30299, i16 -30298, i16 -30297, i16 -30296, i16 -30295, i16 -30294, i16 -30293, i16 -30292, i16 -30291, i16 -30290, i16 -30289, i16 -30288, i16 -30287, i16 -30286, i16 -30285, i16 -30284, i16 -30283, i16 -30282, i16 -30281, i16 -30280, i16 -30279, i16 -30278, i16 -30277, i16 -30276, i16 -30275, i16 -30274, i16 -30273, i16 -30272, i16 -30269, i16 -30259, i16 -30253, i16 -30252, i16 -30251, i16 -30249, i16 -30248, i16 -30247, i16 -30245, i16 -30243, i16 -30241, i16 -30240, i16 -30239, i16 -30238, i16 -30236, i16 -30233, i16 -30232, i16 -30231, i16 -30230, i16 -30228, i16 -30227, i16 -30226, i16 -30224, i16 -30223, i16 -30222, i16 -30220, i16 -30219, i16 -30218, i16 -30217, i16 -30216, i16 -30215, i16 -30214, i16 -30213, i16 -30212, i16 -30211, i16 -30210, i16 -30209, i16 -30207, i16 -30206, i16 -30205, i16 -30204, i16 -30203, i16 -30202, i16 -30200, i16 -30199, i16 -30198, i16 -30197, i16 -30196, i16 -30195, i16 -30194, i16 -30193, i16 -30192, i16 -30191, i16 -30190, i16 -30189, i16 -30188, i16 -30187, i16 -30186, i16 -30185, i16 -30184, i16 -30183, i16 -30182, i16 -30181, i16 -30180, i16 -30179, i16 21360, i16 -32015, i16 27185, i16 23156, i16 -24976, i16 24212, i16 32552, i16 -31815, i16 -31708, i16 -31707, i16 -31897, i16 -30905, i16 -28722, i16 -29342, i16 30408, i16 24433, i16 -26474, i16 30828, i16 26144, i16 21727, i16 25317, i16 20323, i16 -32317, i16 30152, i16 24248, i16 -26931, i16 -29174, i16 -30983, i16 21647, i16 27891, i16 28044, i16 27704, i16 24703, i16 21191, i16 29992, i16 24189, i16 20248, i16 24736, i16 24551, i16 23588, i16 30001, i16 -28498, i16 -27456, i16 29369, i16 27833, i16 28216, i16 -28343, i16 26377, i16 21451, i16 21491, i16 20305, i16 -28215, i16 -29711, i16 21448, i16 24188, i16 -28734, i16 28132, i16 20110, i16 30402, i16 27014, i16 -31138, i16 24858, i16 -32250, i16 20313, i16 20446, i16 -28610, i16 -25476, i16 24841, i16 28189, i16 28180, i16 -27003, i16 20104, i16 23089, i16 -26904, i16 19982, i16 23679, i16 31161, i16 23431, i16 -29715, i16 32701, i16 29577, i16 22495, i16 -32117, i16 -28479, i16 21505, i16 -28601, i16 21947, i16 23786, i16 24481, i16 24840, i16 27442, i16 29425, i16 -32590, i16 -30071], [190 x i16] [i16 -30178, i16 -30177, i16 -30176, i16 -30175, i16 -30174, i16 -30173, i16 -30172, i16 -30171, i16 -30170, i16 -30169, i16 -30168, i16 -30167, i16 -30166, i16 -30165, i16 -30164, i16 -30163, i16 -30162, i16 -30161, i16 -30160, i16 -30159, i16 -30158, i16 -30157, i16 -30156, i16 -30155, i16 -30154, i16 -30153, i16 -30152, i16 -30151, i16 -30150, i16 -30149, i16 -30148, i16 -30147, i16 -30145, i16 -30144, i16 -30143, i16 -30142, i16 -30141, i16 -30140, i16 -30139, i16 -30138, i16 -30137, i16 -30135, i16 -30134, i16 -30133, i16 -30132, i16 -30131, i16 -30130, i16 -30129, i16 -30128, i16 -30127, i16 -30126, i16 -30125, i16 -30124, i16 -30123, i16 -30122, i16 -30121, i16 -30120, i16 -30119, i16 -30118, i16 -30117, i16 -30116, i16 -30115, i16 -30114, i16 -30113, i16 -30112, i16 -30111, i16 -30110, i16 -30109, i16 -30108, i16 -30107, i16 -30106, i16 -30105, i16 -30104, i16 -30103, i16 -30102, i16 -30101, i16 -30100, i16 -30099, i16 -30098, i16 -30097, i16 -30096, i16 -30095, i16 -30094, i16 -30093, i16 -30092, i16 -30091, i16 -30090, i16 -30089, i16 -30088, i16 -30086, i16 -30085, i16 -30084, i16 -30083, i16 -30082, i16 -30081, i16 -30080, i16 28020, i16 23507, i16 -30507, i16 -26492, i16 -29589, i16 -26003, i16 -25037, i16 28170, i16 20900, i16 20803, i16 22435, i16 -30591, i16 21407, i16 25588, i16 -28779, i16 22253, i16 21592, i16 22278, i16 29503, i16 28304, i16 32536, i16 -28708, i16 -32047, i16 24895, i16 24616, i16 -27038, i16 26352, i16 32422, i16 -29302, i16 -29245, i16 -27483, i16 23731, i16 31908, i16 26376, i16 24742, i16 -27131, i16 -32744, i16 20113, i16 -28441, i16 21248, i16 -27032, i16 20801, i16 -28720, i16 -31372, i16 -28323, i16 26197, i16 -26635, i16 23381, i16 21277, i16 30776, i16 26434, i16 26685, i16 21705, i16 28798, i16 23472, i16 -28803, i16 20877, i16 22312, i16 21681, i16 25874, i16 26242, i16 -29346, i16 -29373, i16 -32497, i16 -31636, i16 -28563, i16 31967, i16 20991, i16 -31237, i16 26531, i16 26089, i16 28577, i16 -31068, i16 -29055, i16 22122, i16 -28640, i16 30338, i16 28790, i16 29157, i16 -29405, i16 25321, i16 21017, i16 27901, i16 -29380, i16 24590, i16 22686, i16 24974, i16 26366, i16 -29344, i16 25166, i16 21939, i16 28195, i16 26413, i16 -28825], [190 x i16] [i16 -30079, i16 -30078, i16 -30077, i16 -30076, i16 -30075, i16 -30074, i16 -30073, i16 -30072, i16 -30069, i16 -30068, i16 -30067, i16 -30066, i16 -30065, i16 -30064, i16 -30063, i16 -30062, i16 -30060, i16 -30059, i16 -30058, i16 -30057, i16 -30056, i16 -30055, i16 -30054, i16 -30053, i16 -30052, i16 -30051, i16 -30050, i16 -30049, i16 -30048, i16 -30047, i16 -30046, i16 -30045, i16 -30044, i16 -30043, i16 -30042, i16 -30041, i16 -30040, i16 -30039, i16 -30038, i16 -30037, i16 -30036, i16 -30035, i16 -30034, i16 -30033, i16 -30032, i16 -30031, i16 -30030, i16 -30029, i16 -30028, i16 -30027, i16 -30026, i16 -30025, i16 -30024, i16 -30023, i16 -30022, i16 -30021, i16 -30020, i16 -30019, i16 -30018, i16 -30017, i16 -30016, i16 -30015, i16 -30014, i16 -30013, i16 -30012, i16 -30011, i16 -30010, i16 -30009, i16 -30008, i16 -30007, i16 -30006, i16 -30005, i16 -30004, i16 -30003, i16 -30002, i16 -30001, i16 -30000, i16 -29999, i16 -29998, i16 -29997, i16 -29996, i16 -29995, i16 -29994, i16 -29993, i16 -29992, i16 -29991, i16 -29990, i16 -29989, i16 -29988, i16 -29987, i16 -29986, i16 -29985, i16 -29984, i16 -29983, i16 -29982, i16 -29981, i16 -27423, i16 -27144, i16 30504, i16 26629, i16 27048, i16 21643, i16 20045, i16 28856, i16 -29752, i16 25688, i16 25995, i16 23429, i16 31364, i16 20538, i16 23528, i16 30651, i16 27617, i16 -30087, i16 31896, i16 27838, i16 30415, i16 26025, i16 -28777, i16 23853, i16 23637, i16 -31176, i16 26632, i16 21344, i16 25112, i16 31449, i16 28251, i16 32509, i16 27167, i16 31456, i16 24432, i16 28467, i16 24352, i16 25484, i16 28072, i16 26454, i16 19976, i16 24080, i16 -29402, i16 20183, i16 -32576, i16 30260, i16 -26980, i16 25307, i16 26157, i16 25214, i16 27836, i16 -29323, i16 29031, i16 32617, i16 20806, i16 -32633, i16 21484, i16 -28562, i16 25240, i16 21746, i16 -30992, i16 -28775, i16 -32763, i16 -27369, i16 -31465, i16 -28711, i16 27993, i16 29645, i16 26015, i16 30495, i16 29956, i16 30759, i16 -32261, i16 -29410, i16 -27512, i16 20390, i16 26517, i16 30137, i16 -29750, i16 -26873, i16 25391, i16 -27321, i16 -27083, i16 -31560, i16 25379, i16 30529, i16 24449, i16 29424, i16 20105, i16 24596, i16 25972, i16 25327, i16 27491, i16 25919], [190 x i16] [i16 -29980, i16 -29979, i16 -29978, i16 -29977, i16 -29976, i16 -29975, i16 -29974, i16 -29973, i16 -29972, i16 -29971, i16 -29970, i16 -29969, i16 -29968, i16 -29967, i16 -29966, i16 -29965, i16 -29964, i16 -29963, i16 -29962, i16 -29961, i16 -29960, i16 -29959, i16 -29958, i16 -29957, i16 -29956, i16 -29955, i16 -29954, i16 -29953, i16 -29952, i16 -29951, i16 -29950, i16 -29949, i16 -29948, i16 -29947, i16 -29946, i16 -29944, i16 -29943, i16 -29942, i16 -29941, i16 -29940, i16 -29939, i16 -29938, i16 -29937, i16 -29936, i16 -29935, i16 -29934, i16 -29933, i16 -29932, i16 -29931, i16 -29930, i16 -29929, i16 -29928, i16 -29927, i16 -29926, i16 -29925, i16 -29924, i16 -29923, i16 -29922, i16 -29921, i16 -29920, i16 -29919, i16 -29918, i16 -29917, i16 -29916, i16 -29915, i16 -29913, i16 -29912, i16 -29911, i16 -29910, i16 -29909, i16 -29908, i16 -29907, i16 -29906, i16 -29905, i16 -29904, i16 -29903, i16 -29902, i16 -29901, i16 -29900, i16 -29899, i16 -29898, i16 -29897, i16 -29896, i16 -29895, i16 -29894, i16 -29893, i16 -29892, i16 -29891, i16 -29890, i16 -29889, i16 -29888, i16 -29887, i16 -29886, i16 -29885, i16 -29884, i16 -29883, i16 24103, i16 30151, i16 -28463, i16 -29759, i16 -32099, i16 26525, i16 25903, i16 21553, i16 -30952, i16 30693, i16 -32606, i16 -32510, i16 27713, i16 20043, i16 32455, i16 -32692, i16 30452, i16 26893, i16 27542, i16 25191, i16 20540, i16 20356, i16 22336, i16 25351, i16 27490, i16 -29250, i16 21482, i16 26088, i16 32440, i16 24535, i16 25370, i16 25527, i16 -32269, i16 -32268, i16 32622, i16 24092, i16 23769, i16 21046, i16 26234, i16 31209, i16 31258, i16 -29400, i16 28825, i16 30164, i16 28382, i16 27835, i16 31378, i16 20013, i16 30405, i16 24544, i16 -27489, i16 -30601, i16 32456, i16 31181, i16 -32577, i16 -28211, i16 20210, i16 20247, i16 -32225, i16 21608, i16 24030, i16 27954, i16 -29748, i16 31909, i16 -28812, i16 -32616, i16 24090, i16 21650, i16 30385, i16 23449, i16 26172, i16 -25948, i16 29664, i16 26666, i16 -31013, i16 26417, i16 29482, i16 -29704, i16 -29733, i16 -28656, i16 31481, i16 28891, i16 29038, i16 25284, i16 30633, i16 22065, i16 20027, i16 -31657, i16 26609, i16 21161, i16 -31040, i16 -29394, i16 -27400, i16 31569], [190 x i16] [i16 -29882, i16 -29881, i16 -29880, i16 -29879, i16 -29878, i16 -29877, i16 -29876, i16 -29875, i16 -29874, i16 -29873, i16 -29872, i16 -29871, i16 -29870, i16 -29869, i16 -29868, i16 -29867, i16 -29866, i16 -29865, i16 -29864, i16 -29863, i16 -29862, i16 -29861, i16 -29860, i16 -29859, i16 -29858, i16 -29857, i16 -29856, i16 -29855, i16 -29854, i16 -29853, i16 -29852, i16 -29851, i16 -29849, i16 -29848, i16 -29847, i16 -29846, i16 -29845, i16 -29843, i16 -29842, i16 -29841, i16 -29840, i16 -29839, i16 -29838, i16 -29837, i16 -29836, i16 -29835, i16 -29834, i16 -29833, i16 -29832, i16 -29831, i16 -29830, i16 -29829, i16 -29828, i16 -29827, i16 -29826, i16 -29825, i16 -29824, i16 -29823, i16 -29822, i16 -29821, i16 -29820, i16 -29819, i16 -29818, i16 -29817, i16 -29816, i16 -29815, i16 -29814, i16 -29813, i16 -29812, i16 -29811, i16 -29810, i16 -29809, i16 -29808, i16 -29807, i16 -29806, i16 -29805, i16 -29804, i16 -29803, i16 -29802, i16 -29801, i16 -29800, i16 -29799, i16 -29798, i16 -29797, i16 -29796, i16 -29795, i16 -29794, i16 -29793, i16 -29780, i16 -29775, i16 -29765, i16 -29753, i16 -29744, i16 -29718, i16 -29687, i16 -29666, i16 20303, i16 27880, i16 31069, i16 -25989, i16 25235, i16 29226, i16 25341, i16 19987, i16 30742, i16 -28820, i16 25776, i16 -29350, i16 31686, i16 26729, i16 24196, i16 -30523, i16 22918, i16 25758, i16 22766, i16 29366, i16 26894, i16 -27355, i16 -28675, i16 -29352, i16 22368, i16 32512, i16 -29690, i16 20934, i16 25417, i16 25305, i16 21331, i16 26700, i16 29730, i16 -31999, i16 -28340, i16 21828, i16 30528, i16 28796, i16 27978, i16 20857, i16 21672, i16 -29372, i16 23039, i16 28363, i16 28100, i16 23388, i16 32043, i16 20180, i16 31869, i16 28371, i16 23376, i16 -32278, i16 28173, i16 23383, i16 -25853, i16 26837, i16 -29142, i16 23447, i16 32508, i16 24635, i16 32437, i16 -28487, i16 -29328, i16 22863, i16 25549, i16 31199, i16 -29261, i16 21330, i16 26063, i16 31062, i16 -29755, i16 -27077, i16 32452, i16 -27461, i16 32386, i16 22068, i16 -28279, i16 26368, i16 32618, i16 23562, i16 -28555, i16 26152, i16 24038, i16 20304, i16 26590, i16 20570, i16 20316, i16 22352, i16 24231, i16 -6128, i16 -6127, i16 -6126, i16 -6125, i16 -6124], [190 x i16] [i16 -29640, i16 -29639, i16 -29638, i16 -29637, i16 -29636, i16 -29635, i16 -29634, i16 -29633, i16 -29632, i16 -29630, i16 -29629, i16 -29628, i16 -29627, i16 -29624, i16 -29622, i16 -29621, i16 -29619, i16 -29618, i16 -29617, i16 -29616, i16 -29615, i16 -29614, i16 -29613, i16 -29612, i16 -29610, i16 -29609, i16 -29608, i16 -29607, i16 -29605, i16 -29604, i16 -29603, i16 -29602, i16 -29601, i16 -29600, i16 -29597, i16 -29596, i16 -29595, i16 -29594, i16 -29593, i16 -29592, i16 -29591, i16 -29588, i16 -29587, i16 -29586, i16 -29585, i16 -29584, i16 -29583, i16 -29582, i16 -29580, i16 -29579, i16 -29578, i16 -29577, i16 -29573, i16 -29572, i16 -29571, i16 -29570, i16 -29569, i16 -29568, i16 -29567, i16 -29565, i16 -29564, i16 -29562, i16 -29561, i16 -29560, i16 -29557, i16 -29555, i16 -29554, i16 -29553, i16 -29552, i16 -29551, i16 -29550, i16 -29549, i16 -29547, i16 -29546, i16 -29545, i16 -29543, i16 -29542, i16 -29541, i16 -29540, i16 -29539, i16 -29538, i16 -29537, i16 -29536, i16 -29535, i16 -29534, i16 -29533, i16 -29532, i16 -29531, i16 -29530, i16 -29529, i16 -29528, i16 -29527, i16 -29526, i16 -29525, i16 -29524, i16 -29523, i16 20109, i16 19980, i16 20800, i16 19984, i16 24319, i16 21317, i16 19989, i16 20120, i16 19998, i16 -25806, i16 23404, i16 22121, i16 20008, i16 31162, i16 20031, i16 21269, i16 20039, i16 22829, i16 29243, i16 21358, i16 27664, i16 22239, i16 -32540, i16 -26217, i16 27603, i16 30590, i16 -24809, i16 20022, i16 20127, i16 -24816, i16 20060, i16 20073, i16 20115, i16 -32120, i16 23387, i16 21868, i16 22031, i16 20164, i16 21389, i16 21405, i16 21411, i16 21413, i16 21422, i16 -26779, i16 -29347, i16 21274, i16 21493, i16 21286, i16 21294, i16 21310, i16 -29348, i16 21350, i16 21347, i16 20994, i16 21000, i16 21006, i16 21037, i16 21043, i16 21055, i16 21056, i16 21068, i16 21086, i16 21089, i16 21084, i16 -31569, i16 21117, i16 21122, i16 21121, i16 21136, i16 21139, i16 20866, i16 32596, i16 20155, i16 20163, i16 20169, i16 20162, i16 20200, i16 20193, i16 20203, i16 20190, i16 20251, i16 20211, i16 20258, i16 20324, i16 20213, i16 20261, i16 20263, i16 20233, i16 20267, i16 20318, i16 20327, i16 25912, i16 20314, i16 20317], [190 x i16] [i16 -29522, i16 -29521, i16 -29520, i16 -29519, i16 -29518, i16 -29517, i16 -29516, i16 -29515, i16 -29514, i16 -29513, i16 -29512, i16 -29511, i16 -29510, i16 -29509, i16 -29508, i16 -29507, i16 -29506, i16 -29505, i16 -29504, i16 -29503, i16 -29502, i16 -29501, i16 -29500, i16 -29499, i16 -29498, i16 -29497, i16 -29496, i16 -29495, i16 -29494, i16 -29493, i16 -29492, i16 -29491, i16 -29490, i16 -29489, i16 -29488, i16 -29487, i16 -29486, i16 -29485, i16 -29484, i16 -29483, i16 -29482, i16 -29481, i16 -29480, i16 -29479, i16 -29478, i16 -29477, i16 -29476, i16 -29475, i16 -29474, i16 -29473, i16 -29472, i16 -29471, i16 -29470, i16 -29469, i16 -29468, i16 -29467, i16 -29466, i16 -29465, i16 -29464, i16 -29463, i16 -29462, i16 -29461, i16 -29460, i16 -29459, i16 -29458, i16 -29457, i16 -29456, i16 -29455, i16 -29454, i16 -29453, i16 -29452, i16 -29451, i16 -29450, i16 -29449, i16 -29448, i16 -29447, i16 -29446, i16 -29445, i16 -29444, i16 -29443, i16 -29442, i16 -29441, i16 -29440, i16 -29439, i16 -29438, i16 -29437, i16 -29436, i16 -29435, i16 -29434, i16 -29433, i16 -29432, i16 -29431, i16 -29430, i16 -29429, i16 -29428, i16 -29427, i16 20319, i16 20311, i16 20274, i16 20285, i16 20342, i16 20340, i16 20369, i16 20361, i16 20355, i16 20367, i16 20350, i16 20347, i16 20394, i16 20348, i16 20396, i16 20372, i16 20454, i16 20456, i16 20458, i16 20421, i16 20442, i16 20451, i16 20444, i16 20433, i16 20447, i16 20472, i16 20521, i16 20556, i16 20467, i16 20524, i16 20495, i16 20526, i16 20525, i16 20478, i16 20508, i16 20492, i16 20517, i16 20520, i16 20606, i16 20547, i16 20565, i16 20552, i16 20558, i16 20588, i16 20603, i16 20645, i16 20647, i16 20649, i16 20666, i16 20694, i16 20742, i16 20717, i16 20716, i16 20710, i16 20718, i16 20743, i16 20747, i16 20189, i16 27709, i16 20312, i16 20325, i16 20430, i16 -24672, i16 27718, i16 31860, i16 20846, i16 24061, i16 -24887, i16 -26216, i16 20865, i16 22804, i16 21241, i16 21261, i16 -30201, i16 21264, i16 20971, i16 22809, i16 20821, i16 20128, i16 20822, i16 20147, i16 -30610, i16 -30556, i16 20149, i16 -32492, i16 -30510, i16 31104, i16 23348, i16 -30717, i16 32696, i16 20907, i16 20913, i16 20925, i16 20924], [190 x i16] [i16 -29426, i16 -29425, i16 -29424, i16 -29423, i16 -29422, i16 -29421, i16 -29420, i16 -29419, i16 -29418, i16 -29417, i16 -29416, i16 -29415, i16 -29414, i16 -29413, i16 -29412, i16 -29408, i16 -29359, i16 -29358, i16 -29353, i16 -29345, i16 -29339, i16 -29336, i16 -29335, i16 -29334, i16 -29332, i16 -29330, i16 -29329, i16 -29327, i16 -29326, i16 -29320, i16 -29319, i16 -29318, i16 -29317, i16 -29316, i16 -29315, i16 -29314, i16 -29313, i16 -29312, i16 -29310, i16 -29309, i16 -29306, i16 -29305, i16 -29304, i16 -29303, i16 -29300, i16 -29299, i16 -29298, i16 -29297, i16 -29296, i16 -29294, i16 -29293, i16 -29291, i16 -29290, i16 -29289, i16 -29288, i16 -29287, i16 -29286, i16 -29285, i16 -29284, i16 -29283, i16 -29282, i16 -29280, i16 -29279, i16 -29278, i16 -29276, i16 -29275, i16 -29274, i16 -29273, i16 -29272, i16 -29271, i16 -29270, i16 -29269, i16 -29268, i16 -29267, i16 -29266, i16 -29265, i16 -29264, i16 -29262, i16 -29258, i16 -29257, i16 -29255, i16 -29253, i16 -29251, i16 -29248, i16 -29247, i16 -29246, i16 -29243, i16 -29241, i16 -29240, i16 -29239, i16 -29238, i16 -29235, i16 -29232, i16 -29230, i16 -29229, i16 -29228, i16 20935, i16 20886, i16 20898, i16 20901, i16 -29792, i16 -29786, i16 -29785, i16 -29782, i16 -29772, i16 -29771, i16 -29769, i16 -29758, i16 -29757, i16 -29749, i16 -29745, i16 -29746, i16 -29742, i16 -29741, i16 -29740, i16 -29738, i16 -29736, i16 -29735, i16 -29732, i16 -29729, i16 -29728, i16 -29724, i16 -29720, i16 -29719, i16 -29714, i16 -29712, i16 -29709, i16 -29706, i16 -29703, i16 -29700, i16 -29697, i16 -29696, i16 -29694, i16 -29692, i16 -29689, i16 -29684, i16 -29681, i16 -29679, i16 -29678, i16 -29676, i16 -29675, i16 -29674, i16 -29671, i16 -29669, i16 -29672, i16 -29667, i16 -29665, i16 -29664, i16 -29663, i16 -29659, i16 -29657, i16 -29654, i16 -29653, i16 -29650, i16 -29649, i16 -29646, i16 -29645, i16 -29643, i16 -29642, i16 21353, i16 21370, i16 -27107, i16 -27102, i16 -27103, i16 -27087, i16 -27094, i16 -27075, i16 -27076, i16 -27070, i16 -27063, i16 -27052, i16 -27041, i16 -27033, i16 -27028, i16 -27022, i16 -27020, i16 -27000, i16 -26995, i16 -26985, i16 -26960, i16 -28521, i16 -28517, i16 -28515, i16 -28519, i16 -28500, i16 -28511, i16 -28492, i16 -28493, i16 -28490, i16 -28486], [190 x i16] [i16 -29227, i16 -29224, i16 -29223, i16 -29220, i16 -29216, i16 -29215, i16 -29214, i16 -29211, i16 -29210, i16 -29209, i16 -29207, i16 -29203, i16 -29202, i16 -29200, i16 -29199, i16 -29198, i16 -29196, i16 -29194, i16 -29188, i16 -29186, i16 -29185, i16 -29184, i16 -29183, i16 -29182, i16 -29181, i16 -29180, i16 -29178, i16 -29177, i16 -29176, i16 -29173, i16 -29171, i16 -29170, i16 -29168, i16 -29167, i16 -29166, i16 -29165, i16 -29163, i16 -29162, i16 -29161, i16 -29160, i16 -29159, i16 -29158, i16 -29157, i16 -29156, i16 -29152, i16 -29151, i16 -29148, i16 -29147, i16 -29146, i16 -29145, i16 -29144, i16 -29141, i16 -29139, i16 -29136, i16 -29134, i16 -29133, i16 -29132, i16 -29130, i16 -29129, i16 -29128, i16 -29125, i16 -29124, i16 -29122, i16 -29121, i16 -29117, i16 -29115, i16 -29114, i16 -29108, i16 -29107, i16 -29106, i16 -29105, i16 -29104, i16 -29101, i16 -29100, i16 -29099, i16 -29098, i16 -29097, i16 -29096, i16 -29094, i16 -29093, i16 -29092, i16 -29091, i16 -29090, i16 -29089, i16 -29088, i16 -29087, i16 -29086, i16 -29085, i16 -29084, i16 -29083, i16 -29081, i16 -29080, i16 -29078, i16 -29077, i16 -29074, i16 -29071, i16 -28488, i16 -28496, i16 -28465, i16 -28475, i16 -28482, i16 -28464, i16 -28476, i16 -28473, i16 -28461, i16 -28442, i16 -28446, i16 -28452, i16 -28457, i16 -28453, i16 -28437, i16 -28433, i16 -28418, i16 -28412, i16 -28382, i16 -28386, i16 -28381, i16 -28367, i16 -28369, i16 -28359, i16 -28349, i16 -28346, i16 21005, i16 22850, i16 21154, i16 21164, i16 21165, i16 21182, i16 21759, i16 21200, i16 21206, i16 21232, i16 21471, i16 29166, i16 30669, i16 24308, i16 20981, i16 20988, i16 -25809, i16 21430, i16 24321, i16 30042, i16 24047, i16 22348, i16 22441, i16 22433, i16 22654, i16 22716, i16 22725, i16 22737, i16 22313, i16 22316, i16 22314, i16 22323, i16 22329, i16 22318, i16 22319, i16 22364, i16 22331, i16 22338, i16 22377, i16 22405, i16 22379, i16 22406, i16 22396, i16 22395, i16 22376, i16 22381, i16 22390, i16 22387, i16 22445, i16 22436, i16 22412, i16 22450, i16 22479, i16 22439, i16 22452, i16 22419, i16 22432, i16 22485, i16 22488, i16 22490, i16 22489, i16 22482, i16 22456, i16 22516, i16 22511, i16 22520, i16 22500, i16 22493], [190 x i16] [i16 -29069, i16 -29067, i16 -29065, i16 -29064, i16 -29063, i16 -29062, i16 -29061, i16 -29059, i16 -29058, i16 -29056, i16 -29054, i16 -29053, i16 -29052, i16 -29050, i16 -29048, i16 -29047, i16 -29046, i16 -29045, i16 -29044, i16 -29043, i16 -29042, i16 -29039, i16 -29038, i16 -29037, i16 -29035, i16 -29034, i16 -29033, i16 -29032, i16 -29031, i16 -29030, i16 -29029, i16 -29027, i16 -29025, i16 -29024, i16 -29023, i16 -29022, i16 -29021, i16 -29020, i16 -29019, i16 -29018, i16 -29017, i16 -29016, i16 -29015, i16 -29014, i16 -29011, i16 -29010, i16 -29008, i16 -29007, i16 -29005, i16 -29004, i16 -29003, i16 -29002, i16 -29001, i16 -29000, i16 -28999, i16 -28997, i16 -28996, i16 -28995, i16 -28994, i16 -28993, i16 -28992, i16 -28991, i16 -28990, i16 -28989, i16 -28988, i16 -28987, i16 -28986, i16 -28985, i16 -28984, i16 -28983, i16 -28982, i16 -28981, i16 -28980, i16 -28979, i16 -28977, i16 -28976, i16 -28975, i16 -28974, i16 -28973, i16 -28972, i16 -28971, i16 -28970, i16 -28969, i16 -28968, i16 -28967, i16 -28966, i16 -28965, i16 -28964, i16 -28963, i16 -28962, i16 -28961, i16 -28960, i16 -28959, i16 -28958, i16 -28957, i16 -28956, i16 22539, i16 22541, i16 22525, i16 22509, i16 22528, i16 22558, i16 22553, i16 22596, i16 22560, i16 22629, i16 22636, i16 22657, i16 22665, i16 22682, i16 22656, i16 -26200, i16 -24807, i16 25087, i16 -32135, i16 -32131, i16 -32129, i16 -32113, i16 -32118, i16 -32088, i16 -32124, i16 -32114, i16 -32111, i16 -32105, i16 -32103, i16 -32085, i16 -32072, i16 -32066, i16 -32080, i16 -32056, i16 -32054, i16 -32029, i16 -32104, i16 -32073, i16 -32082, i16 -32053, i16 -32052, i16 -32063, i16 -32087, i16 -32076, i16 -32095, i16 -32086, i16 -32097, i16 -32060, i16 -32050, i16 -32092, i16 -32031, i16 -31991, i16 -32009, i16 -32028, i16 -31985, i16 -31993, i16 -32036, i16 -32012, i16 -32046, i16 -32040, i16 -31988, i16 -32005, i16 -32045, i16 -31983, i16 -31974, i16 -31994, i16 -31980, i16 -31979, i16 -32032, i16 -32043, i16 -31972, i16 -31919, i16 -31909, i16 -31908, i16 -31992, i16 -31854, i16 -31940, i16 -31948, i16 -31951, i16 -31845, i16 -31906, i16 -31953, i16 -31921, i16 -31929, i16 -31933, i16 -31905, i16 -31936, i16 -31977, i16 -31904, i16 -31955, i16 -31942, i16 -31949, i16 -31898, i16 -31899], [190 x i16] [i16 -28955, i16 -28954, i16 -28953, i16 -28952, i16 -28951, i16 -28950, i16 -28949, i16 -28948, i16 -28947, i16 -28946, i16 -28945, i16 -28944, i16 -28943, i16 -28942, i16 -28941, i16 -28940, i16 -28939, i16 -28938, i16 -28937, i16 -28936, i16 -28935, i16 -28934, i16 -28933, i16 -28932, i16 -28931, i16 -28930, i16 -28929, i16 -28928, i16 -28927, i16 -28926, i16 -28925, i16 -28924, i16 -28923, i16 -28922, i16 -28921, i16 -28920, i16 -28919, i16 -28918, i16 -28917, i16 -28916, i16 -28915, i16 -28914, i16 -28913, i16 -28912, i16 -28911, i16 -28910, i16 -28909, i16 -28908, i16 -28907, i16 -28906, i16 -28905, i16 -28904, i16 -28903, i16 -28902, i16 -28901, i16 -28900, i16 -28899, i16 -28898, i16 -28897, i16 -28896, i16 -28895, i16 -28894, i16 -28893, i16 -28892, i16 -28891, i16 -28890, i16 -28889, i16 -28888, i16 -28887, i16 -28886, i16 -28885, i16 -28884, i16 -28883, i16 -28882, i16 -28881, i16 -28880, i16 -28879, i16 -28878, i16 -28877, i16 -28876, i16 -28875, i16 -28874, i16 -28873, i16 -28872, i16 -28871, i16 -28870, i16 -28869, i16 -28868, i16 -28867, i16 -28866, i16 -28865, i16 -28864, i16 -28863, i16 -28862, i16 -28861, i16 -28860, i16 -31896, i16 -31973, i16 -31895, i16 -31892, i16 -31894, i16 -31891, i16 -31890, i16 -31824, i16 -31880, i16 -31821, i16 -31820, i16 -31840, i16 -31830, i16 -31853, i16 -31844, i16 -31867, i16 -31876, i16 -31818, i16 -31831, i16 -31875, i16 -31816, i16 -31877, i16 -31848, i16 -31842, i16 -31832, i16 -31814, i16 -31812, i16 -31807, i16 -31743, i16 -31771, i16 -31784, i16 22535, i16 -31720, i16 -31733, i16 -31779, i16 -31747, i16 -31786, i16 -31716, i16 -31688, i16 -31727, i16 -31738, i16 -31788, i16 -31777, i16 -31729, i16 -31741, i16 -31752, i16 -31751, i16 -31766, i16 -31803, i16 -31808, i16 -31706, i16 -31760, i16 -31775, i16 -31652, i16 -31663, i16 -31654, i16 -31655, i16 -31629, i16 -31609, i16 -31608, i16 -31622, i16 -31607, i16 -31624, i16 -31684, i16 -31674, i16 -31639, i16 -31626, i16 -31604, i16 -31602, i16 -31695, i16 -31635, i16 -31551, i16 -31539, i16 -31536, i16 -31514, i16 -31555, i16 -31533, i16 -31542, i16 -31553, i16 -31558, i16 -31520, i16 -31583, i16 -31559, i16 -31564, i16 -31593, i16 -31515, i16 -31517, i16 -31476, i16 29965, i16 -31432, i16 -31504, i16 -31431, i16 -31457, i16 -31430], [190 x i16] [i16 -28859, i16 -28858, i16 -28857, i16 -28856, i16 -28855, i16 -28854, i16 -28853, i16 -28852, i16 -28851, i16 -28850, i16 -28849, i16 -28848, i16 -28847, i16 -28846, i16 -28845, i16 -28844, i16 -28843, i16 -28842, i16 -28841, i16 -28840, i16 -28839, i16 -28838, i16 -28837, i16 -28836, i16 -28835, i16 -28834, i16 -28833, i16 -28832, i16 -28831, i16 -28830, i16 -28829, i16 -28828, i16 -28827, i16 -28822, i16 -28800, i16 -28788, i16 -28782, i16 -28771, i16 -28768, i16 -28767, i16 -28766, i16 -28764, i16 -28763, i16 -28762, i16 -28761, i16 -28758, i16 -28756, i16 -28755, i16 -28754, i16 -28753, i16 -28750, i16 -28749, i16 -28748, i16 -28747, i16 -28745, i16 -28744, i16 -28742, i16 -28741, i16 -28740, i16 -28737, i16 -28736, i16 -28733, i16 -28730, i16 -28727, i16 -28726, i16 -28725, i16 -28724, i16 -28723, i16 -28721, i16 -28718, i16 -28714, i16 -28713, i16 -28710, i16 -28704, i16 -28703, i16 -28701, i16 -28697, i16 -28692, i16 -28689, i16 -28687, i16 -28686, i16 -28684, i16 -28683, i16 -28682, i16 -28678, i16 -28677, i16 -28676, i16 -28674, i16 -28673, i16 -28665, i16 -28664, i16 -28660, i16 -28658, i16 -28653, i16 -28651, i16 -28648, i16 -31402, i16 -31429, i16 -31489, i16 -31492, i16 -31399, i16 -31416, i16 -31384, i16 -31388, i16 -31394, i16 -31366, i16 30626, i16 -31421, i16 -31374, i16 -31365, i16 -31324, i16 -31320, i16 -31353, i16 -31345, i16 -31367, i16 -31314, i16 -31332, i16 -31355, i16 -31303, i16 -31305, i16 -31312, i16 -31277, i16 -31295, i16 -31268, i16 -31233, i16 -31193, i16 -31227, i16 -31191, i16 -31210, i16 -31172, i16 24318, i16 24328, i16 22844, i16 22849, i16 -32713, i16 22869, i16 22874, i16 22872, i16 21263, i16 23586, i16 23589, i16 23596, i16 23604, i16 25164, i16 25194, i16 25247, i16 25275, i16 25290, i16 25306, i16 25303, i16 25326, i16 25378, i16 25334, i16 25401, i16 25419, i16 25411, i16 25517, i16 25590, i16 25457, i16 25466, i16 25486, i16 25524, i16 25453, i16 25516, i16 25482, i16 25449, i16 25518, i16 25532, i16 25586, i16 25592, i16 25568, i16 25599, i16 25540, i16 25566, i16 25550, i16 25682, i16 25542, i16 25534, i16 25669, i16 25665, i16 25611, i16 25627, i16 25632, i16 25612, i16 25638, i16 25633, i16 25694, i16 25732, i16 25709, i16 25750], [190 x i16] [i16 -28647, i16 -28644, i16 -28637, i16 -28636, i16 -28635, i16 -28633, i16 -28632, i16 -28631, i16 -28630, i16 -28629, i16 -28628, i16 -28624, i16 -28623, i16 -28622, i16 -28621, i16 -28620, i16 -28617, i16 -28615, i16 -28614, i16 -28611, i16 -28609, i16 -28608, i16 -28605, i16 -28603, i16 -28602, i16 -28600, i16 -28599, i16 -28598, i16 -28597, i16 -28596, i16 -28594, i16 -28588, i16 -28587, i16 -28586, i16 -28583, i16 -28582, i16 -28580, i16 -28579, i16 -28578, i16 -28577, i16 -28576, i16 -28575, i16 -28572, i16 -28570, i16 -28569, i16 -28567, i16 -28566, i16 -28565, i16 -28564, i16 -28561, i16 -28560, i16 -28559, i16 -28558, i16 -28557, i16 -28554, i16 -28553, i16 -28552, i16 -28551, i16 -28550, i16 -28549, i16 -28548, i16 -28546, i16 -28543, i16 -28540, i16 -28539, i16 -28538, i16 -28537, i16 -28535, i16 -28534, i16 -28532, i16 -28531, i16 -28530, i16 -28529, i16 -28528, i16 -28526, i16 -28524, i16 -28522, i16 -28520, i16 -28518, i16 -28516, i16 -28514, i16 -28513, i16 -28512, i16 -28508, i16 -28507, i16 -28505, i16 -28504, i16 -28503, i16 -28501, i16 -28499, i16 -28494, i16 -28489, i16 -28484, i16 -28483, i16 -28481, i16 -28480, i16 25722, i16 25783, i16 25784, i16 25753, i16 25786, i16 25792, i16 25808, i16 25815, i16 25828, i16 25826, i16 25865, i16 25893, i16 25902, i16 24331, i16 24530, i16 29977, i16 24337, i16 21343, i16 21489, i16 21501, i16 21481, i16 21480, i16 21499, i16 21522, i16 21526, i16 21510, i16 21579, i16 21586, i16 21587, i16 21588, i16 21590, i16 21571, i16 21537, i16 21591, i16 21593, i16 21539, i16 21554, i16 21634, i16 21652, i16 21623, i16 21617, i16 21604, i16 21658, i16 21659, i16 21636, i16 21622, i16 21606, i16 21661, i16 21712, i16 21677, i16 21698, i16 21684, i16 21714, i16 21671, i16 21670, i16 21715, i16 21716, i16 21618, i16 21667, i16 21717, i16 21691, i16 21695, i16 21708, i16 21721, i16 21722, i16 21724, i16 21673, i16 21674, i16 21668, i16 21725, i16 21711, i16 21726, i16 21787, i16 21735, i16 21792, i16 21757, i16 21780, i16 21747, i16 21794, i16 21795, i16 21775, i16 21777, i16 21799, i16 21802, i16 21863, i16 21903, i16 21941, i16 21833, i16 21869, i16 21825, i16 21845, i16 21823, i16 21840, i16 21820], [190 x i16] [i16 -28478, i16 -28477, i16 -28474, i16 -28472, i16 -28471, i16 -28469, i16 -28468, i16 -28467, i16 -28462, i16 -28460, i16 -28459, i16 -28458, i16 -28456, i16 -28455, i16 -28454, i16 -28450, i16 -28449, i16 -28448, i16 -28445, i16 -28444, i16 -28443, i16 -28439, i16 -28438, i16 -28436, i16 -28434, i16 -28432, i16 -28431, i16 -28430, i16 -28429, i16 -28427, i16 -28426, i16 -28425, i16 -28423, i16 -28422, i16 -28421, i16 -28420, i16 -28417, i16 -28416, i16 -28415, i16 -28413, i16 -28411, i16 -28410, i16 -28409, i16 -28408, i16 -28407, i16 -28406, i16 -28405, i16 -28404, i16 -28403, i16 -28402, i16 -28401, i16 -28400, i16 -28399, i16 -28398, i16 -28397, i16 -28396, i16 -28395, i16 -28394, i16 -28393, i16 -28392, i16 -28390, i16 -28389, i16 -28388, i16 -28387, i16 -28385, i16 -28384, i16 -28383, i16 -28380, i16 -28379, i16 -28378, i16 -28377, i16 -28376, i16 -28375, i16 -28374, i16 -28373, i16 -28372, i16 -28371, i16 -28370, i16 -28368, i16 -28366, i16 -28365, i16 -28364, i16 -28363, i16 -28362, i16 -28361, i16 -28360, i16 -28358, i16 -28357, i16 -28356, i16 -28355, i16 -28354, i16 -28353, i16 -28352, i16 -28351, i16 -28350, i16 -28348, i16 21815, i16 21846, i16 21877, i16 21878, i16 21879, i16 21811, i16 21808, i16 21852, i16 21899, i16 21970, i16 21891, i16 21937, i16 21945, i16 21896, i16 21889, i16 21919, i16 21886, i16 21974, i16 21905, i16 21883, i16 21983, i16 21949, i16 21950, i16 21908, i16 21913, i16 21994, i16 22007, i16 21961, i16 22047, i16 21969, i16 21995, i16 21996, i16 21972, i16 21990, i16 21981, i16 21956, i16 21999, i16 21989, i16 22002, i16 22003, i16 21964, i16 21965, i16 21992, i16 22005, i16 21988, i16 -28780, i16 22046, i16 22024, i16 22028, i16 22017, i16 22052, i16 22051, i16 22014, i16 22016, i16 22055, i16 22061, i16 22104, i16 22073, i16 22103, i16 22060, i16 22093, i16 22114, i16 22105, i16 22108, i16 22092, i16 22100, i16 22150, i16 22116, i16 22129, i16 22123, i16 22139, i16 22140, i16 22149, i16 22163, i16 22191, i16 22228, i16 22231, i16 22237, i16 22241, i16 22261, i16 22251, i16 22265, i16 22271, i16 22276, i16 22282, i16 22281, i16 22300, i16 24079, i16 24089, i16 24084, i16 24081, i16 24113, i16 24123, i16 24124], [190 x i16] [i16 -28347, i16 -28345, i16 -28344, i16 -28335, i16 -28333, i16 -28332, i16 -28331, i16 -28330, i16 -28328, i16 -28327, i16 -28325, i16 -28324, i16 -28321, i16 -28320, i16 -28314, i16 -28313, i16 -28312, i16 -28309, i16 -28307, i16 -28301, i16 -28294, i16 -28293, i16 -28292, i16 -28288, i16 -28287, i16 -28286, i16 -28285, i16 -28284, i16 -28282, i16 -28280, i16 -28278, i16 -28274, i16 -28273, i16 -28269, i16 -28268, i16 -28267, i16 -28266, i16 -28265, i16 -28264, i16 -28263, i16 -28260, i16 -28259, i16 -28258, i16 -28257, i16 -28256, i16 -28255, i16 -28252, i16 -28251, i16 -28250, i16 -28249, i16 -28248, i16 -28247, i16 -28245, i16 -28244, i16 -28240, i16 -28239, i16 -28238, i16 -28237, i16 -28234, i16 -28233, i16 -28232, i16 -28231, i16 -28229, i16 -28228, i16 -28227, i16 -28226, i16 -28225, i16 -28224, i16 -28223, i16 -28222, i16 -28221, i16 -28220, i16 -28219, i16 -28218, i16 -28216, i16 -28213, i16 -28208, i16 -28206, i16 -28205, i16 -28204, i16 -28203, i16 -28202, i16 -28201, i16 -28200, i16 -28199, i16 -28198, i16 -28197, i16 -28195, i16 -28194, i16 -28193, i16 -28192, i16 -28191, i16 -28190, i16 -28189, i16 -28188, i16 -28187, i16 24119, i16 24132, i16 24148, i16 24155, i16 24158, i16 24161, i16 23692, i16 23674, i16 23693, i16 23696, i16 23702, i16 23688, i16 23704, i16 23705, i16 23697, i16 23706, i16 23708, i16 23733, i16 23714, i16 23741, i16 23724, i16 23723, i16 23729, i16 23715, i16 23745, i16 23735, i16 23748, i16 23762, i16 23780, i16 23755, i16 23781, i16 23810, i16 23811, i16 23847, i16 23846, i16 23854, i16 23844, i16 23838, i16 23814, i16 23835, i16 23896, i16 23870, i16 23860, i16 23869, i16 23916, i16 23899, i16 23919, i16 23901, i16 23915, i16 23883, i16 23882, i16 23913, i16 23924, i16 23938, i16 23961, i16 23965, i16 -29581, i16 23991, i16 24005, i16 24435, i16 24439, i16 24450, i16 24455, i16 24457, i16 24460, i16 24469, i16 24473, i16 24476, i16 24488, i16 24493, i16 24501, i16 24508, i16 -30622, i16 24417, i16 29357, i16 29360, i16 29364, i16 29367, i16 29368, i16 29379, i16 29377, i16 29390, i16 29389, i16 29394, i16 29416, i16 29423, i16 29417, i16 29426, i16 29428, i16 29431, i16 29441, i16 29427, i16 29443, i16 29434], [190 x i16] [i16 -28186, i16 -28185, i16 -28184, i16 -28183, i16 -28182, i16 -28181, i16 -28180, i16 -28179, i16 -28178, i16 -28177, i16 -28176, i16 -28175, i16 -28174, i16 -28173, i16 -28172, i16 -28171, i16 -28170, i16 -28169, i16 -28168, i16 -28167, i16 -28166, i16 -28165, i16 -28164, i16 -28163, i16 -28162, i16 -28161, i16 -28160, i16 -28159, i16 -28158, i16 -28157, i16 -28156, i16 -28155, i16 -28154, i16 -28153, i16 -28152, i16 -28151, i16 -28150, i16 -28149, i16 -28148, i16 -28147, i16 -28146, i16 -28145, i16 -28144, i16 -28143, i16 -28142, i16 -28141, i16 -28140, i16 -28139, i16 -28138, i16 -28137, i16 -28136, i16 -28135, i16 -28134, i16 -28133, i16 -28132, i16 -28131, i16 -28130, i16 -28129, i16 -28128, i16 -28127, i16 -28126, i16 -28125, i16 -28124, i16 -28123, i16 -28122, i16 -28121, i16 -28120, i16 -28119, i16 -28118, i16 -28117, i16 -28116, i16 -28115, i16 -28114, i16 -28113, i16 -28112, i16 -28111, i16 -28110, i16 -28109, i16 -28108, i16 -28107, i16 -28106, i16 -28105, i16 -28104, i16 -28103, i16 -28102, i16 -28101, i16 -28100, i16 -28099, i16 -28098, i16 -28097, i16 -28096, i16 -28095, i16 -28094, i16 -28093, i16 -28092, i16 -28091, i16 29435, i16 29463, i16 29459, i16 29473, i16 29450, i16 29470, i16 29469, i16 29461, i16 29474, i16 29497, i16 29477, i16 29484, i16 29496, i16 29489, i16 29520, i16 29517, i16 29527, i16 29536, i16 29548, i16 29551, i16 29566, i16 -32229, i16 22821, i16 -26393, i16 22820, i16 22786, i16 -26269, i16 -26265, i16 -26264, i16 -26263, i16 -26262, i16 -26261, i16 -26260, i16 -26252, i16 -26249, i16 -26243, i16 -26240, i16 -26236, i16 -26233, i16 -26230, i16 -26227, i16 -26224, i16 -26223, i16 -26221, i16 -26220, i16 -26219, i16 24192, i16 24209, i16 24203, i16 24214, i16 24229, i16 24224, i16 24249, i16 24245, i16 24254, i16 24243, i16 -29357, i16 24274, i16 24273, i16 24283, i16 24296, i16 24298, i16 -32326, i16 24516, i16 24521, i16 24534, i16 24527, i16 24579, i16 24558, i16 24580, i16 24545, i16 24548, i16 24574, i16 24581, i16 24582, i16 24554, i16 24557, i16 24568, i16 24601, i16 24629, i16 24614, i16 24603, i16 24591, i16 24589, i16 24617, i16 24619, i16 24586, i16 24639, i16 24609, i16 24696, i16 24697, i16 24699, i16 24698, i16 24642], [190 x i16] [i16 -28090, i16 -28089, i16 -28088, i16 -28087, i16 -28086, i16 -28085, i16 -28084, i16 -28083, i16 -28082, i16 -28081, i16 -28080, i16 -28079, i16 -28078, i16 -28077, i16 -28076, i16 -28075, i16 -28074, i16 -28073, i16 -28072, i16 -28071, i16 -28070, i16 -28069, i16 -28068, i16 -28067, i16 -28066, i16 -28065, i16 -28064, i16 -28063, i16 -28062, i16 -28061, i16 -28060, i16 -28059, i16 -28058, i16 -28057, i16 -28056, i16 -28055, i16 -28054, i16 -28053, i16 -28052, i16 -28051, i16 -28050, i16 -28049, i16 -28048, i16 -28047, i16 -28046, i16 -28045, i16 -28043, i16 -28042, i16 -28041, i16 -28040, i16 -28039, i16 -28038, i16 -28037, i16 -28036, i16 -28035, i16 -28034, i16 -28033, i16 -28032, i16 -28031, i16 -28030, i16 -28029, i16 -28028, i16 -28027, i16 -28026, i16 -28025, i16 -28024, i16 -28023, i16 -28022, i16 -28021, i16 -28020, i16 -28019, i16 -28017, i16 -28016, i16 -28015, i16 -28014, i16 -28013, i16 -28012, i16 -28011, i16 -28010, i16 -28009, i16 -28008, i16 -28007, i16 -28006, i16 -28005, i16 -28004, i16 -28003, i16 -28002, i16 -28001, i16 -28000, i16 -27999, i16 -27998, i16 -27997, i16 -27996, i16 -27995, i16 -27994, i16 -27993, i16 24682, i16 24701, i16 24726, i16 24730, i16 24749, i16 24733, i16 24707, i16 24722, i16 24716, i16 24731, i16 24812, i16 24763, i16 24753, i16 24797, i16 24792, i16 24774, i16 24794, i16 24756, i16 24864, i16 24870, i16 24853, i16 24867, i16 24820, i16 24832, i16 24846, i16 24875, i16 24906, i16 24949, i16 25004, i16 24980, i16 24999, i16 25015, i16 25044, i16 25077, i16 24541, i16 -26957, i16 -27159, i16 -27157, i16 -27151, i16 -27149, i16 -27147, i16 -27146, i16 -27140, i16 -27138, i16 -27133, i16 -27132, i16 -27130, i16 -27128, i16 -27126, i16 -27125, i16 -27124, i16 -27123, i16 -27121, i16 -27118, i16 -27115, i16 -27114, i16 -27113, i16 -27111, i16 -27110, i16 20012, i16 29247, i16 25109, i16 27701, i16 27732, i16 27740, i16 27722, i16 27811, i16 27781, i16 27792, i16 27796, i16 27788, i16 27752, i16 27753, i16 27764, i16 27766, i16 27782, i16 27817, i16 27856, i16 27860, i16 27821, i16 27895, i16 27896, i16 27889, i16 27863, i16 27826, i16 27872, i16 27862, i16 27898, i16 27883, i16 27886, i16 27825, i16 27859, i16 27887, i16 27902], [190 x i16] [i16 -27992, i16 -27991, i16 -27990, i16 -27989, i16 -27988, i16 -27987, i16 -27985, i16 -27984, i16 -27983, i16 -27982, i16 -27981, i16 -27980, i16 -27979, i16 -27978, i16 -27977, i16 -27976, i16 -27975, i16 -27974, i16 -27973, i16 -27972, i16 -27971, i16 -27970, i16 -27969, i16 -27968, i16 -27967, i16 -27966, i16 -27965, i16 -27964, i16 -27963, i16 -27962, i16 -27961, i16 -27959, i16 -27958, i16 -27957, i16 -27956, i16 -27955, i16 -27954, i16 -27953, i16 -27952, i16 -27951, i16 -27950, i16 -27949, i16 -27948, i16 -27947, i16 -27946, i16 -27945, i16 -27944, i16 -27943, i16 -27942, i16 -27941, i16 -27940, i16 -27939, i16 -27938, i16 -27937, i16 -27936, i16 -27935, i16 -27934, i16 -27933, i16 -27932, i16 -27931, i16 -27930, i16 -27929, i16 -27928, i16 -27927, i16 -27926, i16 -27925, i16 -27924, i16 -27923, i16 -27922, i16 -27921, i16 -27920, i16 -27919, i16 -27918, i16 -27917, i16 -27916, i16 -27915, i16 -27914, i16 -27913, i16 -27912, i16 -27911, i16 -27910, i16 -27909, i16 -27908, i16 -27907, i16 -27906, i16 -27905, i16 -27904, i16 -27903, i16 -27902, i16 -27901, i16 -27900, i16 -27899, i16 -27898, i16 -27897, i16 -27896, i16 -27895, i16 27961, i16 27943, i16 27916, i16 27971, i16 27976, i16 27911, i16 27908, i16 27929, i16 27918, i16 27947, i16 27981, i16 27950, i16 27957, i16 27930, i16 27983, i16 27986, i16 27988, i16 27955, i16 28049, i16 28015, i16 28062, i16 28064, i16 27998, i16 28051, i16 28052, i16 27996, i16 28000, i16 28028, i16 28003, i16 28186, i16 28103, i16 28101, i16 28126, i16 28174, i16 28095, i16 28128, i16 28177, i16 28134, i16 28125, i16 28121, i16 28182, i16 28075, i16 28172, i16 28078, i16 28203, i16 28270, i16 28238, i16 28267, i16 28338, i16 28255, i16 28294, i16 28243, i16 28244, i16 28210, i16 28197, i16 28228, i16 28383, i16 28337, i16 28312, i16 28384, i16 28461, i16 28386, i16 28325, i16 28327, i16 28349, i16 28347, i16 28343, i16 28375, i16 28340, i16 28367, i16 28303, i16 28354, i16 28319, i16 28514, i16 28486, i16 28487, i16 28452, i16 28437, i16 28409, i16 28463, i16 28470, i16 28491, i16 28532, i16 28458, i16 28425, i16 28457, i16 28553, i16 28557, i16 28556, i16 28536, i16 28530, i16 28540, i16 28538, i16 28625], [190 x i16] [i16 -27894, i16 -27893, i16 -27892, i16 -27891, i16 -27890, i16 -27889, i16 -27888, i16 -27887, i16 -27886, i16 -27885, i16 -27884, i16 -27883, i16 -27882, i16 -27881, i16 -27880, i16 -27879, i16 -27878, i16 -27877, i16 -27876, i16 -27875, i16 -27874, i16 -27873, i16 -27872, i16 -27871, i16 -27870, i16 -27869, i16 -27868, i16 -27867, i16 -27866, i16 -27865, i16 -27864, i16 -27863, i16 -27862, i16 -27861, i16 -27860, i16 -27859, i16 -27858, i16 -27857, i16 -27856, i16 -27855, i16 -27854, i16 -27853, i16 -27852, i16 -27851, i16 -27850, i16 -27849, i16 -27848, i16 -27847, i16 -27846, i16 -27845, i16 -27844, i16 -27843, i16 -27841, i16 -27840, i16 -27839, i16 -27838, i16 -27837, i16 -27836, i16 -27835, i16 -27834, i16 -27833, i16 -27832, i16 -27831, i16 -27830, i16 -27829, i16 -27828, i16 -27827, i16 -27826, i16 -27825, i16 -27824, i16 -27823, i16 -27822, i16 -27821, i16 -27820, i16 -27819, i16 -27818, i16 -27817, i16 -27816, i16 -27815, i16 -27814, i16 -27813, i16 -27812, i16 -27811, i16 -27810, i16 -27809, i16 -27808, i16 -27807, i16 -27806, i16 -27805, i16 -27804, i16 -27803, i16 -27802, i16 -27801, i16 -27800, i16 -27799, i16 -27797, i16 28617, i16 28583, i16 28601, i16 28598, i16 28610, i16 28641, i16 28654, i16 28638, i16 28640, i16 28655, i16 28698, i16 28707, i16 28699, i16 28729, i16 28725, i16 28751, i16 28766, i16 23424, i16 23428, i16 23445, i16 23443, i16 23461, i16 23480, i16 29999, i16 -25954, i16 25652, i16 23524, i16 23534, i16 -30416, i16 23536, i16 -29113, i16 -29945, i16 -28746, i16 -28717, i16 -28715, i16 -28699, i16 -28690, i16 -28700, i16 -28695, i16 -28698, i16 -28685, i16 -28696, i16 -28667, i16 -28668, i16 -28661, i16 -28634, i16 -28655, i16 -28659, i16 -28650, i16 -28639, i16 -28619, i16 -28618, i16 -28627, i16 -28625, i16 -28604, i16 -28591, i16 -28590, i16 -28592, i16 -28568, i16 -28584, i16 -28574, i16 -28581, i16 26297, i16 -28556, i16 -28547, i16 -28542, i16 -28536, i16 -28541, i16 -28533, i16 24400, i16 24407, i16 24406, i16 24408, i16 23611, i16 21675, i16 23632, i16 23641, i16 23409, i16 23651, i16 23654, i16 32700, i16 24362, i16 24361, i16 24365, i16 -32140, i16 24380, i16 -25797, i16 23662, i16 22913, i16 22915, i16 22925, i16 22953, i16 22954, i16 22947], [190 x i16] [i16 -27796, i16 -27795, i16 -27794, i16 -27793, i16 -27792, i16 -27791, i16 -27790, i16 -27789, i16 -27788, i16 -27787, i16 -27786, i16 -27785, i16 -27784, i16 -27783, i16 -27782, i16 -27781, i16 -27780, i16 -27779, i16 -27778, i16 -27777, i16 -27776, i16 -27775, i16 -27774, i16 -27773, i16 -27772, i16 -27771, i16 -27770, i16 -27769, i16 -27768, i16 -27767, i16 -27766, i16 -27765, i16 -27764, i16 -27763, i16 -27762, i16 -27760, i16 -27759, i16 -27758, i16 -27757, i16 -27756, i16 -27755, i16 -27754, i16 -27753, i16 -27752, i16 -27751, i16 -27750, i16 -27749, i16 -27748, i16 -27747, i16 -27746, i16 -27745, i16 -27744, i16 -27743, i16 -27742, i16 -27741, i16 -27740, i16 -27739, i16 -27738, i16 -27737, i16 -27736, i16 -27735, i16 -27734, i16 -27733, i16 -27732, i16 -27731, i16 -27730, i16 -27729, i16 -27728, i16 -27727, i16 -27726, i16 -27725, i16 -27724, i16 -27723, i16 -27722, i16 -27721, i16 -27720, i16 -27719, i16 -27718, i16 -27717, i16 -27716, i16 -27715, i16 -27714, i16 -27713, i16 -27712, i16 -27711, i16 -27710, i16 -27709, i16 -27708, i16 -27707, i16 -27706, i16 -27705, i16 -27704, i16 -27703, i16 -27701, i16 -27700, i16 -27699, i16 22935, i16 22986, i16 22955, i16 22942, i16 22948, i16 22994, i16 22962, i16 22959, i16 22999, i16 22974, i16 23045, i16 23046, i16 23005, i16 23048, i16 23011, i16 23000, i16 23033, i16 23052, i16 23049, i16 23090, i16 23092, i16 23057, i16 23075, i16 23059, i16 23104, i16 23143, i16 23114, i16 23125, i16 23100, i16 23138, i16 23157, i16 -32532, i16 23210, i16 23195, i16 23159, i16 23162, i16 23230, i16 23275, i16 23218, i16 23250, i16 23252, i16 23224, i16 23264, i16 23267, i16 23281, i16 23254, i16 23270, i16 23256, i16 23260, i16 23305, i16 23319, i16 23318, i16 23346, i16 23351, i16 23360, i16 23573, i16 23580, i16 23386, i16 23397, i16 23411, i16 23377, i16 23379, i16 23394, i16 -25995, i16 -25993, i16 -25992, i16 -25990, i16 -25985, i16 -25987, i16 -25984, i16 -25983, i16 -25979, i16 -25976, i16 -25974, i16 -25968, i16 -25966, i16 -25965, i16 -25962, i16 -25960, i16 -25957, i16 -25956, i16 -25955, i16 -25953, i16 -25952, i16 -25950, i16 -25949, i16 -25947, i16 -25945, i16 32415, i16 32417, i16 32419, i16 32421, i16 32424, i16 32425], [190 x i16] [i16 -27698, i16 -27697, i16 -27696, i16 -27695, i16 -27694, i16 -27693, i16 -27692, i16 -27691, i16 -27689, i16 -27688, i16 -27687, i16 -27686, i16 -27685, i16 -27684, i16 -27683, i16 -27682, i16 -27681, i16 -27680, i16 -27679, i16 -27678, i16 -27677, i16 -27676, i16 -27675, i16 -27674, i16 -27673, i16 -27672, i16 -27671, i16 -27670, i16 -27669, i16 -27668, i16 -27667, i16 -27666, i16 -27665, i16 -27664, i16 -27663, i16 -27662, i16 -27661, i16 -27660, i16 -27659, i16 -27658, i16 -27657, i16 -27656, i16 -27655, i16 -27654, i16 -27653, i16 -27652, i16 -27651, i16 -27650, i16 -27649, i16 -27648, i16 -27647, i16 -27646, i16 -27645, i16 -27644, i16 -27643, i16 -27642, i16 -27641, i16 -27640, i16 -27639, i16 -27638, i16 -27637, i16 -27636, i16 -27635, i16 -27634, i16 -27633, i16 -27632, i16 -27631, i16 -27630, i16 -27629, i16 -27628, i16 -27627, i16 -27626, i16 -27625, i16 -27624, i16 -27623, i16 -27622, i16 -27621, i16 -27620, i16 -27619, i16 -27618, i16 -27617, i16 -27616, i16 -27615, i16 -27614, i16 -27613, i16 -27612, i16 -27611, i16 -27610, i16 -27609, i16 -27608, i16 -27607, i16 -27606, i16 -27605, i16 -27604, i16 -27603, i16 -27602, i16 32429, i16 32432, i16 32446, i16 32448, i16 32449, i16 32450, i16 32457, i16 32459, i16 32460, i16 32464, i16 32468, i16 32471, i16 32475, i16 32480, i16 32481, i16 32488, i16 32491, i16 32494, i16 32495, i16 32497, i16 32498, i16 32525, i16 32502, i16 32506, i16 32507, i16 32510, i16 32513, i16 32514, i16 32515, i16 32519, i16 32520, i16 32523, i16 32524, i16 32527, i16 32529, i16 32530, i16 32535, i16 32537, i16 32540, i16 32539, i16 32543, i16 32545, i16 32546, i16 32547, i16 32548, i16 32549, i16 32550, i16 32551, i16 32554, i16 32555, i16 32556, i16 32557, i16 32559, i16 32560, i16 32561, i16 32562, i16 32563, i16 32565, i16 24186, i16 30079, i16 24027, i16 30014, i16 -28523, i16 29582, i16 29585, i16 29614, i16 29602, i16 29599, i16 29647, i16 29634, i16 29649, i16 29623, i16 29619, i16 29632, i16 29641, i16 29640, i16 29669, i16 29657, i16 -26500, i16 29706, i16 29673, i16 29671, i16 29662, i16 29626, i16 29682, i16 29711, i16 29738, i16 29787, i16 29734, i16 29733, i16 29736, i16 29744, i16 29742, i16 29740], [190 x i16] [i16 -27601, i16 -27600, i16 -27599, i16 -27598, i16 -27597, i16 -27596, i16 -27595, i16 -27594, i16 -27593, i16 -27592, i16 -27591, i16 -27590, i16 -27589, i16 -27588, i16 -27587, i16 -27585, i16 -27584, i16 -27583, i16 -27582, i16 -27581, i16 -27580, i16 -27579, i16 -27578, i16 -27577, i16 -27576, i16 -27575, i16 -27574, i16 -27573, i16 -27572, i16 -27571, i16 -27570, i16 -27569, i16 -27568, i16 -27567, i16 -27566, i16 -27565, i16 -27564, i16 -27563, i16 -27562, i16 -27561, i16 -27560, i16 -27559, i16 -27558, i16 -27557, i16 -27556, i16 -27555, i16 -27554, i16 -27553, i16 -27552, i16 -27551, i16 -27550, i16 -27549, i16 -27548, i16 -27547, i16 -27546, i16 -27545, i16 -27544, i16 -27543, i16 -27542, i16 -27540, i16 -27539, i16 -27538, i16 -27537, i16 -27536, i16 -27535, i16 -27534, i16 -27533, i16 -27532, i16 -27531, i16 -27530, i16 -27529, i16 -27528, i16 -27527, i16 -27526, i16 -27525, i16 -27524, i16 -27523, i16 -27522, i16 -27521, i16 -27520, i16 -27519, i16 -27518, i16 -27517, i16 -27516, i16 -27503, i16 -27498, i16 -27496, i16 -27449, i16 -27441, i16 -27437, i16 -27436, i16 -27430, i16 -27418, i16 -27397, i16 -27364, i16 -27360, i16 29723, i16 29722, i16 29761, i16 29788, i16 29783, i16 29781, i16 29785, i16 29815, i16 29805, i16 29822, i16 29852, i16 29838, i16 29824, i16 29825, i16 29831, i16 29835, i16 29854, i16 29864, i16 29865, i16 29840, i16 29863, i16 29906, i16 29882, i16 -26646, i16 -26645, i16 -26644, i16 26444, i16 26451, i16 26462, i16 26440, i16 26473, i16 26533, i16 26503, i16 26474, i16 26483, i16 26520, i16 26535, i16 26485, i16 26536, i16 26526, i16 26541, i16 26507, i16 26487, i16 26492, i16 26608, i16 26633, i16 26584, i16 26634, i16 26601, i16 26544, i16 26636, i16 26585, i16 26549, i16 26586, i16 26547, i16 26589, i16 26624, i16 26563, i16 26552, i16 26594, i16 26638, i16 26561, i16 26621, i16 26674, i16 26675, i16 26720, i16 26721, i16 26702, i16 26722, i16 26692, i16 26724, i16 26755, i16 26653, i16 26709, i16 26726, i16 26689, i16 26727, i16 26688, i16 26686, i16 26698, i16 26697, i16 26665, i16 26805, i16 26767, i16 26740, i16 26743, i16 26771, i16 26731, i16 26818, i16 26990, i16 26876, i16 26911, i16 26912, i16 26873], [190 x i16] [i16 -27353, i16 -27341, i16 -27331, i16 -27325, i16 -27320, i16 -27317, i16 -27307, i16 -27302, i16 -27296, i16 -27282, i16 -27276, i16 -27275, i16 -27273, i16 -27272, i16 -27271, i16 -27270, i16 -27269, i16 -27268, i16 -27267, i16 -27266, i16 -27264, i16 -27263, i16 -27262, i16 -27261, i16 -27260, i16 -27259, i16 -27258, i16 -27257, i16 -27256, i16 -27255, i16 -27254, i16 -27253, i16 -27252, i16 -27251, i16 -27250, i16 -27249, i16 -27248, i16 -27247, i16 -27246, i16 -27245, i16 -27244, i16 -27243, i16 -27242, i16 -27241, i16 -27240, i16 -27239, i16 -27238, i16 -27237, i16 -27236, i16 -27235, i16 -27234, i16 -27233, i16 -27232, i16 -27231, i16 -27230, i16 -27229, i16 -27228, i16 -27227, i16 -27226, i16 -27225, i16 -27224, i16 -27223, i16 -27222, i16 -27221, i16 -27220, i16 -27219, i16 -27218, i16 -27217, i16 -27216, i16 -27215, i16 -27214, i16 -27213, i16 -27212, i16 -27211, i16 -27210, i16 -27209, i16 -27208, i16 -27207, i16 -27206, i16 -27205, i16 -27204, i16 -27203, i16 -27202, i16 -27201, i16 -27200, i16 -27199, i16 -27198, i16 -27197, i16 -27196, i16 -27195, i16 -27194, i16 -27193, i16 -27192, i16 -27191, i16 -27190, i16 -27189, i16 26916, i16 26864, i16 26891, i16 26881, i16 26967, i16 26851, i16 26896, i16 26993, i16 26937, i16 26976, i16 26946, i16 26973, i16 27012, i16 26987, i16 27008, i16 27032, i16 27000, i16 26932, i16 27084, i16 27015, i16 27016, i16 27086, i16 27017, i16 26982, i16 26979, i16 27001, i16 27035, i16 27047, i16 27067, i16 27051, i16 27053, i16 27092, i16 27057, i16 27073, i16 27082, i16 27103, i16 27029, i16 27104, i16 27021, i16 27135, i16 27183, i16 27117, i16 27159, i16 27160, i16 27237, i16 27122, i16 27204, i16 27198, i16 27296, i16 27216, i16 27227, i16 27189, i16 27278, i16 27257, i16 27197, i16 27176, i16 27224, i16 27260, i16 27281, i16 27280, i16 27305, i16 27287, i16 27307, i16 29495, i16 29522, i16 27521, i16 27522, i16 27527, i16 27524, i16 27538, i16 27539, i16 27533, i16 27546, i16 27547, i16 27553, i16 27562, i16 -28821, i16 -28819, i16 -28815, i16 -28814, i16 -28813, i16 -28811, i16 -28810, i16 -28808, i16 -28809, i16 -28807, i16 -28806, i16 -28804, i16 -28802, i16 -28799, i16 -28798, i16 -28796, i16 -28793, i16 -28789], [190 x i16] [i16 -27188, i16 -27187, i16 -27186, i16 -27185, i16 -27184, i16 -27183, i16 -27182, i16 -27181, i16 -27180, i16 -27179, i16 -27178, i16 -27177, i16 -27176, i16 -27175, i16 -27174, i16 -27173, i16 -27172, i16 -27171, i16 -27170, i16 -27169, i16 -27168, i16 -27167, i16 -27166, i16 -27165, i16 -27164, i16 -27163, i16 -27162, i16 -27161, i16 -27156, i16 -27137, i16 -27129, i16 -27117, i16 -27112, i16 -27109, i16 -27106, i16 -27104, i16 -27101, i16 -27100, i16 -27099, i16 -27098, i16 -27097, i16 -27096, i16 -27095, i16 -27093, i16 -27092, i16 -27091, i16 -27089, i16 -27088, i16 -27081, i16 -27080, i16 -27079, i16 -27078, i16 -27074, i16 -27071, i16 -27069, i16 -27062, i16 -27058, i16 -27057, i16 -27055, i16 -27054, i16 -27053, i16 -27050, i16 -27049, i16 -27048, i16 -27047, i16 -27046, i16 -27044, i16 -27043, i16 -27042, i16 -27040, i16 -27037, i16 -27035, i16 -27034, i16 -27029, i16 -27027, i16 -27026, i16 -27025, i16 -27024, i16 -27023, i16 -27021, i16 -27016, i16 -27015, i16 -27014, i16 -27013, i16 -27012, i16 -27011, i16 -27010, i16 -27009, i16 -27008, i16 -27007, i16 -27006, i16 -27005, i16 -27004, i16 -27001, i16 -26999, i16 -26998, i16 -28787, i16 -28786, i16 -28785, i16 -28776, i16 -28774, i16 -28978, i16 25099, i16 25111, i16 25115, i16 25119, i16 25122, i16 25121, i16 25125, i16 25124, i16 25132, i16 -32281, i16 29935, i16 29940, i16 29951, i16 29967, i16 29969, i16 29971, i16 25908, i16 26094, i16 26095, i16 26096, i16 26122, i16 26137, i16 26482, i16 26115, i16 26133, i16 26112, i16 28805, i16 26359, i16 26141, i16 26164, i16 26161, i16 26166, i16 26165, i16 -32762, i16 26207, i16 26196, i16 26177, i16 26191, i16 26198, i16 26209, i16 26199, i16 26231, i16 26244, i16 26252, i16 26279, i16 26269, i16 26302, i16 26331, i16 26332, i16 26342, i16 26345, i16 -29390, i16 -29389, i16 -29386, i16 -29381, i16 -29379, i16 -29376, i16 -29371, i16 -29370, i16 -29368, i16 -29367, i16 -29369, i16 -29363, i16 -29355, i16 -29351, i16 -30265, i16 -30262, i16 -30261, i16 -30260, i16 -30258, i16 -30257, i16 -30256, i16 -30255, i16 29294, i16 29343, i16 29277, i16 29286, i16 29295, i16 29310, i16 29311, i16 29316, i16 29323, i16 29325, i16 29327, i16 29330, i16 25352, i16 25394, i16 25520], [190 x i16] [i16 -26996, i16 -26994, i16 -26991, i16 -26990, i16 -26989, i16 -26987, i16 -26986, i16 -26982, i16 -26981, i16 -26979, i16 -26978, i16 -26977, i16 -26976, i16 -26975, i16 -26974, i16 -26973, i16 -26972, i16 -26971, i16 -26970, i16 -26968, i16 -26967, i16 -26966, i16 -26965, i16 -26964, i16 -26963, i16 -26962, i16 -26961, i16 -26959, i16 -26958, i16 -26956, i16 -26955, i16 -26953, i16 -26952, i16 -26950, i16 -26949, i16 -26945, i16 -26942, i16 -26941, i16 -26936, i16 -26934, i16 -26933, i16 -26928, i16 -26927, i16 -26925, i16 -26924, i16 -26922, i16 -26921, i16 -26920, i16 -26919, i16 -26918, i16 -26917, i16 -26916, i16 -26915, i16 -26914, i16 -26913, i16 -26911, i16 -26910, i16 -26909, i16 -26908, i16 -26907, i16 -26906, i16 -26905, i16 -26901, i16 -26900, i16 -26899, i16 -26898, i16 -26896, i16 -26895, i16 -26894, i16 -26892, i16 -26891, i16 -26888, i16 -26886, i16 -26885, i16 -26884, i16 -26883, i16 -26881, i16 -26878, i16 -26877, i16 -26875, i16 -26870, i16 -26869, i16 -26868, i16 -26864, i16 -26863, i16 -26862, i16 -26860, i16 -26859, i16 -26857, i16 -26856, i16 -26855, i16 -26854, i16 -26853, i16 -26851, i16 -26849, i16 -26848, i16 25663, i16 25816, i16 -32764, i16 27626, i16 27635, i16 27645, i16 27637, i16 27641, i16 27653, i16 27655, i16 27654, i16 27661, i16 27669, i16 27672, i16 27673, i16 27674, i16 27681, i16 27689, i16 27684, i16 27690, i16 27698, i16 25909, i16 25941, i16 25963, i16 29261, i16 29266, i16 29270, i16 29232, i16 -31134, i16 21014, i16 -32609, i16 -32612, i16 -32621, i16 -32580, i16 26378, i16 -32579, i16 -32591, i16 -32597, i16 -32595, i16 -32588, i16 -32585, i16 -32537, i16 -32536, i16 -32535, i16 -32534, i16 -32549, i16 -32574, i16 -32572, i16 -32551, i16 -32563, i16 -32553, i16 26384, i16 -32547, i16 -32533, i16 -32527, i16 -32524, i16 -32531, i16 -32499, i16 -32498, i16 -32526, i16 -32516, i16 26389, i16 -32494, i16 -29606, i16 -32458, i16 -32482, i16 -32468, i16 -32488, i16 -32462, i16 -32440, i16 -32436, i16 -32429, i16 -32396, i16 -32423, i16 -32422, i16 -32399, i16 -32416, i16 -32407, i16 -32388, i16 -32387, i16 -32403, i16 -32409, i16 22605, i16 23221, i16 -32376, i16 -32382, i16 -32367, i16 28373, i16 -32349, i16 -32342, i16 -32308, i16 26406, i16 -32310, i16 -32325], [190 x i16] [i16 -26847, i16 -26846, i16 -26845, i16 -26844, i16 -26843, i16 -26842, i16 -26841, i16 -26840, i16 -26839, i16 -26837, i16 -26836, i16 -26834, i16 -26833, i16 -26831, i16 -26829, i16 -26828, i16 -26827, i16 -26826, i16 -26825, i16 -26822, i16 -26821, i16 -26820, i16 -26819, i16 -26817, i16 -26816, i16 -26815, i16 -26814, i16 -26813, i16 -26812, i16 -26811, i16 -26810, i16 -26809, i16 -26808, i16 -26807, i16 -26806, i16 -26805, i16 -26804, i16 -26803, i16 -26802, i16 -26801, i16 -26800, i16 -26799, i16 -26796, i16 -26795, i16 -26793, i16 -26792, i16 -26790, i16 -26788, i16 -26787, i16 -26785, i16 -26781, i16 -26780, i16 -26778, i16 -26777, i16 -26776, i16 -26774, i16 -26773, i16 -26772, i16 -26771, i16 -26770, i16 -26769, i16 -26768, i16 -26767, i16 -26766, i16 -26763, i16 -26761, i16 -26760, i16 -26759, i16 -26758, i16 -26757, i16 -26755, i16 -26754, i16 -26753, i16 -26752, i16 -26751, i16 -26750, i16 -26749, i16 -26748, i16 -26746, i16 -26745, i16 -26744, i16 -26743, i16 -26742, i16 -26740, i16 -26738, i16 -26737, i16 -26736, i16 -26733, i16 -26731, i16 -26730, i16 -26729, i16 -26727, i16 -26726, i16 -26725, i16 -26724, i16 -26723, i16 -32319, i16 -32346, i16 27428, i16 27447, i16 27449, i16 27459, i16 27462, i16 27481, i16 -26415, i16 -26414, i16 -26413, i16 -26411, i16 -26407, i16 -26406, i16 27571, i16 24384, i16 27586, i16 -30221, i16 26000, i16 -24751, i16 26003, i16 26044, i16 26054, i16 26052, i16 26051, i16 26060, i16 26062, i16 26066, i16 26070, i16 28800, i16 28828, i16 28822, i16 28829, i16 28859, i16 28864, i16 28855, i16 28843, i16 28849, i16 28904, i16 28874, i16 28944, i16 28947, i16 28950, i16 28975, i16 28977, i16 29043, i16 29020, i16 29032, i16 28997, i16 29042, i16 29002, i16 29048, i16 29050, i16 29080, i16 29107, i16 29109, i16 29096, i16 29088, i16 29152, i16 29140, i16 29159, i16 29177, i16 29213, i16 29224, i16 28780, i16 28952, i16 29030, i16 29113, i16 25150, i16 25149, i16 25155, i16 25160, i16 25161, i16 31035, i16 31040, i16 31046, i16 31049, i16 31067, i16 31068, i16 31059, i16 31066, i16 31074, i16 31063, i16 31072, i16 31087, i16 31079, i16 31098, i16 31109, i16 31114, i16 31130, i16 31143, i16 31155, i16 24529, i16 24528], [190 x i16] [i16 -26722, i16 -26721, i16 -26719, i16 -26718, i16 -26716, i16 -26715, i16 -26714, i16 -26713, i16 -26712, i16 -26711, i16 -26710, i16 -26708, i16 -26706, i16 -26704, i16 -26703, i16 -26701, i16 -26699, i16 -26698, i16 -26697, i16 -26696, i16 -26695, i16 -26694, i16 -26693, i16 -26692, i16 -26691, i16 -26690, i16 -26689, i16 -26688, i16 -26687, i16 -26686, i16 -26685, i16 -26684, i16 -26683, i16 -26682, i16 -26681, i16 -26680, i16 -26679, i16 -26678, i16 -26677, i16 -26676, i16 -26675, i16 -26674, i16 -26673, i16 -26672, i16 -26671, i16 -26670, i16 -26669, i16 -26668, i16 -26667, i16 -26666, i16 -26665, i16 -26664, i16 -26663, i16 -26662, i16 -26661, i16 -26660, i16 -26659, i16 -26658, i16 -26657, i16 -26656, i16 -26655, i16 -26654, i16 -26653, i16 -26652, i16 -26651, i16 -26648, i16 -26642, i16 -26641, i16 -26640, i16 -26639, i16 -26638, i16 -26636, i16 -26633, i16 -26632, i16 -26631, i16 -26630, i16 -26629, i16 -26628, i16 -26627, i16 -26626, i16 -26625, i16 -26624, i16 -26623, i16 -26622, i16 -26621, i16 -26620, i16 -26619, i16 -26618, i16 -26617, i16 -26616, i16 -26615, i16 -26614, i16 -26613, i16 -26612, i16 -26611, i16 -26610, i16 24636, i16 24669, i16 24666, i16 24679, i16 24641, i16 24665, i16 24675, i16 24747, i16 24838, i16 24845, i16 24925, i16 25001, i16 24989, i16 25035, i16 25041, i16 25094, i16 -32640, i16 -32641, i16 27795, i16 27894, i16 28156, i16 30710, i16 30712, i16 30720, i16 30729, i16 30743, i16 30744, i16 30737, i16 26027, i16 30765, i16 30748, i16 30749, i16 30777, i16 30778, i16 30779, i16 30751, i16 30780, i16 30757, i16 30764, i16 30755, i16 30761, i16 30798, i16 30829, i16 30806, i16 30807, i16 30758, i16 30800, i16 30791, i16 30796, i16 30826, i16 30875, i16 30867, i16 30874, i16 30855, i16 30876, i16 30881, i16 30883, i16 30898, i16 30905, i16 30885, i16 30932, i16 30937, i16 30921, i16 30956, i16 30962, i16 30981, i16 30964, i16 30995, i16 31012, i16 31006, i16 31028, i16 -24677, i16 -24839, i16 -24837, i16 -24836, i16 30449, i16 30468, i16 30477, i16 30457, i16 30471, i16 30472, i16 30490, i16 30498, i16 30489, i16 30509, i16 30502, i16 30517, i16 30520, i16 30544, i16 30545, i16 30535, i16 30531, i16 30554, i16 30568], [190 x i16] [i16 -26609, i16 -26608, i16 -26607, i16 -26606, i16 -26605, i16 -26604, i16 -26603, i16 -26602, i16 -26601, i16 -26600, i16 -26599, i16 -26598, i16 -26597, i16 -26596, i16 -26595, i16 -26594, i16 -26593, i16 -26592, i16 -26591, i16 -26590, i16 -26589, i16 -26588, i16 -26587, i16 -26586, i16 -26585, i16 -26584, i16 -26583, i16 -26582, i16 -26581, i16 -26580, i16 -26579, i16 -26578, i16 -26577, i16 -26576, i16 -26575, i16 -26574, i16 -26573, i16 -26572, i16 -26571, i16 -26570, i16 -26569, i16 -26568, i16 -26567, i16 -26566, i16 -26565, i16 -26564, i16 -26563, i16 -26562, i16 -26561, i16 -26560, i16 -26559, i16 -26558, i16 -26557, i16 -26556, i16 -26555, i16 -26554, i16 -26553, i16 -26552, i16 -26551, i16 -26550, i16 -26549, i16 -26548, i16 -26547, i16 -26546, i16 -26545, i16 -26544, i16 -26543, i16 -26542, i16 -26541, i16 -26540, i16 -26539, i16 -26538, i16 -26537, i16 -26536, i16 -26535, i16 -26534, i16 -26533, i16 -26532, i16 -26531, i16 -26530, i16 -26529, i16 -26528, i16 -26527, i16 -26526, i16 -26525, i16 -26524, i16 -26523, i16 -26522, i16 -26521, i16 -26520, i16 -26519, i16 -26518, i16 -26517, i16 -26516, i16 -26515, i16 -26514, i16 30562, i16 30565, i16 30591, i16 30605, i16 30589, i16 30592, i16 30604, i16 30609, i16 30623, i16 30624, i16 30640, i16 30645, i16 30653, i16 30010, i16 30016, i16 30030, i16 30027, i16 30024, i16 30043, i16 30066, i16 30073, i16 30083, i16 32600, i16 32609, i16 32607, i16 -30136, i16 32616, i16 32628, i16 32625, i16 32633, i16 32641, i16 32638, i16 30413, i16 30437, i16 -30670, i16 -27515, i16 -27514, i16 -27513, i16 -27509, i16 -27510, i16 -27508, i16 -27507, i16 -27505, i16 -27504, i16 -27500, i16 -27497, i16 -27499, i16 -27494, i16 -27493, i16 -27492, i16 -27485, i16 -27484, i16 -27477, i16 -27478, i16 -27475, i16 -27476, i16 -27473, i16 -27472, i16 -27470, i16 -27468, i16 -27466, i16 -27465, i16 -27464, i16 -27463, i16 -27462, i16 -27460, i16 -27459, i16 -27457, i16 -27452, i16 -27448, i16 -27447, i16 -27446, i16 -27445, i16 -27444, i16 -27443, i16 -27442, i16 -27440, i16 -27439, i16 -27438, i16 -27435, i16 -27434, i16 -27433, i16 -27431, i16 -27432, i16 -27429, i16 -27426, i16 -27425, i16 -27424, i16 -27422, i16 -27420, i16 -27419, i16 -27417, i16 -27416, i16 -27414], [190 x i16] [i16 -26513, i16 -26512, i16 -26511, i16 -26510, i16 -26509, i16 -26508, i16 -26485, i16 -26482, i16 -26478, i16 -26475, i16 -26471, i16 -26461, i16 -26456, i16 -26455, i16 -26454, i16 -26453, i16 -26452, i16 -26451, i16 -26450, i16 -26449, i16 -26448, i16 -26447, i16 -26446, i16 -26445, i16 -26444, i16 -26443, i16 -26442, i16 -26441, i16 -26440, i16 -26439, i16 -26438, i16 -26437, i16 -26436, i16 -26435, i16 -26434, i16 -26433, i16 -26432, i16 -26431, i16 -26430, i16 -26429, i16 -26428, i16 -26427, i16 -26426, i16 -26425, i16 -26424, i16 -26423, i16 -26422, i16 -26421, i16 -26420, i16 -26419, i16 -26417, i16 -26416, i16 -26412, i16 -26410, i16 -26409, i16 -26405, i16 -26404, i16 -26403, i16 -26400, i16 -26399, i16 -26398, i16 -26397, i16 -26396, i16 -26395, i16 -26394, i16 -26391, i16 -26390, i16 -26389, i16 -26388, i16 -26387, i16 -26386, i16 -26385, i16 -26384, i16 -26383, i16 -26382, i16 -26381, i16 -26380, i16 -26379, i16 -26378, i16 -26377, i16 -26376, i16 -26375, i16 -26374, i16 -26373, i16 -26372, i16 -26371, i16 -26370, i16 -26369, i16 -26368, i16 -26367, i16 -26366, i16 -26365, i16 -26364, i16 -26363, i16 -26362, i16 -26361, i16 -27415, i16 -27413, i16 -27410, i16 -27409, i16 -27405, i16 -27404, i16 -27403, i16 -27401, i16 -27399, i16 -27396, i16 -27395, i16 -27393, i16 -27389, i16 -27390, i16 -27386, i16 -27385, i16 -27383, i16 -27382, i16 -27379, i16 -27378, i16 -27377, i16 -27374, i16 -27373, i16 -27372, i16 -27371, i16 -27370, i16 -27368, i16 -27365, i16 -27363, i16 -27362, i16 -27361, i16 -27358, i16 -27350, i16 -27349, i16 -27351, i16 -27348, i16 -27343, i16 -27342, i16 -27340, i16 -27338, i16 -27337, i16 -27336, i16 -27332, i16 -27330, i16 -27329, i16 -27326, i16 -27339, i16 -27324, i16 -27323, i16 -27322, i16 -27319, i16 -27316, i16 -27314, i16 -27313, i16 -27310, i16 -27309, i16 -27308, i16 -27306, i16 -27305, i16 -27304, i16 -27303, i16 -27301, i16 -27298, i16 -27297, i16 -27299, i16 -27295, i16 -27294, i16 -27292, i16 -27291, i16 -27290, i16 -27289, i16 -27288, i16 -27287, i16 -27286, i16 -27285, i16 -27284, i16 -27281, i16 -27279, i16 -27278, i16 -27277, i16 -27334, i16 30695, i16 30700, i16 -26935, i16 31189, i16 31213, i16 31203, i16 31211, i16 31238, i16 23879, i16 31235, i16 31234, i16 31262, i16 31252], [190 x i16] [i16 -26360, i16 -26359, i16 -26358, i16 -26357, i16 -26356, i16 -26354, i16 -26353, i16 -26351, i16 -26350, i16 -26349, i16 -26348, i16 -26347, i16 -26346, i16 -26345, i16 -26344, i16 -26343, i16 -26342, i16 -26341, i16 -26340, i16 -26339, i16 -26338, i16 -26337, i16 -26336, i16 -26335, i16 -26334, i16 -26333, i16 -26332, i16 -26331, i16 -26330, i16 -26329, i16 -26328, i16 -26327, i16 -26326, i16 -26325, i16 -26324, i16 -26323, i16 -26321, i16 -26320, i16 -26319, i16 -26318, i16 -26317, i16 -26316, i16 -26315, i16 -26314, i16 -26313, i16 -26312, i16 -26311, i16 -26310, i16 -26309, i16 -26308, i16 -26307, i16 -26306, i16 -26305, i16 -26304, i16 -26303, i16 -26302, i16 -26301, i16 -26300, i16 -26299, i16 -26298, i16 -26297, i16 -26296, i16 -26295, i16 -26294, i16 -26293, i16 -26292, i16 -26291, i16 -26290, i16 -26289, i16 -26288, i16 -26287, i16 -26286, i16 -26285, i16 -26282, i16 -26281, i16 -26280, i16 -26279, i16 -26278, i16 -26277, i16 -26276, i16 -26275, i16 -26274, i16 -26273, i16 -26272, i16 -26271, i16 -26270, i16 -26268, i16 -26266, i16 -26253, i16 -26248, i16 -26247, i16 -26245, i16 -26242, i16 -26238, i16 -26237, i16 -26231, i16 31289, i16 31287, i16 31313, i16 -24881, i16 -26203, i16 31344, i16 30344, i16 30350, i16 30355, i16 30361, i16 30372, i16 29918, i16 29920, i16 29996, i16 -25056, i16 -25054, i16 -25048, i16 -25047, i16 -25046, i16 -25045, i16 -25044, i16 -25038, i16 -25039, i16 -25034, i16 -25032, i16 -25033, i16 -25031, i16 -25030, i16 -25026, i16 -25023, i16 -25022, i16 -25020, i16 -25018, i16 -25017, i16 -25016, i16 -25015, i16 -25013, i16 -25012, i16 -25010, i16 -25007, i16 -25003, i16 -25001, i16 -24998, i16 -24997, i16 -24996, i16 -24994, i16 -24989, i16 -24986, i16 -24985, i16 -24984, i16 -24983, i16 -24982, i16 -24981, i16 -24980, i16 -24975, i16 -24979, i16 -24973, i16 30098, i16 30100, i16 30102, i16 30112, i16 30109, i16 30124, i16 30115, i16 30131, i16 30132, i16 30136, i16 30148, i16 30129, i16 30128, i16 30147, i16 30146, i16 30166, i16 30157, i16 30179, i16 30184, i16 30182, i16 30180, i16 30187, i16 30183, i16 30211, i16 30193, i16 30204, i16 30207, i16 30224, i16 30208, i16 30213, i16 30220, i16 30231, i16 30218, i16 30245, i16 30232, i16 30229, i16 30233], [190 x i16] [i16 -26228, i16 -26226, i16 -26214, i16 -26213, i16 -26212, i16 -26211, i16 -26210, i16 -26209, i16 -26208, i16 -26207, i16 -26206, i16 -26205, i16 -26204, i16 -26202, i16 -26201, i16 -26199, i16 -26198, i16 -26197, i16 -26196, i16 -26195, i16 -26194, i16 -26193, i16 -26192, i16 -26191, i16 -26190, i16 -26189, i16 -26188, i16 -26187, i16 -26186, i16 -26185, i16 -26184, i16 -26183, i16 -26182, i16 -26181, i16 -26180, i16 -26179, i16 -26178, i16 -26177, i16 -26176, i16 -26175, i16 -26174, i16 -26173, i16 -26172, i16 -26171, i16 -26170, i16 -26169, i16 -26168, i16 -26167, i16 -26166, i16 -26165, i16 -26164, i16 -26163, i16 -26162, i16 -26161, i16 -26160, i16 -26159, i16 -26158, i16 -26157, i16 -26156, i16 -26155, i16 -26154, i16 -26153, i16 -26152, i16 -26151, i16 -26150, i16 -26149, i16 -26148, i16 -26147, i16 -26146, i16 -26145, i16 -26144, i16 -26143, i16 -26142, i16 -26141, i16 -26140, i16 -26139, i16 -26138, i16 -26137, i16 -26136, i16 -26135, i16 -26134, i16 -26133, i16 -26132, i16 -26131, i16 -26130, i16 -26129, i16 -26128, i16 -26127, i16 -26126, i16 -26125, i16 -26124, i16 -26123, i16 -26122, i16 -26121, i16 -26120, i16 -26119, i16 30235, i16 30268, i16 30242, i16 30240, i16 30272, i16 30253, i16 30256, i16 30271, i16 30261, i16 30275, i16 30270, i16 30259, i16 30285, i16 30302, i16 30292, i16 30300, i16 30294, i16 30315, i16 30319, i16 32714, i16 31462, i16 31352, i16 31353, i16 31360, i16 31366, i16 31368, i16 31381, i16 31398, i16 31392, i16 31404, i16 31400, i16 31405, i16 31411, i16 -30620, i16 -30615, i16 -30606, i16 -30595, i16 -30593, i16 -30590, i16 -30558, i16 -30522, i16 -30537, i16 -30532, i16 -30519, i16 -30494, i16 -30514, i16 -30493, i16 -30491, i16 -30479, i16 -30438, i16 -30468, i16 -30488, i16 -30466, i16 -30480, i16 -30431, i16 -30439, i16 -30445, i16 -30437, i16 -30454, i16 -30412, i16 -30421, i16 -30410, i16 -30399, i16 -30362, i16 -30341, i16 30091, i16 -32539, i16 30386, i16 30388, i16 30684, i16 -32750, i16 -32748, i16 -32746, i16 -32740, i16 -32736, i16 -32734, i16 -32731, i16 -32730, i16 -32729, i16 -32727, i16 -32728, i16 -32719, i16 -32757, i16 -32715, i16 -32701, i16 -32698, i16 -32691, i16 -32686, i16 -32663, i16 -32655, i16 -30333, i16 -26504, i16 -26496, i16 -26493], [190 x i16] [i16 -26118, i16 -26117, i16 -26116, i16 -26115, i16 -26114, i16 -26113, i16 -26112, i16 -26111, i16 -26110, i16 -26109, i16 -26108, i16 -26107, i16 -26106, i16 -26105, i16 -26104, i16 -26103, i16 -26102, i16 -26101, i16 -26100, i16 -26099, i16 -26098, i16 -26097, i16 -26096, i16 -26095, i16 -26094, i16 -26093, i16 -26092, i16 -26091, i16 -26090, i16 -26089, i16 -26088, i16 -26087, i16 -26086, i16 -26085, i16 -26084, i16 -26083, i16 -26082, i16 -26081, i16 -26080, i16 -26079, i16 -26078, i16 -26077, i16 -26076, i16 -26075, i16 -26074, i16 -26073, i16 -26072, i16 -26071, i16 -26070, i16 -26069, i16 -26068, i16 -26067, i16 -26066, i16 -26065, i16 -26064, i16 -26063, i16 -26062, i16 -26061, i16 -26060, i16 -26059, i16 -26058, i16 -26057, i16 -26056, i16 -26055, i16 -26054, i16 -26053, i16 -26052, i16 -26051, i16 -26050, i16 -26049, i16 -26048, i16 -26047, i16 -26046, i16 -26045, i16 -26044, i16 -26043, i16 -26042, i16 -26041, i16 -26040, i16 -26039, i16 -26038, i16 -26037, i16 -26036, i16 -26035, i16 -26034, i16 -26033, i16 -26032, i16 -26031, i16 -26030, i16 -26029, i16 -26028, i16 -26027, i16 -26026, i16 -26025, i16 -26024, i16 -26023, i16 -26487, i16 -26484, i16 -26483, i16 -26481, i16 -26476, i16 -26470, i16 -26469, i16 -26466, i16 -26465, i16 -26463, i16 -26462, i16 -26459, i16 -26458, i16 -31155, i16 -31148, i16 -31124, i16 -31122, i16 -31105, i16 -31110, i16 -31108, i16 -31109, i16 -31064, i16 -31091, i16 -31093, i16 -31060, i16 -31075, i16 -31065, i16 -31069, i16 -31062, i16 -31085, i16 -31063, i16 -31050, i16 -31036, i16 -31051, i16 -31026, i16 -31056, i16 -31046, i16 -31055, i16 -31057, i16 -31031, i16 -31025, i16 -31052, i16 -30999, i16 -30991, i16 -30990, i16 -30995, i16 -30989, i16 -31024, i16 -30957, i16 -31010, i16 -30988, i16 -31009, i16 -31016, i16 -31023, i16 -30973, i16 -30969, i16 -30984, i16 -30968, i16 -30966, i16 -30963, i16 -30967, i16 -30941, i16 -30917, i16 -30946, i16 -30939, i16 -30930, i16 -30950, i16 -30914, i16 -30904, i16 -30924, i16 -30927, i16 -30935, i16 -30921, i16 -30913, i16 -30846, i16 -30942, i16 -30851, i16 -30850, i16 -30853, i16 -30880, i16 -30864, i16 -30900, i16 -30866, i16 -30837, i16 -30893, i16 -30877, i16 -30852, i16 -30876, i16 -30887, i16 -30875, i16 -30829, i16 -30801, i16 -30808, i16 -30766], [190 x i16] [i16 -26022, i16 -26021, i16 -26020, i16 -26019, i16 -26018, i16 -26017, i16 -26016, i16 -26015, i16 -26014, i16 -26013, i16 -26012, i16 -26011, i16 -26010, i16 -26009, i16 -26008, i16 -26007, i16 -26006, i16 -26005, i16 -25998, i16 -25981, i16 -25975, i16 -25971, i16 -25970, i16 -25964, i16 -25963, i16 -25959, i16 -25946, i16 -25943, i16 -25942, i16 -25941, i16 -25940, i16 -25939, i16 -25938, i16 -25937, i16 -25934, i16 -25933, i16 -25932, i16 -25931, i16 -25927, i16 -25925, i16 -25923, i16 -25922, i16 -25921, i16 -25917, i16 -25916, i16 -25914, i16 -25913, i16 -25912, i16 -25911, i16 -25910, i16 -25907, i16 -25906, i16 -25905, i16 -25904, i16 -25902, i16 -25900, i16 -25899, i16 -25898, i16 -25897, i16 -25895, i16 -25894, i16 -25893, i16 -25892, i16 -25891, i16 -25890, i16 -25888, i16 -25886, i16 -25885, i16 -25884, i16 -25883, i16 -25881, i16 -25880, i16 -25879, i16 -25878, i16 -25876, i16 -25874, i16 -25872, i16 -25871, i16 -25870, i16 -25869, i16 -25868, i16 -25867, i16 -25866, i16 -25865, i16 -25864, i16 -25862, i16 -25860, i16 -25859, i16 -25858, i16 -25857, i16 -25856, i16 -25855, i16 -25854, i16 -25852, i16 -25851, i16 -25850, i16 -30778, i16 -30840, i16 -30843, i16 -30803, i16 -30825, i16 -30845, i16 -30805, i16 -30747, i16 -30804, i16 -30795, i16 -30797, i16 -30773, i16 -30765, i16 -30787, i16 -30767, i16 -30784, i16 -30774, i16 -30757, i16 -30742, i16 -30752, i16 -30738, i16 -30698, i16 -30701, i16 -30722, i16 -30710, i16 -30693, i16 -30687, i16 -30663, i16 -30660, i16 32566, i16 32578, i16 32580, i16 32581, i16 -32240, i16 31482, i16 31485, i16 31496, i16 31491, i16 31492, i16 31509, i16 31498, i16 31531, i16 31503, i16 31559, i16 31544, i16 31530, i16 31513, i16 31534, i16 31537, i16 31520, i16 31525, i16 31524, i16 31539, i16 31550, i16 31518, i16 31576, i16 31578, i16 31557, i16 31605, i16 31564, i16 31581, i16 31584, i16 31598, i16 31611, i16 31586, i16 31602, i16 31601, i16 31632, i16 31654, i16 31655, i16 31672, i16 31660, i16 31645, i16 31656, i16 31621, i16 31658, i16 31644, i16 31650, i16 31659, i16 31668, i16 31697, i16 31681, i16 31692, i16 31709, i16 31706, i16 31717, i16 31718, i16 31722, i16 31756, i16 31742, i16 31740, i16 31759, i16 31766, i16 31755], [190 x i16] [i16 -25849, i16 -25847, i16 -25846, i16 -25845, i16 -25844, i16 -25843, i16 -25842, i16 -25840, i16 -25839, i16 -25838, i16 -25836, i16 -25835, i16 -25834, i16 -25833, i16 -25832, i16 -25831, i16 -25830, i16 -25829, i16 -25828, i16 -25827, i16 -25826, i16 -25824, i16 -25823, i16 -25822, i16 -25820, i16 -25819, i16 -25818, i16 -25817, i16 -25816, i16 -25815, i16 -25814, i16 -25813, i16 -25812, i16 -25811, i16 -25810, i16 -25808, i16 -25807, i16 -25805, i16 -25804, i16 -25803, i16 -25802, i16 -25801, i16 -25800, i16 -25799, i16 -25798, i16 -25795, i16 -25794, i16 -25793, i16 -25792, i16 -25786, i16 -25782, i16 -25781, i16 -25780, i16 -25778, i16 -25776, i16 -25774, i16 -25773, i16 -25771, i16 -25770, i16 -25769, i16 -25768, i16 -25767, i16 -25766, i16 -25765, i16 -25764, i16 -25763, i16 -25762, i16 -25761, i16 -25760, i16 -25759, i16 -25758, i16 -25757, i16 -25756, i16 -25755, i16 -25754, i16 -25753, i16 -25752, i16 -25751, i16 -25750, i16 -25749, i16 -25748, i16 -25747, i16 -25746, i16 -25745, i16 -25744, i16 -25743, i16 -25742, i16 -25741, i16 -25740, i16 -25739, i16 -25738, i16 -25737, i16 -25736, i16 -25735, i16 -25734, i16 -25733, i16 31775, i16 31786, i16 31782, i16 31800, i16 31809, i16 31808, i16 -32258, i16 -32255, i16 -32254, i16 -32252, i16 -32276, i16 -30652, i16 -32223, i16 -32222, i16 -32221, i16 -32211, i16 -32209, i16 -32216, i16 -32213, i16 -32200, i16 -32197, i16 -32205, i16 -32204, i16 -32194, i16 -32188, i16 -32183, i16 -32181, i16 -32177, i16 -32166, i16 -32161, i16 -32152, i16 -30594, i16 -30587, i16 -30584, i16 -30504, i16 -30497, i16 -30370, i16 32669, i16 32671, i16 32679, i16 32687, i16 32688, i16 32690, i16 31868, i16 25929, i16 31889, i16 31901, i16 31900, i16 31902, i16 31906, i16 31922, i16 31932, i16 31933, i16 31937, i16 31943, i16 31948, i16 31949, i16 31944, i16 31941, i16 31959, i16 31976, i16 -32146, i16 26280, i16 32703, i16 32718, i16 32725, i16 32741, i16 32737, i16 32742, i16 32745, i16 32750, i16 32755, i16 31992, i16 32119, i16 32166, i16 32174, i16 32327, i16 32411, i16 -24904, i16 -24908, i16 -29325, i16 -29308, i16 -29292, i16 -29295, i16 -29263, i16 -29337, i16 -29331, i16 -29625, i16 -29623, i16 -28342, i16 -28336, i16 -28338, i16 -28337, i16 -28316], [190 x i16] [i16 -25732, i16 -25731, i16 -25730, i16 -25729, i16 -25728, i16 -25727, i16 -25726, i16 -25725, i16 -25724, i16 -25723, i16 -25722, i16 -25721, i16 -25720, i16 -25719, i16 -25718, i16 -25717, i16 -25716, i16 -25715, i16 -25714, i16 -25713, i16 -25712, i16 -25711, i16 -25710, i16 -25709, i16 -25708, i16 -25707, i16 -25706, i16 -25705, i16 -25704, i16 -25703, i16 -25702, i16 -25701, i16 -25700, i16 -25699, i16 -25698, i16 -25697, i16 -25696, i16 -25695, i16 -25694, i16 -25693, i16 -25692, i16 -25691, i16 -25690, i16 -25689, i16 -25688, i16 -25687, i16 -25686, i16 -25685, i16 -25684, i16 -25683, i16 -25682, i16 -25681, i16 -25680, i16 -25679, i16 -25678, i16 -25677, i16 -25676, i16 -25675, i16 -25674, i16 -25673, i16 -25672, i16 -25671, i16 -25670, i16 -25669, i16 -25668, i16 -25667, i16 -25666, i16 -25665, i16 -25664, i16 -25663, i16 -25662, i16 -25661, i16 -25660, i16 -25659, i16 -25658, i16 -25657, i16 -25656, i16 -25655, i16 -25654, i16 -25653, i16 -25652, i16 -25651, i16 -25650, i16 -25649, i16 -25648, i16 -25647, i16 -25646, i16 -25645, i16 -25644, i16 -25643, i16 -25642, i16 -25641, i16 -25640, i16 -25639, i16 -25638, i16 -25637, i16 -28318, i16 -28319, i16 -28304, i16 -28311, i16 -28305, i16 -28291, i16 -28290, i16 -28302, i16 -28300, i16 -28295, i16 -28276, i16 -28283, i16 -28272, i16 -28275, i16 -28271, i16 -28254, i16 -28253, i16 -28246, i16 -28243, i16 -28242, i16 -28241, i16 -28235, i16 -28236, i16 -28230, i16 -29611, i16 -24962, i16 -29256, i16 -29205, i16 -29179, i16 -29095, i16 -29079, i16 -29259, i16 -29249, i16 -29252, i16 -29254, i16 -29244, i16 -29226, i16 -29225, i16 -29222, i16 -29218, i16 -29234, i16 -29233, i16 -29221, i16 -29242, i16 -29204, i16 -29193, i16 -29192, i16 -29213, i16 -29191, i16 -29189, i16 -29212, i16 -29175, i16 -29187, i16 -29164, i16 -29155, i16 -29153, i16 -29140, i16 -29138, i16 -29149, i16 -29137, i16 -29126, i16 -29120, i16 -29127, i16 -29131, i16 -29123, i16 -29135, i16 -29111, i16 -29119, i16 -29118, i16 -29103, i16 -29102, i16 -29110, i16 -29072, i16 -29066, i16 -29060, i16 -29073, i16 -29068, i16 -29051, i16 -29041, i16 -29036, i16 -29040, i16 -29028, i16 -29026, i16 -29576, i16 -29566, i16 -29558, i16 -29563, i16 -29544, i16 -29548, i16 26011, i16 -30250, i16 -30242, i16 -30246, i16 -30244], [190 x i16] [i16 -25636, i16 -25635, i16 -25634, i16 -25633, i16 -25632, i16 -25631, i16 -25630, i16 -25629, i16 -25628, i16 -25627, i16 -25626, i16 -25625, i16 -25624, i16 -25623, i16 -25622, i16 -25621, i16 -25620, i16 -25619, i16 -25618, i16 -25617, i16 -25616, i16 -25615, i16 -25614, i16 -25613, i16 -25612, i16 -25611, i16 -25610, i16 -25609, i16 -25608, i16 -25607, i16 -25606, i16 -25605, i16 -25604, i16 -25603, i16 -25602, i16 -25601, i16 -25600, i16 -25599, i16 -25598, i16 -25597, i16 -25596, i16 -25595, i16 -25594, i16 -25593, i16 -25592, i16 -25591, i16 -25590, i16 -25589, i16 -25588, i16 -25587, i16 -25586, i16 -25585, i16 -25584, i16 -25583, i16 -25582, i16 -25581, i16 -25580, i16 -25579, i16 -25578, i16 -25577, i16 -25576, i16 -25575, i16 -25574, i16 -25573, i16 -25572, i16 -25571, i16 -25570, i16 -25569, i16 -25568, i16 -25567, i16 -25566, i16 -25565, i16 -25564, i16 -25563, i16 -25562, i16 -25561, i16 -25560, i16 -25559, i16 -25558, i16 -25557, i16 -25556, i16 -25555, i16 -25554, i16 -25553, i16 -25552, i16 -25551, i16 -25550, i16 -25549, i16 -25548, i16 -25547, i16 -25546, i16 -25545, i16 -25544, i16 -25543, i16 -25542, i16 -25541, i16 -30235, i16 -30229, i16 -30225, i16 -30146, i16 -29914, i16 -26797, i16 -26903, i16 -26893, i16 -26897, i16 -26874, i16 -26879, i16 -26872, i16 -26865, i16 -26866, i16 -26838, i16 -26835, i16 -26832, i16 -26818, i16 -24704, i16 -24701, i16 -24699, i16 -24698, i16 -24697, i16 -24696, i16 -24695, i16 -24694, i16 -24692, i16 -24834, i16 -24821, i16 -24819, i16 -26951, i16 -26948, i16 -26947, i16 -26930, i16 -26926, i16 30655, i16 -26912, i16 -28018, i16 -27986, i16 -27960, i16 -27842, i16 -27798, i16 -27702, i16 -27761, i16 -27586, i16 -27541, i16 -25473, i16 -25470, i16 -25467, i16 -25466, i16 -25465, i16 -25464, i16 31267, i16 -25461, i16 -25458, i16 -25456, i16 -25455, i16 -25454, i16 -25452, i16 -25451, i16 -25446, i16 -25445, i16 -25442, i16 -25441, i16 -25440, i16 -25439, i16 -25438, i16 -25437, i16 -25435, i16 -25434, i16 -25433, i16 -25432, i16 -25431, i16 -25429, i16 -25427, i16 -25426, i16 -25424, i16 -25423, i16 -25422, i16 -25421, i16 -25420, i16 -25419, i16 -25418, i16 -25417, i16 -25414, i16 -25413, i16 -25412, i16 -25411, i16 -25404, i16 -25403, i16 -25402, i16 -25401, i16 -25398, i16 -25397], [190 x i16] [i16 -25540, i16 -25539, i16 -25538, i16 -25537, i16 -25536, i16 -25535, i16 -25534, i16 -25533, i16 -25532, i16 -25531, i16 -25530, i16 -25529, i16 -25528, i16 -25527, i16 -25526, i16 -25525, i16 -25524, i16 -25523, i16 -25522, i16 -25521, i16 -25520, i16 -25519, i16 -25518, i16 -25517, i16 -25516, i16 -25515, i16 -25514, i16 -25513, i16 -25512, i16 -25511, i16 -25510, i16 -25509, i16 -25508, i16 -25507, i16 -25506, i16 -25505, i16 -25504, i16 -25503, i16 -25502, i16 -25501, i16 -25500, i16 -25499, i16 -25498, i16 -25497, i16 -25496, i16 -25495, i16 -25494, i16 -25493, i16 -25492, i16 -25491, i16 -25490, i16 -25489, i16 -25488, i16 -25487, i16 -25486, i16 -25485, i16 -25484, i16 -25483, i16 -25482, i16 -25481, i16 -25480, i16 -25479, i16 -25478, i16 -25477, i16 -25475, i16 -25474, i16 -25472, i16 -25469, i16 -25468, i16 -25463, i16 -25462, i16 -25460, i16 -25457, i16 -25453, i16 -25450, i16 -25449, i16 -25448, i16 -25447, i16 -25443, i16 -25430, i16 -25428, i16 -25425, i16 -25415, i16 -25410, i16 -25409, i16 -25408, i16 -25407, i16 -25406, i16 -25400, i16 -25399, i16 -25391, i16 -25390, i16 -25382, i16 -25381, i16 -25376, i16 -25375, i16 -25396, i16 -25395, i16 -25394, i16 -25393, i16 -25392, i16 -25389, i16 -25388, i16 -25387, i16 -25385, i16 -25384, i16 -25383, i16 -25380, i16 -25379, i16 -25377, i16 -25374, i16 -26756, i16 -26747, i16 -26735, i16 -26734, i16 -26732, i16 -26705, i16 -26709, i16 -26717, i16 -26702, i16 -26700, i16 -25935, i16 -25936, i16 -25929, i16 -25000, i16 -25930, i16 -25926, i16 -25924, i16 -25919, i16 -25920, i16 -25915, i16 -25918, i16 -25909, i16 -25908, i16 -25903, i16 -25787, i16 -25789, i16 -25785, i16 -25783, i16 -25784, i16 -25779, i16 -25775, i16 -26392, i16 -26355, i16 -26322, i16 -26283, i16 -26284, i16 -25889, i16 -25887, i16 -25882, i16 -25873, i16 -25877, i16 -25861, i16 -25875, i16 -25863, i16 -25848, i16 -25841, i16 -25837, i16 -25825, i16 -25821, i16 -24899, i16 -24898, i16 32315, i16 -24958, i16 -24953, i16 -24952, i16 -24949, i16 -24942, i16 -27690, i16 -24931, i16 -24929, i16 -24869, i16 -24868, i16 -24867, i16 -24864, i16 -24865, i16 -24862, i16 -24855, i16 -24857, i16 -24859, i16 -24854, i16 -24849, i16 -24798, i16 -24788, i16 -24785, i16 -24775, i16 -24777, i16 -24771, i16 -24770, i16 -24764], [190 x i16] [i16 -25373, i16 -25372, i16 -25371, i16 -25370, i16 -25369, i16 -25368, i16 -25367, i16 -25366, i16 -25365, i16 -25364, i16 -25363, i16 -25362, i16 -25361, i16 -25360, i16 -25359, i16 -25358, i16 -25357, i16 -25356, i16 -25355, i16 -25354, i16 -25353, i16 -25352, i16 -25351, i16 -25350, i16 -25349, i16 -25348, i16 -25347, i16 -25346, i16 -25345, i16 -25344, i16 -25343, i16 -25342, i16 -25341, i16 -25340, i16 -25339, i16 -25338, i16 -25337, i16 -25336, i16 -25335, i16 -25334, i16 -25333, i16 -25332, i16 -25331, i16 -25330, i16 -25329, i16 -25328, i16 -25327, i16 -25326, i16 -25325, i16 -25324, i16 -25323, i16 -25322, i16 -25321, i16 -25320, i16 -25319, i16 -25318, i16 -25317, i16 -25316, i16 -25315, i16 -25314, i16 -25313, i16 -25312, i16 -25311, i16 -25310, i16 -25309, i16 -25308, i16 -25307, i16 -25306, i16 -25305, i16 -25304, i16 -25303, i16 -25302, i16 -25301, i16 -25300, i16 -25299, i16 -25298, i16 -25297, i16 -25296, i16 -25295, i16 -25294, i16 -25293, i16 -25292, i16 -25291, i16 -25290, i16 -25289, i16 -25288, i16 -25287, i16 -25286, i16 -25285, i16 -25284, i16 -25283, i16 -25282, i16 -25281, i16 -25280, i16 -25279, i16 -25278, i16 -7628, i16 -7627, i16 -7626, i16 -7625, i16 -7624, i16 -7623, i16 -7622, i16 -7621, i16 -7620, i16 -7619, i16 -7618, i16 -7617, i16 -7616, i16 -7615, i16 -7614, i16 -7613, i16 -7612, i16 -7611, i16 -7610, i16 -7609, i16 -7608, i16 -7607, i16 -7606, i16 -7605, i16 -7604, i16 -7603, i16 -7602, i16 -7601, i16 -7600, i16 -7599, i16 -7598, i16 -7597, i16 -7596, i16 -7595, i16 -7594, i16 -7593, i16 -7592, i16 -7591, i16 -7590, i16 -7589, i16 -7588, i16 -7587, i16 -7586, i16 -7585, i16 -7584, i16 -7583, i16 -7582, i16 -7581, i16 -7580, i16 -7579, i16 -7578, i16 -7577, i16 -7576, i16 -7575, i16 -7574, i16 -7573, i16 -7572, i16 -7571, i16 -7570, i16 -7569, i16 -7568, i16 -7567, i16 -7566, i16 -7565, i16 -7564, i16 -7563, i16 -7562, i16 -7561, i16 -7560, i16 -7559, i16 -7558, i16 -7557, i16 -7556, i16 -7555, i16 -7554, i16 -7553, i16 -7552, i16 -7551, i16 -7550, i16 -7549, i16 -7548, i16 -7547, i16 -7546, i16 -7545, i16 -7544, i16 -7543, i16 -7542, i16 -7541, i16 -7540, i16 -7539, i16 -7538, i16 -7537, i16 -7536, i16 -7535], [190 x i16] [i16 -25277, i16 -25276, i16 -25275, i16 -25274, i16 -25273, i16 -25272, i16 -25271, i16 -25270, i16 -25269, i16 -25268, i16 -25267, i16 -25266, i16 -25265, i16 -25264, i16 -25263, i16 -25262, i16 -25261, i16 -25260, i16 -25259, i16 -25258, i16 -25257, i16 -25256, i16 -25255, i16 -25254, i16 -25253, i16 -25252, i16 -25251, i16 -25250, i16 -25249, i16 -25248, i16 -25247, i16 -25246, i16 -25245, i16 -25244, i16 -25243, i16 -25242, i16 -25241, i16 -25240, i16 -25239, i16 -25238, i16 -25237, i16 -25236, i16 -25235, i16 -25234, i16 -25233, i16 -25232, i16 -25231, i16 -25230, i16 -25229, i16 -25228, i16 -25227, i16 -25226, i16 -25225, i16 -25224, i16 -25223, i16 -25222, i16 -25221, i16 -25220, i16 -25219, i16 -25218, i16 -25217, i16 -25216, i16 -25215, i16 -25214, i16 -25213, i16 -25212, i16 -25211, i16 -25210, i16 -25209, i16 -25208, i16 -25207, i16 -25206, i16 -25205, i16 -25204, i16 -25203, i16 -25202, i16 -25201, i16 -25200, i16 -25199, i16 -25198, i16 -25197, i16 -25196, i16 -25195, i16 -25194, i16 -25193, i16 -25192, i16 -25191, i16 -25190, i16 -25189, i16 -25188, i16 -25187, i16 -25186, i16 -25185, i16 -25184, i16 -25183, i16 -25182, i16 -7534, i16 -7533, i16 -7532, i16 -7531, i16 -7530, i16 -7529, i16 -7528, i16 -7527, i16 -7526, i16 -7525, i16 -7524, i16 -7523, i16 -7522, i16 -7521, i16 -7520, i16 -7519, i16 -7518, i16 -7517, i16 -7516, i16 -7515, i16 -7514, i16 -7513, i16 -7512, i16 -7511, i16 -7510, i16 -7509, i16 -7508, i16 -7507, i16 -7506, i16 -7505, i16 -7504, i16 -7503, i16 -7502, i16 -7501, i16 -7500, i16 -7499, i16 -7498, i16 -7497, i16 -7496, i16 -7495, i16 -7494, i16 -7493, i16 -7492, i16 -7491, i16 -7490, i16 -7489, i16 -7488, i16 -7487, i16 -7486, i16 -7485, i16 -7484, i16 -7483, i16 -7482, i16 -7481, i16 -7480, i16 -7479, i16 -7478, i16 -7477, i16 -7476, i16 -7475, i16 -7474, i16 -7473, i16 -7472, i16 -7471, i16 -7470, i16 -7469, i16 -7468, i16 -7467, i16 -7466, i16 -7465, i16 -7464, i16 -7463, i16 -7462, i16 -7461, i16 -7460, i16 -7459, i16 -7458, i16 -7457, i16 -7456, i16 -7455, i16 -7454, i16 -7453, i16 -7452, i16 -7451, i16 -7450, i16 -7449, i16 -7448, i16 -7447, i16 -7446, i16 -7445, i16 -7444, i16 -7443, i16 -7442, i16 -7441], [190 x i16] [i16 -25181, i16 -25180, i16 -25179, i16 -25178, i16 -25177, i16 -25176, i16 -25175, i16 -25174, i16 -25173, i16 -25172, i16 -25171, i16 -25170, i16 -25169, i16 -25168, i16 -25167, i16 -25166, i16 -25165, i16 -25164, i16 -25163, i16 -25162, i16 -25161, i16 -25160, i16 -25159, i16 -25158, i16 -25157, i16 -25156, i16 -25155, i16 -25154, i16 -25153, i16 -25152, i16 -25151, i16 -25150, i16 -25149, i16 -25148, i16 -25147, i16 -25146, i16 -25145, i16 -25144, i16 -25143, i16 -25142, i16 -25141, i16 -25140, i16 -25139, i16 -25138, i16 -25137, i16 -25136, i16 -25135, i16 -25134, i16 -25133, i16 -25132, i16 -25131, i16 -25130, i16 -25129, i16 -25128, i16 -25127, i16 -25126, i16 -25125, i16 -25124, i16 -25123, i16 -25122, i16 -25121, i16 -25120, i16 -25119, i16 -25118, i16 -25117, i16 -25116, i16 -25115, i16 -25114, i16 -25113, i16 -25112, i16 -25111, i16 -25110, i16 -25109, i16 -25108, i16 -25107, i16 -25106, i16 -25105, i16 -25104, i16 -25103, i16 -25102, i16 -25101, i16 -25100, i16 -25099, i16 -25098, i16 -25097, i16 -25096, i16 -25095, i16 -25094, i16 -25093, i16 -25092, i16 -25091, i16 -25090, i16 -25089, i16 -25088, i16 -25087, i16 -25086, i16 -7440, i16 -7439, i16 -7438, i16 -7437, i16 -7436, i16 -7435, i16 -7434, i16 -7433, i16 -7432, i16 -7431, i16 -7430, i16 -7429, i16 -7428, i16 -7427, i16 -7426, i16 -7425, i16 -7424, i16 -7423, i16 -7422, i16 -7421, i16 -7420, i16 -7419, i16 -7418, i16 -7417, i16 -7416, i16 -7415, i16 -7414, i16 -7413, i16 -7412, i16 -7411, i16 -7410, i16 -7409, i16 -7408, i16 -7407, i16 -7406, i16 -7405, i16 -7404, i16 -7403, i16 -7402, i16 -7401, i16 -7400, i16 -7399, i16 -7398, i16 -7397, i16 -7396, i16 -7395, i16 -7394, i16 -7393, i16 -7392, i16 -7391, i16 -7390, i16 -7389, i16 -7388, i16 -7387, i16 -7386, i16 -7385, i16 -7384, i16 -7383, i16 -7382, i16 -7381, i16 -7380, i16 -7379, i16 -7378, i16 -7377, i16 -7376, i16 -7375, i16 -7374, i16 -7373, i16 -7372, i16 -7371, i16 -7370, i16 -7369, i16 -7368, i16 -7367, i16 -7366, i16 -7365, i16 -7364, i16 -7363, i16 -7362, i16 -7361, i16 -7360, i16 -7359, i16 -7358, i16 -7357, i16 -7356, i16 -7355, i16 -7354, i16 -7353, i16 -7352, i16 -7351, i16 -7350, i16 -7349, i16 -7348, i16 -7347], [190 x i16] [i16 -25085, i16 -25084, i16 -25083, i16 -25082, i16 -25081, i16 -25080, i16 -25079, i16 -25078, i16 -25077, i16 -25076, i16 -25075, i16 -25074, i16 -25073, i16 -25072, i16 -25071, i16 -25070, i16 -25069, i16 -25068, i16 -25067, i16 -25066, i16 -25065, i16 -25064, i16 -25063, i16 -25062, i16 -25061, i16 -25060, i16 -25059, i16 -25058, i16 -25052, i16 -25049, i16 -25042, i16 -25040, i16 -25036, i16 -25029, i16 -25028, i16 -25024, i16 -25011, i16 -25008, i16 -25006, i16 -25005, i16 -25004, i16 -25002, i16 -24999, i16 -24995, i16 -24993, i16 -24992, i16 -24991, i16 -24990, i16 -24987, i16 -24978, i16 -24977, i16 -24974, i16 -24972, i16 -24971, i16 -24970, i16 -24969, i16 -24968, i16 -24967, i16 -24966, i16 -24965, i16 -24964, i16 -24963, i16 -24960, i16 -24959, i16 -24957, i16 -24956, i16 -24955, i16 -24954, i16 -24951, i16 -24950, i16 -24948, i16 -24947, i16 -24946, i16 -24945, i16 -24944, i16 -24943, i16 -24940, i16 -24939, i16 -24938, i16 -24937, i16 -24936, i16 -24935, i16 -24934, i16 -24933, i16 -24932, i16 -24930, i16 -24928, i16 -24927, i16 -24926, i16 -24925, i16 -24924, i16 -24923, i16 -24921, i16 -24920, i16 -24919, i16 -24918, i16 -7346, i16 -7345, i16 -7344, i16 -7343, i16 -7342, i16 -7341, i16 -7340, i16 -7339, i16 -7338, i16 -7337, i16 -7336, i16 -7335, i16 -7334, i16 -7333, i16 -7332, i16 -7331, i16 -7330, i16 -7329, i16 -7328, i16 -7327, i16 -7326, i16 -7325, i16 -7324, i16 -7323, i16 -7322, i16 -7321, i16 -7320, i16 -7319, i16 -7318, i16 -7317, i16 -7316, i16 -7315, i16 -7314, i16 -7313, i16 -7312, i16 -7311, i16 -7310, i16 -7309, i16 -7308, i16 -7307, i16 -7306, i16 -7305, i16 -7304, i16 -7303, i16 -7302, i16 -7301, i16 -7300, i16 -7299, i16 -7298, i16 -7297, i16 -7296, i16 -7295, i16 -7294, i16 -7293, i16 -7292, i16 -7291, i16 -7290, i16 -7289, i16 -7288, i16 -7287, i16 -7286, i16 -7285, i16 -7284, i16 -7283, i16 -7282, i16 -7281, i16 -7280, i16 -7279, i16 -7278, i16 -7277, i16 -7276, i16 -7275, i16 -7274, i16 -7273, i16 -7272, i16 -7271, i16 -7270, i16 -7269, i16 -7268, i16 -7267, i16 -7266, i16 -7265, i16 -7264, i16 -7263, i16 -7262, i16 -7261, i16 -7260, i16 -7259, i16 -7258, i16 -7257, i16 -7256, i16 -7255, i16 -7254, i16 -7253], [190 x i16] [i16 -24917, i16 -24916, i16 -24915, i16 -24914, i16 -24913, i16 -24912, i16 -24911, i16 -24910, i16 -24909, i16 -24907, i16 -24906, i16 -24905, i16 -24903, i16 -24902, i16 -24900, i16 -24897, i16 -24896, i16 -24895, i16 -24894, i16 -24893, i16 -24891, i16 -24890, i16 -24889, i16 -24888, i16 -24886, i16 -24885, i16 -24884, i16 -24880, i16 -24878, i16 -24877, i16 -24875, i16 -24874, i16 -24873, i16 -24871, i16 -24870, i16 -24866, i16 -24863, i16 -24861, i16 -24860, i16 -24858, i16 -24856, i16 -24853, i16 -24852, i16 -24851, i16 -24850, i16 -24848, i16 -24847, i16 -24846, i16 -24845, i16 -24844, i16 -24843, i16 -24842, i16 -24841, i16 -24840, i16 -24838, i16 -24835, i16 -24833, i16 -24832, i16 -24831, i16 -24830, i16 -24829, i16 -24828, i16 -24827, i16 -24826, i16 -24825, i16 -24824, i16 -24823, i16 -24822, i16 -24820, i16 -24817, i16 -24815, i16 -24814, i16 -24812, i16 -24811, i16 -24810, i16 -24808, i16 -24806, i16 -24805, i16 -24804, i16 -24803, i16 -24802, i16 -24801, i16 -24799, i16 -24797, i16 -24796, i16 -24795, i16 -24794, i16 -24793, i16 -24792, i16 -24791, i16 -24790, i16 -24789, i16 -24787, i16 -24786, i16 -24784, i16 -24783, i16 -7252, i16 -7251, i16 -7250, i16 -7249, i16 -7248, i16 -7247, i16 -7246, i16 -7245, i16 -7244, i16 -7243, i16 -7242, i16 -7241, i16 -7240, i16 -7239, i16 -7238, i16 -7237, i16 -7236, i16 -7235, i16 -7234, i16 -7233, i16 -7232, i16 -7231, i16 -7230, i16 -7229, i16 -7228, i16 -7227, i16 -7226, i16 -7225, i16 -7224, i16 -7223, i16 -7222, i16 -7221, i16 -7220, i16 -7219, i16 -7218, i16 -7217, i16 -7216, i16 -7215, i16 -7214, i16 -7213, i16 -7212, i16 -7211, i16 -7210, i16 -7209, i16 -7208, i16 -7207, i16 -7206, i16 -7205, i16 -7204, i16 -7203, i16 -7202, i16 -7201, i16 -7200, i16 -7199, i16 -7198, i16 -7197, i16 -7196, i16 -7195, i16 -7194, i16 -7193, i16 -7192, i16 -7191, i16 -7190, i16 -7189, i16 -7188, i16 -7187, i16 -7186, i16 -7185, i16 -7184, i16 -7183, i16 -7182, i16 -7181, i16 -7180, i16 -7179, i16 -7178, i16 -7177, i16 -7176, i16 -7175, i16 -7174, i16 -7173, i16 -7172, i16 -7171, i16 -7170, i16 -7169, i16 -7168, i16 -7167, i16 -7166, i16 -7165, i16 -7164, i16 -7163, i16 -7162, i16 -7161, i16 -7160, i16 -7159], [190 x i16] [i16 -24782, i16 -24781, i16 -24780, i16 -24779, i16 -24778, i16 -24776, i16 -24774, i16 -24772, i16 -24769, i16 -24768, i16 -24767, i16 -24766, i16 -24765, i16 -24763, i16 -24762, i16 -24761, i16 -24760, i16 -24759, i16 -24758, i16 -24757, i16 -24756, i16 -24755, i16 -24754, i16 -24753, i16 -24750, i16 -24749, i16 -24748, i16 -24747, i16 -24746, i16 -24745, i16 -24744, i16 -24743, i16 -24742, i16 -24741, i16 -24740, i16 -24739, i16 -24738, i16 -24737, i16 -24736, i16 -24735, i16 -24734, i16 -24733, i16 -24732, i16 -24731, i16 -24730, i16 -24729, i16 -24728, i16 -24727, i16 -24726, i16 -24725, i16 -24724, i16 -24723, i16 -24722, i16 -24721, i16 -24720, i16 -24719, i16 -24718, i16 -24717, i16 -24716, i16 -24715, i16 -24714, i16 -24713, i16 -24712, i16 -24711, i16 -24710, i16 -24709, i16 -24708, i16 -24707, i16 -24706, i16 -24703, i16 -24702, i16 -24691, i16 -24690, i16 -24689, i16 -24688, i16 -24687, i16 -24686, i16 -24685, i16 -24684, i16 -24683, i16 -24682, i16 -24681, i16 -24680, i16 -24676, i16 -24675, i16 -24674, i16 -24671, i16 -24670, i16 -24669, i16 -24668, i16 -24667, i16 -1748, i16 -1671, i16 -1643, i16 -1561, i16 -1551, i16 -7158, i16 -7157, i16 -7156, i16 -7155, i16 -7154, i16 -7153, i16 -7152, i16 -7151, i16 -7150, i16 -7149, i16 -7148, i16 -7147, i16 -7146, i16 -7145, i16 -7144, i16 -7143, i16 -7142, i16 -7141, i16 -7140, i16 -7139, i16 -7138, i16 -7137, i16 -7136, i16 -7135, i16 -7134, i16 -7133, i16 -7132, i16 -7131, i16 -7130, i16 -7129, i16 -7128, i16 -7127, i16 -7126, i16 -7125, i16 -7124, i16 -7123, i16 -7122, i16 -7121, i16 -7120, i16 -7119, i16 -7118, i16 -7117, i16 -7116, i16 -7115, i16 -7114, i16 -7113, i16 -7112, i16 -7111, i16 -7110, i16 -7109, i16 -7108, i16 -7107, i16 -7106, i16 -7105, i16 -7104, i16 -7103, i16 -7102, i16 -7101, i16 -7100, i16 -7099, i16 -7098, i16 -7097, i16 -7096, i16 -7095, i16 -7094, i16 -7093, i16 -7092, i16 -7091, i16 -7090, i16 -7089, i16 -7088, i16 -7087, i16 -7086, i16 -7085, i16 -7084, i16 -7083, i16 -7082, i16 -7081, i16 -7080, i16 -7079, i16 -7078, i16 -7077, i16 -7076, i16 -7075, i16 -7074, i16 -7073, i16 -7072, i16 -7071, i16 -7070, i16 -7069, i16 -7068, i16 -7067, i16 -7066, i16 -7065], [190 x i16] [i16 -1524, i16 -1523, i16 -1522, i16 -1521, i16 -1519, i16 -1517, i16 -1516, i16 -1512, i16 -1505, i16 -1504, i16 -1503, i16 -1501, i16 -1500, i16 -1497, i16 -1496, i16 -1495, i16 11905, i16 -6122, i16 -6121, i16 -6120, i16 11908, i16 13427, i16 13383, i16 11912, i16 11915, i16 -6114, i16 13726, i16 13850, i16 13838, i16 11916, i16 11927, i16 14702, i16 14616, i16 -6106, i16 14799, i16 14815, i16 14963, i16 14800, i16 -6101, i16 -6100, i16 15182, i16 15470, i16 15584, i16 11943, i16 -6095, i16 -6094, i16 11946, i16 16470, i16 16735, i16 11950, i16 17207, i16 11955, i16 11958, i16 11959, i16 -6085, i16 17329, i16 17324, i16 11963, i16 17373, i16 17622, i16 18017, i16 17996, i16 -6077, i16 18211, i16 18217, i16 18300, i16 18317, i16 11978, i16 18759, i16 18810, i16 18813, i16 18818, i16 18819, i16 18821, i16 18822, i16 18847, i16 18843, i16 18871, i16 18870, i16 -6060, i16 -6059, i16 19619, i16 19615, i16 19616, i16 19617, i16 19575, i16 19618, i16 19731, i16 19732, i16 19733, i16 19734, i16 19735, i16 19736, i16 19737, i16 19886, i16 -6044, i16 -7064, i16 -7063, i16 -7062, i16 -7061, i16 -7060, i16 -7059, i16 -7058, i16 -7057, i16 -7056, i16 -7055, i16 -7054, i16 -7053, i16 -7052, i16 -7051, i16 -7050, i16 -7049, i16 -7048, i16 -7047, i16 -7046, i16 -7045, i16 -7044, i16 -7043, i16 -7042, i16 -7041, i16 -7040, i16 -7039, i16 -7038, i16 -7037, i16 -7036, i16 -7035, i16 -7034, i16 -7033, i16 -7032, i16 -7031, i16 -7030, i16 -7029, i16 -7028, i16 -7027, i16 -7026, i16 -7025, i16 -7024, i16 -7023, i16 -7022, i16 -7021, i16 -7020, i16 -7019, i16 -7018, i16 -7017, i16 -7016, i16 -7015, i16 -7014, i16 -7013, i16 -7012, i16 -7011, i16 -7010, i16 -7009, i16 -7008, i16 -7007, i16 -7006, i16 -7005, i16 -7004, i16 -7003, i16 -7002, i16 -7001, i16 -7000, i16 -6999, i16 -6998, i16 -6997, i16 -6996, i16 -6995, i16 -6994, i16 -6993, i16 -6992, i16 -6991, i16 -6990, i16 -6989, i16 -6988, i16 -6987, i16 -6986, i16 -6985, i16 -6984, i16 -6983, i16 -6982, i16 -6981, i16 -6980, i16 -6979, i16 -6978, i16 -6977, i16 -6976, i16 -6975, i16 -6974, i16 -6973, i16 -6972, i16 -6971]], align 16
@legacy_chars = internal unnamed_addr constant [623 x i16] [i16 0, i16 1, i16 160, i16 167, i16 168, i16 169, i16 175, i16 176, i16 178, i16 183, i16 184, i16 198, i16 215, i16 216, i16 230, i16 247, i16 248, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 269, i16 270, i16 271, i16 272, i16 273, i16 274, i16 275, i16 278, i16 279, i16 280, i16 281, i16 282, i16 283, i16 284, i16 285, i16 286, i16 287, i16 288, i16 289, i16 290, i16 291, i16 292, i16 293, i16 294, i16 295, i16 296, i16 297, i16 298, i16 299, i16 302, i16 303, i16 304, i16 305, i16 308, i16 309, i16 310, i16 311, i16 312, i16 313, i16 314, i16 315, i16 316, i16 317, i16 318, i16 321, i16 322, i16 323, i16 324, i16 325, i16 326, i16 327, i16 328, i16 330, i16 331, i16 332, i16 333, i16 336, i16 337, i16 338, i16 339, i16 340, i16 341, i16 342, i16 343, i16 344, i16 345, i16 346, i16 347, i16 348, i16 349, i16 350, i16 351, i16 352, i16 353, i16 354, i16 355, i16 356, i16 357, i16 358, i16 359, i16 360, i16 361, i16 362, i16 363, i16 364, i16 365, i16 366, i16 367, i16 368, i16 369, i16 370, i16 371, i16 372, i16 373, i16 374, i16 375, i16 376, i16 377, i16 378, i16 379, i16 380, i16 381, i16 382, i16 402, i16 416, i16 417, i16 431, i16 432, i16 536, i16 537, i16 538, i16 539, i16 710, i16 711, i16 728, i16 729, i16 731, i16 732, i16 733, i16 768, i16 769, i16 771, i16 777, i16 803, i16 890, i16 900, i16 901, i16 902, i16 904, i16 905, i16 906, i16 908, i16 910, i16 911, i16 912, i16 913, i16 914, i16 915, i16 916, i16 917, i16 918, i16 919, i16 920, i16 921, i16 922, i16 923, i16 924, i16 925, i16 926, i16 927, i16 928, i16 929, i16 931, i16 932, i16 933, i16 934, i16 935, i16 936, i16 937, i16 938, i16 939, i16 940, i16 941, i16 942, i16 943, i16 944, i16 945, i16 946, i16 947, i16 948, i16 949, i16 950, i16 951, i16 952, i16 953, i16 954, i16 955, i16 956, i16 957, i16 958, i16 959, i16 960, i16 961, i16 962, i16 963, i16 964, i16 965, i16 966, i16 967, i16 968, i16 969, i16 970, i16 971, i16 972, i16 973, i16 974, i16 1025, i16 1026, i16 1027, i16 1028, i16 1029, i16 1030, i16 1031, i16 1032, i16 1033, i16 1034, i16 1035, i16 1036, i16 1038, i16 1039, i16 1040, i16 1041, i16 1042, i16 1043, i16 1044, i16 1045, i16 1046, i16 1047, i16 1048, i16 1049, i16 1050, i16 1051, i16 1052, i16 1053, i16 1054, i16 1055, i16 1056, i16 1057, i16 1058, i16 1059, i16 1060, i16 1061, i16 1062, i16 1063, i16 1064, i16 1065, i16 1066, i16 1067, i16 1068, i16 1069, i16 1070, i16 1071, i16 1072, i16 1073, i16 1074, i16 1075, i16 1076, i16 1077, i16 1078, i16 1079, i16 1080, i16 1081, i16 1082, i16 1083, i16 1084, i16 1085, i16 1086, i16 1087, i16 1088, i16 1089, i16 1090, i16 1091, i16 1092, i16 1093, i16 1094, i16 1095, i16 1096, i16 1097, i16 1098, i16 1099, i16 1100, i16 1101, i16 1102, i16 1103, i16 1105, i16 1106, i16 1107, i16 1108, i16 1109, i16 1110, i16 1111, i16 1112, i16 1113, i16 1114, i16 1115, i16 1116, i16 1118, i16 1119, i16 1168, i16 1169, i16 1456, i16 1457, i16 1458, i16 1459, i16 1460, i16 1461, i16 1462, i16 1463, i16 1464, i16 1465, i16 1467, i16 1468, i16 1469, i16 1470, i16 1471, i16 1472, i16 1473, i16 1474, i16 1475, i16 1488, i16 1489, i16 1490, i16 1491, i16 1492, i16 1493, i16 1494, i16 1495, i16 1496, i16 1497, i16 1498, i16 1499, i16 1500, i16 1501, i16 1502, i16 1503, i16 1504, i16 1505, i16 1506, i16 1507, i16 1508, i16 1509, i16 1510, i16 1511, i16 1512, i16 1513, i16 1514, i16 1520, i16 1521, i16 1522, i16 1523, i16 1524, i16 1548, i16 1563, i16 1567, i16 1569, i16 1570, i16 1571, i16 1572, i16 1573, i16 1574, i16 1575, i16 1576, i16 1577, i16 1578, i16 1579, i16 1580, i16 1581, i16 1582, i16 1583, i16 1584, i16 1585, i16 1586, i16 1587, i16 1588, i16 1589, i16 1590, i16 1591, i16 1592, i16 1593, i16 1594, i16 1600, i16 1601, i16 1602, i16 1603, i16 1604, i16 1605, i16 1606, i16 1607, i16 1608, i16 1609, i16 1610, i16 1611, i16 1612, i16 1613, i16 1614, i16 1615, i16 1616, i16 1617, i16 1618, i16 1657, i16 1662, i16 1670, i16 1672, i16 1681, i16 1688, i16 1705, i16 1711, i16 1722, i16 1726, i16 1729, i16 1746, i16 3585, i16 3586, i16 3587, i16 3588, i16 3589, i16 3590, i16 3591, i16 3592, i16 3593, i16 3594, i16 3595, i16 3596, i16 3597, i16 3598, i16 3599, i16 3600, i16 3601, i16 3602, i16 3603, i16 3604, i16 3605, i16 3606, i16 3607, i16 3608, i16 3609, i16 3610, i16 3611, i16 3612, i16 3613, i16 3614, i16 3615, i16 3616, i16 3617, i16 3618, i16 3619, i16 3620, i16 3621, i16 3622, i16 3623, i16 3624, i16 3625, i16 3626, i16 3627, i16 3628, i16 3629, i16 3630, i16 3631, i16 3632, i16 3633, i16 3634, i16 3635, i16 3636, i16 3637, i16 3638, i16 3639, i16 3640, i16 3641, i16 3642, i16 3647, i16 3648, i16 3649, i16 3650, i16 3651, i16 3652, i16 3653, i16 3654, i16 3655, i16 3656, i16 3657, i16 3658, i16 3659, i16 3660, i16 3661, i16 3662, i16 3663, i16 3664, i16 3665, i16 3666, i16 3667, i16 3668, i16 3669, i16 3670, i16 3671, i16 3672, i16 3673, i16 3674, i16 3675, i16 7682, i16 7683, i16 7690, i16 7691, i16 7710, i16 7711, i16 7744, i16 7745, i16 7766, i16 7767, i16 7776, i16 7777, i16 7786, i16 7787, i16 7808, i16 7809, i16 7810, i16 7811, i16 7812, i16 7813, i16 7922, i16 7923, i16 8204, i16 8205, i16 8206, i16 8207, i16 8211, i16 8212, i16 8213, i16 8215, i16 8216, i16 8217, i16 8218, i16 8220, i16 8221, i16 8222, i16 8224, i16 8225, i16 8226, i16 8230, i16 8240, i16 8249, i16 8250, i16 8362, i16 8363, i16 8364, i16 8367, i16 8470, i16 8482, i16 8729, i16 8730, i16 8776, i16 8804, i16 8805, i16 8992, i16 8993, i16 9472, i16 9474, i16 9484, i16 9488, i16 9492, i16 9496, i16 9500, i16 9508, i16 9516, i16 9524, i16 9532, i16 9552, i16 9553, i16 9554, i16 9555, i16 9556, i16 9557, i16 9558, i16 9559, i16 9560, i16 9561, i16 9562, i16 9563, i16 9564, i16 9565, i16 9566, i16 9567, i16 9568, i16 9569, i16 9570, i16 9571, i16 9572, i16 9573, i16 9574, i16 9575, i16 9576, i16 9577, i16 9578, i16 9579, i16 9580, i16 9600, i16 9604, i16 9608, i16 9612, i16 9616, i16 9617, i16 9618, i16 9619, i16 9632], align 16
@in6addr_any = constant { { [16 x i8] } } zeroinitializer, align 4
@in6addr_loopback = constant { { [16 x i8] } } { { [16 x i8] } { [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01" } }, align 4
@inet_ntoa.buf = internal global [16 x i8] zeroinitializer, align 16
@.str276 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@.str277 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@.str1278 = private unnamed_addr constant [24 x i8] c"%x:%x:%x:%x:%x:%x:%x:%x\00", align 1
@.str2279 = private unnamed_addr constant [3 x i8] c":0\00", align 1
@__init_security.pfd = private unnamed_addr constant [3 x %struct.pollfd.214] [%struct.pollfd.214 zeroinitializer, %struct.pollfd.214 { i32 1, i16 0, i16 0 }, %struct.pollfd.214 { i32 2, i16 0, i16 0 }], align 16
@.str284 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@__fsmu8 = constant [51 x i32] [i32 -1073741822, i32 -1073741821, i32 -1073741820, i32 -1073741819, i32 -1073741818, i32 -1073741817, i32 -1073741816, i32 -1073741815, i32 -1073741814, i32 -1073741813, i32 -1073741812, i32 -1073741811, i32 -1073741810, i32 -1073741809, i32 -1073741808, i32 -1073741807, i32 -1073741806, i32 -1073741805, i32 -1073741804, i32 -1073741803, i32 -1073741802, i32 -1073741801, i32 -1073741800, i32 -1073741799, i32 -1073741798, i32 -1073741797, i32 -1073741796, i32 -1073741795, i32 -1073741794, i32 -1073741793, i32 -1291845632, i32 -1023410175, i32 -1023410174, i32 -1023410173, i32 -1023410172, i32 -1023410171, i32 -1023410170, i32 -1023410169, i32 -1023410168, i32 -1023410167, i32 -1023410166, i32 -1023410165, i32 -1023410164, i32 -754974707, i32 -1023410162, i32 -1023410161, i32 -1156841472, i32 -1022623743, i32 -1022623742, i32 -1022623741, i32 -754188284], align 16
@textdomain.default_str = internal constant [9 x i8] c"messages\00", align 1
@bindtextdomain.dir = internal constant [2 x i8] c"/\00", align 1
@.str285 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@digits286 = internal unnamed_addr constant [256 x i8] calign 16
@.str287 = private unnamed_addr constant [9 x i8] c"\00\01\02\04\07\03\06\05\00", align 1
@__pS0 = constant x86_fp80 0xK3FFCAAAAAAAAAAAAAAA8, align 16
@__pS1 = constant x86_fp80 0xKBFFDD5271B6699B48BFA, align 16
@__pS2 = constant x86_fp80 0xK3FFDBCF67CA9E9F669CF, align 16
@__pS3 = constant x86_fp80 0xKBFFC8B7BAA3D15F9830D, align 16
@__pS4 = constant x86_fp80 0xK3FF992154B093A3BFF1C, align 16
@__pS5 = constant x86_fp80 0xKBFF2E5DD76401964508C, align 16
@__pS6 = constant x86_fp80 0xKBFEDEE69C5B0FDB76951, align 16
@__qS1 = constant x86_fp80 0xKC000BCAA2159C01436A0, align 16
@__qS2 = constant x86_fp80 0xK4000D17A73D1E1564C29, align 16
@__qS3 = constant x86_fp80 0xKBFFFD767E411C9CF4C2C, align 16
@__qS4 = constant x86_fp80 0xK3FFDC809C0DFB9B0D0B7, align 16
@__qS5 = constant x86_fp80 0xKBFFA80C3A2197C8CED57, align 16
@__atanhi = constant [4 x x86_fp80] [x86_fp80 0xK3FFDED63382B0DDA7B45, x86_fp80 0xK3FFEC90FDAA22168C235, x86_fp80 0xK3FFEFB985E940FB4D900, x86_fp80 0xK3FFFC90FDAA22168C235], align 16
@__atanlo = constant [4 x x86_fp80] [x86_fp80 0xK3FBCDFC88BD978751A07, x86_fp80 0xKBFBCECE675D1FC8F8CBB, x86_fp80 0xK3FBDF10F5E197793C283, x86_fp80 0xKBFBDECE675D1FC8F8CBB], align 16
@__aT = constant [13 x x86_fp80] [x86_fp80 0xK3FFDAAAAAAAAAAAAAA9F, x86_fp80 0xKBFFCCCCCCCCCCCCC62BC, x86_fp80 0xK3FFC9249249248B81E3F, x86_fp80 0xKBFFBE38E38E3316F3DE5, x86_fp80 0xK3FFBBA2E8B8DC280726A, x86_fp80 0xKBFFB9D89D5B4C6847EC4, x86_fp80 0xK3FFB8888461D3099C677, x86_fp80 0xKBFFAF0E8EE0F5328DC29, x86_fp80 0xK3FFAD73EA84D24BAE54A, x86_fp80 0xKBFFAC08FA381DCD9213A, x86_fp80 0xK3FFAA54A26F4095F2A3A, x86_fp80 0xKBFF9EEA2D8D059EF3AD6, x86_fp80 0xK3FF8CC82292AB894B051], align 16
@__pi_lo = constant x86_fp80 0xKBFBEECE675D1FC8F8CBB, align 16
@wctype.names = internal constant [73 x i8] c"alnum\00alpha\00blank\00cntrl\00digit\00graph\00lower\00print\00punct\00space\00upper\00xdigit\00", align 16
@ranges = internal constant <{ { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 } }> <{ { i8, i8, i8, i8 } { i8 47, i8 0, i8 -32, i8 0 }, { i8, i8, i8, i8 } { i8 64, i8 0, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 96, i8 0, i8 80, i8 0 }, { i8, i8, i8, i8 } { i8 126, i8 0, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 -89, i8 0, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 -87, i8 0, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -84, i8 0, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -82, i8 0, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -79, i8 0, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -73, i8 0, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -69, i8 0, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -65, i8 0, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -41, i8 0, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -9, i8 0, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 126, i8 3, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -121, i8 3, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -10, i8 3, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 95, i8 5, i8 80, i8 0 }, { i8, i8, i8, i8 } { i8 -118, i8 5, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -66, i8 5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -64, i8 5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -61, i8 5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -58, i8 5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -12, i8 5, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 10, i8 6, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 13, i8 6, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 27, i8 6, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 31, i8 6, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 109, i8 6, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 -44, i8 6, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 13, i8 7, i8 -48, i8 0 }, { i8, i8, i8, i8 } { i8 -7, i8 7, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 101, i8 9, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 112, i8 9, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -12, i8 13, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 79, i8 14, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 91, i8 14, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 18, i8 15, i8 -32, i8 0 }, { i8, i8, i8, i8 } { i8 61, i8 15, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 -123, i8 15, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -44, i8 15, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 79, i8 16, i8 80, i8 0 }, { i8, i8, i8, i8 } { i8 -5, i8 16, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 104, i8 19, i8 112, i8 0 }, { i8, i8, i8, i8 } { i8 110, i8 22, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -128, i8 22, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -100, i8 22, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -19, i8 22, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 54, i8 23, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -42, i8 23, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -38, i8 23, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 10, i8 24, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 14, i8 24, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 69, i8 25, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 -33, i8 25, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 31, i8 26, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 96, i8 27, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 63, i8 28, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 127, i8 28, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 39, i8 32, i8 112, i8 1 }, { i8, i8, i8, i8 } { i8 94, i8 32, i8 -32, i8 2 }, { i8, i8, i8, i8 } { i8 126, i8 32, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 -114, i8 32, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 68, i8 33, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 75, i8 33, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 95, i8 36, i8 -16, i8 44 }, { i8, i8, i8, i8 } { i8 117, i8 39, i8 80, i8 39 }, { i8, i8, i8, i8 } { i8 -1, i8 43, i8 -80, i8 70 }, { i8, i8, i8, i8 } { i8 -4, i8 44, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 -1, i8 44, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 127, i8 46, i8 -16, i8 7 }, { i8, i8, i8, i8 } { i8 3, i8 48, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 32, i8 48, i8 -128, i8 1 }, { i8, i8, i8, i8 } { i8 48, i8 48, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 61, i8 48, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -96, i8 48, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -5, i8 48, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 15, i8 -90, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 119, i8 -88, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 -49, i8 -88, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 47, i8 -87, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 95, i8 -87, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 41, i8 -5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 63, i8 -3, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 25, i8 -2, i8 -112, i8 0 }, { i8, i8, i8, i8 } { i8 82, i8 -2, i8 32, i8 2 }, { i8, i8, i8, i8 } { i8 102, i8 -2, i8 32, i8 1 }, { i8, i8, i8, i8 } { i8 104, i8 -2, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 107, i8 -2, i8 16, i8 0 }, { i8, i8, i8, i8 } { i8 3, i8 -1, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 15, i8 -1, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 32, i8 -1, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 61, i8 -1, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 63, i8 -1, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 101, i8 -1, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 -30, i8 -1, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -20, i8 -1, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 1, i8 1, i8 17, i8 0 }, { i8, i8, i8, i8 } { i8 -97, i8 3, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 -48, i8 3, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 31, i8 9, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 63, i8 9, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 88, i8 10, i8 -127, i8 0 }, { i8, i8, i8, i8 } { i8 115, i8 36, i8 49, i8 0 }, { i8, i8, i8, i8 } { i8 -63, i8 -42, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 -37, i8 -42, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 -5, i8 -42, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 21, i8 -41, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 53, i8 -41, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 79, i8 -41, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 111, i8 -41, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 -119, i8 -41, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 -87, i8 -41, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 -61, i8 -41, i8 1, i8 0 } }>, align 16
@iswspace.spaces = internal constant [22 x i32] [i32 32, i32 9, i32 10, i32 13, i32 11, i32 12, i32 133, i32 8192, i32 8193, i32 8194, i32 8195, i32 8196, i32 8197, i32 8198, i32 8200, i32 8201, i32 8202, i32 8232, i32 8233, i32 8287, i32 12288, i32 0], align 16
@qR8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float 0x3FB2C00000000000, float 0x4027895260000000, float 0x40816D6320000000, float 0x40C14D9940000000, float 0x40E212D400000000], align 16
@qS8 = internal unnamed_addr constant [6 x float] [float 0x406478D540000000, float 0x40BFA25840000000, float 0x4101665260000000, float 0x412883DA80000000, float 0x4129A66B20000000, float 0xC114FD6D20000000], align 16
@qR5 = internal unnamed_addr constant [6 x float] [float 0x3DB43D8F20000000, float 0x3FB2BFFFE0000000, float 0x401757B0C0000000, float 0x4060E39200000000, float 0x40900CF9A0000000, float 0x409F17E960000000], align 16
@qS5 = internal unnamed_addr constant [6 x float] [float 0x4054B1B400000000, float 0x40A03BA0E0000000, float 0x40D267D280000000, float 0x40EBB5E3A0000000, float 0x40E1911820000000, float 0xC0B4EA57C0000000], align 16
@qR3 = internal unnamed_addr constant [6 x float] [float 0x3E32CD0360000000, float 0x3FB2BFEE00000000, float 0x400AC0FC60000000, float 0x40454F98A0000000, float 0x406559DBE0000000, float 0x4064D77C80000000], align 16
@qS3 = internal unnamed_addr constant [6 x float] [float 0x40486122C0000000, float 0x40862D8380000000, float 0x40ACF04BE0000000, float 0x40B93C6CE0000000, float 0x40A3A8AAE0000000, float 0xC062A7EB20000000], align 16
@qR2 = internal unnamed_addr constant [6 x float] [float 0x3E84313B60000000, float 0x3FB2BEC540000000, float 0x3FFFF897E0000000, float 0x402CFDBFA0000000, float 0x403FAA8E20000000, float 0x403040B180000000], align 16
@qS2 = internal unnamed_addr constant [6 x float] [float 0x403E5D9700000000, float 0x4070D591E0000000, float 0x408A664520000000, float 0x408B977CA0000000, float 0x406A955300000000, float 0xC0153E6B00000000], align 16
@pR8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float -7.031250e-02, float 0xC02029D0C0000000, float 0xC070110280000000, float 0xC0A36A6EC0000000, float 0xC0B4850B40000000], align 16
@pS8 = internal unnamed_addr constant [5 x float] [float 0x405D223300000000, float 0x40ADF37D60000000, float 0x40E3D2BB60000000, float 0x40FC810F80000000, float 0x40E7417740000000], align 16
@pR5 = internal unnamed_addr constant [6 x float] [float 0xBDA918B140000000, float 0xBFB1FFFFE0000000, float 0xC010A37100000000, float 0xC050EB2F60000000, float 0xC074B3B360000000, float 0xC075A6EF20000000], align 16
@pS5 = internal unnamed_addr constant [5 x float] [float 0x404E608100000000, float 0x40906D0260000000, float 0x40B75AF880000000, float 0x40C2CCB900000000, float 0x40A2CC1DC0000000], align 16
@pR3 = internal unnamed_addr constant [6 x float] [float 0xBE25E10360000000, float 0xBFB1FFF700000000, float 0xC00345B2A0000000, float 0xC035F74A40000000, float 0xC04D0A2240000000, float 0xC03F72ACA0000000], align 16
@pS3 = internal unnamed_addr constant [5 x float] [float 0x4041ED9280000000, float 0x4076983940000000, float 0x4092A66E60000000, float 0x40919FFCC0000000, float 0x4065B29700000000], align 16
@pR2 = internal unnamed_addr constant [6 x float] [float 0xBE77D316E0000000, float 0xBFB1FF6240000000, float 0xBFF7363980000000, float 0xC01E8AF3E0000000, float 0xC02662E6C0000000, float 0xC009DE81A0000000], align 16
@pS2 = internal unnamed_addr constant [5 x float] [float 0x40363865A0000000, float 0x4061069E00000000, float 0x4070E78640000000, float 0x40633C0340000000, float 0x402D50B340000000], align 16
@qR8364 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0x3FB2BFFFFFFFFE2C, double 0x402789525BB334D6, double 0x40816D6315301825, double 0x40C14D993E18F46D, double 0x40E212D40E901566], align 16
@qS8365 = internal unnamed_addr constant [6 x double] [double 0x406478D5365B39BC, double 0x40BFA2584E6B0563, double 0x4101665254D38C3F, double 0x412883DA83A52B43, double 0x4129A66B28DE0B3D, double 0xC114FD6D2C9530C5], align 16
@qR5366 = internal unnamed_addr constant [6 x double] [double 0x3DB43D8F29CC8CD9, double 0x3FB2BFFFD172B04C, double 0x401757B0B9953DD3, double 0x4060E3920A8788E9, double 0x40900CF99DC8C481, double 0x409F17E953C6E3A6], align 16
@qS5367 = internal unnamed_addr constant [6 x double] [double 0x4054B1B3FB5E1543, double 0x40A03BA0DA21C0CE, double 0x40D267D27B591E6D, double 0x40EBB5E397E02372, double 0x40E191181F7A54A0, double 0xC0B4EA57BEDBC609], align 16
@qR3368 = internal unnamed_addr constant [6 x double] [double 0x3E32CD036ADECB82, double 0x3FB2BFEE0E8D0842, double 0x400AC0FC61149CF5, double 0x40454F98962DAEDD, double 0x406559DBE25EFD1F, double 0x4064D77C81FA21E0], align 16
@qS3369 = internal unnamed_addr constant [6 x double] [double 0x40486122BFE343A6, double 0x40862D8386544EB3, double 0x40ACF04BE44DFC63, double 0x40B93C6CD7C76A28, double 0x40A3A8AAD94FB1C0, double 0xC062A7EB201CF40F], align 16
@qR2370 = internal unnamed_addr constant [6 x double] [double 0x3E84313B54F76BDB, double 0x3FB2BEC53E883E34, double 0x3FFFF897E727779C, double 0x402CFDBFAAF96FE5, double 0x403FAA8E29FBDC4A, double 0x403040B171814BB4], align 16
@qS2371 = internal unnamed_addr constant [6 x double] [double 0x403E5D96F7C07AED, double 0x4070D591E4D14B40, double 0x408A664522B3BF22, double 0x408B977C9C5CC214, double 0x406A95530E001365, double 0xC0153E6AF8B32931], align 16
@pR8372 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0xBFB1FFFFFFFFFD32, double 0xC02029D0B44FA779, double 0xC07011027B19E863, double 0xC0A36A6ECD4DCAFC, double 0xC0B4850B36CC643D], align 16
@pS8373 = internal unnamed_addr constant [5 x double] [double 0x405D223307A96751, double 0x40ADF37D50596938, double 0x40E3D2BB6EB6B05F, double 0x40FC810F8F9FA9BD, double 0x40E741774F2C49DC], align 16
@pR5374 = internal unnamed_addr constant [6 x double] [double 0xBDA918B147E495CC, double 0xBFB1FFFFE69AFBC6, double 0xC010A370F90C6BBF, double 0xC050EB2F5A7D1783, double 0xC074B3B36742CC63, double 0xC075A6EF28A38BD7], align 16
@pS5375 = internal unnamed_addr constant [5 x double] [double 0x404E60810C98C5DE, double 0x40906D025C7E2864, double 0x40B75AF88FBE1D60, double 0x40C2CCB8FA76FA38, double 0x40A2CC1DC70BE864], align 16
@pR3376 = internal unnamed_addr constant [6 x double] [double 0xBE25E1036FE1AA86, double 0xBFB1FFF6F7C0E24B, double 0xC00345B2AEA48074, double 0xC035F74A4CB94E14, double 0xC04D0A22420A1A45, double 0xC03F72ACA892D80F], align 16
@pS3377 = internal unnamed_addr constant [5 x double] [double 0x4041ED9284077DD3, double 0x40769839464A7C0E, double 0x4092A66E6D1061D6, double 0x40919FFCB8C39B7E, double 0x4065B296FC379081], align 16
@pR2378 = internal unnamed_addr constant [6 x double] [double 0xBE77D316E927026D, double 0xBFB1FF62495E1E42, double 0xBFF736398A24A843, double 0xC01E8AF3EDAFA7F3, double 0xC02662E6C5246303, double 0xC009DE81AF8FE70F], align 16
@pS2379 = internal unnamed_addr constant [5 x double] [double 0x40363865908B5959, double 0x4061069E0EE8878F, double 0x4070E78642EA079B, double 0x40633C033AB6FAFF, double 0x402D50B344391809], align 16
@qr8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float 0xBFBA400000000000, float 0xC0304591A0000000, float 0xC087BCD060000000, float 0xC0C724E740000000, float 0xC0E7A6D060000000], align 16
@qs8 = internal unnamed_addr constant [6 x float] [float 0x40642CA6E0000000, float 0x40BE9162E0000000, float 0x4100579AC0000000, float 0x4125F65380000000, float 0x412457D280000000, float 0xC111F96900000000], align 16
@qr2 = internal unnamed_addr constant [6 x float] [float 0xBE87F12640000000, float 0xBFBA3E8EA0000000, float 0xC006048460000000, float 0xC033A9E2C0000000, float 0xC04529A3E0000000, float 0xC0355F3640000000], align 16
@qs2 = internal unnamed_addr constant [6 x float] [float 0x403D888A80000000, float 0x406F9F68E0000000, float 0x4087AC05C0000000, float 0x40871B2540000000, float 0x40637E5E40000000, float 0xC013D686E0000000], align 16
@pr8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float 1.171875e-01, float 0x402A7A9D40000000, float 0x4079C0D460000000, float 0x40AE457DA0000000, float 0x40BEEA7AC0000000], align 16
@ps8 = internal unnamed_addr constant [5 x float] [float 0x405C8D4580000000, float 0x40AC85DCA0000000, float 0x40E20B86A0000000, float 0x40F7D42CC0000000, float 0x40DE151160000000], align 16
@pr5 = internal unnamed_addr constant [6 x float] [float 0x3DAD0667E0000000, float 0x3FBDFFFFE0000000, float 0x401B360460000000, float 0x405B13B940000000, float 0x40802D16E0000000, float 0x408085B8C0000000], align 16
@ps5 = internal unnamed_addr constant [5 x float] [float 0x404DA3EAA0000000, float 0x408EFB3620000000, float 0x40B4E94460000000, float 0x40BEA4B0C0000000, float 0x4097803000000000], align 16
@pr3 = internal unnamed_addr constant [6 x float] [float 0x3E29FC21A0000000, float 0x3FBDFFF560000000, float 0x400F76BCE0000000, float 0x40418F48A0000000, float 0x4056C38540000000, float 0x4048478F80000000], align 16
@ps3 = internal unnamed_addr constant [5 x float] [float 0x40416549A0000000, float 0x40750C3300000000, float 0x40905B7C60000000, float 0x408BD67DA0000000, float 0x4059F26D80000000], align 16
@pr2 = internal unnamed_addr constant [6 x float] [float 0x3E7CE9D500000000, float 0x3FBDFF42C0000000, float 0x4002F2B800000000, float 0x40287C3780000000, float 0x4031B1A820000000, float 0x40144B49A0000000], align 16
@ps2 = internal unnamed_addr constant [5 x float] [float 0x40356FBD80000000, float 0x405F529320000000, float 0x406D08D8E0000000, float 0x405D6B7AE0000000, float 0x4020BAB200000000], align 16
@qr8380 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0xBFBA3FFFFFFFFDF3, double 0xC0304591A26779F7, double 0xC087BCD053E4B576, double 0xC0C724E740F87415, double 0xC0E7A6D065D09C6A], align 16
@qs8381 = internal unnamed_addr constant [6 x double] [double 0x40642CA6DE5BCDE5, double 0x40BE9162D0D88419, double 0x4100579AB0B75E98, double 0x4125F65372869C19, double 0x412457D27719AD5C, double 0xC111F9690EA5AA18], align 16
@qr5 = internal unnamed_addr constant [6 x double] [double 0xBDB6FA431AA1A098, double 0xBFBA3FFFCB597FEF, double 0xC0201CE6CA03AD4B, double 0xC066F56D6CA7B9B0, double 0xC09574C66931734F, double 0xC0A468E388FDA79D], align 16
@qs5 = internal unnamed_addr constant [6 x double] [double 0x405451B2FF5A11B2, double 0x409F1F31E77BF839, double 0x40D10F1F0D64CE29, double 0x40E8576DAABAD197, double 0x40DB4B04CF7C364B, double 0xC0B26F2EFCFFA004], align 16
@qr3 = internal unnamed_addr constant [6 x double] [double 0xBE35CFA9D38FC84F, double 0xBFBA3FEB51AEED54, double 0xC01270C23302D9FF, double 0xC04CEC71C25D16DA, double 0xC06C87D34718D55F, double 0xC06B66B95F5C1BF6], align 16
@qs3 = internal unnamed_addr constant [6 x double] [double 0x4047D523CCD367E4, double 0x40850EEBC031EE3E, double 0x40AA684E448E7C9A, double 0x40B5ABBAA61D54A6, double 0x409DBC7A0DD4DF4B, double 0xC060E670290A311F], align 16
@qr2382 = internal unnamed_addr constant [6 x double] [double 0xBE87F12644C626D2, double 0xBFBA3E8E9148B010, double 0xC006048469BB4EDA, double 0xC033A9E2C168907F, double 0xC04529A3DE104AAA, double 0xC0355F3639CF6E52], align 16
@qs2383 = internal unnamed_addr constant [6 x double] [double 0x403D888A78AE64FF, double 0x406F9F68DB821CBA, double 0x4087AC05CE49A0F7, double 0x40871B2548D4C029, double 0x40637E5E3C3ED8D4, double 0xC013D686E71BE86B], align 16
@pr8384 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0x3FBDFFFFFFFFFCCE, double 0x402A7A9D357F7FCE, double 0x4079C0D4652EA590, double 0x40AE457DA3A532CC, double 0x40BEEA7AC32782DD], align 16
@ps8385 = internal unnamed_addr constant [5 x double] [double 0x405C8D458E656CAC, double 0x40AC85DC964D274F, double 0x40E20B8697C5BB7F, double 0x40F7D42CB28F17BB, double 0x40DE1511697A0B2D], align 16
@pr5386 = internal unnamed_addr constant [6 x double] [double 0x3DAD0667DAE1CA7D, double 0x3FBDFFFFE2C10043, double 0x401B36046E6315E3, double 0x405B13B9452602ED, double 0x40802D16D052D649, double 0x408085B8BB7E0CB7], align 16
@ps5387 = internal unnamed_addr constant [5 x double] [double 0x404DA3EAA8AF633D, double 0x408EFB361B066701, double 0x40B4E9445706B6FB, double 0x40BEA4B0B8A5BB15, double 0x40978030036F5E51], align 16
@pr3388 = internal unnamed_addr constant [6 x double] [double 0x3E29FC21A7AD9EDD, double 0x3FBDFFF55B21D17B, double 0x400F76BCE85EAD8A, double 0x40418F489DA6D129, double 0x4056C3854D2C1837, double 0x4048478F8EA83EE5], align 16
@ps3389 = internal unnamed_addr constant [5 x double] [double 0x40416549A134069C, double 0x40750C3307F1A75F, double 0x40905B7C5037D523, double 0x408BD67DA32E31E9, double 0x4059F26D7C2EED53], align 16
@pr2390 = internal unnamed_addr constant [6 x double] [double 0x3E7CE9D4F65544F4, double 0x3FBDFF42BE760D83, double 0x4002F2B7F98FAEC0, double 0x40287C377F71A964, double 0x4031B1A8177F8EE2, double 0x40144B49A574C1FE], align 16
@ps2391 = internal unnamed_addr constant [5 x double] [double 0x40356FBD8AD5ECDC, double 0x405F529314F92CD5, double 0x406D08D8D5A2DBD9, double 0x405D6B7ADA1884A9, double 0x4020BAB1F44E5192], align 16
@.str392 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@c_numeric = internal constant [3 x i8] c".\00\00", align 1
@c_time = internal constant [314 x i8] c"Sun\00Mon\00Tue\00Wed\00Thu\00Fri\00Sat\00Sunday\00Monday\00Tuesday\00Wednesday\00Thursday\00Friday\00Saturday\00Jan\00Feb\00Mar\00Apr\00May\00Jun\00Jul\00Aug\00Sep\00Oct\00Nov\00Dec\00January\00February\00March\00April\00May\00June\00July\00August\00September\00October\00November\00December\00AM\00PM\00%a %b %e %T %Y\00%m/%d/%y\00%H:%M:%S\00%I:%M:%S %p\00\00%m/%d/%y\000123456789%a %b %e %T %Y\00%H:%M:%S\00", align 16
@.str1393 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@c_messages = internal constant [12 x i8] c"^[yY]\00^[nN]\00", align 1
@__libc = common global %struct.__libc zeroinitializer, align 8
@__simple_malloc.cur = internal unnamed_addr global i64 0, align 8
@__simple_malloc.brk = internal unnamed_addr global i64 0, align 8
@localeconv.posix_lconv = internal unnamed_addr global %struct.lconv* null, align 8
@.str408 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str1409 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str2410 = private unnamed_addr constant [2 x i8] c"\FF\00", align 1
@localtime.tm = internal global %struct.tm zeroinitializer, align 8
@S = internal constant [4 x x86_fp80] [x86_fp80 0xKC003D19BBDC51FC97CE4, x86_fp80 0xK4006C19E716F0D100AF3, x86_fp80 0xKC007D64E5D060F554D7D, x86_fp80 0xK00000000000000000000], align 16
@R = internal constant [4 x x86_fp80] [x86_fp80 0xK3FF6817B7763F9226EF4, x86_fp80 0xKBFFEB84BDE8F1AF915FD, x86_fp80 0xK4002AC6FA53C4F8D8B96, x86_fp80 0xKC0048EDEE8AEB4E38932], align 16
@P415 = internal constant [7 x x86_fp80] [x86_fp80 0xK3FFDFFCED7B9CE22FE72, x86_fp80 0xK4002AC472C710E34B778, x86_fp80 0xK40059B5796F8C751EA8B, x86_fp80 0xK4007801A67FB6A02FEAF, x86_fp80 0xK4007D40251FFF2526B5A, x86_fp80 0xK4007AB4A87049F7639CE, x86_fp80 0xK4005D6F3532E740B1B39], align 16
@Q416 = internal constant [7 x x86_fp80] [x86_fp80 0xK4003BBD693D5BF262F3A, x86_fp80 0xK4006C2712D7B031A13C8, x86_fp80 0xK4008C2E1D9331993449D, x86_fp80 0xK4009D3658301574E5B65, x86_fp80 0xK4009FDD8C0433BD2A65D, x86_fp80 0xK40099EB21CF5FFEA3B21, x86_fp80 0xK4007A1367E62D708545C], align 16
@S419 = internal constant [4 x x86_fp80] [x86_fp80 0xKC003D19BBDC51FC97CE4, x86_fp80 0xK4006C19E716F0D100AF3, x86_fp80 0xKC007D64E5D060F554D7D, x86_fp80 0xK00000000000000000000], align 16
@R420 = internal constant [4 x x86_fp80] [x86_fp80 0xK3FF6817B7763F9226EF4, x86_fp80 0xKBFFEB84BDE8F1AF915FD, x86_fp80 0xK4002AC6FA53C4F8D8B96, x86_fp80 0xKC0048EDEE8AEB4E38932], align 16
@P421 = internal constant [7 x x86_fp80] [x86_fp80 0xK3FF0BDE04B159CAE51B9, x86_fp80 0xK3FFDFF40C507F0D419CF, x86_fp80 0xK4001D284FA37A7D29942, x86_fp80 0xK4003EF4B9C5C65CE4ADD, x86_fp80 0xK4004F3CC75C3619A8445, x86_fp80 0xK4004E473ACBA3CD081AB, x86_fp80 0xK4003A051016CCC184CBF], align 16
@Q422 = internal constant [6 x x86_fp80] [x86_fp80 0xK4002F101ACF481F1B8B7, x86_fp80 0xK4005A6185A9109A4BC31, x86_fp80 0xK4006DDC32C87E7DAAEEC, x86_fp80 0xK40079A8CA2EE48452BDE, x86_fp80 0xK4006D86D89F247033120, x86_fp80 0xK4004F079822332247347], align 16
@S427 = internal constant [4 x x86_fp80] [x86_fp80 0xKC003D19BBDC51FC97CE4, x86_fp80 0xK4006C19E716F0D100AF3, x86_fp80 0xKC007D64E5D060F554D7D, x86_fp80 0xK00000000000000000000], align 16
@R428 = internal constant [4 x x86_fp80] [x86_fp80 0xK3FF6817B7763F9226EF4, x86_fp80 0xKBFFEB84BDE8F1AF915FD, x86_fp80 0xK4002AC6FA53C4F8D8B96, x86_fp80 0xKC0048EDEE8AEB4E38932], align 16
@P429 = internal constant [7 x x86_fp80] [x86_fp80 0xK3FFDFFCED7B9CE22FE72, x86_fp80 0xK4002AC472C710E34B778, x86_fp80 0xK40059B5796F8C751EA8B, x86_fp80 0xK4007801A67FB6A02FEAF, x86_fp80 0xK4007D40251FFF2526B5A, x86_fp80 0xK4007AB4A87049F7639CE, x86_fp80 0xK4005D6F3532E740B1B39], align 16
@Q430 = internal constant [7 x x86_fp80] [x86_fp80 0xK4003BBD693D5BF262F3A, x86_fp80 0xK4006C2712D7B031A13C8, x86_fp80 0xK4008C2E1D9331993449D, x86_fp80 0xK4009D3658301574E5B65, x86_fp80 0xK4009FDD8C0433BD2A65D, x86_fp80 0xK40099EB21CF5FFEA3B21, x86_fp80 0xK4007A1367E62D708545C], align 16
@S433 = internal constant [4 x x86_fp80] [x86_fp80 0xKC003D19BBDC51FC97CE4, x86_fp80 0xK4006C19E716F0D100AF3, x86_fp80 0xKC007D64E5D060F554D7D, x86_fp80 0xK00000000000000000000], align 16
@R434 = internal constant [4 x x86_fp80] [x86_fp80 0xK3FF6817B7763F9226EF4, x86_fp80 0xKBFFEB84BDE8F1AF915FD, x86_fp80 0xK4002AC6FA53C4F8D8B96, x86_fp80 0xKC0048EDEE8AEB4E38932], align 16
@P435 = internal constant [7 x x86_fp80] [x86_fp80 0xK3FF0BDE04B159CAE51B9, x86_fp80 0xK3FFDFF40C507F0D419CF, x86_fp80 0xK4001D284FA37A7D29942, x86_fp80 0xK4003EF4B9C5C65CE4ADD, x86_fp80 0xK4004F3CC75C3619A8445, x86_fp80 0xK4004E473ACBA3CD081AB, x86_fp80 0xK4003A051016CCC184CBF], align 16
@Q436 = internal constant [6 x x86_fp80] [x86_fp80 0xK4002F101ACF481F1B8B7, x86_fp80 0xK4005A6185A9109A4BC31, x86_fp80 0xK4006DDC32C87E7DAAEEC, x86_fp80 0xK40079A8CA2EE48452BDE, x86_fp80 0xK4006D86D89F247033120, x86_fp80 0xK4004F079822332247347], align 16
@mal = internal global %struct.anon.254 zeroinitializer, align 8
@a_ctz_l.debruijn32 = internal unnamed_addr constant [32 x i8] c"\00\01\17\02\1D\18\13\03\1E\1B\19\0B\14\08\04\0D\1F\16\1C\12\1A\0A\07\0C\15\11\09\06\10\05\0F\0E", align 16
@init_malloc.init = internal global i32 0, align 4
@init_malloc.waiters = internal global i32 0, align 4
@mbrlen.internal = internal global i32 0, align 4
@mbrtowc.internal_state = internal global i32 0, align 4
@.str447 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str468 = private unnamed_addr constant [7 x i8] c"XXXXXX\00", align 1
@.str473 = private unnamed_addr constant [7 x i8] c"XXXXXX\00", align 1
@.str474 = private unnamed_addr constant [7 x i8] c"XXXXXX\00", align 1
@.str479 = private unnamed_addr constant [12 x i8] c"%*[^\0A]%*[\0A]\00", align 1
@.str1480 = private unnamed_addr constant [39 x i8] c" %n%*s%n %n%*s%n %n%*s%n %n%*s%n %d %d\00", align 1
@getmntent.linebuf = internal global [256 x i8] zeroinitializer, align 16
@getmntent.mnt = internal global %struct.mntent zeroinitializer, align 8
@.str2481 = private unnamed_addr constant [19 x i8] c"%s\09%s\09%s\09%s\09%d\09%d\0A\00", align 1
@zero = internal unnamed_addr constant [2 x x86_fp80] [x86_fp80 0xK00000000000000000000, x86_fp80 0xK80000000000000000000], align 16
@mq_notify.zeros = internal constant [32 x i8] zeroinitializer, align 16
@.str494 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str1495 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str508 = private unnamed_addr constant [10 x i8] c"/dev/ptmx\00", align 1
@.str1509 = private unnamed_addr constant [12 x i8] c"/dev/pts/%d\00", align 1
@.str522 = private unnamed_addr constant [3 x i8] c"rw\00", align 1
@.str1523 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str2524 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str3525 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@bp = internal unnamed_addr constant [2 x float] [float 1.000000e+00, float 1.500000e+00], align 4
@dp_l = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float 0x3EBA39FB80000000], align 4
@dp_h = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float 0x3FE2B80000000000], align 4
@A = internal unnamed_addr constant [33 x x86_fp80] [x86_fp80 0xK3FFF8000000000000000, x86_fp80 0xK3FFEFA83B2DB722A033A, x86_fp80 0xK3FFEF5257D152486CC2C, x86_fp80 0xK3FFEEFE4B99BDCDAF5CB, x86_fp80 0xK3FFEEAC0C6E7DD24392F, x86_fp80 0xK3FFEE5B906E77C8348A8, x86_fp80 0xK3FFEE0CCDEEC2A94E111, x86_fp80 0xK3FFEDBFBB797DAF23755, x86_fp80 0xK3FFED744FCCAD69D6AF4, x86_fp80 0xK3FFED2A81D91F12AE45A, x86_fp80 0xK3FFECE248C151F8480E4, x86_fp80 0xK3FFEC9B9BD866E2F27A3, x86_fp80 0xK3FFEC5672A115506DADD, x86_fp80 0xK3FFEC12C4CCA66709456, x86_fp80 0xK3FFEBD08A39F580C36BF, x86_fp80 0xK3FFEB8FBAF4762FB9EE9, x86_fp80 0xK3FFEB504F333F9DE6484, x86_fp80 0xK3FFEB123F581D2AC2590, x86_fp80 0xK3FFEAD583EEA42A14AC6, x86_fp80 0xK3FFEA9A15AB4EA7C0EF8, x86_fp80 0xK3FFEA5FED6A9B15138EA, x86_fp80 0xK3FFEA27043030C496819, x86_fp80 0xK3FFE9EF5326091A111AE, x86_fp80 0xK3FFE9B8D39B9D54E5539, x86_fp80 0xK3FFE9837F0518DB8A96F, x86_fp80 0xK3FFE94F4EFA8FEF70961, x86_fp80 0xK3FFE91C3D373AB11C336, x86_fp80 0xK3FFE8EA4398B45CD53C0, x86_fp80 0xK3FFE8B95C1E3EA8BD6E7, x86_fp80 0xK3FFE88980E8092DA8527, x86_fp80 0xK3FFE85AAC367CC487B15, x86_fp80 0xK3FFE82CD8698AC2BA1D7, x86_fp80 0xK3FFE8000000000000000], align 16
@B = internal unnamed_addr constant [17 x x86_fp80] [x86_fp80 0xK00000000000000000000, x86_fp80 0xK3FBDF73A18F5DB301F87, x86_fp80 0xKBFBCBF4A29323E46AC15, x86_fp80 0xK3FB9CB12A091BA667944, x86_fp80 0xK3FBCE69A2EE640B4FF78, x86_fp80 0xKBFBBEE53E3835069C895, x86_fp80 0xK3FBCF8AB432593767CDE, x86_fp80 0xKBFBDAEFDC09325E0A10C, x86_fp80 0xK3FBDB2FB1366EA957D3E, x86_fp80 0xK3FBD93015191EB345D89, x86_fp80 0xK3FBBE5EBFB10B88380D9, x86_fp80 0xKBFBDBEDDC1EC288C045D, x86_fp80 0xK3FBD8D5A46305C85EDED, x86_fp80 0xK3FBAFD6D8E0AE5AC9D82, x86_fp80 0xKBFB98373AF14EB586DFD, x86_fp80 0xKBFBCE8DA91CF7AACF938, x86_fp80 0xK00000000000000000000], align 16
@P528 = internal constant [4 x x86_fp80] [x86_fp80 0xK3FF4DA6AC6F4A8B7B804, x86_fp80 0xK3FFDFAE158C0CF027DE9, x86_fp80 0xK3FFFE00067C93722405A, x86_fp80 0xK3FFFB33387CA6B43CD99], align 16
@Q529 = internal constant [3 x x86_fp80] [x86_fp80 0xK4001A8003B33A4696307, x86_fp80 0xK40028666A51C62D7FEC2, x86_fp80 0xK40018666A5D7D072DA32], align 16
@twom10000530 = internal constant x86_fp80 0xK18EF8000000000000000, align 16
@R531 = internal constant [7 x x86_fp80] [x86_fp80 0xK3FEEFD2AEE1D530EA69B, x86_fp80 0xK3FF2A18259608E7EC746, x86_fp80 0xK3FF5AEC3FD6AADDA63B6, x86_fp80 0xK3FF89D955B7CFD99C104, x86_fp80 0xK3FFAE35846B8249DE05E, x86_fp80 0xK3FFCF5FDEFFC162C5D1D, x86_fp80 0xK3FFEB17217F7D1CF79AA], align 16
@bp532 = internal unnamed_addr constant [2 x double] [double 1.000000e+00, double 1.500000e+00], align 16
@dp_l533 = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double 0x3E4CFDEB43CFD006], align 16
@dp_h534 = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double 0x3FE2B80340000000], align 16
@idx = internal unnamed_addr global i32 0, align 4
@getprotoent.p = internal global %struct.protoent zeroinitializer, align 8
@getprotoent.aliases = internal global i8* null, align 8
@protos = internal constant [9 x [6 x i8]] [[6 x i8] c"\00ip\00\00\00", [6 x i8] c"\01icmp\00", [6 x i8] c"\02igmp\00", [6 x i8] c"\03ggp\00\00", [6 x i8] c"\06tcp\00\00", [6 x i8] c"\0Cpup\00\00", [6 x i8] c"\11udp\00\00", [6 x i8] c"\16idp\00\00", [6 x i8] c"\FFraw\00\00"], align 16
@.str541 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str1542 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str543 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str1544 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@funcs = internal unnamed_addr global %struct.atfork_funcs* null, align 8
@vmlock = internal global [2 x i32] zeroinitializer, align 4
@pthread_once.waiters = internal global i32 0, align 4
@ptsname.buf = internal global [22 x i8] zeroinitializer, align 16
@.str579 = private unnamed_addr constant [10 x i8] c"/dev/ptmx\00", align 1
@.str1580 = private unnamed_addr constant [12 x i8] c"/dev/pts/%d\00", align 1
@__putenv.oldenv = internal unnamed_addr global i8** null, align 8
@__env_map = common global i8** null, align 8
@qsort.p = private unnamed_addr constant [2 x i64] [i64 1, i64 0], align 16
@a_ctz_l.debruijn32583 = internal unnamed_addr constant [32 x i8] c"\00\01\17\02\1D\18\13\03\1E\1B\19\0B\14\08\04\0D\1F\16\1C\12\1A\0A\07\0C\15\11\09\06\10\05\0F\0E", align 16
@seed = internal unnamed_addr global i32 0, align 4
@n = internal unnamed_addr global i32 31, align 4
@x = internal unnamed_addr global i32* getelementptr inbounds ([32 x i32]* @init, i64 0, i64 1), align 8
@j = internal unnamed_addr global i32 0, align 4
@i = internal unnamed_addr global i32 3, align 4
@init = internal global [32 x i32] [i32 0, i32 1481765933, i32 -1062105905, i32 -877267386, i32 -956092119, i32 812669700, i32 553475508, i32 -1702133896, i32 1344887256, i32 -1417066392, i32 1812158119, i32 -1999783937, i32 -1267215297, i32 1889772843, i32 -1461404943, i32 -41729540, i32 -1964937255, i32 1949118330, i32 220137366, i32 1979932169, i32 1089957932, i32 1873226917, i32 -1431813801, i32 1486937972, i32 -951450780, i32 -1370276668, i32 68706223, i32 1843638549, i32 212567592, i32 -263995484, i32 964776169, i32 928126551], align 16
@.str596 = private unnamed_addr constant [17 x i8] c"/proc/self/fd/%d\00", align 1
@tre_error_messages = internal constant <{ [232 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }> <{ [232 x i8] c"No error\00No match\00Invalid regexp\00Unknown collating element\00Unknown character class name\00Trailing backslash\00Invalid back reference\00Missing ']'\00Missing ')'\00Missing '}'\00Invalid contents of {}\00Invalid character range\00Out of memory\00XXX\00\00", i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0 }>, align 16
@.str601 = private unnamed_addr constant [14 x i8] c"Unknown error\00", align 1
@init_jk = internal unnamed_addr constant [4 x i32] [i32 3, i32 4, i32 4, i32 6], align 16
@ipio2 = internal unnamed_addr constant [690 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859, i32 4703257, i32 12806093, i32 14477321, i32 2786137, i32 12875403, i32 9837734, i32 14528324, i32 13719321, i32 343717, i32 16713477, i32 4161075, i32 15217346, i32 14569368, i32 3308987, i32 12795174, i32 15690526, i32 6224031, i32 3809077, i32 13300351, i32 1935345, i32 2199676, i32 8135786, i32 16412373, i32 7810352, i32 4406037, i32 12981429, i32 10295747, i32 12764333, i32 4279596, i32 6094860, i32 4619654, i32 2978275, i32 10143387, i32 25139, i32 8180404, i32 9938868, i32 13980983, i32 16137943, i32 1577123, i32 16545357, i32 2792804, i32 11261808, i32 16284771, i32 5746810, i32 15144215, i32 5654976, i32 14276155, i32 3703975, i32 13312804, i32 7834326, i32 2315354, i32 12132096, i32 1772273, i32 14667289, i32 16724383, i32 6954598, i32 6379417, i32 4717484, i32 14188414, i32 12018978, i32 9037874, i32 6340582, i32 13485295, i32 603756, i32 13909853, i32 14147094, i32 14564184, i32 9608158, i32 2630354, i32 15238696, i32 5069026, i32 3328710, i32 1499912, i32 13336032, i32 5292055, i32 10952179, i32 6021144, i32 3412782, i32 6427267, i32 84099, i32 6000373, i32 8368301, i32 15919390, i32 4409928, i32 13854480, i32 14212522, i32 4349870, i32 13525354, i32 10758154, i32 11835859, i32 15902214, i32 8353628, i32 8635043, i32 8928353, i32 7893898, i32 5934255, i32 12441455, i32 6530605, i32 13352948, i32 15696269, i32 6799654, i32 4573781, i32 3594698, i32 13805608, i32 9265602, i32 7850258, i32 1320452, i32 10176018, i32 12868036, i32 4507080, i32 9548365, i32 15931136, i32 11355092, i32 15026473, i32 1103357, i32 16563712, i32 13407262, i32 15650416, i32 16072211, i32 8450540, i32 12838835, i32 2685127, i32 9700755, i32 4092353, i32 11733294, i32 15942923, i32 10228360, i32 8069291, i32 10466606, i32 12751431, i32 3093115, i32 7165196, i32 9480050, i32 2090859, i32 9882417, i32 4855417, i32 14842177, i32 9035764, i32 9934056, i32 8709858, i32 9908633, i32 7073160, i32 3563359, i32 982459, i32 11835976, i32 7119975, i32 4354673, i32 3300749, i32 12064159, i32 648636, i32 2437517, i32 3765495, i32 1836336, i32 68621, i32 6817867, i32 5828140, i32 9480775, i32 190324, i32 2414269, i32 10911223, i32 7489646, i32 15668895, i32 10917006, i32 16159156, i32 5329873, i32 15862479, i32 3381280, i32 8276981, i32 6841266, i32 6242013, i32 220480, i32 8358277, i32 2708053, i32 12608567, i32 1103981, i32 3295282, i32 7687259, i32 13922638, i32 7230533, i32 12650763, i32 6944042, i32 13985300, i32 10290983, i32 5243997, i32 14367668, i32 12941034, i32 1571207, i32 8219465, i32 12199709, i32 2714006, i32 11324614, i32 5510317, i32 7004816, i32 9034120, i32 5272108, i32 12493828, i32 9701239, i32 7352563, i32 2620416, i32 11039210, i32 4833894, i32 4055140, i32 8641943, i32 9912227, i32 16618563, i32 9209357, i32 14565681, i32 10303890, i32 9203933, i32 15185687, i32 3923720, i32 2832149, i32 10518620, i32 9666650, i32 9572624, i32 14215183, i32 11501676, i32 4980699, i32 1019960, i32 7739481, i32 1418594, i32 12307297, i32 12159431, i32 12402704, i32 324306, i32 2585929, i32 16168683, i32 12264155, i32 11146250, i32 3090057, i32 7766884, i32 3357449, i32 1741838, i32 11156049, i32 12755741, i32 11464111, i32 1189468, i32 5096045, i32 10254893, i32 9918144, i32 8601347, i32 16183305, i32 9191467, i32 10039661, i32 504889, i32 1384460, i32 6013912, i32 12882677, i32 4959686, i32 10865230, i32 13449127, i32 3582438, i32 9736875, i32 6832861, i32 14574361, i32 15699062, i32 5409640, i32 3660796, i32 11248046, i32 3216863, i32 10595840, i32 14351116, i32 6704484, i32 11994605, i32 3171625, i32 12539479, i32 3866439, i32 12188010, i32 15974005, i32 14652200, i32 3178667, i32 16157798, i32 1428228, i32 402170, i32 1959129, i32 10793789, i32 9378647, i32 642358, i32 15286862, i32 10796563, i32 11871027, i32 1747696, i32 11035983, i32 10863058, i32 999179, i32 13465691, i32 7797027, i32 297851, i32 7477129, i32 5482182, i32 14839407, i32 60399, i32 5786267, i32 12049092, i32 12215978, i32 13619062, i32 1901265, i32 3010993, i32 12687756, i32 7843267, i32 14305414, i32 10509815, i32 16023750, i32 3141804, i32 10153181, i32 12344383, i32 7200464, i32 2082704, i32 11983658, i32 3810723, i32 10137344, i32 9655213, i32 284598, i32 11808041, i32 8290379, i32 10946522, i32 961142, i32 10574203, i32 2757142, i32 2996188, i32 16639482, i32 16702345, i32 16629385, i32 7108324, i32 16558342, i32 7372862, i32 1404549, i32 16746493, i32 474664, i32 3368801, i32 8788010, i32 15383885, i32 11528115, i32 7237007, i32 3762069, i32 6012721, i32 4773764, i32 1498928, i32 4402631, i32 3498277, i32 13529289, i32 12110640, i32 16608447, i32 10616996, i32 14969861, i32 10542426, i32 4681505, i32 13767266, i32 8674489, i32 4809072, i32 14702187, i32 86681, i32 3626320, i32 12047646, i32 12906803, i32 6254099, i32 14954589, i32 11087493, i32 12825117, i32 3551905, i32 10794760, i32 13939178, i32 2225942, i32 14969231, i32 7864103, i32 8389388, i32 2965645, i32 10538319, i32 10069280, i32 13869747, i32 679215, i32 4389300, i32 13359633, i32 13680253, i32 12704667, i32 12392363, i32 8495818, i32 6056456, i32 1529134, i32 5570599, i32 15733887, i32 8783841, i32 6556436, i32 9257366, i32 14597767, i32 2817498, i32 11937131, i32 3443067, i32 16708357, i32 10403769, i32 5204584, i32 11020874, i32 5948495, i32 12384301, i32 9984727, i32 9816052, i32 9260301, i32 10893856, i32 6248356, i32 11616020, i32 9779328, i32 73932, i32 8838513, i32 11984585, i32 16081087, i32 1140045, i32 7014145, i32 11317388, i32 13680818, i32 4740433, i32 981790, i32 12808853, i32 3868323, i32 3489984, i32 8117254, i32 13387232, i32 16394574, i32 13159126, i32 4322280, i32 14574716, i32 14181531, i32 3260121, i32 12818340, i32 13916279, i32 12968809, i32 1301232, i32 3947194, i32 4593734, i32 6255957, i32 16104914, i32 13013614, i32 6106796, i32 15549454, i32 4341276, i32 8897633, i32 15334697, i32 15980263, i32 13270050, i32 3510639, i32 12967944, i32 9295871, i32 14838382, i32 13041072, i32 12650643, i32 7626108, i32 11709803, i32 10317517, i32 8090174, i32 6951366, i32 11128823, i32 14644009, i32 12241333, i32 5308599, i32 897762, i32 2407028, i32 6323685, i32 9099380, i32 2888973, i32 792705, i32 9725566, i32 1452289, i32 7764639, i32 12516861, i32 15680854, i32 3571417, i32 1300972, i32 12171915, i32 16553924, i32 2598961, i32 12807921, i32 3589524, i32 5679320, i32 11905204, i32 969935, i32 2984210, i32 3430255, i32 9000492, i32 14929561, i32 12132566, i32 11165291, i32 10234430, i32 13393681, i32 4852733, i32 16512225, i32 7158670, i32 2918114, i32 8705257, i32 11121916, i32 13758191, i32 13186350, i32 6371631, i32 4464952, i32 13162779, i32 720001, i32 6966011, i32 14162991, i32 8696915, i32 9214286, i32 13378132, i32 14439722, i32 14075584, i32 9836811, i32 12087322, i32 6591849, i32 6314534, i32 15618623, i32 987519, i32 1160692, i32 16108540, i32 2997300, i32 15645748, i32 13393384, i32 6315741, i32 10194535, i32 15676306, i32 12064713, i32 10180705, i32 12343265, i32 13009745, i32 1064664, i32 4747741, i32 14490669, i32 10557615, i32 4598817, i32 14152537, i32 9992921, i32 12604574, i32 16418383, i32 16516694, i32 11434469, i32 3547785, i32 2272568, i32 14455655, i32 11200597, i32 3679874, i32 10217418, i32 10751313, i32 11613081, i32 972713, i32 4719977, i32 15774309, i32 10979455, i32 9915528, i32 3592697, i32 11768353, i32 4883067, i32 2215832, i32 14458688, i32 5588956, i32 3831009, i32 4385639, i32 14654974, i32 6280286, i32 10774395, i32 8039610, i32 10679893, i32 2328619, i32 5618241, i32 552537, i32 8792609, i32 8603449, i32 15131529, i32 13934309, i32 4258633, i32 15292159, i32 13242140, i32 9066949, i32 2882196, i32 12960211, i32 13616399, i32 11426523, i32 8832327, i32 6439813, i32 3900961, i32 9730348, i32 8872208, i32 8080426, i32 1715328, i32 1228611, i32 9447048, i32 8993912, i32 14992552, i32 8117221, i32 12729028, i32 15397926, i32 9070583, i32 12554765, i32 2859877, i32 11637565, i32 752829, i32 14438820, i32 6544679, i32 14541161, i32 1676442, i32 9775528, i32 2674280, i32 11857161, i32 2137924, i32 13277262, i32 6521456, i32 2325630, i32 3324175, i32 9368999, i32 15160852, i32 586017, i32 2792885, i32 5078639, i32 5314981, i32 11270581, i32 14081922, i32 6413718, i32 144918, i32 10435268, i32 10592899, i32 7204210, i32 8031545, i32 11122818, i32 6042219, i32 5973830, i32 15545344, i32 7798994, i32 5633276, i32 5069057, i32 8417760], align 16
@PIo2 = internal unnamed_addr constant [8 x double] [double 0x3FF921FB40000000, double 0x3E74442D00000000, double 0x3CF8469880000000, double 0x3B78CC5160000000, double 0x39F01B8380000000, double 0x387A252040000000, double 0x36E3822280000000, double 0x3569F31D00000000], align 16
@Zero608 = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@Zero609 = internal unnamed_addr constant [2 x x86_fp80] [x86_fp80 0xK00000000000000000000, x86_fp80 0xK80000000000000000000], align 16
@Zero612 = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double -0.000000e+00], align 16
@__res_state.res = internal global %struct.__res_state zeroinitializer, align 8
@TWO23 = internal unnamed_addr constant [2 x float] [float 8.388608e+06, float -8.388608e+06], align 4
@shift = internal unnamed_addr constant [2 x float] [float 0x43E0000000000000, float 0xC3E0000000000000], align 4
@zero615 = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@TWO52 = internal unnamed_addr constant [2 x double] [double 0x4330000000000000, double 0xC330000000000000], align 16
@__seed48 = global [7 x i16] [i16 0, i16 0, i16 0, i16 -6547, i16 -8468, i16 5, i16 11], align 2
@seed48.p = internal global [3 x i16] zeroinitializer, align 2
@once = internal global i32 0, align 4
@semtab = internal unnamed_addr global %struct.anon.550* null, align 8
@.str635 = private unnamed_addr constant [21 x i8] c"/dev/shm/%p-%p-%d-%d\00", align 1
@.str1636 = private unnamed_addr constant [9 x i8] c"/dev/shm\00", align 1
@lock637 = internal global i32 0, align 4
@.str652 = private unnamed_addr constant [8 x i8] c"C.UTF-8\00", align 1
@do_setxid.inf = private unnamed_addr constant %struct.rlimit { i64 -1, i64 -1 }, align 8
@.str661 = private unnamed_addr constant [9 x i8] c"/dev/shm\00", align 1
@.str664 = private unnamed_addr constant [9 x i8] c"/dev/shm\00", align 1
@sigisemptyset.zeroset = internal constant %struct.sigset_t.599 zeroinitializer, align 8
@__signgam = global i32 0, align 4
@invpio2hi680 = internal constant double 0x3FE45F306DC9C883, align 8
@invpio2lo681 = internal constant double 0xBC86B00000000000, align 8
@pio2_1thi682 = internal constant double 0xBD72E7B9676733AF, align 8
@pio2_1tlo683 = internal constant double 0x3A1C080000000000, align 8
@pio2_2thi684 = internal constant double 0x3AE8A2E03707344A, align 8
@pio2_2tlo685 = internal constant double 0x3780280000000000, align 8
@pio2_3thi686 = internal constant double 0xB8576B7ED8FBBACC, align 8
@pio2_3tlo687 = internal constant double 0xB4D9C00000000000, align 8
@S1hi = internal constant double 0xBFC5555555555555, align 8
@S1lo = internal constant double 0xBC65580000000000, align 8
@invpio2hi698 = internal constant double 0x3FE45F306DC9C883, align 8
@invpio2lo699 = internal constant double 0xBC86B00000000000, align 8
@pio2_1thi700 = internal constant double 0xBD72E7B9676733AF, align 8
@pio2_1tlo701 = internal constant double 0x3A1C080000000000, align 8
@pio2_2thi702 = internal constant double 0x3AE8A2E03707344A, align 8
@pio2_2tlo703 = internal constant double 0x3780280000000000, align 8
@pio2_3thi704 = internal constant double 0xB8576B7ED8FBBACC, align 8
@pio2_3tlo705 = internal constant double 0xB4D9C00000000000, align 8
@buf = internal global [8 x i8] zeroinitializer, align 1
@f726 = internal global { i32, i8*, i8*, i32 (%struct.__FILE_s*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i64, i32)*, i8*, i64, %struct.__FILE_s*, %struct.__FILE_s*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s*)*, i8* } { i32 5, i8* null, i8* null, i32 (%struct.__FILE_s*)* bitcast (i32 (%struct.__FILE_s.642*)* @__stdio_close to i32 (%struct.__FILE_s*)*), i8* null, i8* null, i8* null, i8* null, i64 (%struct.__FILE_s*, i8*, i64)* null, i64 (%struct.__FILE_s*, i8*, i64)* bitcast (i64 (%struct.__FILE_s.647*, i8*, i64)* @__stdio_write to i64 (%struct.__FILE_s*, i8*, i64)*), i64 (%struct.__FILE_s*, i64, i32)* bitcast (i64 (%struct.__FILE_s.646*, i64, i32)* @__stdio_seek to i64 (%struct.__FILE_s*, i64, i32)*), i8* getelementptr inbounds ([8 x i8]* @buf, i64 1, i64 0), i64 0, %struct.__FILE_s* null, %struct.__FILE_s* null, i32 2, i32 0, i64 0, i16 0, i8 0, i8 -1, i32 -1, i32 0, i8* null, i64 0, i32 (%struct.__FILE_s*)* null, i8* null }, align 8
@stderr = constant %struct.__FILE_s* bitcast ({ i32, i8*, i8*, i32 (%struct.__FILE_s*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i64, i32)*, i8*, i64, %struct.__FILE_s*, %struct.__FILE_s*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s*)*, i8* }* @f726 to %struct.__FILE_s*), align 8
@__stderr_used = constant %struct.__FILE_s* bitcast ({ i32, i8*, i8*, i32 (%struct.__FILE_s*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i8*, i64)*, i64 (%struct.__FILE_s*, i64, i32)*, i8*, i64, %struct.__FILE_s*, %struct.__FILE_s*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s*)*, i8* }* @f726 to %struct.__FILE_s*), align 8
@buf729 = internal global [1032 x i8] zeroinitializer, align 16
@f730 = internal global { i32, i8*, i8*, i32 (%struct.__FILE_s.69*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i64, i32)*, i8*, i64, %struct.__FILE_s.69*, %struct.__FILE_s.69*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.69*)*, i8* } { i32 9, i8* null, i8* null, i32 (%struct.__FILE_s.69*)* bitcast (i32 (%struct.__FILE_s.642*)* @__stdio_close to i32 (%struct.__FILE_s.69*)*), i8* null, i8* null, i8* null, i8* null, i64 (%struct.__FILE_s.69*, i8*, i64)* bitcast (i64 (%struct.__FILE_s.643*, i8*, i64)* @__stdio_read to i64 (%struct.__FILE_s.69*, i8*, i64)*), i64 (%struct.__FILE_s.69*, i8*, i64)* null, i64 (%struct.__FILE_s.69*, i64, i32)* bitcast (i64 (%struct.__FILE_s.646*, i64, i32)* @__stdio_seek to i64 (%struct.__FILE_s.69*, i64, i32)*), i8* getelementptr inbounds ([1032 x i8]* @buf729, i32 0, i64 8), i64 1024, %struct.__FILE_s.69* null, %struct.__FILE_s.69* null, i32 0, i32 0, i64 0, i16 0, i8 0, i8 0, i32 -1, i32 0, i8* null, i64 0, i32 (%struct.__FILE_s.69*)* null, i8* null }, align 8
@stdin = constant %struct.__FILE_s.69* bitcast ({ i32, i8*, i8*, i32 (%struct.__FILE_s.69*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i64, i32)*, i8*, i64, %struct.__FILE_s.69*, %struct.__FILE_s.69*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.69*)*, i8* }* @f730 to %struct.__FILE_s.69*), align 8
@__stdin_used = constant %struct.__FILE_s.69* bitcast ({ i32, i8*, i8*, i32 (%struct.__FILE_s.69*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i8*, i64)*, i64 (%struct.__FILE_s.69*, i64, i32)*, i8*, i64, %struct.__FILE_s.69*, %struct.__FILE_s.69*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.69*)*, i8* }* @f730 to %struct.__FILE_s.69*), align 8
@buf742 = internal global [1032 x i8] zeroinitializer, align 16
@f743 = internal global { i32, i8*, i8*, i32 (%struct.__FILE_s.642*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i64, i32)*, i8*, i64, %struct.__FILE_s.642*, %struct.__FILE_s.642*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.642*)*, i8* } { i32 5, i8* null, i8* null, i32 (%struct.__FILE_s.642*)* @__stdio_close, i8* null, i8* null, i8* null, i8* null, i64 (%struct.__FILE_s.642*, i8*, i64)* null, i64 (%struct.__FILE_s.642*, i8*, i64)* bitcast (i64 (%struct.__FILE_s.647*, i8*, i64)* @__stdout_write to i64 (%struct.__FILE_s.642*, i8*, i64)*), i64 (%struct.__FILE_s.642*, i64, i32)* bitcast (i64 (%struct.__FILE_s.646*, i64, i32)* @__stdio_seek to i64 (%struct.__FILE_s.642*, i64, i32)*), i8* getelementptr inbounds ([1032 x i8]* @buf742, i32 0, i64 8), i64 1024, %struct.__FILE_s.642* null, %struct.__FILE_s.642* null, i32 1, i32 0, i64 0, i16 0, i8 0, i8 10, i32 -1, i32 0, i8* null, i64 0, i32 (%struct.__FILE_s.642*)* null, i8* null }, align 8
@stdout = constant %struct.__FILE_s.642* bitcast ({ i32, i8*, i8*, i32 (%struct.__FILE_s.642*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i64, i32)*, i8*, i64, %struct.__FILE_s.642*, %struct.__FILE_s.642*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.642*)*, i8* }* @f743 to %struct.__FILE_s.642*), align 8
@__stdout_used = constant %struct.__FILE_s.642* bitcast ({ i32, i8*, i8*, i32 (%struct.__FILE_s.642*)*, i8*, i8*, i8*, i8*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i8*, i64)*, i64 (%struct.__FILE_s.642*, i64, i32)*, i8*, i64, %struct.__FILE_s.642*, %struct.__FILE_s.642*, i32, i32, i64, i16, i8, i8, i32, i32, i8*, i64, i32 (%struct.__FILE_s.642*)*, i8* }* @f743 to %struct.__FILE_s.642*), align 8
@errid = internal unnamed_addr constant [85 x i8] c"T!\22\19\0D\01\02\03\11K\1C\0C\10\04\0B\1D\12\1E'hnopqb \05\06\0F\13\14\15\1A\08\16\07($\17\18\09\0A\0E\1B\1F%#&*+<=>?CGJMXYZ[\5C]^_`acdefgijklrstyz{|\00", align 16
@errmsg = internal constant [1862 x i8] c"Illegal byte sequence\00Argument outside domain\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for defined data type\00No space left on device\00Out of memory\00Device or resource busy\00Interrupted system call\00Operation would block\00Illegal seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Connection timed out\00Connection refused\00Host is down\00No route to host\00Address already in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Too many levels of symbolic links\00Filename too long\00File table overflow\00Too many open files\00Bad file number\00No child processes\00Bad address\00File too large\00Too many links\00No record locks available\00Resource deadlock would occur\00Function not supported\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Timer expired\00Out of streams resources\00Link has been severed\00Protocol error\00Not a data message\00File descriptor in bad state\00Socket operation on non-socket\00Destination address required\00Message too long\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Operation not supported on socket\00Protocol family not supported\00Address family not supported by protocol\00Cannot assign requested address\00Network is down\00Network is unreachable\00Network dropped connection because of reset\00Software caused connection abort\00No buffer space available\00Socket is connected\00Socket is not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation now in progress\00Stale NFS file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00Invalid error number\00\00", align 16
@.str768 = private unnamed_addr constant [5 x i8] c"%02d\00", align 1
@.str1769 = private unnamed_addr constant [9 x i8] c"%m/%d/%y\00", align 1
@.str2770 = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str3771 = private unnamed_addr constant [9 x i8] c"%Y-%m-%d\00", align 1
@.str4 = private unnamed_addr constant [5 x i8] c"%04d\00", align 1
@.str5 = private unnamed_addr constant [5 x i8] c"%03d\00", align 1
@.str6 = private unnamed_addr constant [6 x i8] c"%H:%M\00", align 1
@.str7 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@.str8 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str9 = private unnamed_addr constant [10 x i8] c"%+.2d%.2d\00", align 1
@.str10 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str786 = private unnamed_addr constant [9 x i8] c"%m/%d/%y\00", align 1
@.str1787 = private unnamed_addr constant [6 x i8] c"%H:%M\00", align 1
@.str2788 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@strings = internal constant [502 x i8] c"Unknown signal\00Hangup\00Interrupt\00Quit\00Illegal instruction\00Trace/breakpoint trap\00Aborted\00Bus error\00Floating point exception\00Killed\00User defined signal 1\00Segmentation fault\00User defined signal 2\00Broken pipe\00Alarm clock\00Terminated\00Stack fault\00Child exited\00Continued\00Stopped (signal)\00Stopped\00Stopped (tty input)\00Stopped (tty output)\00Urgent I/O condition\00CPU time limit exceeded\00File size limit exceeded\00Virtual timer expired\00Profiling timer expired\00Window changed\00I/O possible\00Power failure\00Bad system call\00", align 16
@strtoimax.ip = private unnamed_addr constant { i64, i32, i64, i8, i8, i8, i8, [4 x i8] } { i64 0, i32 0, i64 0, i8 0, i8 0, i8 0, i8 0, [4 x i8] undef }, align 8
@strtok.p = internal unnamed_addr global i8* null, align 8
@strtoumax.ip = private unnamed_addr constant { i64, i32, i64, i8, i8, i8, i8, [4 x i8] } { i64 0, i32 0, i64 0, i8 0, i8 0, i8 0, i8 0, [4 x i8] undef }, align 8
@sysconf.values = internal unnamed_addr constant [249 x i16] [i16 -3, i16 -1, i16 100, i16 32, i16 1024, i16 -1, i16 6, i16 1, i16 1, i16 1, i16 -1, i16 -2, i16 -2, i16 -1, i16 -1, i16 -1, i16 -2, i16 -2, i16 -2, i16 -2, i16 -1, i16 -2, i16 -1, i16 -1, i16 -1, i16 0, i16 32, i16 -1, i16 -32768, i16 -2, i16 4096, i16 63, i16 256, i16 -3, i16 -1, i16 -1, i16 99, i16 2048, i16 99, i16 1000, i16 2, i16 -1, i16 -1, i16 -1, i16 255, i16 -1, i16 -2, i16 -2, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 1, i16 1, i16 1024, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -2, i16 -2, i16 -1, i16 -1, i16 256, i16 20, i16 4, i16 1024, i16 4096, i16 -1, i16 -1, i16 -2, i16 -1, i16 -1, i16 -1, i16 -2, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 700, i16 700, i16 -1, i16 -1, i16 1, i16 1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 20, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 1, i16 1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -2, i16 -1, i16 -1, i16 -1, i16 -2, i16 -2, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -2, i16 -1, i16 -1, i16 -1, i16 -2, i16 -2, i16 1, i16 -1, i16 1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -2, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 40, i16 0, i16 -1, i16 -1, i16 -1, i16 1, i16 1, i16 255, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 -2, i16 -2, i16 -1, i16 -1, i16 1, i16 1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 -1, i16 -1], align 16
@log_mask = internal unnamed_addr global i32 255, align 4
@log_fd = internal unnamed_addr global i32 -1, align 4
@log_ident = internal unnamed_addr global i8* null, align 8
@log_opt = internal unnamed_addr global i32 0, align 4
@log_facility = internal unnamed_addr global i32 8, align 4
@.str813 = private unnamed_addr constant [9 x i8] c"%b %e %T\00", align 1
@.str1814 = private unnamed_addr constant [20 x i8] c"<%d>%s %s%s%.0d%s: \00", align 1
@.str2815 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str3816 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str4817 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@log_addr = internal constant { i16, [9 x i8], i8 } { i16 1, [9 x i8] c"/dev/log\00", i8 undef }, align 2
@.str818 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str1819 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str2820 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@pio4_hi = internal constant double 0x3FE921FB54442D18, align 8
@pio4_lo = internal constant double 0x3C81A80000000000, align 8
@pio4lo_hi = internal constant double 0xBBCD9CCEBA3F91F2, align 8
@pio4lo_lo = internal constant double 0x386A280000000000, align 8
@T5hi = internal constant double 0x3FC1111111111112, align 8
@T5lo = internal constant double 0x3C6E180000000000, align 8
@T7hi = internal constant double 0x3FABA1BA1BA1B827, align 8
@T7lo = internal constant double 0x3C4D100000000000, align 8
@T3hi = internal constant double 0x3FD5555555555555, align 8
@T3lo = internal constant double 0x3C75280000000000, align 8
@invpio2hi823 = internal constant double 0x3FE45F306DC9C883, align 8
@invpio2lo824 = internal constant double 0xBC86B00000000000, align 8
@pio2_1thi825 = internal constant double 0xBD72E7B9676733AF, align 8
@pio2_1tlo826 = internal constant double 0x3A1C080000000000, align 8
@pio2_2thi827 = internal constant double 0x3AE8A2E03707344A, align 8
@pio2_2tlo828 = internal constant double 0x3780280000000000, align 8
@pio2_3thi829 = internal constant double 0xB8576B7ED8FBBACC, align 8
@pio2_3tlo830 = internal constant double 0xB4D9C00000000000, align 8
@tempnam.index = internal global i32 0, align 4
@.str839 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str1840 = private unnamed_addr constant [5 x i8] c"temp\00", align 1
@.str2841 = private unnamed_addr constant [15 x i8] c"%s/%s-%d-%d-%x\00", align 1
@P842 = internal constant [8 x x86_fp80] [x86_fp80 0xK3FF0B0B22BDA3F22434A, x86_fp80 0xK3FF3EE2E335BE82FF5AA, x86_fp80 0xK3FF7861BC7173757BE6C, x86_fp80 0xK3FF9C368B16651967F43, x86_fp80 0xK3FFBE3F48C3A8EB59549, x86_fp80 0xK3FFDB9D4C8E423AF8D75, x86_fp80 0xK3FFED67A16C819B329CF, x86_fp80 0xK3FFF8000000000000000], align 16
@Q843 = internal constant [9 x x86_fp80] [x86_fp80 0xKBFEEEA6712682DE85473, x86_fp80 0xK3FF2F60EA2DDC2F0334B, x86_fp80 0xKBFF5A23DA6911853BEED, x86_fp80 0xKBFF4D08F5DFD7CB1296E, x86_fp80 0xK3FF9E338D7BC79890417, x86_fp80 0xKBFFABDCDD58036983295, x86_fp80 0xKBFFCE5BC4AD33AB775EF, x86_fp80 0xK3FFDD47CFD572EC7E458, x86_fp80 0xK3FFF8000000000000000], align 16
@SN = internal constant [9 x x86_fp80] [x86_fp80 0xK3FF5948DB9F702DE5DD1, x86_fp80 0xK3FF7EC9CC5F1DD68989B, x86_fp80 0xK3FF89DA5386F18F02CA1, x86_fp80 0xKBFFAACD787D141DD783F, x86_fp80 0xKBFFCAA891905D76D7A5B, x86_fp80 0xKBFFAAC0AF47D12347F64, x86_fp80 0xK3FFEA7E7A01357D15E26, x86_fp80 0xK3FFE93C467E37DB0C7AA, x86_fp80 0xKBFFF8000000000000000], align 16
@S844 = internal constant [9 x x86_fp80] [x86_fp80 0xKBFF59C7E25E5D6D3BAEB, x86_fp80 0xK3FF7EC9AC74ECEB4FE9A, x86_fp80 0xKBFF89DA5B0E9DFEF9225, x86_fp80 0xKBFFAACD787DCEC1710B0, x86_fp80 0xK3FFCAA89190575156B8D, x86_fp80 0xKBFFAAC0AF47D126BF183, x86_fp80 0xKBFFEA7E7A01357D17BF6, x86_fp80 0xK3FFE93C467E37DB0C7A9, x86_fp80 0xK3FFF8000000000000000], align 16
@STIR = internal constant [9 x x86_fp80] [x86_fp80 0xK3FF4BB5D54E369F76EDE, x86_fp80 0xKBFEFC64B44430295C395, x86_fp80 0xKBFF49BFB5E477C59BA6F, x86_fp80 0xK3FF19293B11D1A395704, x86_fp80 0xK3FF4CD8798B21A2130B7, x86_fp80 0xKBFF2F09E6A087023BEF3, x86_fp80 0xKBFF6AFB934785AC83A1C, x86_fp80 0xK3FF6E38E38E3906EC3C9, x86_fp80 0xK3FFBAAAAAAAAAAAAA1D5], align 16
@__time_to_tm.days_thru_month = internal unnamed_addr constant [12 x i32] [i32 31, i32 61, i32 92, i32 122, i32 153, i32 184, i32 214, i32 245, i32 275, i32 306, i32 337, i32 366], align 16
@.str851 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@tmpnam.index = internal global i32 0, align 4
@tmpnam.s2 = internal global [20 x i8] zeroinitializer, align 16
@.str852 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str1853 = private unnamed_addr constant [12 x i8] c"/tmp/t%x-%x\00", align 1
@casemaps = internal unnamed_addr constant [56 x %struct.anon.692] [%struct.anon.692 { i16 65, i8 32, i8 26 }, %struct.anon.692 { i16 192, i8 32, i8 31 }, %struct.anon.692 { i16 256, i8 1, i8 47 }, %struct.anon.692 { i16 306, i8 1, i8 5 }, %struct.anon.692 { i16 313, i8 1, i8 15 }, %struct.anon.692 { i16 330, i8 1, i8 45 }, %struct.anon.692 { i16 377, i8 1, i8 5 }, %struct.anon.692 { i16 880, i8 1, i8 3 }, %struct.anon.692 { i16 913, i8 32, i8 17 }, %struct.anon.692 { i16 931, i8 32, i8 9 }, %struct.anon.692 { i16 1024, i8 80, i8 16 }, %struct.anon.692 { i16 1040, i8 32, i8 32 }, %struct.anon.692 { i16 1120, i8 1, i8 33 }, %struct.anon.692 { i16 1162, i8 1, i8 53 }, %struct.anon.692 { i16 1217, i8 1, i8 13 }, %struct.anon.692 { i16 1232, i8 1, i8 63 }, %struct.anon.692 { i16 1329, i8 48, i8 38 }, %struct.anon.692 { i16 416, i8 1, i8 5 }, %struct.anon.692 { i16 435, i8 1, i8 3 }, %struct.anon.692 { i16 461, i8 1, i8 15 }, %struct.anon.692 { i16 478, i8 1, i8 17 }, %struct.anon.692 { i16 504, i8 1, i8 39 }, %struct.anon.692 { i16 546, i8 1, i8 17 }, %struct.anon.692 { i16 984, i8 1, i8 23 }, %struct.anon.692 { i16 7680, i8 1, i8 -107 }, %struct.anon.692 { i16 7840, i8 1, i8 95 }, %struct.anon.692 { i16 7944, i8 -8, i8 8 }, %struct.anon.692 { i16 7960, i8 -8, i8 6 }, %struct.anon.692 { i16 7976, i8 -8, i8 8 }, %struct.anon.692 { i16 7992, i8 -8, i8 8 }, %struct.anon.692 { i16 8008, i8 -8, i8 6 }, %struct.anon.692 { i16 8040, i8 -8, i8 8 }, %struct.anon.692 { i16 8072, i8 -8, i8 8 }, %struct.anon.692 { i16 8088, i8 -8, i8 8 }, %struct.anon.692 { i16 8104, i8 -8, i8 8 }, %struct.anon.692 { i16 8120, i8 -8, i8 2 }, %struct.anon.692 { i16 8122, i8 -74, i8 2 }, %struct.anon.692 { i16 8136, i8 -86, i8 4 }, %struct.anon.692 { i16 8152, i8 -8, i8 2 }, %struct.anon.692 { i16 8154, i8 -100, i8 2 }, %struct.anon.692 { i16 8168, i8 -8, i8 2 }, %struct.anon.692 { i16 8170, i8 -112, i8 2 }, %struct.anon.692 { i16 8184, i8 -128, i8 2 }, %struct.anon.692 { i16 8186, i8 -126, i8 2 }, %struct.anon.692 { i16 582, i8 1, i8 9 }, %struct.anon.692 { i16 1296, i8 1, i8 3 }, %struct.anon.692 { i16 8544, i8 16, i8 16 }, %struct.anon.692 { i16 11264, i8 48, i8 47 }, %struct.anon.692 { i16 11367, i8 1, i8 5 }, %struct.anon.692 { i16 11392, i8 1, i8 99 }, %struct.anon.692 { i16 -22750, i8 1, i8 13 }, %struct.anon.692 { i16 -22734, i8 1, i8 61 }, %struct.anon.692 { i16 -22663, i8 1, i8 3 }, %struct.anon.692 { i16 -22658, i8 1, i8 9 }, %struct.anon.692 { i16 -223, i8 32, i8 26 }, %struct.anon.692 zeroinitializer], align 16
@pairs = internal unnamed_addr constant [112 x [2 x i16]] [[2 x i16] [i16 73, i16 305], [2 x i16] [i16 83, i16 383], [2 x i16] [i16 304, i16 105], [2 x i16] [i16 376, i16 255], [2 x i16] [i16 385, i16 595], [2 x i16] [i16 386, i16 387], [2 x i16] [i16 388, i16 389], [2 x i16] [i16 390, i16 596], [2 x i16] [i16 391, i16 392], [2 x i16] [i16 393, i16 598], [2 x i16] [i16 394, i16 599], [2 x i16] [i16 395, i16 396], [2 x i16] [i16 398, i16 477], [2 x i16] [i16 399, i16 601], [2 x i16] [i16 400, i16 603], [2 x i16] [i16 401, i16 402], [2 x i16] [i16 403, i16 608], [2 x i16] [i16 404, i16 611], [2 x i16] [i16 406, i16 617], [2 x i16] [i16 407, i16 616], [2 x i16] [i16 408, i16 409], [2 x i16] [i16 412, i16 623], [2 x i16] [i16 413, i16 626], [2 x i16] [i16 415, i16 629], [2 x i16] [i16 422, i16 640], [2 x i16] [i16 423, i16 424], [2 x i16] [i16 425, i16 643], [2 x i16] [i16 428, i16 429], [2 x i16] [i16 430, i16 648], [2 x i16] [i16 431, i16 432], [2 x i16] [i16 433, i16 650], [2 x i16] [i16 434, i16 651], [2 x i16] [i16 439, i16 658], [2 x i16] [i16 440, i16 441], [2 x i16] [i16 444, i16 445], [2 x i16] [i16 452, i16 454], [2 x i16] [i16 452, i16 453], [2 x i16] [i16 453, i16 454], [2 x i16] [i16 455, i16 457], [2 x i16] [i16 455, i16 456], [2 x i16] [i16 456, i16 457], [2 x i16] [i16 458, i16 460], [2 x i16] [i16 458, i16 459], [2 x i16] [i16 459, i16 460], [2 x i16] [i16 497, i16 499], [2 x i16] [i16 497, i16 498], [2 x i16] [i16 498, i16 499], [2 x i16] [i16 500, i16 501], [2 x i16] [i16 502, i16 405], [2 x i16] [i16 503, i16 447], [2 x i16] [i16 544, i16 414], [2 x i16] [i16 902, i16 940], [2 x i16] [i16 904, i16 941], [2 x i16] [i16 905, i16 942], [2 x i16] [i16 906, i16 943], [2 x i16] [i16 908, i16 972], [2 x i16] [i16 910, i16 973], [2 x i16] [i16 911, i16 974], [2 x i16] [i16 921, i16 837], [2 x i16] [i16 921, i16 8126], [2 x i16] [i16 931, i16 962], [2 x i16] [i16 1015, i16 1016], [2 x i16] [i16 1018, i16 1019], [2 x i16] [i16 7776, i16 7835], [2 x i16] [i16 8025, i16 8017], [2 x i16] [i16 8027, i16 8019], [2 x i16] [i16 8029, i16 8021], [2 x i16] [i16 8031, i16 8023], [2 x i16] [i16 8124, i16 8115], [2 x i16] [i16 8140, i16 8131], [2 x i16] [i16 8172, i16 8165], [2 x i16] [i16 8188, i16 8179], [2 x i16] [i16 570, i16 11365], [2 x i16] [i16 571, i16 572], [2 x i16] [i16 573, i16 410], [2 x i16] [i16 574, i16 11366], [2 x i16] [i16 577, i16 578], [2 x i16] [i16 579, i16 384], [2 x i16] [i16 580, i16 649], [2 x i16] [i16 581, i16 652], [2 x i16] [i16 1012, i16 952], [2 x i16] [i16 1017, i16 1010], [2 x i16] [i16 1021, i16 891], [2 x i16] [i16 1022, i16 892], [2 x i16] [i16 1023, i16 893], [2 x i16] [i16 1216, i16 1231], [2 x i16] [i16 8486, i16 969], [2 x i16] [i16 8490, i16 107], [2 x i16] [i16 8491, i16 229], [2 x i16] [i16 8498, i16 8526], [2 x i16] [i16 8579, i16 8580], [2 x i16] [i16 11360, i16 11361], [2 x i16] [i16 11362, i16 619], [2 x i16] [i16 11363, i16 7549], [2 x i16] [i16 11364, i16 637], [2 x i16] [i16 11373, i16 593], [2 x i16] [i16 11374, i16 625], [2 x i16] [i16 11375, i16 592], [2 x i16] [i16 11378, i16 11379], [2 x i16] [i16 11381, i16 11382], [2 x i16] [i16 -22659, i16 7545], [2 x i16] [i16 886, i16 887], [2 x i16] [i16 924, i16 181], [2 x i16] [i16 914, i16 976], [2 x i16] [i16 920, i16 977], [2 x i16] [i16 934, i16 981], [2 x i16] [i16 928, i16 982], [2 x i16] [i16 922, i16 1008], [2 x i16] [i16 929, i16 1009], [2 x i16] [i16 917, i16 1013], [2 x i16] [i16 975, i16 983], [2 x i16] zeroinitializer], align 16
@zero878 = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@ttyname.buf = internal global [20 x i8] zeroinitializer, align 16
@.str880 = private unnamed_addr constant [17 x i8] c"/proc/self/fd/%d\00", align 1
@__timezone = global i64 0, align 8
@__daylight = global i32 0, align 4
@__tzname = global [2 x i8*] zeroinitializer, align 16
@__dst_offset = global i32 0, align 4
@std_name = internal global [7 x i8] zeroinitializer, align 1
@.str889 = private unnamed_addr constant [4 x i8] c"GMT\00", align 1
@dst_name = internal global [7 x i8] zeroinitializer, align 1
@.str1890 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@__dst_start = internal global %struct.rule zeroinitializer, align 4
@__dst_end = internal global %struct.rule zeroinitializer, align 4
@__tzset.init.b = internal unnamed_addr global i1 false
@cutoff_yday.days_in_month = internal unnamed_addr constant [12 x i8] c"\1F\1C\1F\1E\1F\1E\1F\1F\1E\1F\1E\1F", align 1
@cutoff_yday.first_day = internal unnamed_addr constant [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 335], align 16
@states = internal unnamed_addr constant [8 x [58 x i8]] [[58 x i8] c"\13\00\0A\00\13\13\13\00\00\00\00\05\00\00\00\00\00\00\09\00\00\00\00\0B\00\00\00\00\00\00\00\00\13\00\11\0A\13\13\13\03\0A\07\00\01\15\09\0B\0E\00\00\09\06\0B\00\00\0B\00\06", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E\00\00\00\00\00\00\00\00\00\00\0A\0D\00\00\00\00\0D\00\00\02\00\09\0E\00\00\00\09\00\0E\00\00\0E\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\0C\00\00\00\00\09\0C\00\00\00\00\00\0C\00\00\0C\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0F\00\00\00\04\0F\00\00\00\00\09\10\00\00\00\00\00\10\00\00\10\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\09\12\00\00\00\00\00\12\00\00\12\00\00", [58 x i8] c"\14\00\00\00\14\14\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\14\14\14\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E\00\00\00\00\00\00\00\00\00\00\00\0D\00\00\00\00\0D\00\00\00\00\09\0E\00\00\00\00\00\0E\00\00\0E\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\0C\00\00\00\00\09\0C\00\00\00\00\00\0C\00\00\0C\00\00"], align 16
@xdigits = internal unnamed_addr constant [16 x i8] c"0123456789ABCDEF", align 16
@.str909 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str1910 = private unnamed_addr constant [10 x i8] c"-+   0X0x\00", align 1
@.str2911 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@states916 = internal unnamed_addr constant [8 x [58 x i8]] [[58 x i8] c"\13\00\0A\00\13\13\13\00\00\00\00\05\00\00\00\00\00\00\09\00\00\00\00\0B\00\00\00\00\00\00\00\00\13\00\11\0A\13\13\13\03\0A\07\00\01\15\09\0B\0E\00\00\09\06\0B\00\00\0B\00\06", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E\00\00\00\00\00\00\00\00\00\00\0A\0D\00\00\00\00\0D\00\00\02\00\09\0E\00\00\00\09\00\0E\00\00\0E\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\0C\00\00\00\00\09\0C\00\00\00\00\00\0C\00\00\0C\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0F\00\00\00\04\0F\00\00\00\00\09\10\00\00\00\00\00\10\00\00\10\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\09\12\00\00\00\00\00\12\00\00\12\00\00", [58 x i8] c"\14\00\00\00\14\14\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\14\14\14\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E\00\00\00\00\00\00\00\00\00\00\00\0D\00\00\00\00\0D\00\00\00\00\09\0E\00\00\00\00\00\0E\00\00\0E\00\00", [58 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\0C\00\00\00\00\09\0C\00\00\00\00\00\0C\00\00\0C\00\00"], align 16
@sizeprefix = internal unnamed_addr constant [24 x i8] c"L\00\00jLLL\00j\00\00\00\00\00jj\00\00\00\00j\00\00j", align 16
@.str917 = private unnamed_addr constant [8 x i8] c"%\00\00\00\00\00\00\00", align 4
@.str1918 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str2919 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str3920 = private unnamed_addr constant [20 x i8] c"%%%s%s%s%s%s*.*%c%c\00", align 1
@.str4921 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str5922 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str6923 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str7924 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str8925 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@vsnprintf.f = private unnamed_addr constant %struct.__FILE_s.737 { i32 0, i8* null, i8* null, i32 (%struct.__FILE_s.737*)* null, i8* null, i8* null, i8* null, i8* null, i64 (%struct.__FILE_s.737*, i8*, i64)* null, i64 (%struct.__FILE_s.737*, i8*, i64)* @sn_write, i64 (%struct.__FILE_s.737*, i64, i32)* null, i8* null, i64 0, %struct.__FILE_s.737* null, %struct.__FILE_s.737* null, i32 0, i32 0, i64 0, i16 0, i8 0, i8 -1, i32 -1, i32 0, i8* null, i64 0, i32 (%struct.__FILE_s.737*)* null, i8* null }, align 8
@.str963 = private unnamed_addr constant [3 x i8] c"EO\00", align 1
@wcstoimax.ip = private unnamed_addr constant { i64, i32, i64, i8, i8, i8, i8, [4 x i8] } { i64 0, i32 0, i64 0, i8 0, i8 0, i8 0, i8 0, [4 x i8] undef }, align 8
@wcstoumax.ip = private unnamed_addr constant { i64, i32, i64, i8, i8, i8, i8, [4 x i8] } { i64 0, i32 0, i64 0, i8 0, i8 0, i8 0, i8 0, [4 x i8] undef }, align 8
@.str984 = private unnamed_addr constant [8 x i8] c"toupper\00", align 1
@.str1985 = private unnamed_addr constant [8 x i8] c"tolower\00", align 1
@ranges990 = internal constant <{ { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 } }> <{ { i8, i8, i8, i8 } { i8 111, i8 3, i8 -32, i8 13 }, { i8, i8, i8, i8 } { i8 -122, i8 4, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 -119, i8 4, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -67, i8 5, i8 -128, i8 5 }, { i8, i8, i8, i8 } { i8 -65, i8 5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -62, i8 5, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -59, i8 5, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -57, i8 5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 3, i8 6, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 21, i8 6, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 94, i8 6, i8 96, i8 2 }, { i8, i8, i8, i8 } { i8 112, i8 6, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -28, i8 6, i8 -64, i8 1 }, { i8, i8, i8, i8 } { i8 -24, i8 6, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -19, i8 6, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 15, i8 7, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 17, i8 7, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 74, i8 7, i8 64, i8 3 }, { i8, i8, i8, i8 } { i8 -80, i8 7, i8 64, i8 1 }, { i8, i8, i8, i8 } { i8 -13, i8 7, i8 0, i8 1 }, { i8, i8, i8, i8 } { i8 2, i8 9, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 60, i8 9, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 72, i8 9, i8 -32, i8 0 }, { i8, i8, i8, i8 } { i8 77, i8 9, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 84, i8 9, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 99, i8 9, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -127, i8 9, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -68, i8 9, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -60, i8 9, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 -51, i8 9, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -29, i8 9, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 2, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 60, i8 10, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 66, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 72, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 77, i8 10, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 113, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -126, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -68, i8 10, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -59, i8 10, i8 -128, i8 0 }, { i8, i8, i8, i8 } { i8 -56, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -51, i8 10, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -29, i8 10, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 1, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 60, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 63, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 67, i8 11, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 77, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 86, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -126, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -64, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -51, i8 11, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 64, i8 12, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 72, i8 12, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 77, i8 12, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 86, i8 12, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -68, i8 12, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -65, i8 12, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -58, i8 12, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -51, i8 12, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -29, i8 12, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 67, i8 13, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 77, i8 13, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -54, i8 13, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -44, i8 13, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 -42, i8 13, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 49, i8 14, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 58, i8 14, i8 -64, i8 0 }, { i8, i8, i8, i8 } { i8 78, i8 14, i8 -32, i8 0 }, { i8, i8, i8, i8 } { i8 -79, i8 14, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -71, i8 14, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 -68, i8 14, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -51, i8 14, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 25, i8 15, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 53, i8 15, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 55, i8 15, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 57, i8 15, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 126, i8 15, i8 -96, i8 1 }, { i8, i8, i8, i8 } { i8 -124, i8 15, i8 -128, i8 0 }, { i8, i8, i8, i8 } { i8 -121, i8 15, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -105, i8 15, i8 -32, i8 0 }, { i8, i8, i8, i8 } { i8 -68, i8 15, i8 96, i8 4 }, { i8, i8, i8, i8 } { i8 -58, i8 15, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 48, i8 16, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 50, i8 16, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 55, i8 16, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 57, i8 16, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 89, i8 16, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 95, i8 17, i8 -16, i8 11 }, { i8, i8, i8, i8 } { i8 -1, i8 17, i8 -32, i8 19 }, { i8, i8, i8, i8 } { i8 95, i8 19, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 20, i8 23, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 52, i8 23, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 83, i8 23, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 115, i8 23, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -75, i8 23, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -67, i8 23, i8 -64, i8 0 }, { i8, i8, i8, i8 } { i8 -58, i8 23, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 -45, i8 23, i8 64, i8 1 }, { i8, i8, i8, i8 } { i8 -35, i8 23, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 13, i8 24, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 -87, i8 24, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 34, i8 25, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 40, i8 25, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 50, i8 25, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 59, i8 25, i8 64, i8 0 }, { i8, i8, i8, i8 } { i8 24, i8 26, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 3, i8 27, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 52, i8 27, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 58, i8 27, i8 -128, i8 0 }, { i8, i8, i8, i8 } { i8 60, i8 27, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 66, i8 27, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 115, i8 27, i8 0, i8 1 }, { i8, i8, i8, i8 } { i8 -54, i8 29, i8 64, i8 1 }, { i8, i8, i8, i8 } { i8 -1, i8 29, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 15, i8 32, i8 -128, i8 0 }, { i8, i8, i8, i8 } { i8 46, i8 32, i8 -128, i8 0 }, { i8, i8, i8, i8 } { i8 99, i8 32, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 111, i8 32, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 -17, i8 32, i8 -32, i8 3 }, { i8, i8, i8, i8 } { i8 42, i8 35, i8 48, i8 0 }, { i8, i8, i8, i8 } { i8 41, i8 48, i8 48, i8 53 }, { i8, i8, i8, i8 } { i8 47, i8 48, i8 -96, i8 0 }, { i8, i8, i8, i8 } { i8 62, i8 48, i8 -48, i8 1 }, { i8, i8, i8, i8 } { i8 -102, i8 48, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 6, i8 -88, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 11, i8 -88, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 38, i8 -88, i8 32, i8 0 }, { i8, i8, i8, i8 } { i8 -1, i8 -6, i8 -16, i8 63 }, { i8, i8, i8, i8 } { i8 30, i8 -5, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 15, i8 -2, i8 -32, i8 1 }, { i8, i8, i8, i8 } { i8 35, i8 -2, i8 96, i8 0 }, { i8, i8, i8, i8 } { i8 111, i8 -2, i8 -16, i8 7 }, { i8, i8, i8, i8 } { i8 -1, i8 -2, i8 0, i8 0 }, { i8, i8, i8, i8 } { i8 96, i8 -1, i8 16, i8 12 }, { i8, i8, i8, i8 } { i8 -26, i8 -1, i8 -48, i8 0 }, { i8, i8, i8, i8 } { i8 3, i8 10, i8 65, i8 0 }, { i8, i8, i8, i8 } { i8 6, i8 10, i8 33, i8 0 }, { i8, i8, i8, i8 } { i8 15, i8 10, i8 97, i8 0 }, { i8, i8, i8, i8 } { i8 58, i8 10, i8 65, i8 0 }, { i8, i8, i8, i8 } { i8 63, i8 10, i8 1, i8 0 }, { i8, i8, i8, i8 } { i8 105, i8 -47, i8 65, i8 0 }, { i8, i8, i8, i8 } { i8 -126, i8 -47, i8 -31, i8 1 }, { i8, i8, i8, i8 } { i8 -117, i8 -47, i8 -63, i8 0 }, { i8, i8, i8, i8 } { i8 -83, i8 -47, i8 97, i8 0 }, { i8, i8, i8, i8 } { i8 68, i8 -46, i8 65, i8 0 }, { i8, i8, i8, i8 } { i8 1, i8 0, i8 14, i8 0 }, { i8, i8, i8, i8 } { i8 127, i8 0, i8 -18, i8 11 }, { i8, i8, i8, i8 } { i8 -17, i8 1, i8 -18, i8 29 } }>, align 16
@.str1001 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str11002 = private unnamed_addr constant [12 x i8] c"2>/dev/null\00", align 1
@.str21003 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str31004 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str41005 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str51006 = private unnamed_addr constant [28 x i8] c"eval \22printf %s\5C\5C\5C\5C0 $1 $2\22\00", align 1
@.str61007 = private unnamed_addr constant [2 x i8] c"r\00", align 1

@__xpg_basename = alias weak i8* (i8*)* @basename
@__syscall_cp = alias weak i64 (i64, i64, i64, i64, i64, i64, i64)* @sccp
@__testcancel = alias weak bitcast (void ()* @dummy to void (...)*)
@__do_cleanup_push = alias weak bitcast (void ()* @dummy25 to void (...)*)
@__do_cleanup_pop = alias weak bitcast (void ()* @dummy25 to void (...)*)
@cfsetspeed = alias weak i32 (%struct.termios.26*, i32)* @cfsetospeed
@clearerr_unlocked = alias weak void (%struct.__FILE_s.27*)* @clearerr
@__vdso_clock_gettime = alias weak i32 (i32, %struct.timespec.29*)* @sc_clock_gettime
@clock_gettime = alias weak i32 (i32, %struct.timespec.29*)* @__clock_gettime
@clone = alias weak i32 (i32 (i8*)*, i8*, i32, i8*, ...)* @__clone
@crypt_r = alias weak i8* (i8*, i8*, %struct.crypt_data*)* @__crypt_r
@setnetent = alias weak void (i32)* @sethostent
@getnetent = alias weak bitcast (i8* ()* @gethostent to i8* (...)*)
@endnetent = alias weak void ()* @endhostent
@___environ = alias weak i8*** @__environ
@_environ = alias weak i8*** @__environ
@environ = alias weak i8*** @__environ
@fpurge = alias weak i32 (%struct.__FILE_s*)* @__fpurge
@fdopen = alias weak %struct.__FILE_s.61* (i32, i8*)* @__fdopen
@feof_unlocked = alias weak i32 (%struct.__FILE_s.64*)* @feof
@ferror_unlocked = alias weak i32 (%struct.__FILE_s.65*)* @ferror
@fflush_unlocked = alias weak i32 (%struct.__FILE_s.67*)* @__fflush_unlocked
@getc = alias weak i32 (%struct.__FILE_s.69*)* @fgetc
@fgets_unlocked = alias weak i8* (i8*, i32, %struct.__FILE_s.37*)* @fgets
@fgetwc_unlocked = alias weak i32 (%struct.__FILE_s.69*)* @__fgetwc_unlocked
@getwc_unlocked = alias weak i32 (%struct.__FILE_s.69*)* @__fgetwc_unlocked
@fgetws_unlocked = alias weak i32* (i32*, i32, %struct.__FILE_s.75*)* @fgetws
@fileno_unlocked = alias weak i32 (%struct.__FILE_s.76*)* @fileno
@putc = alias weak i32 (i32, %struct.__FILE_s.85*)* @fputc
@fputs_unlocked = alias weak i32 (i8*, %struct.__FILE_s.86*)* @fputs
@fputwc_unlocked = alias weak i32 (i32, %struct.__FILE_s.85*)* @__fputwc_unlocked
@putwc_unlocked = alias weak i32 (i32, %struct.__FILE_s.85*)* @__fputwc_unlocked
@fputws_unlocked = alias weak i32 (i32*, %struct.__FILE_s.85*)* @fputws
@fread_unlocked = alias weak i64 (i8*, i64, i64, %struct.__FILE_s.90*)* @fread
@fseeko = alias weak i32 (%struct.__FILE_s.96*, i64, i32)* @__fseeko
@ftello = alias weak i64 (%struct.__FILE_s.70*)* @__ftello
@fwrite_unlocked = alias weak i64 (i8*, i64, i64, %struct.__FILE_s.85*)* @fwrite
@fgetc_unlocked = alias weak i32 (%struct.__FILE_s.69*)* @getc_unlocked
@getdents = alias weak i32 (i32, %struct.dirent.139*, i64)* @__getdents
@endgrent = alias weak void ()* @setgrent
@endpwent = alias weak void ()* @setpwent
@getwchar_unlocked = alias weak i32 ()* @getwchar
@nl_langinfo = alias weak i8* (i32)* @__langinfo
@lgammaf_r = alias weak float (float, i32*)* @__lgammaf_r
@lgammal_r = alias weak x86_fp80 (x86_fp80, i32*)* @__lgammal_r
@lgamma_r = alias weak double (double, i32*)* @__lgamma_r
@madvise = alias weak i32 (i8*, i64, i32)* @__madvise
@memrchr = alias weak i8* (i8*, i32, i64)* @__memrchr
@mktemp = alias weak i8* (i8*)* @__mktemp
@mmap = alias weak i8* (i8*, i64, i32, i32, i32, i64)* @__mmap
@mremap = alias weak i8* (i8*, i64, i64, i32, ...)* @__mremap
@munmap = alias weak i32 (i8*, i64)* @__munmap
@ptsname_r = alias weak i32 (i32, i8*, i64)* @__ptsname_r
@fputc_unlocked = alias weak i32 (i32, %struct.__FILE_s.85*)* @putc_unlocked
@putwchar_unlocked = alias weak i32 (i32)* @putwchar
@res_search = alias weak i32 (i8*, i32, i32, i8*, i32)* @res_query
@sched_yield = alias weak i32 ()* @__yield
@__pthread_self_def = alias weak %struct.__pthread.579* ()* @dummy667
@sigaction = alias weak i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @__sigaction
@bsd_signal = alias weak void (i32)* (i32, void (i32)*)* @signal
@signgam = alias weak i32* @__signgam
@statfs = alias weak i32 (i8*, %struct.statfs*)* @__statfs
@fstatfs = alias weak i32 (i32, %struct.statfs*)* @__fstatfs
@stpcpy = alias weak i8* (i8*, i8*)* @__stpcpy
@stpncpy = alias weak i8* (i8*, i8*, i64)* @__stpncpy
@strdup = alias weak i8* (i8*)* @__strdup
@vsyslog = alias weak void (i32, i8*, %struct.__va_list_tag.635*)* @__vsyslog
@timezone = alias weak i64* @__timezone
@daylight = alias weak i32* @__daylight
@tzname = alias weak [2 x i8*]* @__tzname
@endutent = alias weak void ()* @endutxent
@setutent = alias weak void ()* @setutxent
@getutent = alias weak %struct.utmpx* ()* @getutxent
@getutid = alias weak %struct.utmpx* (%struct.utmpx*)* @getutxid
@getutline = alias weak %struct.utmpx* (%struct.utmpx*)* @getutxline
@pututline = alias weak %struct.utmpx* (%struct.utmpx*)* @pututxline
@updwtmp = alias weak void (i8*, %struct.utmpx*)* @updwtmpx
@vfork = alias weak i32 ()* @__vfork

define i64 @a64l(i8* nocapture %s) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %7, %0
  %indvars.iv = phi i64 [ %indvars.iv.next, %7 ], [ 0, %0 ]
  %x.0 = phi i64 [ %phitmp, %7 ], [ 0, %0 ]
  %.0 = phi i8* [ %13, %7 ], [ %s, %0 ]
  %2 = trunc i64 %indvars.iv to i32
  %3 = icmp slt i32 %2, 36
  br i1 %3, label %4, label %.critedge

; <label>:4                                       ; preds = %1
  %5 = load i8* %.0, align 1, !tbaa !0
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %.critedge, label %7

; <label>:7                                       ; preds = %4
  %8 = sext i8 %5 to i32
  %9 = tail call i8* @strchr(i8* getelementptr inbounds ([65 x i8]* @digits, i64 0, i64 0), i32 %8) nounwind optsize
  %10 = ptrtoint i8* %9 to i64
  %11 = sub i64 %10, ptrtoint ([65 x i8]* @digits to i64)
  %12 = shl i64 %11, %indvars.iv
  %indvars.iv.next = add i64 %indvars.iv, 6
  %13 = getelementptr inbounds i8* %.0, i64 1
  %.masked = and i64 %12, 4294967295
  %phitmp = or i64 %.masked, %x.0
  br label %1

.critedge:                                        ; preds = %4, %1
  ret i64 %x.0
}

define i8* @l64a(i64 %x0) nounwind uwtable optsize {
  %1 = trunc i64 %x0 to i32
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %x.02 = phi i32 [ %8, %.lr.ph ], [ %1, %0 ]
  %p.01 = phi i8* [ %7, %.lr.ph ], [ getelementptr inbounds ([7 x i8]* @l64a.s, i64 0, i64 0), %0 ]
  %3 = and i32 %x.02, 63
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [65 x i8]* @digits, i64 0, i64 %4
  %6 = load i8* %5, align 1, !tbaa !0
  store i8 %6, i8* %p.01, align 1, !tbaa !0
  %7 = getelementptr inbounds i8* %p.01, i64 1
  %8 = lshr i32 %x.02, 6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  %p.0.lcssa = phi i8* [ getelementptr inbounds ([7 x i8]* @l64a.s, i64 0, i64 0), %0 ], [ %7, %.lr.ph ]
  store i8 0, i8* %p.0.lcssa, align 1, !tbaa !0
  ret i8* getelementptr inbounds ([7 x i8]* @l64a.s, i64 0, i64 0)
}

define void @abort() noreturn nounwind uwtable optsize {
  %1 = tail call i32 @raise(i32 6) nounwind optsize
  br label %2

; <label>:2                                       ; preds = %2, %0
  br label %2
}

define i32 @abs(i32 %a) nounwind uwtable readnone optsize {
  %1 = icmp sgt i32 %a, 0
  %2 = sub nsw i32 0, %a
  %3 = select i1 %1, i32 %a, i32 %2
  ret i32 %3
}

define i32 @accept(i32 %fd, %struct.sockaddr* %addr, i32* %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.sockaddr* %addr to i64
  %3 = ptrtoint i32* %len to i64
  %4 = tail call i64 @__syscall_cp(i64 285, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @access(i8* %filename, i32 %amode) nounwind uwtable optsize {
  %1 = ptrtoint i8* %filename to i64
  %2 = sext i32 %amode to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 33, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

declare i64 @__syscall(i64, ...) optsize

define float @acosf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1065353215
  br i1 %3, label %4, label %15

; <label>:4                                       ; preds = %0
  %5 = icmp eq i32 %2, 1065353216
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %80, label %8

; <label>:8                                       ; preds = %6
  %9 = load volatile float* @pio2_lo, align 4, !tbaa !2
  %10 = fmul float %9, 2.000000e+00
  %11 = fadd float %10, 0x400921FB40000000
  br label %80

; <label>:12                                      ; preds = %4
  %13 = fsub float %x, %x
  %14 = fdiv float %13, %13
  br label %80

; <label>:15                                      ; preds = %0
  %16 = icmp ult i32 %2, 1056964608
  br i1 %16, label %17, label %37

; <label>:17                                      ; preds = %15
  %18 = icmp ult i32 %2, 847249409
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %17
  %20 = load volatile float* @pio2_lo, align 4, !tbaa !2
  %21 = fadd float %20, 0x3FF921FB40000000
  br label %80

; <label>:22                                      ; preds = %17
  %23 = fmul float %x, %x
  %24 = fmul float %23, 0xBF81BA6D60000000
  %25 = fadd float %24, 0xBFA5E27740000000
  %26 = fmul float %23, %25
  %27 = fadd float %26, 0x3FC5554EA0000000
  %28 = fmul float %23, %27
  %29 = fmul float %23, 0xBFE69CB5C0000000
  %30 = fadd float %29, 1.000000e+00
  %31 = fdiv float %28, %30
  %32 = load volatile float* @pio2_lo, align 4, !tbaa !2
  %33 = fmul float %31, %x
  %34 = fsub float %32, %33
  %35 = fsub float %x, %34
  %36 = fsub float 0x3FF921FB40000000, %35
  br label %80

; <label>:37                                      ; preds = %15
  %38 = icmp slt i32 %1, 0
  br i1 %38, label %39, label %57

; <label>:39                                      ; preds = %37
  %40 = fadd float %x, 1.000000e+00
  %41 = fmul float %40, 5.000000e-01
  %42 = fmul float %41, 0xBF81BA6D60000000
  %43 = fadd float %42, 0xBFA5E27740000000
  %44 = fmul float %41, %43
  %45 = fadd float %44, 0x3FC5554EA0000000
  %46 = fmul float %41, %45
  %47 = fmul float %41, 0xBFE69CB5C0000000
  %48 = fadd float %47, 1.000000e+00
  %49 = tail call float @sqrtf(float %41) nounwind optsize
  %50 = fdiv float %46, %48
  %51 = fmul float %50, %49
  %52 = load volatile float* @pio2_lo, align 4, !tbaa !2
  %53 = fsub float %51, %52
  %54 = fadd float %49, %53
  %55 = fmul float %54, 2.000000e+00
  %56 = fsub float 0x400921FB40000000, %55
  br label %80

; <label>:57                                      ; preds = %37
  %58 = fsub float 1.000000e+00, %x
  %59 = fmul float %58, 5.000000e-01
  %60 = tail call float @sqrtf(float %59) nounwind optsize
  %61 = bitcast float %60 to i32
  %62 = and i32 %61, -4096
  %63 = bitcast i32 %62 to float
  %64 = fmul float %63, %63
  %65 = fsub float %59, %64
  %66 = fadd float %60, %63
  %67 = fdiv float %65, %66
  %68 = fmul float %59, 0xBF81BA6D60000000
  %69 = fadd float %68, 0xBFA5E27740000000
  %70 = fmul float %59, %69
  %71 = fadd float %70, 0x3FC5554EA0000000
  %72 = fmul float %59, %71
  %73 = fmul float %59, 0xBFE69CB5C0000000
  %74 = fadd float %73, 1.000000e+00
  %75 = fdiv float %72, %74
  %76 = fmul float %75, %60
  %77 = fadd float %76, %67
  %78 = fadd float %63, %77
  %79 = fmul float %78, 2.000000e+00
  br label %80

; <label>:80                                      ; preds = %57, %39, %22, %19, %12, %8, %6
  %.0 = phi float [ %11, %8 ], [ %14, %12 ], [ %21, %19 ], [ %36, %22 ], [ %56, %39 ], [ %79, %57 ], [ 0.000000e+00, %6 ]
  ret float %.0
}

define float @acoshf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = icmp slt i32 %1, 1065353216
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = fsub float %x, %x
  %5 = fdiv float %4, %4
  br label %36

; <label>:6                                       ; preds = %0
  %7 = icmp sgt i32 %1, 1300234239
  br i1 %7, label %8, label %15

; <label>:8                                       ; preds = %6
  %9 = icmp sgt i32 %1, 2139095039
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %8
  %11 = fadd float %x, %x
  br label %36

; <label>:12                                      ; preds = %8
  %13 = tail call float @logf(float %x) nounwind optsize
  %14 = fadd float %13, 0x3FE62E4300000000
  br label %36

; <label>:15                                      ; preds = %6
  %16 = icmp eq i32 %1, 1065353216
  br i1 %16, label %36, label %17

; <label>:17                                      ; preds = %15
  %18 = icmp sgt i32 %1, 1073741824
  br i1 %18, label %19, label %28

; <label>:19                                      ; preds = %17
  %20 = fmul float %x, %x
  %21 = fmul float %x, 2.000000e+00
  %22 = fadd float %20, -1.000000e+00
  %23 = tail call float @sqrtf(float %22) nounwind optsize
  %24 = fadd float %23, %x
  %25 = fdiv float 1.000000e+00, %24
  %26 = fsub float %21, %25
  %27 = tail call float @logf(float %26) nounwind optsize
  br label %36

; <label>:28                                      ; preds = %17
  %29 = fadd float %x, -1.000000e+00
  %30 = fmul float %29, 2.000000e+00
  %31 = fmul float %29, %29
  %32 = fadd float %30, %31
  %33 = tail call float @sqrtf(float %32) nounwind optsize
  %34 = fadd float %29, %33
  %35 = tail call float @log1pf(float %34) nounwind optsize
  br label %36

; <label>:36                                      ; preds = %28, %19, %15, %12, %10, %3
  %.0 = phi float [ %5, %3 ], [ %11, %10 ], [ %14, %12 ], [ %27, %19 ], [ %35, %28 ], [ 0.000000e+00, %15 ]
  ret float %.0
}

define x86_fp80 @acoshl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = lshr i80 %1, 32
  %5 = icmp ugt i32 %3, 16382
  %6 = and i32 %3, 32768
  %7 = icmp eq i32 %6, 0
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %11, label %8

; <label>:8                                       ; preds = %0
  %9 = fsub x86_fp80 %x, %x
  %10 = fdiv x86_fp80 %9, %9
  br label %45

; <label>:11                                      ; preds = %0
  %12 = icmp ugt i32 %3, 16412
  br i1 %12, label %13, label %20

; <label>:13                                      ; preds = %11
  %14 = icmp ugt i32 %3, 32766
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %13
  %16 = fadd x86_fp80 %x, %x
  br label %45

; <label>:17                                      ; preds = %13
  %18 = tail call x86_fp80 @logl(x86_fp80 %x) nounwind optsize
  %19 = fadd x86_fp80 %18, 0xK3FFEB17217F7D1CF79AC
  br label %45

; <label>:20                                      ; preds = %11
  %21 = add i32 %3, -16383
  %22 = or i80 %4, %1
  %23 = trunc i80 %22 to i32
  %24 = or i32 %23, %21
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %45, label %26

; <label>:26                                      ; preds = %20
  %27 = icmp ugt i32 %3, 16384
  br i1 %27, label %28, label %37

; <label>:28                                      ; preds = %26
  %29 = fmul x86_fp80 %x, %x
  %30 = fmul x86_fp80 %x, 0xK40008000000000000000
  %31 = fadd x86_fp80 %29, 0xKBFFF8000000000000000
  %32 = tail call x86_fp80 @sqrtl(x86_fp80 %31) nounwind optsize
  %33 = fadd x86_fp80 %32, %x
  %34 = fdiv x86_fp80 0xK3FFF8000000000000000, %33
  %35 = fsub x86_fp80 %30, %34
  %36 = tail call x86_fp80 @logl(x86_fp80 %35) nounwind optsize
  br label %45

; <label>:37                                      ; preds = %26
  %38 = fadd x86_fp80 %x, 0xKBFFF8000000000000000
  %39 = fmul x86_fp80 %38, 0xK40008000000000000000
  %40 = fmul x86_fp80 %38, %38
  %41 = fadd x86_fp80 %39, %40
  %42 = tail call x86_fp80 @sqrtl(x86_fp80 %41) nounwind optsize
  %43 = fadd x86_fp80 %38, %42
  %44 = tail call x86_fp80 @log1pl(x86_fp80 %43) nounwind optsize
  br label %45

; <label>:45                                      ; preds = %37, %28, %20, %17, %15, %8
  %.0 = phi x86_fp80 [ %10, %8 ], [ %16, %15 ], [ %19, %17 ], [ %36, %28 ], [ %44, %37 ], [ 0xK00000000000000000000, %20 ]
  ret x86_fp80 %.0
}

declare x86_fp80 @sqrtl(x86_fp80) optsize

define double @acosh(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = icmp slt i32 %3, 1072693248
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %0
  %7 = fsub double %x, %x
  %8 = fdiv double %7, %7
  br label %41

; <label>:9                                       ; preds = %0
  %10 = icmp sgt i32 %3, 1102053375
  br i1 %10, label %11, label %18

; <label>:11                                      ; preds = %9
  %12 = icmp sgt i32 %3, 2146435071
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %11
  %14 = fadd double %x, %x
  br label %41

; <label>:15                                      ; preds = %11
  %16 = tail call double @log(double %x) nounwind optsize
  %17 = fadd double %16, 0x3FE62E42FEFA39EF
  br label %41

; <label>:18                                      ; preds = %9
  %19 = add nsw i32 %3, -1072693248
  %20 = or i32 %19, %4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %41, label %22

; <label>:22                                      ; preds = %18
  %23 = icmp sgt i32 %3, 1073741824
  br i1 %23, label %24, label %33

; <label>:24                                      ; preds = %22
  %25 = fmul double %x, %x
  %26 = fmul double %x, 2.000000e+00
  %27 = fadd double %25, -1.000000e+00
  %28 = tail call double @sqrt(double %27) nounwind optsize
  %29 = fadd double %28, %x
  %30 = fdiv double 1.000000e+00, %29
  %31 = fsub double %26, %30
  %32 = tail call double @log(double %31) nounwind optsize
  br label %41

; <label>:33                                      ; preds = %22
  %34 = fadd double %x, -1.000000e+00
  %35 = fmul double %34, 2.000000e+00
  %36 = fmul double %34, %34
  %37 = fadd double %35, %36
  %38 = tail call double @sqrt(double %37) nounwind optsize
  %39 = fadd double %34, %38
  %40 = tail call double @log1p(double %39) nounwind optsize
  br label %41

; <label>:41                                      ; preds = %33, %24, %18, %15, %13, %6
  %.0 = phi double [ %8, %6 ], [ %14, %13 ], [ %17, %15 ], [ %32, %24 ], [ %40, %33 ], [ 0.000000e+00, %18 ]
  ret double %.0
}

define x86_fp80 @acosl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 48
  %.tr = trunc i80 %2 to i32
  %sext = ashr i32 %.tr, 16
  %3 = and i32 %sext, 32767
  %4 = icmp ugt i32 %3, 16382
  br i1 %4, label %5, label %29

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %3, 16383
  br i1 %6, label %7, label %26

; <label>:7                                       ; preds = %5
  %8 = lshr i80 %1, 32
  %9 = trunc i80 %8 to i64
  %10 = and i64 %9, 2147483647
  %11 = trunc i80 %1 to i64
  %12 = and i64 %11, 4294967295
  %13 = or i64 %10, %12
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %26

; <label>:15                                      ; preds = %7
  %16 = icmp sgt i32 %sext, 0
  br i1 %16, label %184, label %17

; <label>:17                                      ; preds = %15
  %18 = load volatile double* @pi1, align 8, !tbaa !3
  %19 = fpext double %18 to x86_fp80
  %20 = load volatile double* @pi2, align 8, !tbaa !3
  %21 = fpext double %20 to x86_fp80
  %22 = fadd x86_fp80 %19, %21
  %23 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %24 = fmul x86_fp80 %23, 0xK40008000000000000000
  %25 = fadd x86_fp80 %22, %24
  br label %184

; <label>:26                                      ; preds = %7, %5
  %27 = fsub x86_fp80 %x, %x
  %28 = fdiv x86_fp80 %27, %27
  br label %184

; <label>:29                                      ; preds = %0
  %30 = icmp ult i32 %3, 16382
  br i1 %30, label %31, label %81

; <label>:31                                      ; preds = %29
  %32 = icmp ult i32 %3, 16318
  br i1 %32, label %33, label %37

; <label>:33                                      ; preds = %31
  %34 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %35 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %36 = fadd x86_fp80 %34, %35
  br label %184

; <label>:37                                      ; preds = %31
  %38 = fmul x86_fp80 %x, %x
  %39 = load x86_fp80* @__pS0, align 16, !tbaa !4
  %40 = load x86_fp80* @__pS1, align 16, !tbaa !4
  %41 = load x86_fp80* @__pS2, align 16, !tbaa !4
  %42 = load x86_fp80* @__pS3, align 16, !tbaa !4
  %43 = load x86_fp80* @__pS4, align 16, !tbaa !4
  %44 = load x86_fp80* @__pS5, align 16, !tbaa !4
  %45 = load x86_fp80* @__pS6, align 16, !tbaa !4
  %46 = fmul x86_fp80 %45, %38
  %47 = fadd x86_fp80 %44, %46
  %48 = fmul x86_fp80 %47, %38
  %49 = fadd x86_fp80 %43, %48
  %50 = fmul x86_fp80 %49, %38
  %51 = fadd x86_fp80 %42, %50
  %52 = fmul x86_fp80 %51, %38
  %53 = fadd x86_fp80 %41, %52
  %54 = fmul x86_fp80 %53, %38
  %55 = fadd x86_fp80 %40, %54
  %56 = fmul x86_fp80 %55, %38
  %57 = fadd x86_fp80 %39, %56
  %58 = fmul x86_fp80 %57, %38
  %59 = load x86_fp80* @__qS1, align 16, !tbaa !4
  %60 = load x86_fp80* @__qS2, align 16, !tbaa !4
  %61 = load x86_fp80* @__qS3, align 16, !tbaa !4
  %62 = load x86_fp80* @__qS4, align 16, !tbaa !4
  %63 = load x86_fp80* @__qS5, align 16, !tbaa !4
  %64 = fmul x86_fp80 %63, %38
  %65 = fadd x86_fp80 %62, %64
  %66 = fmul x86_fp80 %65, %38
  %67 = fadd x86_fp80 %61, %66
  %68 = fmul x86_fp80 %67, %38
  %69 = fadd x86_fp80 %60, %68
  %70 = fmul x86_fp80 %69, %38
  %71 = fadd x86_fp80 %59, %70
  %72 = fmul x86_fp80 %71, %38
  %73 = fadd x86_fp80 %72, 0xK3FFF8000000000000000
  %74 = fdiv x86_fp80 %58, %73
  %75 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %76 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %77 = fmul x86_fp80 %74, %x
  %78 = fsub x86_fp80 %76, %77
  %79 = fsub x86_fp80 %x, %78
  %80 = fsub x86_fp80 %75, %79
  br label %184

; <label>:81                                      ; preds = %29
  %82 = icmp slt i32 %sext, 0
  br i1 %82, label %83, label %134

; <label>:83                                      ; preds = %81
  %84 = fadd x86_fp80 %x, 0xK3FFF8000000000000000
  %85 = fmul x86_fp80 %84, 0xK3FFE8000000000000000
  %86 = load x86_fp80* @__pS0, align 16, !tbaa !4
  %87 = load x86_fp80* @__pS1, align 16, !tbaa !4
  %88 = load x86_fp80* @__pS2, align 16, !tbaa !4
  %89 = load x86_fp80* @__pS3, align 16, !tbaa !4
  %90 = load x86_fp80* @__pS4, align 16, !tbaa !4
  %91 = load x86_fp80* @__pS5, align 16, !tbaa !4
  %92 = load x86_fp80* @__pS6, align 16, !tbaa !4
  %93 = fmul x86_fp80 %92, %85
  %94 = fadd x86_fp80 %91, %93
  %95 = fmul x86_fp80 %94, %85
  %96 = fadd x86_fp80 %90, %95
  %97 = fmul x86_fp80 %96, %85
  %98 = fadd x86_fp80 %89, %97
  %99 = fmul x86_fp80 %98, %85
  %100 = fadd x86_fp80 %88, %99
  %101 = fmul x86_fp80 %100, %85
  %102 = fadd x86_fp80 %87, %101
  %103 = fmul x86_fp80 %102, %85
  %104 = fadd x86_fp80 %86, %103
  %105 = fmul x86_fp80 %104, %85
  %106 = load x86_fp80* @__qS1, align 16, !tbaa !4
  %107 = load x86_fp80* @__qS2, align 16, !tbaa !4
  %108 = load x86_fp80* @__qS3, align 16, !tbaa !4
  %109 = load x86_fp80* @__qS4, align 16, !tbaa !4
  %110 = load x86_fp80* @__qS5, align 16, !tbaa !4
  %111 = fmul x86_fp80 %110, %85
  %112 = fadd x86_fp80 %109, %111
  %113 = fmul x86_fp80 %112, %85
  %114 = fadd x86_fp80 %108, %113
  %115 = fmul x86_fp80 %114, %85
  %116 = fadd x86_fp80 %107, %115
  %117 = fmul x86_fp80 %116, %85
  %118 = fadd x86_fp80 %106, %117
  %119 = fmul x86_fp80 %118, %85
  %120 = fadd x86_fp80 %119, 0xK3FFF8000000000000000
  %121 = tail call x86_fp80 @sqrtl(x86_fp80 %85) nounwind optsize
  %122 = fdiv x86_fp80 %105, %120
  %123 = fmul x86_fp80 %122, %121
  %124 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %125 = fsub x86_fp80 %123, %124
  %126 = load volatile double* @pi1, align 8, !tbaa !3
  %127 = fpext double %126 to x86_fp80
  %128 = load volatile double* @pi2, align 8, !tbaa !3
  %129 = fpext double %128 to x86_fp80
  %130 = fadd x86_fp80 %127, %129
  %131 = fadd x86_fp80 %121, %125
  %132 = fmul x86_fp80 %131, 0xK40008000000000000000
  %133 = fsub x86_fp80 %130, %132
  br label %184

; <label>:134                                     ; preds = %81
  %135 = fsub x86_fp80 0xK3FFF8000000000000000, %x
  %136 = fmul x86_fp80 %135, 0xK3FFE8000000000000000
  %137 = tail call x86_fp80 @sqrtl(x86_fp80 %136) nounwind optsize
  %138 = bitcast x86_fp80 %137 to i80
  %mask = and i80 %138, -4294967296
  %139 = bitcast i80 %mask to x86_fp80
  %140 = fmul x86_fp80 %139, %139
  %141 = fsub x86_fp80 %136, %140
  %142 = fadd x86_fp80 %137, %139
  %143 = fdiv x86_fp80 %141, %142
  %144 = load x86_fp80* @__pS0, align 16, !tbaa !4
  %145 = load x86_fp80* @__pS1, align 16, !tbaa !4
  %146 = load x86_fp80* @__pS2, align 16, !tbaa !4
  %147 = load x86_fp80* @__pS3, align 16, !tbaa !4
  %148 = load x86_fp80* @__pS4, align 16, !tbaa !4
  %149 = load x86_fp80* @__pS5, align 16, !tbaa !4
  %150 = load x86_fp80* @__pS6, align 16, !tbaa !4
  %151 = fmul x86_fp80 %150, %136
  %152 = fadd x86_fp80 %149, %151
  %153 = fmul x86_fp80 %152, %136
  %154 = fadd x86_fp80 %148, %153
  %155 = fmul x86_fp80 %154, %136
  %156 = fadd x86_fp80 %147, %155
  %157 = fmul x86_fp80 %156, %136
  %158 = fadd x86_fp80 %146, %157
  %159 = fmul x86_fp80 %158, %136
  %160 = fadd x86_fp80 %145, %159
  %161 = fmul x86_fp80 %160, %136
  %162 = fadd x86_fp80 %144, %161
  %163 = fmul x86_fp80 %162, %136
  %164 = load x86_fp80* @__qS1, align 16, !tbaa !4
  %165 = load x86_fp80* @__qS2, align 16, !tbaa !4
  %166 = load x86_fp80* @__qS3, align 16, !tbaa !4
  %167 = load x86_fp80* @__qS4, align 16, !tbaa !4
  %168 = load x86_fp80* @__qS5, align 16, !tbaa !4
  %169 = fmul x86_fp80 %168, %136
  %170 = fadd x86_fp80 %167, %169
  %171 = fmul x86_fp80 %170, %136
  %172 = fadd x86_fp80 %166, %171
  %173 = fmul x86_fp80 %172, %136
  %174 = fadd x86_fp80 %165, %173
  %175 = fmul x86_fp80 %174, %136
  %176 = fadd x86_fp80 %164, %175
  %177 = fmul x86_fp80 %176, %136
  %178 = fadd x86_fp80 %177, 0xK3FFF8000000000000000
  %179 = fdiv x86_fp80 %163, %178
  %180 = fmul x86_fp80 %179, %137
  %181 = fadd x86_fp80 %180, %143
  %182 = fadd x86_fp80 %139, %181
  %183 = fmul x86_fp80 %182, 0xK40008000000000000000
  br label %184

; <label>:184                                     ; preds = %134, %83, %37, %33, %26, %17, %15
  %.0 = phi x86_fp80 [ %25, %17 ], [ %28, %26 ], [ %36, %33 ], [ %80, %37 ], [ %133, %83 ], [ %183, %134 ], [ 0xK00000000000000000000, %15 ]
  ret x86_fp80 %.0
}

define double @acos(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1072693247
  br i1 %5, label %6, label %20

; <label>:6                                       ; preds = %0
  %7 = trunc i64 %1 to i32
  %8 = add nsw i32 %4, -1072693248
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %17

; <label>:11                                      ; preds = %6
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %121, label %13

; <label>:13                                      ; preds = %11
  %14 = load volatile double* @pio2_lo1, align 8, !tbaa !3
  %15 = fmul double %14, 2.000000e+00
  %16 = fadd double %15, 0x400921FB54442D18
  br label %121

; <label>:17                                      ; preds = %6
  %18 = fsub double %x, %x
  %19 = fdiv double %18, %18
  br label %121

; <label>:20                                      ; preds = %0
  %21 = icmp ult i32 %4, 1071644672
  br i1 %21, label %22, label %54

; <label>:22                                      ; preds = %20
  %23 = icmp ult i32 %4, 1012924417
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %22
  %25 = load volatile double* @pio2_lo1, align 8, !tbaa !3
  %26 = fadd double %25, 0x3FF921FB54442D18
  br label %121

; <label>:27                                      ; preds = %22
  %28 = fmul double %x, %x
  %29 = fmul double %28, 0x3F023DE10DFDF709
  %30 = fadd double %29, 0x3F49EFE07501B288
  %31 = fmul double %28, %30
  %32 = fadd double %31, 0xBFA48228B5688F3B
  %33 = fmul double %28, %32
  %34 = fadd double %33, 0x3FC9C1550E884455
  %35 = fmul double %28, %34
  %36 = fadd double %35, 0xBFD4D61203EB6F7D
  %37 = fmul double %28, %36
  %38 = fadd double %37, 0x3FC5555555555555
  %39 = fmul double %28, %38
  %40 = fmul double %28, 0x3FB3B8C5B12E9282
  %41 = fadd double %40, 0xBFE6066C1B8D0159
  %42 = fmul double %28, %41
  %43 = fadd double %42, 0x40002AE59C598AC8
  %44 = fmul double %28, %43
  %45 = fadd double %44, 0xC0033A271C8A2D4B
  %46 = fmul double %28, %45
  %47 = fadd double %46, 1.000000e+00
  %48 = fdiv double %39, %47
  %49 = load volatile double* @pio2_lo1, align 8, !tbaa !3
  %50 = fmul double %48, %x
  %51 = fsub double %49, %50
  %52 = fsub double %x, %51
  %53 = fsub double 0x3FF921FB54442D18, %52
  br label %121

; <label>:54                                      ; preds = %20
  %55 = icmp slt i32 %3, 0
  br i1 %55, label %56, label %86

; <label>:56                                      ; preds = %54
  %57 = fadd double %x, 1.000000e+00
  %58 = fmul double %57, 5.000000e-01
  %59 = fmul double %58, 0x3F023DE10DFDF709
  %60 = fadd double %59, 0x3F49EFE07501B288
  %61 = fmul double %58, %60
  %62 = fadd double %61, 0xBFA48228B5688F3B
  %63 = fmul double %58, %62
  %64 = fadd double %63, 0x3FC9C1550E884455
  %65 = fmul double %58, %64
  %66 = fadd double %65, 0xBFD4D61203EB6F7D
  %67 = fmul double %58, %66
  %68 = fadd double %67, 0x3FC5555555555555
  %69 = fmul double %58, %68
  %70 = fmul double %58, 0x3FB3B8C5B12E9282
  %71 = fadd double %70, 0xBFE6066C1B8D0159
  %72 = fmul double %58, %71
  %73 = fadd double %72, 0x40002AE59C598AC8
  %74 = fmul double %58, %73
  %75 = fadd double %74, 0xC0033A271C8A2D4B
  %76 = fmul double %58, %75
  %77 = fadd double %76, 1.000000e+00
  %78 = tail call double @sqrt(double %58) nounwind optsize
  %79 = fdiv double %69, %77
  %80 = fmul double %79, %78
  %81 = load volatile double* @pio2_lo1, align 8, !tbaa !3
  %82 = fsub double %80, %81
  %83 = fadd double %78, %82
  %84 = fmul double %83, 2.000000e+00
  %85 = fsub double 0x400921FB54442D18, %84
  br label %121

; <label>:86                                      ; preds = %54
  %87 = fsub double 1.000000e+00, %x
  %88 = fmul double %87, 5.000000e-01
  %89 = tail call double @sqrt(double %88) nounwind optsize
  %90 = bitcast double %89 to i64
  %91 = and i64 %90, -4294967296
  %92 = bitcast i64 %91 to double
  %93 = fmul double %92, %92
  %94 = fsub double %88, %93
  %95 = fadd double %89, %92
  %96 = fdiv double %94, %95
  %97 = fmul double %88, 0x3F023DE10DFDF709
  %98 = fadd double %97, 0x3F49EFE07501B288
  %99 = fmul double %88, %98
  %100 = fadd double %99, 0xBFA48228B5688F3B
  %101 = fmul double %88, %100
  %102 = fadd double %101, 0x3FC9C1550E884455
  %103 = fmul double %88, %102
  %104 = fadd double %103, 0xBFD4D61203EB6F7D
  %105 = fmul double %88, %104
  %106 = fadd double %105, 0x3FC5555555555555
  %107 = fmul double %88, %106
  %108 = fmul double %88, 0x3FB3B8C5B12E9282
  %109 = fadd double %108, 0xBFE6066C1B8D0159
  %110 = fmul double %88, %109
  %111 = fadd double %110, 0x40002AE59C598AC8
  %112 = fmul double %88, %111
  %113 = fadd double %112, 0xC0033A271C8A2D4B
  %114 = fmul double %88, %113
  %115 = fadd double %114, 1.000000e+00
  %116 = fdiv double %107, %115
  %117 = fmul double %116, %89
  %118 = fadd double %117, %96
  %119 = fadd double %92, %118
  %120 = fmul double %119, 2.000000e+00
  br label %121

; <label>:121                                     ; preds = %86, %56, %27, %24, %17, %13, %11
  %.0 = phi double [ %16, %13 ], [ %19, %17 ], [ %26, %24 ], [ %53, %27 ], [ %85, %56 ], [ %120, %86 ], [ 0.000000e+00, %11 ]
  ret double %.0
}

define i32 @adjtime(%struct.timeval* %in, %struct.timeval* %out) nounwind uwtable optsize {
  %tx = alloca %struct.timex, align 8
  %1 = bitcast %struct.timex* %tx to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 208, i32 8, i1 false)
  %2 = icmp eq %struct.timeval* %in, null
  br i1 %2, label %18, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.timeval* %in, i64 0, i32 0
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = icmp sgt i64 %5, 1000
  br i1 %6, label %11, label %7

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds %struct.timeval* %in, i64 0, i32 1
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = icmp sgt i64 %9, 1000000000
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %7, %3
  %12 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %12, align 4, !tbaa !6
  br label %36

; <label>:13                                      ; preds = %7
  %14 = mul nsw i64 %5, 1000000
  %15 = add nsw i64 %9, %14
  %16 = getelementptr inbounds %struct.timex* %tx, i64 0, i32 1
  store i64 %15, i64* %16, align 8, !tbaa !5
  %17 = getelementptr inbounds %struct.timex* %tx, i64 0, i32 0
  store i32 32769, i32* %17, align 8, !tbaa !6
  br label %18

; <label>:18                                      ; preds = %13, %0
  %19 = ptrtoint %struct.timex* %tx to i64
  %20 = call i64 (i64, ...)* @__syscall(i64 124, i64 %19, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %21 = call i64 @__syscall_ret(i64 %20) nounwind optsize
  %22 = icmp slt i64 %21, 0
  br i1 %22, label %36, label %23

; <label>:23                                      ; preds = %18
  %24 = icmp eq %struct.timeval* %out, null
  br i1 %24, label %36, label %25

; <label>:25                                      ; preds = %23
  %26 = getelementptr inbounds %struct.timex* %tx, i64 0, i32 1
  %27 = load i64* %26, align 8, !tbaa !5
  %28 = sdiv i64 %27, 1000000
  %29 = getelementptr inbounds %struct.timeval* %out, i64 0, i32 0
  store i64 %28, i64* %29, align 8, !tbaa !5
  %30 = srem i64 %27, 1000000
  %31 = getelementptr inbounds %struct.timeval* %out, i64 0, i32 1
  store i64 %30, i64* %31, align 8, !tbaa !5
  %32 = icmp slt i64 %30, 0
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %25
  %34 = add nsw i64 %28, -1
  store i64 %34, i64* %29, align 8, !tbaa !5
  %35 = add nsw i64 %30, 1000000
  store i64 %35, i64* %31, align 8, !tbaa !5
  br label %36

; <label>:36                                      ; preds = %33, %25, %23, %18, %11
  %.0 = phi i32 [ -1, %11 ], [ -1, %18 ], [ 0, %23 ], [ 0, %25 ], [ 0, %33 ]
  ret i32 %.0
}

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

declare i32* @__errno_location() nounwind readnone optsize

define i32 @adjtimex(%struct.timex.0* %tx) nounwind uwtable optsize {
  %1 = ptrtoint %struct.timex.0* %tx to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 124, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @aio_cancel(i32 %fd, %struct.aiocb* %cb) nounwind uwtable readonly optsize {
  %1 = icmp eq %struct.aiocb* %cb, null
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.aiocb* %cb, i64 0, i32 8
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 115
  %6 = select i1 %5, i32 1, i32 2
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i32 [ %6, %2 ], [ 1, %0 ]
  ret i32 %.0
}

define i32 @aio_error(%struct.aiocb.2* nocapture %cb) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.aiocb.2* %cb, i64 0, i32 8
  %2 = load i32* %1, align 4, !tbaa !6
  ret i32 %2
}

define i32 @aio_fsync(i32 %op, %struct.aiocb.7* nocapture %cb) nounwind uwtable optsize {
  %1 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %1, align 4, !tbaa !6
  ret i32 -1
}

define i64 @aio_return(%struct.aiocb.12* nocapture %cb) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.aiocb.12* %cb, i64 0, i32 9
  %2 = load i64* %1, align 8, !tbaa !5
  ret i64 %2
}

define void @__aio_wake() nounwind uwtable optsize {
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %6, %0
  %1 = load volatile i32* @seq, align 4, !tbaa !6
  %2 = add nsw i32 %1, 1
  br label %3

; <label>:3                                       ; preds = %6, %a_cas.exit.i.i
  %4 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %1, i32 %2, i32* @seq) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %a_inc.exit, label %6

; <label>:6                                       ; preds = %3
  %7 = load volatile i32* @seq, align 4, !tbaa !6
  %8 = icmp eq i32 %7, %1
  br i1 %8, label %3, label %a_cas.exit.i.i

a_inc.exit:                                       ; preds = %3
  tail call void @__wake(i32* @seq, i32 -1, i32 1) nounwind optsize
  ret void
}

define i32 @aio_suspend(%struct.aiocb.17** nocapture %cbs, i32 %cnt, %struct.timespec* %ts) nounwind uwtable optsize {
  %at = alloca %struct.timespec, align 8
  %1 = icmp slt i32 %cnt, 0
  br i1 %1, label %8, label %.preheader

.preheader:                                       ; preds = %0
  %2 = icmp eq %struct.timespec* %ts, null
  %3 = icmp ne %struct.timespec* %ts, null
  %at. = select i1 %3, %struct.timespec* %at, %struct.timespec* null
  %4 = getelementptr inbounds %struct.timespec* %ts, i64 0, i32 0
  %5 = getelementptr inbounds %struct.timespec* %at, i64 0, i32 0
  %6 = getelementptr inbounds %struct.timespec* %ts, i64 0, i32 1
  %7 = getelementptr inbounds %struct.timespec* %at, i64 0, i32 1
  br label %10

; <label>:8                                       ; preds = %0
  %9 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %9, align 4, !tbaa !6
  br label %.loopexit

; <label>:10                                      ; preds = %38, %.preheader
  %first.0 = phi i32 [ %first.1, %38 ], [ 1, %.preheader ]
  %11 = load volatile i32* @seq, align 4, !tbaa !6
  br label %12

; <label>:12                                      ; preds = %23, %10
  %indvars.iv = phi i64 [ %indvars.iv.next, %23 ], [ 0, %10 ]
  %13 = trunc i64 %indvars.iv to i32
  %14 = icmp slt i32 %13, %cnt
  br i1 %14, label %15, label %24

; <label>:15                                      ; preds = %12
  %16 = getelementptr inbounds %struct.aiocb.17** %cbs, i64 %indvars.iv
  %17 = load %struct.aiocb.17** %16, align 8, !tbaa !7
  %18 = icmp eq %struct.aiocb.17* %17, null
  br i1 %18, label %23, label %19

; <label>:19                                      ; preds = %15
  %20 = getelementptr inbounds %struct.aiocb.17* %17, i64 0, i32 8
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = icmp eq i32 %21, 115
  br i1 %22, label %23, label %.loopexit

; <label>:23                                      ; preds = %19, %15
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %12

; <label>:24                                      ; preds = %12
  %25 = icmp eq i32 %first.0, 0
  %or.cond = or i1 %25, %2
  br i1 %or.cond, label %38, label %26

; <label>:26                                      ; preds = %24
  %27 = call i32 bitcast (i32 (i32, %struct.timespec.29*)* @clock_gettime to i32 (i32, %struct.timespec*)*)(i32 1, %struct.timespec* %at) nounwind optsize
  %28 = load i64* %4, align 8, !tbaa !5
  %29 = load i64* %5, align 8, !tbaa !5
  %30 = add nsw i64 %29, %28
  store i64 %30, i64* %5, align 8, !tbaa !5
  %31 = load i64* %6, align 8, !tbaa !5
  %32 = load i64* %7, align 8, !tbaa !5
  %33 = add nsw i64 %32, %31
  store i64 %33, i64* %7, align 8, !tbaa !5
  %34 = icmp sgt i64 %33, 999999999
  br i1 %34, label %35, label %38

; <label>:35                                      ; preds = %26
  %36 = add nsw i64 %33, -1000000000
  store i64 %36, i64* %7, align 8, !tbaa !5
  %37 = add nsw i64 %30, 1
  store i64 %37, i64* %5, align 8, !tbaa !5
  br label %38

; <label>:38                                      ; preds = %35, %26, %24
  %first.1 = phi i32 [ %first.0, %24 ], [ 0, %35 ], [ 0, %26 ]
  %39 = call i32 @__timedwait(i32* @seq, i32 %11, i32 1, %struct.timespec* %at., void (i8*)* null, i8* null, i32 1) nounwind optsize
  %40 = icmp eq i32 %39, 110
  %ret.0 = select i1 %40, i32 11, i32 %39
  %41 = icmp eq i32 %ret.0, 0
  br i1 %41, label %10, label %42

; <label>:42                                      ; preds = %38
  %43 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %ret.0, i32* %43, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %42, %19, %8
  %.0 = phi i32 [ -1, %8 ], [ -1, %42 ], [ 0, %19 ]
  ret i32 %.0
}

define i32 @alarm(i32 %seconds) nounwind uwtable optsize {
  %1 = zext i32 %seconds to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 27, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @alphasort(%struct.dirent** nocapture %a, %struct.dirent** nocapture %b) nounwind uwtable optsize {
  %1 = load %struct.dirent** %a, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.dirent* %1, i64 0, i32 4, i64 0
  %3 = load %struct.dirent** %b, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.dirent* %3, i64 0, i32 4, i64 0
  %5 = tail call i32 @strcoll(i8* %2, i8* %4) nounwind optsize
  ret i32 %5
}

define i8* @__asctime(%struct.tm* nocapture %tm, i8* %buf) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 6
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = add nsw i32 %2, 131072
  %4 = tail call i8* @__langinfo(i32 %3) nounwind optsize
  %5 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 4
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = add nsw i32 %6, 131086
  %8 = tail call i8* @__langinfo(i32 %7) nounwind optsize
  %9 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 3
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 2
  %12 = load i32* %11, align 4, !tbaa !6
  %13 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 1
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 0
  %16 = load i32* %15, align 4, !tbaa !6
  %17 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 5
  %18 = load i32* %17, align 4, !tbaa !6
  %19 = add nsw i32 %18, 1900
  %20 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %buf, i64 26, i8* getelementptr inbounds ([32 x i8]* @.str, i64 0, i64 0), i8* %4, i8* %8, i32 %10, i32 %12, i32 %14, i32 %16, i32 %19) nounwind optsize
  %21 = icmp sgt i32 %20, 25
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %0
  store volatile i8 0, i8* null, align 536870912, !tbaa !0
  br label %23

; <label>:23                                      ; preds = %22, %0
  ret i8* %buf
}

define i8* @asctime(%struct.tm* %tm) nounwind uwtable optsize {
  %1 = tail call i8* @__asctime(%struct.tm* %tm, i8* getelementptr inbounds ([26 x i8]* @asctime.buf, i64 0, i64 0)) nounwind optsize
  ret i8* %1
}

define i8* @asctime_r(%struct.tm* %tm, i8* %buf) nounwind uwtable optsize {
  %1 = tail call i8* @__asctime(%struct.tm* %tm, i8* %buf) nounwind optsize
  ret i8* %1
}

define float @asinf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1065353215
  br i1 %3, label %4, label %13

; <label>:4                                       ; preds = %0
  %5 = icmp eq i32 %2, 1065353216
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %4
  %7 = fpext float %x to double
  %8 = fmul double %7, 0x3FF921FB54442D18
  %9 = fptrunc double %8 to float
  br label %54

; <label>:10                                      ; preds = %4
  %11 = fsub float %x, %x
  %12 = fdiv float %11, %11
  br label %54

; <label>:13                                      ; preds = %0
  %14 = icmp ult i32 %2, 1056964608
  br i1 %14, label %15, label %31

; <label>:15                                      ; preds = %13
  %16 = icmp ult i32 %2, 964689920
  %17 = fadd float %x, 0x46293E5940000000
  %18 = fcmp ogt float %17, 1.000000e+00
  %or.cond = and i1 %16, %18
  br i1 %or.cond, label %54, label %19

; <label>:19                                      ; preds = %15
  %20 = fmul float %x, %x
  %21 = fmul float %20, 0xBF81BA6D60000000
  %22 = fadd float %21, 0xBFA5E27740000000
  %23 = fmul float %20, %22
  %24 = fadd float %23, 0x3FC5554EA0000000
  %25 = fmul float %20, %24
  %26 = fmul float %20, 0xBFE69CB5C0000000
  %27 = fadd float %26, 1.000000e+00
  %28 = fdiv float %25, %27
  %29 = fmul float %28, %x
  %30 = fadd float %29, %x
  br label %54

; <label>:31                                      ; preds = %13
  %32 = tail call float @fabsf(float %x) nounwind optsize
  %33 = fsub float 1.000000e+00, %32
  %34 = fmul float %33, 5.000000e-01
  %35 = fmul float %34, 0xBF81BA6D60000000
  %36 = fadd float %35, 0xBFA5E27740000000
  %37 = fmul float %34, %36
  %38 = fadd float %37, 0x3FC5554EA0000000
  %39 = fmul float %34, %38
  %40 = fmul float %34, 0xBFE69CB5C0000000
  %41 = fadd float %40, 1.000000e+00
  %42 = fpext float %34 to double
  %43 = tail call double @sqrt(double %42) nounwind optsize
  %44 = fdiv float %39, %41
  %45 = fpext float %44 to double
  %46 = fmul double %43, %45
  %47 = fadd double %43, %46
  %48 = fmul double %47, 2.000000e+00
  %49 = fsub double 0x3FF921FB54442D18, %48
  %50 = fptrunc double %49 to float
  %51 = icmp sgt i32 %1, 0
  br i1 %51, label %54, label %52

; <label>:52                                      ; preds = %31
  %53 = fsub float -0.000000e+00, %50
  br label %54

; <label>:54                                      ; preds = %52, %31, %19, %15, %10, %6
  %.0 = phi float [ %9, %6 ], [ %12, %10 ], [ %30, %19 ], [ %53, %52 ], [ %x, %15 ], [ %50, %31 ]
  ret float %.0
}

define float @asinhf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fadd float %x, %x
  br label %41

; <label>:6                                       ; preds = %0
  %7 = icmp ult i32 %2, 830472192
  %8 = fadd float %x, 0x46293E5940000000
  %9 = fcmp ogt float %8, 1.000000e+00
  %or.cond = and i1 %7, %9
  br i1 %or.cond, label %41, label %10

; <label>:10                                      ; preds = %6
  %11 = icmp ugt i32 %2, 1300234240
  br i1 %11, label %12, label %16

; <label>:12                                      ; preds = %10
  %13 = tail call float @fabsf(float %x) nounwind optsize
  %14 = tail call float @logf(float %13) nounwind optsize
  %15 = fadd float %14, 0x3FE62E4300000000
  br label %37

; <label>:16                                      ; preds = %10
  %17 = icmp ugt i32 %2, 1073741824
  br i1 %17, label %18, label %28

; <label>:18                                      ; preds = %16
  %19 = tail call float @fabsf(float %x) nounwind optsize
  %20 = fmul float %19, 2.000000e+00
  %21 = fmul float %x, %x
  %22 = fadd float %21, 1.000000e+00
  %23 = tail call float @sqrtf(float %22) nounwind optsize
  %24 = fadd float %23, %19
  %25 = fdiv float 1.000000e+00, %24
  %26 = fadd float %20, %25
  %27 = tail call float @logf(float %26) nounwind optsize
  br label %37

; <label>:28                                      ; preds = %16
  %29 = fmul float %x, %x
  %30 = tail call float @fabsf(float %x) nounwind optsize
  %31 = fadd float %29, 1.000000e+00
  %32 = tail call float @sqrtf(float %31) nounwind optsize
  %33 = fadd float %32, 1.000000e+00
  %34 = fdiv float %29, %33
  %35 = fadd float %30, %34
  %36 = tail call float @log1pf(float %35) nounwind optsize
  br label %37

; <label>:37                                      ; preds = %28, %18, %12
  %w.0 = phi float [ %15, %12 ], [ %27, %18 ], [ %36, %28 ]
  %38 = icmp sgt i32 %1, 0
  br i1 %38, label %41, label %39

; <label>:39                                      ; preds = %37
  %40 = fsub float -0.000000e+00, %w.0
  br label %41

; <label>:41                                      ; preds = %39, %37, %6, %4
  %.0 = phi float [ %5, %4 ], [ %40, %39 ], [ %x, %6 ], [ %w.0, %37 ]
  ret float %.0
}

define x86_fp80 @asinhl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp eq i32 %4, 32767
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = fadd x86_fp80 %x, %x
  br label %45

; <label>:8                                       ; preds = %0
  %9 = icmp ult i32 %4, 16350
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %8
  %11 = fadd x86_fp80 %x, 0xK7F94AE9204275937A4C1
  %12 = fcmp ogt x86_fp80 %11, 0xK3FFF8000000000000000
  br i1 %12, label %45, label %13

; <label>:13                                      ; preds = %10, %8
  %14 = icmp ugt i32 %4, 16416
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %13
  %16 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %17 = tail call x86_fp80 @logl(x86_fp80 %16) nounwind optsize
  %18 = fadd x86_fp80 %17, 0xK3FFEB17217F7D1CF79AC
  br label %40

; <label>:19                                      ; preds = %13
  %20 = icmp ugt i32 %4, 16384
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %19
  %22 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %23 = fmul x86_fp80 %22, 0xK40008000000000000000
  %24 = fmul x86_fp80 %x, %x
  %25 = fadd x86_fp80 %24, 0xK3FFF8000000000000000
  %26 = tail call x86_fp80 @sqrtl(x86_fp80 %25) nounwind optsize
  %27 = fadd x86_fp80 %26, %22
  %28 = fdiv x86_fp80 0xK3FFF8000000000000000, %27
  %29 = fadd x86_fp80 %23, %28
  %30 = tail call x86_fp80 @logl(x86_fp80 %29) nounwind optsize
  br label %40

; <label>:31                                      ; preds = %19
  %32 = fmul x86_fp80 %x, %x
  %33 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %34 = fadd x86_fp80 %32, 0xK3FFF8000000000000000
  %35 = tail call x86_fp80 @sqrtl(x86_fp80 %34) nounwind optsize
  %36 = fadd x86_fp80 %35, 0xK3FFF8000000000000000
  %37 = fdiv x86_fp80 %32, %36
  %38 = fadd x86_fp80 %33, %37
  %39 = tail call x86_fp80 @log1pl(x86_fp80 %38) nounwind optsize
  br label %40

; <label>:40                                      ; preds = %31, %21, %15
  %w.0 = phi x86_fp80 [ %18, %15 ], [ %30, %21 ], [ %39, %31 ]
  %41 = and i32 %3, 32768
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %45, label %43

; <label>:43                                      ; preds = %40
  %44 = fsub x86_fp80 0xK80000000000000000000, %w.0
  br label %45

; <label>:45                                      ; preds = %43, %40, %10, %6
  %.0 = phi x86_fp80 [ %7, %6 ], [ %44, %43 ], [ %x, %10 ], [ %w.0, %40 ]
  ret x86_fp80 %.0
}

define double @asinh(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = fadd double %x, %x
  br label %44

; <label>:8                                       ; preds = %0
  %9 = icmp ult i32 %4, 1043333120
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %8
  %11 = fadd double %x, 1.000000e+300
  %12 = fcmp ogt double %11, 1.000000e+00
  br i1 %12, label %44, label %13

; <label>:13                                      ; preds = %10, %8
  %14 = icmp ugt i32 %4, 1102053376
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %13
  %16 = tail call double @fabs(double %x) nounwind optsize
  %17 = tail call double @log(double %16) nounwind optsize
  %18 = fadd double %17, 0x3FE62E42FEFA39EF
  br label %40

; <label>:19                                      ; preds = %13
  %20 = icmp ugt i32 %4, 1073741824
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %19
  %22 = tail call double @fabs(double %x) nounwind optsize
  %23 = fmul double %22, 2.000000e+00
  %24 = fmul double %x, %x
  %25 = fadd double %24, 1.000000e+00
  %26 = tail call double @sqrt(double %25) nounwind optsize
  %27 = fadd double %26, %22
  %28 = fdiv double 1.000000e+00, %27
  %29 = fadd double %23, %28
  %30 = tail call double @log(double %29) nounwind optsize
  br label %40

; <label>:31                                      ; preds = %19
  %32 = fmul double %x, %x
  %33 = tail call double @fabs(double %x) nounwind optsize
  %34 = fadd double %32, 1.000000e+00
  %35 = tail call double @sqrt(double %34) nounwind optsize
  %36 = fadd double %35, 1.000000e+00
  %37 = fdiv double %32, %36
  %38 = fadd double %33, %37
  %39 = tail call double @log1p(double %38) nounwind optsize
  br label %40

; <label>:40                                      ; preds = %31, %21, %15
  %w.0 = phi double [ %18, %15 ], [ %30, %21 ], [ %39, %31 ]
  %41 = icmp sgt i32 %3, 0
  br i1 %41, label %44, label %42

; <label>:42                                      ; preds = %40
  %43 = fsub double -0.000000e+00, %w.0
  br label %44

; <label>:44                                      ; preds = %42, %40, %10, %6
  %.0 = phi double [ %7, %6 ], [ %43, %42 ], [ %x, %10 ], [ %w.0, %40 ]
  ret double %.0
}

define x86_fp80 @asinl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 48
  %.tr = trunc i80 %2 to i32
  %sext = ashr i32 %.tr, 16
  %3 = and i32 %sext, 32767
  %4 = icmp ugt i32 %3, 16382
  br i1 %4, label %5, label %24

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %3, 16383
  br i1 %6, label %7, label %21

; <label>:7                                       ; preds = %5
  %8 = lshr i80 %1, 32
  %9 = trunc i80 %8 to i64
  %10 = and i64 %9, 2147483647
  %11 = trunc i80 %1 to i64
  %12 = and i64 %11, 4294967295
  %13 = or i64 %10, %12
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %21

; <label>:15                                      ; preds = %7
  %16 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %17 = fmul x86_fp80 %16, %x
  %18 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %19 = fmul x86_fp80 %18, %x
  %20 = fadd x86_fp80 %17, %19
  br label %145

; <label>:21                                      ; preds = %7, %5
  %22 = fsub x86_fp80 %x, %x
  %23 = fdiv x86_fp80 %22, %22
  br label %145

; <label>:24                                      ; preds = %0
  %25 = icmp ult i32 %3, 16382
  br i1 %25, label %26, label %71

; <label>:26                                      ; preds = %24
  %27 = icmp ult i32 %3, 16351
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %26
  %29 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %30 = fcmp ogt x86_fp80 %29, 0xK3FFF8000000000000000
  br i1 %30, label %145, label %31

; <label>:31                                      ; preds = %28, %26
  %32 = fmul x86_fp80 %x, %x
  %33 = load x86_fp80* @__pS0, align 16, !tbaa !4
  %34 = load x86_fp80* @__pS1, align 16, !tbaa !4
  %35 = load x86_fp80* @__pS2, align 16, !tbaa !4
  %36 = load x86_fp80* @__pS3, align 16, !tbaa !4
  %37 = load x86_fp80* @__pS4, align 16, !tbaa !4
  %38 = load x86_fp80* @__pS5, align 16, !tbaa !4
  %39 = load x86_fp80* @__pS6, align 16, !tbaa !4
  %40 = fmul x86_fp80 %39, %32
  %41 = fadd x86_fp80 %38, %40
  %42 = fmul x86_fp80 %41, %32
  %43 = fadd x86_fp80 %37, %42
  %44 = fmul x86_fp80 %43, %32
  %45 = fadd x86_fp80 %36, %44
  %46 = fmul x86_fp80 %45, %32
  %47 = fadd x86_fp80 %35, %46
  %48 = fmul x86_fp80 %47, %32
  %49 = fadd x86_fp80 %34, %48
  %50 = fmul x86_fp80 %49, %32
  %51 = fadd x86_fp80 %33, %50
  %52 = fmul x86_fp80 %51, %32
  %53 = load x86_fp80* @__qS1, align 16, !tbaa !4
  %54 = load x86_fp80* @__qS2, align 16, !tbaa !4
  %55 = load x86_fp80* @__qS3, align 16, !tbaa !4
  %56 = load x86_fp80* @__qS4, align 16, !tbaa !4
  %57 = load x86_fp80* @__qS5, align 16, !tbaa !4
  %58 = fmul x86_fp80 %57, %32
  %59 = fadd x86_fp80 %56, %58
  %60 = fmul x86_fp80 %59, %32
  %61 = fadd x86_fp80 %55, %60
  %62 = fmul x86_fp80 %61, %32
  %63 = fadd x86_fp80 %54, %62
  %64 = fmul x86_fp80 %63, %32
  %65 = fadd x86_fp80 %53, %64
  %66 = fmul x86_fp80 %65, %32
  %67 = fadd x86_fp80 %66, 0xK3FFF8000000000000000
  %68 = fdiv x86_fp80 %52, %67
  %69 = fmul x86_fp80 %68, %x
  %70 = fadd x86_fp80 %69, %x
  br label %145

; <label>:71                                      ; preds = %24
  %72 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %73 = fsub x86_fp80 0xK3FFF8000000000000000, %72
  %74 = fmul x86_fp80 %73, 0xK3FFE8000000000000000
  %75 = load x86_fp80* @__pS0, align 16, !tbaa !4
  %76 = load x86_fp80* @__pS1, align 16, !tbaa !4
  %77 = load x86_fp80* @__pS2, align 16, !tbaa !4
  %78 = load x86_fp80* @__pS3, align 16, !tbaa !4
  %79 = load x86_fp80* @__pS4, align 16, !tbaa !4
  %80 = load x86_fp80* @__pS5, align 16, !tbaa !4
  %81 = load x86_fp80* @__pS6, align 16, !tbaa !4
  %82 = fmul x86_fp80 %81, %74
  %83 = fadd x86_fp80 %80, %82
  %84 = fmul x86_fp80 %83, %74
  %85 = fadd x86_fp80 %79, %84
  %86 = fmul x86_fp80 %85, %74
  %87 = fadd x86_fp80 %78, %86
  %88 = fmul x86_fp80 %87, %74
  %89 = fadd x86_fp80 %77, %88
  %90 = fmul x86_fp80 %89, %74
  %91 = fadd x86_fp80 %76, %90
  %92 = fmul x86_fp80 %91, %74
  %93 = fadd x86_fp80 %75, %92
  %94 = fmul x86_fp80 %93, %74
  %95 = load x86_fp80* @__qS1, align 16, !tbaa !4
  %96 = load x86_fp80* @__qS2, align 16, !tbaa !4
  %97 = load x86_fp80* @__qS3, align 16, !tbaa !4
  %98 = load x86_fp80* @__qS4, align 16, !tbaa !4
  %99 = load x86_fp80* @__qS5, align 16, !tbaa !4
  %100 = fmul x86_fp80 %99, %74
  %101 = fadd x86_fp80 %98, %100
  %102 = fmul x86_fp80 %101, %74
  %103 = fadd x86_fp80 %97, %102
  %104 = fmul x86_fp80 %103, %74
  %105 = fadd x86_fp80 %96, %104
  %106 = fmul x86_fp80 %105, %74
  %107 = fadd x86_fp80 %95, %106
  %108 = fmul x86_fp80 %107, %74
  %109 = fadd x86_fp80 %108, 0xK3FFF8000000000000000
  %110 = tail call x86_fp80 @sqrtl(x86_fp80 %74) nounwind optsize
  %111 = and i80 %1, 18446744069414584320
  %112 = icmp ugt i80 %111, 17524406864870113280
  br i1 %112, label %113, label %122

; <label>:113                                     ; preds = %71
  %114 = fdiv x86_fp80 %94, %109
  %115 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %116 = fmul x86_fp80 %110, %114
  %117 = fadd x86_fp80 %110, %116
  %118 = fmul x86_fp80 %117, 0xK40008000000000000000
  %119 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %120 = fsub x86_fp80 %118, %119
  %121 = fsub x86_fp80 %115, %120
  br label %141

; <label>:122                                     ; preds = %71
  %123 = bitcast x86_fp80 %110 to i80
  %mask = and i80 %123, -4294967296
  %124 = bitcast i80 %mask to x86_fp80
  %125 = fmul x86_fp80 %124, %124
  %126 = fsub x86_fp80 %74, %125
  %127 = fadd x86_fp80 %110, %124
  %128 = fdiv x86_fp80 %126, %127
  %129 = fdiv x86_fp80 %94, %109
  %130 = fmul x86_fp80 %110, 0xK40008000000000000000
  %131 = fmul x86_fp80 %130, %129
  %132 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %133 = fmul x86_fp80 %128, 0xK40008000000000000000
  %134 = fsub x86_fp80 %132, %133
  %135 = fsub x86_fp80 %131, %134
  %136 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 1), align 16, !tbaa !4
  %137 = fmul x86_fp80 %124, 0xK40008000000000000000
  %138 = fsub x86_fp80 %136, %137
  %139 = fsub x86_fp80 %135, %138
  %140 = fsub x86_fp80 %136, %139
  br label %141

; <label>:141                                     ; preds = %122, %113
  %t.0 = phi x86_fp80 [ %121, %113 ], [ %140, %122 ]
  %142 = icmp sgt i32 %sext, 0
  br i1 %142, label %145, label %143

; <label>:143                                     ; preds = %141
  %144 = fsub x86_fp80 0xK80000000000000000000, %t.0
  br label %145

; <label>:145                                     ; preds = %143, %141, %31, %28, %21, %15
  %.0 = phi x86_fp80 [ %20, %15 ], [ %23, %21 ], [ %70, %31 ], [ %144, %143 ], [ %x, %28 ], [ %t.0, %141 ]
  ret x86_fp80 %.0
}

define double @asin(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1072693247
  br i1 %5, label %6, label %18

; <label>:6                                       ; preds = %0
  %7 = trunc i64 %1 to i32
  %8 = add nsw i32 %4, -1072693248
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %6
  %12 = fmul double %x, 0x3FF921FB54442D18
  %13 = fmul double %x, 0x3C91A62633145C07
  %14 = fadd double %12, %13
  br label %103

; <label>:15                                      ; preds = %6
  %16 = fsub double %x, %x
  %17 = fdiv double %16, %16
  br label %103

; <label>:18                                      ; preds = %0
  %19 = icmp ult i32 %4, 1071644672
  br i1 %19, label %20, label %49

; <label>:20                                      ; preds = %18
  %21 = icmp ult i32 %4, 1045430272
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %20
  %23 = fadd double %x, 1.000000e+300
  %24 = fcmp ogt double %23, 1.000000e+00
  br i1 %24, label %103, label %25

; <label>:25                                      ; preds = %22, %20
  %26 = fmul double %x, %x
  %27 = fmul double %26, 0x3F023DE10DFDF709
  %28 = fadd double %27, 0x3F49EFE07501B288
  %29 = fmul double %26, %28
  %30 = fadd double %29, 0xBFA48228B5688F3B
  %31 = fmul double %26, %30
  %32 = fadd double %31, 0x3FC9C1550E884455
  %33 = fmul double %26, %32
  %34 = fadd double %33, 0xBFD4D61203EB6F7D
  %35 = fmul double %26, %34
  %36 = fadd double %35, 0x3FC5555555555555
  %37 = fmul double %26, %36
  %38 = fmul double %26, 0x3FB3B8C5B12E9282
  %39 = fadd double %38, 0xBFE6066C1B8D0159
  %40 = fmul double %26, %39
  %41 = fadd double %40, 0x40002AE59C598AC8
  %42 = fmul double %26, %41
  %43 = fadd double %42, 0xC0033A271C8A2D4B
  %44 = fmul double %26, %43
  %45 = fadd double %44, 1.000000e+00
  %46 = fdiv double %37, %45
  %47 = fmul double %46, %x
  %48 = fadd double %47, %x
  br label %103

; <label>:49                                      ; preds = %18
  %50 = tail call double @fabs(double %x) nounwind optsize
  %51 = fsub double 1.000000e+00, %50
  %52 = fmul double %51, 5.000000e-01
  %53 = fmul double %52, 0x3F023DE10DFDF709
  %54 = fadd double %53, 0x3F49EFE07501B288
  %55 = fmul double %52, %54
  %56 = fadd double %55, 0xBFA48228B5688F3B
  %57 = fmul double %52, %56
  %58 = fadd double %57, 0x3FC9C1550E884455
  %59 = fmul double %52, %58
  %60 = fadd double %59, 0xBFD4D61203EB6F7D
  %61 = fmul double %52, %60
  %62 = fadd double %61, 0x3FC5555555555555
  %63 = fmul double %52, %62
  %64 = fmul double %52, 0x3FB3B8C5B12E9282
  %65 = fadd double %64, 0xBFE6066C1B8D0159
  %66 = fmul double %52, %65
  %67 = fadd double %66, 0x40002AE59C598AC8
  %68 = fmul double %52, %67
  %69 = fadd double %68, 0xC0033A271C8A2D4B
  %70 = fmul double %52, %69
  %71 = fadd double %70, 1.000000e+00
  %72 = tail call double @sqrt(double %52) nounwind optsize
  %73 = icmp ugt i32 %4, 1072640818
  br i1 %73, label %74, label %81

; <label>:74                                      ; preds = %49
  %75 = fdiv double %63, %71
  %76 = fmul double %72, %75
  %77 = fadd double %72, %76
  %78 = fmul double %77, 2.000000e+00
  %79 = fadd double %78, 0xBC91A62633145C07
  %80 = fsub double 0x3FF921FB54442D18, %79
  br label %99

; <label>:81                                      ; preds = %49
  %82 = bitcast double %72 to i64
  %83 = and i64 %82, -4294967296
  %84 = bitcast i64 %83 to double
  %85 = fmul double %84, %84
  %86 = fsub double %52, %85
  %87 = fadd double %72, %84
  %88 = fdiv double %86, %87
  %89 = fdiv double %63, %71
  %90 = fmul double %72, 2.000000e+00
  %91 = fmul double %90, %89
  %92 = fmul double %88, 2.000000e+00
  %93 = fsub double 0x3C91A62633145C07, %92
  %94 = fsub double %91, %93
  %95 = fmul double %84, 2.000000e+00
  %96 = fsub double 0x3FE921FB54442D18, %95
  %97 = fsub double %94, %96
  %98 = fsub double 0x3FE921FB54442D18, %97
  br label %99

; <label>:99                                      ; preds = %81, %74
  %t.0 = phi double [ %80, %74 ], [ %98, %81 ]
  %100 = icmp sgt i32 %3, 0
  br i1 %100, label %103, label %101

; <label>:101                                     ; preds = %99
  %102 = fsub double -0.000000e+00, %t.0
  br label %103

; <label>:103                                     ; preds = %101, %99, %25, %22, %15, %11
  %.0 = phi double [ %14, %11 ], [ %17, %15 ], [ %48, %25 ], [ %102, %101 ], [ %x, %22 ], [ %t.0, %99 ]
  ret double %.0
}

define i32 @asprintf(i8** %s, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vasprintf(i8** %s, i8* %fmt, %struct.__va_list_tag* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

declare void @llvm.va_start(i8*) nounwind

declare void @llvm.va_end(i8*) nounwind

define void @__assert_fail(i8* %expr, i8* %file, i32 %line, i8* %func) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %2 = tail call i32 (%struct.__FILE_s*, i8*, ...)* @fprintf(%struct.__FILE_s* %1, i8* getelementptr inbounds ([35 x i8]* @.str2, i64 0, i64 0), i8* %expr, i8* %file, i8* %func, i32 %line) nounwind optsize
  %3 = tail call i32 bitcast (i32 (%struct.__FILE_s.67*)* @fflush to i32 (%struct.__FILE_s*)*)(%struct.__FILE_s* null) nounwind optsize
  tail call void @abort() nounwind optsize
  ret void
}

define float @atan2f(float %y, float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = bitcast float %y to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %2, 2139095040
  %6 = icmp ugt i32 %4, 2139095040
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %7, label %9

; <label>:7                                       ; preds = %0
  %8 = fadd float %x, %y
  br label %90

; <label>:9                                       ; preds = %0
  %10 = icmp eq i32 %1, 1065353216
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %9
  %12 = tail call float @atanf(float %y) nounwind optsize
  br label %90

; <label>:13                                      ; preds = %9
  %14 = lshr i32 %3, 31
  %15 = lshr i32 %1, 30
  %16 = and i32 %15, 2
  %17 = or i32 %16, %14
  %18 = icmp eq i32 %4, 0
  br i1 %18, label %19, label %26

; <label>:19                                      ; preds = %13
  switch i32 %17, label %26 [
    i32 0, label %90
    i32 1, label %90
    i32 2, label %20
    i32 3, label %23
  ]

; <label>:20                                      ; preds = %19
  %21 = load volatile float* @tiny, align 4, !tbaa !2
  %22 = fadd float %21, 0x400921FB60000000
  br label %90

; <label>:23                                      ; preds = %19
  %24 = load volatile float* @tiny, align 4, !tbaa !2
  %25 = fsub float 0xC00921FB60000000, %24
  br label %90

; <label>:26                                      ; preds = %19, %13
  switch i32 %2, label %57 [
    i32 0, label %27
    i32 2139095040, label %34
  ]

; <label>:27                                      ; preds = %26
  %28 = icmp slt i32 %3, 0
  %29 = load volatile float* @tiny, align 4, !tbaa !2
  br i1 %28, label %30, label %32

; <label>:30                                      ; preds = %27
  %31 = fsub float 0xBFF921FB60000000, %29
  br label %90

; <label>:32                                      ; preds = %27
  %33 = fadd float %29, 0x3FF921FB60000000
  br label %90

; <label>:34                                      ; preds = %26
  %35 = icmp eq i32 %4, 2139095040
  br i1 %35, label %36, label %49

; <label>:36                                      ; preds = %34
  switch i32 %17, label %.thread [
    i32 0, label %37
    i32 1, label %40
    i32 2, label %43
    i32 3, label %46
  ]

; <label>:37                                      ; preds = %36
  %38 = load volatile float* @tiny, align 4, !tbaa !2
  %39 = fadd float %38, 0x3FE921FB60000000
  br label %90

; <label>:40                                      ; preds = %36
  %41 = load volatile float* @tiny, align 4, !tbaa !2
  %42 = fsub float 0xBFE921FB60000000, %41
  br label %90

; <label>:43                                      ; preds = %36
  %44 = load volatile float* @tiny, align 4, !tbaa !2
  %45 = fadd float %44, 0x4002D97C80000000
  br label %90

; <label>:46                                      ; preds = %36
  %47 = load volatile float* @tiny, align 4, !tbaa !2
  %48 = fsub float 0xC002D97C80000000, %47
  br label %90

; <label>:49                                      ; preds = %34
  switch i32 %17, label %.thread4 [
    i32 0, label %90
    i32 1, label %50
    i32 2, label %51
    i32 3, label %54
  ]

; <label>:50                                      ; preds = %49
  br label %90

; <label>:51                                      ; preds = %49
  %52 = load volatile float* @tiny, align 4, !tbaa !2
  %53 = fadd float %52, 0x400921FB60000000
  br label %90

; <label>:54                                      ; preds = %49
  %55 = load volatile float* @tiny, align 4, !tbaa !2
  %56 = fsub float 0xC00921FB60000000, %55
  br label %90

; <label>:57                                      ; preds = %26
  %58 = icmp eq i32 %4, 2139095040
  br i1 %58, label %.thread, label %.thread4

.thread:                                          ; preds = %57, %36
  %59 = icmp slt i32 %3, 0
  %60 = load volatile float* @tiny, align 4, !tbaa !2
  br i1 %59, label %61, label %63

; <label>:61                                      ; preds = %.thread
  %62 = fsub float 0xBFF921FB60000000, %60
  br label %90

; <label>:63                                      ; preds = %.thread
  %64 = fadd float %60, 0x3FF921FB60000000
  br label %90

.thread4:                                         ; preds = %57, %49
  %65 = sub nsw i32 %4, %2
  %66 = ashr i32 %65, 23
  %67 = icmp sgt i32 %66, 26
  br i1 %67, label %68, label %72

; <label>:68                                      ; preds = %.thread4
  %69 = load volatile float* @pi_lo, align 4, !tbaa !2
  %70 = fmul float %69, 5.000000e-01
  %71 = fadd float %70, 0x3FF921FB60000000
  br label %79

; <label>:72                                      ; preds = %.thread4
  %73 = icmp slt i32 %66, -26
  %74 = icmp slt i32 %1, 0
  %or.cond3 = and i1 %73, %74
  br i1 %or.cond3, label %79, label %75

; <label>:75                                      ; preds = %72
  %76 = fdiv float %y, %x
  %77 = tail call float @fabsf(float %76) nounwind optsize
  %78 = tail call float @atanf(float %77) nounwind optsize
  br label %79

; <label>:79                                      ; preds = %75, %72, %68
  %z.0 = phi float [ %71, %68 ], [ %78, %75 ], [ 0.000000e+00, %72 ]
  %m.0 = phi i32 [ %14, %68 ], [ %17, %75 ], [ %17, %72 ]
  switch i32 %m.0, label %86 [
    i32 0, label %90
    i32 1, label %80
    i32 2, label %82
  ]

; <label>:80                                      ; preds = %79
  %81 = fsub float -0.000000e+00, %z.0
  br label %90

; <label>:82                                      ; preds = %79
  %83 = load volatile float* @pi_lo, align 4, !tbaa !2
  %84 = fsub float %z.0, %83
  %85 = fsub float 0x400921FB60000000, %84
  br label %90

; <label>:86                                      ; preds = %79
  %87 = load volatile float* @pi_lo, align 4, !tbaa !2
  %88 = fsub float %z.0, %87
  %89 = fadd float %88, 0xC00921FB60000000
  br label %90

; <label>:90                                      ; preds = %86, %82, %80, %79, %63, %61, %54, %51, %50, %49, %46, %43, %40, %37, %32, %30, %23, %20, %19, %19, %11, %7
  %.0 = phi float [ %8, %7 ], [ %12, %11 ], [ %89, %86 ], [ %85, %82 ], [ %81, %80 ], [ %48, %46 ], [ %45, %43 ], [ %42, %40 ], [ %39, %37 ], [ %56, %54 ], [ %53, %51 ], [ -0.000000e+00, %50 ], [ %25, %23 ], [ %22, %20 ], [ %y, %19 ], [ %y, %19 ], [ %31, %30 ], [ %33, %32 ], [ 0.000000e+00, %49 ], [ %62, %61 ], [ %64, %63 ], [ %z.0, %79 ]
  ret float %.0
}

define x86_fp80 @atan2l(x86_fp80 %y, x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %y to i80
  %2 = lshr i80 %1, 48
  %.tr = trunc i80 %2 to i32
  %sext = ashr i32 %.tr, 16
  %3 = and i32 %sext, 32767
  %4 = bitcast x86_fp80 %x to i80
  %5 = lshr i80 %4, 48
  %.tr7 = trunc i80 %5 to i32
  %sext5 = ashr i32 %.tr7, 16
  %6 = and i32 %sext5, 32767
  %7 = icmp eq i32 %6, 32767
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %0
  %9 = lshr i80 %4, 32
  %10 = trunc i80 %9 to i64
  %11 = and i64 %10, 2147483647
  %12 = trunc i80 %4 to i64
  %13 = and i64 %12, 4294967295
  %14 = or i64 %11, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %26

; <label>:16                                      ; preds = %8, %0
  %17 = icmp eq i32 %3, 32767
  br i1 %17, label %18, label %28

; <label>:18                                      ; preds = %16
  %19 = lshr i80 %1, 32
  %20 = trunc i80 %19 to i64
  %21 = and i64 %20, 2147483647
  %22 = trunc i80 %1 to i64
  %23 = and i64 %22, 4294967295
  %24 = or i64 %21, %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %28, label %26

; <label>:26                                      ; preds = %18, %8
  %27 = fadd x86_fp80 %x, %y
  br label %180

; <label>:28                                      ; preds = %18, %16
  %29 = icmp eq i32 %sext5, 16383
  br i1 %29, label %30, label %40

; <label>:30                                      ; preds = %28
  %31 = lshr i80 %4, 32
  %32 = trunc i80 %31 to i64
  %33 = and i64 %32, 2147483647
  %34 = trunc i80 %4 to i64
  %35 = and i64 %34, 4294967295
  %36 = or i64 %33, %35
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %40

; <label>:38                                      ; preds = %30
  %39 = tail call x86_fp80 @atanl(x86_fp80 %y) nounwind optsize
  br label %180

; <label>:40                                      ; preds = %30, %28
  %41 = lshr i80 %1, 79
  %42 = trunc i80 %41 to i32
  %43 = lshr i80 %4, 78
  %44 = trunc i80 %43 to i32
  %45 = and i32 %44, 2
  %46 = or i32 %45, %42
  %47 = icmp eq i32 %3, 0
  br i1 %47, label %48, label %74

; <label>:48                                      ; preds = %40
  %49 = lshr i80 %1, 32
  %50 = trunc i80 %49 to i64
  %51 = and i64 %50, 2147483647
  %52 = trunc i80 %1 to i64
  %53 = and i64 %52, 4294967295
  %54 = or i64 %51, %53
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %74

; <label>:56                                      ; preds = %48
  switch i32 %46, label %74 [
    i32 0, label %180
    i32 1, label %180
    i32 2, label %57
    i32 3, label %65
  ]

; <label>:57                                      ; preds = %56
  %58 = load volatile double* @pi13, align 8, !tbaa !3
  %59 = fpext double %58 to x86_fp80
  %60 = load volatile double* @pi24, align 8, !tbaa !3
  %61 = fpext double %60 to x86_fp80
  %62 = fadd x86_fp80 %59, %61
  %63 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %64 = fadd x86_fp80 %62, %63
  br label %180

; <label>:65                                      ; preds = %56
  %66 = load volatile double* @pi13, align 8, !tbaa !3
  %67 = fpext double %66 to x86_fp80
  %68 = load volatile double* @pi24, align 8, !tbaa !3
  %69 = fpext double %68 to x86_fp80
  %70 = fadd x86_fp80 %67, %69
  %71 = fsub x86_fp80 0xK80000000000000000000, %70
  %72 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %73 = fsub x86_fp80 %71, %72
  br label %180

; <label>:74                                      ; preds = %56, %48, %40
  %75 = icmp eq i32 %6, 0
  br i1 %75, label %76, label %94

; <label>:76                                      ; preds = %74
  %77 = lshr i80 %4, 32
  %78 = trunc i80 %77 to i64
  %79 = and i64 %78, 2147483647
  %80 = trunc i80 %4 to i64
  %81 = and i64 %80, 4294967295
  %82 = or i64 %79, %81
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %94

; <label>:84                                      ; preds = %76
  %85 = icmp slt i32 %sext, 0
  %86 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  br i1 %85, label %87, label %91

; <label>:87                                      ; preds = %84
  %88 = fsub x86_fp80 0xK80000000000000000000, %86
  %89 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %90 = fsub x86_fp80 %88, %89
  br label %180

; <label>:91                                      ; preds = %84
  %92 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %93 = fadd x86_fp80 %86, %92
  br label %180

; <label>:94                                      ; preds = %76, %74
  br i1 %7, label %95, label %136

; <label>:95                                      ; preds = %94
  br i1 %17, label %96, label %117

; <label>:96                                      ; preds = %95
  switch i32 %46, label %.thread [
    i32 0, label %97
    i32 1, label %102
    i32 2, label %107
    i32 3, label %112
  ]

; <label>:97                                      ; preds = %96
  %98 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %99 = fmul x86_fp80 %98, 0xK3FFE8000000000000000
  %100 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %101 = fadd x86_fp80 %99, %100
  br label %180

; <label>:102                                     ; preds = %96
  %103 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %104 = fmul x86_fp80 %103, 0xKBFFE8000000000000000
  %105 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %106 = fsub x86_fp80 %104, %105
  br label %180

; <label>:107                                     ; preds = %96
  %108 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %109 = fmul x86_fp80 %108, 0xK3FFFC000000000000000
  %110 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %111 = fadd x86_fp80 %109, %110
  br label %180

; <label>:112                                     ; preds = %96
  %113 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %114 = fmul x86_fp80 %113, 0xKBFFFC000000000000000
  %115 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %116 = fsub x86_fp80 %114, %115
  br label %180

; <label>:117                                     ; preds = %95
  switch i32 %46, label %.thread10 [
    i32 0, label %180
    i32 1, label %118
    i32 2, label %119
    i32 3, label %127
  ]

; <label>:118                                     ; preds = %117
  br label %180

; <label>:119                                     ; preds = %117
  %120 = load volatile double* @pi13, align 8, !tbaa !3
  %121 = fpext double %120 to x86_fp80
  %122 = load volatile double* @pi24, align 8, !tbaa !3
  %123 = fpext double %122 to x86_fp80
  %124 = fadd x86_fp80 %121, %123
  %125 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %126 = fadd x86_fp80 %124, %125
  br label %180

; <label>:127                                     ; preds = %117
  %128 = load volatile double* @pi13, align 8, !tbaa !3
  %129 = fpext double %128 to x86_fp80
  %130 = load volatile double* @pi24, align 8, !tbaa !3
  %131 = fpext double %130 to x86_fp80
  %132 = fadd x86_fp80 %129, %131
  %133 = fsub x86_fp80 0xK80000000000000000000, %132
  %134 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %135 = fsub x86_fp80 %133, %134
  br label %180

; <label>:136                                     ; preds = %94
  br i1 %17, label %.thread, label %.thread10

.thread:                                          ; preds = %136, %96
  %137 = icmp slt i32 %sext, 0
  %138 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  br i1 %137, label %139, label %143

; <label>:139                                     ; preds = %.thread
  %140 = fsub x86_fp80 0xK80000000000000000000, %138
  %141 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %142 = fsub x86_fp80 %140, %141
  br label %180

; <label>:143                                     ; preds = %.thread
  %144 = load volatile x86_fp80* @tiny5, align 16, !tbaa !4
  %145 = fadd x86_fp80 %138, %144
  br label %180

.thread10:                                        ; preds = %136, %117
  %146 = sub nsw i32 %3, %6
  %147 = icmp sgt i32 %146, 66
  br i1 %147, label %148, label %152

; <label>:148                                     ; preds = %.thread10
  %149 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  %150 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %151 = fadd x86_fp80 %149, %150
  br label %159

; <label>:152                                     ; preds = %.thread10
  %153 = icmp slt i32 %sext5, 0
  %154 = icmp slt i32 %146, -66
  %or.cond = and i1 %153, %154
  br i1 %or.cond, label %159, label %155

; <label>:155                                     ; preds = %152
  %156 = fdiv x86_fp80 %y, %x
  %157 = tail call x86_fp80 @fabsl(x86_fp80 %156) nounwind optsize
  %158 = tail call x86_fp80 @atanl(x86_fp80 %157) nounwind optsize
  br label %159

; <label>:159                                     ; preds = %155, %152, %148
  %z.0 = phi x86_fp80 [ %151, %148 ], [ %158, %155 ], [ 0xK00000000000000000000, %152 ]
  %m.0 = phi i32 [ %42, %148 ], [ %46, %155 ], [ %46, %152 ]
  switch i32 %m.0, label %171 [
    i32 0, label %180
    i32 1, label %160
    i32 2, label %162
  ]

; <label>:160                                     ; preds = %159
  %161 = fsub x86_fp80 0xK80000000000000000000, %z.0
  br label %180

; <label>:162                                     ; preds = %159
  %163 = load volatile double* @pi13, align 8, !tbaa !3
  %164 = fpext double %163 to x86_fp80
  %165 = load volatile double* @pi24, align 8, !tbaa !3
  %166 = fpext double %165 to x86_fp80
  %167 = fadd x86_fp80 %164, %166
  %168 = load x86_fp80* @__pi_lo, align 16, !tbaa !4
  %169 = fsub x86_fp80 %z.0, %168
  %170 = fsub x86_fp80 %167, %169
  br label %180

; <label>:171                                     ; preds = %159
  %172 = load x86_fp80* @__pi_lo, align 16, !tbaa !4
  %173 = fsub x86_fp80 %z.0, %172
  %174 = load volatile double* @pi13, align 8, !tbaa !3
  %175 = fpext double %174 to x86_fp80
  %176 = load volatile double* @pi24, align 8, !tbaa !3
  %177 = fpext double %176 to x86_fp80
  %178 = fadd x86_fp80 %175, %177
  %179 = fsub x86_fp80 %173, %178
  br label %180

; <label>:180                                     ; preds = %171, %162, %160, %159, %143, %139, %127, %119, %118, %117, %112, %107, %102, %97, %91, %87, %65, %57, %56, %56, %38, %26
  %.0 = phi x86_fp80 [ %27, %26 ], [ %39, %38 ], [ %179, %171 ], [ %170, %162 ], [ %161, %160 ], [ %116, %112 ], [ %111, %107 ], [ %106, %102 ], [ %101, %97 ], [ %135, %127 ], [ %126, %119 ], [ 0xK80000000000000000000, %118 ], [ %73, %65 ], [ %64, %57 ], [ %y, %56 ], [ %y, %56 ], [ %90, %87 ], [ %93, %91 ], [ 0xK00000000000000000000, %117 ], [ %142, %139 ], [ %145, %143 ], [ %z.0, %159 ]
  ret x86_fp80 %.0
}

define double @atan2(double %y, double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = bitcast double %y to i64
  %7 = lshr i64 %6, 32
  %8 = trunc i64 %7 to i32
  %9 = trunc i64 %6 to i32
  %10 = and i32 %8, 2147483647
  %11 = sub i32 0, %4
  %12 = or i32 %4, %11
  %13 = lshr i32 %12, 31
  %14 = or i32 %5, %13
  %15 = icmp ugt i32 %14, 2146435072
  br i1 %15, label %22, label %16

; <label>:16                                      ; preds = %0
  %17 = sub i32 0, %9
  %18 = or i32 %9, %17
  %19 = lshr i32 %18, 31
  %20 = or i32 %10, %19
  %21 = icmp ugt i32 %20, 2146435072
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %16, %0
  %23 = fadd double %x, %y
  br label %113

; <label>:24                                      ; preds = %16
  %25 = add nsw i32 %3, -1072693248
  %26 = or i32 %25, %4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

; <label>:28                                      ; preds = %24
  %29 = tail call double @atan(double %y) nounwind optsize
  br label %113

; <label>:30                                      ; preds = %24
  %31 = lshr i64 %6, 63
  %32 = trunc i64 %31 to i32
  %33 = lshr i64 %1, 62
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 2
  %36 = or i32 %35, %32
  %37 = or i32 %10, %9
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %46

; <label>:39                                      ; preds = %30
  switch i32 %36, label %46 [
    i32 0, label %113
    i32 1, label %113
    i32 2, label %40
    i32 3, label %43
  ]

; <label>:40                                      ; preds = %39
  %41 = load volatile double* @tiny6, align 8, !tbaa !3
  %42 = fadd double %41, 0x400921FB54442D18
  br label %113

; <label>:43                                      ; preds = %39
  %44 = load volatile double* @tiny6, align 8, !tbaa !3
  %45 = fsub double 0xC00921FB54442D18, %44
  br label %113

; <label>:46                                      ; preds = %39, %30
  %47 = or i32 %5, %4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %56

; <label>:49                                      ; preds = %46
  %50 = icmp slt i32 %8, 0
  %51 = load volatile double* @tiny6, align 8, !tbaa !3
  br i1 %50, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = fsub double 0xBFF921FB54442D18, %51
  br label %113

; <label>:54                                      ; preds = %49
  %55 = fadd double %51, 0x3FF921FB54442D18
  br label %113

; <label>:56                                      ; preds = %46
  %57 = icmp eq i32 %5, 2146435072
  %58 = icmp eq i32 %10, 2146435072
  br i1 %57, label %59, label %81

; <label>:59                                      ; preds = %56
  br i1 %58, label %60, label %73

; <label>:60                                      ; preds = %59
  switch i32 %36, label %.thread [
    i32 0, label %61
    i32 1, label %64
    i32 2, label %67
    i32 3, label %70
  ]

; <label>:61                                      ; preds = %60
  %62 = load volatile double* @tiny6, align 8, !tbaa !3
  %63 = fadd double %62, 0x3FE921FB54442D18
  br label %113

; <label>:64                                      ; preds = %60
  %65 = load volatile double* @tiny6, align 8, !tbaa !3
  %66 = fsub double 0xBFE921FB54442D18, %65
  br label %113

; <label>:67                                      ; preds = %60
  %68 = load volatile double* @tiny6, align 8, !tbaa !3
  %69 = fadd double %68, 0x4002D97C7F3321D2
  br label %113

; <label>:70                                      ; preds = %60
  %71 = load volatile double* @tiny6, align 8, !tbaa !3
  %72 = fsub double 0xC002D97C7F3321D2, %71
  br label %113

; <label>:73                                      ; preds = %59
  switch i32 %36, label %.thread5 [
    i32 0, label %113
    i32 1, label %74
    i32 2, label %75
    i32 3, label %78
  ]

; <label>:74                                      ; preds = %73
  br label %113

; <label>:75                                      ; preds = %73
  %76 = load volatile double* @tiny6, align 8, !tbaa !3
  %77 = fadd double %76, 0x400921FB54442D18
  br label %113

; <label>:78                                      ; preds = %73
  %79 = load volatile double* @tiny6, align 8, !tbaa !3
  %80 = fsub double 0xC00921FB54442D18, %79
  br label %113

; <label>:81                                      ; preds = %56
  br i1 %58, label %.thread, label %.thread5

.thread:                                          ; preds = %81, %60
  %82 = icmp slt i32 %8, 0
  %83 = load volatile double* @tiny6, align 8, !tbaa !3
  br i1 %82, label %84, label %86

; <label>:84                                      ; preds = %.thread
  %85 = fsub double 0xBFF921FB54442D18, %83
  br label %113

; <label>:86                                      ; preds = %.thread
  %87 = fadd double %83, 0x3FF921FB54442D18
  br label %113

.thread5:                                         ; preds = %81, %73
  %88 = sub nsw i32 %10, %5
  %89 = ashr i32 %88, 20
  %90 = icmp sgt i32 %89, 60
  br i1 %90, label %91, label %95

; <label>:91                                      ; preds = %.thread5
  %92 = load volatile double* @pi_lo7, align 8, !tbaa !3
  %93 = fmul double %92, 5.000000e-01
  %94 = fadd double %93, 0x3FF921FB54442D18
  br label %102

; <label>:95                                      ; preds = %.thread5
  %96 = icmp slt i32 %3, 0
  %97 = icmp slt i32 %89, -60
  %or.cond = and i1 %96, %97
  br i1 %or.cond, label %102, label %98

; <label>:98                                      ; preds = %95
  %99 = fdiv double %y, %x
  %100 = tail call double @fabs(double %99) nounwind optsize
  %101 = tail call double @atan(double %100) nounwind optsize
  br label %102

; <label>:102                                     ; preds = %98, %95, %91
  %z.0 = phi double [ %94, %91 ], [ %101, %98 ], [ 0.000000e+00, %95 ]
  %m.0 = phi i32 [ %32, %91 ], [ %36, %98 ], [ %36, %95 ]
  switch i32 %m.0, label %109 [
    i32 0, label %113
    i32 1, label %103
    i32 2, label %105
  ]

; <label>:103                                     ; preds = %102
  %104 = fsub double -0.000000e+00, %z.0
  br label %113

; <label>:105                                     ; preds = %102
  %106 = load volatile double* @pi_lo7, align 8, !tbaa !3
  %107 = fsub double %z.0, %106
  %108 = fsub double 0x400921FB54442D18, %107
  br label %113

; <label>:109                                     ; preds = %102
  %110 = load volatile double* @pi_lo7, align 8, !tbaa !3
  %111 = fsub double %z.0, %110
  %112 = fadd double %111, 0xC00921FB54442D18
  br label %113

; <label>:113                                     ; preds = %109, %105, %103, %102, %86, %84, %78, %75, %74, %73, %70, %67, %64, %61, %54, %52, %43, %40, %39, %39, %28, %22
  %.0 = phi double [ %23, %22 ], [ %29, %28 ], [ %112, %109 ], [ %108, %105 ], [ %104, %103 ], [ %72, %70 ], [ %69, %67 ], [ %66, %64 ], [ %63, %61 ], [ %80, %78 ], [ %77, %75 ], [ -0.000000e+00, %74 ], [ %45, %43 ], [ %42, %40 ], [ %y, %39 ], [ %y, %39 ], [ %53, %52 ], [ %55, %54 ], [ 0.000000e+00, %73 ], [ %85, %84 ], [ %87, %86 ], [ %z.0, %102 ]
  ret double %.0
}

define float @atanf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1283457023
  br i1 %3, label %4, label %15

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 2139095040
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %4
  %7 = fadd float %x, %x
  br label %74

; <label>:8                                       ; preds = %4
  %9 = icmp sgt i32 %1, 0
  %10 = load volatile float* getelementptr inbounds ([4 x float]* @atanlo, i64 0, i64 3), align 4, !tbaa !2
  br i1 %9, label %11, label %13

; <label>:11                                      ; preds = %8
  %12 = fadd float %10, 0x3FF921FB40000000
  br label %74

; <label>:13                                      ; preds = %8
  %14 = fsub float 0xBFF921FB40000000, %10
  br label %74

; <label>:15                                      ; preds = %0
  %16 = icmp ult i32 %2, 1054867456
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %15
  %18 = icmp ult i32 %2, 964689920
  %19 = fadd float %x, 0x46293E5940000000
  %20 = fcmp ogt float %19, 1.000000e+00
  %or.cond = and i1 %18, %20
  br i1 %or.cond, label %74, label %44

; <label>:21                                      ; preds = %15
  %22 = tail call float @fabsf(float %x) nounwind optsize
  %23 = icmp ult i32 %2, 1066926080
  br i1 %23, label %24, label %35

; <label>:24                                      ; preds = %21
  %25 = icmp ult i32 %2, 1060110336
  br i1 %25, label %26, label %31

; <label>:26                                      ; preds = %24
  %27 = fmul float %22, 2.000000e+00
  %28 = fadd float %27, -1.000000e+00
  %29 = fadd float %22, 2.000000e+00
  %30 = fdiv float %28, %29
  br label %44

; <label>:31                                      ; preds = %24
  %32 = fadd float %22, -1.000000e+00
  %33 = fadd float %22, 1.000000e+00
  %34 = fdiv float %32, %33
  br label %44

; <label>:35                                      ; preds = %21
  %36 = icmp ult i32 %2, 1075576832
  br i1 %36, label %37, label %42

; <label>:37                                      ; preds = %35
  %38 = fadd float %22, -1.500000e+00
  %39 = fmul float %22, 1.500000e+00
  %40 = fadd float %39, 1.000000e+00
  %41 = fdiv float %38, %40
  br label %44

; <label>:42                                      ; preds = %35
  %43 = fdiv float -1.000000e+00, %22
  br label %44

; <label>:44                                      ; preds = %42, %37, %31, %26, %17
  %id.0 = phi i32 [ 0, %26 ], [ 1, %31 ], [ 2, %37 ], [ 3, %42 ], [ -1, %17 ]
  %.01 = phi float [ %30, %26 ], [ %34, %31 ], [ %41, %37 ], [ %43, %42 ], [ %x, %17 ]
  %45 = fmul float %.01, %.01
  %46 = fmul float %45, %45
  %47 = fmul float %46, 0x3FAF9584A0000000
  %48 = fadd float %47, 0x3FC23EA1A0000000
  %49 = fmul float %46, %48
  %50 = fadd float %49, 0x3FD5555520000000
  %51 = fmul float %45, %50
  %52 = fmul float %46, 0xBFBB4248E0000000
  %53 = fadd float %52, 0xBFC9995300000000
  %54 = fmul float %46, %53
  %55 = icmp slt i32 %id.0, 0
  br i1 %55, label %56, label %60

; <label>:56                                      ; preds = %44
  %57 = fadd float %51, %54
  %58 = fmul float %.01, %57
  %59 = fsub float %.01, %58
  br label %74

; <label>:60                                      ; preds = %44
  %61 = sext i32 %id.0 to i64
  %62 = getelementptr inbounds [4 x float]* @atanhi, i64 0, i64 %61
  %63 = load float* %62, align 4, !tbaa !2
  %64 = fadd float %51, %54
  %65 = fmul float %.01, %64
  %66 = getelementptr inbounds [4 x float]* @atanlo, i64 0, i64 %61
  %67 = load float* %66, align 4, !tbaa !2
  %68 = fsub float %65, %67
  %69 = fsub float %68, %.01
  %70 = fsub float %63, %69
  %71 = icmp slt i32 %1, 0
  br i1 %71, label %72, label %74

; <label>:72                                      ; preds = %60
  %73 = fsub float -0.000000e+00, %70
  br label %74

; <label>:74                                      ; preds = %72, %60, %56, %17, %13, %11, %6
  %.0 = phi float [ %7, %6 ], [ %12, %11 ], [ %14, %13 ], [ %59, %56 ], [ %x, %17 ], [ %73, %72 ], [ %70, %60 ]
  ret float %.0
}

define float @atanhf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1065353216
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = fsub float %x, %x
  %6 = fdiv float %5, %5
  br label %33

; <label>:7                                       ; preds = %0
  %8 = icmp eq i32 %2, 1065353216
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %7
  %10 = fdiv float %x, 0.000000e+00
  br label %33

; <label>:11                                      ; preds = %7
  %12 = icmp ult i32 %2, 830472192
  %13 = fadd float %x, 0x46293E5940000000
  %14 = fcmp ogt float %13, 0.000000e+00
  %or.cond = and i1 %12, %14
  br i1 %or.cond, label %33, label %15

; <label>:15                                      ; preds = %11
  %16 = bitcast i32 %2 to float
  %17 = icmp ult i32 %2, 1056964608
  %18 = fadd float %16, %16
  br i1 %17, label %19, label %25

; <label>:19                                      ; preds = %15
  %20 = fmul float %18, %16
  %21 = fsub float 1.000000e+00, %16
  %22 = fdiv float %20, %21
  %23 = fadd float %18, %22
  %24 = tail call float @log1pf(float %23) nounwind optsize
  br label %29

; <label>:25                                      ; preds = %15
  %26 = fsub float 1.000000e+00, %16
  %27 = fdiv float %18, %26
  %28 = tail call float @log1pf(float %27) nounwind optsize
  br label %29

; <label>:29                                      ; preds = %25, %19
  %t.0.in = phi float [ %24, %19 ], [ %28, %25 ]
  %t.0 = fmul float %t.0.in, 5.000000e-01
  %30 = icmp sgt i32 %1, -1
  br i1 %30, label %33, label %31

; <label>:31                                      ; preds = %29
  %32 = fsub float -0.000000e+00, %t.0
  br label %33

; <label>:33                                      ; preds = %31, %29, %11, %9, %4
  %.0 = phi float [ %6, %4 ], [ %10, %9 ], [ %32, %31 ], [ %x, %11 ], [ %t.0, %29 ]
  ret float %.0
}

define x86_fp80 @atanhl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = lshr i80 %1, 32
  %5 = trunc i80 %4 to i32
  %6 = trunc i80 %1 to i32
  %7 = and i32 %3, 32767
  %8 = and i32 %5, 2147483647
  %9 = or i32 %8, %6
  %10 = sub i32 0, %9
  %11 = or i32 %6, %10
  %12 = lshr i32 %11, 31
  %13 = add i32 %12, %7
  %14 = icmp ugt i32 %13, 16383
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %0
  %16 = fsub x86_fp80 %x, %x
  %17 = fdiv x86_fp80 %16, %16
  br label %47

; <label>:18                                      ; preds = %0
  %19 = icmp eq i32 %7, 16383
  br i1 %19, label %20, label %22

; <label>:20                                      ; preds = %18
  %21 = fdiv x86_fp80 %x, 0xK00000000000000000000
  br label %47

; <label>:22                                      ; preds = %18
  %23 = icmp ult i32 %7, 16355
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %22
  %25 = fadd x86_fp80 %x, 0xK7F94AE9204275937A4C1
  %26 = fcmp ogt x86_fp80 %25, 0xK00000000000000000000
  br i1 %26, label %47, label %27

; <label>:27                                      ; preds = %24, %22
  %28 = zext i32 %7 to i80
  %29 = shl nuw nsw i80 %28, 64
  %mask = and i80 %1, 18446744073709551615
  %ins = or i80 %29, %mask
  %30 = bitcast i80 %ins to x86_fp80
  %31 = icmp ult i32 %7, 16382
  %32 = fadd x86_fp80 %30, %30
  br i1 %31, label %33, label %39

; <label>:33                                      ; preds = %27
  %34 = fmul x86_fp80 %32, %30
  %35 = fsub x86_fp80 0xK3FFF8000000000000000, %30
  %36 = fdiv x86_fp80 %34, %35
  %37 = fadd x86_fp80 %32, %36
  %38 = tail call x86_fp80 @log1pl(x86_fp80 %37) nounwind optsize
  br label %43

; <label>:39                                      ; preds = %27
  %40 = fsub x86_fp80 0xK3FFF8000000000000000, %30
  %41 = fdiv x86_fp80 %32, %40
  %42 = tail call x86_fp80 @log1pl(x86_fp80 %41) nounwind optsize
  br label %43

; <label>:43                                      ; preds = %39, %33
  %t.0.in = phi x86_fp80 [ %38, %33 ], [ %42, %39 ]
  %t.0 = fmul x86_fp80 %t.0.in, 0xK3FFE8000000000000000
  %44 = icmp ult i32 %3, 32768
  br i1 %44, label %47, label %45

; <label>:45                                      ; preds = %43
  %46 = fsub x86_fp80 0xK80000000000000000000, %t.0
  br label %47

; <label>:47                                      ; preds = %45, %43, %24, %20, %15
  %.0 = phi x86_fp80 [ %17, %15 ], [ %21, %20 ], [ %46, %45 ], [ %x, %24 ], [ %t.0, %43 ]
  ret x86_fp80 %.0
}

define double @atanh(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = sub i32 0, %4
  %7 = or i32 %4, %6
  %8 = lshr i32 %7, 31
  %9 = or i32 %5, %8
  %10 = icmp ugt i32 %9, 1072693248
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %0
  %12 = fsub double %x, %x
  %13 = fdiv double %12, %12
  br label %45

; <label>:14                                      ; preds = %0
  %15 = icmp eq i32 %5, 1072693248
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %14
  %17 = fdiv double %x, 0.000000e+00
  br label %45

; <label>:18                                      ; preds = %14
  %19 = icmp ult i32 %5, 1043333120
  br i1 %19, label %20, label %23

; <label>:20                                      ; preds = %18
  %21 = fadd double %x, 1.000000e+300
  %22 = fcmp ogt double %21, 0.000000e+00
  br i1 %22, label %45, label %23

; <label>:23                                      ; preds = %20, %18
  %24 = and i64 %1, 4294967295
  %25 = zext i32 %5 to i64
  %26 = shl nuw nsw i64 %25, 32
  %27 = or i64 %26, %24
  %28 = bitcast i64 %27 to double
  %29 = icmp ult i32 %5, 1071644672
  %30 = fadd double %28, %28
  br i1 %29, label %31, label %37

; <label>:31                                      ; preds = %23
  %32 = fmul double %30, %28
  %33 = fsub double 1.000000e+00, %28
  %34 = fdiv double %32, %33
  %35 = fadd double %30, %34
  %36 = tail call double @log1p(double %35) nounwind optsize
  br label %41

; <label>:37                                      ; preds = %23
  %38 = fsub double 1.000000e+00, %28
  %39 = fdiv double %30, %38
  %40 = tail call double @log1p(double %39) nounwind optsize
  br label %41

; <label>:41                                      ; preds = %37, %31
  %t.0.in = phi double [ %36, %31 ], [ %40, %37 ]
  %t.0 = fmul double %t.0.in, 5.000000e-01
  %42 = icmp sgt i32 %3, -1
  br i1 %42, label %45, label %43

; <label>:43                                      ; preds = %41
  %44 = fsub double -0.000000e+00, %t.0
  br label %45

; <label>:45                                      ; preds = %43, %41, %20, %16, %11
  %.0 = phi double [ %13, %11 ], [ %17, %16 ], [ %44, %43 ], [ %x, %20 ], [ %t.0, %41 ]
  ret double %.0
}

define x86_fp80 @atanl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 48
  %.tr = trunc i80 %2 to i32
  %sext = ashr i32 %.tr, 16
  %3 = and i32 %sext, 32767
  %4 = icmp ugt i32 %3, 16447
  br i1 %4, label %5, label %27

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %3, 32767
  br i1 %6, label %7, label %17

; <label>:7                                       ; preds = %5
  %8 = lshr i80 %1, 32
  %9 = trunc i80 %8 to i64
  %10 = and i64 %9, 2147483647
  %11 = trunc i80 %1 to i64
  %12 = and i64 %11, 4294967295
  %13 = or i64 %10, %12
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %7
  %16 = fadd x86_fp80 %x, %x
  br label %120

; <label>:17                                      ; preds = %7, %5
  %18 = icmp sgt i32 %sext, 0
  %19 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanhi, i64 0, i64 3), align 16, !tbaa !4
  br i1 %18, label %20, label %23

; <label>:20                                      ; preds = %17
  %21 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %22 = fadd x86_fp80 %19, %21
  br label %120

; <label>:23                                      ; preds = %17
  %24 = fsub x86_fp80 0xK80000000000000000000, %19
  %25 = load x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @__atanlo, i64 0, i64 3), align 16, !tbaa !4
  %26 = fsub x86_fp80 %24, %25
  br label %120

; <label>:27                                      ; preds = %0
  %28 = shl nuw nsw i32 %3, 8
  %29 = lshr i80 %1, 55
  %.tr3 = trunc i80 %29 to i32
  %30 = and i32 %.tr3, 255
  %31 = or i32 %28, %30
  %32 = icmp ult i32 %31, 4193728
  br i1 %32, label %33, label %38

; <label>:33                                      ; preds = %27
  %34 = icmp ult i32 %3, 16351
  br i1 %34, label %35, label %61

; <label>:35                                      ; preds = %33
  %36 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %37 = fcmp ogt x86_fp80 %36, 0xK3FFF8000000000000000
  br i1 %37, label %120, label %61

; <label>:38                                      ; preds = %27
  %39 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %40 = icmp ult i32 %31, 4194096
  br i1 %40, label %41, label %52

; <label>:41                                      ; preds = %38
  %42 = icmp ult i32 %31, 4193888
  br i1 %42, label %43, label %48

; <label>:43                                      ; preds = %41
  %44 = fmul x86_fp80 %39, 0xK40008000000000000000
  %45 = fadd x86_fp80 %44, 0xKBFFF8000000000000000
  %46 = fadd x86_fp80 %39, 0xK40008000000000000000
  %47 = fdiv x86_fp80 %45, %46
  br label %61

; <label>:48                                      ; preds = %41
  %49 = fadd x86_fp80 %39, 0xKBFFF8000000000000000
  %50 = fadd x86_fp80 %39, 0xK3FFF8000000000000000
  %51 = fdiv x86_fp80 %49, %50
  br label %61

; <label>:52                                      ; preds = %38
  %53 = icmp ult i32 %31, 4194360
  br i1 %53, label %54, label %59

; <label>:54                                      ; preds = %52
  %55 = fadd x86_fp80 %39, 0xKBFFFC000000000000000
  %56 = fmul x86_fp80 %39, 0xK3FFFC000000000000000
  %57 = fadd x86_fp80 %56, 0xK3FFF8000000000000000
  %58 = fdiv x86_fp80 %55, %57
  br label %61

; <label>:59                                      ; preds = %52
  %60 = fdiv x86_fp80 0xKBFFF8000000000000000, %39
  br label %61

; <label>:61                                      ; preds = %59, %54, %48, %43, %35, %33
  %id.0 = phi i32 [ 0, %43 ], [ 1, %48 ], [ 2, %54 ], [ 3, %59 ], [ -1, %35 ], [ -1, %33 ]
  %.01 = phi x86_fp80 [ %47, %43 ], [ %51, %48 ], [ %58, %54 ], [ %60, %59 ], [ %x, %35 ], [ %x, %33 ]
  %62 = fmul x86_fp80 %.01, %.01
  %63 = fmul x86_fp80 %62, %62
  %64 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 0), align 16, !tbaa !4
  %65 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 2), align 16, !tbaa !4
  %66 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 4), align 16, !tbaa !4
  %67 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 6), align 16, !tbaa !4
  %68 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 8), align 16, !tbaa !4
  %69 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 10), align 16, !tbaa !4
  %70 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 12), align 16, !tbaa !4
  %71 = fmul x86_fp80 %70, %63
  %72 = fadd x86_fp80 %69, %71
  %73 = fmul x86_fp80 %72, %63
  %74 = fadd x86_fp80 %68, %73
  %75 = fmul x86_fp80 %74, %63
  %76 = fadd x86_fp80 %67, %75
  %77 = fmul x86_fp80 %76, %63
  %78 = fadd x86_fp80 %66, %77
  %79 = fmul x86_fp80 %78, %63
  %80 = fadd x86_fp80 %65, %79
  %81 = fmul x86_fp80 %80, %63
  %82 = fadd x86_fp80 %64, %81
  %83 = fmul x86_fp80 %62, %82
  %84 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 1), align 16, !tbaa !4
  %85 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 3), align 16, !tbaa !4
  %86 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 5), align 16, !tbaa !4
  %87 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 7), align 16, !tbaa !4
  %88 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 9), align 16, !tbaa !4
  %89 = load x86_fp80* getelementptr inbounds ([13 x x86_fp80]* @__aT, i64 0, i64 11), align 16, !tbaa !4
  %90 = fmul x86_fp80 %89, %63
  %91 = fadd x86_fp80 %88, %90
  %92 = fmul x86_fp80 %91, %63
  %93 = fadd x86_fp80 %87, %92
  %94 = fmul x86_fp80 %93, %63
  %95 = fadd x86_fp80 %86, %94
  %96 = fmul x86_fp80 %95, %63
  %97 = fadd x86_fp80 %85, %96
  %98 = fmul x86_fp80 %97, %63
  %99 = fadd x86_fp80 %84, %98
  %100 = fmul x86_fp80 %63, %99
  %101 = icmp slt i32 %id.0, 0
  br i1 %101, label %102, label %106

; <label>:102                                     ; preds = %61
  %103 = fadd x86_fp80 %83, %100
  %104 = fmul x86_fp80 %.01, %103
  %105 = fsub x86_fp80 %.01, %104
  br label %120

; <label>:106                                     ; preds = %61
  %107 = sext i32 %id.0 to i64
  %108 = getelementptr inbounds [0 x x86_fp80]* bitcast ([4 x x86_fp80]* @__atanhi to [0 x x86_fp80]*), i64 0, i64 %107
  %109 = load x86_fp80* %108, align 16, !tbaa !4
  %110 = fadd x86_fp80 %83, %100
  %111 = fmul x86_fp80 %.01, %110
  %112 = getelementptr inbounds [0 x x86_fp80]* bitcast ([4 x x86_fp80]* @__atanlo to [0 x x86_fp80]*), i64 0, i64 %107
  %113 = load x86_fp80* %112, align 16, !tbaa !4
  %114 = fsub x86_fp80 %111, %113
  %115 = fsub x86_fp80 %114, %.01
  %116 = fsub x86_fp80 %109, %115
  %117 = icmp slt i32 %sext, 0
  br i1 %117, label %118, label %120

; <label>:118                                     ; preds = %106
  %119 = fsub x86_fp80 0xK80000000000000000000, %116
  br label %120

; <label>:120                                     ; preds = %118, %106, %102, %35, %23, %20, %15
  %.0 = phi x86_fp80 [ %16, %15 ], [ %22, %20 ], [ %26, %23 ], [ %105, %102 ], [ %x, %35 ], [ %119, %118 ], [ %116, %106 ]
  ret x86_fp80 %.0
}

define double @atan(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1141899263
  br i1 %5, label %6, label %21

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 2146435072
  br i1 %7, label %12, label %8

; <label>:8                                       ; preds = %6
  %9 = trunc i64 %1 to i32
  %10 = icmp ne i32 %4, 2146435072
  %11 = icmp eq i32 %9, 0
  %or.cond = or i1 %10, %11
  br i1 %or.cond, label %14, label %12

; <label>:12                                      ; preds = %8, %6
  %13 = fadd double %x, %x
  br label %93

; <label>:14                                      ; preds = %8
  %15 = icmp sgt i32 %3, 0
  %16 = load volatile double* getelementptr inbounds ([4 x double]* @atanlo13, i64 0, i64 3), align 8, !tbaa !3
  br i1 %15, label %17, label %19

; <label>:17                                      ; preds = %14
  %18 = fadd double %16, 0x3FF921FB54442D18
  br label %93

; <label>:19                                      ; preds = %14
  %20 = fsub double 0xBFF921FB54442D18, %16
  br label %93

; <label>:21                                      ; preds = %0
  %22 = icmp ult i32 %4, 1071382528
  br i1 %22, label %23, label %28

; <label>:23                                      ; preds = %21
  %24 = icmp ult i32 %4, 1044381696
  br i1 %24, label %25, label %51

; <label>:25                                      ; preds = %23
  %26 = fadd double %x, 1.000000e+300
  %27 = fcmp ogt double %26, 1.000000e+00
  br i1 %27, label %93, label %51

; <label>:28                                      ; preds = %21
  %29 = tail call double @fabs(double %x) nounwind optsize
  %30 = icmp ult i32 %4, 1072889856
  br i1 %30, label %31, label %42

; <label>:31                                      ; preds = %28
  %32 = icmp ult i32 %4, 1072037888
  br i1 %32, label %33, label %38

; <label>:33                                      ; preds = %31
  %34 = fmul double %29, 2.000000e+00
  %35 = fadd double %34, -1.000000e+00
  %36 = fadd double %29, 2.000000e+00
  %37 = fdiv double %35, %36
  br label %51

; <label>:38                                      ; preds = %31
  %39 = fadd double %29, -1.000000e+00
  %40 = fadd double %29, 1.000000e+00
  %41 = fdiv double %39, %40
  br label %51

; <label>:42                                      ; preds = %28
  %43 = icmp ult i32 %4, 1073971200
  br i1 %43, label %44, label %49

; <label>:44                                      ; preds = %42
  %45 = fadd double %29, -1.500000e+00
  %46 = fmul double %29, 1.500000e+00
  %47 = fadd double %46, 1.000000e+00
  %48 = fdiv double %45, %47
  br label %51

; <label>:49                                      ; preds = %42
  %50 = fdiv double -1.000000e+00, %29
  br label %51

; <label>:51                                      ; preds = %49, %44, %38, %33, %25, %23
  %id.0 = phi i32 [ 0, %33 ], [ 1, %38 ], [ 2, %44 ], [ 3, %49 ], [ -1, %25 ], [ -1, %23 ]
  %.02 = phi double [ %37, %33 ], [ %41, %38 ], [ %48, %44 ], [ %50, %49 ], [ %x, %25 ], [ %x, %23 ]
  %52 = fmul double %.02, %.02
  %53 = fmul double %52, %52
  %54 = fmul double %53, 0x3F90AD3AE322DA11
  %55 = fadd double %54, 0x3FA97B4B24760DEB
  %56 = fmul double %53, %55
  %57 = fadd double %56, 0x3FB10D66A0D03D51
  %58 = fmul double %53, %57
  %59 = fadd double %58, 0x3FB745CDC54C206E
  %60 = fmul double %53, %59
  %61 = fadd double %60, 0x3FC24924920083FF
  %62 = fmul double %53, %61
  %63 = fadd double %62, 0x3FD555555555550D
  %64 = fmul double %52, %63
  %65 = fmul double %53, 0xBFA2B4442C6A6C2F
  %66 = fadd double %65, 0xBFADDE2D52DEFD9A
  %67 = fmul double %53, %66
  %68 = fadd double %67, 0xBFB3B0F2AF749A6D
  %69 = fmul double %53, %68
  %70 = fadd double %69, 0xBFBC71C6FE231671
  %71 = fmul double %53, %70
  %72 = fadd double %71, 0xBFC999999998EBC4
  %73 = fmul double %53, %72
  %74 = icmp slt i32 %id.0, 0
  br i1 %74, label %75, label %79

; <label>:75                                      ; preds = %51
  %76 = fadd double %64, %73
  %77 = fmul double %.02, %76
  %78 = fsub double %.02, %77
  br label %93

; <label>:79                                      ; preds = %51
  %80 = sext i32 %id.0 to i64
  %81 = getelementptr inbounds [4 x double]* @atanhi12, i64 0, i64 %80
  %82 = load double* %81, align 8, !tbaa !3
  %83 = fadd double %64, %73
  %84 = fmul double %.02, %83
  %85 = getelementptr inbounds [4 x double]* @atanlo13, i64 0, i64 %80
  %86 = load double* %85, align 8, !tbaa !3
  %87 = fsub double %84, %86
  %88 = fsub double %87, %.02
  %89 = fsub double %82, %88
  %90 = icmp slt i32 %3, 0
  br i1 %90, label %91, label %93

; <label>:91                                      ; preds = %79
  %92 = fsub double -0.000000e+00, %89
  br label %93

; <label>:93                                      ; preds = %91, %79, %75, %25, %19, %17, %12
  %.0 = phi double [ %13, %12 ], [ %18, %17 ], [ %20, %19 ], [ %78, %75 ], [ %x, %25 ], [ %92, %91 ], [ %89, %79 ]
  ret double %.0
}

define void @__funcs_on_exit() nounwind uwtable optsize {
  %.pr = load %struct.fl** @head, align 8
  %1 = icmp eq %struct.fl* %.pr, null
  br i1 %1, label %._crit_edge, label %.preheader

.preheader:                                       ; preds = %.critedge.thread, %0
  %2 = phi %struct.fl* [ %20, %.critedge.thread ], [ %.pr, %0 ]
  br label %3

; <label>:3                                       ; preds = %10, %.preheader
  %indvars.iv = phi i64 [ 31, %.preheader ], [ %indvars.iv.next, %10 ]
  %i.0 = phi i32 [ 31, %.preheader ], [ %11, %10 ]
  %4 = trunc i64 %indvars.iv to i32
  %5 = icmp sgt i32 %4, -1
  br i1 %5, label %6, label %.critedge.thread

; <label>:6                                       ; preds = %3
  %7 = getelementptr inbounds %struct.fl* %2, i64 0, i32 1, i64 %indvars.iv
  %8 = load void (i8*)** %7, align 8, !tbaa !7
  %9 = icmp eq void (i8*)* %8, null
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %6
  %indvars.iv.next = add i64 %indvars.iv, -1
  %11 = add nsw i32 %i.0, -1
  br label %3

; <label>:12                                      ; preds = %6
  %13 = sext i32 %i.0 to i64
  %14 = getelementptr inbounds %struct.fl* %2, i64 0, i32 1, i64 %13
  %15 = load void (i8*)** %14, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.fl* %2, i64 0, i32 2, i64 %13
  %17 = load i8** %16, align 8, !tbaa !7
  store void (i8*)* null, void (i8*)** %14, align 8, !tbaa !7
  tail call void %15(i8* %17) nounwind optsize
  %.pre = load %struct.fl** @head, align 8, !tbaa !7
  br label %.critedge.thread

.critedge.thread:                                 ; preds = %12, %3
  %18 = phi %struct.fl* [ %.pre, %12 ], [ %2, %3 ]
  %19 = getelementptr inbounds %struct.fl* %18, i64 0, i32 0
  %20 = load %struct.fl** %19, align 8, !tbaa !7
  store %struct.fl* %20, %struct.fl** @head, align 8, !tbaa !7
  %21 = icmp eq %struct.fl* %20, null
  br i1 %21, label %._crit_edge, label %.preheader

._crit_edge:                                      ; preds = %.critedge.thread, %0
  ret void
}

define void @__cxa_finalize(i8* nocapture %dso) nounwind uwtable readnone optsize {
  ret void
}

define i32 @__cxa_atexit(void (i8*)* %func, i8* %arg, i8* nocapture %dso) nounwind uwtable optsize {
  %1 = load %struct.fl** @head, align 8, !tbaa !7
  %2 = icmp eq %struct.fl* %1, null
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  store %struct.fl* @builtin, %struct.fl** @head, align 8, !tbaa !7
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = phi %struct.fl* [ %1, %0 ], [ @builtin, %3 ]
  %6 = getelementptr inbounds %struct.fl* %5, i64 0, i32 1, i64 31
  %7 = load void (i8*)** %6, align 8, !tbaa !7
  %8 = icmp eq void (i8*)* %7, null
  br i1 %8, label %.preheader, label %9

; <label>:9                                       ; preds = %4
  %10 = tail call i8* @calloc(i64 520, i64 1) nounwind optsize
  %11 = icmp eq i8* %10, null
  br i1 %11, label %30, label %12

; <label>:12                                      ; preds = %9
  %13 = bitcast i8* %10 to %struct.fl*
  %14 = load %struct.fl** @head, align 8, !tbaa !7
  %15 = bitcast i8* %10 to %struct.fl**
  store %struct.fl* %14, %struct.fl** %15, align 8, !tbaa !7
  store %struct.fl* %13, %struct.fl** @head, align 8, !tbaa !7
  br label %.preheader

.preheader:                                       ; preds = %12, %4
  %16 = phi %struct.fl* [ %5, %4 ], [ %13, %12 ]
  br label %17

; <label>:17                                      ; preds = %24, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %24 ]
  %i.0 = phi i32 [ 0, %.preheader ], [ %25, %24 ]
  %18 = trunc i64 %indvars.iv to i32
  %19 = icmp slt i32 %18, 32
  br i1 %19, label %20, label %.critedge

; <label>:20                                      ; preds = %17
  %21 = getelementptr inbounds %struct.fl* %16, i64 0, i32 1, i64 %indvars.iv
  %22 = load void (i8*)** %21, align 8, !tbaa !7
  %23 = icmp eq void (i8*)* %22, null
  br i1 %23, label %.critedge, label %24

; <label>:24                                      ; preds = %20
  %indvars.iv.next = add i64 %indvars.iv, 1
  %25 = add nsw i32 %i.0, 1
  br label %17

.critedge:                                        ; preds = %20, %17
  %26 = sext i32 %i.0 to i64
  %27 = getelementptr inbounds %struct.fl* %16, i64 0, i32 1, i64 %26
  store void (i8*)* %func, void (i8*)** %27, align 8, !tbaa !7
  %28 = load %struct.fl** @head, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.fl* %28, i64 0, i32 2, i64 %26
  store i8* %arg, i8** %29, align 8, !tbaa !7
  br label %30

; <label>:30                                      ; preds = %.critedge, %9
  %.0 = phi i32 [ 0, %.critedge ], [ -1, %9 ]
  ret i32 %.0
}

define i32 @atexit(void ()* %func) nounwind uwtable optsize {
  %1 = bitcast void ()* %func to i8*
  %2 = tail call i32 @__cxa_atexit(void (i8*)* @call, i8* %1, i8* undef) optsize
  ret i32 %2
}

define internal void @call(i8* nocapture %p) nounwind uwtable optsize {
  %1 = bitcast i8* %p to void ()*
  tail call void %1() nounwind optsize
  ret void
}

define double @atof(i8* %s) nounwind uwtable optsize {
  %1 = tail call double @strtod(i8* %s, i8** null) nounwind optsize
  ret double %1
}

define i32 @atoi(i8* nocapture %s) nounwind uwtable optsize {
  %1 = load i8* %s, align 1, !tbaa !0
  %2 = sext i8 %1 to i32
  %3 = tail call i32 @isspace(i32 %2) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %._crit_edge7, label %.lr.ph6

.lr.ph6:                                          ; preds = %.lr.ph6, %0
  %.04 = phi i8* [ %5, %.lr.ph6 ], [ %s, %0 ]
  %5 = getelementptr inbounds i8* %.04, i64 1
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = sext i8 %6 to i32
  %8 = tail call i32 @isspace(i32 %7) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge7, label %.lr.ph6

._crit_edge7:                                     ; preds = %.lr.ph6, %0
  %.0.lcssa = phi i8* [ %s, %0 ], [ %5, %.lr.ph6 ]
  %10 = load i8* %.0.lcssa, align 1, !tbaa !0
  %11 = sext i8 %10 to i32
  switch i32 %11, label %.preheader [
    i32 45, label %12
    i32 43, label %13
  ]

; <label>:12                                      ; preds = %._crit_edge7
  br label %13

; <label>:13                                      ; preds = %12, %._crit_edge7
  %neg.0 = phi i32 [ 0, %._crit_edge7 ], [ 1, %12 ]
  %14 = getelementptr inbounds i8* %.0.lcssa, i64 1
  %.pre = load i8* %14, align 1, !tbaa !0
  br label %.preheader

.preheader:                                       ; preds = %13, %._crit_edge7
  %15 = phi i8 [ %10, %._crit_edge7 ], [ %.pre, %13 ]
  %neg.1.ph = phi i32 [ 0, %._crit_edge7 ], [ %neg.0, %13 ]
  %.1.ph = phi i8* [ %.0.lcssa, %._crit_edge7 ], [ %14, %13 ]
  %16 = sext i8 %15 to i32
  %17 = add i32 %16, -48
  %18 = icmp ult i32 %17, 10
  br i1 %18, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %19 = phi i32 [ %24, %.lr.ph ], [ %16, %.preheader ]
  %.13 = phi i8* [ %21, %.lr.ph ], [ %.1.ph, %.preheader ]
  %n.02 = phi i32 [ %22, %.lr.ph ], [ 0, %.preheader ]
  %20 = mul nsw i32 %n.02, 10
  %21 = getelementptr inbounds i8* %.13, i64 1
  %.neg1 = add i32 %20, 48
  %22 = sub i32 %.neg1, %19
  %23 = load i8* %21, align 1, !tbaa !0
  %24 = sext i8 %23 to i32
  %25 = add i32 %24, -48
  %26 = icmp ult i32 %25, 10
  br i1 %26, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %n.0.lcssa = phi i32 [ 0, %.preheader ], [ %22, %.lr.ph ]
  %27 = icmp ne i32 %neg.1.ph, 0
  %28 = sub nsw i32 0, %n.0.lcssa
  %29 = select i1 %27, i32 %n.0.lcssa, i32 %28
  ret i32 %29
}

define i64 @atoll(i8* nocapture %s) nounwind uwtable optsize {
  %1 = load i8* %s, align 1, !tbaa !0
  %2 = sext i8 %1 to i32
  %3 = tail call i32 @isspace(i32 %2) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %._crit_edge6, label %.lr.ph5

.lr.ph5:                                          ; preds = %.lr.ph5, %0
  %.03 = phi i8* [ %5, %.lr.ph5 ], [ %s, %0 ]
  %5 = getelementptr inbounds i8* %.03, i64 1
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = sext i8 %6 to i32
  %8 = tail call i32 @isspace(i32 %7) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge6, label %.lr.ph5

._crit_edge6:                                     ; preds = %.lr.ph5, %0
  %.0.lcssa = phi i8* [ %s, %0 ], [ %5, %.lr.ph5 ]
  %10 = load i8* %.0.lcssa, align 1, !tbaa !0
  %11 = sext i8 %10 to i32
  switch i32 %11, label %.preheader [
    i32 45, label %12
    i32 43, label %13
  ]

; <label>:12                                      ; preds = %._crit_edge6
  br label %13

; <label>:13                                      ; preds = %12, %._crit_edge6
  %neg.0 = phi i32 [ 0, %._crit_edge6 ], [ 1, %12 ]
  %14 = getelementptr inbounds i8* %.0.lcssa, i64 1
  %.pre = load i8* %14, align 1, !tbaa !0
  br label %.preheader

.preheader:                                       ; preds = %13, %._crit_edge6
  %15 = phi i8 [ %10, %._crit_edge6 ], [ %.pre, %13 ]
  %neg.1.ph = phi i32 [ 0, %._crit_edge6 ], [ %neg.0, %13 ]
  %.1.ph = phi i8* [ %.0.lcssa, %._crit_edge6 ], [ %14, %13 ]
  %16 = sext i8 %15 to i32
  %17 = add i32 %16, -48
  %18 = icmp ult i32 %17, 10
  br i1 %18, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %19 = phi i32 [ %26, %.lr.ph ], [ %16, %.preheader ]
  %.12 = phi i8* [ %21, %.lr.ph ], [ %.1.ph, %.preheader ]
  %n.01 = phi i64 [ %24, %.lr.ph ], [ 0, %.preheader ]
  %20 = mul nsw i64 %n.01, 10
  %21 = getelementptr inbounds i8* %.12, i64 1
  %22 = add nsw i32 %19, -48
  %23 = sext i32 %22 to i64
  %24 = sub nsw i64 %20, %23
  %25 = load i8* %21, align 1, !tbaa !0
  %26 = sext i8 %25 to i32
  %27 = add i32 %26, -48
  %28 = icmp ult i32 %27, 10
  br i1 %28, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %n.0.lcssa = phi i64 [ 0, %.preheader ], [ %24, %.lr.ph ]
  %29 = icmp ne i32 %neg.1.ph, 0
  %30 = sub nsw i64 0, %n.0.lcssa
  %31 = select i1 %29, i64 %n.0.lcssa, i64 %30
  ret i64 %31
}

define i64 @atol(i8* nocapture %s) nounwind uwtable optsize {
  %1 = load i8* %s, align 1, !tbaa !0
  %2 = sext i8 %1 to i32
  %3 = tail call i32 @isspace(i32 %2) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %._crit_edge6, label %.lr.ph5

.lr.ph5:                                          ; preds = %.lr.ph5, %0
  %.03 = phi i8* [ %5, %.lr.ph5 ], [ %s, %0 ]
  %5 = getelementptr inbounds i8* %.03, i64 1
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = sext i8 %6 to i32
  %8 = tail call i32 @isspace(i32 %7) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge6, label %.lr.ph5

._crit_edge6:                                     ; preds = %.lr.ph5, %0
  %.0.lcssa = phi i8* [ %s, %0 ], [ %5, %.lr.ph5 ]
  %10 = load i8* %.0.lcssa, align 1, !tbaa !0
  %11 = sext i8 %10 to i32
  switch i32 %11, label %.preheader [
    i32 45, label %12
    i32 43, label %13
  ]

; <label>:12                                      ; preds = %._crit_edge6
  br label %13

; <label>:13                                      ; preds = %12, %._crit_edge6
  %neg.0 = phi i32 [ 0, %._crit_edge6 ], [ 1, %12 ]
  %14 = getelementptr inbounds i8* %.0.lcssa, i64 1
  %.pre = load i8* %14, align 1, !tbaa !0
  br label %.preheader

.preheader:                                       ; preds = %13, %._crit_edge6
  %15 = phi i8 [ %10, %._crit_edge6 ], [ %.pre, %13 ]
  %neg.1.ph = phi i32 [ 0, %._crit_edge6 ], [ %neg.0, %13 ]
  %.1.ph = phi i8* [ %.0.lcssa, %._crit_edge6 ], [ %14, %13 ]
  %16 = sext i8 %15 to i32
  %17 = add i32 %16, -48
  %18 = icmp ult i32 %17, 10
  br i1 %18, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %19 = phi i32 [ %26, %.lr.ph ], [ %16, %.preheader ]
  %.12 = phi i8* [ %21, %.lr.ph ], [ %.1.ph, %.preheader ]
  %n.01 = phi i64 [ %24, %.lr.ph ], [ 0, %.preheader ]
  %20 = mul nsw i64 %n.01, 10
  %21 = getelementptr inbounds i8* %.12, i64 1
  %22 = add nsw i32 %19, -48
  %23 = sext i32 %22 to i64
  %24 = sub nsw i64 %20, %23
  %25 = load i8* %21, align 1, !tbaa !0
  %26 = sext i8 %25 to i32
  %27 = add i32 %26, -48
  %28 = icmp ult i32 %27, 10
  br i1 %28, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %n.0.lcssa = phi i64 [ 0, %.preheader ], [ %24, %.lr.ph ]
  %29 = icmp ne i32 %neg.1.ph, 0
  %30 = sub nsw i64 0, %n.0.lcssa
  %31 = select i1 %29, i64 %n.0.lcssa, i64 %30
  ret i64 %31
}

define i8* @basename(i8* %s) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %21, label %2

; <label>:2                                       ; preds = %0
  %3 = load i8* %s, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %21, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i64 @strlen(i8* %s) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %13, %5
  %i.0.in = phi i64 [ %6, %5 ], [ %i.0, %13 ]
  %i.0 = add i64 %i.0.in, -1
  %8 = icmp eq i64 %i.0, 0
  br i1 %8, label %.critedge, label %9

; <label>:9                                       ; preds = %7
  %10 = getelementptr inbounds i8* %s, i64 %i.0
  %11 = load i8* %10, align 1, !tbaa !0
  %12 = icmp eq i8 %11, 47
  br i1 %12, label %13, label %.critedge

; <label>:13                                      ; preds = %9
  store i8 0, i8* %10, align 1, !tbaa !0
  br label %7

.critedge:                                        ; preds = %15, %9, %7
  %i.1 = phi i64 [ %16, %15 ], [ 0, %7 ], [ %i.0, %9 ]
  %14 = icmp eq i64 %i.1, 0
  br i1 %14, label %.critedge1, label %15

; <label>:15                                      ; preds = %.critedge
  %16 = add i64 %i.1, -1
  %17 = getelementptr inbounds i8* %s, i64 %16
  %18 = load i8* %17, align 1, !tbaa !0
  %19 = icmp eq i8 %18, 47
  br i1 %19, label %.critedge1, label %.critedge

.critedge1:                                       ; preds = %15, %.critedge
  %20 = getelementptr inbounds i8* %s, i64 %i.1
  br label %21

; <label>:21                                      ; preds = %.critedge1, %2, %0
  %.0 = phi i8* [ %20, %.critedge1 ], [ getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0), %2 ], [ getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0), %0 ]
  ret i8* %.0
}

define i32 @bcmp(i8* %s1, i8* %s2, i64 %n) nounwind uwtable optsize {
  %1 = tail call i32 @memcmp(i8* %s1, i8* %s2, i64 %n) nounwind optsize
  ret i32 %1
}

define void @bcopy(i8* %s1, i8* %s2, i64 %n) nounwind uwtable optsize {
  %1 = tail call i8* @memmove(i8* %s2, i8* %s1, i64 %n) nounwind optsize
  ret void
}

define i32 @bind(i32 %fd, %struct.sockaddr.24* %addr, i32 %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.sockaddr.24* %addr to i64
  %3 = zext i32 %len to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 282, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i64 @__brk(i64 %newbrk) nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 45, i64 %newbrk, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  ret i64 %2
}

define i32 @brk(i8* %end) nounwind uwtable optsize {
  %1 = ptrtoint i8* %end to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 45, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = icmp ne i64 %3, %1
  %5 = sext i1 %4 to i32
  ret i32 %5
}

define i8* @bsearch(i8* %key, i8* %base, i64 %nel, i64 %width, i32 (i8*, i8*)* nocapture %cmp) nounwind uwtable optsize {
  br label %.outer

.outer:                                           ; preds = %11, %0
  %.02.ph = phi i8* [ %base, %0 ], [ %6, %11 ]
  %.01.ph = phi i64 [ %nel, %0 ], [ %., %11 ]
  br label %1

; <label>:1                                       ; preds = %11, %.outer
  %.01 = phi i64 [ %., %11 ], [ %.01.ph, %.outer ]
  %2 = icmp eq i64 %.01, 0
  br i1 %2, label %14, label %3

; <label>:3                                       ; preds = %1
  %4 = lshr i64 %.01, 1
  %5 = mul i64 %4, %width
  %6 = getelementptr inbounds i8* %.02.ph, i64 %5
  %7 = tail call i32 %cmp(i8* %key, i8* %6) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

; <label>:9                                       ; preds = %3
  %10 = icmp eq i64 %.01, 1
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %9
  %12 = sub i64 %.01, %4
  %13 = icmp slt i32 %7, 0
  %. = select i1 %13, i64 %4, i64 %12
  br i1 %13, label %1, label %.outer

; <label>:14                                      ; preds = %9, %3, %1
  %.0 = phi i8* [ %6, %3 ], [ null, %1 ], [ null, %9 ]
  ret i8* %.0
}

define i32 @btowc(i32 %c) nounwind uwtable readnone optsize {
  %1 = icmp ult i32 %c, 128
  %2 = select i1 %1, i32 %c, i32 -1
  ret i32 %2
}

define void @bzero(i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i8* @memset(i8* %s, i32 0, i64 %n) nounwind optsize
  ret void
}

define float @cabsf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = tail call float @hypotf(float %1, float %2) nounwind optsize
  ret float %3
}

define x86_fp80 @cabsl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = tail call x86_fp80 @hypotl(x86_fp80 %2, x86_fp80 %4) nounwind optsize
  ret x86_fp80 %5
}

define double @cabs(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = tail call double @hypot(double %z.coerce0, double %z.coerce1) nounwind optsize
  ret double %1
}

define <2 x float> @cacosf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = tail call <2 x float> @casinf(<2 x float> %z.coerce) nounwind optsize
  %2 = extractelement <2 x float> %1, i32 0
  %3 = fsub float 0x3FF921FB60000000, %2
  %4 = extractelement <2 x float> %1, i32 1
  %5 = fsub float -0.000000e+00, %4
  %6 = insertelement <2 x float> undef, float %3, i32 0
  %7 = insertelement <2 x float> %6, float %5, i32 1
  ret <2 x float> %7
}

define <2 x float> @cacoshf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = tail call <2 x float> @cacosf(<2 x float> %z.coerce) nounwind optsize
  %2 = extractelement <2 x float> %1, i32 1
  %3 = fsub float -0.000000e+00, %2
  %4 = insertelement <2 x float> undef, float %3, i32 0
  %5 = shufflevector <2 x float> %4, <2 x float> %1, <2 x i32> <i32 0, i32 2>
  ret <2 x float> %5
}

define { x86_fp80, x86_fp80 } @cacoshl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = load x86_fp80* %2, align 16
  %4 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %5 = load x86_fp80* %4, align 16
  %6 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %3, x86_fp80* %6, align 16
  store x86_fp80 %5, x86_fp80* %7, align 16
  %8 = call { x86_fp80, x86_fp80 } @cacosl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %9 = extractvalue { x86_fp80, x86_fp80 } %8, 0
  %10 = extractvalue { x86_fp80, x86_fp80 } %8, 1
  %11 = fsub x86_fp80 0xK80000000000000000000, %10
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %11, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %9, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @cacosh(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = tail call { double, double } @cacos(double %z.coerce0, double %z.coerce1) nounwind optsize
  %2 = extractvalue { double, double } %1, 0
  %3 = extractvalue { double, double } %1, 1
  %4 = fsub double -0.000000e+00, %3
  %insert = insertvalue { double, double } undef, double %4, 0
  %insert6 = insertvalue { double, double } %insert, double %2, 1
  ret { double, double } %insert6
}

define { x86_fp80, x86_fp80 } @cacosl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = load x86_fp80* %2, align 16
  %4 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %5 = load x86_fp80* %4, align 16
  %6 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %3, x86_fp80* %6, align 16
  store x86_fp80 %5, x86_fp80* %7, align 16
  %8 = call { x86_fp80, x86_fp80 } @casinl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %9 = extractvalue { x86_fp80, x86_fp80 } %8, 0
  %10 = extractvalue { x86_fp80, x86_fp80 } %8, 1
  %11 = fsub x86_fp80 0xK3FFFC90FDAA22168C235, %9
  %12 = fsub x86_fp80 0xK80000000000000000000, %10
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %11, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %12, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @cacos(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = tail call { double, double } @casin(double %z.coerce0, double %z.coerce1) nounwind optsize
  %2 = extractvalue { double, double } %1, 0
  %3 = extractvalue { double, double } %1, 1
  %4 = fsub double 0x3FF921FB54442D18, %2
  %5 = fsub double -0.000000e+00, %3
  %insert = insertvalue { double, double } undef, double %4, 0
  %insert6 = insertvalue { double, double } %insert, double %5, 1
  ret { double, double } %insert6
}

define i8* @calloc(i64 %m, i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = udiv i64 -1, %n
  %4 = icmp ult i64 %3, %m
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %2
  %6 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %6, align 4, !tbaa !6
  br label %12

; <label>:7                                       ; preds = %2, %0
  %8 = mul i64 %n, %m
  %9 = tail call i8* @malloc(i64 %8) optsize
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

; <label>:11                                      ; preds = %7
  br label %12

; <label>:12                                      ; preds = %11, %7, %5
  %.0 = phi i8* [ null, %5 ], [ null, %7 ], [ %9, %11 ]
  ret i8* %.0
}

define internal i64 @sccp(i64 %nr, i64 %u, i64 %v, i64 %w, i64 %x, i64 %y, i64 %z) nounwind uwtable {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 %nr, i64 %u, i64 %v, i64 %w, i64 %x, i64 %y, i64 %z) nounwind optsize
  ret i64 %1
}

define internal void @dummy() nounwind uwtable readnone optsize {
  ret void
}

define void @_pthread_cleanup_push(%struct.__ptcb* %cb, void (i8*)* %f, i8* %x) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__ptcb* %cb, i64 0, i32 0
  store void (i8*)* %f, void (i8*)** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__ptcb* %cb, i64 0, i32 1
  store i8* %x, i8** %2, align 8, !tbaa !7
  tail call void (...)* @__do_cleanup_push(%struct.__ptcb* %cb, void (i8*)* %f, i8* %x) nounwind optsize
  ret void
}

define void @_pthread_cleanup_pop(%struct.__ptcb* %cb, i32 %run) nounwind uwtable optsize {
  tail call void (...)* @__do_cleanup_pop(%struct.__ptcb* %cb, i32 %run) nounwind optsize
  %1 = icmp eq i32 %run, 0
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.__ptcb* %cb, i64 0, i32 0
  %4 = load void (i8*)** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.__ptcb* %cb, i64 0, i32 1
  %6 = load i8** %5, align 8, !tbaa !7
  tail call void %4(i8* %6) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %2, %0
  ret void
}

define internal void @dummy25() nounwind uwtable readnone optsize {
  ret void
}

define float @cargf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  %2 = extractelement <2 x float> %z.coerce, i32 0
  %3 = tail call float @atan2f(float %1, float %2) nounwind optsize
  ret float %3
}

define x86_fp80 @cargl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %3 = load x86_fp80* %2, align 16
  %4 = load x86_fp80* %1, align 16
  %5 = tail call x86_fp80 @atan2l(x86_fp80 %3, x86_fp80 %4) nounwind optsize
  ret x86_fp80 %5
}

define double @carg(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = tail call double @atan2(double %z.coerce1, double %z.coerce0) nounwind optsize
  ret double %1
}

define <2 x float> @casinf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = fsub float %1, %2
  %4 = fadd float %1, %2
  %5 = fmul float %3, %4
  %6 = fsub float 1.000000e+00, %5
  %7 = fpext float %1 to double
  %8 = fmul double %7, -2.000000e+00
  %9 = fpext float %2 to double
  %10 = fmul double %8, %9
  %11 = fptrunc double %10 to float
  %12 = insertelement <2 x float> undef, float %6, i32 0
  %13 = insertelement <2 x float> %12, float %11, i32 1
  %14 = tail call <2 x float> @csqrtf(<2 x float> %13) nounwind optsize
  %15 = extractelement <2 x float> %14, i32 0
  %16 = extractelement <2 x float> %14, i32 1
  %17 = fsub float %15, %2
  %18 = fadd float %1, %16
  %19 = insertelement <2 x float> undef, float %17, i32 0
  %20 = insertelement <2 x float> %19, float %18, i32 1
  %21 = tail call <2 x float> @clogf(<2 x float> %20) nounwind optsize
  ret <2 x float> %21
}

define <2 x float> @casinhf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  %2 = fsub float -0.000000e+00, %1
  %3 = insertelement <2 x float> undef, float %2, i32 0
  %4 = shufflevector <2 x float> %3, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 2>
  %5 = tail call <2 x float> @casinf(<2 x float> %4) nounwind optsize
  %6 = extractelement <2 x float> %5, i32 1
  %7 = extractelement <2 x float> %5, i32 0
  %8 = fsub float -0.000000e+00, %7
  %9 = insertelement <2 x float> undef, float %6, i32 0
  %10 = insertelement <2 x float> %9, float %8, i32 1
  ret <2 x float> %10
}

define { x86_fp80, x86_fp80 } @casinhl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fsub x86_fp80 0xK80000000000000000000, %4
  %6 = load x86_fp80* %2, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %8 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %5, x86_fp80* %7, align 16
  store x86_fp80 %6, x86_fp80* %8, align 16
  %9 = call { x86_fp80, x86_fp80 } @casinl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %10 = extractvalue { x86_fp80, x86_fp80 } %9, 0
  %11 = extractvalue { x86_fp80, x86_fp80 } %9, 1
  %12 = fsub x86_fp80 0xK80000000000000000000, %10
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %11, 0
  %insert11 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %12, 1
  ret { x86_fp80, x86_fp80 } %insert11
}

define { double, double } @casinh(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fsub double -0.000000e+00, %z.coerce1
  %2 = tail call { double, double } @casin(double %1, double %z.coerce0) nounwind optsize
  %3 = extractvalue { double, double } %2, 0
  %4 = extractvalue { double, double } %2, 1
  %5 = fsub double -0.000000e+00, %3
  %insert = insertvalue { double, double } undef, double %4, 0
  %insert8 = insertvalue { double, double } %insert, double %5, 1
  ret { double, double } %insert8
}

define { x86_fp80, x86_fp80 } @casinl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = alloca { x86_fp80, x86_fp80 }, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %4 = load x86_fp80* %3, align 16
  %5 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %6 = load x86_fp80* %5, align 16
  %7 = fsub x86_fp80 %4, %6
  %8 = fadd x86_fp80 %4, %6
  %9 = fmul x86_fp80 %7, %8
  %10 = fsub x86_fp80 0xK3FFF8000000000000000, %9
  %11 = fmul x86_fp80 %4, 0xKC0008000000000000000
  %12 = fmul x86_fp80 %11, %6
  %13 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %14 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %10, x86_fp80* %13, align 16
  store x86_fp80 %12, x86_fp80* %14, align 16
  %15 = call { x86_fp80, x86_fp80 } @csqrtl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %16 = extractvalue { x86_fp80, x86_fp80 } %15, 0
  %17 = extractvalue { x86_fp80, x86_fp80 } %15, 1
  %18 = fsub x86_fp80 %16, %6
  %19 = fadd x86_fp80 %4, %17
  %20 = getelementptr inbounds { x86_fp80, x86_fp80 }* %2, i64 0, i32 0
  %21 = getelementptr inbounds { x86_fp80, x86_fp80 }* %2, i64 0, i32 1
  store x86_fp80 %18, x86_fp80* %20, align 16
  store x86_fp80 %19, x86_fp80* %21, align 16
  %22 = call { x86_fp80, x86_fp80 } @clogl({ x86_fp80, x86_fp80 }* byval align 16 %2) nounwind optsize
  ret { x86_fp80, x86_fp80 } %22
}

define { double, double } @casin(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fsub double %z.coerce0, %z.coerce1
  %2 = fadd double %z.coerce0, %z.coerce1
  %3 = fmul double %1, %2
  %4 = fsub double 1.000000e+00, %3
  %5 = fmul double %z.coerce0, -2.000000e+00
  %6 = fmul double %5, %z.coerce1
  %7 = tail call { double, double } @csqrt(double %4, double %6) nounwind optsize
  %8 = extractvalue { double, double } %7, 0
  %9 = extractvalue { double, double } %7, 1
  %10 = fsub double %8, %z.coerce1
  %11 = fadd double %9, %z.coerce0
  %12 = tail call { double, double } @clog(double %10, double %11) nounwind optsize
  ret { double, double } %12
}

define <2 x float> @catanf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = fcmp oeq float %1, 0.000000e+00
  %4 = fcmp ogt float %2, 1.000000e+00
  %or.cond = and i1 %3, %4
  br i1 %or.cond, label %48, label %5

; <label>:5                                       ; preds = %0
  %6 = fmul float %1, %1
  %7 = fsub float 1.000000e+00, %6
  %8 = fmul float %2, %2
  %9 = fsub float %7, %8
  %10 = fcmp oeq float %9, 0.000000e+00
  br i1 %10, label %48, label %11

; <label>:11                                      ; preds = %5
  %12 = fmul float %1, 2.000000e+00
  %13 = tail call float @atan2f(float %12, float %9) nounwind optsize
  %14 = fmul float %13, 5.000000e-01
  %15 = fdiv float %14, 0x400921FB60000000
  %16 = fcmp ult float %15, 0.000000e+00
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %11
  %18 = fadd float %15, 5.000000e-01
  br label %_redupif.exit

; <label>:19                                      ; preds = %11
  %20 = fadd float %15, -5.000000e-01
  br label %_redupif.exit

_redupif.exit:                                    ; preds = %19, %17
  %t.0.i = phi float [ %18, %17 ], [ %20, %19 ]
  %21 = fptosi float %t.0.i to i64
  %22 = sitofp i64 %21 to float
  %23 = fpext float %22 to double
  %24 = fadd float %2, -1.000000e+00
  %25 = fmul float %24, %24
  %26 = fadd float %6, %25
  %27 = fcmp oeq float %26, 0.000000e+00
  br i1 %27, label %48, label %28

; <label>:28                                      ; preds = %_redupif.exit
  %29 = fmul double %23, 3.140625e+00
  %30 = fpext float %14 to double
  %31 = fmul double %23, 0x3F4FB40000000000
  %32 = fsub double %30, %29
  %33 = fmul double %23, 0x3E84442D18469899
  %34 = fsub double %32, %31
  %35 = fsub double %34, %33
  %36 = fptrunc double %35 to float
  %37 = fadd float %2, 1.000000e+00
  %38 = fmul float %37, %37
  %39 = fadd float %6, %38
  %40 = fdiv float %39, %26
  %41 = tail call float @logf(float %40) nounwind optsize
  %42 = fmul float %41, 2.500000e-01
  %43 = fmul float %42, 0.000000e+00
  %44 = fadd float %42, 0.000000e+00
  %45 = fadd float %36, %43
  %46 = insertelement <2 x float> undef, float %45, i32 0
  %47 = insertelement <2 x float> %46, float %44, i32 1
  br label %48

; <label>:48                                      ; preds = %28, %_redupif.exit, %5, %0
  %.0 = phi <2 x float> [ %47, %28 ], [ <float 0x47D2CED320000000, float 0x47D2CED320000000>, %0 ], [ <float 0x47D2CED320000000, float 0x47D2CED320000000>, %_redupif.exit ], [ <float 0x47D2CED320000000, float 0x47D2CED320000000>, %5 ]
  ret <2 x float> %.0
}

define <2 x float> @catanhf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  %2 = fsub float -0.000000e+00, %1
  %3 = insertelement <2 x float> undef, float %2, i32 0
  %4 = shufflevector <2 x float> %3, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 2>
  %5 = tail call <2 x float> @catanf(<2 x float> %4) nounwind optsize
  %6 = extractelement <2 x float> %5, i32 1
  %7 = extractelement <2 x float> %5, i32 0
  %8 = fsub float -0.000000e+00, %7
  %9 = insertelement <2 x float> undef, float %6, i32 0
  %10 = insertelement <2 x float> %9, float %8, i32 1
  ret <2 x float> %10
}

define { x86_fp80, x86_fp80 } @catanhl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fsub x86_fp80 0xK80000000000000000000, %4
  %6 = load x86_fp80* %2, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %8 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %5, x86_fp80* %7, align 16
  store x86_fp80 %6, x86_fp80* %8, align 16
  %9 = call { x86_fp80, x86_fp80 } @catanl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %10 = extractvalue { x86_fp80, x86_fp80 } %9, 0
  %11 = extractvalue { x86_fp80, x86_fp80 } %9, 1
  %12 = fsub x86_fp80 0xK80000000000000000000, %10
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %11, 0
  %insert11 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %12, 1
  ret { x86_fp80, x86_fp80 } %insert11
}

define { double, double } @catanh(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fsub double -0.000000e+00, %z.coerce1
  %2 = tail call { double, double } @catan(double %1, double %z.coerce0) nounwind optsize
  %3 = extractvalue { double, double } %2, 0
  %4 = extractvalue { double, double } %2, 1
  %5 = fsub double -0.000000e+00, %3
  %insert = insertvalue { double, double } undef, double %4, 0
  %insert8 = insertvalue { double, double } %insert, double %5, 1
  ret { double, double } %insert8
}

define { x86_fp80, x86_fp80 } @catanl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fcmp oeq x86_fp80 %2, 0xK00000000000000000000
  %6 = fcmp ogt x86_fp80 %4, 0xK3FFF8000000000000000
  %or.cond = and i1 %5, %6
  br i1 %or.cond, label %45, label %7

; <label>:7                                       ; preds = %0
  %8 = fmul x86_fp80 %2, %2
  %9 = fsub x86_fp80 0xK3FFF8000000000000000, %8
  %10 = fmul x86_fp80 %4, %4
  %11 = fsub x86_fp80 %9, %10
  %12 = fcmp oeq x86_fp80 %11, 0xK00000000000000000000
  br i1 %12, label %45, label %13

; <label>:13                                      ; preds = %7
  %14 = fmul x86_fp80 %2, 0xK40008000000000000000
  %15 = tail call x86_fp80 @atan2l(x86_fp80 %14, x86_fp80 %11) nounwind optsize
  %16 = fmul x86_fp80 %15, 0xK3FFE8000000000000000
  %17 = fdiv x86_fp80 %16, 0xK4000C90FDAA22168C235
  %18 = fcmp ult x86_fp80 %17, 0xK00000000000000000000
  br i1 %18, label %21, label %19

; <label>:19                                      ; preds = %13
  %20 = fadd x86_fp80 %17, 0xK3FFE8000000000000000
  br label %redupil.exit

; <label>:21                                      ; preds = %13
  %22 = fadd x86_fp80 %17, 0xKBFFE8000000000000000
  br label %redupil.exit

redupil.exit:                                     ; preds = %21, %19
  %t.0.i = phi x86_fp80 [ %20, %19 ], [ %22, %21 ]
  %23 = fptosi x86_fp80 %t.0.i to i64
  %24 = sitofp i64 %23 to x86_fp80
  %25 = fadd x86_fp80 %4, 0xKBFFF8000000000000000
  %26 = fmul x86_fp80 %25, %25
  %27 = fadd x86_fp80 %8, %26
  %28 = fcmp oeq x86_fp80 %27, 0xK00000000000000000000
  br i1 %28, label %45, label %29

; <label>:29                                      ; preds = %redupil.exit
  %30 = fmul x86_fp80 %24, 0xK4000C90FDAA22168C234
  %31 = fmul x86_fp80 %24, 0xK3FC0C4C6628B80DC1CD1
  %32 = fsub x86_fp80 %16, %30
  %33 = fmul x86_fp80 %24, 0xK3F7EA4093822299F31D0
  %34 = fsub x86_fp80 %32, %31
  %35 = fsub x86_fp80 %34, %33
  %36 = fadd x86_fp80 %4, 0xK3FFF8000000000000000
  %37 = fmul x86_fp80 %36, %36
  %38 = fadd x86_fp80 %8, %37
  %39 = fdiv x86_fp80 %38, %27
  %40 = tail call x86_fp80 @logl(x86_fp80 %39) nounwind optsize
  %41 = fmul x86_fp80 %40, 0xK3FFD8000000000000000
  %42 = fmul x86_fp80 %41, 0xK00000000000000000000
  %43 = fadd x86_fp80 %41, 0xK00000000000000000000
  %44 = fadd x86_fp80 %35, %42
  br label %45

; <label>:45                                      ; preds = %29, %redupil.exit, %7, %0
  %.1.0 = phi x86_fp80 [ %43, %29 ], [ 0xK7FFEFFFFFFFFFFFFFFFF, %0 ], [ 0xK7FFEFFFFFFFFFFFFFFFF, %redupil.exit ], [ 0xK7FFEFFFFFFFFFFFFFFFF, %7 ]
  %.0.03 = phi x86_fp80 [ %44, %29 ], [ 0xK7FFEFFFFFFFFFFFFFFFF, %0 ], [ 0xK7FFEFFFFFFFFFFFFFFFF, %redupil.exit ], [ 0xK7FFEFFFFFFFFFFFFFFFF, %7 ]
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %.0.03, 0
  %insert2 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %.1.0, 1
  ret { x86_fp80, x86_fp80 } %insert2
}

define { double, double } @catan(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fcmp oeq double %z.coerce0, 0.000000e+00
  %2 = fcmp ogt double %z.coerce1, 1.000000e+00
  %or.cond = and i1 %1, %2
  br i1 %or.cond, label %41, label %3

; <label>:3                                       ; preds = %0
  %4 = fmul double %z.coerce0, %z.coerce0
  %5 = fsub double 1.000000e+00, %4
  %6 = fmul double %z.coerce1, %z.coerce1
  %7 = fsub double %5, %6
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %41, label %9

; <label>:9                                       ; preds = %3
  %10 = fmul double %z.coerce0, 2.000000e+00
  %11 = tail call double @atan2(double %10, double %7) nounwind optsize
  %12 = fmul double %11, 5.000000e-01
  %13 = fdiv double %12, 0x400921FB54442D18
  %14 = fcmp ult double %13, 0.000000e+00
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %9
  %16 = fadd double %13, 5.000000e-01
  br label %_redupi.exit

; <label>:17                                      ; preds = %9
  %18 = fadd double %13, -5.000000e-01
  br label %_redupi.exit

_redupi.exit:                                     ; preds = %17, %15
  %t.0.i = phi double [ %16, %15 ], [ %18, %17 ]
  %19 = fptosi double %t.0.i to i64
  %20 = sitofp i64 %19 to double
  %21 = fadd double %z.coerce1, -1.000000e+00
  %22 = fmul double %21, %21
  %23 = fadd double %4, %22
  %24 = fcmp oeq double %23, 0.000000e+00
  br i1 %24, label %41, label %25

; <label>:25                                      ; preds = %_redupi.exit
  %26 = fmul double %20, 0x400921FB54000000
  %27 = fmul double %20, 0x3E210B4610000000
  %28 = fsub double %12, %26
  %29 = fmul double %20, 0x3C6A62633145C06E
  %30 = fsub double %28, %27
  %31 = fsub double %30, %29
  %32 = fadd double %z.coerce1, 1.000000e+00
  %33 = fmul double %32, %32
  %34 = fadd double %4, %33
  %35 = fdiv double %34, %23
  %36 = tail call double @log(double %35) nounwind optsize
  %37 = fmul double %36, 2.500000e-01
  %38 = fmul double %37, 0.000000e+00
  %39 = fadd double %37, 0.000000e+00
  %40 = fadd double %31, %38
  br label %41

; <label>:41                                      ; preds = %25, %_redupi.exit, %3, %0
  %.1.0 = phi double [ %39, %25 ], [ 1.000000e+308, %0 ], [ 1.000000e+308, %_redupi.exit ], [ 1.000000e+308, %3 ]
  %.0.03 = phi double [ %40, %25 ], [ 1.000000e+308, %0 ], [ 1.000000e+308, %_redupi.exit ], [ 1.000000e+308, %3 ]
  %insert = insertvalue { double, double } undef, double %.0.03, 0
  %insert2 = insertvalue { double, double } %insert, double %.1.0, 1
  ret { double, double } %insert2
}

define i32 @catclose(i64 %catd) nounwind uwtable readnone optsize {
  ret i32 0
}

define i8* @catgets(i64 %catd, i32 %set_id, i32 %msg_id, i8* %s) nounwind uwtable readnone optsize {
  ret i8* %s
}

define i64 @catopen(i8* nocapture %name, i32 %oflag) nounwind uwtable readnone optsize {
  ret i64 -1
}

define float @cbrtf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, -2147483648
  %3 = xor i32 %2, %1
  %4 = icmp sgt i32 %3, 2139095039
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = fadd float %x, %x
  br label %39

; <label>:7                                       ; preds = %0
  %8 = icmp slt i32 %3, 8388608
  br i1 %8, label %9, label %17

; <label>:9                                       ; preds = %7
  %10 = icmp eq i32 %1, %2
  br i1 %10, label %39, label %11

; <label>:11                                      ; preds = %9
  %12 = fmul float %x, 0x4170000000000000
  %13 = bitcast float %12 to i32
  %14 = and i32 %13, 2147483647
  %15 = udiv i32 %14, 3
  %16 = add i32 %15, 642849266
  br label %20

; <label>:17                                      ; preds = %7
  %18 = sdiv i32 %3, 3
  %19 = add i32 %18, 709958130
  br label %20

; <label>:20                                      ; preds = %17, %11
  %.pn = phi i32 [ %16, %11 ], [ %19, %17 ]
  %t.0.in = or i32 %.pn, %2
  %t.0 = bitcast i32 %t.0.in to float
  %21 = fpext float %t.0 to double
  %22 = fmul double %21, %21
  %23 = fmul double %22, %21
  %24 = fpext float %x to double
  %25 = fadd double %24, %24
  %26 = fadd double %25, %23
  %27 = fmul double %21, %26
  %28 = fadd double %24, %23
  %29 = fadd double %28, %23
  %30 = fdiv double %27, %29
  %31 = fmul double %30, %30
  %32 = fmul double %31, %30
  %33 = fadd double %25, %32
  %34 = fmul double %30, %33
  %35 = fadd double %24, %32
  %36 = fadd double %35, %32
  %37 = fdiv double %34, %36
  %38 = fptrunc double %37 to float
  br label %39

; <label>:39                                      ; preds = %20, %9, %5
  %.0 = phi float [ %6, %5 ], [ %38, %20 ], [ %x, %9 ]
  ret float %.0
}

define x86_fp80 @cbrtl(x86_fp80 %x) nounwind uwtable optsize {
  %vd2 = alloca double, align 8
  %vd1 = alloca double, align 8
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  switch i32 %4, label %19 [
    i32 32767, label %5
    i32 0, label %7
  ]

; <label>:5                                       ; preds = %0
  %6 = fadd x86_fp80 %x, %x
  br label %78

; <label>:7                                       ; preds = %0
  %8 = lshr i80 %1, 32
  %9 = or i80 %8, %1
  %10 = trunc i80 %9 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %78, label %12

; <label>:12                                      ; preds = %7
  %13 = fmul x86_fp80 %x, 0xK42018000000000000000
  %14 = bitcast x86_fp80 %13 to i80
  %15 = lshr i80 %14, 64
  %16 = trunc i80 %15 to i32
  %17 = and i32 %16, 32767
  %18 = add nsw i32 %17, -16897
  br label %21

; <label>:19                                      ; preds = %0
  %20 = add nsw i32 %4, -16383
  br label %21

; <label>:21                                      ; preds = %19, %12
  %u.0.in = phi i80 [ %14, %12 ], [ %1, %19 ]
  %k.0 = phi i32 [ %18, %12 ], [ %20, %19 ]
  %mask7 = and i80 %u.0.in, 18446744073709551615
  %ins8 = or i80 %mask7, 302213008159583584124928
  %22 = bitcast i80 %ins8 to x86_fp80
  %23 = srem i32 %k.0, 3
  switch i32 %23, label %30 [
    i32 1, label %24
    i32 -2, label %24
    i32 2, label %27
    i32 -1, label %27
  ]

; <label>:24                                      ; preds = %21, %21
  %25 = fmul x86_fp80 %22, 0xK40008000000000000000
  %26 = add nsw i32 %k.0, -1
  br label %30

; <label>:27                                      ; preds = %21, %21
  %28 = fmul x86_fp80 %22, 0xK40018000000000000000
  %29 = add nsw i32 %k.0, -2
  br label %30

; <label>:30                                      ; preds = %27, %24, %21
  %k.1 = phi i32 [ %k.0, %21 ], [ %29, %27 ], [ %26, %24 ]
  %.02 = phi x86_fp80 [ %22, %21 ], [ %28, %27 ], [ %25, %24 ]
  %31 = and i32 %3, 32768
  %32 = sdiv i32 %k.1, 3
  %33 = add nsw i32 %32, 16383
  %34 = or i32 %33, %31
  %35 = zext i32 %34 to i80
  %36 = shl i80 %35, 64
  %ins = or i80 %36, 9223372036854775808
  %37 = fptrunc x86_fp80 %.02 to float
  %38 = bitcast float %37 to i32
  %39 = and i32 %38, 2147483647
  %40 = udiv i32 %39, 3
  %41 = add i32 %40, 709958130
  %42 = bitcast i32 %41 to float
  %43 = fptrunc x86_fp80 %.02 to double
  %44 = fpext float %42 to double
  %45 = fmul double %44, %44
  %46 = fmul double %45, %44
  %47 = fadd double %43, %43
  %48 = fadd double %47, %46
  %49 = fmul double %44, %48
  %50 = fadd double %43, %46
  %51 = fadd double %50, %46
  %52 = fdiv double %49, %51
  %53 = fmul double %52, %52
  %54 = fmul double %53, %52
  %55 = fadd double %47, %54
  %56 = fmul double %52, %55
  %57 = fadd double %43, %54
  %58 = fadd double %57, %54
  %59 = fdiv double %56, %58
  store volatile double 0x41F0000000000000, double* %vd2, align 8, !tbaa !3
  store volatile double 0x3E00000000000000, double* %vd1, align 8, !tbaa !3
  %60 = fpext double %59 to x86_fp80
  %61 = load volatile double* %vd2, align 8, !tbaa !3
  %62 = fpext double %61 to x86_fp80
  %63 = load volatile double* %vd1, align 8, !tbaa !3
  %64 = fpext double %63 to x86_fp80
  %65 = fadd x86_fp80 %62, %64
  %66 = fadd x86_fp80 %60, %65
  %67 = fadd x86_fp80 %66, 0xKC01F8000000000000000
  %68 = fmul x86_fp80 %67, %67
  %69 = fdiv x86_fp80 %.02, %68
  %70 = fadd x86_fp80 %67, %67
  %71 = fsub x86_fp80 %69, %67
  %72 = fadd x86_fp80 %70, %69
  %73 = fdiv x86_fp80 %71, %72
  %74 = fmul x86_fp80 %67, %73
  %75 = fadd x86_fp80 %67, %74
  %76 = bitcast i80 %ins to x86_fp80
  %77 = fmul x86_fp80 %75, %76
  br label %78

; <label>:78                                      ; preds = %30, %7, %5
  %.0 = phi x86_fp80 [ %6, %5 ], [ %77, %30 ], [ %x, %7 ]
  ret x86_fp80 %.0
}

define double @cbrt(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, -2147483648
  %6 = xor i32 %5, %3
  %7 = icmp sgt i32 %6, 2146435071
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %0
  %9 = fadd double %x, %x
  br label %53

; <label>:10                                      ; preds = %0
  %11 = icmp slt i32 %6, 1048576
  br i1 %11, label %12, label %23

; <label>:12                                      ; preds = %10
  %13 = or i32 %6, %4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %53, label %15

; <label>:15                                      ; preds = %12
  %16 = fmul double %x, 0x4350000000000000
  %17 = bitcast double %16 to i64
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 2147483647
  %21 = udiv i32 %20, 3
  %22 = add i32 %21, 696219795
  br label %26

; <label>:23                                      ; preds = %10
  %24 = sdiv i32 %6, 3
  %25 = add i32 %24, 715094163
  br label %26

; <label>:26                                      ; preds = %23, %15
  %.pn = phi i32 [ %22, %15 ], [ %25, %23 ]
  %t.0.in.in.in = or i32 %.pn, %5
  %t.0.in.in = zext i32 %t.0.in.in.in to i64
  %t.0.in = shl nuw i64 %t.0.in.in, 32
  %t.0 = bitcast i64 %t.0.in to double
  %27 = fmul double %t.0, %t.0
  %28 = fdiv double %t.0, %x
  %29 = fmul double %27, %28
  %30 = fmul double %29, 0x3FF9F1604A49D6C2
  %31 = fadd double %30, 0xBFFE28E092F02420
  %32 = fmul double %29, %31
  %33 = fadd double %32, 0x3FFE03E60F61E692
  %34 = fmul double %29, %29
  %35 = fmul double %34, %29
  %36 = fmul double %29, 0x3FC2B000D4E4EDD7
  %37 = fadd double %36, 0xBFE844CBBEE751D9
  %38 = fmul double %35, %37
  %39 = fadd double %33, %38
  %40 = fmul double %t.0, %39
  %41 = bitcast double %40 to i64
  %42 = add i64 %41, 2147483648
  %43 = and i64 %42, -1073741824
  %44 = bitcast i64 %43 to double
  %45 = fmul double %44, %44
  %46 = fdiv double %x, %45
  %47 = fadd double %44, %44
  %48 = fsub double %46, %44
  %49 = fadd double %47, %46
  %50 = fdiv double %48, %49
  %51 = fmul double %44, %50
  %52 = fadd double %44, %51
  br label %53

; <label>:53                                      ; preds = %26, %12, %8
  %.0 = phi double [ %9, %8 ], [ %52, %26 ], [ %x, %12 ]
  ret double %.0
}

define <2 x float> @ccosf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  %2 = fsub float -0.000000e+00, %1
  %3 = insertelement <2 x float> undef, float %2, i32 0
  %4 = shufflevector <2 x float> %3, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 2>
  %5 = tail call <2 x float> @ccoshf(<2 x float> %4) nounwind optsize
  ret <2 x float> %5
}

define <2 x float> @ccoshf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = bitcast float %1 to i32
  %4 = bitcast float %2 to i32
  %5 = and i32 %3, 2147483647
  %6 = and i32 %4, 2147483647
  %7 = icmp ult i32 %5, 2139095040
  %8 = icmp ult i32 %6, 2139095040
  %or.cond = and i1 %7, %8
  br i1 %or.cond, label %9, label %62

; <label>:9                                       ; preds = %0
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %9
  %12 = tail call float @coshf(float %1) nounwind optsize
  %13 = fmul float %1, %2
  %14 = insertelement <2 x float> undef, float %12, i32 0
  %15 = insertelement <2 x float> %14, float %13, i32 1
  br label %119

; <label>:16                                      ; preds = %9
  %17 = icmp ult i32 %5, 1091567616
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %16
  %19 = tail call float @coshf(float %1) nounwind optsize
  %20 = tail call float @cosf(float %2) nounwind optsize
  %21 = fmul float %19, %20
  %22 = tail call float @sinhf(float %1) nounwind optsize
  %23 = tail call float @sinf(float %2) nounwind optsize
  %24 = fmul float %22, %23
  %25 = insertelement <2 x float> undef, float %21, i32 0
  %26 = insertelement <2 x float> %25, float %24, i32 1
  br label %119

; <label>:27                                      ; preds = %16
  %28 = icmp ult i32 %5, 1118925336
  br i1 %28, label %29, label %40

; <label>:29                                      ; preds = %27
  %30 = tail call float @fabsf(float %1) nounwind optsize
  %31 = tail call float @expf(float %30) nounwind optsize
  %32 = fmul float %31, 5.000000e-01
  %33 = tail call float @cosf(float %2) nounwind optsize
  %34 = fmul float %32, %33
  %35 = tail call float @copysignf(float %32, float %1) nounwind optsize
  %36 = tail call float @sinf(float %2) nounwind optsize
  %37 = fmul float %35, %36
  %38 = insertelement <2 x float> undef, float %34, i32 0
  %39 = insertelement <2 x float> %38, float %37, i32 1
  br label %119

; <label>:40                                      ; preds = %27
  %41 = icmp ult i32 %5, 1128313319
  br i1 %41, label %42, label %53

; <label>:42                                      ; preds = %40
  %43 = tail call float @fabsf(float %1) nounwind optsize
  %44 = insertelement <2 x float> undef, float %43, i32 0
  %45 = shufflevector <2 x float> %44, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 3>
  %46 = tail call <2 x float> @__ldexp_cexpf(<2 x float> %45, i32 -1) nounwind optsize
  %47 = extractelement <2 x float> %46, i32 0
  %48 = extractelement <2 x float> %46, i32 1
  %49 = tail call float @copysignf(float 1.000000e+00, float %1) nounwind optsize
  %50 = fmul float %48, %49
  %51 = insertelement <2 x float> undef, float %47, i32 0
  %52 = insertelement <2 x float> %51, float %50, i32 1
  br label %119

; <label>:53                                      ; preds = %40
  %54 = fmul float %1, 0x47E0000000000000
  %55 = fmul float %54, %54
  %56 = tail call float @cosf(float %2) nounwind optsize
  %57 = fmul float %55, %56
  %58 = tail call float @sinf(float %2) nounwind optsize
  %59 = fmul float %54, %58
  %60 = insertelement <2 x float> undef, float %57, i32 0
  %61 = insertelement <2 x float> %60, float %59, i32 1
  br label %119

; <label>:62                                      ; preds = %0
  %63 = icmp eq i32 %5, 0
  %64 = icmp ugt i32 %6, 2139095039
  %or.cond63 = and i1 %63, %64
  br i1 %or.cond63, label %65, label %71

; <label>:65                                      ; preds = %62
  %66 = fsub float %2, %2
  %67 = fmul float %1, %66
  %68 = tail call float @copysignf(float 0.000000e+00, float %67) nounwind optsize
  %69 = insertelement <2 x float> undef, float %66, i32 0
  %70 = insertelement <2 x float> %69, float %68, i32 1
  br label %119

; <label>:71                                      ; preds = %62
  %72 = icmp eq i32 %6, 0
  %73 = icmp ugt i32 %5, 2139095039
  %or.cond64 = and i1 %72, %73
  br i1 %or.cond64, label %74, label %89

; <label>:74                                      ; preds = %71
  %75 = and i32 %3, 8388607
  %76 = icmp eq i32 %75, 0
  %77 = fmul float %1, %1
  br i1 %76, label %78, label %83

; <label>:78                                      ; preds = %74
  %79 = tail call float @copysignf(float 0.000000e+00, float %1) nounwind optsize
  %80 = fmul float %79, %2
  %81 = insertelement <2 x float> undef, float %77, i32 0
  %82 = insertelement <2 x float> %81, float %80, i32 1
  br label %119

; <label>:83                                      ; preds = %74
  %84 = fadd float %1, %1
  %85 = fmul float %84, %2
  %86 = tail call float @copysignf(float 0.000000e+00, float %85) nounwind optsize
  %87 = insertelement <2 x float> undef, float %77, i32 0
  %88 = insertelement <2 x float> %87, float %86, i32 1
  br label %119

; <label>:89                                      ; preds = %71
  %or.cond65 = and i1 %7, %64
  br i1 %or.cond65, label %90, label %95

; <label>:90                                      ; preds = %89
  %91 = fsub float %2, %2
  %92 = fmul float %1, %91
  %93 = insertelement <2 x float> undef, float %91, i32 0
  %94 = insertelement <2 x float> %93, float %92, i32 1
  br label %119

; <label>:95                                      ; preds = %89
  %96 = and i32 %3, 8388607
  %97 = icmp eq i32 %96, 0
  %or.cond67 = and i1 %73, %97
  %98 = fmul float %1, %1
  br i1 %or.cond67, label %99, label %112

; <label>:99                                      ; preds = %95
  br i1 %64, label %100, label %105

; <label>:100                                     ; preds = %99
  %101 = fsub float %2, %2
  %102 = fmul float %1, %101
  %103 = insertelement <2 x float> undef, float %98, i32 0
  %104 = insertelement <2 x float> %103, float %102, i32 1
  br label %119

; <label>:105                                     ; preds = %99
  %106 = tail call float @cosf(float %2) nounwind optsize
  %107 = fmul float %98, %106
  %108 = tail call float @sinf(float %2) nounwind optsize
  %109 = fmul float %1, %108
  %110 = insertelement <2 x float> undef, float %107, i32 0
  %111 = insertelement <2 x float> %110, float %109, i32 1
  br label %119

; <label>:112                                     ; preds = %95
  %113 = fsub float %2, %2
  %114 = fmul float %98, %113
  %115 = fadd float %1, %1
  %116 = fmul float %115, %113
  %117 = insertelement <2 x float> undef, float %114, i32 0
  %118 = insertelement <2 x float> %117, float %116, i32 1
  br label %119

; <label>:119                                     ; preds = %112, %105, %100, %90, %83, %78, %65, %53, %42, %29, %18, %11
  %.0 = phi <2 x float> [ %15, %11 ], [ %26, %18 ], [ %39, %29 ], [ %52, %42 ], [ %61, %53 ], [ %70, %65 ], [ %82, %78 ], [ %88, %83 ], [ %94, %90 ], [ %104, %100 ], [ %111, %105 ], [ %118, %112 ]
  ret <2 x float> %.0
}

define { x86_fp80, x86_fp80 } @ccoshl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fptrunc x86_fp80 %2 to double
  %6 = fptrunc x86_fp80 %4 to double
  %7 = tail call { double, double } @ccosh(double %5, double %6) nounwind optsize
  %8 = extractvalue { double, double } %7, 0
  %9 = extractvalue { double, double } %7, 1
  %10 = fpext double %8 to x86_fp80
  %11 = fpext double %9 to x86_fp80
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %10, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %11, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @ccosh(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = bitcast double %z.coerce0 to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %z.coerce1 to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = and i32 %3, 2147483647
  %10 = and i32 %7, 2147483647
  %11 = icmp ult i32 %9, 2146435072
  %12 = icmp ult i32 %10, 2146435072
  %or.cond = and i1 %11, %12
  br i1 %or.cond, label %13, label %55

; <label>:13                                      ; preds = %0
  %14 = or i32 %10, %8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

; <label>:16                                      ; preds = %13
  %17 = tail call double @cosh(double %z.coerce0) nounwind optsize
  %18 = fmul double %z.coerce0, %z.coerce1
  br label %104

; <label>:19                                      ; preds = %13
  %20 = icmp ult i32 %9, 1077280768
  br i1 %20, label %21, label %28

; <label>:21                                      ; preds = %19
  %22 = tail call double @cosh(double %z.coerce0) nounwind optsize
  %23 = tail call double @cos(double %z.coerce1) nounwind optsize
  %24 = fmul double %22, %23
  %25 = tail call double @sinh(double %z.coerce0) nounwind optsize
  %26 = tail call double @sin(double %z.coerce1) nounwind optsize
  %27 = fmul double %25, %26
  br label %104

; <label>:28                                      ; preds = %19
  %29 = icmp ult i32 %9, 1082535490
  br i1 %29, label %30, label %39

; <label>:30                                      ; preds = %28
  %31 = tail call double @fabs(double %z.coerce0) nounwind optsize
  %32 = tail call double @exp(double %31) nounwind optsize
  %33 = fmul double %32, 5.000000e-01
  %34 = tail call double @cos(double %z.coerce1) nounwind optsize
  %35 = fmul double %33, %34
  %36 = tail call double @copysign(double %33, double %z.coerce0) nounwind optsize
  %37 = tail call double @sin(double %z.coerce1) nounwind optsize
  %38 = fmul double %36, %37
  br label %104

; <label>:39                                      ; preds = %28
  %40 = icmp ult i32 %9, 1083620266
  br i1 %40, label %41, label %48

; <label>:41                                      ; preds = %39
  %42 = tail call double @fabs(double %z.coerce0) nounwind optsize
  %43 = tail call { double, double } @__ldexp_cexp(double %42, double %z.coerce1, i32 -1) nounwind optsize
  %44 = extractvalue { double, double } %43, 0
  %45 = extractvalue { double, double } %43, 1
  %46 = tail call double @copysign(double 1.000000e+00, double %z.coerce0) nounwind optsize
  %47 = fmul double %45, %46
  br label %104

; <label>:48                                      ; preds = %39
  %49 = fmul double %z.coerce0, 0x7FE0000000000000
  %50 = fmul double %49, %49
  %51 = tail call double @cos(double %z.coerce1) nounwind optsize
  %52 = fmul double %50, %51
  %53 = tail call double @sin(double %z.coerce1) nounwind optsize
  %54 = fmul double %49, %53
  br label %104

; <label>:55                                      ; preds = %0
  %56 = or i32 %9, %4
  %57 = icmp eq i32 %56, 0
  %58 = icmp ugt i32 %10, 2146435071
  %or.cond32 = and i1 %57, %58
  br i1 %or.cond32, label %59, label %63

; <label>:59                                      ; preds = %55
  %60 = fsub double %z.coerce1, %z.coerce1
  %61 = fmul double %60, %z.coerce0
  %62 = tail call double @copysign(double 0.000000e+00, double %61) nounwind optsize
  br label %104

; <label>:63                                      ; preds = %55
  %64 = or i32 %10, %8
  %65 = icmp eq i32 %64, 0
  %66 = icmp ugt i32 %9, 2146435071
  %or.cond33 = and i1 %65, %66
  br i1 %or.cond33, label %67, label %79

; <label>:67                                      ; preds = %63
  %68 = and i32 %3, 1048575
  %69 = or i32 %68, %4
  %70 = icmp eq i32 %69, 0
  %71 = fmul double %z.coerce0, %z.coerce0
  br i1 %70, label %72, label %75

; <label>:72                                      ; preds = %67
  %73 = tail call double @copysign(double 0.000000e+00, double %z.coerce0) nounwind optsize
  %74 = fmul double %73, %z.coerce1
  br label %104

; <label>:75                                      ; preds = %67
  %76 = fadd double %z.coerce0, %z.coerce0
  %77 = fmul double %76, %z.coerce1
  %78 = tail call double @copysign(double 0.000000e+00, double %77) nounwind optsize
  br label %104

; <label>:79                                      ; preds = %63
  %or.cond34 = and i1 %11, %58
  br i1 %or.cond34, label %80, label %83

; <label>:80                                      ; preds = %79
  %81 = fsub double %z.coerce1, %z.coerce1
  %82 = fmul double %81, %z.coerce0
  br label %104

; <label>:83                                      ; preds = %79
  br i1 %66, label %84, label %98

; <label>:84                                      ; preds = %83
  %85 = and i32 %3, 1048575
  %86 = or i32 %85, %4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %98

; <label>:88                                      ; preds = %84
  %89 = fmul double %z.coerce0, %z.coerce0
  br i1 %58, label %90, label %93

; <label>:90                                      ; preds = %88
  %91 = fsub double %z.coerce1, %z.coerce1
  %92 = fmul double %91, %z.coerce0
  br label %104

; <label>:93                                      ; preds = %88
  %94 = tail call double @cos(double %z.coerce1) nounwind optsize
  %95 = fmul double %89, %94
  %96 = tail call double @sin(double %z.coerce1) nounwind optsize
  %97 = fmul double %96, %z.coerce0
  br label %104

; <label>:98                                      ; preds = %84, %83
  %99 = fmul double %z.coerce0, %z.coerce0
  %100 = fsub double %z.coerce1, %z.coerce1
  %101 = fmul double %99, %100
  %102 = fadd double %z.coerce0, %z.coerce0
  %103 = fmul double %102, %100
  br label %104

; <label>:104                                     ; preds = %98, %93, %90, %80, %75, %72, %59, %48, %41, %30, %21, %16
  %.028.0 = phi double [ %17, %16 ], [ %24, %21 ], [ %35, %30 ], [ %44, %41 ], [ %52, %48 ], [ %60, %59 ], [ %71, %72 ], [ %71, %75 ], [ %81, %80 ], [ %89, %90 ], [ %95, %93 ], [ %101, %98 ]
  %.129.0 = phi double [ %18, %16 ], [ %27, %21 ], [ %38, %30 ], [ %47, %41 ], [ %54, %48 ], [ %62, %59 ], [ %74, %72 ], [ %78, %75 ], [ %82, %80 ], [ %92, %90 ], [ %97, %93 ], [ %103, %98 ]
  %insert = insertvalue { double, double } undef, double %.028.0, 0
  %insert31 = insertvalue { double, double } %insert, double %.129.0, 1
  ret { double, double } %insert31
}

define { x86_fp80, x86_fp80 } @ccosl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fsub x86_fp80 0xK80000000000000000000, %4
  %6 = load x86_fp80* %2, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %8 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %5, x86_fp80* %7, align 16
  store x86_fp80 %6, x86_fp80* %8, align 16
  %9 = call { x86_fp80, x86_fp80 } @ccoshl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  ret { x86_fp80, x86_fp80 } %9
}

define { double, double } @ccos(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fsub double -0.000000e+00, %z.coerce1
  %2 = tail call { double, double } @ccosh(double %1, double %z.coerce0) nounwind optsize
  ret { double, double } %2
}

define float @ceilf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  %4 = add nsw i32 %3, -127
  %5 = icmp slt i32 %4, 23
  br i1 %5, label %6, label %31

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %4, 0
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %6
  %9 = fadd float %x, 0x46293E5940000000
  %10 = fcmp ogt float %9, 0.000000e+00
  br i1 %10, label %11, label %35

; <label>:11                                      ; preds = %8
  %12 = icmp slt i32 %1, 0
  br i1 %12, label %35, label %13

; <label>:13                                      ; preds = %11
  %14 = icmp eq i32 %1, 0
  br i1 %14, label %35, label %15

; <label>:15                                      ; preds = %13
  br label %35

; <label>:16                                      ; preds = %6
  %17 = lshr i32 8388607, %4
  %18 = and i32 %17, %1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %37, label %20

; <label>:20                                      ; preds = %16
  %21 = fadd float %x, 0x46293E5940000000
  %22 = fcmp ogt float %21, 0.000000e+00
  br i1 %22, label %23, label %35

; <label>:23                                      ; preds = %20
  %24 = icmp sgt i32 %1, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %23
  %26 = lshr i32 8388608, %4
  %27 = add nsw i32 %26, %1
  br label %28

; <label>:28                                      ; preds = %25, %23
  %i0.0 = phi i32 [ %27, %25 ], [ %1, %23 ]
  %29 = xor i32 %17, -1
  %30 = and i32 %i0.0, %29
  br label %35

; <label>:31                                      ; preds = %0
  %32 = icmp eq i32 %4, 128
  br i1 %32, label %33, label %37

; <label>:33                                      ; preds = %31
  %34 = fadd float %x, %x
  br label %37

; <label>:35                                      ; preds = %28, %20, %15, %13, %11, %8
  %i0.1 = phi i32 [ 1065353216, %15 ], [ 0, %13 ], [ %1, %8 ], [ %30, %28 ], [ %1, %20 ], [ -2147483648, %11 ]
  %36 = bitcast i32 %i0.1 to float
  br label %37

; <label>:37                                      ; preds = %35, %33, %31, %16
  %.0 = phi float [ %36, %35 ], [ %34, %33 ], [ %x, %16 ], [ %x, %31 ]
  ret float %.0
}

define x86_fp80 @ceill(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = zext i80 %1 to i128
  %3 = lshr i80 %1, 64
  %4 = trunc i80 %3 to i32
  %5 = and i32 %4, 32767
  %6 = add nsw i32 %5, -16383
  %7 = icmp slt i32 %6, 31
  br i1 %7, label %8, label %66

; <label>:8                                       ; preds = %0
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %10, label %24

; <label>:10                                      ; preds = %8
  %11 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %12 = fcmp ogt x86_fp80 %11, 0xK00000000000000000000
  br i1 %12, label %13, label %135

; <label>:13                                      ; preds = %10
  %14 = icmp eq i32 %5, 0
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %13
  %16 = lshr i80 %1, 32
  %17 = or i80 %16, %1
  %18 = trunc i80 %17 to i32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %135, label %20

; <label>:20                                      ; preds = %15, %13
  %21 = ashr i80 %1, 79
  %22 = and i80 %21, 302240678275694148452352
  %23 = add i80 %22, 302222231531620438900736
  br label %135

; <label>:24                                      ; preds = %8
  %25 = add nsw i32 %5, -16382
  %26 = zext i32 %25 to i64
  %27 = lshr i64 4294967295, %26
  %28 = lshr i80 %1, 32
  %29 = trunc i80 %28 to i64
  %30 = and i64 %29, 4294967295
  %31 = and i64 %27, %30
  %32 = trunc i80 %1 to i64
  %33 = and i64 %32, 4294967295
  %34 = or i64 %31, %33
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %137, label %36

; <label>:36                                      ; preds = %24
  %37 = icmp slt i80 %1, 0
  br i1 %37, label %56, label %38

; <label>:38                                      ; preds = %36
  %39 = sub i32 16414, %5
  %40 = zext i32 %39 to i64
  %41 = shl i64 1, %40
  %42 = add i64 %41, %29
  %.mask56 = and i64 %42, 4294967295
  %43 = zext i64 %.mask56 to i128
  %44 = shl nuw nsw i128 %43, 32
  %mask38 = and i128 %2, 1208907372870559760121855
  %ins39 = or i128 %44, %mask38
  %45 = icmp ult i64 %.mask56, %30
  br i1 %45, label %46, label %56

; <label>:46                                      ; preds = %38
  %47 = add i32 %4, 1
  %48 = and i32 %47, 32767
  %49 = and i32 %4, 32768
  %50 = or i32 %48, %49
  %51 = zext i32 %50 to i128
  %52 = shl nuw nsw i128 %51, 64
  %mask35 = and i128 %2, 4294967295
  %53 = and i64 %42, 2147483647
  %.mask58 = or i64 %53, 2147483648
  %54 = zext i64 %.mask58 to i128
  %55 = shl nuw nsw i128 %54, 32
  %.masked59 = and i128 %52, 1208907372870555465154560
  %mask32 = or i128 %.masked59, %mask35
  %ins33 = or i128 %mask32, %55
  br label %56

; <label>:56                                      ; preds = %46, %38, %36
  %u.0 = phi i128 [ %2, %36 ], [ %ins33, %46 ], [ %ins39, %38 ]
  %57 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %58 = fcmp ogt x86_fp80 %57, 0xK00000000000000000000
  %extract.t49 = trunc i128 %u.0 to i80
  br i1 %58, label %59, label %135

; <label>:59                                      ; preds = %56
  %60 = lshr i128 %u.0, 32
  %61 = trunc i128 %60 to i64
  %62 = and i64 %27, 4294967295
  %63 = xor i64 %62, 4294967295
  %.mask57 = and i64 %63, %61
  %64 = zext i64 %.mask57 to i128
  %65 = shl nuw nsw i128 %64, 32
  %mask29 = and i128 %u.0, 1208907372870555465154560
  %ins30 = or i128 %65, %mask29
  %ins30.tr = trunc i128 %ins30 to i80
  %extract.t48 = and i80 %ins30.tr, -4294967296
  br label %135

; <label>:66                                      ; preds = %0
  %67 = icmp slt i32 %6, 63
  br i1 %67, label %68, label %135

; <label>:68                                      ; preds = %66
  %69 = add nsw i32 %5, -16382
  %70 = zext i32 %69 to i64
  %71 = lshr i64 -1, %70
  %72 = trunc i80 %1 to i64
  %73 = and i64 %72, 4294967295
  %74 = and i64 %71, %73
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %137, label %76

; <label>:76                                      ; preds = %68
  %77 = icmp slt i80 %1, 0
  br i1 %77, label %127, label %78

; <label>:78                                      ; preds = %76
  %79 = icmp eq i32 %6, 31
  br i1 %79, label %80, label %100

; <label>:80                                      ; preds = %78
  %81 = lshr i80 %1, 32
  %82 = trunc i80 %81 to i32
  %83 = trunc i80 %81 to i64
  %84 = and i64 %83, 4294967295
  %85 = add i32 %82, 1
  %86 = zext i32 %85 to i128
  %87 = shl nuw nsw i128 %86, 32
  %mask24 = and i128 %2, 1208907372870559760121855
  %ins25 = or i128 %87, %mask24
  %88 = zext i32 %85 to i64
  %89 = icmp ult i64 %88, %84
  br i1 %89, label %90, label %127

; <label>:90                                      ; preds = %80
  %91 = add i32 %4, 1
  %92 = and i32 %91, 32767
  %93 = and i32 %4, 32768
  %94 = or i32 %92, %93
  %95 = zext i32 %94 to i128
  %96 = shl nuw nsw i128 %95, 64
  %mask21 = and i128 %2, 4294967295
  %97 = or i32 %85, -2147483648
  %98 = zext i32 %97 to i128
  %99 = shl nuw nsw i128 %98, 32
  %.masked54 = and i128 %96, 1208907372870555465154560
  %mask18 = or i128 %99, %mask21
  %ins19 = or i128 %mask18, %.masked54
  br label %127

; <label>:100                                     ; preds = %78
  %101 = sub i32 16446, %5
  %102 = zext i32 %101 to i64
  %103 = shl i64 1, %102
  %104 = add i64 %103, %72
  %.mask = and i64 %104, 4294967295
  %105 = zext i64 %.mask to i128
  %mask15 = and i128 %2, 1208925819614624879738880
  %ins16 = or i128 %105, %mask15
  %106 = icmp ult i64 %.mask, %73
  br i1 %106, label %107, label %127

; <label>:107                                     ; preds = %100
  %108 = lshr i80 %1, 32
  %109 = trunc i80 %108 to i32
  %110 = trunc i80 %108 to i64
  %111 = and i64 %110, 4294967295
  %112 = add i32 %109, 1
  %113 = zext i32 %112 to i128
  %114 = shl nuw nsw i128 %113, 32
  %mask12 = and i128 %ins16, 1208907372870559760121855
  %ins13 = or i128 %mask12, %114
  %115 = zext i32 %112 to i64
  %116 = icmp ult i64 %115, %111
  br i1 %116, label %117, label %127

; <label>:117                                     ; preds = %107
  %118 = add i32 %4, 1
  %119 = and i32 %118, 32767
  %120 = and i32 %4, 32768
  %121 = or i32 %119, %120
  %122 = zext i32 %121 to i128
  %123 = shl nuw nsw i128 %122, 64
  %124 = or i32 %112, -2147483648
  %125 = zext i32 %124 to i128
  %126 = shl nuw nsw i128 %125, 32
  %.masked = and i128 %123, 1208907372870555465154560
  %mask6 = or i128 %.masked, %126
  %ins7 = or i128 %mask6, %105
  br label %127

; <label>:127                                     ; preds = %117, %107, %100, %90, %80, %76
  %u.1 = phi i128 [ %2, %76 ], [ %ins19, %90 ], [ %ins25, %80 ], [ %ins7, %117 ], [ %ins13, %107 ], [ %ins16, %100 ]
  %128 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %129 = fcmp ogt x86_fp80 %128, 0xK00000000000000000000
  %extract.t51 = trunc i128 %u.1 to i80
  br i1 %129, label %130, label %135

; <label>:130                                     ; preds = %127
  %131 = trunc i128 %u.1 to i64
  %132 = and i64 %71, 4294967295
  %133 = xor i64 %132, 4294967295
  %.mask53 = and i64 %133, %131
  %134 = zext i64 %.mask53 to i128
  %mask = and i128 %u.1, 1208925819614624879738880
  %ins = or i128 %134, %mask
  %extract.t50 = trunc i128 %ins to i80
  br label %135

; <label>:135                                     ; preds = %130, %127, %66, %59, %56, %20, %15, %10
  %u.2.off0 = phi i80 [ %23, %20 ], [ %1, %15 ], [ %1, %10 ], [ %extract.t48, %59 ], [ %extract.t49, %56 ], [ %extract.t50, %130 ], [ %extract.t51, %127 ], [ %1, %66 ]
  %136 = bitcast i80 %u.2.off0 to x86_fp80
  br label %137

; <label>:137                                     ; preds = %135, %68, %24
  %.0 = phi x86_fp80 [ %136, %135 ], [ %x, %24 ], [ %x, %68 ]
  ret x86_fp80 %.0
}

define double @ceil(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = lshr i64 %1, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = add nsw i32 %7, -1023
  %9 = icmp slt i32 %8, 20
  br i1 %9, label %10, label %38

; <label>:10                                      ; preds = %0
  %11 = icmp slt i32 %8, 0
  br i1 %11, label %12, label %22

; <label>:12                                      ; preds = %10
  %13 = fadd double %x, 1.000000e+300
  %14 = fcmp ogt double %13, 0.000000e+00
  br i1 %14, label %15, label %67

; <label>:15                                      ; preds = %12
  %16 = icmp slt i32 %3, 0
  br i1 %16, label %67, label %17

; <label>:17                                      ; preds = %15
  %18 = or i64 %2, %1
  %19 = trunc i64 %18 to i32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %67, label %21

; <label>:21                                      ; preds = %17
  br label %67

; <label>:22                                      ; preds = %10
  %23 = lshr i32 1048575, %8
  %24 = and i32 %23, %3
  %25 = or i32 %24, %4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %73, label %27

; <label>:27                                      ; preds = %22
  %28 = fadd double %x, 1.000000e+300
  %29 = fcmp ogt double %28, 0.000000e+00
  br i1 %29, label %30, label %67

; <label>:30                                      ; preds = %27
  %31 = icmp sgt i32 %3, 0
  br i1 %31, label %32, label %35

; <label>:32                                      ; preds = %30
  %33 = lshr i32 1048576, %8
  %34 = add nsw i32 %33, %3
  br label %35

; <label>:35                                      ; preds = %32, %30
  %i0.0 = phi i32 [ %34, %32 ], [ %3, %30 ]
  %36 = xor i32 %23, -1
  %37 = and i32 %i0.0, %36
  br label %67

; <label>:38                                      ; preds = %0
  %39 = icmp sgt i32 %8, 51
  br i1 %39, label %40, label %44

; <label>:40                                      ; preds = %38
  %41 = icmp eq i32 %8, 1024
  br i1 %41, label %42, label %73

; <label>:42                                      ; preds = %40
  %43 = fadd double %x, %x
  br label %73

; <label>:44                                      ; preds = %38
  %45 = add nsw i32 %7, -1043
  %46 = lshr i32 -1, %45
  %47 = and i32 %46, %4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %73, label %49

; <label>:49                                      ; preds = %44
  %50 = fadd double %x, 1.000000e+300
  %51 = fcmp ogt double %50, 0.000000e+00
  br i1 %51, label %52, label %67

; <label>:52                                      ; preds = %49
  %53 = icmp sgt i32 %3, 0
  br i1 %53, label %54, label %64

; <label>:54                                      ; preds = %52
  %55 = icmp eq i32 %8, 20
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %54
  %57 = add nsw i32 %3, 1
  br label %64

; <label>:58                                      ; preds = %54
  %59 = sub i32 1075, %7
  %60 = shl i32 1, %59
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %4, i32 %60)
  %61 = extractvalue { i32, i1 } %uadd, 0
  %62 = extractvalue { i32, i1 } %uadd, 1
  %63 = zext i1 %62 to i32
  %. = add nsw i32 %63, %3
  br label %64

; <label>:64                                      ; preds = %58, %56, %52
  %i1.0 = phi i32 [ %4, %56 ], [ %61, %58 ], [ %4, %52 ]
  %i0.2 = phi i32 [ %57, %56 ], [ %., %58 ], [ %3, %52 ]
  %65 = xor i32 %46, -1
  %66 = and i32 %i1.0, %65
  br label %67

; <label>:67                                      ; preds = %64, %49, %35, %27, %21, %17, %15, %12
  %i1.1 = phi i32 [ 0, %21 ], [ %4, %17 ], [ %4, %12 ], [ 0, %35 ], [ %4, %27 ], [ %66, %64 ], [ %4, %49 ], [ 0, %15 ]
  %i0.3 = phi i32 [ 1072693248, %21 ], [ %3, %17 ], [ %3, %12 ], [ %37, %35 ], [ %3, %27 ], [ %i0.2, %64 ], [ %3, %49 ], [ -2147483648, %15 ]
  %68 = zext i32 %i0.3 to i64
  %69 = shl nuw i64 %68, 32
  %70 = zext i32 %i1.1 to i64
  %71 = or i64 %69, %70
  %72 = bitcast i64 %71 to double
  br label %73

; <label>:73                                      ; preds = %67, %44, %42, %40, %22
  %.0 = phi double [ %72, %67 ], [ %43, %42 ], [ %x, %22 ], [ %x, %40 ], [ %x, %44 ]
  ret double %.0
}

declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) nounwind readnone

define <2 x float> @__ldexp_cexpf(<2 x float> %z.coerce, i32 %expt) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = fadd float %1, 0xC0645C7780000000
  %4 = tail call float @expf(float %3) nounwind optsize
  %5 = bitcast float %4 to i32
  %6 = lshr i32 %5, 23
  %7 = and i32 %5, 8388607
  %8 = or i32 %7, 2130706432
  %9 = bitcast i32 %8 to float
  %10 = add i32 %expt, -19
  %11 = add i32 %10, %6
  %12 = sdiv i32 %11, 2
  %13 = shl i32 %12, 23
  %14 = add i32 %13, 1065353216
  %15 = bitcast i32 %14 to float
  %16 = sub nsw i32 %11, %12
  %17 = shl i32 %16, 23
  %18 = add i32 %17, 1065353216
  %19 = bitcast i32 %18 to float
  %20 = tail call float @cosf(float %2) nounwind optsize
  %21 = fmul float %20, %9
  %22 = fmul float %21, %15
  %23 = fmul float %22, %19
  %24 = tail call float @sinf(float %2) nounwind optsize
  %25 = fmul float %24, %9
  %26 = fmul float %25, %15
  %27 = fmul float %26, %19
  %28 = insertelement <2 x float> undef, float %23, i32 0
  %29 = insertelement <2 x float> %28, float %27, i32 1
  ret <2 x float> %29
}

define <2 x float> @cexpf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = bitcast float %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %0
  %7 = tail call float @expf(float %1) nounwind optsize
  %8 = insertelement <2 x float> undef, float %7, i32 0
  %9 = shufflevector <2 x float> %8, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 3>
  br label %45

; <label>:10                                      ; preds = %0
  %11 = bitcast float %1 to i32
  %12 = and i32 %11, 2147483647
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

; <label>:14                                      ; preds = %10
  %15 = tail call float @cosf(float %2) nounwind optsize
  %16 = tail call float @sinf(float %2) nounwind optsize
  %17 = insertelement <2 x float> undef, float %15, i32 0
  %18 = insertelement <2 x float> %17, float %16, i32 1
  br label %45

; <label>:19                                      ; preds = %10
  %20 = icmp ugt i32 %4, 2139095039
  br i1 %20, label %21, label %33

; <label>:21                                      ; preds = %19
  %22 = icmp eq i32 %12, 2139095040
  br i1 %22, label %27, label %23

; <label>:23                                      ; preds = %21
  %24 = fsub float %2, %2
  %25 = insertelement <2 x float> undef, float %24, i32 0
  %26 = insertelement <2 x float> %25, float %24, i32 1
  br label %45

; <label>:27                                      ; preds = %21
  %28 = icmp slt i32 %11, 0
  br i1 %28, label %45, label %29

; <label>:29                                      ; preds = %27
  %30 = fsub float %2, %2
  %31 = insertelement <2 x float> undef, float %1, i32 0
  %32 = insertelement <2 x float> %31, float %30, i32 1
  br label %45

; <label>:33                                      ; preds = %19
  %.off = add i32 %11, -1118925336
  %34 = icmp ult i32 %.off, 9342557
  br i1 %34, label %35, label %37

; <label>:35                                      ; preds = %33
  %36 = tail call <2 x float> @__ldexp_cexpf(<2 x float> %z.coerce, i32 0) nounwind optsize
  br label %45

; <label>:37                                      ; preds = %33
  %38 = tail call float @expf(float %1) nounwind optsize
  %39 = tail call float @cosf(float %2) nounwind optsize
  %40 = fmul float %38, %39
  %41 = tail call float @sinf(float %2) nounwind optsize
  %42 = fmul float %38, %41
  %43 = insertelement <2 x float> undef, float %40, i32 0
  %44 = insertelement <2 x float> %43, float %42, i32 1
  br label %45

; <label>:45                                      ; preds = %37, %35, %29, %27, %23, %14, %6
  %.0 = phi <2 x float> [ %9, %6 ], [ %18, %14 ], [ %26, %23 ], [ %32, %29 ], [ %36, %35 ], [ %44, %37 ], [ zeroinitializer, %27 ]
  ret <2 x float> %.0
}

define { x86_fp80, x86_fp80 } @cexpl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fptrunc x86_fp80 %2 to double
  %6 = fptrunc x86_fp80 %4 to double
  %7 = tail call { double, double } @cexp(double %5, double %6) nounwind optsize
  %8 = extractvalue { double, double } %7, 0
  %9 = extractvalue { double, double } %7, 1
  %10 = fpext double %8 to x86_fp80
  %11 = fpext double %9 to x86_fp80
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %10, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %11, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @__ldexp_cexp(double %z.coerce0, double %z.coerce1, i32 %expt) nounwind uwtable optsize {
  %1 = fadd double %z.coerce0, 0xC0937BE319BA0DA4
  %2 = tail call double @exp(double %1) nounwind optsize
  %3 = bitcast double %2 to i64
  %4 = lshr i64 %3, 52
  %5 = trunc i64 %4 to i32
  %6 = and i64 %3, 4503599627370495
  %7 = or i64 %6, 9214364837600034816
  %8 = bitcast i64 %7 to double
  %9 = add i32 %expt, -247
  %10 = add i32 %9, %5
  %11 = sdiv i32 %10, 2
  %12 = shl i32 %11, 20
  %13 = add i32 %12, 1072693248
  %14 = zext i32 %13 to i64
  %15 = shl nuw i64 %14, 32
  %16 = bitcast i64 %15 to double
  %17 = sub nsw i32 %10, %11
  %18 = shl i32 %17, 20
  %19 = add i32 %18, 1072693248
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %20, 32
  %22 = bitcast i64 %21 to double
  %23 = tail call double @cos(double %z.coerce1) nounwind optsize
  %24 = fmul double %23, %8
  %25 = fmul double %24, %16
  %26 = fmul double %25, %22
  %27 = tail call double @sin(double %z.coerce1) nounwind optsize
  %28 = fmul double %27, %8
  %29 = fmul double %28, %16
  %30 = fmul double %29, %22
  %insert = insertvalue { double, double } undef, double %26, 0
  %insert5 = insertvalue { double, double } %insert, double %30, 1
  ret { double, double } %insert5
}

define { double, double } @cexp(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = bitcast double %z.coerce1 to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = or i32 %5, %4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %0
  %9 = tail call double @exp(double %z.coerce0) nounwind optsize
  br label %44

; <label>:10                                      ; preds = %0
  %11 = bitcast double %z.coerce0 to i64
  %12 = lshr i64 %11, 32
  %13 = trunc i64 %12 to i32
  %14 = trunc i64 %11 to i32
  %15 = and i32 %13, 2147483647
  %16 = or i32 %15, %14
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

; <label>:18                                      ; preds = %10
  %19 = tail call double @cos(double %z.coerce1) nounwind optsize
  %20 = tail call double @sin(double %z.coerce1) nounwind optsize
  br label %44

; <label>:21                                      ; preds = %10
  %22 = icmp ugt i32 %5, 2146435071
  br i1 %22, label %23, label %32

; <label>:23                                      ; preds = %21
  %24 = icmp eq i32 %14, 0
  %25 = icmp eq i32 %15, 2146435072
  %or.cond = and i1 %24, %25
  br i1 %or.cond, label %28, label %26

; <label>:26                                      ; preds = %23
  %27 = fsub double %z.coerce1, %z.coerce1
  br label %44

; <label>:28                                      ; preds = %23
  %29 = icmp slt i32 %13, 0
  br i1 %29, label %44, label %30

; <label>:30                                      ; preds = %28
  %31 = fsub double %z.coerce1, %z.coerce1
  br label %44

; <label>:32                                      ; preds = %21
  %.off = add i32 %13, -1082535490
  %33 = icmp ult i32 %.off, 1084067
  br i1 %33, label %34, label %38

; <label>:34                                      ; preds = %32
  %35 = tail call { double, double } @__ldexp_cexp(double %z.coerce0, double %z.coerce1, i32 0) nounwind optsize
  %36 = extractvalue { double, double } %35, 0
  %37 = extractvalue { double, double } %35, 1
  br label %44

; <label>:38                                      ; preds = %32
  %39 = tail call double @exp(double %z.coerce0) nounwind optsize
  %40 = tail call double @cos(double %z.coerce1) nounwind optsize
  %41 = fmul double %39, %40
  %42 = tail call double @sin(double %z.coerce1) nounwind optsize
  %43 = fmul double %39, %42
  br label %44

; <label>:44                                      ; preds = %38, %34, %30, %28, %26, %18, %8
  %.012.0 = phi double [ %9, %8 ], [ %19, %18 ], [ %27, %26 ], [ %z.coerce0, %30 ], [ %36, %34 ], [ %41, %38 ], [ 0.000000e+00, %28 ]
  %.113.0 = phi double [ %z.coerce1, %8 ], [ %20, %18 ], [ %27, %26 ], [ %31, %30 ], [ %37, %34 ], [ %43, %38 ], [ 0.000000e+00, %28 ]
  %insert = insertvalue { double, double } undef, double %.012.0, 0
  %insert15 = insertvalue { double, double } %insert, double %.113.0, 1
  ret { double, double } %insert15
}

define i32 @cfgetospeed(%struct.termios* nocapture %tio) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.termios* %tio, i64 0, i32 2
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = and i32 %2, 4111
  ret i32 %3
}

define i32 @cfgetispeed(%struct.termios* nocapture %tio) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.termios* %tio, i64 0, i32 2
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = and i32 %2, 4111
  ret i32 %3
}

define void @cfmakeraw(%struct.termios.25* nocapture %t) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.termios.25* %t, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = and i32 %2, -1516
  store i32 %3, i32* %1, align 4, !tbaa !6
  %4 = getelementptr inbounds %struct.termios.25* %t, i64 0, i32 1
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = and i32 %5, -2
  store i32 %6, i32* %4, align 4, !tbaa !6
  %7 = getelementptr inbounds %struct.termios.25* %t, i64 0, i32 3
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = and i32 %8, -32844
  store i32 %9, i32* %7, align 4, !tbaa !6
  %10 = getelementptr inbounds %struct.termios.25* %t, i64 0, i32 2
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = and i32 %11, -305
  %13 = or i32 %12, 48
  store i32 %13, i32* %10, align 4, !tbaa !6
  %14 = getelementptr inbounds %struct.termios.25* %t, i64 0, i32 5, i64 6
  store i8 1, i8* %14, align 1, !tbaa !0
  %15 = getelementptr inbounds %struct.termios.25* %t, i64 0, i32 5, i64 5
  store i8 0, i8* %15, align 1, !tbaa !0
  ret void
}

define i32 @cfsetospeed(%struct.termios.26* nocapture %tio, i32 %speed) nounwind uwtable optsize {
  %1 = and i32 %speed, -4112
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %4, align 4, !tbaa !6
  br label %10

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.termios.26* %tio, i64 0, i32 2
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = and i32 %7, -4112
  %9 = or i32 %8, %speed
  store i32 %9, i32* %6, align 4, !tbaa !6
  br label %10

; <label>:10                                      ; preds = %5, %3
  %.0 = phi i32 [ -1, %3 ], [ 0, %5 ]
  ret i32 %.0
}

define i32 @cfsetispeed(%struct.termios.26* nocapture %tio, i32 %speed) nounwind uwtable optsize {
  %1 = icmp eq i32 %speed, 0
  br i1 %1, label %cfsetospeed.exit, label %2

; <label>:2                                       ; preds = %0
  %3 = and i32 %speed, -4112
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %cfsetospeed.exit

; <label>:7                                       ; preds = %2
  %8 = getelementptr inbounds %struct.termios.26* %tio, i64 0, i32 2
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = and i32 %9, -4112
  %11 = or i32 %10, %speed
  store i32 %11, i32* %8, align 4, !tbaa !6
  br label %cfsetospeed.exit

cfsetospeed.exit:                                 ; preds = %7, %5, %0
  %12 = phi i32 [ 0, %0 ], [ -1, %5 ], [ 0, %7 ]
  ret i32 %12
}

define i32 @chdir(i8* %path) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 12, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @chmod(i8* %path, i32 %mode) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = zext i32 %mode to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 15, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @chown(i8* %path, i32 %uid, i32 %gid) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = zext i32 %uid to i64
  %3 = zext i32 %gid to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 212, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @chroot(i8* %path) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 61, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define float @cimagf(<2 x float> %z.coerce) nounwind uwtable readnone optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  ret float %1
}

define x86_fp80 @cimagl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %2 = load x86_fp80* %1, align 16
  ret x86_fp80 %2
}

define double @cimag(double %z.coerce0, double %z.coerce1) nounwind uwtable readnone optsize {
  ret double %z.coerce1
}

define i32 @clearenv() nounwind uwtable optsize {
  %1 = load i8*** @__environ, align 8, !tbaa !7
  store i8* null, i8** %1, align 8, !tbaa !7
  ret i32 0
}

define void @clearerr(%struct.__FILE_s.27* nocapture %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.27* %f, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = and i32 %2, -49
  store i32 %3, i32* %1, align 4, !tbaa !6
  ret void
}

define i32 @clock_getcpuclockid(i32 %pid, i32* nocapture %clk) nounwind uwtable optsize {
  %1 = icmp eq i32 %pid, 0
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i32 @getpid() nounwind optsize
  %4 = icmp eq i32 %3, %pid
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %2, %0
  store i32 2, i32* %clk, align 4, !tbaa !6
  br label %6

; <label>:6                                       ; preds = %5, %2
  %.0 = phi i32 [ 0, %5 ], [ 1, %2 ]
  ret i32 %.0
}

define i32 @clock_getres(i32 %clk, %struct.timespec.28* %ts) nounwind uwtable optsize {
  %1 = sext i32 %clk to i64
  %2 = ptrtoint %struct.timespec.28* %ts to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 264, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define internal i32 @sc_clock_gettime(i32 %clk, %struct.timespec.29* %ts) nounwind uwtable {
  %1 = sext i32 %clk to i64
  %2 = ptrtoint %struct.timespec.29* %ts to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 263, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = trunc i64 %3 to i32
  switch i32 %4, label %12 [
    i32 0, label %15
    i32 -38, label %5
  ]

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %clk, 0
  br i1 %6, label %7, label %12

; <label>:7                                       ; preds = %5
  %8 = tail call i64 (i64, ...)* @__syscall(i64 78, i64 %1, i64 %2, i64 0, i32 0, i32 0, i32 0) nounwind optsize
  %9 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %10 = load i64* %9, align 8, !tbaa !5
  %sext = mul i64 %10, 4294967296000
  %11 = ashr exact i64 %sext, 32
  store i64 %11, i64* %9, align 8, !tbaa !5
  br label %15

; <label>:12                                      ; preds = %5, %0
  %r.0 = phi i32 [ %4, %0 ], [ -22, %5 ]
  %13 = sub nsw i32 0, %r.0
  %14 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 %13, i32* %14, align 4, !tbaa !6
  br label %15

; <label>:15                                      ; preds = %12, %7, %0
  %.0 = phi i32 [ 0, %7 ], [ -1, %12 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @__clock_gettime(i32 %clk, %struct.timespec.29* %ts) nounwind uwtable optsize {
  %1 = load i32 (i32, %struct.timespec.29*)** @__cgt, align 8, !tbaa !7
  %2 = icmp eq i32 (i32, %struct.timespec.29*)* %1, null
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 %1(i32 %clk, %struct.timespec.29* %ts) nounwind optsize
  br label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i32 @sc_clock_gettime(i32 %clk, %struct.timespec.29* %ts) optsize
  br label %7

; <label>:7                                       ; preds = %5, %3
  %8 = phi i32 [ %4, %3 ], [ %6, %5 ]
  ret i32 %8
}

define i32 @clock_nanosleep(i32 %clk, i32 %flags, %struct.timespec.30* %req, %struct.timespec.30* %rem) nounwind uwtable optsize {
  %1 = sext i32 %clk to i64
  %2 = sext i32 %flags to i64
  %3 = ptrtoint %struct.timespec.30* %req to i64
  %4 = ptrtoint %struct.timespec.30* %rem to i64
  %5 = tail call i64 @__syscall_cp(i64 265, i64 %1, i64 %2, i64 %3, i64 %4, i64 0, i64 0) nounwind optsize
  %6 = sub nsw i64 0, %5
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i64 @clock() nounwind uwtable optsize {
  %ts = alloca %struct.timespec.29, align 8
  %tms = alloca %struct.tms, align 8
  %1 = call i32 @__clock_gettime(i32 2, %struct.timespec.29* %ts) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %11

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 0
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = mul nsw i64 %5, 1000000
  %7 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %8 = load i64* %7, align 8, !tbaa !5
  %9 = sdiv i64 %8, 1000
  %10 = add nsw i64 %9, %6
  br label %20

; <label>:11                                      ; preds = %0
  %12 = ptrtoint %struct.tms* %tms to i64
  %13 = call i64 (i64, ...)* @__syscall(i64 43, i64 %12, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %14 = getelementptr inbounds %struct.tms* %tms, i64 0, i32 0
  %15 = load i64* %14, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.tms* %tms, i64 0, i32 1
  %17 = load i64* %16, align 8, !tbaa !5
  %18 = add nsw i64 %17, %15
  %19 = mul nsw i64 %18, 100
  br label %20

; <label>:20                                      ; preds = %11, %3
  %.0 = phi i64 [ %19, %11 ], [ %10, %3 ]
  ret i64 %.0
}

define i32 @clock_settime(i32 %clk, %struct.timespec.32* %ts) nounwind uwtable optsize {
  %1 = sext i32 %clk to i64
  %2 = ptrtoint %struct.timespec.32* %ts to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 262, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define <2 x float> @clogf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = tail call float @cabsf(<2 x float> %z.coerce) nounwind optsize
  %2 = tail call float @cargf(<2 x float> %z.coerce) nounwind optsize
  %3 = tail call float @logf(float %1) nounwind optsize
  %4 = insertelement <2 x float> undef, float %3, i32 0
  %5 = insertelement <2 x float> %4, float %2, i32 1
  ret <2 x float> %5
}

define { x86_fp80, x86_fp80 } @clogl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = alloca { x86_fp80, x86_fp80 }, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %4 = load x86_fp80* %3, align 16
  %5 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %6 = load x86_fp80* %5, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %8 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %4, x86_fp80* %7, align 16
  store x86_fp80 %6, x86_fp80* %8, align 16
  %9 = call x86_fp80 @cabsl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %10 = getelementptr inbounds { x86_fp80, x86_fp80 }* %2, i64 0, i32 0
  %11 = getelementptr inbounds { x86_fp80, x86_fp80 }* %2, i64 0, i32 1
  store x86_fp80 %4, x86_fp80* %10, align 16
  store x86_fp80 %6, x86_fp80* %11, align 16
  %12 = call x86_fp80 @cargl({ x86_fp80, x86_fp80 }* byval align 16 %2) nounwind optsize
  %13 = call x86_fp80 @logl(x86_fp80 %9) nounwind optsize
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %13, 0
  %insert2 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %12, 1
  ret { x86_fp80, x86_fp80 } %insert2
}

define { double, double } @clog(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = tail call double @cabs(double %z.coerce0, double %z.coerce1) nounwind optsize
  %2 = tail call double @carg(double %z.coerce0, double %z.coerce1) nounwind optsize
  %3 = tail call double @log(double %1) nounwind optsize
  %insert = insertvalue { double, double } undef, double %3, 0
  %insert6 = insertvalue { double, double } %insert, double %2, 1
  ret { double, double } %insert6
}

define i32 @__clone(i32 (i8*)* nocapture %func, i8* nocapture %stack, i32 %flags, i8* nocapture %arg, ...) nounwind uwtable optsize {
  %1 = call i32* @__errno_location() nounwind readnone optsize
  store i32 38, i32* %1, align 4, !tbaa !6
  ret i32 -1
}

define i32 @closedir(%struct.__DIR_s* %dir) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = tail call i32 @close(i32 %2) nounwind optsize
  %4 = bitcast %struct.__DIR_s* %dir to i8*
  tail call void @free(i8* %4) optsize
  ret i32 %3
}

define i32 @close(i32 %fd) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = tail call i64 @__syscall_cp(i64 6, i64 %1, i64 0, i64 0, i64 0, i64 0, i64 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i64 @confstr(i32 %name, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = icmp eq i32 %name, 0
  br i1 %1, label %9, label %2

; <label>:2                                       ; preds = %0
  %3 = and i32 %name, -5
  %4 = icmp ne i32 %3, 1
  %5 = add nsw i32 %name, -1116
  %6 = icmp ugt i32 %5, 31
  %or.cond = and i1 %4, %6
  br i1 %or.cond, label %7, label %9

; <label>:7                                       ; preds = %2
  %8 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %8, align 4, !tbaa !6
  br label %12

; <label>:9                                       ; preds = %2, %0
  %s.0 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str56, i64 0, i64 0), %2 ], [ getelementptr inbounds ([14 x i8]* @.str1, i64 0, i64 0), %0 ]
  %10 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %buf, i64 %len, i8* getelementptr inbounds ([3 x i8]* @.str257, i64 0, i64 0), i8* %s.0) nounwind optsize
  %11 = sext i32 %10 to i64
  br label %12

; <label>:12                                      ; preds = %9, %7
  %.0 = phi i64 [ 0, %7 ], [ %11, %9 ]
  ret i64 %.0
}

define <2 x float> @conjf(<2 x float> %z.coerce) nounwind uwtable readnone optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = fsub float -0.000000e+00, %2
  %4 = insertelement <2 x float> undef, float %1, i32 0
  %5 = insertelement <2 x float> %4, float %3, i32 1
  ret <2 x float> %5
}

define { x86_fp80, x86_fp80 } @conjl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fsub x86_fp80 0xK80000000000000000000, %4
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %2, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %5, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @conj(double %z.coerce0, double %z.coerce1) nounwind uwtable readnone optsize {
  %1 = fsub double -0.000000e+00, %z.coerce1
  %insert = insertvalue { double, double } undef, double %z.coerce0, 0
  %insert4 = insertvalue { double, double } %insert, double %1, 1
  ret { double, double } %insert4
}

define i32 @connect(i32 %fd, %struct.sockaddr.33* %addr, i32 %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.sockaddr.33* %addr to i64
  %3 = zext i32 %len to i64
  %4 = tail call i64 @__syscall_cp(i64 283, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define float @copysignf(float %x, float %y) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = bitcast float %y to i32
  %4 = and i32 %3, -2147483648
  %5 = or i32 %4, %2
  %6 = bitcast i32 %5 to float
  ret float %6
}

define x86_fp80 @copysignl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = bitcast x86_fp80 %y to i80
  %3 = lshr i80 %2, 64
  %.tr = trunc i80 %3 to i16
  %4 = and i16 %.tr, -32768
  %5 = lshr i80 %1, 64
  %6 = trunc i80 %5 to i16
  %7 = and i16 %6, 32767
  %8 = or i16 %4, %7
  %9 = zext i16 %8 to i80
  %10 = shl nuw i80 %9, 64
  %mask2 = and i80 %1, 18446744073709551615
  %ins3 = or i80 %10, %mask2
  %11 = bitcast i80 %ins3 to x86_fp80
  ret x86_fp80 %11
}

define double @copysign(double %x, double %y) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = bitcast double %y to i64
  %4 = and i64 %3, -9223372036854775808
  %5 = or i64 %4, %2
  %6 = bitcast i64 %5 to double
  ret double %6
}

define float @__cosdf(double %x) nounwind uwtable readnone optsize {
  %1 = fmul double %x, %x
  %2 = fmul double %1, %1
  %3 = fmul double %1, 0x3EF99342E0EE5069
  %4 = fadd double %3, 0xBF56C087E80F1E27
  %5 = fmul double %1, 0xBFDFFFFFFD0C5E81
  %6 = fadd double %5, 1.000000e+00
  %7 = fmul double %2, 0x3FA55553E1053A42
  %8 = fadd double %6, %7
  %9 = fmul double %2, %1
  %10 = fmul double %9, %4
  %11 = fadd double %8, %10
  %12 = fptrunc double %11 to float
  ret float %12
}

define float @cosf(float %x) nounwind uwtable optsize {
  %y = alloca double, align 8
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ult i32 %2, 1061752795
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = icmp ult i32 %2, 964689920
  %6 = fptosi float %x to i32
  %7 = icmp eq i32 %6, 0
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %75, label %8

; <label>:8                                       ; preds = %4
  %9 = fpext float %x to double
  %10 = call float @__cosdf(double %9) nounwind optsize
  br label %75

; <label>:11                                      ; preds = %0
  %12 = icmp ult i32 %2, 1081824210
  br i1 %12, label %13, label %33

; <label>:13                                      ; preds = %11
  %14 = icmp ugt i32 %2, 1075235811
  %15 = icmp sgt i32 %1, 0
  %16 = fpext float %x to double
  br i1 %14, label %17, label %26

; <label>:17                                      ; preds = %13
  br i1 %15, label %18, label %20

; <label>:18                                      ; preds = %17
  %19 = fadd double %16, 0xC00921FB54442D18
  br label %22

; <label>:20                                      ; preds = %17
  %21 = fadd double %16, 0x400921FB54442D18
  br label %22

; <label>:22                                      ; preds = %20, %18
  %23 = phi double [ %19, %18 ], [ %21, %20 ]
  %24 = call float @__cosdf(double %23) nounwind optsize
  %25 = fsub float -0.000000e+00, %24
  br label %75

; <label>:26                                      ; preds = %13
  br i1 %15, label %27, label %30

; <label>:27                                      ; preds = %26
  %28 = fsub double 0x3FF921FB54442D18, %16
  %29 = call float @__sindf(double %28) nounwind optsize
  br label %75

; <label>:30                                      ; preds = %26
  %31 = fadd double %16, 0x3FF921FB54442D18
  %32 = call float @__sindf(double %31) nounwind optsize
  br label %75

; <label>:33                                      ; preds = %11
  %34 = icmp ult i32 %2, 1088565718
  br i1 %34, label %35, label %54

; <label>:35                                      ; preds = %33
  %36 = icmp ugt i32 %2, 1085271519
  %37 = icmp sgt i32 %1, 0
  %38 = fpext float %x to double
  br i1 %36, label %39, label %47

; <label>:39                                      ; preds = %35
  br i1 %37, label %40, label %42

; <label>:40                                      ; preds = %39
  %41 = fadd double %38, 0xC01921FB54442D18
  br label %44

; <label>:42                                      ; preds = %39
  %43 = fadd double %38, 0x401921FB54442D18
  br label %44

; <label>:44                                      ; preds = %42, %40
  %45 = phi double [ %41, %40 ], [ %43, %42 ]
  %46 = call float @__cosdf(double %45) nounwind optsize
  br label %75

; <label>:47                                      ; preds = %35
  br i1 %37, label %48, label %51

; <label>:48                                      ; preds = %47
  %49 = fadd double %38, 0xC012D97C7F3321D2
  %50 = call float @__sindf(double %49) nounwind optsize
  br label %75

; <label>:51                                      ; preds = %47
  %52 = fsub double 0xC012D97C7F3321D2, %38
  %53 = call float @__sindf(double %52) nounwind optsize
  br label %75

; <label>:54                                      ; preds = %33
  %55 = icmp ugt i32 %2, 2139095039
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %54
  %57 = fsub float %x, %x
  br label %75

; <label>:58                                      ; preds = %54
  %59 = call i32 @__rem_pio2f(float %x, double* %y) nounwind optsize
  %60 = and i32 %59, 3
  switch i32 %60, label %72 [
    i32 0, label %61
    i32 1, label %64
    i32 2, label %68
  ]

; <label>:61                                      ; preds = %58
  %62 = load double* %y, align 8, !tbaa !3
  %63 = call float @__cosdf(double %62) nounwind optsize
  br label %75

; <label>:64                                      ; preds = %58
  %65 = load double* %y, align 8, !tbaa !3
  %66 = fsub double -0.000000e+00, %65
  %67 = call float @__sindf(double %66) nounwind optsize
  br label %75

; <label>:68                                      ; preds = %58
  %69 = load double* %y, align 8, !tbaa !3
  %70 = call float @__cosdf(double %69) nounwind optsize
  %71 = fsub float -0.000000e+00, %70
  br label %75

; <label>:72                                      ; preds = %58
  %73 = load double* %y, align 8, !tbaa !3
  %74 = call float @__sindf(double %73) nounwind optsize
  br label %75

; <label>:75                                      ; preds = %72, %68, %64, %61, %56, %51, %48, %44, %30, %27, %22, %8, %4
  %.0 = phi float [ %10, %8 ], [ %25, %22 ], [ %29, %27 ], [ %32, %30 ], [ %46, %44 ], [ %50, %48 ], [ %53, %51 ], [ %57, %56 ], [ %74, %72 ], [ %71, %68 ], [ %67, %64 ], [ %63, %61 ], [ 1.000000e+00, %4 ]
  ret float %.0
}

define float @coshf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fmul float %x, %x
  br label %37

; <label>:6                                       ; preds = %0
  %7 = icmp ult i32 %2, 1051816472
  br i1 %7, label %8, label %18

; <label>:8                                       ; preds = %6
  %9 = tail call float @fabsf(float %x) nounwind optsize
  %10 = tail call float @expm1f(float %9) nounwind optsize
  %11 = fadd float %10, 1.000000e+00
  %12 = icmp ult i32 %2, 964689920
  br i1 %12, label %37, label %13

; <label>:13                                      ; preds = %8
  %14 = fmul float %10, %10
  %15 = fadd float %11, %11
  %16 = fdiv float %14, %15
  %17 = fadd float %16, 1.000000e+00
  br label %37

; <label>:18                                      ; preds = %6
  %19 = icmp ult i32 %2, 1091567616
  br i1 %19, label %20, label %26

; <label>:20                                      ; preds = %18
  %21 = tail call float @fabsf(float %x) nounwind optsize
  %22 = tail call float @expf(float %21) nounwind optsize
  %23 = fmul float %22, 5.000000e-01
  %24 = fdiv float 5.000000e-01, %22
  %25 = fadd float %23, %24
  br label %37

; <label>:26                                      ; preds = %18
  %27 = icmp ult i32 %2, 1118925335
  br i1 %27, label %28, label %32

; <label>:28                                      ; preds = %26
  %29 = tail call float @fabsf(float %x) nounwind optsize
  %30 = tail call float @expf(float %29) nounwind optsize
  %31 = fmul float %30, 5.000000e-01
  br label %37

; <label>:32                                      ; preds = %26
  %33 = icmp ult i32 %2, 1119016189
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %32
  %35 = tail call float @fabsf(float %x) nounwind optsize
  %36 = tail call float @__expo2f(float %35) nounwind optsize
  br label %37

; <label>:37                                      ; preds = %34, %32, %28, %20, %13, %8, %4
  %.0 = phi float [ %5, %4 ], [ %17, %13 ], [ %25, %20 ], [ %31, %28 ], [ %36, %34 ], [ 1.000000e+00, %8 ], [ 0x7FF0000000000000, %32 ]
  ret float %.0
}

define x86_fp80 @coshl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = lshr i80 %1, 32
  %5 = trunc i80 %4 to i32
  %6 = trunc i80 %1 to i32
  %7 = and i32 %3, 32767
  %8 = icmp eq i32 %7, 32767
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = fmul x86_fp80 %x, %x
  br label %58

; <label>:11                                      ; preds = %0
  %12 = icmp ult i32 %7, 16381
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %11
  %14 = icmp eq i32 %7, 16381
  %15 = icmp ult i32 %5, -1317922825
  %or.cond = and i1 %14, %15
  br i1 %or.cond, label %16, label %26

; <label>:16                                      ; preds = %13, %11
  %17 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %18 = tail call x86_fp80 @expm1l(x86_fp80 %17) nounwind optsize
  %19 = fadd x86_fp80 %18, 0xK3FFF8000000000000000
  %20 = icmp ult i32 %7, 16316
  br i1 %20, label %58, label %21

; <label>:21                                      ; preds = %16
  %22 = fmul x86_fp80 %18, %18
  %23 = fadd x86_fp80 %19, %19
  %24 = fdiv x86_fp80 %22, %23
  %25 = fadd x86_fp80 %24, 0xK3FFF8000000000000000
  br label %58

; <label>:26                                      ; preds = %13
  %27 = icmp ult i32 %7, 16387
  br i1 %27, label %31, label %28

; <label>:28                                      ; preds = %26
  %29 = icmp eq i32 %7, 16387
  %30 = icmp ult i32 %5, -1342177280
  %or.cond1 = and i1 %29, %30
  br i1 %or.cond1, label %31, label %37

; <label>:31                                      ; preds = %28, %26
  %32 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %33 = tail call x86_fp80 @expl(x86_fp80 %32) nounwind optsize
  %34 = fmul x86_fp80 %33, 0xK3FFE8000000000000000
  %35 = fdiv x86_fp80 0xK3FFE8000000000000000, %33
  %36 = fadd x86_fp80 %34, %35
  br label %58

; <label>:37                                      ; preds = %28
  %38 = icmp ult i32 %7, 16396
  br i1 %38, label %42, label %39

; <label>:39                                      ; preds = %37
  %40 = icmp eq i32 %7, 16396
  %41 = icmp ult i32 %5, -1318060032
  %or.cond2 = and i1 %40, %41
  br i1 %or.cond2, label %42, label %46

; <label>:42                                      ; preds = %39, %37
  %43 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %44 = tail call x86_fp80 @expl(x86_fp80 %43) nounwind optsize
  %45 = fmul x86_fp80 %44, 0xK3FFE8000000000000000
  br label %58

; <label>:46                                      ; preds = %39
  br i1 %40, label %47, label %58

; <label>:47                                      ; preds = %46
  %48 = icmp ult i32 %5, -1317741120
  br i1 %48, label %52, label %49

; <label>:49                                      ; preds = %47
  %50 = icmp eq i32 %5, -1317741120
  %51 = icmp ult i32 %6, 833536235
  %or.cond3 = and i1 %50, %51
  br i1 %or.cond3, label %52, label %58

; <label>:52                                      ; preds = %49, %47
  %53 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %54 = fmul x86_fp80 %53, 0xK3FFE8000000000000000
  %55 = tail call x86_fp80 @expl(x86_fp80 %54) nounwind optsize
  %56 = fmul x86_fp80 %55, 0xK3FFE8000000000000000
  %57 = fmul x86_fp80 %56, %55
  br label %58

; <label>:58                                      ; preds = %52, %49, %46, %42, %31, %21, %16, %9
  %.0 = phi x86_fp80 [ %10, %9 ], [ %25, %21 ], [ %36, %31 ], [ %45, %42 ], [ %57, %52 ], [ %19, %16 ], [ 0xK7FFF8000000000000000, %49 ], [ 0xK7FFF8000000000000000, %46 ]
  ret x86_fp80 %.0
}

define double @cosh(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = fmul double %x, %x
  br label %39

; <label>:8                                       ; preds = %0
  %9 = icmp ult i32 %4, 1071001155
  br i1 %9, label %10, label %20

; <label>:10                                      ; preds = %8
  %11 = tail call double @fabs(double %x) nounwind optsize
  %12 = tail call double @expm1(double %11) nounwind optsize
  %13 = fadd double %12, 1.000000e+00
  %14 = icmp ult i32 %4, 1015021568
  br i1 %14, label %39, label %15

; <label>:15                                      ; preds = %10
  %16 = fmul double %12, %12
  %17 = fadd double %13, %13
  %18 = fdiv double %16, %17
  %19 = fadd double %18, 1.000000e+00
  br label %39

; <label>:20                                      ; preds = %8
  %21 = icmp ult i32 %4, 1077280768
  br i1 %21, label %22, label %28

; <label>:22                                      ; preds = %20
  %23 = tail call double @fabs(double %x) nounwind optsize
  %24 = tail call double @exp(double %23) nounwind optsize
  %25 = fmul double %24, 5.000000e-01
  %26 = fdiv double 5.000000e-01, %24
  %27 = fadd double %25, %26
  br label %39

; <label>:28                                      ; preds = %20
  %29 = icmp ult i32 %4, 1082535490
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %28
  %31 = tail call double @fabs(double %x) nounwind optsize
  %32 = tail call double @exp(double %31) nounwind optsize
  %33 = fmul double %32, 5.000000e-01
  br label %39

; <label>:34                                      ; preds = %28
  %35 = icmp ult i32 %4, 1082536911
  br i1 %35, label %36, label %39

; <label>:36                                      ; preds = %34
  %37 = tail call double @fabs(double %x) nounwind optsize
  %38 = tail call double @__expo2(double %37) nounwind optsize
  br label %39

; <label>:39                                      ; preds = %36, %34, %30, %22, %15, %10, %6
  %.0 = phi double [ %7, %6 ], [ %19, %15 ], [ %27, %22 ], [ %33, %30 ], [ %38, %36 ], [ %13, %10 ], [ 0x7FF0000000000000, %34 ]
  ret double %.0
}

define x86_fp80 @__cosl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %1 = fmul x86_fp80 %x, %x
  %2 = load volatile double* @C1hi, align 8, !tbaa !3
  %3 = fpext double %2 to x86_fp80
  %4 = load volatile double* @C1lo, align 8, !tbaa !3
  %5 = fpext double %4 to x86_fp80
  %6 = fadd x86_fp80 %3, %5
  %7 = fmul x86_fp80 %1, 0xK3FD2D564ECD7AE21F000
  %8 = fadd x86_fp80 %7, 0xKBFDAC9C9A095E8A94800
  %9 = fmul x86_fp80 %1, %8
  %10 = fadd x86_fp80 %9, 0xK3FE28F76C65576678800
  %11 = fmul x86_fp80 %1, %10
  %12 = fadd x86_fp80 %11, 0xKBFE993F27DBB01791000
  %13 = fmul x86_fp80 %1, %12
  %14 = fadd x86_fp80 %13, 0xK3FEFD00D00D00C711000
  %15 = fmul x86_fp80 %1, %14
  %16 = fadd x86_fp80 %15, 0xKBFF5B60B60B60B608000
  %17 = fmul x86_fp80 %1, %16
  %18 = fadd x86_fp80 %6, %17
  %19 = fmul x86_fp80 %1, %18
  %20 = fmul x86_fp80 %1, 0xK3FFE8000000000000000
  %21 = fsub x86_fp80 0xK3FFF8000000000000000, %20
  %22 = fsub x86_fp80 0xK3FFF8000000000000000, %21
  %23 = fsub x86_fp80 %22, %20
  %24 = fmul x86_fp80 %1, %19
  %25 = fmul x86_fp80 %x, %y
  %26 = fsub x86_fp80 %24, %25
  %27 = fadd x86_fp80 %23, %26
  %28 = fadd x86_fp80 %21, %27
  ret x86_fp80 %28
}

define x86_fp80 @cosl(x86_fp80 %x) nounwind uwtable optsize {
  %tx.i = alloca [3 x double], align 16
  %ty.i = alloca [2 x double], align 16
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  switch i32 %4, label %8 [
    i32 0, label %135
    i32 32767, label %5
  ]

; <label>:5                                       ; preds = %0
  %6 = fsub x86_fp80 %x, %x
  %7 = fdiv x86_fp80 %6, %6
  br label %135

; <label>:8                                       ; preds = %0
  %ins = and i80 %1, 604462909807314587353087
  %9 = bitcast i80 %ins to x86_fp80
  %10 = fcmp olt x86_fp80 %9, 0xK3FFEC90FDAA22168C000
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %8
  %12 = call x86_fp80 @__cosl(x86_fp80 %9, x86_fp80 0xK00000000000000000000) nounwind optsize
  br label %135

; <label>:13                                      ; preds = %8
  %14 = bitcast [3 x double]* %tx.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %14) nounwind
  %15 = bitcast [2 x double]* %ty.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %15) nounwind
  %16 = lshr i80 %1, 48
  %.tr.i = trunc i80 %16 to i32
  %sext.i = ashr i32 %.tr.i, 16
  %17 = and i32 %sext.i, 32767
  %18 = icmp ult i32 %17, 16408
  br i1 %18, label %24, label %19

; <label>:19                                      ; preds = %13
  switch i32 %17, label %86 [
    i32 16408, label %20
    i32 32767, label %__rem_pio2l.exit.thread
  ]

; <label>:20                                      ; preds = %19
  %21 = lshr i80 %1, 32
  %22 = trunc i80 %21 to i32
  %23 = icmp ult i32 %22, -921707870
  br i1 %23, label %24, label %86

; <label>:24                                      ; preds = %20, %13
  %25 = load volatile double* @invpio2hi, align 8, !tbaa !3
  %26 = fpext double %25 to x86_fp80
  %27 = load volatile double* @invpio2lo, align 8, !tbaa !3
  %28 = fpext double %27 to x86_fp80
  %29 = fadd x86_fp80 %26, %28
  %30 = fmul x86_fp80 %29, %x
  %31 = fadd x86_fp80 %30, 0xK403EC000000000000000
  %32 = fadd x86_fp80 %31, 0xKC03EC000000000000000
  %33 = fptosi x86_fp80 %32 to i32
  %34 = fmul x86_fp80 %32, 0xK3FFFC90FDAA222000000
  %35 = fsub x86_fp80 %x, %34
  %36 = load volatile double* @pio2_1thi, align 8, !tbaa !3
  %37 = fpext double %36 to x86_fp80
  %38 = load volatile double* @pio2_1tlo, align 8, !tbaa !3
  %39 = fpext double %38 to x86_fp80
  %40 = fadd x86_fp80 %37, %39
  %41 = fmul x86_fp80 %32, %40
  %42 = fsub x86_fp80 %35, %41
  %43 = bitcast x86_fp80 %42 to i80
  %44 = lshr i80 %43, 64
  %45 = trunc i80 %44 to i32
  %46 = and i32 %45, 32767
  %47 = sub nsw i32 %17, %46
  %48 = icmp sgt i32 %47, 22
  br i1 %48, label %49, label %81

; <label>:49                                      ; preds = %24
  %50 = fmul x86_fp80 %32, 0xKBFD7973DCB3B3A000000
  %51 = fsub x86_fp80 %35, %50
  %52 = load volatile double* @pio2_2thi, align 8, !tbaa !3
  %53 = fpext double %52 to x86_fp80
  %54 = load volatile double* @pio2_2tlo, align 8, !tbaa !3
  %55 = fpext double %54 to x86_fp80
  %56 = fadd x86_fp80 %53, %55
  %57 = fmul x86_fp80 %32, %56
  %58 = fsub x86_fp80 %35, %51
  %59 = fsub x86_fp80 %58, %50
  %60 = fsub x86_fp80 %57, %59
  %61 = fsub x86_fp80 %51, %60
  %62 = bitcast x86_fp80 %61 to i80
  %63 = lshr i80 %62, 64
  %64 = trunc i80 %63 to i32
  %65 = and i32 %64, 32767
  %66 = sub nsw i32 %17, %65
  %67 = icmp sgt i32 %66, 61
  br i1 %67, label %68, label %81

; <label>:68                                      ; preds = %49
  %69 = fmul x86_fp80 %32, 0xK3FAEC51701B83A000000
  %70 = fsub x86_fp80 %51, %69
  %71 = load volatile double* @pio2_3thi, align 8, !tbaa !3
  %72 = fpext double %71 to x86_fp80
  %73 = load volatile double* @pio2_3tlo, align 8, !tbaa !3
  %74 = fpext double %73 to x86_fp80
  %75 = fadd x86_fp80 %72, %74
  %76 = fmul x86_fp80 %32, %75
  %77 = fsub x86_fp80 %51, %70
  %78 = fsub x86_fp80 %77, %69
  %79 = fsub x86_fp80 %76, %78
  %80 = fsub x86_fp80 %70, %79
  br label %81

; <label>:81                                      ; preds = %68, %49, %24
  %82 = phi x86_fp80 [ %80, %68 ], [ %61, %49 ], [ %42, %24 ]
  %r.0.i = phi x86_fp80 [ %70, %68 ], [ %51, %49 ], [ %35, %24 ]
  %w.0.i = phi x86_fp80 [ %79, %68 ], [ %60, %49 ], [ %41, %24 ]
  %83 = fsub x86_fp80 %r.0.i, %82
  %84 = fsub x86_fp80 %83, %w.0.i
  br label %__rem_pio2l.exit

__rem_pio2l.exit.thread:                          ; preds = %19
  %85 = fsub x86_fp80 %x, %x
  call void @llvm.lifetime.end(i64 -1, i8* %14) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %15) nounwind
  br label %123

; <label>:86                                      ; preds = %20, %19
  %mask5.i = and i80 %1, 18446744073709551615
  %ins6.i = or i80 %mask5.i, 302637283273278903812096
  %87 = bitcast i80 %ins6.i to x86_fp80
  br label %88

; <label>:88                                      ; preds = %88, %86
  %indvars.iv16.i = phi i64 [ 0, %86 ], [ %indvars.iv.next17.i, %88 ]
  %z.015.i = phi x86_fp80 [ %87, %86 ], [ %94, %88 ]
  %89 = fptosi x86_fp80 %z.015.i to i32
  %90 = sitofp i32 %89 to double
  %91 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %indvars.iv16.i
  store double %90, double* %91, align 8, !tbaa !3
  %92 = fpext double %90 to x86_fp80
  %93 = fsub x86_fp80 %z.015.i, %92
  %94 = fmul x86_fp80 %93, 0xK40178000000000000000
  %indvars.iv.next17.i = add i64 %indvars.iv16.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next17.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 2
  br i1 %exitcond, label %95, label %88

; <label>:95                                      ; preds = %88
  %96 = add nsw i32 %17, -16406
  %97 = fptrunc x86_fp80 %94 to double
  %98 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 2
  store double %97, double* %98, align 16, !tbaa !3
  %99 = fcmp oeq double %97, 0.000000e+00
  br i1 %99, label %._crit_edge.i, label %._crit_edge

._crit_edge.i:                                    ; preds = %._crit_edge.i, %95
  %nx.0.i5 = phi i32 [ %100, %._crit_edge.i ], [ 3, %95 ]
  %indvars.iv.i4 = phi i64 [ %phitmp.i, %._crit_edge.i ], [ 2, %95 ]
  %100 = add nsw i32 %nx.0.i5, -1
  %phitmp.i = add i64 %indvars.iv.i4, -1
  %101 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %phitmp.i
  %102 = load double* %101, align 8, !tbaa !3
  %103 = fcmp oeq double %102, 0.000000e+00
  br i1 %103, label %._crit_edge.i, label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.i, %95
  %nx.0.i.lcssa = phi i32 [ 3, %95 ], [ %100, %._crit_edge.i ]
  %104 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 0
  %105 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 0
  %106 = call i32 @__rem_pio2_large(double* %104, double* %105, i32 %96, i32 %nx.0.i.lcssa, i32 2) nounwind optsize
  %107 = load double* %105, align 16, !tbaa !3
  %108 = fpext double %107 to x86_fp80
  %109 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 1
  %110 = load double* %109, align 8, !tbaa !3
  %111 = fpext double %110 to x86_fp80
  %112 = fadd x86_fp80 %108, %111
  %113 = fsub x86_fp80 %112, %108
  %114 = fsub x86_fp80 %111, %113
  %115 = icmp slt i32 %sext.i, 0
  br i1 %115, label %116, label %__rem_pio2l.exit

; <label>:116                                     ; preds = %._crit_edge
  %117 = fsub x86_fp80 0xK80000000000000000000, %112
  %118 = fsub x86_fp80 0xK80000000000000000000, %114
  %119 = sub nsw i32 0, %106
  br label %__rem_pio2l.exit

__rem_pio2l.exit:                                 ; preds = %116, %._crit_edge, %81
  %120 = phi x86_fp80 [ %84, %81 ], [ %118, %116 ], [ %114, %._crit_edge ]
  %121 = phi x86_fp80 [ %82, %81 ], [ %117, %116 ], [ %112, %._crit_edge ]
  %.0.i = phi i32 [ %33, %81 ], [ %119, %116 ], [ %106, %._crit_edge ]
  call void @llvm.lifetime.end(i64 -1, i8* %14) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %15) nounwind
  %122 = and i32 %.0.i, 3
  switch i32 %122, label %135 [
    i32 0, label %123
    i32 1, label %127
    i32 2, label %130
    i32 3, label %133
  ]

; <label>:123                                     ; preds = %__rem_pio2l.exit, %__rem_pio2l.exit.thread
  %124 = phi x86_fp80 [ %85, %__rem_pio2l.exit.thread ], [ %121, %__rem_pio2l.exit ]
  %125 = phi x86_fp80 [ %85, %__rem_pio2l.exit.thread ], [ %120, %__rem_pio2l.exit ]
  %126 = call x86_fp80 @__cosl(x86_fp80 %124, x86_fp80 %125) nounwind optsize
  br label %135

; <label>:127                                     ; preds = %__rem_pio2l.exit
  %128 = call x86_fp80 @__sinl(x86_fp80 %121, x86_fp80 %120, i32 1) nounwind optsize
  %129 = fsub x86_fp80 0xK80000000000000000000, %128
  br label %135

; <label>:130                                     ; preds = %__rem_pio2l.exit
  %131 = call x86_fp80 @__cosl(x86_fp80 %121, x86_fp80 %120) nounwind optsize
  %132 = fsub x86_fp80 0xK80000000000000000000, %131
  br label %135

; <label>:133                                     ; preds = %__rem_pio2l.exit
  %134 = call x86_fp80 @__sinl(x86_fp80 %121, x86_fp80 %120, i32 1) nounwind optsize
  br label %135

; <label>:135                                     ; preds = %133, %130, %127, %123, %__rem_pio2l.exit, %11, %5, %0
  %.0 = phi x86_fp80 [ %7, %5 ], [ %12, %11 ], [ 0xK3FFF8000000000000000, %0 ], [ %121, %__rem_pio2l.exit ], [ %134, %133 ], [ %132, %130 ], [ %129, %127 ], [ %126, %123 ]
  ret x86_fp80 %.0
}

declare void @llvm.lifetime.start(i64, i8* nocapture) nounwind

declare void @llvm.lifetime.end(i64, i8* nocapture) nounwind

define double @__cos(double %x, double %y) nounwind uwtable readnone optsize {
  %1 = fmul double %x, %x
  %2 = fmul double %1, %1
  %3 = fmul double %1, 0x3EFA01A019CB1590
  %4 = fadd double %3, 0xBF56C16C16C15177
  %5 = fmul double %1, %4
  %6 = fadd double %5, 0x3FA555555555554C
  %7 = fmul double %1, %6
  %8 = fmul double %2, %2
  %9 = fmul double %1, 0xBDA8FAE9BE8838D4
  %10 = fadd double %9, 0x3E21EE9EBDB4B1C4
  %11 = fmul double %1, %10
  %12 = fadd double %11, 0xBE927E4F809C52AD
  %13 = fmul double %8, %12
  %14 = fadd double %7, %13
  %15 = fmul double %1, 5.000000e-01
  %16 = fsub double 1.000000e+00, %15
  %17 = fsub double 1.000000e+00, %16
  %18 = fsub double %17, %15
  %19 = fmul double %1, %14
  %20 = fmul double %x, %y
  %21 = fsub double %19, %20
  %22 = fadd double %18, %21
  %23 = fadd double %16, %22
  ret double %23
}

define double @cos(double %x) nounwind uwtable optsize {
  %y = alloca [2 x double], align 16
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ult i32 %4, 1072243196
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %0
  %7 = icmp ult i32 %4, 1044816030
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fptosi double %x to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %43, label %11

; <label>:11                                      ; preds = %8, %6
  %12 = call double @__cos(double %x, double 0.000000e+00) nounwind optsize
  br label %43

; <label>:13                                      ; preds = %0
  %14 = icmp ugt i32 %4, 2146435071
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %13
  %16 = fsub double %x, %x
  br label %43

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds [2 x double]* %y, i64 0, i64 0
  %19 = call i32 @__rem_pio2(double %x, double* %18) nounwind optsize
  %20 = and i32 %19, 3
  switch i32 %20, label %38 [
    i32 0, label %21
    i32 1, label %26
    i32 2, label %32
  ]

; <label>:21                                      ; preds = %17
  %22 = load double* %18, align 16, !tbaa !3
  %23 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %24 = load double* %23, align 8, !tbaa !3
  %25 = call double @__cos(double %22, double %24) nounwind optsize
  br label %43

; <label>:26                                      ; preds = %17
  %27 = load double* %18, align 16, !tbaa !3
  %28 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %29 = load double* %28, align 8, !tbaa !3
  %30 = call double @__sin(double %27, double %29, i32 1) nounwind optsize
  %31 = fsub double -0.000000e+00, %30
  br label %43

; <label>:32                                      ; preds = %17
  %33 = load double* %18, align 16, !tbaa !3
  %34 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %35 = load double* %34, align 8, !tbaa !3
  %36 = call double @__cos(double %33, double %35) nounwind optsize
  %37 = fsub double -0.000000e+00, %36
  br label %43

; <label>:38                                      ; preds = %17
  %39 = load double* %18, align 16, !tbaa !3
  %40 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %41 = load double* %40, align 8, !tbaa !3
  %42 = call double @__sin(double %39, double %41, i32 1) nounwind optsize
  br label %43

; <label>:43                                      ; preds = %38, %32, %26, %21, %15, %11, %8
  %.0 = phi double [ %12, %11 ], [ %16, %15 ], [ %42, %38 ], [ %37, %32 ], [ %31, %26 ], [ %25, %21 ], [ 1.000000e+00, %8 ]
  ret double %.0
}

define <2 x float> @cpowf(<2 x float> %z.coerce, <2 x float> %c.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %c.coerce, i32 0
  %2 = extractelement <2 x float> %c.coerce, i32 1
  %3 = tail call <2 x float> @clogf(<2 x float> %z.coerce) nounwind optsize
  %4 = extractelement <2 x float> %3, i32 0
  %5 = extractelement <2 x float> %3, i32 1
  %6 = fmul float %1, %4
  %7 = fmul float %2, %5
  %8 = fsub float %6, %7
  %9 = fmul float %2, %4
  %10 = fmul float %1, %5
  %11 = fadd float %9, %10
  %12 = insertelement <2 x float> undef, float %8, i32 0
  %13 = insertelement <2 x float> %12, float %11, i32 1
  %14 = tail call <2 x float> @cexpf(<2 x float> %13) nounwind optsize
  ret <2 x float> %14
}

define { x86_fp80, x86_fp80 } @cpowl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z, { x86_fp80, x86_fp80 }* nocapture byval align 16 %c) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = alloca { x86_fp80, x86_fp80 }, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %c, i64 0, i32 0
  %4 = load x86_fp80* %3, align 16
  %5 = getelementptr inbounds { x86_fp80, x86_fp80 }* %c, i64 0, i32 1
  %6 = load x86_fp80* %5, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %8 = load x86_fp80* %7, align 16
  %9 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %10 = load x86_fp80* %9, align 16
  %11 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %12 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %8, x86_fp80* %11, align 16
  store x86_fp80 %10, x86_fp80* %12, align 16
  %13 = call { x86_fp80, x86_fp80 } @clogl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %14 = extractvalue { x86_fp80, x86_fp80 } %13, 0
  %15 = extractvalue { x86_fp80, x86_fp80 } %13, 1
  %16 = fmul x86_fp80 %4, %14
  %17 = fmul x86_fp80 %6, %15
  %18 = fsub x86_fp80 %16, %17
  %19 = fmul x86_fp80 %6, %14
  %20 = fmul x86_fp80 %4, %15
  %21 = fadd x86_fp80 %19, %20
  %22 = getelementptr inbounds { x86_fp80, x86_fp80 }* %2, i64 0, i32 0
  %23 = getelementptr inbounds { x86_fp80, x86_fp80 }* %2, i64 0, i32 1
  store x86_fp80 %18, x86_fp80* %22, align 16
  store x86_fp80 %21, x86_fp80* %23, align 16
  %24 = call { x86_fp80, x86_fp80 } @cexpl({ x86_fp80, x86_fp80 }* byval align 16 %2) nounwind optsize
  ret { x86_fp80, x86_fp80 } %24
}

define { double, double } @cpow(double %z.coerce0, double %z.coerce1, double %c.coerce0, double %c.coerce1) nounwind uwtable optsize {
  %1 = tail call { double, double } @clog(double %z.coerce0, double %z.coerce1) nounwind optsize
  %2 = extractvalue { double, double } %1, 0
  %3 = extractvalue { double, double } %1, 1
  %4 = fmul double %2, %c.coerce0
  %5 = fmul double %3, %c.coerce1
  %6 = fsub double %4, %5
  %7 = fmul double %2, %c.coerce1
  %8 = fmul double %3, %c.coerce0
  %9 = fadd double %7, %8
  %10 = tail call { double, double } @cexp(double %6, double %9) nounwind optsize
  ret { double, double } %10
}

define <2 x float> @cprojf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = bitcast float %1 to i32
  %3 = and i32 %2, 2147483647
  %4 = icmp eq i32 %3, 2139095040
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = extractelement <2 x float> %z.coerce, i32 1
  %7 = bitcast float %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = icmp eq i32 %8, 2139095040
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %5, %0
  %11 = tail call float @copysignf(float 0.000000e+00, float %1) nounwind optsize
  %12 = insertelement <2 x float> <float 0x7FF0000000000000, float undef>, float %11, i32 1
  br label %13

; <label>:13                                      ; preds = %10, %5
  %.08 = phi <2 x float> [ %12, %10 ], [ %z.coerce, %5 ]
  ret <2 x float> %.08
}

define { x86_fp80, x86_fp80 } @cprojl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = tail call i32 @__fpclassifyl(x86_fp80 %2) nounwind optsize
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %7 = load x86_fp80* %6, align 16
  %8 = tail call i32 @__fpclassifyl(x86_fp80 %7) nounwind optsize
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %5, %0
  %11 = tail call x86_fp80 @copysignl(x86_fp80 0xK00000000000000000000, x86_fp80 %2) nounwind optsize
  br label %12

; <label>:12                                      ; preds = %10, %5
  %.1.0 = phi x86_fp80 [ %11, %10 ], [ %7, %5 ]
  %.0.05 = phi x86_fp80 [ 0xK7FFF8000000000000000, %10 ], [ %2, %5 ]
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %.0.05, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %.1.0, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @cproj(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = bitcast double %z.coerce0 to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = icmp eq i64 %2, 9218868437227405312
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double %z.coerce1 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp eq i64 %6, 9218868437227405312
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %4, %0
  %9 = tail call double @copysign(double 0.000000e+00, double %z.coerce0) nounwind optsize
  br label %10

; <label>:10                                      ; preds = %8, %4
  %.05.0 = phi double [ 0x7FF0000000000000, %8 ], [ %z.coerce0, %4 ]
  %.1.0 = phi double [ %9, %8 ], [ %z.coerce1, %4 ]
  %insert = insertvalue { double, double } undef, double %.05.0, 0
  %insert7 = insertvalue { double, double } %insert, double %.1.0, 1
  ret { double, double } %insert7
}

define float @crealf(<2 x float> %z.coerce) nounwind uwtable readnone optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  ret float %1
}

define x86_fp80 @creall({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  ret x86_fp80 %2
}

define double @creal(double %z.coerce0, double %z.coerce1) nounwind uwtable readnone optsize {
  ret double %z.coerce0
}

define i32 @creat(i8* %filename, i32 %mode) nounwind uwtable optsize {
  %1 = tail call i32 (i8*, i32, ...)* @open(i8* %filename, i32 577, i32 %mode) nounwind optsize
  ret i32 %1
}

define i8* @__crypt_r(i8* nocapture %clear, i8* nocapture %salt, %struct.crypt_data* %data) nounwind uwtable optsize {
  %keybuf.i = alloca [2 x i32], align 4
  %des_ctx = alloca %struct.des_ctx, align 4
  %1 = bitcast %struct.des_ctx* %des_ctx to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 37148, i32 4, i1 false)
  %2 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 0
  store i32 0, i32* %2, align 4, !tbaa !6
  br label %3

; <label>:3                                       ; preds = %3, %0
  %indvars.iv86.i = phi i64 [ 0, %0 ], [ %indvars.iv.next87.i, %3 ]
  %4 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 3, i64 %indvars.iv86.i
  store i8 -1, i8* %4, align 1, !tbaa !0
  %indvars.iv.next87.i = add i64 %indvars.iv86.i, 1
  %lftr.wideiv41 = trunc i64 %indvars.iv.next87.i to i32
  %exitcond42 = icmp eq i32 %lftr.wideiv41, 64
  br i1 %exitcond42, label %.preheader36.i, label %3

.preheader36.i:                                   ; preds = %.preheader36.i, %3
  %indvars.iv82.i = phi i64 [ %indvars.iv.next83.i, %.preheader36.i ], [ 0, %3 ]
  %i.137.i = phi i32 [ %12, %.preheader36.i ], [ 0, %3 ]
  %5 = trunc i32 %i.137.i to i8
  %6 = getelementptr inbounds [56 x i8]* @key_perm, i64 0, i64 %indvars.iv82.i
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = zext i8 %7 to i64
  %9 = add i64 %8, -1
  %10 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 3, i64 %9
  store i8 %5, i8* %10, align 1, !tbaa !0
  %11 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 2, i64 %indvars.iv82.i
  store i8 -1, i8* %11, align 1, !tbaa !0
  %indvars.iv.next83.i = add i64 %indvars.iv82.i, 1
  %12 = add nsw i32 %i.137.i, 1
  %lftr.wideiv39 = trunc i64 %indvars.iv.next83.i to i32
  %exitcond40 = icmp eq i32 %lftr.wideiv39, 56
  br i1 %exitcond40, label %.preheader34.i, label %.preheader36.i

.preheader34.i:                                   ; preds = %.preheader34.i, %.preheader36.i
  %indvars.iv78.i = phi i64 [ %indvars.iv.next79.i, %.preheader34.i ], [ 0, %.preheader36.i ]
  %i.235.i = phi i32 [ %19, %.preheader34.i ], [ 0, %.preheader36.i ]
  %13 = trunc i32 %i.235.i to i8
  %14 = getelementptr inbounds [48 x i8]* @comp_perm, i64 0, i64 %indvars.iv78.i
  %15 = load i8* %14, align 1, !tbaa !0
  %16 = zext i8 %15 to i64
  %17 = add i64 %16, -1
  %18 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 2, i64 %17
  store i8 %13, i8* %18, align 1, !tbaa !0
  %indvars.iv.next79.i = add i64 %indvars.iv78.i, 1
  %19 = add nsw i32 %i.235.i, 1
  %lftr.wideiv37 = trunc i64 %indvars.iv.next79.i to i32
  %exitcond38 = icmp eq i32 %lftr.wideiv37, 48
  br i1 %exitcond38, label %.preheader13.i, label %.preheader34.i

.preheader13.i:                                   ; preds = %117, %.preheader34.i
  %indvars.iv74.i = phi i64 [ %indvars.iv.next75.i, %117 ], [ 0, %.preheader34.i ]
  %20 = shl i64 %indvars.iv74.i, 3
  br label %.preheader9.i

.preheader9.i:                                    ; preds = %48, %.preheader13.i
  %indvars.iv55.i = phi i64 [ 0, %.preheader13.i ], [ %indvars.iv.next56.i, %48 ]
  %21 = trunc i64 %indvars.iv55.i to i32
  br label %22

; <label>:22                                      ; preds = %47, %.preheader9.i
  %indvars.iv51.i = phi i64 [ 0, %.preheader9.i ], [ %indvars.iv.next52.i, %47 ]
  %fr.012.i = phi i32 [ 0, %.preheader9.i ], [ %fr.1.i, %47 ]
  %fl.010.i = phi i32 [ 0, %.preheader9.i ], [ %fl.1.i, %47 ]
  %23 = trunc i64 %indvars.iv51.i to i32
  %24 = lshr i32 128, %23
  %25 = and i32 %24, %21
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %47, label %27

; <label>:27                                      ; preds = %22
  %28 = add nsw i64 %indvars.iv51.i, %20
  %29 = getelementptr inbounds [64 x i8]* @final_perm, i64 0, i64 %28
  %30 = load i8* %29, align 1, !tbaa !0
  %31 = lshr i64 -1085102592571150096, %28
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %32, 0
  %34 = zext i8 %30 to i64
  br i1 %33, label %40, label %35

; <label>:35                                      ; preds = %27
  %36 = lshr i64 2147483648, %34
  %37 = zext i32 %fl.010.i to i64
  %38 = or i64 %36, %37
  %39 = trunc i64 %38 to i32
  br label %47

; <label>:40                                      ; preds = %27
  %41 = add i64 %34, 4294967264
  %42 = and i64 %41, 4294967295
  %43 = lshr i64 2147483648, %42
  %44 = zext i32 %fr.012.i to i64
  %45 = or i64 %43, %44
  %46 = trunc i64 %45 to i32
  br label %47

; <label>:47                                      ; preds = %40, %35, %22
  %fl.1.i = phi i32 [ %39, %35 ], [ %fl.010.i, %40 ], [ %fl.010.i, %22 ]
  %fr.1.i = phi i32 [ %fr.012.i, %35 ], [ %46, %40 ], [ %fr.012.i, %22 ]
  %indvars.iv.next52.i = add i64 %indvars.iv51.i, 1
  %lftr.wideiv21 = trunc i64 %indvars.iv.next52.i to i32
  %exitcond22 = icmp eq i32 %lftr.wideiv21, 8
  br i1 %exitcond22, label %48, label %22

; <label>:48                                      ; preds = %47
  %49 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 %indvars.iv74.i, i64 %indvars.iv55.i
  store i32 %fl.1.i, i32* %49, align 4, !tbaa !6
  %50 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 %indvars.iv74.i, i64 %indvars.iv55.i
  store i32 %fr.1.i, i32* %50, align 4, !tbaa !6
  %indvars.iv.next56.i = add i64 %indvars.iv55.i, 1
  %lftr.wideiv23 = trunc i64 %indvars.iv.next56.i to i32
  %exitcond24 = icmp eq i32 %lftr.wideiv23, 256
  br i1 %exitcond24, label %.loopexit.i, label %.preheader9.i

.loopexit.i:                                      ; preds = %48
  %51 = mul nsw i64 %indvars.iv74.i, 7
  br label %.preheader15.i

.preheader15.i:                                   ; preds = %114, %.loopexit.i
  %indvars.iv70.i = phi i64 [ 0, %.loopexit.i ], [ %indvars.iv.next71.i, %114 ]
  %52 = trunc i64 %indvars.iv70.i to i32
  br label %.outer.i

.outer.i:                                         ; preds = %75, %.preheader15.i
  %ir.0.ph.i = phi i32 [ %81, %75 ], [ 0, %.preheader15.i ]
  %il.0.ph.i = phi i32 [ %il.0.ph17.i, %75 ], [ 0, %.preheader15.i ]
  %j.1.ph.i = phi i32 [ %57, %75 ], [ 0, %.preheader15.i ]
  br label %.outer16.i

.outer16.i:                                       ; preds = %70, %.outer.i
  %il.0.ph17.i = phi i32 [ %74, %70 ], [ %il.0.ph.i, %.outer.i ]
  %j.1.ph18.i = phi i32 [ %57, %70 ], [ %j.1.ph.i, %.outer.i ]
  %53 = sext i32 %j.1.ph18.i to i64
  br label %.backedge.i

.backedge.i:                                      ; preds = %62, %56, %.outer16.i
  %indvars.iv61.i = phi i64 [ %53, %.outer16.i ], [ %indvars.iv.next62.i, %56 ], [ %indvars.iv.next62.i, %62 ]
  %j.1.i = phi i32 [ %j.1.ph18.i, %.outer16.i ], [ %57, %56 ], [ %57, %62 ]
  %54 = trunc i64 %indvars.iv61.i to i32
  %55 = icmp slt i32 %54, 7
  br i1 %55, label %56, label %82

; <label>:56                                      ; preds = %.backedge.i
  %indvars.iv.next62.i = add i64 %indvars.iv61.i, 1
  %57 = add nsw i32 %j.1.i, 1
  %58 = trunc i64 %indvars.iv.next62.i to i32
  %59 = lshr i32 128, %58
  %60 = and i32 %59, %52
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %.backedge.i, label %62

; <label>:62                                      ; preds = %56
  %63 = add nsw i64 %indvars.iv61.i, %20
  %64 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 3, i64 %63
  %65 = load i8* %64, align 1, !tbaa !0
  %66 = zext i8 %65 to i64
  %67 = icmp eq i8 %65, -1
  br i1 %67, label %.backedge.i, label %68

; <label>:68                                      ; preds = %62
  %69 = icmp ult i8 %65, 28
  br i1 %69, label %70, label %75

; <label>:70                                      ; preds = %68
  %71 = lshr i64 134217728, %66
  %72 = zext i32 %il.0.ph17.i to i64
  %73 = or i64 %71, %72
  %74 = trunc i64 %73 to i32
  br label %.outer16.i

; <label>:75                                      ; preds = %68
  %76 = add i64 %66, 4294967268
  %77 = and i64 %76, 4294967295
  %78 = lshr i64 134217728, %77
  %79 = zext i32 %ir.0.ph.i to i64
  %80 = or i64 %78, %79
  %81 = trunc i64 %80 to i32
  br label %.outer.i

; <label>:82                                      ; preds = %.backedge.i
  %83 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 %indvars.iv74.i, i64 %indvars.iv70.i
  store i32 %il.0.ph17.i, i32* %83, align 4, !tbaa !6
  %84 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 %indvars.iv74.i, i64 %indvars.iv70.i
  store i32 %ir.0.ph.i, i32* %84, align 4, !tbaa !6
  br label %.outer21.i

.outer21.i:                                       ; preds = %107, %82
  %ir.2.ph.i = phi i32 [ 0, %82 ], [ %113, %107 ]
  %il.2.ph.i = phi i32 [ 0, %82 ], [ %il.2.ph23.i, %107 ]
  %j.2.ph.i = phi i32 [ 0, %82 ], [ %89, %107 ]
  br label %.outer22.i

.outer22.i:                                       ; preds = %102, %.outer21.i
  %il.2.ph23.i = phi i32 [ %106, %102 ], [ %il.2.ph.i, %.outer21.i ]
  %j.2.ph24.i = phi i32 [ %89, %102 ], [ %j.2.ph.i, %.outer21.i ]
  %85 = sext i32 %j.2.ph24.i to i64
  br label %.backedge25.i

.backedge25.i:                                    ; preds = %94, %88, %.outer22.i
  %indvars.iv67.i = phi i64 [ %85, %.outer22.i ], [ %indvars.iv.next68.i, %88 ], [ %indvars.iv.next68.i, %94 ]
  %j.2.i = phi i32 [ %j.2.ph24.i, %.outer22.i ], [ %89, %88 ], [ %89, %94 ]
  %86 = trunc i64 %indvars.iv67.i to i32
  %87 = icmp slt i32 %86, 7
  br i1 %87, label %88, label %114

; <label>:88                                      ; preds = %.backedge25.i
  %indvars.iv.next68.i = add i64 %indvars.iv67.i, 1
  %89 = add nsw i32 %j.2.i, 1
  %90 = trunc i64 %indvars.iv.next68.i to i32
  %91 = lshr i32 128, %90
  %92 = and i32 %91, %52
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %.backedge25.i, label %94

; <label>:94                                      ; preds = %88
  %95 = add nsw i64 %indvars.iv67.i, %51
  %96 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 2, i64 %95
  %97 = load i8* %96, align 1, !tbaa !0
  %98 = zext i8 %97 to i64
  %99 = icmp eq i8 %97, -1
  br i1 %99, label %.backedge25.i, label %100

; <label>:100                                     ; preds = %94
  %101 = icmp ult i8 %97, 24
  br i1 %101, label %102, label %107

; <label>:102                                     ; preds = %100
  %103 = lshr i64 8388608, %98
  %104 = zext i32 %il.2.ph23.i to i64
  %105 = or i64 %103, %104
  %106 = trunc i64 %105 to i32
  br label %.outer22.i

; <label>:107                                     ; preds = %100
  %108 = add i64 %98, 4294967272
  %109 = and i64 %108, 4294967295
  %110 = lshr i64 8388608, %109
  %111 = zext i32 %ir.2.ph.i to i64
  %112 = or i64 %110, %111
  %113 = trunc i64 %112 to i32
  br label %.outer21.i

; <label>:114                                     ; preds = %.backedge25.i
  %115 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 %indvars.iv74.i, i64 %indvars.iv70.i
  store i32 %il.2.ph23.i, i32* %115, align 4, !tbaa !6
  %116 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 %indvars.iv74.i, i64 %indvars.iv70.i
  store i32 %ir.2.ph.i, i32* %116, align 4, !tbaa !6
  %indvars.iv.next71.i = add i64 %indvars.iv70.i, 1
  %lftr.wideiv33 = trunc i64 %indvars.iv.next71.i to i32
  %exitcond34 = icmp eq i32 %lftr.wideiv33, 128
  br i1 %exitcond34, label %117, label %.preheader15.i

; <label>:117                                     ; preds = %114
  %indvars.iv.next75.i = add i64 %indvars.iv74.i, 1
  %lftr.wideiv35 = trunc i64 %indvars.iv.next75.i to i32
  %exitcond36 = icmp eq i32 %lftr.wideiv35, 8
  br i1 %exitcond36, label %.preheader7.i, label %.preheader13.i

.preheader7.i:                                    ; preds = %.preheader7.i, %117
  %indvars.iv47.i = phi i64 [ %indvars.iv.next48.i, %.preheader7.i ], [ 0, %117 ]
  %i.58.i = phi i32 [ %124, %.preheader7.i ], [ 0, %117 ]
  %118 = trunc i32 %i.58.i to i8
  %119 = getelementptr inbounds [32 x i8]* @pbox, i64 0, i64 %indvars.iv47.i
  %120 = load i8* %119, align 1, !tbaa !0
  %121 = zext i8 %120 to i64
  %122 = add i64 %121, -1
  %123 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 1, i64 %122
  store i8 %118, i8* %123, align 1, !tbaa !0
  %indvars.iv.next48.i = add i64 %indvars.iv47.i, 1
  %124 = add nsw i32 %i.58.i, 1
  %lftr.wideiv19 = trunc i64 %indvars.iv.next48.i to i32
  %exitcond20 = icmp eq i32 %lftr.wideiv19, 32
  br i1 %exitcond20, label %.preheader3.i, label %.preheader7.i

.preheader3.i:                                    ; preds = %142, %.preheader7.i
  %indvars.iv43.i = phi i64 [ %indvars.iv.next44.i, %142 ], [ 0, %.preheader7.i ]
  %125 = shl i64 %indvars.iv43.i, 3
  br label %.preheader.i

.preheader.i:                                     ; preds = %140, %.preheader3.i
  %indvars.iv39.i = phi i64 [ 0, %.preheader3.i ], [ %indvars.iv.next40.i, %140 ]
  %126 = trunc i64 %indvars.iv39.i to i32
  br label %127

; <label>:127                                     ; preds = %139, %.preheader.i
  %indvars.iv.i = phi i64 [ 0, %.preheader.i ], [ %indvars.iv.next.i, %139 ]
  %p.01.i = phi i32 [ 0, %.preheader.i ], [ %p.1.i, %139 ]
  %128 = trunc i64 %indvars.iv.i to i32
  %129 = lshr i32 128, %128
  %130 = and i32 %129, %126
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %139, label %132

; <label>:132                                     ; preds = %127
  %133 = add nsw i64 %indvars.iv.i, %125
  %134 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 1, i64 %133
  %135 = load i8* %134, align 1, !tbaa !0
  %136 = zext i8 %135 to i32
  %137 = lshr i32 -2147483648, %136
  %138 = or i32 %137, %p.01.i
  br label %139

; <label>:139                                     ; preds = %132, %127
  %p.1.i = phi i32 [ %138, %132 ], [ %p.01.i, %127 ]
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %lftr.wideiv13 = trunc i64 %indvars.iv.next.i to i32
  %exitcond14 = icmp eq i32 %lftr.wideiv13, 8
  br i1 %exitcond14, label %140, label %127

; <label>:140                                     ; preds = %139
  %141 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 12, i64 %indvars.iv43.i, i64 %indvars.iv39.i
  store i32 %p.1.i, i32* %141, align 4, !tbaa !6
  %indvars.iv.next40.i = add i64 %indvars.iv39.i, 1
  %lftr.wideiv15 = trunc i64 %indvars.iv.next40.i to i32
  %exitcond16 = icmp eq i32 %lftr.wideiv15, 256
  br i1 %exitcond16, label %142, label %.preheader.i

; <label>:142                                     ; preds = %140
  %indvars.iv.next44.i = add i64 %indvars.iv43.i, 1
  %lftr.wideiv17 = trunc i64 %indvars.iv.next44.i to i32
  %exitcond18 = icmp eq i32 %lftr.wideiv17, 4
  br i1 %exitcond18, label %des_init.exit, label %.preheader3.i

des_init.exit:                                    ; preds = %142
  %143 = bitcast [2 x i32]* %keybuf.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %143) nounwind
  %144 = ptrtoint [2 x i32]* %keybuf.i to i64
  br label %145

; <label>:145                                     ; preds = %145, %des_init.exit
  %q.03.i = phi i8* [ %143, %des_init.exit ], [ %150, %145 ]
  %.02.i = phi i8* [ %clear, %des_init.exit ], [ %.1.i, %145 ]
  %146 = load i8* %.02.i, align 1, !tbaa !0
  %147 = shl i8 %146, 1
  store i8 %147, i8* %q.03.i, align 1, !tbaa !0
  %148 = icmp eq i8 %147, 0
  %149 = getelementptr inbounds i8* %.02.i, i64 1
  %.1.i = select i1 %148, i8* %.02.i, i8* %149
  %150 = getelementptr inbounds i8* %q.03.i, i64 1
  %151 = ptrtoint i8* %150 to i64
  %152 = sub i64 %151, %144
  %153 = icmp eq i64 %152, 8
  br i1 %153, label %154, label %145

; <label>:154                                     ; preds = %145
  %155 = bitcast %struct.crypt_data* %data to i8*
  %156 = getelementptr inbounds [2 x i32]* %keybuf.i, i64 0, i64 0
  %157 = load i32* %156, align 4
  %158 = zext i32 %157 to i64
  %159 = lshr i64 %158, 9
  %160 = and i64 %159, 127
  %161 = lshr i32 %157, 16
  %162 = zext i32 %161 to i64
  %163 = lshr i32 %157, 24
  %164 = zext i32 %163 to i64
  %.phi.trans.insert.i = getelementptr inbounds [2 x i32]* %keybuf.i, i64 0, i64 1
  %165 = load i32* %.phi.trans.insert.i, align 4
  %166 = zext i32 %165 to i64
  %167 = lshr i64 %166, 9
  %168 = and i64 %167, 127
  %169 = lshr i32 %165, 16
  %170 = zext i32 %169 to i64
  %171 = lshr i32 %165, 24
  %172 = zext i32 %171 to i64
  %phitmp.i = lshr i64 %158, 1
  %phitmp16.i = and i64 %phitmp.i, 127
  %phitmp10.i = lshr i64 %162, 1
  %phitmp17.i = and i64 %phitmp10.i, 127
  %phitmp18.i = lshr i64 %164, 1
  %phitmp12.i = lshr i64 %166, 1
  %phitmp19.i = and i64 %phitmp12.i, 127
  %phitmp14.i = lshr i64 %170, 1
  %phitmp20.i = and i64 %phitmp14.i, 127
  %phitmp21.i = lshr i64 %172, 1
  %173 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 0, i64 %phitmp16.i
  %174 = load i32* %173, align 4, !tbaa !6
  %175 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 1, i64 %160
  %176 = load i32* %175, align 4, !tbaa !6
  %177 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 2, i64 %phitmp17.i
  %178 = load i32* %177, align 4, !tbaa !6
  %179 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 3, i64 %phitmp18.i
  %180 = load i32* %179, align 4, !tbaa !6
  %181 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 4, i64 %phitmp19.i
  %182 = load i32* %181, align 4, !tbaa !6
  %183 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 5, i64 %168
  %184 = load i32* %183, align 4, !tbaa !6
  %185 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 6, i64 %phitmp20.i
  %186 = load i32* %185, align 4, !tbaa !6
  %187 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 8, i64 7, i64 %phitmp21.i
  %188 = load i32* %187, align 4, !tbaa !6
  %189 = or i32 %176, %174
  %190 = or i32 %189, %178
  %191 = or i32 %190, %180
  %192 = or i32 %191, %182
  %193 = or i32 %192, %184
  %194 = or i32 %193, %186
  %195 = or i32 %194, %188
  %196 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 0, i64 %phitmp16.i
  %197 = load i32* %196, align 4, !tbaa !6
  %198 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 1, i64 %160
  %199 = load i32* %198, align 4, !tbaa !6
  %200 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 2, i64 %phitmp17.i
  %201 = load i32* %200, align 4, !tbaa !6
  %202 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 3, i64 %phitmp18.i
  %203 = load i32* %202, align 4, !tbaa !6
  %204 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 4, i64 %phitmp19.i
  %205 = load i32* %204, align 4, !tbaa !6
  %206 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 5, i64 %168
  %207 = load i32* %206, align 4, !tbaa !6
  %208 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 6, i64 %phitmp20.i
  %209 = load i32* %208, align 4, !tbaa !6
  %210 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 9, i64 7, i64 %phitmp21.i
  %211 = load i32* %210, align 4, !tbaa !6
  %212 = or i32 %199, %197
  %213 = or i32 %212, %201
  %214 = or i32 %213, %203
  %215 = or i32 %214, %205
  %216 = or i32 %215, %207
  %217 = or i32 %216, %209
  %218 = or i32 %217, %211
  br label %219

; <label>:219                                     ; preds = %219, %154
  %indvars.iv.i.i = phi i64 [ 0, %154 ], [ %indvars.iv.next.i.i, %219 ]
  %shifts.01.i.i = phi i32 [ 0, %154 ], [ %223, %219 ]
  %220 = getelementptr inbounds [16 x i8]* @key_shifts, i64 0, i64 %indvars.iv.i.i
  %221 = load i8* %220, align 1, !tbaa !0
  %222 = zext i8 %221 to i32
  %223 = add nsw i32 %222, %shifts.01.i.i
  %224 = shl i32 %195, %223
  %225 = sub nsw i32 28, %223
  %226 = lshr i32 %195, %225
  %227 = or i32 %226, %224
  %228 = shl i32 %218, %223
  %229 = lshr i32 %218, %225
  %230 = or i32 %229, %228
  %231 = lshr i32 %227, 21
  %232 = and i32 %231, 127
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 0, i64 %233
  %235 = load i32* %234, align 4, !tbaa !6
  %236 = lshr i32 %227, 14
  %237 = and i32 %236, 127
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 1, i64 %238
  %240 = load i32* %239, align 4, !tbaa !6
  %241 = lshr i32 %227, 7
  %242 = and i32 %241, 127
  %243 = zext i32 %242 to i64
  %244 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 2, i64 %243
  %245 = load i32* %244, align 4, !tbaa !6
  %246 = and i32 %227, 127
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 3, i64 %247
  %249 = load i32* %248, align 4, !tbaa !6
  %250 = lshr i32 %230, 21
  %251 = and i32 %250, 127
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 4, i64 %252
  %254 = load i32* %253, align 4, !tbaa !6
  %255 = lshr i32 %230, 14
  %256 = and i32 %255, 127
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 5, i64 %257
  %259 = load i32* %258, align 4, !tbaa !6
  %260 = lshr i32 %230, 7
  %261 = and i32 %260, 127
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 6, i64 %262
  %264 = load i32* %263, align 4, !tbaa !6
  %265 = and i32 %230, 127
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 10, i64 7, i64 %266
  %268 = load i32* %267, align 4, !tbaa !6
  %269 = or i32 %240, %235
  %270 = or i32 %269, %245
  %271 = or i32 %270, %249
  %272 = or i32 %271, %254
  %273 = or i32 %272, %259
  %274 = or i32 %273, %264
  %275 = or i32 %274, %268
  %276 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 4, i64 %indvars.iv.i.i
  store i32 %275, i32* %276, align 4, !tbaa !6
  %277 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 0, i64 %233
  %278 = load i32* %277, align 4, !tbaa !6
  %279 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 1, i64 %238
  %280 = load i32* %279, align 4, !tbaa !6
  %281 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 2, i64 %243
  %282 = load i32* %281, align 4, !tbaa !6
  %283 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 3, i64 %247
  %284 = load i32* %283, align 4, !tbaa !6
  %285 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 4, i64 %252
  %286 = load i32* %285, align 4, !tbaa !6
  %287 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 5, i64 %257
  %288 = load i32* %287, align 4, !tbaa !6
  %289 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 6, i64 %262
  %290 = load i32* %289, align 4, !tbaa !6
  %291 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 11, i64 7, i64 %266
  %292 = load i32* %291, align 4, !tbaa !6
  %293 = or i32 %280, %278
  %294 = or i32 %293, %282
  %295 = or i32 %294, %284
  %296 = or i32 %295, %286
  %297 = or i32 %296, %288
  %298 = or i32 %297, %290
  %299 = or i32 %298, %292
  %300 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 5, i64 %indvars.iv.i.i
  store i32 %299, i32* %300, align 4, !tbaa !6
  %indvars.iv.next.i.i = add i64 %indvars.iv.i.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 16
  br i1 %exitcond, label %des_setkey.exit.i, label %219

des_setkey.exit.i:                                ; preds = %219
  %301 = getelementptr inbounds i8* %salt, i64 1
  %302 = load i8* %301, align 1, !tbaa !0
  %303 = call fastcc i32 @ascii_to_bin(i8 signext %302) nounwind optsize
  %304 = shl i32 %303, 6
  %305 = load i8* %salt, align 1, !tbaa !0
  %306 = call fastcc i32 @ascii_to_bin(i8 signext %305) nounwind optsize
  %307 = or i32 %306, %304
  store i8 %305, i8* %155, align 1, !tbaa !0
  %308 = load i8* %301, align 1, !tbaa !0
  %309 = icmp eq i8 %308, 0
  %..i = select i1 %309, i8 %305, i8 %308
  %310 = getelementptr inbounds i8* %155, i64 1
  store i8 %..i, i8* %310, align 1, !tbaa !0
  store i32 0, i32* %2, align 4, !tbaa !6
  br label %311

; <label>:311                                     ; preds = %317, %des_setkey.exit.i
  %312 = phi i32 [ 0, %des_setkey.exit.i ], [ %318, %317 ]
  %i.03.i.i = phi i32 [ 0, %des_setkey.exit.i ], [ %321, %317 ]
  %saltbit.02.i.i = phi i32 [ 1, %des_setkey.exit.i ], [ %319, %317 ]
  %obit.01.i.i = phi i32 [ 8388608, %des_setkey.exit.i ], [ %320, %317 ]
  %313 = and i32 %saltbit.02.i.i, %307
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %317, label %315

; <label>:315                                     ; preds = %311
  %316 = or i32 %obit.01.i.i, %312
  store i32 %316, i32* %2, align 4, !tbaa !6
  br label %317

; <label>:317                                     ; preds = %315, %311
  %318 = phi i32 [ %312, %311 ], [ %316, %315 ]
  %319 = shl i32 %saltbit.02.i.i, 1
  %320 = lshr i32 %obit.01.i.i, 1
  %321 = add nsw i32 %i.03.i.i, 1
  %exitcond.i1.i = icmp eq i32 %321, 24
  br i1 %exitcond.i1.i, label %setup_salt.exit.i, label %311

setup_salt.exit.i:                                ; preds = %317
  %322 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 4, i64 0
  %323 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 5, i64 0
  br label %324

; <label>:324                                     ; preds = %397, %setup_salt.exit.i
  %r.0.i.i = phi i32 [ 0, %setup_salt.exit.i ], [ %r.1.i.i, %397 ]
  %l.0.i.i = phi i32 [ 0, %setup_salt.exit.i ], [ %394, %397 ]
  %.0.i.i = phi i32 [ 25, %setup_salt.exit.i ], [ %398, %397 ]
  br label %325

; <label>:325                                     ; preds = %325, %324
  %kl.0.i.i = phi i32* [ %322, %324 ], [ %355, %325 ]
  %r.1.i.i = phi i32 [ %r.0.i.i, %324 ], [ %394, %325 ]
  %l.1.i.i = phi i32 [ %l.0.i.i, %324 ], [ %r.1.i.i, %325 ]
  %kr.0.i.i = phi i32* [ %323, %324 ], [ %359, %325 ]
  %round.0.i.i = phi i32 [ 16, %324 ], [ %395, %325 ]
  %326 = shl i32 %r.1.i.i, 23
  %327 = and i32 %326, 8388608
  %328 = lshr i32 %r.1.i.i, 9
  %329 = and i32 %328, 8126464
  %330 = lshr i32 %r.1.i.i, 11
  %331 = and i32 %330, 258048
  %332 = lshr i32 %r.1.i.i, 13
  %333 = and i32 %332, 4032
  %334 = lshr i32 %r.1.i.i, 15
  %335 = and i32 %334, 63
  %336 = or i32 %327, %329
  %337 = or i32 %336, %331
  %338 = or i32 %337, %333
  %339 = or i32 %338, %335
  %340 = shl i32 %r.1.i.i, 7
  %341 = and i32 %340, 16515072
  %342 = shl i32 %r.1.i.i, 5
  %343 = and i32 %342, 258048
  %344 = shl i32 %r.1.i.i, 3
  %345 = and i32 %344, 4032
  %346 = shl i32 %r.1.i.i, 1
  %347 = and i32 %346, 62
  %348 = lshr i32 %r.1.i.i, 31
  %349 = or i32 %347, %348
  %350 = or i32 %349, %345
  %351 = or i32 %350, %341
  %352 = or i32 %351, %343
  %353 = xor i32 %339, %352
  %354 = and i32 %353, %318
  %355 = getelementptr inbounds i32* %kl.0.i.i, i64 1
  %356 = load i32* %kl.0.i.i, align 4, !tbaa !6
  %357 = xor i32 %339, %356
  %358 = xor i32 %357, %354
  %359 = getelementptr inbounds i32* %kr.0.i.i, i64 1
  %360 = load i32* %kr.0.i.i, align 4, !tbaa !6
  %361 = xor i32 %352, %360
  %362 = xor i32 %361, %354
  %363 = lshr i32 %358, 12
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds [4 x [4096 x i8]]* @m_sbox, i64 0, i64 0, i64 %364
  %366 = load i8* %365, align 1, !tbaa !0
  %367 = zext i8 %366 to i64
  %368 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 12, i64 0, i64 %367
  %369 = load i32* %368, align 4, !tbaa !6
  %370 = and i32 %358, 4095
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds [4 x [4096 x i8]]* @m_sbox, i64 0, i64 1, i64 %371
  %373 = load i8* %372, align 1, !tbaa !0
  %374 = zext i8 %373 to i64
  %375 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 12, i64 1, i64 %374
  %376 = load i32* %375, align 4, !tbaa !6
  %377 = lshr i32 %362, 12
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds [4 x [4096 x i8]]* @m_sbox, i64 0, i64 2, i64 %378
  %380 = load i8* %379, align 1, !tbaa !0
  %381 = zext i8 %380 to i64
  %382 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 12, i64 2, i64 %381
  %383 = load i32* %382, align 4, !tbaa !6
  %384 = and i32 %362, 4095
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds [4 x [4096 x i8]]* @m_sbox, i64 0, i64 3, i64 %385
  %387 = load i8* %386, align 1, !tbaa !0
  %388 = zext i8 %387 to i64
  %389 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 12, i64 3, i64 %388
  %390 = load i32* %389, align 4, !tbaa !6
  %391 = or i32 %376, %369
  %392 = or i32 %391, %383
  %393 = or i32 %392, %390
  %394 = xor i32 %393, %l.1.i.i
  %395 = add nsw i32 %round.0.i.i, -1
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %397, label %325

; <label>:397                                     ; preds = %325
  %398 = add nsw i32 %.0.i.i, -1
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %des_crypt.exit, label %324

des_crypt.exit:                                   ; preds = %397
  %400 = lshr i32 %394, 24
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 0, i64 %401
  %403 = load i32* %402, align 4, !tbaa !6
  %404 = lshr i32 %394, 16
  %405 = and i32 %404, 255
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 1, i64 %406
  %408 = load i32* %407, align 4, !tbaa !6
  %409 = lshr i32 %394, 8
  %410 = and i32 %409, 255
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 2, i64 %411
  %413 = load i32* %412, align 4, !tbaa !6
  %414 = and i32 %394, 255
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 3, i64 %415
  %417 = load i32* %416, align 4, !tbaa !6
  %418 = lshr i32 %r.1.i.i, 24
  %419 = zext i32 %418 to i64
  %420 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 4, i64 %419
  %421 = load i32* %420, align 4, !tbaa !6
  %422 = lshr i32 %r.1.i.i, 16
  %423 = and i32 %422, 255
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 5, i64 %424
  %426 = load i32* %425, align 4, !tbaa !6
  %427 = lshr i32 %r.1.i.i, 8
  %428 = and i32 %427, 255
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 6, i64 %429
  %431 = load i32* %430, align 4, !tbaa !6
  %432 = and i32 %r.1.i.i, 255
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 6, i64 7, i64 %433
  %435 = load i32* %434, align 4, !tbaa !6
  %436 = or i32 %408, %403
  %437 = or i32 %436, %413
  %438 = or i32 %437, %417
  %439 = or i32 %438, %421
  %440 = or i32 %439, %426
  %441 = or i32 %440, %431
  %442 = or i32 %441, %435
  %443 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 0, i64 %401
  %444 = load i32* %443, align 4, !tbaa !6
  %445 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 1, i64 %406
  %446 = load i32* %445, align 4, !tbaa !6
  %447 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 2, i64 %411
  %448 = load i32* %447, align 4, !tbaa !6
  %449 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 3, i64 %415
  %450 = load i32* %449, align 4, !tbaa !6
  %451 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 4, i64 %419
  %452 = load i32* %451, align 4, !tbaa !6
  %453 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 5, i64 %424
  %454 = load i32* %453, align 4, !tbaa !6
  %455 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 6, i64 %429
  %456 = load i32* %455, align 4, !tbaa !6
  %457 = getelementptr inbounds %struct.des_ctx* %des_ctx, i64 0, i32 7, i64 7, i64 %433
  %458 = load i32* %457, align 4, !tbaa !6
  %459 = or i32 %446, %444
  %460 = or i32 %459, %448
  %461 = or i32 %460, %450
  %462 = or i32 %461, %452
  %463 = or i32 %462, %454
  %464 = or i32 %463, %456
  %465 = or i32 %464, %458
  %466 = getelementptr inbounds i8* %155, i64 2
  %467 = lshr i32 %442, 8
  call fastcc void @to64_msb_first(i8* %466, i32 %467) nounwind optsize
  %468 = getelementptr inbounds i8* %155, i64 6
  %469 = shl i32 %442, 16
  %470 = lshr i32 %465, 16
  %471 = or i32 %470, %469
  call fastcc void @to64_msb_first(i8* %468, i32 %471) nounwind optsize
  %472 = getelementptr inbounds i8* %155, i64 10
  %473 = shl i32 %465, 8
  call fastcc void @to64_msb_first(i8* %472, i32 %473) nounwind optsize
  %474 = getelementptr inbounds i8* %155, i64 13
  store i8 0, i8* %474, align 1, !tbaa !0
  call void @llvm.lifetime.end(i64 -1, i8* %143) nounwind
  ret i8* %155
}

define i8* @crypt(i8* nocapture %clear, i8* nocapture %salt) nounwind uwtable optsize {
  %1 = tail call i8* @__crypt_r(i8* %clear, i8* %salt, %struct.crypt_data* bitcast ([128 x i8]* @crypt.buf to %struct.crypt_data*)) optsize
  ret i8* %1
}

define internal fastcc i32 @ascii_to_bin(i8 signext %ch) nounwind uwtable readnone optsize {
  %1 = sext i8 %ch to i32
  %2 = icmp sgt i8 %ch, 122
  br i1 %2, label %18, label %3

; <label>:3                                       ; preds = %0
  %4 = icmp sgt i8 %ch, 96
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %3
  %6 = add nsw i32 %1, -59
  br label %18

; <label>:7                                       ; preds = %3
  %8 = icmp sgt i8 %ch, 90
  br i1 %8, label %18, label %9

; <label>:9                                       ; preds = %7
  %10 = icmp sgt i8 %ch, 64
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %9
  %12 = add nsw i32 %1, -53
  br label %18

; <label>:13                                      ; preds = %9
  %14 = icmp sgt i8 %ch, 57
  br i1 %14, label %18, label %15

; <label>:15                                      ; preds = %13
  %16 = add nsw i32 %1, -46
  %17 = icmp sgt i8 %ch, 45
  %. = select i1 %17, i32 %16, i32 0
  ret i32 %.

; <label>:18                                      ; preds = %13, %11, %7, %5, %0
  %.0 = phi i32 [ %6, %5 ], [ %12, %11 ], [ 0, %0 ], [ 0, %7 ], [ 0, %13 ]
  ret i32 %.0
}

define internal fastcc void @to64_msb_first(i8* nocapture %s, i32 %v) nounwind uwtable optsize {
  %1 = lshr i32 %v, 18
  %2 = and i32 %1, 63
  switch i32 %2, label %4 [
    i32 0, label %i64c.exit
    i32 1, label %3
  ]

; <label>:3                                       ; preds = %0
  br label %i64c.exit

; <label>:4                                       ; preds = %0
  %5 = icmp ult i32 %2, 12
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %4
  %7 = add nsw i32 %2, 46
  br label %i64c.exit

; <label>:8                                       ; preds = %4
  %9 = icmp ult i32 %2, 38
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %8
  %11 = add nsw i32 %2, 53
  br label %i64c.exit

; <label>:12                                      ; preds = %8
  %13 = add nsw i32 %2, 59
  br label %i64c.exit

i64c.exit:                                        ; preds = %12, %10, %6, %3, %0
  %.0.i = phi i32 [ 47, %3 ], [ %7, %6 ], [ %11, %10 ], [ %13, %12 ], [ 46, %0 ]
  %14 = trunc i32 %.0.i to i8
  %15 = getelementptr inbounds i8* %s, i64 1
  store i8 %14, i8* %s, align 1, !tbaa !0
  %16 = lshr i32 %v, 12
  %17 = and i32 %16, 63
  switch i32 %17, label %19 [
    i32 0, label %i64c.exit6
    i32 1, label %18
  ]

; <label>:18                                      ; preds = %i64c.exit
  br label %i64c.exit6

; <label>:19                                      ; preds = %i64c.exit
  %20 = icmp ult i32 %17, 12
  br i1 %20, label %21, label %23

; <label>:21                                      ; preds = %19
  %22 = add nsw i32 %17, 46
  br label %i64c.exit6

; <label>:23                                      ; preds = %19
  %24 = icmp ult i32 %17, 38
  br i1 %24, label %25, label %27

; <label>:25                                      ; preds = %23
  %26 = add nsw i32 %17, 53
  br label %i64c.exit6

; <label>:27                                      ; preds = %23
  %28 = add nsw i32 %17, 59
  br label %i64c.exit6

i64c.exit6:                                       ; preds = %27, %25, %21, %18, %i64c.exit
  %.0.i5 = phi i32 [ 47, %18 ], [ %22, %21 ], [ %26, %25 ], [ %28, %27 ], [ 46, %i64c.exit ]
  %29 = trunc i32 %.0.i5 to i8
  %30 = getelementptr inbounds i8* %s, i64 2
  store i8 %29, i8* %15, align 1, !tbaa !0
  %31 = lshr i32 %v, 6
  %32 = and i32 %31, 63
  switch i32 %32, label %34 [
    i32 0, label %i64c.exit4
    i32 1, label %33
  ]

; <label>:33                                      ; preds = %i64c.exit6
  br label %i64c.exit4

; <label>:34                                      ; preds = %i64c.exit6
  %35 = icmp ult i32 %32, 12
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %34
  %37 = add nsw i32 %32, 46
  br label %i64c.exit4

; <label>:38                                      ; preds = %34
  %39 = icmp ult i32 %32, 38
  br i1 %39, label %40, label %42

; <label>:40                                      ; preds = %38
  %41 = add nsw i32 %32, 53
  br label %i64c.exit4

; <label>:42                                      ; preds = %38
  %43 = add nsw i32 %32, 59
  br label %i64c.exit4

i64c.exit4:                                       ; preds = %42, %40, %36, %33, %i64c.exit6
  %.0.i3 = phi i32 [ 47, %33 ], [ %37, %36 ], [ %41, %40 ], [ %43, %42 ], [ 46, %i64c.exit6 ]
  %44 = trunc i32 %.0.i3 to i8
  %45 = getelementptr inbounds i8* %s, i64 3
  store i8 %44, i8* %30, align 1, !tbaa !0
  %46 = and i32 %v, 63
  switch i32 %46, label %48 [
    i32 0, label %i64c.exit2
    i32 1, label %47
  ]

; <label>:47                                      ; preds = %i64c.exit4
  br label %i64c.exit2

; <label>:48                                      ; preds = %i64c.exit4
  %49 = icmp ult i32 %46, 12
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %48
  %51 = add nsw i32 %46, 46
  br label %i64c.exit2

; <label>:52                                      ; preds = %48
  %53 = icmp ult i32 %46, 38
  br i1 %53, label %54, label %56

; <label>:54                                      ; preds = %52
  %55 = add nsw i32 %46, 53
  br label %i64c.exit2

; <label>:56                                      ; preds = %52
  %57 = add nsw i32 %46, 59
  br label %i64c.exit2

i64c.exit2:                                       ; preds = %56, %54, %50, %47, %i64c.exit4
  %.0.i1 = phi i32 [ 47, %47 ], [ %51, %50 ], [ %55, %54 ], [ %57, %56 ], [ 46, %i64c.exit4 ]
  %58 = trunc i32 %.0.i1 to i8
  store i8 %58, i8* %45, align 1, !tbaa !0
  ret void
}

define <2 x float> @csinf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  %2 = fsub float -0.000000e+00, %1
  %3 = insertelement <2 x float> undef, float %2, i32 0
  %4 = shufflevector <2 x float> %3, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 2>
  %5 = tail call <2 x float> @csinhf(<2 x float> %4) nounwind optsize
  %6 = extractelement <2 x float> %5, i32 1
  %7 = extractelement <2 x float> %5, i32 0
  %8 = fsub float -0.000000e+00, %7
  %9 = insertelement <2 x float> undef, float %6, i32 0
  %10 = insertelement <2 x float> %9, float %8, i32 1
  ret <2 x float> %10
}

define <2 x float> @csinhf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = bitcast float %1 to i32
  %4 = bitcast float %2 to i32
  %5 = and i32 %3, 2147483647
  %6 = and i32 %4, 2147483647
  %7 = icmp ult i32 %5, 2139095040
  %8 = icmp ult i32 %6, 2139095040
  %or.cond = and i1 %7, %8
  br i1 %or.cond, label %9, label %60

; <label>:9                                       ; preds = %0
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %9
  %12 = tail call float @sinhf(float %1) nounwind optsize
  %13 = insertelement <2 x float> undef, float %12, i32 0
  %14 = shufflevector <2 x float> %13, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 3>
  br label %110

; <label>:15                                      ; preds = %9
  %16 = icmp ult i32 %5, 1091567616
  br i1 %16, label %17, label %26

; <label>:17                                      ; preds = %15
  %18 = tail call float @sinhf(float %1) nounwind optsize
  %19 = tail call float @cosf(float %2) nounwind optsize
  %20 = fmul float %18, %19
  %21 = tail call float @coshf(float %1) nounwind optsize
  %22 = tail call float @sinf(float %2) nounwind optsize
  %23 = fmul float %21, %22
  %24 = insertelement <2 x float> undef, float %20, i32 0
  %25 = insertelement <2 x float> %24, float %23, i32 1
  br label %110

; <label>:26                                      ; preds = %15
  %27 = icmp ult i32 %5, 1118925336
  br i1 %27, label %28, label %39

; <label>:28                                      ; preds = %26
  %29 = tail call float @fabsf(float %1) nounwind optsize
  %30 = tail call float @expf(float %29) nounwind optsize
  %31 = fmul float %30, 5.000000e-01
  %32 = tail call float @copysignf(float %31, float %1) nounwind optsize
  %33 = tail call float @cosf(float %2) nounwind optsize
  %34 = fmul float %32, %33
  %35 = tail call float @sinf(float %2) nounwind optsize
  %36 = fmul float %31, %35
  %37 = insertelement <2 x float> undef, float %34, i32 0
  %38 = insertelement <2 x float> %37, float %36, i32 1
  br label %110

; <label>:39                                      ; preds = %26
  %40 = icmp ult i32 %5, 1128313319
  br i1 %40, label %41, label %51

; <label>:41                                      ; preds = %39
  %42 = tail call float @fabsf(float %1) nounwind optsize
  %43 = insertelement <2 x float> undef, float %42, i32 0
  %44 = shufflevector <2 x float> %43, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 3>
  %45 = tail call <2 x float> @__ldexp_cexpf(<2 x float> %44, i32 -1) nounwind optsize
  %46 = extractelement <2 x float> %45, i32 0
  %47 = tail call float @copysignf(float 1.000000e+00, float %1) nounwind optsize
  %48 = fmul float %46, %47
  %49 = insertelement <2 x float> undef, float %48, i32 0
  %50 = shufflevector <2 x float> %49, <2 x float> %45, <2 x i32> <i32 0, i32 3>
  br label %110

; <label>:51                                      ; preds = %39
  %52 = fmul float %1, 0x47E0000000000000
  %53 = tail call float @cosf(float %2) nounwind optsize
  %54 = fmul float %52, %53
  %55 = fmul float %52, %52
  %56 = tail call float @sinf(float %2) nounwind optsize
  %57 = fmul float %55, %56
  %58 = insertelement <2 x float> undef, float %54, i32 0
  %59 = insertelement <2 x float> %58, float %57, i32 1
  br label %110

; <label>:60                                      ; preds = %0
  %61 = icmp eq i32 %5, 0
  %62 = icmp ugt i32 %6, 2139095039
  %or.cond63 = and i1 %61, %62
  br i1 %or.cond63, label %63, label %69

; <label>:63                                      ; preds = %60
  %64 = fsub float %2, %2
  %65 = fmul float %1, %64
  %66 = tail call float @copysignf(float 0.000000e+00, float %65) nounwind optsize
  %67 = insertelement <2 x float> undef, float %66, i32 0
  %68 = insertelement <2 x float> %67, float %64, i32 1
  br label %110

; <label>:69                                      ; preds = %60
  %70 = icmp eq i32 %6, 0
  %71 = icmp ugt i32 %5, 2139095039
  %or.cond64 = and i1 %70, %71
  br i1 %or.cond64, label %72, label %79

; <label>:72                                      ; preds = %69
  %73 = and i32 %3, 8388607
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %110, label %75

; <label>:75                                      ; preds = %72
  %76 = tail call float @copysignf(float 0.000000e+00, float %2) nounwind optsize
  %77 = insertelement <2 x float> undef, float %1, i32 0
  %78 = insertelement <2 x float> %77, float %76, i32 1
  br label %110

; <label>:79                                      ; preds = %69
  %or.cond65 = and i1 %7, %62
  br i1 %or.cond65, label %80, label %85

; <label>:80                                      ; preds = %79
  %81 = fsub float %2, %2
  %82 = fmul float %1, %81
  %83 = insertelement <2 x float> undef, float %81, i32 0
  %84 = insertelement <2 x float> %83, float %82, i32 1
  br label %110

; <label>:85                                      ; preds = %79
  %86 = and i32 %3, 8388607
  %87 = icmp eq i32 %86, 0
  %or.cond67 = and i1 %71, %87
  br i1 %or.cond67, label %88, label %102

; <label>:88                                      ; preds = %85
  br i1 %62, label %89, label %95

; <label>:89                                      ; preds = %88
  %90 = fmul float %1, %1
  %91 = fsub float %2, %2
  %92 = fmul float %1, %91
  %93 = insertelement <2 x float> undef, float %90, i32 0
  %94 = insertelement <2 x float> %93, float %92, i32 1
  br label %110

; <label>:95                                      ; preds = %88
  %96 = tail call float @cosf(float %2) nounwind optsize
  %97 = fmul float %1, %96
  %98 = tail call float @sinf(float %2) nounwind optsize
  %99 = fmul float %98, 0x7FF0000000000000
  %100 = insertelement <2 x float> undef, float %97, i32 0
  %101 = insertelement <2 x float> %100, float %99, i32 1
  br label %110

; <label>:102                                     ; preds = %85
  %103 = fmul float %1, %1
  %104 = fsub float %2, %2
  %105 = fmul float %103, %104
  %106 = fadd float %1, %1
  %107 = fmul float %106, %104
  %108 = insertelement <2 x float> undef, float %105, i32 0
  %109 = insertelement <2 x float> %108, float %107, i32 1
  br label %110

; <label>:110                                     ; preds = %102, %95, %89, %80, %75, %72, %63, %51, %41, %28, %17, %11
  %.0 = phi <2 x float> [ %14, %11 ], [ %25, %17 ], [ %38, %28 ], [ %50, %41 ], [ %59, %51 ], [ %68, %63 ], [ %78, %75 ], [ %84, %80 ], [ %94, %89 ], [ %101, %95 ], [ %109, %102 ], [ %z.coerce, %72 ]
  ret <2 x float> %.0
}

define { x86_fp80, x86_fp80 } @csinhl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fptrunc x86_fp80 %2 to double
  %6 = fptrunc x86_fp80 %4 to double
  %7 = tail call { double, double } @csinh(double %5, double %6) nounwind optsize
  %8 = extractvalue { double, double } %7, 0
  %9 = extractvalue { double, double } %7, 1
  %10 = fpext double %8 to x86_fp80
  %11 = fpext double %9 to x86_fp80
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %10, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %11, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @csinh(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = bitcast double %z.coerce0 to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %z.coerce1 to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = and i32 %3, 2147483647
  %10 = and i32 %7, 2147483647
  %11 = icmp ult i32 %9, 2146435072
  %12 = icmp ult i32 %10, 2146435072
  %or.cond = and i1 %11, %12
  br i1 %or.cond, label %13, label %54

; <label>:13                                      ; preds = %0
  %14 = or i32 %10, %8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %13
  %17 = tail call double @sinh(double %z.coerce0) nounwind optsize
  br label %97

; <label>:18                                      ; preds = %13
  %19 = icmp ult i32 %9, 1077280768
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %18
  %21 = tail call double @sinh(double %z.coerce0) nounwind optsize
  %22 = tail call double @cos(double %z.coerce1) nounwind optsize
  %23 = fmul double %21, %22
  %24 = tail call double @cosh(double %z.coerce0) nounwind optsize
  %25 = tail call double @sin(double %z.coerce1) nounwind optsize
  %26 = fmul double %24, %25
  br label %97

; <label>:27                                      ; preds = %18
  %28 = icmp ult i32 %9, 1082535490
  br i1 %28, label %29, label %38

; <label>:29                                      ; preds = %27
  %30 = tail call double @fabs(double %z.coerce0) nounwind optsize
  %31 = tail call double @exp(double %30) nounwind optsize
  %32 = fmul double %31, 5.000000e-01
  %33 = tail call double @copysign(double %32, double %z.coerce0) nounwind optsize
  %34 = tail call double @cos(double %z.coerce1) nounwind optsize
  %35 = fmul double %33, %34
  %36 = tail call double @sin(double %z.coerce1) nounwind optsize
  %37 = fmul double %32, %36
  br label %97

; <label>:38                                      ; preds = %27
  %39 = icmp ult i32 %9, 1083620266
  br i1 %39, label %40, label %47

; <label>:40                                      ; preds = %38
  %41 = tail call double @fabs(double %z.coerce0) nounwind optsize
  %42 = tail call { double, double } @__ldexp_cexp(double %41, double %z.coerce1, i32 -1) nounwind optsize
  %43 = extractvalue { double, double } %42, 0
  %44 = extractvalue { double, double } %42, 1
  %45 = tail call double @copysign(double 1.000000e+00, double %z.coerce0) nounwind optsize
  %46 = fmul double %43, %45
  br label %97

; <label>:47                                      ; preds = %38
  %48 = fmul double %z.coerce0, 0x7FE0000000000000
  %49 = tail call double @cos(double %z.coerce1) nounwind optsize
  %50 = fmul double %48, %49
  %51 = fmul double %48, %48
  %52 = tail call double @sin(double %z.coerce1) nounwind optsize
  %53 = fmul double %51, %52
  br label %97

; <label>:54                                      ; preds = %0
  %55 = or i32 %9, %4
  %56 = icmp eq i32 %55, 0
  %57 = icmp ugt i32 %10, 2146435071
  %or.cond32 = and i1 %56, %57
  br i1 %or.cond32, label %58, label %62

; <label>:58                                      ; preds = %54
  %59 = fsub double %z.coerce1, %z.coerce1
  %60 = fmul double %59, %z.coerce0
  %61 = tail call double @copysign(double 0.000000e+00, double %60) nounwind optsize
  br label %97

; <label>:62                                      ; preds = %54
  %63 = or i32 %10, %8
  %64 = icmp eq i32 %63, 0
  %65 = icmp ugt i32 %9, 2146435071
  %or.cond33 = and i1 %64, %65
  br i1 %or.cond33, label %66, label %72

; <label>:66                                      ; preds = %62
  %67 = and i32 %3, 1048575
  %68 = or i32 %67, %4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %97, label %70

; <label>:70                                      ; preds = %66
  %71 = tail call double @copysign(double 0.000000e+00, double %z.coerce1) nounwind optsize
  br label %97

; <label>:72                                      ; preds = %62
  %or.cond34 = and i1 %11, %57
  br i1 %or.cond34, label %73, label %76

; <label>:73                                      ; preds = %72
  %74 = fsub double %z.coerce1, %z.coerce1
  %75 = fmul double %74, %z.coerce0
  br label %97

; <label>:76                                      ; preds = %72
  br i1 %65, label %77, label %91

; <label>:77                                      ; preds = %76
  %78 = and i32 %3, 1048575
  %79 = or i32 %78, %4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %91

; <label>:81                                      ; preds = %77
  br i1 %57, label %82, label %86

; <label>:82                                      ; preds = %81
  %83 = fmul double %z.coerce0, %z.coerce0
  %84 = fsub double %z.coerce1, %z.coerce1
  %85 = fmul double %84, %z.coerce0
  br label %97

; <label>:86                                      ; preds = %81
  %87 = tail call double @cos(double %z.coerce1) nounwind optsize
  %88 = fmul double %87, %z.coerce0
  %89 = tail call double @sin(double %z.coerce1) nounwind optsize
  %90 = fmul double %89, 0x7FF0000000000000
  br label %97

; <label>:91                                      ; preds = %77, %76
  %92 = fmul double %z.coerce0, %z.coerce0
  %93 = fsub double %z.coerce1, %z.coerce1
  %94 = fmul double %92, %93
  %95 = fadd double %z.coerce0, %z.coerce0
  %96 = fmul double %95, %93
  br label %97

; <label>:97                                      ; preds = %91, %86, %82, %73, %70, %66, %58, %47, %40, %29, %20, %16
  %.028.0 = phi double [ %17, %16 ], [ %23, %20 ], [ %35, %29 ], [ %46, %40 ], [ %50, %47 ], [ %61, %58 ], [ %z.coerce0, %70 ], [ %74, %73 ], [ %83, %82 ], [ %88, %86 ], [ %94, %91 ], [ %z.coerce0, %66 ]
  %.129.0 = phi double [ %z.coerce1, %16 ], [ %26, %20 ], [ %37, %29 ], [ %44, %40 ], [ %53, %47 ], [ %59, %58 ], [ %71, %70 ], [ %75, %73 ], [ %85, %82 ], [ %90, %86 ], [ %96, %91 ], [ %z.coerce1, %66 ]
  %insert = insertvalue { double, double } undef, double %.028.0, 0
  %insert31 = insertvalue { double, double } %insert, double %.129.0, 1
  ret { double, double } %insert31
}

define { x86_fp80, x86_fp80 } @csinl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fsub x86_fp80 0xK80000000000000000000, %4
  %6 = load x86_fp80* %2, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %8 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %5, x86_fp80* %7, align 16
  store x86_fp80 %6, x86_fp80* %8, align 16
  %9 = call { x86_fp80, x86_fp80 } @csinhl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %10 = extractvalue { x86_fp80, x86_fp80 } %9, 0
  %11 = extractvalue { x86_fp80, x86_fp80 } %9, 1
  %12 = fsub x86_fp80 0xK80000000000000000000, %10
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %11, 0
  %insert11 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %12, 1
  ret { x86_fp80, x86_fp80 } %insert11
}

define { double, double } @csin(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fsub double -0.000000e+00, %z.coerce1
  %2 = tail call { double, double } @csinh(double %1, double %z.coerce0) nounwind optsize
  %3 = extractvalue { double, double } %2, 0
  %4 = extractvalue { double, double } %2, 1
  %5 = fsub double -0.000000e+00, %3
  %insert = insertvalue { double, double } undef, double %4, 0
  %insert8 = insertvalue { double, double } %insert, double %5, 1
  ret { double, double } %insert8
}

define <2 x float> @csqrtf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = fcmp oeq float %1, 0.000000e+00
  %4 = fcmp oeq float %2, 0.000000e+00
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = shufflevector <2 x float> <float 0.000000e+00, float undef>, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 3>
  br label %70

; <label>:8                                       ; preds = %0
  %9 = bitcast float %2 to i32
  %10 = and i32 %9, 2147483647
  %11 = icmp eq i32 %10, 2139095040
  br i1 %11, label %12, label %14

; <label>:12                                      ; preds = %8
  %13 = shufflevector <2 x float> <float 0x7FF0000000000000, float undef>, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 3>
  br label %70

; <label>:14                                      ; preds = %8
  %15 = bitcast float %1 to i32
  %16 = and i32 %15, 2147483647
  %17 = icmp ugt i32 %16, 2139095040
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %14
  %19 = fsub float %2, %2
  %20 = fdiv float %19, %19
  %21 = insertelement <2 x float> undef, float %1, i32 0
  %22 = insertelement <2 x float> %21, float %20, i32 1
  br label %70

; <label>:23                                      ; preds = %14
  %24 = icmp eq i32 %16, 2139095040
  br i1 %24, label %25, label %37

; <label>:25                                      ; preds = %23
  %26 = icmp slt i32 %15, 0
  %27 = fsub float %2, %2
  br i1 %26, label %28, label %33

; <label>:28                                      ; preds = %25
  %29 = tail call float @fabsf(float %27) nounwind optsize
  %30 = tail call float @copysignf(float %1, float %2) nounwind optsize
  %31 = insertelement <2 x float> undef, float %29, i32 0
  %32 = insertelement <2 x float> %31, float %30, i32 1
  br label %70

; <label>:33                                      ; preds = %25
  %34 = tail call float @copysignf(float %27, float %2) nounwind optsize
  %35 = insertelement <2 x float> undef, float %1, i32 0
  %36 = insertelement <2 x float> %35, float %34, i32 1
  br label %70

; <label>:37                                      ; preds = %23
  %38 = fcmp ult float %1, 0.000000e+00
  br i1 %38, label %52, label %39

; <label>:39                                      ; preds = %37
  %40 = fpext float %1 to double
  %41 = fpext float %2 to double
  %42 = tail call double @hypot(double %40, double %41) nounwind optsize
  %43 = fadd double %40, %42
  %44 = fmul double %43, 5.000000e-01
  %45 = tail call double @sqrt(double %44) nounwind optsize
  %46 = fptrunc double %45 to float
  %47 = fmul double %45, 2.000000e+00
  %48 = fdiv double %41, %47
  %49 = fptrunc double %48 to float
  %50 = insertelement <2 x float> undef, float %46, i32 0
  %51 = insertelement <2 x float> %50, float %49, i32 1
  br label %70

; <label>:52                                      ; preds = %37
  %53 = fsub float -0.000000e+00, %1
  %54 = fpext float %53 to double
  %55 = fpext float %1 to double
  %56 = fpext float %2 to double
  %57 = tail call double @hypot(double %55, double %56) nounwind optsize
  %58 = fadd double %54, %57
  %59 = fmul double %58, 5.000000e-01
  %60 = tail call double @sqrt(double %59) nounwind optsize
  %61 = tail call float @fabsf(float %2) nounwind optsize
  %62 = fpext float %61 to double
  %63 = fmul double %60, 2.000000e+00
  %64 = fdiv double %62, %63
  %65 = fptrunc double %64 to float
  %66 = fptrunc double %60 to float
  %67 = tail call float @copysignf(float %66, float %2) nounwind optsize
  %68 = insertelement <2 x float> undef, float %65, i32 0
  %69 = insertelement <2 x float> %68, float %67, i32 1
  br label %70

; <label>:70                                      ; preds = %52, %39, %33, %28, %18, %12, %6
  %.030 = phi <2 x float> [ %7, %6 ], [ %13, %12 ], [ %22, %18 ], [ %32, %28 ], [ %36, %33 ], [ %51, %39 ], [ %69, %52 ]
  ret <2 x float> %.030
}

define { x86_fp80, x86_fp80 } @csqrtl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fptrunc x86_fp80 %2 to double
  %6 = fptrunc x86_fp80 %4 to double
  %7 = tail call { double, double } @csqrt(double %5, double %6) nounwind optsize
  %8 = extractvalue { double, double } %7, 0
  %9 = extractvalue { double, double } %7, 1
  %10 = fpext double %8 to x86_fp80
  %11 = fpext double %9 to x86_fp80
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %10, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %11, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @csqrt(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fcmp oeq double %z.coerce0, 0.000000e+00
  %2 = fcmp oeq double %z.coerce1, 0.000000e+00
  %3 = and i1 %1, %2
  br i1 %3, label %60, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double %z.coerce1 to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp eq i64 %6, 9218868437227405312
  br i1 %7, label %60, label %8

; <label>:8                                       ; preds = %4
  %9 = bitcast double %z.coerce0 to i64
  %10 = and i64 %9, 9223372036854775807
  %11 = icmp ugt i64 %10, 9218868437227405312
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %8
  %13 = fsub double %z.coerce1, %z.coerce1
  %14 = fdiv double %13, %13
  br label %60

; <label>:15                                      ; preds = %8
  %16 = icmp eq i64 %10, 9218868437227405312
  br i1 %16, label %17, label %25

; <label>:17                                      ; preds = %15
  %18 = icmp slt i64 %9, 0
  %19 = fsub double %z.coerce1, %z.coerce1
  br i1 %18, label %20, label %23

; <label>:20                                      ; preds = %17
  %21 = tail call double @fabs(double %19) nounwind optsize
  %22 = tail call double @copysign(double %z.coerce0, double %z.coerce1) nounwind optsize
  br label %60

; <label>:23                                      ; preds = %17
  %24 = tail call double @copysign(double %19, double %z.coerce1) nounwind optsize
  br label %60

; <label>:25                                      ; preds = %15
  %26 = tail call double @fabs(double %z.coerce0) nounwind optsize
  %27 = fcmp ult double %26, 0x7FDA827999FCEF32
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %25
  %29 = tail call double @fabs(double %z.coerce1) nounwind optsize
  %30 = fcmp ult double %29, 0x7FDA827999FCEF32
  br i1 %30, label %34, label %31

; <label>:31                                      ; preds = %28, %25
  %32 = fmul double %z.coerce0, 2.500000e-01
  %33 = fmul double %z.coerce1, 2.500000e-01
  br label %34

; <label>:34                                      ; preds = %31, %28
  %scale.0 = phi i32 [ 1, %31 ], [ 0, %28 ]
  %b.0 = phi double [ %33, %31 ], [ %z.coerce1, %28 ]
  %a.0 = phi double [ %32, %31 ], [ %z.coerce0, %28 ]
  %35 = fcmp ult double %a.0, 0.000000e+00
  %36 = tail call double @hypot(double %a.0, double %b.0) nounwind optsize
  br i1 %35, label %43, label %37

; <label>:37                                      ; preds = %34
  %38 = fadd double %a.0, %36
  %39 = fmul double %38, 5.000000e-01
  %40 = tail call double @sqrt(double %39) nounwind optsize
  %41 = fmul double %40, 2.000000e+00
  %42 = fdiv double %b.0, %41
  br label %51

; <label>:43                                      ; preds = %34
  %44 = fsub double %36, %a.0
  %45 = fmul double %44, 5.000000e-01
  %46 = tail call double @sqrt(double %45) nounwind optsize
  %47 = tail call double @fabs(double %b.0) nounwind optsize
  %48 = fmul double %46, 2.000000e+00
  %49 = fdiv double %47, %48
  %50 = tail call double @copysign(double %46, double %b.0) nounwind optsize
  br label %51

; <label>:51                                      ; preds = %43, %37
  %result.0.0 = phi double [ %40, %37 ], [ %49, %43 ]
  %result.1.0 = phi double [ %42, %37 ], [ %50, %43 ]
  %52 = icmp eq i32 %scale.0, 0
  br i1 %52, label %60, label %53

; <label>:53                                      ; preds = %51
  %54 = fmul double %result.0.0, 2.000000e+00
  %55 = fmul double %result.1.0, 0.000000e+00
  %56 = fsub double %54, %55
  %57 = fmul double %result.1.0, 2.000000e+00
  %58 = fmul double %result.0.0, 0.000000e+00
  %59 = fadd double %57, %58
  br label %60

; <label>:60                                      ; preds = %53, %51, %23, %20, %12, %4, %0
  %.017.0 = phi double [ %z.coerce0, %12 ], [ %21, %20 ], [ %z.coerce0, %23 ], [ 0.000000e+00, %0 ], [ 0x7FF0000000000000, %4 ], [ %56, %53 ], [ %result.0.0, %51 ]
  %.1.0 = phi double [ %14, %12 ], [ %22, %20 ], [ %24, %23 ], [ %z.coerce1, %0 ], [ %z.coerce1, %4 ], [ %59, %53 ], [ %result.1.0, %51 ]
  %insert = insertvalue { double, double } undef, double %.017.0, 0
  %insert19 = insertvalue { double, double } %insert, double %.1.0, 1
  ret { double, double } %insert19
}

define <2 x float> @ctanf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 1
  %2 = fsub float -0.000000e+00, %1
  %3 = insertelement <2 x float> undef, float %2, i32 0
  %4 = shufflevector <2 x float> %3, <2 x float> %z.coerce, <2 x i32> <i32 0, i32 2>
  %5 = tail call <2 x float> @ctanhf(<2 x float> %4) nounwind optsize
  %6 = extractelement <2 x float> %5, i32 1
  %7 = extractelement <2 x float> %5, i32 0
  %8 = fsub float -0.000000e+00, %7
  %9 = insertelement <2 x float> undef, float %6, i32 0
  %10 = insertelement <2 x float> %9, float %8, i32 1
  ret <2 x float> %10
}

define <2 x float> @ctanhf(<2 x float> %z.coerce) nounwind uwtable optsize {
  %1 = extractelement <2 x float> %z.coerce, i32 0
  %2 = extractelement <2 x float> %z.coerce, i32 1
  %3 = bitcast float %1 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2139095039
  br i1 %5, label %6, label %32

; <label>:6                                       ; preds = %0
  %7 = and i32 %3, 8388607
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %17, label %9

; <label>:9                                       ; preds = %6
  %10 = fcmp oeq float %2, 0.000000e+00
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %9
  %12 = fmul float %1, %2
  br label %13

; <label>:13                                      ; preds = %11, %9
  %14 = phi float [ %12, %11 ], [ %2, %9 ]
  %15 = insertelement <2 x float> undef, float %1, i32 0
  %16 = insertelement <2 x float> %15, float %14, i32 1
  br label %72

; <label>:17                                      ; preds = %6
  %18 = add i32 %3, -1073741824
  %19 = bitcast float %2 to i32
  %20 = and i32 %19, 2147483647
  %21 = icmp eq i32 %20, 2139095040
  br i1 %21, label %26, label %22

; <label>:22                                      ; preds = %17
  %23 = tail call float @sinf(float %2) nounwind optsize
  %24 = tail call float @cosf(float %2) nounwind optsize
  %25 = fmul float %23, %24
  br label %26

; <label>:26                                      ; preds = %22, %17
  %27 = phi float [ %25, %22 ], [ %2, %17 ]
  %28 = tail call float @copysignf(float 0.000000e+00, float %27) nounwind optsize
  %29 = bitcast i32 %18 to float
  %30 = insertelement <2 x float> undef, float %29, i32 0
  %31 = insertelement <2 x float> %30, float %28, i32 1
  br label %72

; <label>:32                                      ; preds = %0
  %33 = bitcast float %2 to i32
  %34 = and i32 %33, 2139095040
  %35 = icmp ult i32 %34, 2139095040
  br i1 %35, label %40, label %36

; <label>:36                                      ; preds = %32
  %37 = fsub float %2, %2
  %38 = insertelement <2 x float> undef, float %37, i32 0
  %39 = insertelement <2 x float> %38, float %37, i32 1
  br label %72

; <label>:40                                      ; preds = %32
  %41 = icmp ugt i32 %4, 1093664767
  br i1 %41, label %42, label %55

; <label>:42                                      ; preds = %40
  %43 = tail call float @fabsf(float %1) nounwind optsize
  %44 = fsub float -0.000000e+00, %43
  %45 = tail call float @expf(float %44) nounwind optsize
  %46 = tail call float @copysignf(float 1.000000e+00, float %1) nounwind optsize
  %47 = tail call float @sinf(float %2) nounwind optsize
  %48 = fmul float %47, 4.000000e+00
  %49 = tail call float @cosf(float %2) nounwind optsize
  %50 = fmul float %48, %49
  %51 = fmul float %50, %45
  %52 = fmul float %51, %45
  %53 = insertelement <2 x float> undef, float %46, i32 0
  %54 = insertelement <2 x float> %53, float %52, i32 1
  br label %72

; <label>:55                                      ; preds = %40
  %56 = tail call float @tanf(float %2) nounwind optsize
  %57 = fmul float %56, %56
  %58 = fadd float %57, 1.000000e+00
  %59 = tail call float @sinhf(float %1) nounwind optsize
  %60 = fmul float %59, %59
  %61 = fadd float %60, 1.000000e+00
  %62 = tail call float @sqrtf(float %61) nounwind optsize
  %63 = fmul float %58, %59
  %64 = fmul float %63, %59
  %65 = fadd float %64, 1.000000e+00
  %66 = fmul float %58, %62
  %67 = fmul float %66, %59
  %68 = fdiv float %67, %65
  %69 = fdiv float %56, %65
  %70 = insertelement <2 x float> undef, float %68, i32 0
  %71 = insertelement <2 x float> %70, float %69, i32 1
  br label %72

; <label>:72                                      ; preds = %55, %42, %36, %26, %13
  %.021 = phi <2 x float> [ %16, %13 ], [ %31, %26 ], [ %54, %42 ], [ %71, %55 ], [ %39, %36 ]
  ret <2 x float> %.021
}

define { x86_fp80, x86_fp80 } @ctanhl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %2 = load x86_fp80* %1, align 16
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fptrunc x86_fp80 %2 to double
  %6 = fptrunc x86_fp80 %4 to double
  %7 = tail call { double, double } @ctanh(double %5, double %6) nounwind optsize
  %8 = extractvalue { double, double } %7, 0
  %9 = extractvalue { double, double } %7, 1
  %10 = fpext double %8 to x86_fp80
  %11 = fpext double %9 to x86_fp80
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %10, 0
  %insert4 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %11, 1
  ret { x86_fp80, x86_fp80 } %insert4
}

define { double, double } @ctanh(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = bitcast double %z.coerce0 to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %32

; <label>:6                                       ; preds = %0
  %7 = trunc i64 %1 to i32
  %8 = and i32 %3, 1048575
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

; <label>:11                                      ; preds = %6
  %12 = fcmp oeq double %z.coerce1, 0.000000e+00
  br i1 %12, label %66, label %13

; <label>:13                                      ; preds = %11
  %14 = fmul double %z.coerce0, %z.coerce1
  br label %66

; <label>:15                                      ; preds = %6
  %16 = and i64 %1, 4294967295
  %17 = add i32 %3, -1073741824
  %18 = zext i32 %17 to i64
  %19 = shl nuw i64 %18, 32
  %20 = or i64 %19, %16
  %21 = bitcast double %z.coerce1 to i64
  %22 = and i64 %21, 9223372036854775807
  %23 = icmp eq i64 %22, 9218868437227405312
  br i1 %23, label %28, label %24

; <label>:24                                      ; preds = %15
  %25 = tail call double @sin(double %z.coerce1) nounwind optsize
  %26 = tail call double @cos(double %z.coerce1) nounwind optsize
  %27 = fmul double %25, %26
  br label %28

; <label>:28                                      ; preds = %24, %15
  %29 = phi double [ %27, %24 ], [ %z.coerce1, %15 ]
  %30 = tail call double @copysign(double 0.000000e+00, double %29) nounwind optsize
  %31 = bitcast i64 %20 to double
  br label %66

; <label>:32                                      ; preds = %0
  %33 = bitcast double %z.coerce1 to i64
  %34 = and i64 %33, 9218868437227405312
  %35 = icmp ult i64 %34, 9218868437227405312
  br i1 %35, label %38, label %36

; <label>:36                                      ; preds = %32
  %37 = fsub double %z.coerce1, %z.coerce1
  br label %66

; <label>:38                                      ; preds = %32
  %39 = icmp ugt i32 %4, 1077280767
  br i1 %39, label %40, label %51

; <label>:40                                      ; preds = %38
  %41 = tail call double @fabs(double %z.coerce0) nounwind optsize
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @exp(double %42) nounwind optsize
  %44 = tail call double @copysign(double 1.000000e+00, double %z.coerce0) nounwind optsize
  %45 = tail call double @sin(double %z.coerce1) nounwind optsize
  %46 = fmul double %45, 4.000000e+00
  %47 = tail call double @cos(double %z.coerce1) nounwind optsize
  %48 = fmul double %46, %47
  %49 = fmul double %48, %43
  %50 = fmul double %49, %43
  br label %66

; <label>:51                                      ; preds = %38
  %52 = tail call double @tan(double %z.coerce1) nounwind optsize
  %53 = fmul double %52, %52
  %54 = fadd double %53, 1.000000e+00
  %55 = tail call double @sinh(double %z.coerce0) nounwind optsize
  %56 = fmul double %55, %55
  %57 = fadd double %56, 1.000000e+00
  %58 = tail call double @sqrt(double %57) nounwind optsize
  %59 = fmul double %54, %55
  %60 = fmul double %59, %55
  %61 = fadd double %60, 1.000000e+00
  %62 = fmul double %54, %58
  %63 = fmul double %62, %55
  %64 = fdiv double %63, %61
  %65 = fdiv double %52, %61
  br label %66

; <label>:66                                      ; preds = %51, %40, %36, %28, %13, %11
  %.015.0 = phi double [ %31, %28 ], [ %44, %40 ], [ %64, %51 ], [ %37, %36 ], [ %z.coerce0, %11 ], [ %z.coerce0, %13 ]
  %.1.0 = phi double [ %30, %28 ], [ %50, %40 ], [ %65, %51 ], [ %37, %36 ], [ %z.coerce1, %11 ], [ %14, %13 ]
  %insert = insertvalue { double, double } undef, double %.015.0, 0
  %insert17 = insertvalue { double, double } %insert, double %.1.0, 1
  ret { double, double } %insert17
}

define { x86_fp80, x86_fp80 } @ctanl({ x86_fp80, x86_fp80 }* nocapture byval align 16 %z) nounwind uwtable optsize {
  %1 = alloca { x86_fp80, x86_fp80 }, align 16
  %2 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 0
  %3 = getelementptr inbounds { x86_fp80, x86_fp80 }* %z, i64 0, i32 1
  %4 = load x86_fp80* %3, align 16
  %5 = fsub x86_fp80 0xK80000000000000000000, %4
  %6 = load x86_fp80* %2, align 16
  %7 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 0
  %8 = getelementptr inbounds { x86_fp80, x86_fp80 }* %1, i64 0, i32 1
  store x86_fp80 %5, x86_fp80* %7, align 16
  store x86_fp80 %6, x86_fp80* %8, align 16
  %9 = call { x86_fp80, x86_fp80 } @ctanhl({ x86_fp80, x86_fp80 }* byval align 16 %1) nounwind optsize
  %10 = extractvalue { x86_fp80, x86_fp80 } %9, 0
  %11 = extractvalue { x86_fp80, x86_fp80 } %9, 1
  %12 = fsub x86_fp80 0xK80000000000000000000, %10
  %insert = insertvalue { x86_fp80, x86_fp80 } undef, x86_fp80 %11, 0
  %insert11 = insertvalue { x86_fp80, x86_fp80 } %insert, x86_fp80 %12, 1
  ret { x86_fp80, x86_fp80 } %insert11
}

define { double, double } @ctan(double %z.coerce0, double %z.coerce1) nounwind uwtable optsize {
  %1 = fsub double -0.000000e+00, %z.coerce1
  %2 = tail call { double, double } @ctanh(double %1, double %z.coerce0) nounwind optsize
  %3 = extractvalue { double, double } %2, 0
  %4 = extractvalue { double, double } %2, 1
  %5 = fsub double -0.000000e+00, %3
  %insert = insertvalue { double, double } undef, double %4, 0
  %insert8 = insertvalue { double, double } %insert, double %5, 1
  ret { double, double } %insert8
}

define i8* @ctermid(i8* %s) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %2, label %7

; <label>:2                                       ; preds = %0
  %3 = load i8** @ctermid.s2, align 8, !tbaa !7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %2
  %6 = tail call i8* @malloc(i64 20) optsize
  store i8* %6, i8** @ctermid.s2, align 8, !tbaa !7
  br label %7

; <label>:7                                       ; preds = %5, %2, %0
  %.01 = phi i8* [ %s, %0 ], [ %3, %2 ], [ %6, %5 ]
  %8 = tail call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([9 x i8]* @.str84, i64 0, i64 0), i32 257) nounwind optsize
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %7
  %11 = tail call i8* @strcpy(i8* %.01, i8* getelementptr inbounds ([1 x i8]* @.str185, i64 0, i64 0)) nounwind optsize
  br label %19

; <label>:12                                      ; preds = %7
  %13 = tail call i32 @ttyname_r(i32 %8, i8* %.01, i64 20) nounwind optsize
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %12
  %16 = tail call i8* @strcpy(i8* %.01, i8* getelementptr inbounds ([1 x i8]* @.str185, i64 0, i64 0)) nounwind optsize
  br label %17

; <label>:17                                      ; preds = %15, %12
  %18 = tail call i32 @close(i32 %8) nounwind optsize
  br label %19

; <label>:19                                      ; preds = %17, %10
  %.0 = phi i8* [ %11, %10 ], [ %.01, %17 ]
  ret i8* %.0
}

define i8* @ctime(i64* %t) nounwind uwtable optsize {
  %1 = tail call %struct.tm* @localtime(i64* %t) nounwind optsize
  %2 = tail call i8* @asctime(%struct.tm* %1) nounwind optsize
  ret i8* %2
}

define i8* @ctime_r(i64* %t, i8* %buf) nounwind uwtable optsize {
  %tm = alloca %struct.tm, align 8
  %1 = call %struct.tm* @localtime_r(i64* %t, %struct.tm* %tm) nounwind optsize
  %2 = call i8* @asctime_r(%struct.tm* %tm, i8* %buf) nounwind optsize
  ret i8* %2
}

define i64 @__ctype_get_mb_cur_max() nounwind uwtable readnone optsize {
  ret i64 4
}

define i8* @cuserid(i8* %buf) nounwind uwtable optsize {
  %pw = alloca %struct.passwd, align 8
  %ppw = alloca %struct.passwd*, align 8
  %pwb = alloca [256 x i64], align 16
  %1 = call i32 @geteuid() nounwind optsize
  %2 = bitcast [256 x i64]* %pwb to i8*
  %3 = call i32 @getpwuid_r(i32 %1, %struct.passwd* %pw, i8* %2, i64 2048, %struct.passwd** %ppw) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 0
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %buf, i64 20, i8* getelementptr inbounds ([3 x i8]* @.str86, i64 0, i64 0), i8* %7) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %5, %0
  %.0 = phi i8* [ %buf, %5 ], [ null, %0 ]
  ret i8* %.0
}

define i32 @daemon(i32 %nochdir, i32 %noclose) nounwind uwtable optsize {
  %1 = icmp eq i32 %nochdir, 0
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = tail call i32 @chdir(i8* getelementptr inbounds ([2 x i8]* @.str87, i64 0, i64 0)) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %36

; <label>:5                                       ; preds = %2, %0
  %6 = icmp eq i32 %noclose, 0
  br i1 %6, label %7, label %26

; <label>:7                                       ; preds = %5
  %8 = tail call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([10 x i8]* @.str188, i64 0, i64 0), i32 2) nounwind optsize
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %36, label %10

; <label>:10                                      ; preds = %7
  %11 = tail call i32 @dup2(i32 %8, i32 0) nounwind optsize
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %19, label %13

; <label>:13                                      ; preds = %10
  %14 = tail call i32 @dup2(i32 %8, i32 1) nounwind optsize
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %19, label %16

; <label>:16                                      ; preds = %13
  %17 = tail call i32 @dup2(i32 %8, i32 2) nounwind optsize
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %16, %13, %10
  br label %20

; <label>:20                                      ; preds = %19, %16
  %failed.0 = phi i32 [ 1, %19 ], [ 0, %16 ]
  %21 = icmp sgt i32 %8, 2
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %20
  %23 = tail call i32 @close(i32 %8) nounwind optsize
  br label %24

; <label>:24                                      ; preds = %22, %20
  %25 = icmp eq i32 %failed.0, 0
  br i1 %25, label %26, label %36

; <label>:26                                      ; preds = %24, %5
  %27 = tail call i32 @fork() nounwind optsize
  switch i32 %27, label %28 [
    i32 0, label %29
    i32 -1, label %36
  ]

; <label>:28                                      ; preds = %26
  tail call void @_exit(i32 0) nounwind optsize
  br label %29

; <label>:29                                      ; preds = %28, %26
  %30 = tail call i32 @setsid() nounwind optsize
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %36, label %32

; <label>:32                                      ; preds = %29
  %33 = tail call i32 @fork() nounwind optsize
  switch i32 %33, label %34 [
    i32 0, label %35
    i32 -1, label %36
  ]

; <label>:34                                      ; preds = %32
  tail call void @_exit(i32 0) nounwind optsize
  br label %35

; <label>:35                                      ; preds = %34, %32
  br label %36

; <label>:36                                      ; preds = %35, %32, %29, %26, %24, %7, %2
  %.0 = phi i32 [ 0, %35 ], [ -1, %2 ], [ -1, %7 ], [ -1, %24 ], [ -1, %26 ], [ -1, %29 ], [ -1, %32 ]
  ret i32 %.0
}

declare i32 @fork() optsize

define double @difftime(i64 %t1, i64 %t0) nounwind uwtable readnone optsize {
  %1 = sub nsw i64 %t1, %t0
  %2 = sitofp i64 %1 to double
  ret double %2
}

define i32 @dirfd(%struct.__DIR_s.36* nocapture %d) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__DIR_s.36* %d, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !6
  ret i32 %2
}

define i8* @dirname(i8* %s) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %32, label %2

; <label>:2                                       ; preds = %0
  %3 = load i8* %s, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %32, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i8* @strchr(i8* %s, i32 47) nounwind optsize
  %7 = icmp eq i8* %6, null
  br i1 %7, label %32, label %8

; <label>:8                                       ; preds = %5
  %9 = tail call i64 @strlen(i8* %s) nounwind optsize
  br label %10

; <label>:10                                      ; preds = %12, %8
  %i.0.in = phi i64 [ %9, %8 ], [ %i.0, %12 ]
  %i.0 = add i64 %i.0.in, -1
  %11 = icmp eq i64 %i.0, 0
  br i1 %11, label %.critedge, label %12

; <label>:12                                      ; preds = %10
  %13 = getelementptr inbounds i8* %s, i64 %i.0
  %14 = load i8* %13, align 1, !tbaa !0
  %15 = icmp eq i8 %14, 47
  br i1 %15, label %10, label %.critedge

.critedge:                                        ; preds = %17, %12, %10
  %i.1 = phi i64 [ %18, %17 ], [ 0, %10 ], [ %i.0, %12 ]
  %16 = icmp eq i64 %i.1, 0
  br i1 %16, label %.critedge1, label %17

; <label>:17                                      ; preds = %.critedge
  %18 = add i64 %i.1, -1
  %19 = getelementptr inbounds i8* %s, i64 %18
  %20 = load i8* %19, align 1, !tbaa !0
  %21 = icmp eq i8 %20, 47
  br i1 %21, label %.critedge1, label %.critedge

.critedge1:                                       ; preds = %23, %17, %.critedge
  %i.2 = phi i64 [ %24, %23 ], [ %i.1, %17 ], [ 0, %.critedge ]
  %22 = icmp eq i64 %i.2, 0
  br i1 %22, label %.critedge3, label %23

; <label>:23                                      ; preds = %.critedge1
  %24 = add i64 %i.2, -1
  %25 = getelementptr inbounds i8* %s, i64 %24
  %26 = load i8* %25, align 1, !tbaa !0
  %27 = icmp eq i8 %26, 47
  br i1 %27, label %.critedge1, label %.critedge2

.critedge3:                                       ; preds = %.critedge1
  %28 = load i8* %s, align 1, !tbaa !0
  %29 = icmp eq i8 %28, 47
  %30 = zext i1 %29 to i64
  br label %.critedge2

.critedge2:                                       ; preds = %.critedge3, %23
  %i.3 = phi i64 [ %30, %.critedge3 ], [ %i.2, %23 ]
  %31 = getelementptr inbounds i8* %s, i64 %i.3
  store i8 0, i8* %31, align 1, !tbaa !0
  br label %32

; <label>:32                                      ; preds = %.critedge2, %5, %2, %0
  %.0 = phi i8* [ %s, %.critedge2 ], [ getelementptr inbounds ([2 x i8]* @.str89, i64 0, i64 0), %5 ], [ getelementptr inbounds ([2 x i8]* @.str89, i64 0, i64 0), %2 ], [ getelementptr inbounds ([2 x i8]* @.str89, i64 0, i64 0), %0 ]
  ret i8* %.0
}

define i64 @div(i32 %num, i32 %den) nounwind uwtable readnone optsize {
  %1 = sdiv i32 %num, %den
  %2 = srem i32 %num, %den
  %3 = zext i32 %1 to i64
  %4 = zext i32 %2 to i64
  %5 = shl nuw i64 %4, 32
  %6 = or i64 %5, %3
  ret i64 %6
}

define i8* @dlsym(i8* %p, i8* %s) nounwind uwtable optsize {
  %1 = tail call i8* @__dlsym(i8* %p, i8* %s, i8* null) nounwind optsize
  ret i8* %1
}

define i32 @dn_expand(i8* %b, i8* %pz, i8* %p, i8* %s, i32 %outlen) nounwind uwtable optsize {
  %seen = alloca [8 x i64], align 16
  %1 = bitcast [8 x i64]* %seen to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 64, i32 16, i1 false)
  %2 = sext i32 %outlen to i64
  %3 = getelementptr inbounds i8* %s, i64 %2
  %4 = ptrtoint i8* %pz to i64
  %5 = ptrtoint i8* %b to i64
  %6 = sub i64 %4, %5
  %7 = icmp sgt i64 %6, 512
  br i1 %7, label %.loopexit, label %.outer

.outer:                                           ; preds = %41, %0
  %.02.ph = phi i8* [ %48, %41 ], [ %p, %0 ]
  %.01.ph = phi i8* [ %47, %41 ], [ %s, %0 ]
  br label %8

; <label>:8                                       ; preds = %29, %.outer
  %.02 = phi i8* [ %31, %29 ], [ %.02.ph, %.outer ]
  %9 = icmp ult i8* %.02, %pz
  br i1 %9, label %10, label %.loopexit

; <label>:10                                      ; preds = %8
  %11 = load i8* %.02, align 1, !tbaa !0
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 192
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %32, label %15

; <label>:15                                      ; preds = %10
  %16 = and i32 %12, 1
  %17 = getelementptr inbounds i8* %.02, i64 1
  %18 = load i8* %17, align 1, !tbaa !0
  %19 = zext i8 %18 to i32
  %20 = or i32 %19, %16
  %21 = zext i32 %20 to i64
  %22 = lshr i64 %21, 6
  %23 = getelementptr inbounds [8 x i64]* %seen, i64 0, i64 %22
  %24 = load i64* %23, align 8, !tbaa !5
  %25 = and i64 %21, 63
  %26 = shl i64 1, %25
  %27 = and i64 %26, %24
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %.loopexit

; <label>:29                                      ; preds = %15
  %30 = or i64 %26, %24
  store i64 %30, i64* %23, align 8, !tbaa !5
  %31 = getelementptr inbounds i8* %b, i64 %21
  br label %8

; <label>:32                                      ; preds = %10
  %33 = icmp eq i8 %11, 0
  br i1 %33, label %.loopexit, label %34

; <label>:34                                      ; preds = %32
  %35 = zext i8 %11 to i64
  %.sum = add i64 %35, 1
  %36 = getelementptr inbounds i8* %.02, i64 %.sum
  %37 = icmp ult i8* %36, %pz
  br i1 %37, label %38, label %.loopexit

; <label>:38                                      ; preds = %34
  %39 = getelementptr inbounds i8* %.01.ph, i64 %35
  %40 = icmp ult i8* %39, %3
  br i1 %40, label %41, label %.loopexit

; <label>:41                                      ; preds = %38
  %42 = getelementptr inbounds i8* %.02, i64 1
  %43 = call i8* @memcpy(i8* %.01.ph, i8* %42, i64 %35) nounwind optsize
  %44 = load i8* %.02, align 1, !tbaa !0
  %45 = zext i8 %44 to i64
  %46 = add i64 %45, 1
  %47 = getelementptr inbounds i8* %.01.ph, i64 %46
  %48 = getelementptr inbounds i8* %.02, i64 %46
  %49 = load i8* %48, align 1, !tbaa !0
  %50 = icmp ne i8 %49, 0
  %51 = select i1 %50, i8 46, i8 0
  %52 = getelementptr inbounds i8* %.01.ph, i64 %45
  store i8 %51, i8* %52, align 1, !tbaa !0
  br label %.outer

.loopexit:                                        ; preds = %38, %34, %32, %15, %8, %0
  %.0 = phi i32 [ -1, %0 ], [ -1, %15 ], [ -1, %8 ], [ -1, %38 ], [ -1, %34 ], [ 0, %32 ]
  ret i32 %.0
}

define i32 @__dns_doqueries(i8* %dest, i8* %name, i32* nocapture %rr, i32 %rrcnt) nounwind uwtable optsize {
  %_f = alloca %struct.__FILE_s.37, align 8
  %_buf = alloca [64 x i8], align 16
  %line = alloca [64 x i8], align 16
  %sa = alloca %union.anon.38, align 4
  %ns = alloca [3 x %union.anon.38], align 16
  %q = alloca [280 x i8], align 16
  %ts = alloca %struct.timespec.29, align 8
  %pfd = alloca %struct.pollfd, align 4
  %cs = alloca i32, align 4
  %__cb = alloca %struct.__ptcb, align 8
  %1 = alloca [1 x i32], align 4
  %2 = call i64 @time(i64* null) nounwind optsize
  %3 = bitcast %union.anon.38* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ({ %struct.sockaddr_in, [12 x i8] }* @__dns_doqueries.sa to i8*), i64 28, i32 4, i1 false)
  %4 = bitcast [3 x %union.anon.38]* %ns to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 84, i32 16, i1 false)
  %5 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 280, i32 16, i1 false)
  %6 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %7 = call i64 @strlen(i8* %name) nounwind optsize
  %8 = add i64 %7, -1
  %9 = icmp ugt i64 %8, 253
  br i1 %9, label %.loopexit26, label %10

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 5
  store i8 1, i8* %11, align 1, !tbaa !0
  %12 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 2
  store i8 1, i8* %12, align 2, !tbaa !0
  %13 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 13
  %14 = call i8* @strcpy(i8* %13, i8* %name) nounwind optsize
  br label %15

; <label>:15                                      ; preds = %26, %10
  %i.0 = phi i32 [ 13, %10 ], [ %31, %26 ]
  %16 = sext i32 %i.0 to i64
  %17 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 %16
  %18 = load i8* %17, align 1, !tbaa !0
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %32, label %.preheader25

.preheader25:                                     ; preds = %21, %15
  %20 = phi i8 [ %.pre, %21 ], [ %18, %15 ]
  %indvars.iv55 = phi i64 [ %indvars.iv.next56, %21 ], [ %16, %15 ]
  %j.0 = phi i32 [ %22, %21 ], [ %i.0, %15 ]
  switch i8 %20, label %21 [
    i8 0, label %.critedge
    i8 46, label %.critedge
  ]

; <label>:21                                      ; preds = %.preheader25
  %indvars.iv.next56 = add i64 %indvars.iv55, 1
  %22 = add nsw i32 %j.0, 1
  %.phi.trans.insert = getelementptr inbounds [280 x i8]* %q, i64 0, i64 %indvars.iv.next56
  %.pre = load i8* %.phi.trans.insert, align 1, !tbaa !0
  br label %.preheader25

.critedge:                                        ; preds = %.preheader25, %.preheader25
  %23 = sub nsw i32 %j.0, %i.0
  %24 = add i32 %23, -1
  %25 = icmp ugt i32 %24, 62
  br i1 %25, label %.loopexit26, label %26

; <label>:26                                      ; preds = %.critedge
  %27 = trunc i32 %23 to i8
  %28 = add nsw i32 %i.0, -1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 %29
  store i8 %27, i8* %30, align 1, !tbaa !0
  %31 = add nsw i32 %j.0, 1
  br label %15

; <label>:32                                      ; preds = %15
  %33 = add nsw i32 %i.0, 3
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 %34
  store i8 1, i8* %35, align 1, !tbaa !0
  %36 = add nsw i32 %i.0, 4
  %37 = call i32 @clock_gettime(i32 0, %struct.timespec.29* %ts) nounwind optsize
  %38 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %39 = load i64* %38, align 8, !tbaa !5
  %40 = lshr i64 %39, 16
  %41 = add i64 %40, %39
  %.tr = trunc i64 %41 to i32
  %42 = getelementptr inbounds [64 x i8]* %_buf, i64 0, i64 0
  %43 = call %struct.__FILE_s.37* @__fopen_rb_ca(i8* getelementptr inbounds ([17 x i8]* @.str90, i64 0, i64 0), %struct.__FILE_s.37* %_f, i8* %42, i64 64) nounwind optsize
  %44 = icmp eq %struct.__FILE_s.37* %43, null
  br i1 %44, label %.thread, label %.preheader21

.preheader21:                                     ; preds = %32
  %45 = getelementptr inbounds [64 x i8]* %line, i64 0, i64 0
  %46 = getelementptr inbounds [64 x i8]* %line, i64 0, i64 10
  %47 = getelementptr inbounds [64 x i8]* %line, i64 0, i64 11
  br label %.outer22

.outer22:                                         ; preds = %83, %.preheader21
  %indvars.iv53 = phi i64 [ 0, %.preheader21 ], [ %indvars.iv.next54, %83 ]
  %nns.0.ph = phi i32 [ 0, %.preheader21 ], [ %86, %83 ]
  %sl.0.ph = phi i32 [ undef, %.preheader21 ], [ %91, %83 ]
  %family.0.ph = phi i32 [ 0, %.preheader21 ], [ %89, %83 ]
  %48 = trunc i64 %indvars.iv53 to i32
  %49 = icmp slt i32 %48, 3
  %50 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 %indvars.iv53
  %51 = bitcast %union.anon.38* %50 to i8*
  br i1 %49, label %.outer22..outer22.split_crit_edge, label %92

.outer22..outer22.split_crit_edge:                ; preds = %.critedge2, %57, %54, %.outer22
  %52 = call i8* @fgets(i8* %45, i32 64, %struct.__FILE_s.37* %43) nounwind optsize
  %53 = icmp eq i8* %52, null
  br i1 %53, label %92, label %54

; <label>:54                                      ; preds = %.outer22..outer22.split_crit_edge
  %55 = call i32 @strncmp(i8* %45, i8* getelementptr inbounds ([11 x i8]* @.str191, i64 0, i64 0), i64 10) nounwind optsize
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %.outer22..outer22.split_crit_edge

; <label>:57                                      ; preds = %54
  %58 = load i8* %46, align 2, !tbaa !0
  %59 = sext i8 %58 to i32
  %60 = call i32 @isspace(i32 %59) nounwind optsize
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %.outer22..outer22.split_crit_edge, label %62

; <label>:62                                      ; preds = %57
  %63 = load i8* %47, align 1, !tbaa !0
  %64 = sext i8 %63 to i32
  %65 = call i32 @isspace(i32 %64) nounwind optsize
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %.loopexit17, label %.lr.ph20

.lr.ph20:                                         ; preds = %.lr.ph20, %62
  %s.018 = phi i8* [ %67, %.lr.ph20 ], [ %47, %62 ]
  %67 = getelementptr inbounds i8* %s.018, i64 1
  %68 = load i8* %67, align 1, !tbaa !0
  %69 = sext i8 %68 to i32
  %70 = call i32 @isspace(i32 %69) nounwind optsize
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %.loopexit17, label %.lr.ph20

.loopexit17:                                      ; preds = %.lr.ph20, %62
  %s.0.lcssa = phi i8* [ %47, %62 ], [ %67, %.lr.ph20 ]
  br label %72

; <label>:72                                      ; preds = %79, %.loopexit17
  %z.0 = phi i8* [ %80, %79 ], [ %s.0.lcssa, %.loopexit17 ]
  %73 = load i8* %z.0, align 1, !tbaa !0
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %.critedge2, label %75

; <label>:75                                      ; preds = %72
  %76 = sext i8 %73 to i32
  %77 = call i32 @isspace(i32 %76) nounwind optsize
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %.critedge2

; <label>:79                                      ; preds = %75
  %80 = getelementptr inbounds i8* %z.0, i64 1
  br label %72

.critedge2:                                       ; preds = %75, %72
  store i8 0, i8* %z.0, align 1, !tbaa !0
  %81 = call i32 @__ipparse(i8* %51, i32 %family.0.ph, i8* %s.0.lcssa) nounwind optsize
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %.outer22..outer22.split_crit_edge, label %83

; <label>:83                                      ; preds = %.critedge2
  %84 = call zeroext i16 @htons(i16 zeroext 53) nounwind optsize
  %85 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 %indvars.iv53, i32 0, i32 1
  store i16 %84, i16* %85, align 2, !tbaa !8
  %indvars.iv.next54 = add i64 %indvars.iv53, 1
  %86 = add nsw i32 %nns.0.ph, 1
  %87 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 %indvars.iv53, i32 0, i32 0
  %88 = load i16* %87, align 4, !tbaa !8
  %89 = zext i16 %88 to i32
  %90 = icmp eq i16 %88, 10
  %91 = select i1 %90, i32 28, i32 16
  br label %.outer22

; <label>:92                                      ; preds = %.outer22..outer22.split_crit_edge, %.outer22
  %93 = call i32 bitcast (i32 (%struct.__FILE_s.54*)* @__fclose_ca to i32 (%struct.__FILE_s.37*)*)(%struct.__FILE_s.37* %43) nounwind optsize
  %94 = icmp eq i32 %nns.0.ph, 0
  br i1 %94, label %.thread, label %100

.thread:                                          ; preds = %92, %32
  %95 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 0, i32 0, i32 0
  store i16 2, i16* %95, align 16, !tbaa !8
  %96 = call zeroext i16 @htons(i16 zeroext 53) nounwind optsize
  %97 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 0, i32 0, i32 1
  store i16 %96, i16* %97, align 2, !tbaa !8
  %98 = call i32 @htonl(i32 2130706433) nounwind optsize
  %99 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 0, i32 0, i32 2
  store i32 %98, i32* %99, align 4, !tbaa !6
  br label %100

; <label>:100                                     ; preds = %.thread, %92
  %nns.2 = phi i32 [ %nns.0.ph, %92 ], [ 1, %.thread ]
  %sl.2 = phi i32 [ %sl.0.ph, %92 ], [ 16, %.thread ]
  %family.2 = phi i32 [ %family.0.ph, %92 ], [ 2, %.thread ]
  %101 = trunc i32 %family.2 to i16
  %102 = getelementptr inbounds %union.anon.38* %sa, i64 0, i32 0, i32 0
  store i16 %101, i16* %102, align 4, !tbaa !8
  %103 = call i32 @socket(i32 %family.2, i32 2, i32 0) nounwind optsize
  %104 = sext i32 %103 to i64
  %105 = inttoptr i64 %104 to i8*
  call void @_pthread_cleanup_push(%struct.__ptcb* %__cb, void (i8*)* @cleanup, i8* %105) nounwind optsize
  %106 = load i32* %cs, align 4, !tbaa !6
  %107 = call i32 @pthread_setcancelstate(i32 %106, i32* null) nounwind optsize
  %108 = bitcast %union.anon.38* %sa to %struct.sockaddr.24*
  %109 = call i32 @bind(i32 %103, %struct.sockaddr.24* %108, i32 %sl.2) nounwind optsize
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %.loopexit15, label %111

; <label>:111                                     ; preds = %100
  %112 = call i32 (i32, i32, ...)* @fcntl(i32 %103, i32 3, i32 0) nounwind optsize
  %113 = or i32 %112, 2048
  %114 = call i32 (i32, i32, ...)* @fcntl(i32 %103, i32 4, i32 %113) nounwind optsize
  %115 = getelementptr inbounds %struct.pollfd* %pfd, i64 0, i32 0
  store i32 %103, i32* %115, align 4, !tbaa !6
  %116 = getelementptr inbounds %struct.pollfd* %pfd, i64 0, i32 1
  store i16 1, i16* %116, align 4, !tbaa !8
  %117 = icmp sgt i32 %rrcnt, 0
  %118 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 1
  %119 = add nsw i32 %i.0, 1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [280 x i8]* %q, i64 0, i64 %120
  %122 = sext i32 %36 to i64
  %123 = getelementptr inbounds [1 x i32]* %1, i64 0, i64 0
  %124 = zext i32 %sl.2 to i64
  %125 = and i64 %41, 65535
  br label %.outer16

.outer16:                                         ; preds = %.critedge3, %111
  %r.0.ph = phi i8* [ %dest, %111 ], [ %r.1.ph, %.critedge3 ]
  %got.0.ph = phi i32 [ 0, %111 ], [ %got.1.ph, %.critedge3 ]
  %failed.0.ph = phi i32 [ 0, %111 ], [ %failed.1.ph, %.critedge3 ]
  %errcode.0.ph = phi i32 [ -3, %111 ], [ %errcode.1.ph, %.critedge3 ]
  br label %126

; <label>:126                                     ; preds = %._crit_edge, %.outer16
  %127 = call i64 @time(i64* null) nounwind optsize
  %128 = sub nsw i64 %127, %2
  %129 = icmp slt i64 %128, 5
  br i1 %129, label %.preheader12, label %.loopexit15

.preheader12:                                     ; preds = %126
  br i1 %117, label %.lr.ph14, label %._crit_edge

.lr.ph14:                                         ; preds = %.loopexit, %.preheader12
  %indvars.iv40 = phi i64 [ %indvars.iv.next41, %.loopexit ], [ 0, %.preheader12 ]
  %130 = getelementptr inbounds i32* %rr, i64 %indvars.iv40
  %131 = load i32* %130, align 4, !tbaa !6
  %132 = icmp eq i32 %131, 0
  %.not = icmp slt i32 %nns.2, 1
  %brmerge = or i1 %132, %.not
  br i1 %brmerge, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph14
  %133 = add nsw i64 %indvars.iv40, %125
  %134 = trunc i64 %133 to i32
  %135 = lshr i32 %134, 8
  %136 = trunc i32 %135 to i8
  %137 = trunc i64 %133 to i8
  br label %138

; <label>:138                                     ; preds = %._crit_edge58, %.lr.ph
  %139 = phi i32 [ %131, %.lr.ph ], [ %.pre59, %._crit_edge58 ]
  %indvars.iv38 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next39, %._crit_edge58 ]
  store i8 %136, i8* %5, align 16, !tbaa !0
  store i8 %137, i8* %118, align 1, !tbaa !0
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %121, align 1, !tbaa !0
  %141 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 %indvars.iv38
  %142 = bitcast %union.anon.38* %141 to %struct.sockaddr.24*
  %143 = call i64 @sendto(i32 %103, i8* %5, i64 %122, i32 16384, %struct.sockaddr.24* %142, i32 %sl.2) nounwind optsize
  %indvars.iv.next39 = add i64 %indvars.iv38, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next39 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nns.2
  br i1 %exitcond, label %.loopexit, label %._crit_edge58

._crit_edge58:                                    ; preds = %138
  %.pre59 = load i32* %130, align 4, !tbaa !6
  br label %138

.loopexit:                                        ; preds = %138, %.lr.ph14
  %indvars.iv.next41 = add i64 %indvars.iv40, 1
  %lftr.wideiv42 = trunc i64 %indvars.iv.next41 to i32
  %exitcond43 = icmp eq i32 %lftr.wideiv42, %rrcnt
  br i1 %exitcond43, label %._crit_edge, label %.lr.ph14

._crit_edge:                                      ; preds = %.loopexit, %.preheader12
  %144 = call i32 @poll(%struct.pollfd* %pfd, i32 1, i32 1000) nounwind optsize
  %145 = icmp slt i32 %144, 1
  br i1 %145, label %126, label %.outer

.outer:                                           ; preds = %189, %._crit_edge
  %r.1.ph = phi i8* [ %190, %189 ], [ %r.0.ph, %._crit_edge ]
  %got.1.ph = phi i32 [ %got.2, %189 ], [ %got.0.ph, %._crit_edge ]
  %failed.1.ph = phi i32 [ %failed.2, %189 ], [ %failed.0.ph, %._crit_edge ]
  %errcode.1.ph = phi i32 [ %errcode.3, %189 ], [ %errcode.0.ph, %._crit_edge ]
  %146 = add nsw i32 %failed.1.ph, %got.1.ph
  %147 = icmp slt i32 %146, %rrcnt
  %148 = getelementptr inbounds i8* %r.1.ph, i64 1
  br label %.backedge

.backedge:                                        ; preds = %174, %164, %162, %.outer
  br i1 %147, label %149, label %.critedge3

; <label>:149                                     ; preds = %.backedge
  store i32 %sl.2, i32* %123, align 4, !tbaa !6
  %150 = call i64 @recvfrom(i32 %103, i8* %r.1.ph, i64 512, i32 0, %struct.sockaddr.24* %108, i32* %123) nounwind optsize
  %151 = trunc i64 %150 to i32
  %152 = icmp sgt i32 %151, 1
  br i1 %152, label %.preheader, label %.critedge3

.preheader:                                       ; preds = %160, %149
  %indvars.iv = phi i64 [ %indvars.iv.next, %160 ], [ 0, %149 ]
  %i.2 = phi i32 [ %161, %160 ], [ 0, %149 ]
  %153 = trunc i64 %indvars.iv to i32
  %154 = icmp slt i32 %153, %nns.2
  br i1 %154, label %155, label %162

; <label>:155                                     ; preds = %.preheader
  %156 = getelementptr inbounds [3 x %union.anon.38]* %ns, i64 0, i64 %indvars.iv
  %157 = bitcast %union.anon.38* %156 to i8*
  %158 = call i32 @memcmp(i8* %157, i8* %3, i64 %124) nounwind optsize
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %162, label %160

; <label>:160                                     ; preds = %155
  %indvars.iv.next = add i64 %indvars.iv, 1
  %161 = add nsw i32 %i.2, 1
  br label %.preheader

; <label>:162                                     ; preds = %155, %.preheader
  %163 = icmp eq i32 %i.2, %nns.2
  br i1 %163, label %.backedge, label %164

; <label>:164                                     ; preds = %162
  %165 = load i8* %r.1.ph, align 1, !tbaa !0
  %166 = zext i8 %165 to i32
  %167 = shl nuw nsw i32 %166, 8
  %168 = load i8* %148, align 1, !tbaa !0
  %169 = zext i8 %168 to i32
  %170 = or i32 %167, %169
  %171 = sub nsw i32 %170, %.tr
  %172 = and i32 %171, 65535
  %173 = icmp ult i32 %172, %rrcnt
  br i1 %173, label %174, label %.backedge

; <label>:174                                     ; preds = %164
  %175 = zext i32 %172 to i64
  %176 = getelementptr inbounds i32* %rr, i64 %175
  %177 = load i32* %176, align 4, !tbaa !6
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %.backedge, label %179

; <label>:179                                     ; preds = %174
  %180 = getelementptr inbounds i8* %r.1.ph, i64 3
  %181 = load i8* %180, align 1, !tbaa !0
  %182 = zext i8 %181 to i32
  %183 = and i32 %182, 15
  switch i32 %183, label %186 [
    i32 0, label %184
    i32 3, label %187
  ]

; <label>:184                                     ; preds = %179
  %185 = add nsw i32 %got.1.ph, 1
  br label %189

; <label>:186                                     ; preds = %179
  br label %187

; <label>:187                                     ; preds = %186, %179
  %errcode.2 = phi i32 [ -4, %186 ], [ -2, %179 ]
  %188 = add nsw i32 %failed.1.ph, 1
  br label %189

; <label>:189                                     ; preds = %187, %184
  %got.2 = phi i32 [ %got.1.ph, %187 ], [ %185, %184 ]
  %failed.2 = phi i32 [ %188, %187 ], [ %failed.1.ph, %184 ]
  %errcode.3 = phi i32 [ %errcode.2, %187 ], [ %errcode.1.ph, %184 ]
  store i32 0, i32* %176, align 4, !tbaa !6
  %190 = getelementptr inbounds i8* %r.1.ph, i64 512
  br label %.outer

.critedge3:                                       ; preds = %149, %.backedge
  %191 = icmp eq i32 %146, %rrcnt
  br i1 %191, label %.loopexit15, label %.outer16

.loopexit15:                                      ; preds = %.critedge3, %126, %100
  %got.3 = phi i32 [ 0, %100 ], [ %got.0.ph, %126 ], [ %got.1.ph, %.critedge3 ]
  %errcode.4 = phi i32 [ -11, %100 ], [ %errcode.0.ph, %126 ], [ %errcode.1.ph, %.critedge3 ]
  call void @_pthread_cleanup_pop(%struct.__ptcb* %__cb, i32 1) nounwind optsize
  %192 = icmp eq i32 %got.3, 0
  %errcode.4.got.3 = select i1 %192, i32 %errcode.4, i32 %got.3
  br label %.loopexit26

.loopexit26:                                      ; preds = %.loopexit15, %.critedge, %0
  %.0 = phi i32 [ -2, %0 ], [ %errcode.4.got.3, %.loopexit15 ], [ -2, %.critedge ]
  ret i32 %.0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare i32 @pthread_setcancelstate(i32, i32*) optsize

define internal void @cleanup(i8* %p) nounwind uwtable optsize {
  %1 = ptrtoint i8* %p to i64
  %2 = trunc i64 %1 to i32
  %3 = tail call i32 @close(i32 %2) nounwind optsize
  ret void
}

define i32 @__dns_query(i8* %r, i8* %a, i32 %family, i32 %ptr) nounwind uwtable optsize {
  %buf = alloca [78 x i8], align 16
  %rr = alloca [2 x i32], align 4
  %1 = icmp eq i32 %ptr, 0
  %2 = icmp eq i32 %family, 10
  br i1 %1, label %38, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds [78 x i8]* %buf, i64 0, i64 0
  br i1 %2, label %.preheader, label %23

.preheader:                                       ; preds = %.preheader, %3
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %.preheader ], [ 15, %3 ]
  %.02.i = phi i8* [ %19, %.preheader ], [ %4, %3 ]
  %5 = getelementptr inbounds i8* %a, i64 %indvars.iv.i
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = zext i8 %6 to i64
  %8 = and i64 %7, 15
  %9 = getelementptr inbounds [17 x i8]* @mkptr6.xdigits, i64 0, i64 %8
  %10 = load i8* %9, align 1, !tbaa !0
  %11 = getelementptr inbounds i8* %.02.i, i64 1
  store i8 %10, i8* %.02.i, align 1, !tbaa !0
  %12 = getelementptr inbounds i8* %.02.i, i64 2
  store i8 46, i8* %11, align 1, !tbaa !0
  %13 = load i8* %5, align 1, !tbaa !0
  %14 = zext i8 %13 to i64
  %15 = lshr i64 %14, 4
  %16 = getelementptr inbounds [17 x i8]* @mkptr6.xdigits, i64 0, i64 %15
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = getelementptr inbounds i8* %.02.i, i64 3
  store i8 %17, i8* %12, align 1, !tbaa !0
  %19 = getelementptr inbounds i8* %.02.i, i64 4
  store i8 46, i8* %18, align 1, !tbaa !0
  %indvars.iv.next.i = add i64 %indvars.iv.i, -1
  %20 = trunc i64 %indvars.iv.i to i32
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %.preheader, label %mkptr6.exit

mkptr6.exit:                                      ; preds = %.preheader
  %scevgep.i = getelementptr [78 x i8]* %buf, i64 0, i64 64
  %22 = call i8* @strcpy(i8* %scevgep.i, i8* getelementptr inbounds ([9 x i8]* @.str3, i64 0, i64 0)) nounwind optsize
  br label %36

; <label>:23                                      ; preds = %3
  %24 = getelementptr inbounds i8* %a, i64 3
  %25 = load i8* %24, align 1, !tbaa !0
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8* %a, i64 2
  %28 = load i8* %27, align 1, !tbaa !0
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8* %a, i64 1
  %31 = load i8* %30, align 1, !tbaa !0
  %32 = zext i8 %31 to i32
  %33 = load i8* %a, align 1, !tbaa !0
  %34 = zext i8 %33 to i32
  %35 = call i32 (i8*, i8*, ...)* @sprintf(i8* %4, i8* getelementptr inbounds ([25 x i8]* @.str292, i64 0, i64 0), i32 %26, i32 %29, i32 %32, i32 %34) nounwind optsize
  br label %36

; <label>:36                                      ; preds = %23, %mkptr6.exit
  %37 = getelementptr inbounds [2 x i32]* %rr, i64 0, i64 0
  store i32 12, i32* %37, align 4, !tbaa !6
  br label %45

; <label>:38                                      ; preds = %0
  %39 = getelementptr inbounds [2 x i32]* %rr, i64 0, i64 0
  br i1 %2, label %40, label %41

; <label>:40                                      ; preds = %38
  store i32 28, i32* %39, align 4, !tbaa !6
  br label %45

; <label>:41                                      ; preds = %38
  store i32 1, i32* %39, align 4, !tbaa !6
  %42 = icmp eq i32 %family, 2
  br i1 %42, label %45, label %43

; <label>:43                                      ; preds = %41
  %44 = getelementptr inbounds [2 x i32]* %rr, i64 0, i64 1
  store i32 28, i32* %44, align 4, !tbaa !6
  br label %45

; <label>:45                                      ; preds = %43, %41, %40, %36
  %.0 = phi i8* [ %4, %36 ], [ %a, %40 ], [ %a, %43 ], [ %a, %41 ]
  %rrcnt.0 = phi i32 [ 1, %36 ], [ 1, %40 ], [ 2, %43 ], [ 1, %41 ]
  %46 = getelementptr inbounds [2 x i32]* %rr, i64 0, i64 0
  %47 = call i32 @__dns_doqueries(i8* %r, i8* %.0, i32* %46, i32 %rrcnt.0) optsize
  ret i32 %47
}

define i32 @__dns_get_rr(i8* %dest, i64 %stride, i64 %maxlen, i64 %limit, i8* %r, i32 %rr, i32 %dec) nounwind uwtable optsize {
  %seen.i = alloca [8 x i64], align 16
  %tmp = alloca [256 x i8], align 16
  %1 = getelementptr inbounds i8* %r, i64 3
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = and i8 %2, 15
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %decname.exit.thread

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %r, i64 4
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 8
  %10 = getelementptr inbounds i8* %r, i64 5
  %11 = load i8* %10, align 1, !tbaa !0
  %12 = zext i8 %11 to i32
  %13 = or i32 %9, %12
  %14 = getelementptr inbounds i8* %r, i64 6
  %15 = load i8* %14, align 1, !tbaa !0
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %16, 8
  %18 = getelementptr inbounds i8* %r, i64 7
  %19 = load i8* %18, align 1, !tbaa !0
  %20 = zext i8 %19 to i32
  %21 = or i32 %17, %20
  %22 = add nsw i32 %21, %13
  %23 = icmp sgt i32 %22, 64
  br i1 %23, label %decname.exit.thread, label %.preheader23

.preheader23:                                     ; preds = %5
  %24 = getelementptr inbounds i8* %r, i64 12
  %25 = ptrtoint i8* %r to i64
  %26 = getelementptr inbounds i8* %r, i64 506
  br label %27

; <label>:27                                      ; preds = %54, %.preheader23
  %qdcount.0 = phi i32 [ %28, %54 ], [ %13, %.preheader23 ]
  %p.0 = phi i8* [ %57, %54 ], [ %24, %.preheader23 ]
  %28 = add nsw i32 %qdcount.0, -1
  %29 = icmp eq i32 %qdcount.0, 0
  br i1 %29, label %.preheader19, label %.preheader21

.preheader19:                                     ; preds = %27
  %30 = getelementptr inbounds i8* %r, i64 512
  %31 = icmp ne i32 %dec, 0
  %32 = getelementptr inbounds [256 x i8]* %tmp, i64 0, i64 0
  %33 = bitcast [8 x i64]* %seen.i to i8*
  %34 = getelementptr inbounds [256 x i8]* %tmp, i64 0, i64 255
  br label %58

.preheader21:                                     ; preds = %43, %27
  %p.1 = phi i8* [ %44, %43 ], [ %p.0, %27 ]
  %35 = ptrtoint i8* %p.1 to i64
  %36 = sub i64 %35, %25
  %37 = icmp slt i64 %36, 512
  %38 = load i8* %p.1, align 1, !tbaa !0
  br i1 %37, label %39, label %.critedge

; <label>:39                                      ; preds = %.preheader21
  %40 = zext i8 %38 to i32
  %41 = add i32 %40, -1
  %42 = icmp ult i32 %41, 127
  br i1 %42, label %43, label %.critedge

; <label>:43                                      ; preds = %39
  %44 = getelementptr inbounds i8* %p.1, i64 1
  br label %.preheader21

.critedge:                                        ; preds = %39, %.preheader21
  %45 = icmp ugt i8 %38, -63
  br i1 %45, label %decname.exit.thread, label %46

; <label>:46                                      ; preds = %.critedge
  %47 = icmp eq i8 %38, -63
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %46
  %49 = getelementptr inbounds i8* %p.1, i64 1
  %50 = load i8* %49, align 1, !tbaa !0
  %51 = icmp eq i8 %50, -1
  %52 = icmp ugt i8* %p.1, %26
  %or.cond30 = or i1 %51, %52
  br i1 %or.cond30, label %decname.exit.thread, label %54

; <label>:53                                      ; preds = %46
  %.old = icmp ugt i8* %p.1, %26
  br i1 %.old, label %decname.exit.thread, label %54

; <label>:54                                      ; preds = %53, %48
  %55 = icmp ne i8 %38, 0
  %56 = select i1 %55, i64 6, i64 5
  %57 = getelementptr inbounds i8* %p.1, i64 %56
  br label %27

; <label>:58                                      ; preds = %161, %.preheader19
  %ancount.0 = phi i32 [ %59, %161 ], [ %21, %.preheader19 ]
  %.02 = phi i64 [ %.24, %161 ], [ %limit, %.preheader19 ]
  %p.2 = phi i8* [ %164, %161 ], [ %p.0, %.preheader19 ]
  %found.0 = phi i32 [ %found.1, %161 ], [ 0, %.preheader19 ]
  %.01 = phi i8* [ %.2, %161 ], [ %dest, %.preheader19 ]
  %59 = add nsw i32 %ancount.0, -1
  %60 = icmp eq i32 %ancount.0, 0
  br i1 %60, label %decname.exit.thread, label %.preheader

.preheader:                                       ; preds = %69, %58
  %p.3 = phi i8* [ %70, %69 ], [ %p.2, %58 ]
  %61 = ptrtoint i8* %p.3 to i64
  %62 = sub i64 %61, %25
  %63 = icmp slt i64 %62, 512
  %64 = load i8* %p.3, align 1, !tbaa !0
  br i1 %63, label %65, label %.critedge11

; <label>:65                                      ; preds = %.preheader
  %66 = zext i8 %64 to i32
  %67 = add i32 %66, -1
  %68 = icmp ult i32 %67, 127
  br i1 %68, label %69, label %.critedge11

; <label>:69                                      ; preds = %65
  %70 = getelementptr inbounds i8* %p.3, i64 1
  br label %.preheader

.critedge11:                                      ; preds = %65, %.preheader
  %71 = icmp ugt i8 %64, -63
  br i1 %71, label %decname.exit.thread, label %72

; <label>:72                                      ; preds = %.critedge11
  %73 = icmp eq i8 %64, -63
  br i1 %73, label %74, label %79

; <label>:74                                      ; preds = %72
  %75 = getelementptr inbounds i8* %p.3, i64 1
  %76 = load i8* %75, align 1, !tbaa !0
  %77 = icmp eq i8 %76, -1
  %78 = icmp ugt i8* %p.3, %26
  %or.cond32 = or i1 %77, %78
  br i1 %or.cond32, label %decname.exit.thread, label %80

; <label>:79                                      ; preds = %72
  %.old31 = icmp ugt i8* %p.3, %26
  br i1 %.old31, label %decname.exit.thread, label %80

; <label>:80                                      ; preds = %79, %74
  %81 = icmp ne i8 %64, 0
  %82 = select i1 %81, i64 2, i64 1
  %.sum5 = or i64 %82, 8
  %83 = getelementptr inbounds i8* %p.3, i64 %.sum5
  %84 = load i8* %83, align 1, !tbaa !0
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 8
  %.sum = add i64 %82, 9
  %87 = getelementptr inbounds i8* %p.3, i64 %.sum
  %88 = load i8* %87, align 1, !tbaa !0
  %89 = zext i8 %88 to i32
  %90 = or i32 %86, %89
  %91 = zext i32 %90 to i64
  %.sum6 = add i64 %91, %82
  %92 = getelementptr inbounds i8* %p.3, i64 %.sum6
  %93 = icmp ugt i8* %92, %30
  br i1 %93, label %decname.exit.thread, label %94

; <label>:94                                      ; preds = %80
  %.sum7 = add i64 %82, 1
  %95 = getelementptr inbounds i8* %p.3, i64 %.sum7
  %96 = load i8* %95, align 1, !tbaa !0
  %97 = zext i8 %96 to i32
  %98 = icmp ne i32 %97, %rr
  %99 = icmp ugt i64 %91, %maxlen
  %or.cond = or i1 %98, %99
  br i1 %or.cond, label %161, label %100

; <label>:100                                     ; preds = %94
  br i1 %31, label %101, label %decname.exit.thread14

; <label>:101                                     ; preds = %100
  %.sum10 = add i64 %82, 10
  %102 = getelementptr inbounds i8* %p.3, i64 %.sum10
  call void @llvm.lifetime.start(i64 -1, i8* %33) nounwind
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 64, i32 16, i1 false) nounwind
  br label %.outer.i

.outer.i:                                         ; preds = %136, %101
  %.02.ph.i = phi i8* [ %102, %101 ], [ %143, %136 ]
  %.01.ph.i = phi i8* [ %32, %101 ], [ %142, %136 ]
  br label %103

; <label>:103                                     ; preds = %124, %.outer.i
  %.02.i = phi i8* [ %126, %124 ], [ %.02.ph.i, %.outer.i ]
  %104 = icmp ult i8* %.02.i, %30
  br i1 %104, label %105, label %decname.exit.thread

; <label>:105                                     ; preds = %103
  %106 = load i8* %.02.i, align 1, !tbaa !0
  %107 = zext i8 %106 to i32
  %108 = and i32 %107, 192
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %127, label %110

; <label>:110                                     ; preds = %105
  %111 = and i32 %107, 1
  %112 = getelementptr inbounds i8* %.02.i, i64 1
  %113 = load i8* %112, align 1, !tbaa !0
  %114 = zext i8 %113 to i32
  %115 = or i32 %114, %111
  %116 = zext i32 %115 to i64
  %117 = lshr i64 %116, 6
  %118 = getelementptr inbounds [8 x i64]* %seen.i, i64 0, i64 %117
  %119 = load i64* %118, align 8, !tbaa !5
  %120 = and i64 %116, 63
  %121 = shl i64 1, %120
  %122 = and i64 %121, %119
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %decname.exit.thread

; <label>:124                                     ; preds = %110
  %125 = or i64 %121, %119
  store i64 %125, i64* %118, align 8, !tbaa !5
  %126 = getelementptr inbounds i8* %r, i64 %116
  br label %103

; <label>:127                                     ; preds = %105
  %128 = icmp eq i8 %106, 0
  br i1 %128, label %decname.exit.thread14, label %129

; <label>:129                                     ; preds = %127
  %130 = zext i8 %106 to i64
  %.sum.i = add i64 %130, 1
  %131 = getelementptr inbounds i8* %.02.i, i64 %.sum.i
  %132 = icmp ult i8* %131, %30
  br i1 %132, label %133, label %decname.exit.thread

; <label>:133                                     ; preds = %129
  %134 = getelementptr inbounds i8* %.01.ph.i, i64 %130
  %135 = icmp ult i8* %134, %34
  br i1 %135, label %136, label %decname.exit.thread

; <label>:136                                     ; preds = %133
  %137 = getelementptr inbounds i8* %.02.i, i64 1
  %138 = call i8* @memcpy(i8* %.01.ph.i, i8* %137, i64 %130) nounwind optsize
  %139 = load i8* %.02.i, align 1, !tbaa !0
  %140 = zext i8 %139 to i64
  %141 = add i64 %140, 1
  %142 = getelementptr inbounds i8* %.01.ph.i, i64 %141
  %143 = getelementptr inbounds i8* %.02.i, i64 %141
  %144 = load i8* %143, align 1, !tbaa !0
  %145 = icmp ne i8 %144, 0
  %146 = select i1 %145, i8 46, i8 0
  %147 = getelementptr inbounds i8* %.01.ph.i, i64 %140
  store i8 %146, i8* %147, align 1, !tbaa !0
  br label %.outer.i

decname.exit.thread14:                            ; preds = %127, %100
  %148 = icmp eq i8* %.01, null
  %149 = icmp eq i64 %.02, 0
  %or.cond12 = or i1 %148, %149
  br i1 %or.cond12, label %159, label %150

; <label>:150                                     ; preds = %decname.exit.thread14
  br i1 %31, label %151, label %153

; <label>:151                                     ; preds = %150
  %152 = call i8* @strcpy(i8* %.01, i8* %32) nounwind optsize
  br label %156

; <label>:153                                     ; preds = %150
  %.sum9 = add i64 %82, 10
  %154 = getelementptr inbounds i8* %p.3, i64 %.sum9
  %155 = call i8* @memcpy(i8* %.01, i8* %154, i64 %91) nounwind optsize
  br label %156

; <label>:156                                     ; preds = %153, %151
  %157 = getelementptr inbounds i8* %.01, i64 %stride
  %158 = add i64 %.02, -1
  br label %159

; <label>:159                                     ; preds = %156, %decname.exit.thread14
  %.13 = phi i64 [ %158, %156 ], [ %.02, %decname.exit.thread14 ]
  %.1 = phi i8* [ %157, %156 ], [ %.01, %decname.exit.thread14 ]
  %160 = add nsw i32 %found.0, 1
  br label %161

; <label>:161                                     ; preds = %159, %94
  %.24 = phi i64 [ %.13, %159 ], [ %.02, %94 ]
  %found.1 = phi i32 [ %160, %159 ], [ %found.0, %94 ]
  %.2 = phi i8* [ %.1, %159 ], [ %.01, %94 ]
  %162 = add nsw i32 %90, 10
  %163 = zext i32 %162 to i64
  %.sum8 = add i64 %163, %82
  %164 = getelementptr inbounds i8* %p.3, i64 %.sum8
  br label %58

decname.exit.thread:                              ; preds = %133, %129, %110, %103, %80, %79, %74, %.critedge11, %58, %53, %48, %.critedge, %5, %0
  %.0 = phi i32 [ 0, %0 ], [ -1, %5 ], [ -1, %103 ], [ -1, %110 ], [ -1, %129 ], [ -1, %133 ], [ %found.0, %58 ], [ -1, %80 ], [ -1, %.critedge11 ], [ -1, %74 ], [ -1, %79 ], [ -1, %53 ], [ -1, %48 ], [ -1, %.critedge ]
  ret i32 %.0
}

define i32 @__dns_count_addrs(i8* %r, i32 %cnt) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %16, %0
  %found.0 = phi i32 [ 0, %0 ], [ %found.1, %16 ]
  %.02 = phi i32 [ %cnt, %0 ], [ %2, %16 ]
  %.01 = phi i8* [ %r, %0 ], [ %17, %16 ]
  %2 = add nsw i32 %.02, -1
  %3 = icmp eq i32 %.02, 0
  br i1 %3, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %14, %1
  %indvars.iv = phi i64 [ %indvars.iv.next, %14 ], [ 0, %1 ]
  %found.1 = phi i32 [ %15, %14 ], [ %found.0, %1 ]
  %4 = trunc i64 %indvars.iv to i32
  %5 = icmp slt i32 %4, 2
  br i1 %5, label %6, label %16

; <label>:6                                       ; preds = %.preheader
  %7 = getelementptr inbounds [2 x [2 x i32]]* @__dns_count_addrs.p, i64 0, i64 %indvars.iv, i64 0
  %8 = load i32* %7, align 8, !tbaa !6
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [2 x [2 x i32]]* @__dns_count_addrs.p, i64 0, i64 %indvars.iv, i64 1
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = tail call i32 @__dns_get_rr(i8* null, i64 0, i64 %9, i64 -1, i8* %.01, i32 %11, i32 0) optsize
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %.loopexit, label %14

; <label>:14                                      ; preds = %6
  %15 = add nsw i32 %12, %found.1
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %.preheader

; <label>:16                                      ; preds = %.preheader
  %17 = getelementptr inbounds i8* %.01, i64 512
  br label %1

.loopexit:                                        ; preds = %6, %1
  %.0 = phi i32 [ %12, %6 ], [ %found.0, %1 ]
  ret i32 %.0
}

define i32 @dprintf(i32 %fd, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.42], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.42]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.42]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vdprintf(i32 %fd, i8* %fmt, %struct.__va_list_tag.42* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define double @erand48(i16* %s) nounwind uwtable optsize {
  %1 = tail call i64 @__rand48_step(i16* %s, i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 3)) nounwind optsize
  %2 = shl i64 %1, 4
  %3 = or i64 %2, 4607182418800017408
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, -1.000000e+00
  ret double %5
}

define double @drand48() nounwind uwtable optsize {
  %1 = tail call i64 @__rand48_step(i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 0), i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 3)) nounwind optsize
  %2 = shl i64 %1, 4
  %3 = or i64 %2, 4607182418800017408
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, -1.000000e+00
  ret double %5
}

define i32 @dup2(i32 %old, i32 %new) nounwind uwtable optsize {
  %1 = sext i32 %old to i64
  %2 = sext i32 %new to i64
  br label %3

; <label>:3                                       ; preds = %3, %0
  %4 = tail call i64 (i64, ...)* @__syscall(i64 63, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %5 = trunc i64 %4 to i32
  %6 = icmp eq i32 %5, -16
  br i1 %6, label %3, label %7

; <label>:7                                       ; preds = %3
  %8 = sext i32 %5 to i64
  %9 = tail call i64 @__syscall_ret(i64 %8) nounwind optsize
  %10 = trunc i64 %9 to i32
  ret i32 %10
}

define %struct.__locale* @duplocale(%struct.__locale* %old) nounwind uwtable optsize {
  %1 = tail call i8* @calloc(i64 1, i64 4) nounwind optsize
  %2 = bitcast i8* %1 to %struct.__locale*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast %struct.__locale* %old to i8*
  %6 = tail call i8* @memcpy(i8* %1, i8* %5, i64 4) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %4, %0
  ret %struct.__locale* %2
}

define i32 @dup(i32 %fd) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 41, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define noalias i8* @dlopen(i8* nocapture %file, i32 %mode) nounwind uwtable readnone optsize {
  ret i8* null
}

define noalias i8* @__dlsym(i8* nocapture %p, i8* nocapture %s, i8* nocapture %ra) nounwind uwtable readnone optsize {
  ret i8* null
}

define i8* @dlerror() nounwind uwtable readnone optsize {
  ret i8* getelementptr inbounds ([14 x i8]* @.str95, i64 0, i64 0)
}

define i32 @dlclose(i8* nocapture %p) nounwind uwtable readnone optsize {
  ret i32 0
}

define i8* @ecvt(double %x, i32 %n, i32* nocapture %dp, i32* nocapture %sign) nounwind uwtable optsize {
  %tmp = alloca [32 x i8], align 16
  %1 = add i32 %n, -1
  %2 = icmp ugt i32 %1, 15
  %3 = getelementptr inbounds [32 x i8]* %tmp, i64 0, i64 0
  %4 = select i1 %2, i32 14, i32 %1
  %5 = call i32 (i8*, i8*, ...)* @sprintf(i8* %3, i8* getelementptr inbounds ([5 x i8]* @.str98, i64 0, i64 0), i32 %4, double %x) nounwind optsize
  %6 = load i8* %3, align 16, !tbaa !0
  %7 = icmp eq i8 %6, 45
  %8 = zext i1 %7 to i32
  store i32 %8, i32* %sign, align 4, !tbaa !6
  %9 = zext i1 %7 to i64
  %10 = getelementptr inbounds [32 x i8]* %tmp, i64 0, i64 %9
  %11 = load i8* %10, align 1, !tbaa !0
  %12 = icmp eq i8 %11, 101
  br i1 %12, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %13 = phi i8* [ %24, %.lr.ph ], [ getelementptr inbounds ([16 x i8]* @ecvt.buf, i64 0, i64 0), %0 ]
  %14 = phi i8 [ %21, %.lr.ph ], [ %11, %0 ]
  %j.03 = phi i32 [ %18, %.lr.ph ], [ 0, %0 ]
  %i.02 = phi i32 [ %15, %.lr.ph ], [ %8, %0 ]
  store i8 %14, i8* %13, align 1, !tbaa !0
  %15 = add nsw i32 %i.02, 1
  %16 = icmp ne i8 %14, 46
  %17 = zext i1 %16 to i32
  %18 = add nsw i32 %17, %j.03
  %19 = sext i32 %15 to i64
  %20 = getelementptr inbounds [32 x i8]* %tmp, i64 0, i64 %19
  %21 = load i8* %20, align 1, !tbaa !0
  %22 = icmp eq i8 %21, 101
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds [16 x i8]* @ecvt.buf, i64 0, i64 %23
  br i1 %22, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  %.lcssa1 = phi i8* [ getelementptr inbounds ([16 x i8]* @ecvt.buf, i64 0, i64 0), %0 ], [ %24, %.lr.ph ]
  %.lcssa = phi i64 [ %9, %0 ], [ %19, %.lr.ph ]
  store i8 0, i8* %.lcssa1, align 1, !tbaa !0
  %.sum = add i64 %.lcssa, 1
  %25 = getelementptr inbounds [32 x i8]* %tmp, i64 0, i64 %.sum
  %26 = call i32 @atoi(i8* %25) nounwind optsize
  store i32 %26, i32* %dp, align 4, !tbaa !6
  ret i8* getelementptr inbounds ([16 x i8]* @ecvt.buf, i64 0, i64 0)
}

define void @sethostent(i32 %x) nounwind uwtable readnone optsize {
  ret void
}

define noalias i8* @gethostent() nounwind uwtable readnone optsize {
  ret i8* null
}

define void @endhostent() nounwind uwtable readnone optsize {
  ret void
}

define i32 @epoll_create1(i32 %flags) nounwind uwtable optsize {
  %1 = sext i32 %flags to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 357, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @epoll_create(i32 %size) nounwind uwtable optsize {
  %1 = sext i32 %size to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 250, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @epoll_ctl(i32 %fd, i32 %op, i32 %fd2, %struct.epoll_event* %ev) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = sext i32 %op to i64
  %3 = sext i32 %fd2 to i64
  %4 = ptrtoint %struct.epoll_event* %ev to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 251, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @epoll_pwait(i32 %fd, %struct.epoll_event.43* %ev, i32 %cnt, i32 %to, %struct.sigset_t* %sigs) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.epoll_event.43* %ev to i64
  %3 = sext i32 %cnt to i64
  %4 = sext i32 %to to i64
  %5 = ptrtoint %struct.sigset_t* %sigs to i64
  %6 = tail call i64 (i64, ...)* @__syscall(i64 346, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 8) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define i32 @epoll_wait(i32 %fd, %struct.epoll_event.45* %ev, i32 %cnt, i32 %to) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.epoll_event.45* %ev to i64
  %3 = sext i32 %cnt to i64
  %4 = sext i32 %to to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 252, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define float @erff(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = lshr i32 %1, 30
  %6 = and i32 %5, 2
  %7 = sub nsw i32 1, %6
  %8 = sitofp i32 %7 to float
  %9 = fdiv float 1.000000e+00, %x
  %10 = fadd float %8, %9
  br label %167

; <label>:11                                      ; preds = %0
  %12 = icmp ult i32 %2, 1062731776
  br i1 %12, label %13, label %48

; <label>:13                                      ; preds = %11
  %14 = icmp ult i32 %2, 830472192
  br i1 %14, label %15, label %25

; <label>:15                                      ; preds = %13
  %16 = icmp ult i32 %2, 67108864
  br i1 %16, label %17, label %22

; <label>:17                                      ; preds = %15
  %18 = fmul float %x, 8.000000e+00
  %19 = fmul float %x, 0x3FF06EBA80000000
  %20 = fadd float %18, %19
  %21 = fmul float %20, 1.250000e-01
  br label %167

; <label>:22                                      ; preds = %15
  %23 = fmul float %x, 0x3FC06EBA80000000
  %24 = fadd float %23, %x
  br label %167

; <label>:25                                      ; preds = %13
  %26 = fmul float %x, %x
  %27 = fmul float %26, 0xBEF8EAD620000000
  %28 = fadd float %27, 0xBF77A29120000000
  %29 = fmul float %26, %28
  %30 = fadd float %29, 0xBF9D2A51E0000000
  %31 = fmul float %26, %30
  %32 = fadd float %31, 0xBFD4CD7D60000000
  %33 = fmul float %26, %32
  %34 = fadd float %33, 0x3FC06EBA80000000
  %35 = fmul float %26, 0xBED09C4340000000
  %36 = fadd float %35, 0x3F215DC920000000
  %37 = fmul float %26, %36
  %38 = fadd float %37, 0x3F74D022C0000000
  %39 = fmul float %26, %38
  %40 = fadd float %39, 0x3FB0A54C60000000
  %41 = fmul float %26, %40
  %42 = fadd float %41, 0x3FD97779C0000000
  %43 = fmul float %26, %42
  %44 = fadd float %43, 1.000000e+00
  %45 = fdiv float %34, %44
  %46 = fmul float %45, %x
  %47 = fadd float %46, %x
  br label %167

; <label>:48                                      ; preds = %11
  %49 = icmp ult i32 %2, 1067450368
  br i1 %49, label %50, label %83

; <label>:50                                      ; preds = %48
  %51 = tail call float @fabsf(float %x) nounwind optsize
  %52 = fadd float %51, -1.000000e+00
  %53 = fmul float %52, 0xBF61BF3800000000
  %54 = fadd float %53, 0x3FA22A3660000000
  %55 = fmul float %52, %54
  %56 = fadd float %55, 0xBFBC639840000000
  %57 = fmul float %52, %56
  %58 = fadd float %57, 0x3FD45FCA80000000
  %59 = fmul float %52, %58
  %60 = fadd float %59, 0xBFD7D24100000000
  %61 = fmul float %52, %60
  %62 = fadd float %61, 0x3FDA8D00A0000000
  %63 = fmul float %52, %62
  %64 = fadd float %63, 0xBF6359B8C0000000
  %65 = fmul float %52, 0x3F888B5460000000
  %66 = fadd float %65, 0x3F8BEDC260000000
  %67 = fmul float %52, %66
  %68 = fadd float %67, 0x3FC02660E0000000
  %69 = fmul float %52, %68
  %70 = fadd float %69, 0x3FB2635CE0000000
  %71 = fmul float %52, %70
  %72 = fadd float %71, 0x3FE14AF0A0000000
  %73 = fmul float %52, %72
  %74 = fadd float %73, 0x3FBB3E6620000000
  %75 = fmul float %52, %74
  %76 = fadd float %75, 1.000000e+00
  %77 = icmp sgt i32 %1, -1
  %78 = fdiv float %64, %76
  br i1 %77, label %79, label %81

; <label>:79                                      ; preds = %50
  %80 = fadd float %78, 0x3FEB0AC160000000
  br label %167

; <label>:81                                      ; preds = %50
  %82 = fsub float 0xBFEB0AC160000000, %78
  br label %167

; <label>:83                                      ; preds = %48
  %84 = icmp ugt i32 %2, 1086324735
  br i1 %84, label %85, label %87

; <label>:85                                      ; preds = %83
  %86 = icmp sgt i32 %1, -1
  %. = select i1 %86, float 1.000000e+00, float -1.000000e+00
  br label %167

; <label>:87                                      ; preds = %83
  %88 = tail call float @fabsf(float %x) nounwind optsize
  %89 = fmul float %88, %88
  %90 = fdiv float 1.000000e+00, %89
  %91 = icmp ult i32 %2, 1077336942
  br i1 %91, label %92, label %121

; <label>:92                                      ; preds = %87
  %93 = fmul float %90, 0xC023A0EFC0000000
  %94 = fadd float %93, 0xC054526560000000
  %95 = fmul float %90, %94
  %96 = fadd float %95, 0xC067135CE0000000
  %97 = fmul float %90, %96
  %98 = fadd float %97, 0xC0644CB180000000
  %99 = fmul float %90, %98
  %100 = fadd float %99, 0xC04F300AE0000000
  %101 = fmul float %90, %100
  %102 = fadd float %101, 0xC0251E0440000000
  %103 = fmul float %90, %102
  %104 = fadd float %103, 0xBFE63416E0000000
  %105 = fmul float %90, %104
  %106 = fadd float %105, 0xBF84341260000000
  %107 = fmul float %90, 0xBFAEEFF2E0000000
  %108 = fadd float %107, 0x401A47EF80000000
  %109 = fmul float %90, %108
  %110 = fadd float %109, 0x405B28A3E0000000
  %111 = fmul float %90, %110
  %112 = fadd float %111, 0x407AD02160000000
  %113 = fmul float %90, %112
  %114 = fadd float %113, 0x40842B1920000000
  %115 = fmul float %90, %114
  %116 = fadd float %115, 0x407B290DE0000000
  %117 = fmul float %90, %116
  %118 = fadd float %117, 0x4061350C60000000
  %119 = fmul float %90, %118
  %120 = fadd float %119, 0x4033A6B9C0000000
  br label %146

; <label>:121                                     ; preds = %87
  %122 = fmul float %90, 0xC07E384EA0000000
  %123 = fadd float %122, 0xC090046160000000
  %124 = fmul float %90, %123
  %125 = fadd float %124, 0xC083EC8820000000
  %126 = fmul float %90, %125
  %127 = fadd float %126, 0xC064145D40000000
  %128 = fmul float %90, %127
  %129 = fadd float %128, 0xC031C20960000000
  %130 = fmul float %90, %129
  %131 = fadd float %130, 0xBFE993BA80000000
  %132 = fmul float %90, %131
  %133 = fadd float %132, 0xBF84341240000000
  %134 = fmul float %90, 0xC03670E240000000
  %135 = fadd float %134, 0x407DA874E0000000
  %136 = fmul float %90, %135
  %137 = fadd float %136, 0x40A3F219C0000000
  %138 = fmul float %90, %137
  %139 = fadd float %138, 0x40A8FFB760000000
  %140 = fmul float %90, %139
  %141 = fadd float %140, 0x409802EB20000000
  %142 = fmul float %90, %141
  %143 = fadd float %142, 0x40745CAE20000000
  %144 = fmul float %90, %143
  %145 = fadd float %144, 0x403E568B20000000
  br label %146

; <label>:146                                     ; preds = %121, %92
  %.pn = phi float [ %120, %92 ], [ %145, %121 ]
  %R.0 = phi float [ %106, %92 ], [ %133, %121 ]
  %S.0.in = fmul float %90, %.pn
  %S.0 = fadd float %S.0.in, 1.000000e+00
  %147 = bitcast float %88 to i32
  %148 = and i32 %147, -4096
  %149 = bitcast i32 %148 to float
  %150 = fsub float -0.000000e+00, %149
  %151 = fmul float %149, %150
  %152 = fadd float %151, -5.625000e-01
  %153 = tail call float @expf(float %152) nounwind optsize
  %154 = fsub float %149, %88
  %155 = fadd float %149, %88
  %156 = fmul float %154, %155
  %157 = fdiv float %R.0, %S.0
  %158 = fadd float %156, %157
  %159 = tail call float @expf(float %158) nounwind optsize
  %160 = fmul float %153, %159
  %161 = icmp sgt i32 %1, -1
  %162 = fdiv float %160, %88
  br i1 %161, label %163, label %165

; <label>:163                                     ; preds = %146
  %164 = fsub float 1.000000e+00, %162
  br label %167

; <label>:165                                     ; preds = %146
  %166 = fadd float %162, -1.000000e+00
  br label %167

; <label>:167                                     ; preds = %165, %163, %85, %81, %79, %25, %22, %17, %4
  %.0 = phi float [ %10, %4 ], [ %21, %17 ], [ %24, %22 ], [ %47, %25 ], [ %80, %79 ], [ %82, %81 ], [ %164, %163 ], [ %166, %165 ], [ %., %85 ]
  ret float %.0
}

define float @erfcf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %10

; <label>:4                                       ; preds = %0
  %5 = lshr i32 %1, 30
  %6 = and i32 %5, 2
  %7 = uitofp i32 %6 to float
  %8 = fdiv float 1.000000e+00, %x
  %9 = fadd float %7, %8
  br label %167

; <label>:10                                      ; preds = %0
  %11 = icmp ult i32 %2, 1062731776
  br i1 %11, label %12, label %46

; <label>:12                                      ; preds = %10
  %13 = icmp ult i32 %2, 595591168
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %12
  %15 = fsub float 1.000000e+00, %x
  br label %167

; <label>:16                                      ; preds = %12
  %17 = fmul float %x, %x
  %18 = fmul float %17, 0xBEF8EAD620000000
  %19 = fadd float %18, 0xBF77A29120000000
  %20 = fmul float %17, %19
  %21 = fadd float %20, 0xBF9D2A51E0000000
  %22 = fmul float %17, %21
  %23 = fadd float %22, 0xBFD4CD7D60000000
  %24 = fmul float %17, %23
  %25 = fadd float %24, 0x3FC06EBA80000000
  %26 = fmul float %17, 0xBED09C4340000000
  %27 = fadd float %26, 0x3F215DC920000000
  %28 = fmul float %17, %27
  %29 = fadd float %28, 0x3F74D022C0000000
  %30 = fmul float %17, %29
  %31 = fadd float %30, 0x3FB0A54C60000000
  %32 = fmul float %17, %31
  %33 = fadd float %32, 0x3FD97779C0000000
  %34 = fmul float %17, %33
  %35 = fadd float %34, 1.000000e+00
  %36 = fdiv float %25, %35
  %37 = icmp slt i32 %1, 1048576000
  %38 = fmul float %36, %x
  br i1 %37, label %39, label %42

; <label>:39                                      ; preds = %16
  %40 = fadd float %38, %x
  %41 = fsub float 1.000000e+00, %40
  br label %167

; <label>:42                                      ; preds = %16
  %43 = fadd float %x, -5.000000e-01
  %44 = fadd float %38, %43
  %45 = fsub float 5.000000e-01, %44
  br label %167

; <label>:46                                      ; preds = %10
  %47 = icmp ult i32 %2, 1067450368
  br i1 %47, label %48, label %82

; <label>:48                                      ; preds = %46
  %49 = tail call float @fabsf(float %x) nounwind optsize
  %50 = fadd float %49, -1.000000e+00
  %51 = fmul float %50, 0xBF61BF3800000000
  %52 = fadd float %51, 0x3FA22A3660000000
  %53 = fmul float %50, %52
  %54 = fadd float %53, 0xBFBC639840000000
  %55 = fmul float %50, %54
  %56 = fadd float %55, 0x3FD45FCA80000000
  %57 = fmul float %50, %56
  %58 = fadd float %57, 0xBFD7D24100000000
  %59 = fmul float %50, %58
  %60 = fadd float %59, 0x3FDA8D00A0000000
  %61 = fmul float %50, %60
  %62 = fadd float %61, 0xBF6359B8C0000000
  %63 = fmul float %50, 0x3F888B5460000000
  %64 = fadd float %63, 0x3F8BEDC260000000
  %65 = fmul float %50, %64
  %66 = fadd float %65, 0x3FC02660E0000000
  %67 = fmul float %50, %66
  %68 = fadd float %67, 0x3FB2635CE0000000
  %69 = fmul float %50, %68
  %70 = fadd float %69, 0x3FE14AF0A0000000
  %71 = fmul float %50, %70
  %72 = fadd float %71, 0x3FBB3E6620000000
  %73 = fmul float %50, %72
  %74 = fadd float %73, 1.000000e+00
  %75 = icmp sgt i32 %1, -1
  %76 = fdiv float %62, %74
  br i1 %75, label %77, label %79

; <label>:77                                      ; preds = %48
  %78 = fsub float 0x3FC3D4FA80000000, %76
  br label %167

; <label>:79                                      ; preds = %48
  %80 = fadd float %76, 0x3FEB0AC160000000
  %81 = fadd float %80, 1.000000e+00
  br label %167

; <label>:82                                      ; preds = %46
  %83 = icmp ult i32 %2, 1105199104
  br i1 %83, label %84, label %165

; <label>:84                                      ; preds = %82
  %85 = tail call float @fabsf(float %x) nounwind optsize
  %86 = fmul float %85, %85
  %87 = fdiv float 1.000000e+00, %86
  %88 = icmp ult i32 %2, 1077336941
  br i1 %88, label %89, label %118

; <label>:89                                      ; preds = %84
  %90 = fmul float %87, 0xC023A0EFC0000000
  %91 = fadd float %90, 0xC054526560000000
  %92 = fmul float %87, %91
  %93 = fadd float %92, 0xC067135CE0000000
  %94 = fmul float %87, %93
  %95 = fadd float %94, 0xC0644CB180000000
  %96 = fmul float %87, %95
  %97 = fadd float %96, 0xC04F300AE0000000
  %98 = fmul float %87, %97
  %99 = fadd float %98, 0xC0251E0440000000
  %100 = fmul float %87, %99
  %101 = fadd float %100, 0xBFE63416E0000000
  %102 = fmul float %87, %101
  %103 = fadd float %102, 0xBF84341260000000
  %104 = fmul float %87, 0xBFAEEFF2E0000000
  %105 = fadd float %104, 0x401A47EF80000000
  %106 = fmul float %87, %105
  %107 = fadd float %106, 0x405B28A3E0000000
  %108 = fmul float %87, %107
  %109 = fadd float %108, 0x407AD02160000000
  %110 = fmul float %87, %109
  %111 = fadd float %110, 0x40842B1920000000
  %112 = fmul float %87, %111
  %113 = fadd float %112, 0x407B290DE0000000
  %114 = fmul float %87, %113
  %115 = fadd float %114, 0x4061350C60000000
  %116 = fmul float %87, %115
  %117 = fadd float %116, 0x4033A6B9C0000000
  br label %146

; <label>:118                                     ; preds = %84
  %119 = icmp slt i32 %1, 0
  %120 = icmp ugt i32 %2, 1086324735
  %or.cond = and i1 %119, %120
  br i1 %or.cond, label %167, label %121

; <label>:121                                     ; preds = %118
  %122 = fmul float %87, 0xC07E384EA0000000
  %123 = fadd float %122, 0xC090046160000000
  %124 = fmul float %87, %123
  %125 = fadd float %124, 0xC083EC8820000000
  %126 = fmul float %87, %125
  %127 = fadd float %126, 0xC064145D40000000
  %128 = fmul float %87, %127
  %129 = fadd float %128, 0xC031C20960000000
  %130 = fmul float %87, %129
  %131 = fadd float %130, 0xBFE993BA80000000
  %132 = fmul float %87, %131
  %133 = fadd float %132, 0xBF84341240000000
  %134 = fmul float %87, 0xC03670E240000000
  %135 = fadd float %134, 0x407DA874E0000000
  %136 = fmul float %87, %135
  %137 = fadd float %136, 0x40A3F219C0000000
  %138 = fmul float %87, %137
  %139 = fadd float %138, 0x40A8FFB760000000
  %140 = fmul float %87, %139
  %141 = fadd float %140, 0x409802EB20000000
  %142 = fmul float %87, %141
  %143 = fadd float %142, 0x40745CAE20000000
  %144 = fmul float %87, %143
  %145 = fadd float %144, 0x403E568B20000000
  br label %146

; <label>:146                                     ; preds = %121, %89
  %.pn = phi float [ %117, %89 ], [ %145, %121 ]
  %R.0 = phi float [ %103, %89 ], [ %133, %121 ]
  %S.0.in = fmul float %87, %.pn
  %S.0 = fadd float %S.0.in, 1.000000e+00
  %147 = bitcast float %85 to i32
  %148 = and i32 %147, -4096
  %149 = bitcast i32 %148 to float
  %150 = fsub float -0.000000e+00, %149
  %151 = fmul float %149, %150
  %152 = fadd float %151, -5.625000e-01
  %153 = tail call float @expf(float %152) nounwind optsize
  %154 = fsub float %149, %85
  %155 = fadd float %149, %85
  %156 = fmul float %154, %155
  %157 = fdiv float %R.0, %S.0
  %158 = fadd float %156, %157
  %159 = tail call float @expf(float %158) nounwind optsize
  %160 = fmul float %153, %159
  %161 = icmp sgt i32 %1, 0
  %162 = fdiv float %160, %85
  br i1 %161, label %167, label %163

; <label>:163                                     ; preds = %146
  %164 = fsub float 2.000000e+00, %162
  br label %167

; <label>:165                                     ; preds = %82
  %166 = icmp sgt i32 %1, 0
  %. = select i1 %166, float 0.000000e+00, float 2.000000e+00
  br label %167

; <label>:167                                     ; preds = %165, %163, %146, %118, %79, %77, %42, %39, %14, %4
  %.0 = phi float [ %9, %4 ], [ %15, %14 ], [ %41, %39 ], [ %45, %42 ], [ %78, %77 ], [ %81, %79 ], [ %164, %163 ], [ 2.000000e+00, %118 ], [ %162, %146 ], [ %., %165 ]
  ret float %.0
}

define x86_fp80 @erfl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp eq i32 %4, 32767
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %0
  %7 = lshr i80 %1, 78
  %.tr14 = trunc i80 %7 to i32
  %8 = and i32 %.tr14, 2
  %9 = sub nsw i32 1, %8
  %10 = sitofp i32 %9 to x86_fp80
  %11 = fdiv x86_fp80 0xK3FFF8000000000000000, %x
  %12 = fadd x86_fp80 %10, %11
  br label %189

; <label>:13                                      ; preds = %0
  %14 = lshr i80 %1, 48
  %15 = shl nuw nsw i32 %4, 16
  %.tr = trunc i80 %14 to i32
  %16 = and i32 %.tr, 65535
  %17 = or i32 %15, %16
  %18 = icmp ult i32 %17, 1073666048
  br i1 %18, label %19, label %57

; <label>:19                                      ; preds = %13
  %20 = icmp ult i32 %17, 1071546368
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %19
  %22 = icmp ult i32 %17, 524288
  br i1 %22, label %23, label %28

; <label>:23                                      ; preds = %21
  %24 = fmul x86_fp80 %x, 0xK40028000000000000000
  %25 = fmul x86_fp80 %x, 0xK3FFF8375D410A6DB446C
  %26 = fadd x86_fp80 %24, %25
  %27 = fmul x86_fp80 %26, 0xK3FFC8000000000000000
  br label %189

; <label>:28                                      ; preds = %21
  %29 = fmul x86_fp80 %x, 0xK3FFC8375D410A6DB446C
  %30 = fadd x86_fp80 %29, %x
  br label %189

; <label>:31                                      ; preds = %19
  %32 = fmul x86_fp80 %x, %x
  %33 = fmul x86_fp80 %32, 0xKC006A587F1999B164FE8
  %34 = fadd x86_fp80 %33, 0xKC00AA61D154777EB9519
  %35 = fmul x86_fp80 %32, %34
  %36 = fadd x86_fp80 %35, 0xKC00F85C36C1D991D946E
  %37 = fmul x86_fp80 %32, %36
  %38 = fadd x86_fp80 %37, 0xKC011A1D511887DC5E424
  %39 = fmul x86_fp80 %32, %38
  %40 = fadd x86_fp80 %39, 0xKC014AB6B55353EE251F9
  %41 = fmul x86_fp80 %32, %40
  %42 = fadd x86_fp80 %41, 0xK4013890DFACEC680CB0C
  %43 = fadd x86_fp80 %32, 0xK400688E3EA4B462EBBD9
  %44 = fmul x86_fp80 %32, %43
  %45 = fadd x86_fp80 %44, 0xK400B8CFCAC013C37575E
  %46 = fmul x86_fp80 %32, %45
  %47 = fadd x86_fp80 %46, 0xK400F917CA49D3A9B4669
  %48 = fmul x86_fp80 %32, %47
  %49 = fadd x86_fp80 %48, 0xK4012AC84BE0D9554997B
  %50 = fmul x86_fp80 %32, %49
  %51 = fadd x86_fp80 %50, 0xK4014E4A3D90F25C1EEE9
  %52 = fmul x86_fp80 %32, %51
  %53 = fadd x86_fp80 %52, 0xK40168572745F3EF624EE
  %54 = fdiv x86_fp80 %42, %53
  %55 = fmul x86_fp80 %54, %x
  %56 = fadd x86_fp80 %55, %x
  br label %189

; <label>:57                                      ; preds = %13
  %58 = icmp ult i32 %17, 1073717248
  br i1 %58, label %59, label %96

; <label>:59                                      ; preds = %57
  %60 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %61 = fadd x86_fp80 %60, 0xKBFFF8000000000000000
  %62 = fmul x86_fp80 %61, 0xK3FFBC068D41797354859
  %63 = fadd x86_fp80 %62, 0xK3FFFED15DFCC1E1FA493
  %64 = fmul x86_fp80 %61, %63
  %65 = fadd x86_fp80 %64, 0xKC000970E1DE3B589EC74
  %66 = fmul x86_fp80 %61, %65
  %67 = fadd x86_fp80 %66, 0xK400386A855EFABD2F1A5
  %68 = fmul x86_fp80 %61, %67
  %69 = fadd x86_fp80 %68, 0xK4004B16FB9B1509C0C90
  %70 = fmul x86_fp80 %61, %69
  %71 = fadd x86_fp80 %70, 0xKC004D590EFCBD7892BB3
  %72 = fmul x86_fp80 %61, %71
  %73 = fadd x86_fp80 %72, 0xK4006BC7B434EA78AEFB4
  %74 = fmul x86_fp80 %61, %73
  %75 = fadd x86_fp80 %74, 0xKBFFF89D991639982CCAF
  %76 = fadd x86_fp80 %61, 0xK400194854B0AA1806CA0
  %77 = fmul x86_fp80 %61, %76
  %78 = fadd x86_fp80 %77, 0xK4003A64BAFFEC56E6F95
  %79 = fmul x86_fp80 %61, %78
  %80 = fadd x86_fp80 %79, 0xK4004F2685A65A8D2812C
  %81 = fmul x86_fp80 %61, %80
  %82 = fadd x86_fp80 %81, 0xK40068BDF204103DF5006
  %83 = fmul x86_fp80 %61, %82
  %84 = fadd x86_fp80 %83, 0xK40078E4DB5574A8D0A2C
  %85 = fmul x86_fp80 %61, %84
  %86 = fadd x86_fp80 %85, 0xK4007A47663109BAFACB2
  %87 = fmul x86_fp80 %61, %86
  %88 = fadd x86_fp80 %87, 0xK4007E3F6935D7EB50540
  %89 = and i32 %3, 32768
  %90 = icmp eq i32 %89, 0
  %91 = fdiv x86_fp80 %75, %88
  br i1 %90, label %92, label %94

; <label>:92                                      ; preds = %59
  %93 = fadd x86_fp80 %91, 0xK3FFED8560B0000000000
  br label %189

; <label>:94                                      ; preds = %59
  %95 = fsub x86_fp80 0xKBFFED8560B0000000000, %91
  br label %189

; <label>:96                                      ; preds = %57
  %97 = icmp ugt i32 %17, 1073861972
  br i1 %97, label %98, label %101

; <label>:98                                      ; preds = %96
  %99 = and i32 %3, 32768
  %100 = icmp eq i32 %99, 0
  %. = select i1 %100, x86_fp80 0xK3FFF8000000000000000, x86_fp80 0xKBFFF8000000000000000
  br label %189

; <label>:101                                     ; preds = %96
  %102 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %103 = fmul x86_fp80 %102, %102
  %104 = fdiv x86_fp80 0xK3FFF8000000000000000, %103
  %105 = icmp ult i32 %17, 1073788635
  br i1 %105, label %106, label %140

; <label>:106                                     ; preds = %101
  %107 = fmul x86_fp80 %104, 0xK4006DE17776039C08D90
  %108 = fadd x86_fp80 %107, 0xK400A9537E11D629D5E93
  %109 = fmul x86_fp80 %104, %108
  %110 = fadd x86_fp80 %109, 0xK400BE3037CEDA5477EA6
  %111 = fmul x86_fp80 %104, %110
  %112 = fadd x86_fp80 %111, 0xK400C8B81019759F3B6EA
  %113 = fmul x86_fp80 %104, %112
  %114 = fadd x86_fp80 %113, 0xK400B9F044EC3FB200D87
  %115 = fmul x86_fp80 %104, %114
  %116 = fadd x86_fp80 %115, 0xK4009B073EC3E0C625EAF
  %117 = fmul x86_fp80 %104, %116
  %118 = fadd x86_fp80 %117, 0xK4006BA3C66512680507E
  %119 = fmul x86_fp80 %104, %118
  %120 = fadd x86_fp80 %119, 0xK4002A2E99A0AEEE04E8C
  %121 = fmul x86_fp80 %104, %120
  %122 = fadd x86_fp80 %121, 0xK3FFC8BA1147F23483020
  %123 = fadd x86_fp80 %104, 0xKC0068C396054B1AB12AE
  %124 = fmul x86_fp80 %104, %123
  %125 = fadd x86_fp80 %124, 0xKC00AB3A8A2BD1AE5892A
  %126 = fmul x86_fp80 %104, %125
  %127 = fadd x86_fp80 %126, 0xKC00CE2A80256FBB4CDAD
  %128 = fmul x86_fp80 %104, %127
  %129 = fadd x86_fp80 %128, 0xKC00DE105654EC58FFCF7
  %130 = fmul x86_fp80 %104, %129
  %131 = fadd x86_fp80 %130, 0xKC00DD0D5988E04C9308E
  %132 = fmul x86_fp80 %104, %131
  %133 = fadd x86_fp80 %132, 0xKC00CC2C8E24B636B5DB4
  %134 = fmul x86_fp80 %104, %133
  %135 = fadd x86_fp80 %134, 0xKC00AB851FF714D683071
  %136 = fmul x86_fp80 %104, %135
  %137 = fadd x86_fp80 %136, 0xKC007A5C82D562A7A71C7
  %138 = fmul x86_fp80 %104, %137
  %139 = fadd x86_fp80 %138, 0xKC002DD28548B26F49C21
  br label %168

; <label>:140                                     ; preds = %101
  %141 = fmul x86_fp80 %104, 0xKBFFFB35B767B1FAF5426
  %142 = fadd x86_fp80 %141, 0xKC001E23702E61492A1B2
  %143 = fmul x86_fp80 %104, %142
  %144 = fadd x86_fp80 %143, 0xKC0028D7A050450A2CC9B
  %145 = fmul x86_fp80 %104, %144
  %146 = fadd x86_fp80 %145, 0xKC00188C2DF6AD5D3AA0D
  %147 = fmul x86_fp80 %104, %146
  %148 = fadd x86_fp80 %147, 0xKBFFEEE91368B082A3D37
  %149 = fmul x86_fp80 %104, %148
  %150 = fadd x86_fp80 %149, 0xKBFFBC137900C35C6FA33
  %151 = fmul x86_fp80 %104, %150
  %152 = fadd x86_fp80 %151, 0xKBFF7840FC34A1215833D
  %153 = fmul x86_fp80 %104, %152
  %154 = fadd x86_fp80 %153, 0xKBFF0CC3ECBC79CC360D1
  %155 = fadd x86_fp80 %104, 0xK4002BD2128334D0429EA
  %156 = fmul x86_fp80 %104, %155
  %157 = fadd x86_fp80 %156, 0xK4003E5948A03597C3A41
  %158 = fmul x86_fp80 %104, %157
  %159 = fadd x86_fp80 %158, 0xK4003CA888BA1BCAABB46
  %160 = fmul x86_fp80 %104, %159
  %161 = fadd x86_fp80 %160, 0xK40029ED77F375E7AF590
  %162 = fmul x86_fp80 %104, %161
  %163 = fadd x86_fp80 %162, 0xK3FFFECE2088CB3DEBC0A
  %164 = fmul x86_fp80 %104, %163
  %165 = fadd x86_fp80 %164, 0xK3FFCA225643BF00BB255
  %166 = fmul x86_fp80 %104, %165
  %167 = fadd x86_fp80 %166, 0xK3FF7A1C04ED159F6AE68
  br label %168

; <label>:168                                     ; preds = %140, %106
  %S.0 = phi x86_fp80 [ %139, %106 ], [ %167, %140 ]
  %R.0 = phi x86_fp80 [ %122, %106 ], [ %154, %140 ]
  %169 = bitcast x86_fp80 %102 to i80
  %ins = and i80 %169, -4294967296
  %170 = bitcast i80 %ins to x86_fp80
  %171 = fsub x86_fp80 0xK80000000000000000000, %170
  %172 = fmul x86_fp80 %170, %171
  %173 = fadd x86_fp80 %172, 0xKBFFE9000000000000000
  %174 = tail call x86_fp80 @expl(x86_fp80 %173) nounwind optsize
  %175 = fsub x86_fp80 %170, %102
  %176 = fadd x86_fp80 %170, %102
  %177 = fmul x86_fp80 %175, %176
  %178 = fdiv x86_fp80 %R.0, %S.0
  %179 = fadd x86_fp80 %177, %178
  %180 = tail call x86_fp80 @expl(x86_fp80 %179) nounwind optsize
  %181 = fmul x86_fp80 %174, %180
  %182 = and i32 %3, 32768
  %183 = icmp eq i32 %182, 0
  %184 = fdiv x86_fp80 %181, %102
  br i1 %183, label %185, label %187

; <label>:185                                     ; preds = %168
  %186 = fsub x86_fp80 0xK3FFF8000000000000000, %184
  br label %189

; <label>:187                                     ; preds = %168
  %188 = fadd x86_fp80 %184, 0xKBFFF8000000000000000
  br label %189

; <label>:189                                     ; preds = %187, %185, %98, %94, %92, %31, %28, %23, %6
  %.0 = phi x86_fp80 [ %12, %6 ], [ %27, %23 ], [ %30, %28 ], [ %56, %31 ], [ %93, %92 ], [ %95, %94 ], [ %186, %185 ], [ %188, %187 ], [ %., %98 ]
  ret x86_fp80 %.0
}

define x86_fp80 @erfcl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp eq i32 %4, 32767
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %0
  %7 = lshr i80 %1, 78
  %.tr14 = trunc i80 %7 to i32
  %8 = and i32 %.tr14, 2
  %9 = uitofp i32 %8 to x86_fp80
  %10 = fdiv x86_fp80 0xK3FFF8000000000000000, %x
  %11 = fadd x86_fp80 %9, %10
  br label %211

; <label>:12                                      ; preds = %0
  %13 = lshr i80 %1, 48
  %14 = shl nuw nsw i32 %4, 16
  %.tr = trunc i80 %13 to i32
  %15 = and i32 %.tr, 65535
  %16 = or i32 %14, %15
  %17 = icmp ult i32 %16, 1073666048
  br i1 %17, label %18, label %55

; <label>:18                                      ; preds = %12
  %19 = icmp ult i32 %16, 1069416448
  br i1 %19, label %20, label %22

; <label>:20                                      ; preds = %18
  %21 = fsub x86_fp80 0xK3FFF8000000000000000, %x
  br label %211

; <label>:22                                      ; preds = %18
  %23 = fmul x86_fp80 %x, %x
  %24 = fmul x86_fp80 %23, 0xKC006A587F1999B164FE8
  %25 = fadd x86_fp80 %24, 0xKC00AA61D154777EB9519
  %26 = fmul x86_fp80 %23, %25
  %27 = fadd x86_fp80 %26, 0xKC00F85C36C1D991D946E
  %28 = fmul x86_fp80 %23, %27
  %29 = fadd x86_fp80 %28, 0xKC011A1D511887DC5E424
  %30 = fmul x86_fp80 %23, %29
  %31 = fadd x86_fp80 %30, 0xKC014AB6B55353EE251F9
  %32 = fmul x86_fp80 %23, %31
  %33 = fadd x86_fp80 %32, 0xK4013890DFACEC680CB0C
  %34 = fadd x86_fp80 %23, 0xK400688E3EA4B462EBBD9
  %35 = fmul x86_fp80 %23, %34
  %36 = fadd x86_fp80 %35, 0xK400B8CFCAC013C37575E
  %37 = fmul x86_fp80 %23, %36
  %38 = fadd x86_fp80 %37, 0xK400F917CA49D3A9B4669
  %39 = fmul x86_fp80 %23, %38
  %40 = fadd x86_fp80 %39, 0xK4012AC84BE0D9554997B
  %41 = fmul x86_fp80 %23, %40
  %42 = fadd x86_fp80 %41, 0xK4014E4A3D90F25C1EEE9
  %43 = fmul x86_fp80 %23, %42
  %44 = fadd x86_fp80 %43, 0xK40168572745F3EF624EE
  %45 = fdiv x86_fp80 %33, %44
  %46 = icmp ult i32 %16, 1073577984
  %47 = fmul x86_fp80 %45, %x
  br i1 %46, label %48, label %51

; <label>:48                                      ; preds = %22
  %49 = fadd x86_fp80 %47, %x
  %50 = fsub x86_fp80 0xK3FFF8000000000000000, %49
  br label %211

; <label>:51                                      ; preds = %22
  %52 = fadd x86_fp80 %x, 0xKBFFE8000000000000000
  %53 = fadd x86_fp80 %47, %52
  %54 = fsub x86_fp80 0xK3FFE8000000000000000, %53
  br label %211

; <label>:55                                      ; preds = %12
  %56 = icmp ult i32 %16, 1073717248
  br i1 %56, label %57, label %95

; <label>:57                                      ; preds = %55
  %58 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %59 = fadd x86_fp80 %58, 0xKBFFF8000000000000000
  %60 = fmul x86_fp80 %59, 0xK3FFBC068D41797354859
  %61 = fadd x86_fp80 %60, 0xK3FFFED15DFCC1E1FA493
  %62 = fmul x86_fp80 %59, %61
  %63 = fadd x86_fp80 %62, 0xKC000970E1DE3B589EC74
  %64 = fmul x86_fp80 %59, %63
  %65 = fadd x86_fp80 %64, 0xK400386A855EFABD2F1A5
  %66 = fmul x86_fp80 %59, %65
  %67 = fadd x86_fp80 %66, 0xK4004B16FB9B1509C0C90
  %68 = fmul x86_fp80 %59, %67
  %69 = fadd x86_fp80 %68, 0xKC004D590EFCBD7892BB3
  %70 = fmul x86_fp80 %59, %69
  %71 = fadd x86_fp80 %70, 0xK4006BC7B434EA78AEFB4
  %72 = fmul x86_fp80 %59, %71
  %73 = fadd x86_fp80 %72, 0xKBFFF89D991639982CCAF
  %74 = fadd x86_fp80 %59, 0xK400194854B0AA1806CA0
  %75 = fmul x86_fp80 %59, %74
  %76 = fadd x86_fp80 %75, 0xK4003A64BAFFEC56E6F95
  %77 = fmul x86_fp80 %59, %76
  %78 = fadd x86_fp80 %77, 0xK4004F2685A65A8D2812C
  %79 = fmul x86_fp80 %59, %78
  %80 = fadd x86_fp80 %79, 0xK40068BDF204103DF5006
  %81 = fmul x86_fp80 %59, %80
  %82 = fadd x86_fp80 %81, 0xK40078E4DB5574A8D0A2C
  %83 = fmul x86_fp80 %59, %82
  %84 = fadd x86_fp80 %83, 0xK4007A47663109BAFACB2
  %85 = fmul x86_fp80 %59, %84
  %86 = fadd x86_fp80 %85, 0xK4007E3F6935D7EB50540
  %87 = and i32 %3, 32768
  %88 = icmp eq i32 %87, 0
  %89 = fdiv x86_fp80 %73, %86
  br i1 %88, label %90, label %92

; <label>:90                                      ; preds = %57
  %91 = fsub x86_fp80 0xK3FFC9EA7D40000000000, %89
  br label %211

; <label>:92                                      ; preds = %57
  %93 = fadd x86_fp80 %89, 0xK3FFED8560B0000000000
  %94 = fadd x86_fp80 %93, 0xK3FFF8000000000000000
  br label %211

; <label>:95                                      ; preds = %55
  %96 = icmp ult i32 %16, 1074124288
  br i1 %96, label %97, label %208

; <label>:97                                      ; preds = %95
  %98 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %99 = fmul x86_fp80 %98, %98
  %100 = fdiv x86_fp80 0xK3FFF8000000000000000, %99
  %101 = icmp ult i32 %16, 1073788635
  br i1 %101, label %102, label %136

; <label>:102                                     ; preds = %97
  %103 = fmul x86_fp80 %100, 0xK4006DE17776039C08D90
  %104 = fadd x86_fp80 %103, 0xK400A9537E11D629D5E93
  %105 = fmul x86_fp80 %100, %104
  %106 = fadd x86_fp80 %105, 0xK400BE3037CEDA5477EA6
  %107 = fmul x86_fp80 %100, %106
  %108 = fadd x86_fp80 %107, 0xK400C8B81019759F3B6EA
  %109 = fmul x86_fp80 %100, %108
  %110 = fadd x86_fp80 %109, 0xK400B9F044EC3FB200D87
  %111 = fmul x86_fp80 %100, %110
  %112 = fadd x86_fp80 %111, 0xK4009B073EC3E0C625EAF
  %113 = fmul x86_fp80 %100, %112
  %114 = fadd x86_fp80 %113, 0xK4006BA3C66512680507E
  %115 = fmul x86_fp80 %100, %114
  %116 = fadd x86_fp80 %115, 0xK4002A2E99A0AEEE04E8C
  %117 = fmul x86_fp80 %100, %116
  %118 = fadd x86_fp80 %117, 0xK3FFC8BA1147F23483020
  %119 = fadd x86_fp80 %100, 0xKC0068C396054B1AB12AE
  %120 = fmul x86_fp80 %100, %119
  %121 = fadd x86_fp80 %120, 0xKC00AB3A8A2BD1AE5892A
  %122 = fmul x86_fp80 %100, %121
  %123 = fadd x86_fp80 %122, 0xKC00CE2A80256FBB4CDAD
  %124 = fmul x86_fp80 %100, %123
  %125 = fadd x86_fp80 %124, 0xKC00DE105654EC58FFCF7
  %126 = fmul x86_fp80 %100, %125
  %127 = fadd x86_fp80 %126, 0xKC00DD0D5988E04C9308E
  %128 = fmul x86_fp80 %100, %127
  %129 = fadd x86_fp80 %128, 0xKC00CC2C8E24B636B5DB4
  %130 = fmul x86_fp80 %100, %129
  %131 = fadd x86_fp80 %130, 0xKC00AB851FF714D683071
  %132 = fmul x86_fp80 %100, %131
  %133 = fadd x86_fp80 %132, 0xKC007A5C82D562A7A71C7
  %134 = fmul x86_fp80 %100, %133
  %135 = fadd x86_fp80 %134, 0xKC002DD28548B26F49C21
  br label %189

; <label>:136                                     ; preds = %97
  %137 = icmp ult i32 %16, 1073861973
  br i1 %137, label %138, label %166

; <label>:138                                     ; preds = %136
  %139 = fmul x86_fp80 %100, 0xKBFFFB35B767B1FAF5426
  %140 = fadd x86_fp80 %139, 0xKC001E23702E61492A1B2
  %141 = fmul x86_fp80 %100, %140
  %142 = fadd x86_fp80 %141, 0xKC0028D7A050450A2CC9B
  %143 = fmul x86_fp80 %100, %142
  %144 = fadd x86_fp80 %143, 0xKC00188C2DF6AD5D3AA0D
  %145 = fmul x86_fp80 %100, %144
  %146 = fadd x86_fp80 %145, 0xKBFFEEE91368B082A3D37
  %147 = fmul x86_fp80 %100, %146
  %148 = fadd x86_fp80 %147, 0xKBFFBC137900C35C6FA33
  %149 = fmul x86_fp80 %100, %148
  %150 = fadd x86_fp80 %149, 0xKBFF7840FC34A1215833D
  %151 = fmul x86_fp80 %100, %150
  %152 = fadd x86_fp80 %151, 0xKBFF0CC3ECBC79CC360D1
  %153 = fadd x86_fp80 %100, 0xK4002BD2128334D0429EA
  %154 = fmul x86_fp80 %100, %153
  %155 = fadd x86_fp80 %154, 0xK4003E5948A03597C3A41
  %156 = fmul x86_fp80 %100, %155
  %157 = fadd x86_fp80 %156, 0xK4003CA888BA1BCAABB46
  %158 = fmul x86_fp80 %100, %157
  %159 = fadd x86_fp80 %158, 0xK40029ED77F375E7AF590
  %160 = fmul x86_fp80 %100, %159
  %161 = fadd x86_fp80 %160, 0xK3FFFECE2088CB3DEBC0A
  %162 = fmul x86_fp80 %100, %161
  %163 = fadd x86_fp80 %162, 0xK3FFCA225643BF00BB255
  %164 = fmul x86_fp80 %100, %163
  %165 = fadd x86_fp80 %164, 0xK3FF7A1C04ED159F6AE68
  br label %189

; <label>:166                                     ; preds = %136
  %167 = and i32 %3, 32768
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %211

; <label>:169                                     ; preds = %166
  %170 = fmul x86_fp80 %100, 0xKBFFF83C37E35AEFE08A5
  %171 = fadd x86_fp80 %170, 0xKBFFFE1F611A68108769A
  %172 = fmul x86_fp80 %100, %171
  %173 = fadd x86_fp80 %172, 0xKBFFEC08BE0F3198D261E
  %174 = fmul x86_fp80 %100, %173
  %175 = fadd x86_fp80 %174, 0xKBFFBE9D03DEA0628E5B6
  %176 = fmul x86_fp80 %100, %175
  %177 = fadd x86_fp80 %176, 0xKBFF7CC992C826973D624
  %178 = fmul x86_fp80 %100, %177
  %179 = fadd x86_fp80 %178, 0xKBFF1AE0E3B7F13E29D19
  %180 = fadd x86_fp80 %100, 0xK4001A02A6A7B20F65C06
  %181 = fmul x86_fp80 %100, %180
  %182 = fadd x86_fp80 %181, 0xK40019DFA2BCCE78B3201
  %183 = fmul x86_fp80 %100, %182
  %184 = fadd x86_fp80 %183, 0xK3FFFD1CCE147F28CFE7F
  %185 = fmul x86_fp80 %100, %184
  %186 = fadd x86_fp80 %185, 0xK3FFCD377BBB27F6AFCD4
  %187 = fmul x86_fp80 %100, %186
  %188 = fadd x86_fp80 %187, 0xK3FF889D7B4591D2BD98B
  br label %189

; <label>:189                                     ; preds = %169, %138, %102
  %S.0 = phi x86_fp80 [ %135, %102 ], [ %165, %138 ], [ %188, %169 ]
  %R.0 = phi x86_fp80 [ %118, %102 ], [ %152, %138 ], [ %179, %169 ]
  %190 = bitcast x86_fp80 %98 to i80
  %ins = and i80 %190, -1099511627776
  %191 = bitcast i80 %ins to x86_fp80
  %192 = fsub x86_fp80 0xK80000000000000000000, %191
  %193 = fmul x86_fp80 %191, %192
  %194 = fadd x86_fp80 %193, 0xKBFFE9000000000000000
  %195 = tail call x86_fp80 @expl(x86_fp80 %194) nounwind optsize
  %196 = fsub x86_fp80 %191, %98
  %197 = fadd x86_fp80 %191, %98
  %198 = fmul x86_fp80 %196, %197
  %199 = fdiv x86_fp80 %R.0, %S.0
  %200 = fadd x86_fp80 %198, %199
  %201 = tail call x86_fp80 @expl(x86_fp80 %200) nounwind optsize
  %202 = fmul x86_fp80 %195, %201
  %203 = and i32 %3, 32768
  %204 = icmp eq i32 %203, 0
  %205 = fdiv x86_fp80 %202, %98
  br i1 %204, label %211, label %206

; <label>:206                                     ; preds = %189
  %207 = fsub x86_fp80 0xK40008000000000000000, %205
  br label %211

; <label>:208                                     ; preds = %95
  %209 = and i32 %3, 32768
  %210 = icmp eq i32 %209, 0
  %. = select i1 %210, x86_fp80 0xK00000000000000000000, x86_fp80 0xK40008000000000000000
  br label %211

; <label>:211                                     ; preds = %208, %206, %189, %166, %92, %90, %51, %48, %20, %6
  %.0 = phi x86_fp80 [ %11, %6 ], [ %21, %20 ], [ %50, %48 ], [ %54, %51 ], [ %91, %90 ], [ %94, %92 ], [ %207, %206 ], [ 0xK40008000000000000000, %166 ], [ %205, %189 ], [ %., %208 ]
  ret x86_fp80 %.0
}

define double @erf(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %0
  %7 = lshr i64 %1, 62
  %.tr = trunc i64 %7 to i32
  %8 = and i32 %.tr, 2
  %9 = sub nsw i32 1, %8
  %10 = sitofp i32 %9 to double
  %11 = fdiv double 1.000000e+00, %x
  %12 = fadd double %10, %11
  br label %169

; <label>:13                                      ; preds = %0
  %14 = icmp ult i32 %4, 1072365568
  br i1 %14, label %15, label %50

; <label>:15                                      ; preds = %13
  %16 = icmp ult i32 %4, 1043333120
  br i1 %16, label %17, label %27

; <label>:17                                      ; preds = %15
  %18 = icmp ult i32 %4, 8388608
  br i1 %18, label %19, label %24

; <label>:19                                      ; preds = %17
  %20 = fmul double %x, 8.000000e+00
  %21 = fmul double %x, 0x3FF06EBA8214DB69
  %22 = fadd double %20, %21
  %23 = fmul double %22, 1.250000e-01
  br label %169

; <label>:24                                      ; preds = %17
  %25 = fmul double %x, 0x3FC06EBA8214DB69
  %26 = fadd double %25, %x
  br label %169

; <label>:27                                      ; preds = %15
  %28 = fmul double %x, %x
  %29 = fmul double %28, 0xBEF8EAD6120016AC
  %30 = fadd double %29, 0xBF77A291236668E4
  %31 = fmul double %28, %30
  %32 = fadd double %31, 0xBF9D2A51DBD7194F
  %33 = fmul double %28, %32
  %34 = fadd double %33, 0xBFD4CD7D691CB913
  %35 = fmul double %28, %34
  %36 = fadd double %35, 0x3FC06EBA8214DB68
  %37 = fmul double %28, 0xBED09C4342A26120
  %38 = fadd double %37, 0x3F215DC9221C1A10
  %39 = fmul double %28, %38
  %40 = fadd double %39, 0x3F74D022C4D36B0F
  %41 = fmul double %28, %40
  %42 = fadd double %41, 0x3FB0A54C5536CEBA
  %43 = fmul double %28, %42
  %44 = fadd double %43, 0x3FD97779CDDADC09
  %45 = fmul double %28, %44
  %46 = fadd double %45, 1.000000e+00
  %47 = fdiv double %36, %46
  %48 = fmul double %47, %x
  %49 = fadd double %48, %x
  br label %169

; <label>:50                                      ; preds = %13
  %51 = icmp ult i32 %4, 1072955392
  br i1 %51, label %52, label %85

; <label>:52                                      ; preds = %50
  %53 = tail call double @fabs(double %x) nounwind optsize
  %54 = fadd double %53, -1.000000e+00
  %55 = fmul double %54, 0xBF61BF380A96073F
  %56 = fadd double %55, 0x3FA22A36599795EB
  %57 = fmul double %54, %56
  %58 = fadd double %57, 0xBFBC63983D3E28EC
  %59 = fmul double %54, %58
  %60 = fadd double %59, 0x3FD45FCA805120E4
  %61 = fmul double %54, %60
  %62 = fadd double %61, 0xBFD7D240FBB8C3F1
  %63 = fmul double %54, %62
  %64 = fadd double %63, 0x3FDA8D00AD92B34D
  %65 = fmul double %54, %64
  %66 = fadd double %65, 0xBF6359B8BEF77538
  %67 = fmul double %54, 0x3F888B545735151D
  %68 = fadd double %67, 0x3F8BEDC26B51DD1C
  %69 = fmul double %54, %68
  %70 = fadd double %69, 0x3FC02660E763351F
  %71 = fmul double %54, %70
  %72 = fadd double %71, 0x3FB2635CD99FE9A7
  %73 = fmul double %54, %72
  %74 = fadd double %73, 0x3FE14AF092EB6F33
  %75 = fmul double %54, %74
  %76 = fadd double %75, 0x3FBB3E6618EEE323
  %77 = fmul double %54, %76
  %78 = fadd double %77, 1.000000e+00
  %79 = icmp sgt i32 %3, -1
  %80 = fdiv double %66, %78
  br i1 %79, label %81, label %83

; <label>:81                                      ; preds = %52
  %82 = fadd double %80, 0x3FEB0AC160000000
  br label %169

; <label>:83                                      ; preds = %52
  %84 = fsub double 0xBFEB0AC160000000, %80
  br label %169

; <label>:85                                      ; preds = %50
  %86 = icmp ugt i32 %4, 1075314687
  br i1 %86, label %87, label %89

; <label>:87                                      ; preds = %85
  %88 = icmp sgt i32 %3, -1
  %. = select i1 %88, double 1.000000e+00, double -1.000000e+00
  br label %169

; <label>:89                                      ; preds = %85
  %90 = tail call double @fabs(double %x) nounwind optsize
  %91 = fmul double %90, %90
  %92 = fdiv double 1.000000e+00, %91
  %93 = icmp ult i32 %4, 1074191214
  br i1 %93, label %94, label %123

; <label>:94                                      ; preds = %89
  %95 = fmul double %92, 0xC023A0EFC69AC25C
  %96 = fadd double %95, 0xC054526557E4D2F2
  %97 = fmul double %92, %96
  %98 = fadd double %97, 0xC067135CEBCCABB2
  %99 = fmul double %92, %98
  %100 = fadd double %99, 0xC0644CB184282266
  %101 = fmul double %92, %100
  %102 = fadd double %101, 0xC04F300AE4CBA38D
  %103 = fmul double %92, %102
  %104 = fadd double %103, 0xC0251E0441B0E726
  %105 = fmul double %92, %104
  %106 = fadd double %105, 0xBFE63416E4BA7360
  %107 = fmul double %92, %106
  %108 = fadd double %107, 0xBF843412600D6435
  %109 = fmul double %92, 0xBFAEEFF2EE749A62
  %110 = fadd double %109, 0x401A47EF8E484A93
  %111 = fmul double %92, %110
  %112 = fadd double %111, 0x405B28A3EE48AE2C
  %113 = fmul double %92, %112
  %114 = fadd double %113, 0x407AD02157700314
  %115 = fmul double %92, %114
  %116 = fadd double %115, 0x40842B1921EC2868
  %117 = fmul double %92, %116
  %118 = fadd double %117, 0x407B290DD58A1A71
  %119 = fmul double %92, %118
  %120 = fadd double %119, 0x4061350C526AE721
  %121 = fmul double %92, %120
  %122 = fadd double %121, 0x4033A6B9BD707687
  br label %148

; <label>:123                                     ; preds = %89
  %124 = fmul double %92, 0xC07E384E9BDC383F
  %125 = fadd double %124, 0xC09004616A2E5992
  %126 = fmul double %92, %125
  %127 = fadd double %126, 0xC083EC881375F228
  %128 = fmul double %92, %127
  %129 = fadd double %128, 0xC064145D43C5ED98
  %130 = fmul double %92, %129
  %131 = fadd double %130, 0xC031C209555F995A
  %132 = fmul double %92, %131
  %133 = fadd double %132, 0xBFE993BA70C285DE
  %134 = fmul double %92, %133
  %135 = fadd double %134, 0xBF84341239E86F4A
  %136 = fmul double %92, 0xC03670E242712D62
  %137 = fadd double %136, 0x407DA874E79FE763
  %138 = fmul double %92, %137
  %139 = fadd double %138, 0x40A3F219CEDF3BE6
  %140 = fmul double %92, %139
  %141 = fadd double %140, 0x40A8FFB7688C246A
  %142 = fmul double %92, %141
  %143 = fadd double %142, 0x409802EB189D5118
  %144 = fmul double %92, %143
  %145 = fadd double %144, 0x40745CAE221B9F0A
  %146 = fmul double %92, %145
  %147 = fadd double %146, 0x403E568B261D5190
  br label %148

; <label>:148                                     ; preds = %123, %94
  %.pn = phi double [ %122, %94 ], [ %147, %123 ]
  %R.0 = phi double [ %108, %94 ], [ %135, %123 ]
  %S.0.in = fmul double %92, %.pn
  %S.0 = fadd double %S.0.in, 1.000000e+00
  %149 = bitcast double %90 to i64
  %150 = and i64 %149, -4294967296
  %151 = bitcast i64 %150 to double
  %152 = fsub double -0.000000e+00, %151
  %153 = fmul double %151, %152
  %154 = fadd double %153, -5.625000e-01
  %155 = tail call double @exp(double %154) nounwind optsize
  %156 = fsub double %151, %90
  %157 = fadd double %151, %90
  %158 = fmul double %156, %157
  %159 = fdiv double %R.0, %S.0
  %160 = fadd double %158, %159
  %161 = tail call double @exp(double %160) nounwind optsize
  %162 = fmul double %155, %161
  %163 = icmp sgt i32 %3, -1
  %164 = fdiv double %162, %90
  br i1 %163, label %165, label %167

; <label>:165                                     ; preds = %148
  %166 = fsub double 1.000000e+00, %164
  br label %169

; <label>:167                                     ; preds = %148
  %168 = fadd double %164, -1.000000e+00
  br label %169

; <label>:169                                     ; preds = %167, %165, %87, %83, %81, %27, %24, %19, %6
  %.0 = phi double [ %12, %6 ], [ %23, %19 ], [ %26, %24 ], [ %49, %27 ], [ %82, %81 ], [ %84, %83 ], [ %166, %165 ], [ %168, %167 ], [ %., %87 ]
  ret double %.0
}

define double @erfc(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %0
  %7 = lshr i64 %1, 62
  %.tr = trunc i64 %7 to i32
  %8 = and i32 %.tr, 2
  %9 = uitofp i32 %8 to double
  %10 = fdiv double 1.000000e+00, %x
  %11 = fadd double %9, %10
  br label %169

; <label>:12                                      ; preds = %0
  %13 = icmp ult i32 %4, 1072365568
  br i1 %13, label %14, label %48

; <label>:14                                      ; preds = %12
  %15 = icmp ult i32 %4, 1013972992
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %14
  %17 = fsub double 1.000000e+00, %x
  br label %169

; <label>:18                                      ; preds = %14
  %19 = fmul double %x, %x
  %20 = fmul double %19, 0xBEF8EAD6120016AC
  %21 = fadd double %20, 0xBF77A291236668E4
  %22 = fmul double %19, %21
  %23 = fadd double %22, 0xBF9D2A51DBD7194F
  %24 = fmul double %19, %23
  %25 = fadd double %24, 0xBFD4CD7D691CB913
  %26 = fmul double %19, %25
  %27 = fadd double %26, 0x3FC06EBA8214DB68
  %28 = fmul double %19, 0xBED09C4342A26120
  %29 = fadd double %28, 0x3F215DC9221C1A10
  %30 = fmul double %19, %29
  %31 = fadd double %30, 0x3F74D022C4D36B0F
  %32 = fmul double %19, %31
  %33 = fadd double %32, 0x3FB0A54C5536CEBA
  %34 = fmul double %19, %33
  %35 = fadd double %34, 0x3FD97779CDDADC09
  %36 = fmul double %19, %35
  %37 = fadd double %36, 1.000000e+00
  %38 = fdiv double %27, %37
  %39 = icmp slt i32 %3, 1070596096
  %40 = fmul double %38, %x
  br i1 %39, label %41, label %44

; <label>:41                                      ; preds = %18
  %42 = fadd double %40, %x
  %43 = fsub double 1.000000e+00, %42
  br label %169

; <label>:44                                      ; preds = %18
  %45 = fadd double %x, -5.000000e-01
  %46 = fadd double %40, %45
  %47 = fsub double 5.000000e-01, %46
  br label %169

; <label>:48                                      ; preds = %12
  %49 = icmp ult i32 %4, 1072955392
  br i1 %49, label %50, label %84

; <label>:50                                      ; preds = %48
  %51 = tail call double @fabs(double %x) nounwind optsize
  %52 = fadd double %51, -1.000000e+00
  %53 = fmul double %52, 0xBF61BF380A96073F
  %54 = fadd double %53, 0x3FA22A36599795EB
  %55 = fmul double %52, %54
  %56 = fadd double %55, 0xBFBC63983D3E28EC
  %57 = fmul double %52, %56
  %58 = fadd double %57, 0x3FD45FCA805120E4
  %59 = fmul double %52, %58
  %60 = fadd double %59, 0xBFD7D240FBB8C3F1
  %61 = fmul double %52, %60
  %62 = fadd double %61, 0x3FDA8D00AD92B34D
  %63 = fmul double %52, %62
  %64 = fadd double %63, 0xBF6359B8BEF77538
  %65 = fmul double %52, 0x3F888B545735151D
  %66 = fadd double %65, 0x3F8BEDC26B51DD1C
  %67 = fmul double %52, %66
  %68 = fadd double %67, 0x3FC02660E763351F
  %69 = fmul double %52, %68
  %70 = fadd double %69, 0x3FB2635CD99FE9A7
  %71 = fmul double %52, %70
  %72 = fadd double %71, 0x3FE14AF092EB6F33
  %73 = fmul double %52, %72
  %74 = fadd double %73, 0x3FBB3E6618EEE323
  %75 = fmul double %52, %74
  %76 = fadd double %75, 1.000000e+00
  %77 = icmp sgt i32 %3, -1
  %78 = fdiv double %64, %76
  br i1 %77, label %79, label %81

; <label>:79                                      ; preds = %50
  %80 = fsub double 0x3FC3D4FA80000000, %78
  br label %169

; <label>:81                                      ; preds = %50
  %82 = fadd double %78, 0x3FEB0AC160000000
  %83 = fadd double %82, 1.000000e+00
  br label %169

; <label>:84                                      ; preds = %48
  %85 = icmp ult i32 %4, 1077673984
  br i1 %85, label %86, label %167

; <label>:86                                      ; preds = %84
  %87 = tail call double @fabs(double %x) nounwind optsize
  %88 = fmul double %87, %87
  %89 = fdiv double 1.000000e+00, %88
  %90 = icmp ult i32 %4, 1074191213
  br i1 %90, label %91, label %120

; <label>:91                                      ; preds = %86
  %92 = fmul double %89, 0xC023A0EFC69AC25C
  %93 = fadd double %92, 0xC054526557E4D2F2
  %94 = fmul double %89, %93
  %95 = fadd double %94, 0xC067135CEBCCABB2
  %96 = fmul double %89, %95
  %97 = fadd double %96, 0xC0644CB184282266
  %98 = fmul double %89, %97
  %99 = fadd double %98, 0xC04F300AE4CBA38D
  %100 = fmul double %89, %99
  %101 = fadd double %100, 0xC0251E0441B0E726
  %102 = fmul double %89, %101
  %103 = fadd double %102, 0xBFE63416E4BA7360
  %104 = fmul double %89, %103
  %105 = fadd double %104, 0xBF843412600D6435
  %106 = fmul double %89, 0xBFAEEFF2EE749A62
  %107 = fadd double %106, 0x401A47EF8E484A93
  %108 = fmul double %89, %107
  %109 = fadd double %108, 0x405B28A3EE48AE2C
  %110 = fmul double %89, %109
  %111 = fadd double %110, 0x407AD02157700314
  %112 = fmul double %89, %111
  %113 = fadd double %112, 0x40842B1921EC2868
  %114 = fmul double %89, %113
  %115 = fadd double %114, 0x407B290DD58A1A71
  %116 = fmul double %89, %115
  %117 = fadd double %116, 0x4061350C526AE721
  %118 = fmul double %89, %117
  %119 = fadd double %118, 0x4033A6B9BD707687
  br label %148

; <label>:120                                     ; preds = %86
  %121 = icmp slt i32 %3, 0
  %122 = icmp ugt i32 %4, 1075314687
  %or.cond = and i1 %121, %122
  br i1 %or.cond, label %169, label %123

; <label>:123                                     ; preds = %120
  %124 = fmul double %89, 0xC07E384E9BDC383F
  %125 = fadd double %124, 0xC09004616A2E5992
  %126 = fmul double %89, %125
  %127 = fadd double %126, 0xC083EC881375F228
  %128 = fmul double %89, %127
  %129 = fadd double %128, 0xC064145D43C5ED98
  %130 = fmul double %89, %129
  %131 = fadd double %130, 0xC031C209555F995A
  %132 = fmul double %89, %131
  %133 = fadd double %132, 0xBFE993BA70C285DE
  %134 = fmul double %89, %133
  %135 = fadd double %134, 0xBF84341239E86F4A
  %136 = fmul double %89, 0xC03670E242712D62
  %137 = fadd double %136, 0x407DA874E79FE763
  %138 = fmul double %89, %137
  %139 = fadd double %138, 0x40A3F219CEDF3BE6
  %140 = fmul double %89, %139
  %141 = fadd double %140, 0x40A8FFB7688C246A
  %142 = fmul double %89, %141
  %143 = fadd double %142, 0x409802EB189D5118
  %144 = fmul double %89, %143
  %145 = fadd double %144, 0x40745CAE221B9F0A
  %146 = fmul double %89, %145
  %147 = fadd double %146, 0x403E568B261D5190
  br label %148

; <label>:148                                     ; preds = %123, %91
  %.pn = phi double [ %119, %91 ], [ %147, %123 ]
  %R.0 = phi double [ %105, %91 ], [ %135, %123 ]
  %S.0.in = fmul double %89, %.pn
  %S.0 = fadd double %S.0.in, 1.000000e+00
  %149 = bitcast double %87 to i64
  %150 = and i64 %149, -4294967296
  %151 = bitcast i64 %150 to double
  %152 = fsub double -0.000000e+00, %151
  %153 = fmul double %151, %152
  %154 = fadd double %153, -5.625000e-01
  %155 = tail call double @exp(double %154) nounwind optsize
  %156 = fsub double %151, %87
  %157 = fadd double %151, %87
  %158 = fmul double %156, %157
  %159 = fdiv double %R.0, %S.0
  %160 = fadd double %158, %159
  %161 = tail call double @exp(double %160) nounwind optsize
  %162 = fmul double %155, %161
  %163 = icmp sgt i32 %3, 0
  %164 = fdiv double %162, %87
  br i1 %163, label %169, label %165

; <label>:165                                     ; preds = %148
  %166 = fsub double 2.000000e+00, %164
  br label %169

; <label>:167                                     ; preds = %84
  %168 = icmp sgt i32 %3, 0
  %. = select i1 %168, double 0.000000e+00, double 2.000000e+00
  br label %169

; <label>:169                                     ; preds = %167, %165, %148, %120, %81, %79, %44, %41, %16, %6
  %.0 = phi double [ %11, %6 ], [ %17, %16 ], [ %43, %41 ], [ %47, %44 ], [ %80, %79 ], [ %83, %81 ], [ %166, %165 ], [ 2.000000e+00, %120 ], [ %164, %148 ], [ %., %167 ]
  ret double %.0
}

define void @vwarn(i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %1, i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind optsize
  tail call void @perror(i8* getelementptr inbounds ([1 x i8]* @.str101, i64 0, i64 0)) nounwind optsize
  ret void
}

define void @vwarnx(i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %1, i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind optsize
  %3 = tail call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @putc to i32 (i32, %struct.__FILE_s*)*)(i32 10, %struct.__FILE_s* %1) nounwind optsize
  ret void
}

define void @verr(i32 %status, i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %1, i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind optsize
  tail call void @perror(i8* getelementptr inbounds ([1 x i8]* @.str101, i64 0, i64 0)) nounwind optsize
  tail call void @exit(i32 %status) nounwind optsize
  ret void
}

define void @verrx(i32 %status, i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %1, i8* %fmt, %struct.__va_list_tag.48* %ap) nounwind optsize
  %3 = tail call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @putc to i32 (i32, %struct.__FILE_s*)*)(i32 10, %struct.__FILE_s* %1) nounwind optsize
  tail call void @exit(i32 %status) nounwind optsize
  ret void
}

define void @warn(i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.48], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.48]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.48]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %4 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %3, i8* %fmt, %struct.__va_list_tag.48* %1) nounwind optsize
  call void @perror(i8* getelementptr inbounds ([1 x i8]* @.str101, i64 0, i64 0)) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret void
}

define void @warnx(i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.48], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.48]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.48]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %4 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %3, i8* %fmt, %struct.__va_list_tag.48* %1) nounwind optsize
  %5 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @putc to i32 (i32, %struct.__FILE_s*)*)(i32 10, %struct.__FILE_s* %3) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret void
}

define void @err(i32 %status, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.48], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.48]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.48]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %4 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %3, i8* %fmt, %struct.__va_list_tag.48* %1) nounwind optsize
  call void @perror(i8* getelementptr inbounds ([1 x i8]* @.str101, i64 0, i64 0)) nounwind optsize
  call void @exit(i32 %status) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret void
}

define void @errx(i32 %status, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.48], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.48]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.48]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %4 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %3, i8* %fmt, %struct.__va_list_tag.48* %1) nounwind optsize
  %5 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @putc to i32 (i32, %struct.__FILE_s*)*)(i32 10, %struct.__FILE_s* %3) nounwind optsize
  call void @exit(i32 %status) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret void
}

define i32 @eventfd(i32 %count, i32 %flags) nounwind uwtable optsize {
  %1 = icmp ne i32 %flags, 0
  %2 = select i1 %1, i64 356, i64 351
  %3 = zext i32 %count to i64
  %4 = sext i32 %flags to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 %2, i64 %3, i64 %4, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @eventfd_read(i32 %fd, i64* %value) nounwind uwtable optsize {
  %1 = bitcast i64* %value to i8*
  %2 = tail call i64 @read(i32 %fd, i8* %1, i64 8) nounwind optsize
  %not. = icmp ne i64 %2, 8
  %3 = sext i1 %not. to i32
  ret i32 %3
}

define i32 @eventfd_write(i32 %fd, i64 %value) nounwind uwtable optsize {
  %1 = alloca i64, align 8
  store i64 %value, i64* %1, align 8, !tbaa !5
  %2 = bitcast i64* %1 to i8*
  %3 = call i64 @write(i32 %fd, i8* %2, i64 8) nounwind optsize
  %not. = icmp ne i64 %3, 8
  %4 = sext i1 %not. to i32
  ret i32 %4
}

define i32 @execle(i8* %path, i8* %argv0, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.49], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.49]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.49]* %ap, i64 0, i64 0, i32 0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag.49]* %ap, i64 0, i64 0, i32 3
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.49]* %ap, i64 0, i64 0, i32 2
  %.pre = load i32* %2, align 16
  br label %5

; <label>:5                                       ; preds = %21, %0
  %6 = phi i32 [ %17, %21 ], [ %.pre, %0 ]
  %indvars.iv4 = phi i32 [ %indvars.iv.next5, %21 ], [ 1, %0 ]
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %5
  %9 = load i8** %3, align 16
  %10 = sext i32 %6 to i64
  %11 = getelementptr i8* %9, i64 %10
  %12 = add i32 %6, 8
  store i32 %12, i32* %2, align 16
  br label %16

; <label>:13                                      ; preds = %5
  %14 = load i8** %4, align 8
  %15 = getelementptr i8* %14, i64 8
  store i8* %15, i8** %4, align 8
  br label %16

; <label>:16                                      ; preds = %13, %8
  %17 = phi i32 [ %12, %8 ], [ %6, %13 ]
  %.in = phi i8* [ %11, %8 ], [ %14, %13 ]
  %18 = bitcast i8* %.in to i8**
  %19 = load i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %22, label %21

; <label>:21                                      ; preds = %16
  %indvars.iv.next5 = add i32 %indvars.iv4, 1
  br label %5

; <label>:22                                      ; preds = %16
  call void @llvm.va_end(i8* %1)
  %23 = add nsw i32 %indvars.iv4, 1
  %24 = zext i32 %23 to i64
  %25 = alloca i8*, i64 %24, align 16
  call void @llvm.va_start(i8* %1)
  store i8* %argv0, i8** %25, align 16, !tbaa !7
  %26 = icmp sgt i32 %indvars.iv4, 1
  %.pre6 = load i32* %2, align 16
  br i1 %26, label %.lr.ph, label %._crit_edge7

.lr.ph:                                           ; preds = %37, %22
  %27 = phi i32 [ %38, %37 ], [ %.pre6, %22 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %37 ], [ 1, %22 ]
  %28 = icmp ult i32 %27, 41
  br i1 %28, label %29, label %34

; <label>:29                                      ; preds = %.lr.ph
  %30 = load i8** %3, align 16
  %31 = sext i32 %27 to i64
  %32 = getelementptr i8* %30, i64 %31
  %33 = add i32 %27, 8
  store i32 %33, i32* %2, align 16
  br label %37

; <label>:34                                      ; preds = %.lr.ph
  %35 = load i8** %4, align 8
  %36 = getelementptr i8* %35, i64 8
  store i8* %36, i8** %4, align 8
  br label %37

; <label>:37                                      ; preds = %34, %29
  %38 = phi i32 [ %33, %29 ], [ %27, %34 ]
  %.in2 = phi i8* [ %32, %29 ], [ %35, %34 ]
  %39 = bitcast i8* %.in2 to i8**
  %40 = load i8** %39, align 8
  %41 = getelementptr inbounds i8** %25, i64 %indvars.iv
  store i8* %40, i8** %41, align 8, !tbaa !7
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %indvars.iv4
  br i1 %exitcond, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %37
  %phitmp = sext i32 %indvars.iv4 to i64
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge, %22
  %42 = phi i32 [ %38, %._crit_edge ], [ %.pre6, %22 ]
  %i.0.lcssa = phi i64 [ %phitmp, %._crit_edge ], [ 1, %22 ]
  %43 = getelementptr inbounds i8** %25, i64 %i.0.lcssa
  store i8* null, i8** %43, align 8, !tbaa !7
  %44 = icmp ult i32 %42, 41
  br i1 %44, label %45, label %50

; <label>:45                                      ; preds = %._crit_edge7
  %46 = load i8** %3, align 16
  %47 = sext i32 %42 to i64
  %48 = getelementptr i8* %46, i64 %47
  %49 = add i32 %42, 8
  store i32 %49, i32* %2, align 16
  br label %53

; <label>:50                                      ; preds = %._crit_edge7
  %51 = load i8** %4, align 8
  %52 = getelementptr i8* %51, i64 8
  store i8* %52, i8** %4, align 8
  br label %53

; <label>:53                                      ; preds = %50, %45
  %.in1 = phi i8* [ %48, %45 ], [ %51, %50 ]
  %54 = bitcast i8* %.in1 to i8***
  %55 = load i8*** %54, align 8
  %56 = call i32 @execve(i8* %path, i8** %25, i8** %55) nounwind optsize
  ret i32 %56
}

define i32 @execl(i8* %path, i8* %argv0, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.50], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.50]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.50]* %ap, i64 0, i64 0, i32 0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag.50]* %ap, i64 0, i64 0, i32 3
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.50]* %ap, i64 0, i64 0, i32 2
  %.pre = load i32* %2, align 16
  br label %5

; <label>:5                                       ; preds = %21, %0
  %6 = phi i32 [ %17, %21 ], [ %.pre, %0 ]
  %indvars.iv3 = phi i32 [ %indvars.iv.next4, %21 ], [ 1, %0 ]
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %5
  %9 = load i8** %3, align 16
  %10 = sext i32 %6 to i64
  %11 = getelementptr i8* %9, i64 %10
  %12 = add i32 %6, 8
  store i32 %12, i32* %2, align 16
  br label %16

; <label>:13                                      ; preds = %5
  %14 = load i8** %4, align 8
  %15 = getelementptr i8* %14, i64 8
  store i8* %15, i8** %4, align 8
  br label %16

; <label>:16                                      ; preds = %13, %8
  %17 = phi i32 [ %12, %8 ], [ %6, %13 ]
  %.in = phi i8* [ %11, %8 ], [ %14, %13 ]
  %18 = bitcast i8* %.in to i8**
  %19 = load i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %22, label %21

; <label>:21                                      ; preds = %16
  %indvars.iv.next4 = add i32 %indvars.iv3, 1
  br label %5

; <label>:22                                      ; preds = %16
  call void @llvm.va_end(i8* %1)
  %23 = add nsw i32 %indvars.iv3, 1
  %24 = zext i32 %23 to i64
  %25 = alloca i8*, i64 %24, align 16
  call void @llvm.va_start(i8* %1)
  store i8* %argv0, i8** %25, align 16, !tbaa !7
  %26 = icmp sgt i32 %indvars.iv3, 1
  br i1 %26, label %.lr.ph, label %43

.lr.ph:                                           ; preds = %22
  %.pre5 = load i32* %2, align 16
  br label %27

; <label>:27                                      ; preds = %38, %.lr.ph
  %28 = phi i32 [ %.pre5, %.lr.ph ], [ %39, %38 ]
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %38 ]
  %29 = icmp ult i32 %28, 41
  br i1 %29, label %30, label %35

; <label>:30                                      ; preds = %27
  %31 = load i8** %3, align 16
  %32 = sext i32 %28 to i64
  %33 = getelementptr i8* %31, i64 %32
  %34 = add i32 %28, 8
  store i32 %34, i32* %2, align 16
  br label %38

; <label>:35                                      ; preds = %27
  %36 = load i8** %4, align 8
  %37 = getelementptr i8* %36, i64 8
  store i8* %37, i8** %4, align 8
  br label %38

; <label>:38                                      ; preds = %35, %30
  %39 = phi i32 [ %34, %30 ], [ %28, %35 ]
  %.in1 = phi i8* [ %33, %30 ], [ %36, %35 ]
  %40 = bitcast i8* %.in1 to i8**
  %41 = load i8** %40, align 8
  %42 = getelementptr inbounds i8** %25, i64 %indvars.iv
  store i8* %41, i8** %42, align 8, !tbaa !7
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %indvars.iv3
  br i1 %exitcond, label %._crit_edge, label %27

._crit_edge:                                      ; preds = %38
  %phitmp = sext i32 %indvars.iv3 to i64
  br label %43

; <label>:43                                      ; preds = %._crit_edge, %22
  %i.0.lcssa = phi i64 [ %phitmp, %._crit_edge ], [ 1, %22 ]
  %44 = getelementptr inbounds i8** %25, i64 %i.0.lcssa
  store i8* null, i8** %44, align 8, !tbaa !7
  %45 = call i32 @execv(i8* %path, i8** %25) nounwind optsize
  ret i32 %45
}

define i32 @execlp(i8* %file, i8* %argv0, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.51], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.51]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.51]* %ap, i64 0, i64 0, i32 0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag.51]* %ap, i64 0, i64 0, i32 3
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.51]* %ap, i64 0, i64 0, i32 2
  %.pre = load i32* %2, align 16
  br label %5

; <label>:5                                       ; preds = %21, %0
  %6 = phi i32 [ %17, %21 ], [ %.pre, %0 ]
  %indvars.iv3 = phi i32 [ %indvars.iv.next4, %21 ], [ 1, %0 ]
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %5
  %9 = load i8** %3, align 16
  %10 = sext i32 %6 to i64
  %11 = getelementptr i8* %9, i64 %10
  %12 = add i32 %6, 8
  store i32 %12, i32* %2, align 16
  br label %16

; <label>:13                                      ; preds = %5
  %14 = load i8** %4, align 8
  %15 = getelementptr i8* %14, i64 8
  store i8* %15, i8** %4, align 8
  br label %16

; <label>:16                                      ; preds = %13, %8
  %17 = phi i32 [ %12, %8 ], [ %6, %13 ]
  %.in = phi i8* [ %11, %8 ], [ %14, %13 ]
  %18 = bitcast i8* %.in to i8**
  %19 = load i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %22, label %21

; <label>:21                                      ; preds = %16
  %indvars.iv.next4 = add i32 %indvars.iv3, 1
  br label %5

; <label>:22                                      ; preds = %16
  call void @llvm.va_end(i8* %1)
  %23 = add nsw i32 %indvars.iv3, 1
  %24 = zext i32 %23 to i64
  %25 = alloca i8*, i64 %24, align 16
  call void @llvm.va_start(i8* %1)
  store i8* %argv0, i8** %25, align 16, !tbaa !7
  %26 = icmp sgt i32 %indvars.iv3, 1
  br i1 %26, label %.lr.ph, label %43

.lr.ph:                                           ; preds = %22
  %.pre5 = load i32* %2, align 16
  br label %27

; <label>:27                                      ; preds = %38, %.lr.ph
  %28 = phi i32 [ %.pre5, %.lr.ph ], [ %39, %38 ]
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %38 ]
  %29 = icmp ult i32 %28, 41
  br i1 %29, label %30, label %35

; <label>:30                                      ; preds = %27
  %31 = load i8** %3, align 16
  %32 = sext i32 %28 to i64
  %33 = getelementptr i8* %31, i64 %32
  %34 = add i32 %28, 8
  store i32 %34, i32* %2, align 16
  br label %38

; <label>:35                                      ; preds = %27
  %36 = load i8** %4, align 8
  %37 = getelementptr i8* %36, i64 8
  store i8* %37, i8** %4, align 8
  br label %38

; <label>:38                                      ; preds = %35, %30
  %39 = phi i32 [ %34, %30 ], [ %28, %35 ]
  %.in1 = phi i8* [ %33, %30 ], [ %36, %35 ]
  %40 = bitcast i8* %.in1 to i8**
  %41 = load i8** %40, align 8
  %42 = getelementptr inbounds i8** %25, i64 %indvars.iv
  store i8* %41, i8** %42, align 8, !tbaa !7
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %indvars.iv3
  br i1 %exitcond, label %._crit_edge, label %27

._crit_edge:                                      ; preds = %38
  %phitmp = sext i32 %indvars.iv3 to i64
  br label %43

; <label>:43                                      ; preds = %._crit_edge, %22
  %i.0.lcssa = phi i64 [ %phitmp, %._crit_edge ], [ 1, %22 ]
  %44 = getelementptr inbounds i8** %25, i64 %i.0.lcssa
  store i8* null, i8** %44, align 8, !tbaa !7
  %45 = call i32 @execvp(i8* %file, i8** %25) nounwind optsize
  ret i32 %45
}

define i32 @execve(i8* %path, i8** %argv, i8** %envp) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint i8** %argv to i64
  %3 = ptrtoint i8** %envp to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 11, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @execv(i8* %path, i8** %argv) nounwind uwtable optsize {
  %1 = load i8*** @__environ, align 8, !tbaa !7
  %2 = tail call i32 @execve(i8* %path, i8** %argv, i8** %1) nounwind optsize
  ret i32 %2
}

define i32 @execvp(i8* %file, i8** %argv) nounwind uwtable optsize {
  %1 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8]* @.str106, i64 0, i64 0)) nounwind optsize
  %2 = call i32* @__errno_location() nounwind readnone optsize
  store i32 2, i32* %2, align 4, !tbaa !6
  %3 = load i8* %file, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %.loopexit, label %5

; <label>:5                                       ; preds = %0
  %6 = call i8* @strchr(i8* %file, i32 47) nounwind optsize
  %7 = icmp eq i8* %6, null
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %5
  %9 = call i32 @execv(i8* %file, i8** %argv) nounwind optsize
  br label %.loopexit

; <label>:10                                      ; preds = %5
  %11 = icmp eq i8* %1, null
  %path.0 = select i1 %11, i8* getelementptr inbounds ([29 x i8]* @.str1107, i64 0, i64 0), i8* %1
  %12 = call i64 @strnlen(i8* %file, i64 256) nounwind optsize
  %13 = icmp ugt i64 %12, 255
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  store i32 36, i32* %2, align 4, !tbaa !6
  br label %.loopexit

; <label>:15                                      ; preds = %10
  %16 = call i64 @strnlen(i8* %path.0, i64 4095) nounwind optsize
  %17 = add i64 %16, 1
  %18 = add i64 %12, 1
  %19 = add i64 %18, %17
  br label %20

; <label>:20                                      ; preds = %49, %15
  %p.0 = phi i8* [ %path.0, %15 ], [ %z.1, %49 ]
  %21 = call i8* @llvm.stacksave()
  %22 = alloca i8, i64 %19, align 16
  %23 = call i8* @strchr(i8* %p.0, i32 58) nounwind optsize
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %20
  %26 = call i64 @strlen(i8* %p.0) nounwind optsize
  %27 = getelementptr inbounds i8* %p.0, i64 %26
  br label %28

; <label>:28                                      ; preds = %25, %20
  %z.0 = phi i8* [ %23, %20 ], [ %27, %25 ]
  %29 = ptrtoint i8* %z.0 to i64
  %30 = ptrtoint i8* %p.0 to i64
  %31 = sub i64 %29, %30
  %32 = icmp ult i64 %31, %17
  br i1 %32, label %36, label %33

; <label>:33                                      ; preds = %28
  %34 = load i8* %z.0, align 1, !tbaa !0
  %35 = icmp eq i8 %34, 0
  %. = select i1 %35, i32 2, i32 4
  br label %49

; <label>:36                                      ; preds = %28
  %37 = call i8* @memcpy(i8* %22, i8* %p.0, i64 %31) nounwind optsize
  %38 = getelementptr inbounds i8* %22, i64 %31
  store i8 47, i8* %38, align 1, !tbaa !0
  %39 = icmp ugt i8* %z.0, %p.0
  %40 = zext i1 %39 to i64
  %.sum = add i64 %31, %40
  %41 = getelementptr inbounds i8* %22, i64 %.sum
  %42 = call i8* @memcpy(i8* %41, i8* %file, i64 %18) nounwind optsize
  %43 = call i32 @execv(i8* %22, i8** %argv) nounwind optsize
  %44 = load i32* %2, align 4, !tbaa !6
  %45 = icmp eq i32 %44, 2
  br i1 %45, label %46, label %.thread

.thread:                                          ; preds = %36
  call void @llvm.stackrestore(i8* %21)
  br label %.loopexit

; <label>:46                                      ; preds = %36
  %47 = load i8* %z.0, align 1, !tbaa !0
  %48 = icmp eq i8 %47, 0
  %.3 = select i1 %48, i32 2, i32 0
  br label %49

; <label>:49                                      ; preds = %46, %33
  %.01 = phi i32 [ %., %33 ], [ %.3, %46 ]
  %z.1 = getelementptr inbounds i8* %z.0, i64 1
  call void @llvm.stackrestore(i8* %21)
  %switch = icmp eq i32 %.01, 2
  br i1 %switch, label %.loopexit, label %20

.loopexit:                                        ; preds = %49, %.thread, %14, %8, %0
  %.2 = phi i32 [ %9, %8 ], [ -1, %14 ], [ -1, %0 ], [ -1, %.thread ], [ -1, %49 ]
  ret i32 %.2
}

declare i8* @llvm.stacksave() nounwind

declare void @llvm.stackrestore(i8*) nounwind

define void @_exit(i32 %status) nounwind uwtable optsize {
  tail call void @_Exit(i32 %status) nounwind optsize
  ret void
}

define void @exit(i32 %code) noreturn nounwind uwtable optsize {
  tail call void (...)* bitcast (void ()* @__funcs_on_exit to void (...)*)() nounwind optsize
  tail call void (...)* bitcast (void ()* @__fflush_on_exit to void (...)*)() nounwind optsize
  %1 = load void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 5), align 8, !tbaa !7
  %2 = icmp eq void ()* %1, null
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  tail call void %1() nounwind optsize
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = load void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 6), align 8, !tbaa !7
  %6 = icmp eq void ()* %5, null
  br i1 %6, label %8, label %7

; <label>:7                                       ; preds = %4
  tail call void %5() nounwind optsize
  br label %8

; <label>:8                                       ; preds = %7, %4
  tail call void @_Exit(i32 %code) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %9, %8
  br label %9
}

define internal void @dummy114() nounwind uwtable readnone optsize {
  ret void
}

define void @_Exit(i32 %ec) nounwind uwtable optsize {
  %1 = sext i32 %ec to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 248, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 (i64, ...)* @__syscall(i64 1, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  ret void
}

define float @exp2f(float %x) nounwind uwtable optsize {
  %__v = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1124073471
  br i1 %3, label %4, label %20

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 2139095039
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = and i32 %1, 8388607
  %8 = icmp ne i32 %7, 0
  %9 = icmp sgt i32 %1, -1
  %or.cond = or i1 %8, %9
  br i1 %or.cond, label %10, label %55

; <label>:10                                      ; preds = %6
  %11 = fadd float %x, %x
  br label %55

; <label>:12                                      ; preds = %4
  %13 = fcmp ult float %x, 1.280000e+02
  br i1 %13, label %14, label %55

; <label>:14                                      ; preds = %12
  %15 = fcmp ugt float %x, -1.500000e+02
  br i1 %15, label %24, label %16

; <label>:16                                      ; preds = %14
  %17 = load volatile float* @twom100, align 4, !tbaa !2
  %18 = load volatile float* @twom100, align 4, !tbaa !2
  %19 = fmul float %17, %18
  br label %55

; <label>:20                                      ; preds = %0
  %21 = icmp ult i32 %2, 855638017
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %20
  %23 = fadd float %x, 1.000000e+00
  br label %55

; <label>:24                                      ; preds = %20, %14
  %25 = fadd float %x, 7.864320e+05
  store volatile float %25, float* %__v, align 4, !tbaa !2
  %26 = load volatile float* %__v, align 4, !tbaa !2
  %27 = bitcast float %26 to i32
  %28 = add i32 %27, 8
  %29 = shl i32 %28, 16
  %30 = and i32 %28, 15
  %31 = fadd float %26, -7.864320e+05
  %32 = fsub float %x, %31
  %33 = fpext float %32 to double
  %34 = add i32 %29, 1072693248
  %35 = and i32 %34, -1048576
  %36 = zext i32 %35 to i64
  %37 = shl nuw i64 %36, 32
  %38 = bitcast i64 %37 to double
  %39 = zext i32 %30 to i64
  %40 = getelementptr inbounds [16 x double]* @exp2ft, i64 0, i64 %39
  %41 = load double* %40, align 8, !tbaa !3
  %42 = fmul double %41, %33
  %43 = fmul double %33, 0x3FCEBFBE00000000
  %44 = fadd double %43, 0x3FE62E4300000000
  %45 = fmul double %42, %44
  %46 = fadd double %41, %45
  %47 = fmul double %33, %33
  %48 = fmul double %42, %47
  %49 = fmul double %33, 0x3F83B2C9C0000000
  %50 = fadd double %49, 0x3FAC6B3480000000
  %51 = fmul double %48, %50
  %52 = fadd double %46, %51
  %53 = fmul double %52, %38
  %54 = fptrunc double %53 to float
  br label %55

; <label>:55                                      ; preds = %24, %22, %16, %12, %10, %6
  %.0 = phi float [ %11, %10 ], [ %19, %16 ], [ %54, %24 ], [ %23, %22 ], [ 0.000000e+00, %6 ], [ 0x7FF0000000000000, %12 ]
  ret float %.0
}

define x86_fp80 @exp2l(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp ugt i32 %4, 16396
  br i1 %5, label %6, label %24

; <label>:6                                       ; preds = %0
  %7 = icmp eq i32 %4, 32767
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %6
  %9 = trunc i80 %1 to i64
  %10 = icmp eq i64 %9, -9223372036854775808
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %8
  %12 = and i32 %3, 32768
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %85

; <label>:14                                      ; preds = %11, %8
  %15 = fadd x86_fp80 %x, %x
  br label %85

; <label>:16                                      ; preds = %6
  %17 = fcmp ult x86_fp80 %x, 0xK400D8000000000000000
  br i1 %17, label %18, label %85

; <label>:18                                      ; preds = %16
  %19 = fcmp ugt x86_fp80 %x, 0xKC00D807C000000000000
  br i1 %19, label %28, label %20

; <label>:20                                      ; preds = %18
  %21 = load volatile x86_fp80* @twom10000, align 16, !tbaa !4
  %22 = load volatile x86_fp80* @twom10000, align 16, !tbaa !4
  %23 = fmul x86_fp80 %21, %22
  br label %85

; <label>:24                                      ; preds = %0
  %25 = icmp ult i32 %4, 16318
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %24
  %27 = fadd x86_fp80 %x, 0xK3FFF8000000000000000
  br label %85

; <label>:28                                      ; preds = %24, %18
  %29 = fadd x86_fp80 %x, 0xK4037C000000000000000
  %30 = bitcast x86_fp80 %29 to i80
  %31 = trunc i80 %30 to i32
  %32 = add i32 %31, 64
  %33 = ashr i32 %32, 7
  %34 = shl i32 %32, 1
  %35 = and i32 %34, 254
  %36 = fadd x86_fp80 %29, 0xKC037C000000000000000
  %37 = fsub x86_fp80 %x, %36
  %38 = icmp sgt i32 %33, -16382
  br i1 %38, label %39, label %44

; <label>:39                                      ; preds = %28
  %40 = add nsw i32 %33, 16383
  %41 = zext i32 %40 to i80
  %42 = shl i80 %41, 64
  %ins3 = or i80 %42, 9223372036854775808
  %43 = bitcast i80 %ins3 to x86_fp80
  br label %49

; <label>:44                                      ; preds = %28
  %45 = add nsw i32 %33, 26383
  %46 = zext i32 %45 to i80
  %47 = shl i80 %46, 64
  %ins = or i80 %47, 9223372036854775808
  %48 = bitcast i80 %ins to x86_fp80
  br label %49

; <label>:49                                      ; preds = %44, %39
  %twopk.0 = phi x86_fp80 [ %43, %39 ], [ undef, %44 ]
  %twopkp10000.0 = phi x86_fp80 [ undef, %39 ], [ %48, %44 ]
  %50 = zext i32 %35 to i64
  %51 = getelementptr inbounds [256 x double]* @tbl, i64 0, i64 %50
  %52 = load double* %51, align 16, !tbaa !3
  %53 = fpext double %52 to x86_fp80
  %54 = or i32 %35, 1
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds [256 x double]* @tbl, i64 0, i64 %55
  %57 = load double* %56, align 8, !tbaa !3
  %58 = fpext double %57 to x86_fp80
  %59 = fadd x86_fp80 %53, %58
  %60 = fmul x86_fp80 %59, %37
  %61 = fmul x86_fp80 %37, 0xK3FF2A1848C41AF19E800
  %62 = fadd x86_fp80 %61, 0xK3FF5AEC4023C0539B000
  %63 = fmul x86_fp80 %37, %62
  %64 = fadd x86_fp80 %63, 0xK3FF89D955B7DD26D2800
  %65 = fmul x86_fp80 %37, %64
  %66 = fadd x86_fp80 %65, 0xK3FFAE35846B824FD0000
  %67 = fmul x86_fp80 %37, %66
  %68 = fadd x86_fp80 %67, 0xK3FFCF5FDEFFC162C7800
  %69 = fmul x86_fp80 %37, %68
  %70 = fadd x86_fp80 %69, 0xK3FFEB17217F7D1CF7800
  %71 = fmul x86_fp80 %60, %70
  %72 = fadd x86_fp80 %58, %71
  %73 = fadd x86_fp80 %72, %53
  br i1 %38, label %74, label %81

; <label>:74                                      ; preds = %49
  %75 = icmp eq i32 %33, 16384
  br i1 %75, label %76, label %79

; <label>:76                                      ; preds = %74
  %77 = fmul x86_fp80 %73, 0xK40008000000000000000
  %78 = fmul x86_fp80 %77, 0xK7FFE8000000000000000
  br label %85

; <label>:79                                      ; preds = %74
  %80 = fmul x86_fp80 %73, %twopk.0
  br label %85

; <label>:81                                      ; preds = %49
  %82 = fmul x86_fp80 %73, %twopkp10000.0
  %83 = load volatile x86_fp80* @twom10000, align 16, !tbaa !4
  %84 = fmul x86_fp80 %82, %83
  br label %85

; <label>:85                                      ; preds = %81, %79, %76, %26, %20, %16, %14, %11
  %.0 = phi x86_fp80 [ %15, %14 ], [ %23, %20 ], [ %78, %76 ], [ %80, %79 ], [ %84, %81 ], [ %27, %26 ], [ 0xK00000000000000000000, %11 ], [ 0xK7FFF8000000000000000, %16 ]
  ret x86_fp80 %.0
}

define double @exp2(double %x) nounwind uwtable optsize {
  %__v = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1083179007
  br i1 %5, label %6, label %24

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 2146435071
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %6
  %9 = trunc i64 %1 to i32
  %10 = and i32 %3, 1048575
  %11 = or i32 %10, %9
  %12 = icmp ne i32 %11, 0
  %13 = icmp sgt i32 %3, -1
  %or.cond = or i1 %12, %13
  br i1 %or.cond, label %14, label %83

; <label>:14                                      ; preds = %8
  %15 = fadd double %x, %x
  br label %83

; <label>:16                                      ; preds = %6
  %17 = fcmp ult double %x, 1.024000e+03
  br i1 %17, label %18, label %83

; <label>:18                                      ; preds = %16
  %19 = fcmp ugt double %x, -1.075000e+03
  br i1 %19, label %28, label %20

; <label>:20                                      ; preds = %18
  %21 = load volatile double* @twom1000, align 8, !tbaa !3
  %22 = load volatile double* @twom1000, align 8, !tbaa !3
  %23 = fmul double %21, %22
  br label %83

; <label>:24                                      ; preds = %0
  %25 = icmp ult i32 %4, 1016070144
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %24
  %27 = fadd double %x, 1.000000e+00
  br label %83

; <label>:28                                      ; preds = %24, %18
  %29 = fadd double %x, 0x42B8000000000000
  store volatile double %29, double* %__v, align 8, !tbaa !3
  %30 = load volatile double* %__v, align 8, !tbaa !3
  %31 = bitcast double %30 to i64
  %32 = trunc i64 %31 to i32
  %33 = add i32 %32, 128
  %34 = shl i32 %33, 12
  %35 = and i32 %34, -1048576
  %36 = shl i32 %33, 1
  %37 = and i32 %36, 510
  %38 = fadd double %30, 0xC2B8000000000000
  %39 = fsub double %x, %38
  %40 = zext i32 %37 to i64
  %41 = getelementptr inbounds [512 x double]* @tbl117, i64 0, i64 %40
  %42 = load double* %41, align 16, !tbaa !3
  %43 = or i32 %37, 1
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [512 x double]* @tbl117, i64 0, i64 %44
  %46 = load double* %45, align 8, !tbaa !3
  %47 = fsub double %39, %46
  %48 = icmp sgt i32 %35, -1070596097
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %28
  %50 = add nsw i32 %35, 1072693248
  %51 = zext i32 %50 to i64
  %52 = shl nuw i64 %51, 32
  %53 = bitcast i64 %52 to double
  br label %59

; <label>:54                                      ; preds = %28
  %55 = add nsw i32 %35, 2121269248
  %56 = zext i32 %55 to i64
  %57 = shl nuw i64 %56, 32
  %58 = bitcast i64 %57 to double
  br label %59

; <label>:59                                      ; preds = %54, %49
  %twopk.0 = phi double [ %53, %49 ], [ undef, %54 ]
  %twopkp1000.0 = phi double [ undef, %49 ], [ %58, %54 ]
  %60 = fmul double %42, %47
  %61 = fmul double %47, 0x3F55D88003875C74
  %62 = fadd double %61, 0x3F83B2AB88F70400
  %63 = fmul double %47, %62
  %64 = fadd double %63, 0x3FAC6B08D704A0A6
  %65 = fmul double %47, %64
  %66 = fadd double %65, 0x3FCEBFBDFF82C575
  %67 = fmul double %47, %66
  %68 = fadd double %67, 0x3FE62E42FEFA39EF
  %69 = fmul double %60, %68
  %70 = fadd double %42, %69
  %71 = icmp slt i32 %35, -1070596096
  br i1 %71, label %72, label %76

; <label>:72                                      ; preds = %59
  %73 = fmul double %70, %twopkp1000.0
  %74 = load volatile double* @twom1000, align 8, !tbaa !3
  %75 = fmul double %73, %74
  br label %83

; <label>:76                                      ; preds = %59
  %77 = icmp eq i32 %35, 1073741824
  br i1 %77, label %78, label %81

; <label>:78                                      ; preds = %76
  %79 = fmul double %70, 2.000000e+00
  %80 = fmul double %79, 0x7FE0000000000000
  br label %83

; <label>:81                                      ; preds = %76
  %82 = fmul double %70, %twopk.0
  br label %83

; <label>:83                                      ; preds = %81, %78, %72, %26, %20, %16, %14, %8
  %.0 = phi double [ %15, %14 ], [ %23, %20 ], [ %75, %72 ], [ %80, %78 ], [ %82, %81 ], [ %27, %26 ], [ 0.000000e+00, %8 ], [ 0x7FF0000000000000, %16 ]
  ret double %.0
}

define float @expf(float %x) nounwind uwtable optsize {
  %__v = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 31
  %3 = and i32 %1, 2147483647
  %4 = icmp ugt i32 %3, 1118925335
  br i1 %4, label %5, label %22

; <label>:5                                       ; preds = %0
  %6 = icmp ugt i32 %3, 2139095040
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %5
  %8 = fadd float %x, %x
  br label %86

; <label>:9                                       ; preds = %5
  %10 = icmp eq i32 %3, 2139095040
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %9
  %12 = icmp eq i32 %2, 0
  %13 = select i1 %12, float %x, float 0.000000e+00
  br label %86

; <label>:14                                      ; preds = %9
  %15 = fcmp ogt float %x, 0x40562E3000000000
  br i1 %15, label %86, label %16

; <label>:16                                      ; preds = %14
  %17 = fcmp olt float %x, 0xC059FE36A0000000
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %16
  %19 = load volatile float* @twom100118, align 4, !tbaa !2
  %20 = load volatile float* @twom100118, align 4, !tbaa !2
  %21 = fmul float %19, %20
  br label %86

; <label>:22                                      ; preds = %16, %0
  %23 = icmp ugt i32 %3, 1051816472
  br i1 %23, label %24, label %47

; <label>:24                                      ; preds = %22
  %25 = icmp ult i32 %3, 1065686418
  br i1 %25, label %26, label %34

; <label>:26                                      ; preds = %24
  %27 = zext i32 %2 to i64
  %28 = getelementptr inbounds [2 x float]* @ln2HI, i64 0, i64 %27
  %29 = load float* %28, align 4, !tbaa !2
  %30 = getelementptr inbounds [2 x float]* @ln2LO, i64 0, i64 %27
  %31 = load float* %30, align 4, !tbaa !2
  %32 = ashr i32 %1, 31
  %33 = or i32 %32, 1
  br label %44

; <label>:34                                      ; preds = %24
  %35 = fmul float %x, 0x3FF7154760000000
  %36 = zext i32 %2 to i64
  %37 = getelementptr inbounds [2 x float]* @halF, i64 0, i64 %36
  %38 = load float* %37, align 4, !tbaa !2
  %39 = fadd float %35, %38
  %40 = fptosi float %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = fmul float %41, 0x3FE62E4000000000
  %43 = fmul float %41, 0x3EB7F7D1C0000000
  br label %44

; <label>:44                                      ; preds = %34, %26
  %k.0 = phi i32 [ %33, %26 ], [ %40, %34 ]
  %lo.0 = phi float [ %31, %26 ], [ %43, %34 ]
  %.pn = phi float [ %29, %26 ], [ %42, %34 ]
  %hi.0 = fsub float %x, %.pn
  %45 = fsub float %hi.0, %lo.0
  store volatile float %45, float* %__v, align 4, !tbaa !2
  %46 = load volatile float* %__v, align 4, !tbaa !2
  br label %53

; <label>:47                                      ; preds = %22
  %48 = icmp ult i32 %3, 956301312
  %49 = fadd float %x, 0x46293E5940000000
  %50 = fcmp ogt float %49, 1.000000e+00
  %or.cond = and i1 %48, %50
  br i1 %or.cond, label %51, label %53

; <label>:51                                      ; preds = %47
  %52 = fadd float %x, 1.000000e+00
  br label %86

; <label>:53                                      ; preds = %47, %44
  %k.1 = phi i32 [ %k.0, %44 ], [ 0, %47 ]
  %lo.1 = phi float [ %lo.0, %44 ], [ 0.000000e+00, %47 ]
  %hi.1 = phi float [ %hi.0, %44 ], [ 0.000000e+00, %47 ]
  %.03 = phi float [ %46, %44 ], [ %x, %47 ]
  %54 = fmul float %.03, %.03
  %55 = icmp sgt i32 %k.1, -126
  %56 = shl i32 %k.1, 23
  %twopk.0.in.v = select i1 %55, i32 1065353216, i32 1904214016
  %twopk.0.in = add i32 %twopk.0.in.v, %56
  %twopk.0 = bitcast i32 %twopk.0.in to float
  %57 = fmul float %54, 0xBF66AA42A0000000
  %58 = fadd float %57, 0x3FC55551E0000000
  %59 = fmul float %54, %58
  %60 = fsub float %.03, %59
  %61 = icmp eq i32 %k.1, 0
  %62 = fmul float %.03, %60
  br i1 %61, label %63, label %68

; <label>:63                                      ; preds = %53
  %64 = fadd float %60, -2.000000e+00
  %65 = fdiv float %62, %64
  %66 = fsub float %65, %.03
  %67 = fsub float 1.000000e+00, %66
  br label %86

; <label>:68                                      ; preds = %53
  %69 = fsub float 2.000000e+00, %60
  %70 = fdiv float %62, %69
  %71 = fsub float %lo.1, %70
  %72 = fsub float %71, %hi.1
  %73 = fsub float 1.000000e+00, %72
  %74 = icmp slt i32 %k.1, -125
  br i1 %74, label %75, label %79

; <label>:75                                      ; preds = %68
  %76 = fmul float %73, %twopk.0
  %77 = load volatile float* @twom100118, align 4, !tbaa !2
  %78 = fmul float %76, %77
  br label %86

; <label>:79                                      ; preds = %68
  %80 = icmp eq i32 %k.1, 128
  br i1 %80, label %81, label %84

; <label>:81                                      ; preds = %79
  %82 = fmul float %73, 2.000000e+00
  %83 = fmul float %82, 0x47E0000000000000
  br label %86

; <label>:84                                      ; preds = %79
  %85 = fmul float %73, %twopk.0
  br label %86

; <label>:86                                      ; preds = %84, %81, %75, %63, %51, %18, %14, %11, %7
  %.0 = phi float [ %8, %7 ], [ %21, %18 ], [ %67, %63 ], [ %78, %75 ], [ %83, %81 ], [ %85, %84 ], [ %52, %51 ], [ %13, %11 ], [ 0x7FF0000000000000, %14 ]
  ret float %.0
}

define x86_fp80 @expl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %25, label %3

; <label>:3                                       ; preds = %0
  %4 = fcmp ogt x86_fp80 %x, 0xK400CB17217F7D1CF79AC
  br i1 %4, label %25, label %5

; <label>:5                                       ; preds = %3
  %6 = fcmp olt x86_fp80 %x, 0xKC00CB21DFE7F09E2BAAA
  br i1 %6, label %25, label %7

; <label>:7                                       ; preds = %5
  %8 = fmul x86_fp80 %x, 0xK3FFFB8AA3B295C17F0BC
  %9 = fadd x86_fp80 %8, 0xK3FFE8000000000000000
  %10 = tail call x86_fp80 @floorl(x86_fp80 %9) nounwind optsize
  %11 = fptosi x86_fp80 %10 to i32
  %12 = fmul x86_fp80 %10, 0xK3FFEB172000000000000
  %13 = fsub x86_fp80 %x, %12
  %14 = fmul x86_fp80 %10, 0xK3FEBBFBE8E7BCD5E4F1E
  %15 = fsub x86_fp80 %13, %14
  %16 = fmul x86_fp80 %15, %15
  %17 = tail call x86_fp80 @__polevll(x86_fp80 %16, x86_fp80* getelementptr inbounds ([3 x x86_fp80]* @P, i64 0, i64 0), i32 2) nounwind optsize
  %18 = fmul x86_fp80 %15, %17
  %19 = tail call x86_fp80 @__polevll(x86_fp80 %16, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @Q, i64 0, i64 0), i32 3) nounwind optsize
  %20 = fsub x86_fp80 %19, %18
  %21 = fdiv x86_fp80 %18, %20
  %22 = tail call x86_fp80 @ldexpl(x86_fp80 %21, i32 1) nounwind optsize
  %23 = fadd x86_fp80 %22, 0xK3FFF8000000000000000
  %24 = tail call x86_fp80 @ldexpl(x86_fp80 %23, i32 %11) nounwind optsize
  br label %25

; <label>:25                                      ; preds = %7, %5, %3, %0
  %.0 = phi x86_fp80 [ %24, %7 ], [ %x, %0 ], [ 0xK7FFF8000000000000000, %3 ], [ 0xK00000000000000000000, %5 ]
  ret x86_fp80 %.0
}

define float @expm1f(float %x) nounwind uwtable optsize {
  %__v = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = and i32 %1, -2147483648
  %3 = and i32 %1, 2147483647
  %4 = icmp ugt i32 %3, 1100331075
  br i1 %4, label %5, label %22

; <label>:5                                       ; preds = %0
  %6 = icmp ugt i32 %3, 1118925335
  br i1 %6, label %7, label %18

; <label>:7                                       ; preds = %5
  %8 = icmp ugt i32 %3, 2139095040
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %7
  %10 = fadd float %x, %x
  br label %123

; <label>:11                                      ; preds = %7
  %12 = icmp eq i32 %3, 2139095040
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %11
  %14 = icmp eq i32 %2, 0
  %15 = select i1 %14, float %x, float -1.000000e+00
  br label %123

; <label>:16                                      ; preds = %11
  %17 = fcmp ogt float %x, 0x40562E3000000000
  br i1 %17, label %123, label %18

; <label>:18                                      ; preds = %16, %5
  %19 = icmp ne i32 %2, 0
  %20 = fadd float %x, 0x39B4484C00000000
  %21 = fcmp olt float %20, 0.000000e+00
  %or.cond = and i1 %19, %21
  br i1 %or.cond, label %123, label %22

; <label>:22                                      ; preds = %18, %0
  %23 = icmp ugt i32 %3, 1051816472
  br i1 %23, label %24, label %47

; <label>:24                                      ; preds = %22
  %25 = icmp ult i32 %3, 1065686418
  br i1 %25, label %26, label %32

; <label>:26                                      ; preds = %24
  %27 = icmp eq i32 %2, 0
  br i1 %27, label %28, label %30

; <label>:28                                      ; preds = %26
  %29 = fadd float %x, 0xBFE62E3000000000
  br label %42

; <label>:30                                      ; preds = %26
  %31 = fadd float %x, 0x3FE62E3000000000
  br label %42

; <label>:32                                      ; preds = %24
  %33 = fmul float %x, 0x3FF7154760000000
  %34 = icmp eq i32 %2, 0
  %35 = select i1 %34, float 5.000000e-01, float -5.000000e-01
  %36 = fadd float %33, %35
  %37 = fptosi float %36 to i32
  %38 = sitofp i32 %37 to float
  %39 = fmul float %38, 0x3FE62E3000000000
  %40 = fsub float %x, %39
  %41 = fmul float %38, 0x3EE2FEFA20000000
  br label %42

; <label>:42                                      ; preds = %32, %30, %28
  %k.0 = phi i32 [ 1, %28 ], [ -1, %30 ], [ %37, %32 ]
  %lo.0 = phi float [ 0x3EE2FEFA20000000, %28 ], [ 0xBEE2FEFA20000000, %30 ], [ %41, %32 ]
  %hi.0 = phi float [ %29, %28 ], [ %31, %30 ], [ %40, %32 ]
  %43 = fsub float %hi.0, %lo.0
  store volatile float %43, float* %__v, align 4, !tbaa !2
  %44 = load volatile float* %__v, align 4, !tbaa !2
  %45 = fsub float %hi.0, %44
  %46 = fsub float %45, %lo.0
  br label %53

; <label>:47                                      ; preds = %22
  %48 = icmp ult i32 %3, 855638016
  br i1 %48, label %49, label %53

; <label>:49                                      ; preds = %47
  %50 = fadd float %x, 0x46293E5940000000
  %51 = fsub float %50, %50
  %52 = fsub float %x, %51
  br label %123

; <label>:53                                      ; preds = %47, %42
  %k.1 = phi i32 [ %k.0, %42 ], [ 0, %47 ]
  %c.0 = phi float [ %46, %42 ], [ undef, %47 ]
  %.05 = phi float [ %44, %42 ], [ %x, %47 ]
  %54 = fmul float %.05, 5.000000e-01
  %55 = fmul float %.05, %54
  %56 = fmul float %55, 0x3F59E60200000000
  %57 = fadd float %56, 0xBFA1110D00000000
  %58 = fmul float %55, %57
  %59 = fadd float %58, 1.000000e+00
  %60 = fmul float %59, %54
  %61 = fsub float 3.000000e+00, %60
  %62 = fsub float %59, %61
  %63 = fmul float %.05, %61
  %64 = fsub float 6.000000e+00, %63
  %65 = fdiv float %62, %64
  %66 = fmul float %55, %65
  %67 = icmp eq i32 %k.1, 0
  br i1 %67, label %68, label %72

; <label>:68                                      ; preds = %53
  %69 = fmul float %.05, %66
  %70 = fsub float %69, %55
  %71 = fsub float %.05, %70
  br label %123

; <label>:72                                      ; preds = %53
  %73 = shl i32 %k.1, 23
  %74 = add nsw i32 %73, 1065353216
  %75 = bitcast i32 %74 to float
  %76 = fsub float %66, %c.0
  %77 = fmul float %.05, %76
  %78 = fsub float %77, %c.0
  %79 = fsub float %78, %55
  switch i32 %k.1, label %94 [
    i32 -1, label %80
    i32 1, label %84
  ]

; <label>:80                                      ; preds = %72
  %81 = fsub float %.05, %79
  %82 = fmul float %81, 5.000000e-01
  %83 = fadd float %82, -5.000000e-01
  br label %123

; <label>:84                                      ; preds = %72
  %85 = fcmp olt float %.05, -2.500000e-01
  br i1 %85, label %86, label %90

; <label>:86                                      ; preds = %84
  %87 = fadd float %.05, 5.000000e-01
  %88 = fsub float %79, %87
  %89 = fmul float %88, -2.000000e+00
  br label %123

; <label>:90                                      ; preds = %84
  %91 = fsub float %.05, %79
  %92 = fmul float %91, 2.000000e+00
  %93 = fadd float %92, 1.000000e+00
  br label %123

; <label>:94                                      ; preds = %72
  %k.1.off = add i32 %k.1, 1
  %95 = icmp ugt i32 %k.1.off, 57
  br i1 %95, label %96, label %107

; <label>:96                                      ; preds = %94
  %97 = fsub float %79, %.05
  %98 = fsub float 1.000000e+00, %97
  %99 = icmp eq i32 %k.1, 128
  br i1 %99, label %100, label %103

; <label>:100                                     ; preds = %96
  %101 = fmul float %98, 2.000000e+00
  %102 = fmul float %101, 0x47E0000000000000
  br label %105

; <label>:103                                     ; preds = %96
  %104 = fmul float %98, %75
  br label %105

; <label>:105                                     ; preds = %103, %100
  %y.0 = phi float [ %102, %100 ], [ %104, %103 ]
  %106 = fadd float %y.0, -1.000000e+00
  br label %123

; <label>:107                                     ; preds = %94
  %108 = icmp slt i32 %k.1, 23
  br i1 %108, label %109, label %115

; <label>:109                                     ; preds = %107
  %110 = lshr i32 16777216, %k.1
  %111 = sub nsw i32 1065353216, %110
  %112 = bitcast i32 %111 to float
  %113 = fsub float %79, %.05
  %114 = fsub float %112, %113
  br label %122

; <label>:115                                     ; preds = %107
  %116 = sub nsw i32 127, %k.1
  %117 = shl i32 %116, 23
  %118 = bitcast i32 %117 to float
  %119 = fadd float %79, %118
  %120 = fsub float %.05, %119
  %121 = fadd float %120, 1.000000e+00
  br label %122

; <label>:122                                     ; preds = %115, %109
  %.pn = phi float [ %114, %109 ], [ %121, %115 ]
  %y.1 = fmul float %.pn, %75
  br label %123

; <label>:123                                     ; preds = %122, %105, %90, %86, %80, %68, %49, %18, %16, %13, %9
  %.0 = phi float [ %10, %9 ], [ %71, %68 ], [ %83, %80 ], [ %89, %86 ], [ %93, %90 ], [ %106, %105 ], [ %y.1, %122 ], [ %52, %49 ], [ %15, %13 ], [ 0x7FF0000000000000, %16 ], [ -1.000000e+00, %18 ]
  ret float %.0
}

define x86_fp80 @expm1l(x86_fp80 %x) nounwind uwtable optsize {
  %1 = fcmp ogt x86_fp80 %x, 0xK400CB17217F7D1CF79AC
  br i1 %1, label %43, label %2

; <label>:2                                       ; preds = %0
  %3 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  br i1 %3, label %43, label %4

; <label>:4                                       ; preds = %2
  %5 = fcmp olt x86_fp80 %x, 0xKC004B437E057B116B792
  br i1 %5, label %43, label %6

; <label>:6                                       ; preds = %4
  %7 = fdiv x86_fp80 %x, 0xK3FFEB17217F7D1CF79AC
  %8 = fadd x86_fp80 %7, 0xK3FFE8000000000000000
  %9 = tail call x86_fp80 @floorl(x86_fp80 %8) nounwind optsize
  %10 = fptosi x86_fp80 %9 to i32
  %11 = fmul x86_fp80 %9, 0xK3FFEB172000000000000
  %12 = fsub x86_fp80 %x, %11
  %13 = fmul x86_fp80 %9, 0xK3FEBBFBE8E7BCD5E4F1E
  %14 = fsub x86_fp80 %12, %13
  %15 = fmul x86_fp80 %14, 0xKBFFE861B2F647DE4D3C9
  %16 = fadd x86_fp80 %15, 0xK40039010EC90FDE67CE3
  %17 = fmul x86_fp80 %16, %14
  %18 = fadd x86_fp80 %17, 0xKC007AB28F2B5715888AE
  %19 = fmul x86_fp80 %18, %14
  %20 = fadd x86_fp80 %19, 0xK400AA52C5816589D8961
  %21 = fmul x86_fp80 %20, %14
  %22 = fadd x86_fp80 %21, 0xKC00CF7D56C5356CFC202
  %23 = fmul x86_fp80 %22, %14
  %24 = fadd x86_fp80 %14, 0xKC004A014C3706A1124E7
  %25 = fmul x86_fp80 %24, %14
  %26 = fadd x86_fp80 %25, 0xK4008B426A52E701FE2C9
  %27 = fmul x86_fp80 %26, %14
  %28 = fadd x86_fp80 %27, 0xKC00BE13D6D54806309A9
  %29 = fmul x86_fp80 %28, %14
  %30 = fadd x86_fp80 %29, 0xK400E9AE0A9A7A1C8FC32
  %31 = fmul x86_fp80 %30, %14
  %32 = fadd x86_fp80 %31, 0xKC00FB9E0113E811BD18B
  %33 = fmul x86_fp80 %14, %14
  %34 = fmul x86_fp80 %33, 0xK3FFE8000000000000000
  %35 = fmul x86_fp80 %33, %23
  %36 = fdiv x86_fp80 %35, %32
  %37 = fadd x86_fp80 %34, %36
  %38 = fadd x86_fp80 %14, %37
  %39 = tail call x86_fp80 @ldexpl(x86_fp80 0xK3FFF8000000000000000, i32 %10) nounwind optsize
  %40 = fmul x86_fp80 %39, %38
  %41 = fadd x86_fp80 %39, 0xKBFFF8000000000000000
  %42 = fadd x86_fp80 %40, %41
  br label %43

; <label>:43                                      ; preds = %6, %4, %2, %0
  %.0 = phi x86_fp80 [ %42, %6 ], [ 0xK7FFF8000000000000000, %0 ], [ %x, %2 ], [ 0xKBFFF8000000000000000, %4 ]
  ret x86_fp80 %.0
}

define double @expm1(double %x) nounwind uwtable optsize {
  %__v = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, -2147483648
  %5 = and i32 %3, 2147483647
  %6 = icmp ugt i32 %5, 1078159481
  br i1 %6, label %7, label %28

; <label>:7                                       ; preds = %0
  %8 = icmp ugt i32 %5, 1082535489
  br i1 %8, label %9, label %23

; <label>:9                                       ; preds = %7
  %10 = icmp ugt i32 %5, 2146435071
  br i1 %10, label %11, label %21

; <label>:11                                      ; preds = %9
  %12 = trunc i64 %1 to i32
  %13 = and i32 %3, 1048575
  %14 = or i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %11
  %17 = fadd double %x, %x
  br label %141

; <label>:18                                      ; preds = %11
  %19 = icmp eq i32 %4, 0
  %20 = select i1 %19, double %x, double -1.000000e+00
  br label %141

; <label>:21                                      ; preds = %9
  %22 = fcmp ogt double %x, 0x40862E42FEFA39EF
  br i1 %22, label %141, label %23

; <label>:23                                      ; preds = %21, %7
  %24 = icmp eq i32 %4, 0
  br i1 %24, label %28, label %25

; <label>:25                                      ; preds = %23
  %26 = fadd double %x, 1.000000e-300
  %27 = fcmp olt double %26, 0.000000e+00
  br i1 %27, label %141, label %28

; <label>:28                                      ; preds = %25, %23, %0
  %29 = icmp ugt i32 %5, 1071001154
  br i1 %29, label %30, label %53

; <label>:30                                      ; preds = %28
  %31 = icmp ult i32 %5, 1072734898
  br i1 %31, label %32, label %38

; <label>:32                                      ; preds = %30
  %33 = icmp eq i32 %4, 0
  br i1 %33, label %34, label %36

; <label>:34                                      ; preds = %32
  %35 = fadd double %x, 0xBFE62E42FEE00000
  br label %48

; <label>:36                                      ; preds = %32
  %37 = fadd double %x, 0x3FE62E42FEE00000
  br label %48

; <label>:38                                      ; preds = %30
  %39 = fmul double %x, 0x3FF71547652B82FE
  %40 = icmp eq i32 %4, 0
  %41 = select i1 %40, double 5.000000e-01, double -5.000000e-01
  %42 = fadd double %39, %41
  %43 = fptosi double %42 to i32
  %44 = sitofp i32 %43 to double
  %45 = fmul double %44, 0x3FE62E42FEE00000
  %46 = fsub double %x, %45
  %47 = fmul double %44, 0x3DEA39EF35793C76
  br label %48

; <label>:48                                      ; preds = %38, %36, %34
  %k.0 = phi i32 [ 1, %34 ], [ -1, %36 ], [ %43, %38 ]
  %lo.0 = phi double [ 0x3DEA39EF35793C76, %34 ], [ 0xBDEA39EF35793C76, %36 ], [ %47, %38 ]
  %hi.0 = phi double [ %35, %34 ], [ %37, %36 ], [ %46, %38 ]
  %49 = fsub double %hi.0, %lo.0
  store volatile double %49, double* %__v, align 8, !tbaa !3
  %50 = load volatile double* %__v, align 8, !tbaa !3
  %51 = fsub double %hi.0, %50
  %52 = fsub double %51, %lo.0
  br label %59

; <label>:53                                      ; preds = %28
  %54 = icmp ult i32 %5, 1016070144
  br i1 %54, label %55, label %59

; <label>:55                                      ; preds = %53
  %56 = fadd double %x, 1.000000e+300
  %57 = fsub double %56, %56
  %58 = fsub double %x, %57
  br label %141

; <label>:59                                      ; preds = %53, %48
  %k.1 = phi i32 [ %k.0, %48 ], [ 0, %53 ]
  %c.0 = phi double [ %52, %48 ], [ undef, %53 ]
  %.06 = phi double [ %50, %48 ], [ %x, %53 ]
  %60 = fmul double %.06, 5.000000e-01
  %61 = fmul double %.06, %60
  %62 = fmul double %61, 0xBE8AFDB76E09C32D
  %63 = fadd double %62, 0x3ED0CFCA86E65239
  %64 = fmul double %61, %63
  %65 = fadd double %64, 0xBF14CE199EAADBB7
  %66 = fmul double %61, %65
  %67 = fadd double %66, 0x3F5A01A019FE5585
  %68 = fmul double %61, %67
  %69 = fadd double %68, 0xBFA11111111110F4
  %70 = fmul double %61, %69
  %71 = fadd double %70, 1.000000e+00
  %72 = fmul double %71, %60
  %73 = fsub double 3.000000e+00, %72
  %74 = fsub double %71, %73
  %75 = fmul double %.06, %73
  %76 = fsub double 6.000000e+00, %75
  %77 = fdiv double %74, %76
  %78 = fmul double %61, %77
  %79 = icmp eq i32 %k.1, 0
  br i1 %79, label %80, label %84

; <label>:80                                      ; preds = %59
  %81 = fmul double %.06, %78
  %82 = fsub double %81, %61
  %83 = fsub double %.06, %82
  br label %141

; <label>:84                                      ; preds = %59
  %85 = shl i32 %k.1, 20
  %86 = add nsw i32 %85, 1072693248
  %87 = zext i32 %86 to i64
  %88 = shl nuw i64 %87, 32
  %89 = bitcast i64 %88 to double
  %90 = fsub double %78, %c.0
  %91 = fmul double %.06, %90
  %92 = fsub double %91, %c.0
  %93 = fsub double %92, %61
  switch i32 %k.1, label %108 [
    i32 -1, label %94
    i32 1, label %98
  ]

; <label>:94                                      ; preds = %84
  %95 = fsub double %.06, %93
  %96 = fmul double %95, 5.000000e-01
  %97 = fadd double %96, -5.000000e-01
  br label %141

; <label>:98                                      ; preds = %84
  %99 = fcmp olt double %.06, -2.500000e-01
  br i1 %99, label %100, label %104

; <label>:100                                     ; preds = %98
  %101 = fadd double %.06, 5.000000e-01
  %102 = fsub double %93, %101
  %103 = fmul double %102, -2.000000e+00
  br label %141

; <label>:104                                     ; preds = %98
  %105 = fsub double %.06, %93
  %106 = fmul double %105, 2.000000e+00
  %107 = fadd double %106, 1.000000e+00
  br label %141

; <label>:108                                     ; preds = %84
  %k.1.off = add i32 %k.1, 1
  %109 = icmp ugt i32 %k.1.off, 57
  br i1 %109, label %110, label %121

; <label>:110                                     ; preds = %108
  %111 = fsub double %93, %.06
  %112 = fsub double 1.000000e+00, %111
  %113 = icmp eq i32 %k.1, 1024
  br i1 %113, label %114, label %117

; <label>:114                                     ; preds = %110
  %115 = fmul double %112, 2.000000e+00
  %116 = fmul double %115, 0x7FE0000000000000
  br label %119

; <label>:117                                     ; preds = %110
  %118 = fmul double %112, %89
  br label %119

; <label>:119                                     ; preds = %117, %114
  %y.0 = phi double [ %116, %114 ], [ %118, %117 ]
  %120 = fadd double %y.0, -1.000000e+00
  br label %141

; <label>:121                                     ; preds = %108
  %122 = icmp slt i32 %k.1, 20
  br i1 %122, label %123, label %131

; <label>:123                                     ; preds = %121
  %124 = lshr i32 2097152, %k.1
  %125 = sub nsw i32 1072693248, %124
  %126 = zext i32 %125 to i64
  %127 = shl nuw i64 %126, 32
  %128 = bitcast i64 %127 to double
  %129 = fsub double %93, %.06
  %130 = fsub double %128, %129
  br label %140

; <label>:131                                     ; preds = %121
  %132 = sub nsw i32 1023, %k.1
  %133 = shl i32 %132, 20
  %134 = zext i32 %133 to i64
  %135 = shl nuw i64 %134, 32
  %136 = bitcast i64 %135 to double
  %137 = fadd double %93, %136
  %138 = fsub double %.06, %137
  %139 = fadd double %138, 1.000000e+00
  br label %140

; <label>:140                                     ; preds = %131, %123
  %.pn = phi double [ %130, %123 ], [ %139, %131 ]
  %y.1 = fmul double %.pn, %89
  br label %141

; <label>:141                                     ; preds = %140, %119, %104, %100, %94, %80, %55, %25, %21, %18, %16
  %.0 = phi double [ %17, %16 ], [ %20, %18 ], [ %83, %80 ], [ %97, %94 ], [ %103, %100 ], [ %107, %104 ], [ %120, %119 ], [ %y.1, %140 ], [ %58, %55 ], [ 0x7FF0000000000000, %21 ], [ -1.000000e+00, %25 ]
  ret double %.0
}

define double @exp(double %x) nounwind uwtable optsize {
  %__v = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = lshr i64 %1, 63
  %5 = trunc i64 %4 to i32
  %6 = and i32 %3, 2147483647
  %7 = icmp ugt i32 %6, 1082535489
  br i1 %7, label %8, label %28

; <label>:8                                       ; preds = %0
  %9 = icmp ugt i32 %6, 2146435071
  br i1 %9, label %10, label %20

; <label>:10                                      ; preds = %8
  %11 = trunc i64 %1 to i32
  %12 = and i32 %3, 1048575
  %13 = or i32 %12, %11
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %10
  %16 = fadd double %x, %x
  br label %97

; <label>:17                                      ; preds = %10
  %18 = icmp eq i32 %5, 0
  %19 = select i1 %18, double %x, double 0.000000e+00
  br label %97

; <label>:20                                      ; preds = %8
  %21 = fcmp ogt double %x, 0x40862E42FEFA39EF
  br i1 %21, label %97, label %22

; <label>:22                                      ; preds = %20
  %23 = fcmp olt double %x, 0xC0874910D52D3051
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %22
  %25 = load volatile double* @twom1000129, align 8, !tbaa !3
  %26 = load volatile double* @twom1000129, align 8, !tbaa !3
  %27 = fmul double %25, %26
  br label %97

; <label>:28                                      ; preds = %22, %0
  %29 = icmp ugt i32 %6, 1071001154
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %28
  %31 = icmp ult i32 %6, 1072734898
  br i1 %31, label %32, label %39

; <label>:32                                      ; preds = %30
  %33 = getelementptr inbounds [2 x double]* @ln2HI130, i64 0, i64 %4
  %34 = load double* %33, align 8, !tbaa !3
  %35 = getelementptr inbounds [2 x double]* @ln2LO131, i64 0, i64 %4
  %36 = load double* %35, align 8, !tbaa !3
  %37 = sub i32 0, %5
  %38 = or i32 %37, 1
  br label %48

; <label>:39                                      ; preds = %30
  %40 = fmul double %x, 0x3FF71547652B82FE
  %41 = getelementptr inbounds [2 x double]* @halF132, i64 0, i64 %4
  %42 = load double* %41, align 8, !tbaa !3
  %43 = fadd double %40, %42
  %44 = fptosi double %43 to i32
  %45 = sitofp i32 %44 to double
  %46 = fmul double %45, 0x3FE62E42FEE00000
  %47 = fmul double %45, 0x3DEA39EF35793C76
  br label %48

; <label>:48                                      ; preds = %39, %32
  %k.0 = phi i32 [ %38, %32 ], [ %44, %39 ]
  %lo.0 = phi double [ %36, %32 ], [ %47, %39 ]
  %.pn = phi double [ %34, %32 ], [ %46, %39 ]
  %hi.0 = fsub double %x, %.pn
  %49 = fsub double %hi.0, %lo.0
  store volatile double %49, double* %__v, align 8, !tbaa !3
  %50 = load volatile double* %__v, align 8, !tbaa !3
  br label %58

; <label>:51                                      ; preds = %28
  %52 = icmp ult i32 %6, 1043333120
  br i1 %52, label %53, label %58

; <label>:53                                      ; preds = %51
  %54 = fadd double %x, 1.000000e+300
  %55 = fcmp ogt double %54, 1.000000e+00
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %53
  %57 = fadd double %x, 1.000000e+00
  br label %97

; <label>:58                                      ; preds = %53, %51, %48
  %k.1 = phi i32 [ %k.0, %48 ], [ 0, %53 ], [ 0, %51 ]
  %lo.1 = phi double [ %lo.0, %48 ], [ 0.000000e+00, %53 ], [ 0.000000e+00, %51 ]
  %hi.1 = phi double [ %hi.0, %48 ], [ 0.000000e+00, %53 ], [ 0.000000e+00, %51 ]
  %.04 = phi double [ %50, %48 ], [ %x, %53 ], [ %x, %51 ]
  %59 = fmul double %.04, %.04
  %60 = icmp sgt i32 %k.1, -1022
  %61 = shl i32 %k.1, 20
  %twopk.0.in.in.in.v = select i1 %60, i32 1072693248, i32 2121269248
  %twopk.0.in.in.in = add i32 %twopk.0.in.in.in.v, %61
  %twopk.0.in.in = zext i32 %twopk.0.in.in.in to i64
  %twopk.0.in = shl nuw i64 %twopk.0.in.in, 32
  %twopk.0 = bitcast i64 %twopk.0.in to double
  %62 = fmul double %59, 0x3E66376972BEA4D0
  %63 = fadd double %62, 0xBEBBBD41C5D26BF1
  %64 = fmul double %59, %63
  %65 = fadd double %64, 0x3F11566AAF25DE2C
  %66 = fmul double %59, %65
  %67 = fadd double %66, 0xBF66C16C16BEBD93
  %68 = fmul double %59, %67
  %69 = fadd double %68, 0x3FC555555555553E
  %70 = fmul double %59, %69
  %71 = fsub double %.04, %70
  %72 = icmp eq i32 %k.1, 0
  %73 = fmul double %.04, %71
  br i1 %72, label %74, label %79

; <label>:74                                      ; preds = %58
  %75 = fadd double %71, -2.000000e+00
  %76 = fdiv double %73, %75
  %77 = fsub double %76, %.04
  %78 = fsub double 1.000000e+00, %77
  br label %97

; <label>:79                                      ; preds = %58
  %80 = fsub double 2.000000e+00, %71
  %81 = fdiv double %73, %80
  %82 = fsub double %lo.1, %81
  %83 = fsub double %82, %hi.1
  %84 = fsub double 1.000000e+00, %83
  %85 = icmp slt i32 %k.1, -1021
  br i1 %85, label %86, label %90

; <label>:86                                      ; preds = %79
  %87 = fmul double %84, %twopk.0
  %88 = load volatile double* @twom1000129, align 8, !tbaa !3
  %89 = fmul double %87, %88
  br label %97

; <label>:90                                      ; preds = %79
  %91 = icmp eq i32 %k.1, 1024
  br i1 %91, label %92, label %95

; <label>:92                                      ; preds = %90
  %93 = fmul double %84, 2.000000e+00
  %94 = fmul double %93, 0x7FE0000000000000
  br label %97

; <label>:95                                      ; preds = %90
  %96 = fmul double %84, %twopk.0
  br label %97

; <label>:97                                      ; preds = %95, %92, %86, %74, %56, %24, %20, %17, %15
  %.0 = phi double [ %16, %15 ], [ %19, %17 ], [ %27, %24 ], [ %78, %74 ], [ %89, %86 ], [ %94, %92 ], [ %96, %95 ], [ %57, %56 ], [ 0x7FF0000000000000, %20 ]
  ret double %.0
}

define float @__expo2f(float %x) nounwind uwtable optsize {
  %1 = fadd float %x, 0xC0645C7780000000
  %2 = tail call float @expf(float %1) nounwind optsize
  %3 = fmul float %2, 0x4740000000000000
  %4 = fmul float %3, 0x4740000000000000
  ret float %4
}

define double @__expo2(double %x) nounwind uwtable optsize {
  %1 = fadd double %x, 0xC0962066151ADD8B
  %2 = tail call double @exp(double %1) nounwind optsize
  %3 = fmul double %2, 0x7FC0000000000000
  %4 = fmul double %3, 0x7FC0000000000000
  ret double %4
}

define void @_flushlbf() nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (%struct.__FILE_s.67*)* @fflush to i32 (%struct.__FILE_s*)*)(%struct.__FILE_s* null) nounwind optsize
  ret void
}

define i32 @__fsetlocking(%struct.__FILE_s* nocapture %f, i32 %type) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @__fwriting(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 4
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %10, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 5
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 7
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = icmp ugt i8* %6, %8
  br label %10

; <label>:10                                      ; preds = %4, %0
  %11 = phi i1 [ false, %0 ], [ %9, %4 ]
  %12 = zext i1 %11 to i32
  ret i32 %12
}

define i32 @__freading(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 2
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 1
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = icmp ugt i8* %2, %4
  %6 = zext i1 %5 to i32
  ret i32 %6
}

define i32 @__freadable(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = lshr i32 %2, 2
  %.lobit = and i32 %3, 1
  %4 = xor i32 %.lobit, 1
  ret i32 %4
}

define i32 @__fwritable(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = lshr i32 %2, 3
  %.lobit = and i32 %3, 1
  %4 = xor i32 %.lobit, 1
  ret i32 %4
}

define i32 @__flbf(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 20
  %2 = load i8* %1, align 1, !tbaa !0
  %.lobit = lshr i8 %2, 7
  %3 = zext i8 %.lobit to i32
  %.not = xor i32 %3, 1
  ret i32 %.not
}

define i64 @__fbufsize(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 12
  %2 = load i64* %1, align 8, !tbaa !5
  ret i64 %2
}

define i64 @__fpending(%struct.__FILE_s* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 4
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %12, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 5
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 7
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = ptrtoint i8* %6 to i64
  %10 = ptrtoint i8* %8 to i64
  %11 = sub i64 %9, %10
  br label %12

; <label>:12                                      ; preds = %4, %0
  %13 = phi i64 [ %11, %4 ], [ 0, %0 ]
  ret i64 %13
}

define i32 @__fpurge(%struct.__FILE_s* nocapture %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 4
  store i8* null, i8** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 7
  store i8* null, i8** %2, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 5
  store i8* null, i8** %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 2
  store i8* null, i8** %4, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.__FILE_s* %f, i64 0, i32 1
  store i8* null, i8** %5, align 8, !tbaa !7
  ret i32 0
}

define float @fabsf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = bitcast i32 %2 to float
  ret float %3
}

define x86_fp80 @fabsl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %ins = and i80 %1, 604462909807314587353087
  %2 = bitcast i80 %ins to x86_fp80
  ret x86_fp80 %2
}

define double @fabs(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = bitcast i64 %2 to double
  ret double %3
}

define i32 @faccessat(i32 %fd, i8* %filename, i32 %amode, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %filename to i64
  %3 = sext i32 %amode to i64
  %4 = sext i32 %flag to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 334, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @fchdir(i32 %fd) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 133, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @fchmodat(i32 %fd, i8* %path, i32 %mode, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = zext i32 %mode to i64
  %4 = sext i32 %flag to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 333, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @fchmod(i32 %fd, i32 %mode) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = zext i32 %mode to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 94, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @fchownat(i32 %fd, i8* %path, i32 %uid, i32 %gid, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = zext i32 %uid to i64
  %4 = zext i32 %gid to i64
  %5 = sext i32 %flag to i64
  %6 = tail call i64 (i64, ...)* @__syscall(i64 325, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i32 0) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define i32 @fchown(i32 %fd, i32 %uid, i32 %gid) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = zext i32 %uid to i64
  %3 = zext i32 %gid to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 207, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @__fclose_ca(%struct.__FILE_s.54* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.54* %f, i64 0, i32 3
  %2 = load {}** %1, align 8
  %3 = bitcast {}* %2 to i32 (%struct.__FILE_s.54*)*
  %4 = tail call i32 %3(%struct.__FILE_s.54* %f) nounwind optsize
  ret i32 %4
}

define i32 @fclose(%struct.__FILE_s.52* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.52* %f, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = and i32 %2, 1
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %22, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.__FILE_s.52* %f, i64 0, i32 13
  %7 = load %struct.__FILE_s.52** %6, align 8, !tbaa !7
  %8 = icmp eq %struct.__FILE_s.52* %7, null
  %.pre = getelementptr inbounds %struct.__FILE_s.52* %f, i64 0, i32 14
  br i1 %8, label %._crit_edge, label %9

; <label>:9                                       ; preds = %5
  %10 = load %struct.__FILE_s.52** %.pre, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.__FILE_s.52* %7, i64 0, i32 14
  store %struct.__FILE_s.52* %10, %struct.__FILE_s.52** %11, align 8, !tbaa !7
  br label %._crit_edge

._crit_edge:                                      ; preds = %9, %5
  %12 = load %struct.__FILE_s.52** %.pre, align 8, !tbaa !7
  %13 = icmp eq %struct.__FILE_s.52* %12, null
  br i1 %13, label %17, label %14

; <label>:14                                      ; preds = %._crit_edge
  %15 = load %struct.__FILE_s.52** %6, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.__FILE_s.52* %12, i64 0, i32 13
  store %struct.__FILE_s.52* %15, %struct.__FILE_s.52** %16, align 8, !tbaa !7
  br label %17

; <label>:17                                      ; preds = %14, %._crit_edge
  %18 = load %struct.__FILE_s.52** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 9), align 8, !tbaa !7
  %19 = icmp eq %struct.__FILE_s.52* %18, %f
  br i1 %19, label %20, label %22

; <label>:20                                      ; preds = %17
  %21 = load %struct.__FILE_s.52** %.pre, align 8, !tbaa !7
  store %struct.__FILE_s.52* %21, %struct.__FILE_s.52** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 9), align 8, !tbaa !7
  br label %22

; <label>:22                                      ; preds = %20, %17, %0
  %23 = tail call i32 bitcast (i32 (%struct.__FILE_s.67*)* @fflush to i32 (%struct.__FILE_s.52*)*)(%struct.__FILE_s.52* %f) nounwind optsize
  %24 = getelementptr inbounds %struct.__FILE_s.52* %f, i64 0, i32 3
  %25 = load {}** %24, align 8
  %26 = bitcast {}* %25 to i32 (%struct.__FILE_s.52*)*
  %27 = tail call i32 %26(%struct.__FILE_s.52* %f) nounwind optsize
  %28 = or i32 %27, %23
  br i1 %4, label %31, label %29

; <label>:29                                      ; preds = %22
  %30 = bitcast %struct.__FILE_s.52* %f to i8*
  tail call void @free(i8* %30) optsize
  br label %31

; <label>:31                                      ; preds = %29, %22
  ret i32 %28
}

define i32 @fcntl(i32 %fd, i32 %cmd, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.57], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.57]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.57]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag.57]* %ap, i64 0, i64 0, i32 3
  %7 = load i8** %6, align 16
  %8 = sext i32 %3 to i64
  %9 = getelementptr i8* %7, i64 %8
  %10 = add i32 %3, 8
  store i32 %10, i32* %2, align 16
  br label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag.57]* %ap, i64 0, i64 0, i32 2
  %13 = load i8** %12, align 8
  %14 = getelementptr i8* %13, i64 8
  store i8* %14, i8** %12, align 8
  br label %15

; <label>:15                                      ; preds = %11, %5
  %.in = phi i8* [ %9, %5 ], [ %13, %11 ]
  %16 = bitcast i8* %.in to i64*
  %17 = load i64* %16, align 8
  call void @llvm.va_end(i8* %1)
  %18 = icmp eq i32 %cmd, 7
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %15
  %20 = sext i32 %fd to i64
  %21 = call i64 @__syscall_cp(i64 221, i64 %20, i64 7, i64 %17, i64 0, i64 0, i64 0) nounwind optsize
  %22 = call i64 @__syscall_ret(i64 %21) nounwind optsize
  br label %30

; <label>:23                                      ; preds = %15
  %24 = icmp eq i32 %cmd, 9
  %25 = sext i32 %fd to i64
  %26 = sext i32 %cmd to i64
  %27 = call i64 (i64, ...)* @__syscall(i64 221, i64 %25, i64 %26, i64 %17, i32 0, i32 0, i32 0) nounwind optsize
  br i1 %24, label %30, label %28

; <label>:28                                      ; preds = %23
  %29 = call i64 @__syscall_ret(i64 %27) nounwind optsize
  br label %30

; <label>:30                                      ; preds = %28, %23, %19
  %.0.in = phi i64 [ %22, %19 ], [ %29, %28 ], [ %27, %23 ]
  %.0 = trunc i64 %.0.in to i32
  ret i32 %.0
}

define i8* @fcvt(double %x, i32 %n, i32* %dp, i32* %sign) nounwind uwtable optsize {
  %tmp = alloca [1500 x i8], align 16
  %1 = icmp ugt i32 %n, 1400
  %.01 = select i1 %1, i32 1400, i32 %n
  %2 = getelementptr inbounds [1500 x i8]* %tmp, i64 0, i64 0
  %3 = call i32 (i8*, i8*, ...)* @sprintf(i8* %2, i8* getelementptr inbounds ([5 x i8]* @.str149, i64 0, i64 0), i32 %.01, double %x) nounwind optsize
  %4 = load i8* %2, align 16, !tbaa !0
  %5 = icmp eq i8 %4, 45
  %6 = zext i1 %5 to i32
  %7 = zext i1 %5 to i64
  %8 = getelementptr inbounds [1500 x i8]* %tmp, i64 0, i64 %7
  %9 = load i8* %8, align 1, !tbaa !0
  %10 = icmp eq i8 %9, 48
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %0
  %.sum23 = or i64 %7, 2
  %12 = getelementptr inbounds [1500 x i8]* %tmp, i64 0, i64 %.sum23
  %13 = call i64 @strspn(i8* %12, i8* getelementptr inbounds ([2 x i8]* @.str1150, i64 0, i64 0)) nounwind optsize
  %14 = trunc i64 %13 to i32
  br label %19

; <label>:15                                      ; preds = %0
  %16 = call i64 @strcspn(i8* %8, i8* getelementptr inbounds ([2 x i8]* @.str2151, i64 0, i64 0)) nounwind optsize
  %17 = trunc i64 %16 to i32
  %18 = sub nsw i32 0, %17
  br label %19

; <label>:19                                      ; preds = %15, %11
  %lz.0 = phi i32 [ %14, %11 ], [ %18, %15 ]
  %20 = icmp sgt i32 %.01, %lz.0
  br i1 %20, label %25, label %21

; <label>:21                                      ; preds = %19
  store i32 %6, i32* %sign, align 4, !tbaa !6
  store i32 0, i32* %dp, align 4, !tbaa !6
  %22 = icmp ugt i32 %.01, 14
  %23 = sext i32 %.01 to i64
  %.op = sub i64 14, %23
  %.sum = select i1 %22, i64 0, i64 %.op
  %24 = getelementptr inbounds [16 x i8]* @.str3152, i64 0, i64 %.sum
  br label %28

; <label>:25                                      ; preds = %19
  %26 = sub nsw i32 %.01, %lz.0
  %27 = call i8* @ecvt(double %x, i32 %26, i32* %dp, i32* %sign) nounwind optsize
  br label %28

; <label>:28                                      ; preds = %25, %21
  %.0 = phi i8* [ %24, %21 ], [ %27, %25 ]
  ret i8* %.0
}

define i32 @fdatasync(i32 %fd) nounwind uwtable readnone optsize {
  ret i32 0
}

define float @fdimf(float %x, float %y) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095040
  br i1 %3, label %12, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast float %y to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp ugt i32 %6, 2139095040
  br i1 %7, label %12, label %8

; <label>:8                                       ; preds = %4
  %9 = fcmp ogt float %x, %y
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %8
  %11 = fsub float %x, %y
  br label %12

; <label>:12                                      ; preds = %10, %8, %4, %0
  %.0 = phi float [ %x, %0 ], [ %y, %4 ], [ %11, %10 ], [ 0.000000e+00, %8 ]
  ret float %.0
}

define x86_fp80 @fdiml(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %1 = tail call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %10, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @__fpclassifyl(x86_fp80 %y) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

; <label>:6                                       ; preds = %3
  %7 = fcmp ogt x86_fp80 %x, %y
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %6
  %9 = fsub x86_fp80 %x, %y
  br label %10

; <label>:10                                      ; preds = %8, %6, %3, %0
  %.0 = phi x86_fp80 [ %x, %0 ], [ %y, %3 ], [ %9, %8 ], [ 0xK00000000000000000000, %6 ]
  ret x86_fp80 %.0
}

define double @fdim(double %x, double %y) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = icmp ugt i64 %2, 9218868437227405312
  br i1 %3, label %12, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double %y to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %6, 9218868437227405312
  br i1 %7, label %12, label %8

; <label>:8                                       ; preds = %4
  %9 = fcmp ogt double %x, %y
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %8
  %11 = fsub double %x, %y
  br label %12

; <label>:12                                      ; preds = %10, %8, %4, %0
  %.0 = phi double [ %x, %0 ], [ %y, %4 ], [ %11, %10 ], [ 0.000000e+00, %8 ]
  ret double %.0
}

define %struct.__DIR_s.58* @fdopendir(i32 %fd) nounwind uwtable optsize {
  %st = alloca %struct.stat, align 8
  %1 = call i32 @fstat(i32 %fd, %struct.stat* %st) nounwind optsize
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %18, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.stat* %st, i64 0, i32 3
  %5 = load i32* %4, align 8, !tbaa !6
  %6 = and i32 %5, 61440
  %7 = icmp eq i32 %6, 16384
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %3
  %9 = call i32* @__errno_location() nounwind readnone optsize
  store i32 20, i32* %9, align 4, !tbaa !6
  br label %18

; <label>:10                                      ; preds = %3
  %11 = call i8* @calloc(i64 1, i64 2072) nounwind optsize
  %12 = icmp eq i8* %11, null
  br i1 %12, label %18, label %13

; <label>:13                                      ; preds = %10
  %14 = bitcast i8* %11 to %struct.__DIR_s.58*
  %15 = call i32 (i32, i32, ...)* @fcntl(i32 %fd, i32 2, i32 1) nounwind optsize
  %16 = getelementptr inbounds i8* %11, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %fd, i32* %17, align 4, !tbaa !6
  br label %18

; <label>:18                                      ; preds = %13, %10, %8, %0
  %.0 = phi %struct.__DIR_s.58* [ %14, %13 ], [ null, %8 ], [ null, %0 ], [ null, %10 ]
  ret %struct.__DIR_s.58* %.0
}

define %struct.__FILE_s.61* @__fdopen(i32 %fd, i8* %mode) nounwind uwtable optsize {
  %tio = alloca %struct.termios.62, align 4
  %1 = call i8* @strchr(i8* %mode, i32 43) nounwind optsize
  %2 = icmp eq i8* %1, null
  %3 = load i8* %mode, align 1, !tbaa !0
  %4 = sext i8 %3 to i32
  %5 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8]* @.str153, i64 0, i64 0), i32 %4) nounwind optsize
  %6 = icmp eq i8* %5, null
  br i1 %6, label %68, label %7

; <label>:7                                       ; preds = %0
  %8 = call i8* @malloc(i64 1216) optsize
  %9 = bitcast i8* %8 to %struct.__FILE_s.61*
  %10 = icmp eq i8* %8, null
  br i1 %10, label %68, label %11

; <label>:11                                      ; preds = %7
  %12 = call i8* @memset(i8* %8, i32 0, i64 184) nounwind optsize
  br i1 %2, label %13, label %18

; <label>:13                                      ; preds = %11
  %14 = load i8* %mode, align 1, !tbaa !0
  %15 = icmp eq i8 %14, 114
  %16 = select i1 %15, i32 8, i32 4
  %17 = bitcast i8* %8 to i32*
  store i32 %16, i32* %17, align 4, !tbaa !6
  br label %18

; <label>:18                                      ; preds = %13, %11
  %19 = load i8* %mode, align 1, !tbaa !0
  %20 = icmp eq i8 %19, 97
  br i1 %20, label %21, label %._crit_edge

; <label>:21                                      ; preds = %18
  %22 = sext i32 %fd to i64
  %23 = call i64 (i64, ...)* @__syscall(i64 221, i64 %22, i64 3, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %24 = shl i64 %23, 32
  %sext = ashr exact i64 %24, 32
  %25 = or i64 %sext, 1024
  %26 = call i64 (i64, ...)* @__syscall(i64 221, i64 %22, i64 4, i64 %25, i32 0, i32 0, i32 0) nounwind optsize
  br label %._crit_edge

._crit_edge:                                      ; preds = %21, %18
  %27 = getelementptr inbounds i8* %8, i64 120
  %28 = bitcast i8* %27 to i32*
  store i32 %fd, i32* %28, align 4, !tbaa !6
  %29 = getelementptr inbounds i8* %8, i64 192
  %30 = getelementptr inbounds i8* %8, i64 88
  %31 = bitcast i8* %30 to i8**
  store i8* %29, i8** %31, align 8, !tbaa !7
  %32 = getelementptr inbounds i8* %8, i64 96
  %33 = bitcast i8* %32 to i64*
  store i64 1024, i64* %33, align 8, !tbaa !5
  %34 = getelementptr inbounds i8* %8, i64 139
  store i8 -1, i8* %34, align 1, !tbaa !0
  %35 = bitcast i8* %8 to i32*
  %36 = load i32* %35, align 4, !tbaa !6
  %37 = and i32 %36, 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %45

; <label>:39                                      ; preds = %._crit_edge
  %40 = sext i32 %fd to i64
  %41 = ptrtoint %struct.termios.62* %tio to i64
  %42 = call i64 (i64, ...)* @__syscall(i64 54, i64 %40, i64 21505, i64 %41, i32 0, i32 0, i32 0) nounwind optsize
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %45

; <label>:44                                      ; preds = %39
  store i8 10, i8* %34, align 1, !tbaa !0
  br label %45

; <label>:45                                      ; preds = %44, %39, %._crit_edge
  %46 = getelementptr inbounds i8* %8, i64 64
  %47 = bitcast i8* %46 to i64 (%struct.__FILE_s.61*, i8*, i64)**
  store i64 (%struct.__FILE_s.61*, i8*, i64)* bitcast (i64 (%struct.__FILE_s.643*, i8*, i64)* @__stdio_read to i64 (%struct.__FILE_s.61*, i8*, i64)*), i64 (%struct.__FILE_s.61*, i8*, i64)** %47, align 8, !tbaa !7
  %48 = getelementptr inbounds i8* %8, i64 72
  %49 = bitcast i8* %48 to i64 (%struct.__FILE_s.61*, i8*, i64)**
  store i64 (%struct.__FILE_s.61*, i8*, i64)* bitcast (i64 (%struct.__FILE_s.647*, i8*, i64)* @__stdio_write to i64 (%struct.__FILE_s.61*, i8*, i64)*), i64 (%struct.__FILE_s.61*, i8*, i64)** %49, align 8, !tbaa !7
  %50 = getelementptr inbounds i8* %8, i64 80
  %51 = bitcast i8* %50 to i64 (%struct.__FILE_s.61*, i64, i32)**
  store i64 (%struct.__FILE_s.61*, i64, i32)* bitcast (i64 (%struct.__FILE_s.646*, i64, i32)* @__stdio_seek to i64 (%struct.__FILE_s.61*, i64, i32)*), i64 (%struct.__FILE_s.61*, i64, i32)** %51, align 8, !tbaa !7
  %52 = getelementptr inbounds i8* %8, i64 24
  %53 = bitcast i8* %52 to i32 (%struct.__FILE_s.61*)**
  store i32 (%struct.__FILE_s.61*)* bitcast (i32 (%struct.__FILE_s.642*)* @__stdio_close to i32 (%struct.__FILE_s.61*)*), i32 (%struct.__FILE_s.61*)** %53, align 8, !tbaa !7
  %54 = load i32* getelementptr inbounds (%struct.__libc.60* bitcast (%struct.__libc* @__libc to %struct.__libc.60*), i64 0, i32 1), align 8, !tbaa !6
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

; <label>:56                                      ; preds = %45
  %57 = getelementptr inbounds i8* %8, i64 140
  %58 = bitcast i8* %57 to i32*
  store i32 -1, i32* %58, align 4, !tbaa !6
  br label %59

; <label>:59                                      ; preds = %56, %45
  %60 = load %struct.__FILE_s.61** getelementptr inbounds (%struct.__libc.60* bitcast (%struct.__libc* @__libc to %struct.__libc.60*), i64 0, i32 9), align 8, !tbaa !7
  %61 = getelementptr inbounds i8* %8, i64 112
  %62 = bitcast i8* %61 to %struct.__FILE_s.61**
  store %struct.__FILE_s.61* %60, %struct.__FILE_s.61** %62, align 8, !tbaa !7
  %63 = load %struct.__FILE_s.61** getelementptr inbounds (%struct.__libc.60* bitcast (%struct.__libc* @__libc to %struct.__libc.60*), i64 0, i32 9), align 8, !tbaa !7
  %64 = icmp eq %struct.__FILE_s.61* %63, null
  br i1 %64, label %67, label %65

; <label>:65                                      ; preds = %59
  %66 = getelementptr inbounds %struct.__FILE_s.61* %63, i64 0, i32 13
  store %struct.__FILE_s.61* %9, %struct.__FILE_s.61** %66, align 8, !tbaa !7
  br label %67

; <label>:67                                      ; preds = %65, %59
  store %struct.__FILE_s.61* %9, %struct.__FILE_s.61** getelementptr inbounds (%struct.__libc.60* bitcast (%struct.__libc* @__libc to %struct.__libc.60*), i64 0, i32 9), align 8, !tbaa !7
  br label %68

; <label>:68                                      ; preds = %67, %7, %0
  %.0 = phi %struct.__FILE_s.61* [ %9, %67 ], [ null, %0 ], [ null, %7 ]
  ret %struct.__FILE_s.61* %.0
}

define i32 @fegetexceptflag(i16* nocapture %fp, i32 %mask) nounwind uwtable optsize {
  %1 = tail call i32 @fetestexcept(i32 %mask) nounwind optsize
  %2 = trunc i32 %1 to i16
  store i16 %2, i16* %fp, align 2, !tbaa !8
  ret i32 0
}

define i32 @feholdexcept(%struct.fenv_t* %envp) nounwind uwtable optsize {
  %1 = tail call i32 @fegetenv(%struct.fenv_t* %envp) nounwind optsize
  ret i32 0
}

define i32 @feclearexcept(i32 %mask) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @feraiseexcept(i32 %mask) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @fetestexcept(i32 %mask) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @fegetround() nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @fesetround(i32 %r) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @fegetenv(%struct.fenv_t* nocapture %envp) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @fesetenv(%struct.fenv_t* nocapture %envp) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @feof(%struct.__FILE_s.64* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.64* %f, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = lshr i32 %2, 4
  %.lobit = and i32 %3, 1
  ret i32 %.lobit
}

define i32 @ferror(%struct.__FILE_s.65* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.65* %f, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = lshr i32 %2, 5
  %.lobit = and i32 %3, 1
  ret i32 %.lobit
}

define i32 @fesetexceptflag(i16* nocapture %fp, i32 %mask) nounwind uwtable optsize {
  %1 = load i16* %fp, align 2, !tbaa !8
  %2 = zext i16 %1 to i32
  %3 = xor i32 %2, -1
  %4 = and i32 %3, %mask
  %5 = tail call i32 @feclearexcept(i32 %4) nounwind optsize
  %6 = load i16* %fp, align 2, !tbaa !8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, %mask
  %9 = tail call i32 @feraiseexcept(i32 %8) nounwind optsize
  ret i32 0
}

define i32 @feupdateenv(%struct.fenv_t* %envp) nounwind uwtable optsize {
  %1 = tail call i32 @fetestexcept(i32 63) nounwind optsize
  %2 = tail call i32 @fesetenv(%struct.fenv_t* %envp) nounwind optsize
  %3 = tail call i32 @feraiseexcept(i32 %1) nounwind optsize
  ret i32 0
}

define i32 @fexecve(i32 %fd, i8** %argv, i8** %envp) nounwind uwtable optsize {
  %buf = alloca [29 x i8], align 16
  %1 = getelementptr inbounds [29 x i8]* %buf, i64 0, i64 0
  %2 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %1, i64 29, i8* getelementptr inbounds ([17 x i8]* @fexecve.proc, i64 0, i64 0), i32 %fd) nounwind optsize
  %3 = call i32 @execve(i8* %1, i8** %argv, i8** %envp) nounwind optsize
  %4 = call i32* @__errno_location() nounwind readnone optsize
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  store i32 9, i32* %4, align 4, !tbaa !6
  br label %8

; <label>:8                                       ; preds = %7, %0
  ret i32 -1
}

define i32 @fflush(%struct.__FILE_s.67* %f) nounwind uwtable optsize {
  %1 = icmp eq %struct.__FILE_s.67* %f, null
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i32 @__fflush_unlocked(%struct.__FILE_s.67* %f) optsize
  br label %.loopexit

; <label>:4                                       ; preds = %0
  %5 = load %struct.__FILE_s.67** bitcast (%struct.__FILE_s.642** @__stdout_used to %struct.__FILE_s.67**), align 8, !tbaa !7
  %6 = icmp eq %struct.__FILE_s.67* %5, null
  br i1 %6, label %.preheader, label %7

; <label>:7                                       ; preds = %4
  %8 = tail call i32 @fflush(%struct.__FILE_s.67* %5) optsize
  br label %.preheader

.preheader:                                       ; preds = %7, %4
  %r.0.ph = phi i32 [ %8, %7 ], [ 0, %4 ]
  %.012 = load %struct.__FILE_s.67** getelementptr inbounds (%struct.__libc.68* bitcast (%struct.__libc* @__libc to %struct.__libc.68*), i64 0, i32 9), align 8
  %9 = icmp eq %struct.__FILE_s.67* %.012, null
  br i1 %9, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %18, %.preheader
  %.014 = phi %struct.__FILE_s.67* [ %.01, %18 ], [ %.012, %.preheader ]
  %r.03 = phi i32 [ %r.1, %18 ], [ %r.0.ph, %.preheader ]
  %10 = getelementptr inbounds %struct.__FILE_s.67* %.014, i64 0, i32 5
  %11 = load i8** %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.__FILE_s.67* %.014, i64 0, i32 7
  %13 = load i8** %12, align 8, !tbaa !7
  %14 = icmp ugt i8* %11, %13
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %.lr.ph
  %16 = tail call i32 @__fflush_unlocked(%struct.__FILE_s.67* %.014) optsize
  %17 = or i32 %16, %r.03
  br label %18

; <label>:18                                      ; preds = %15, %.lr.ph
  %r.1 = phi i32 [ %17, %15 ], [ %r.03, %.lr.ph ]
  %19 = getelementptr inbounds %struct.__FILE_s.67* %.014, i64 0, i32 14
  %.01 = load %struct.__FILE_s.67** %19, align 8
  %20 = icmp eq %struct.__FILE_s.67* %.01, null
  br i1 %20, label %.loopexit, label %.lr.ph

.loopexit:                                        ; preds = %18, %.preheader, %2
  %.0 = phi i32 [ %3, %2 ], [ %r.0.ph, %.preheader ], [ %r.1, %18 ]
  ret i32 %.0
}

define internal i32 @__fflush_unlocked(%struct.__FILE_s.67* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 5
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 7
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = icmp ugt i8* %2, %4
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 9
  %8 = load i64 (%struct.__FILE_s.67*, i8*, i64)** %7, align 8, !tbaa !7
  %9 = tail call i64 %8(%struct.__FILE_s.67* %f, i8* null, i64 0) nounwind optsize
  %10 = load i8** %1, align 8, !tbaa !7
  %11 = icmp eq i8* %10, null
  br i1 %11, label %32, label %12

; <label>:12                                      ; preds = %6, %0
  %13 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 1
  %14 = load i8** %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 2
  %16 = load i8** %15, align 8, !tbaa !7
  %17 = icmp ult i8* %14, %16
  br i1 %17, label %18, label %25

; <label>:18                                      ; preds = %12
  %19 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 10
  %20 = load i64 (%struct.__FILE_s.67*, i64, i32)** %19, align 8, !tbaa !7
  %21 = ptrtoint i8* %14 to i64
  %22 = ptrtoint i8* %16 to i64
  %23 = sub i64 %21, %22
  %24 = tail call i64 %20(%struct.__FILE_s.67* %f, i64 %23, i32 1) nounwind optsize
  br label %25

; <label>:25                                      ; preds = %18, %12
  %26 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 4
  store i8* null, i8** %26, align 8, !tbaa !7
  store i8* null, i8** %3, align 8, !tbaa !7
  store i8* null, i8** %1, align 8, !tbaa !7
  store i8* null, i8** %15, align 8, !tbaa !7
  store i8* null, i8** %13, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 25
  %28 = load i32 (%struct.__FILE_s.67*)** %27, align 8, !tbaa !7
  %29 = icmp eq i32 (%struct.__FILE_s.67*)* %28, null
  br i1 %29, label %32, label %30

; <label>:30                                      ; preds = %25
  %31 = tail call i32 %28(%struct.__FILE_s.67* %f) nounwind optsize
  br label %32

; <label>:32                                      ; preds = %30, %25, %6
  %.0 = phi i32 [ -1, %6 ], [ 0, %25 ], [ 0, %30 ]
  ret i32 %.0
}

define i32 @ffs(i32 %i) nounwind uwtable readnone optsize {
  %1 = icmp ne i32 %i, 0
  %2 = and i32 %i, 1
  %3 = icmp eq i32 %2, 0
  %or.cond3 = and i1 %1, %3
  br i1 %or.cond3, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.015 = phi i32 [ %5, %.lr.ph ], [ 1, %0 ]
  %j.04 = phi i32 [ %4, %.lr.ph ], [ %i, %0 ]
  %4 = lshr i32 %j.04, 1
  %5 = add nsw i32 %.015, 1
  %6 = icmp ne i32 %4, 0
  %7 = and i32 %4, 1
  %8 = icmp eq i32 %7, 0
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %.lr.ph, label %.critedge

.critedge:                                        ; preds = %.lr.ph, %0
  %.lcssa = phi i1 [ %1, %0 ], [ %6, %.lr.ph ]
  %.01.lcssa = phi i32 [ 1, %0 ], [ %5, %.lr.ph ]
  %.01. = select i1 %.lcssa, i32 %.01.lcssa, i32 0
  ret i32 %.01.
}

define i32 @fgetc(%struct.__FILE_s.69* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 21
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i32 @__lockfile(%struct.__FILE_s.69* %f) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %19

; <label>:7                                       ; preds = %4, %0
  %8 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 1
  %9 = load i8** %8, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 2
  %11 = load i8** %10, align 8, !tbaa !7
  %12 = icmp ult i8* %9, %11
  br i1 %12, label %13, label %17

; <label>:13                                      ; preds = %7
  %14 = getelementptr inbounds i8* %9, i64 1
  store i8* %14, i8** %8, align 8, !tbaa !7
  %15 = load i8* %9, align 1, !tbaa !0
  %16 = zext i8 %15 to i32
  br label %33

; <label>:17                                      ; preds = %7
  %18 = tail call i32 @__uflow(%struct.__FILE_s.69* %f) nounwind optsize
  br label %33

; <label>:19                                      ; preds = %4
  %20 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 1
  %21 = load i8** %20, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 2
  %23 = load i8** %22, align 8, !tbaa !7
  %24 = icmp ult i8* %21, %23
  br i1 %24, label %25, label %29

; <label>:25                                      ; preds = %19
  %26 = getelementptr inbounds i8* %21, i64 1
  store i8* %26, i8** %20, align 8, !tbaa !7
  %27 = load i8* %21, align 1, !tbaa !0
  %28 = zext i8 %27 to i32
  br label %31

; <label>:29                                      ; preds = %19
  %30 = tail call i32 @__uflow(%struct.__FILE_s.69* %f) nounwind optsize
  br label %31

; <label>:31                                      ; preds = %29, %25
  %32 = phi i32 [ %28, %25 ], [ %30, %29 ]
  tail call void @__unlockfile(%struct.__FILE_s.69* %f) nounwind optsize
  br label %33

; <label>:33                                      ; preds = %31, %17, %13
  %.0 = phi i32 [ %32, %31 ], [ %16, %13 ], [ %18, %17 ]
  ret i32 %.0
}

declare i32 @__lockfile(%struct.__FILE_s.69*) optsize

declare void @__unlockfile(%struct.__FILE_s.69*) optsize

define i32 @fgetpos(%struct.__FILE_s.70* %f, %union.fpos_t* nocapture %pos) nounwind uwtable optsize {
  %1 = tail call i64 @__ftello(%struct.__FILE_s.70* %f) nounwind optsize
  %2 = icmp slt i64 %1, 0
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = bitcast %union.fpos_t* %pos to i64*
  store i64 %1, i64* %4, align 8, !tbaa !5
  br label %5

; <label>:5                                       ; preds = %3, %0
  %.0 = phi i32 [ 0, %3 ], [ -1, %0 ]
  ret i32 %.0
}

define %struct.passwd.71* @fgetpwent(%struct.__FILE_s.72* %f) nounwind uwtable optsize {
  %size = alloca i64, align 8
  store i64 0, i64* %size, align 8, !tbaa !5
  %1 = call %struct.passwd.71* @__getpwent_a(%struct.__FILE_s.72* %f, %struct.passwd.71* @fgetpwent.pw, i8** @fgetpwent.line, i64* %size) nounwind optsize
  ret %struct.passwd.71* %1
}

define i8* @fgets(i8* %s, i32 %n, %struct.__FILE_s.37* %f) nounwind uwtable optsize {
  %1 = add nsw i32 %n, -1
  %2 = icmp slt i32 %n, 2
  br i1 %2, label %5, label %.preheader

.preheader:                                       ; preds = %0
  %3 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 1
  %4 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 2
  br label %8

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %7, label %65

; <label>:7                                       ; preds = %5
  store i8 0, i8* %s, align 1, !tbaa !0
  br label %65

; <label>:8                                       ; preds = %59, %.preheader
  %p.0 = phi i8* [ %63, %59 ], [ %s, %.preheader ]
  %.02 = phi i32 [ %61, %59 ], [ %1, %.preheader ]
  %9 = icmp eq i32 %.02, 0
  br i1 %9, label %.loopexit, label %10

; <label>:10                                      ; preds = %8
  %11 = load i8** %3, align 8, !tbaa !7
  %12 = load i8** %4, align 8, !tbaa !7
  %13 = ptrtoint i8* %12 to i64
  %14 = ptrtoint i8* %11 to i64
  %15 = sub i64 %13, %14
  %16 = tail call i8* @memchr(i8* %11, i32 10, i64 %15) nounwind optsize
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %24

; <label>:18                                      ; preds = %10
  %19 = load i8** %3, align 8, !tbaa !7
  %20 = ptrtoint i8* %16 to i64
  %21 = ptrtoint i8* %19 to i64
  %22 = add i64 %20, 1
  %23 = sub i64 %22, %21
  br label %30

; <label>:24                                      ; preds = %10
  %25 = load i8** %4, align 8, !tbaa !7
  %26 = load i8** %3, align 8, !tbaa !7
  %27 = ptrtoint i8* %25 to i64
  %28 = ptrtoint i8* %26 to i64
  %29 = sub i64 %27, %28
  br label %30

; <label>:30                                      ; preds = %24, %18
  %31 = phi i8* [ %19, %18 ], [ %26, %24 ]
  %32 = phi i64 [ %23, %18 ], [ %29, %24 ]
  %33 = sext i32 %.02 to i64
  %34 = icmp ult i64 %32, %33
  %. = select i1 %34, i64 %32, i64 %33
  %35 = tail call i8* @memcpy(i8* %p.0, i8* %31, i64 %.) nounwind optsize
  %36 = load i8** %3, align 8, !tbaa !7
  %37 = getelementptr inbounds i8* %36, i64 %.
  store i8* %37, i8** %3, align 8, !tbaa !7
  %38 = getelementptr inbounds i8* %p.0, i64 %.
  %39 = sub i64 %33, %.
  %40 = trunc i64 %39 to i32
  %41 = icmp eq i32 %40, 0
  %or.cond = or i1 %17, %41
  br i1 %or.cond, label %.loopexit, label %42

; <label>:42                                      ; preds = %30
  %43 = load i8** %4, align 8, !tbaa !7
  %44 = icmp ult i8* %37, %43
  br i1 %44, label %.thread, label %48

.thread:                                          ; preds = %42
  %.sum3 = add i64 %., 1
  %45 = getelementptr inbounds i8* %36, i64 %.sum3
  store i8* %45, i8** %3, align 8, !tbaa !7
  %46 = load i8* %37, align 1, !tbaa !0
  %47 = zext i8 %46 to i32
  br label %59

; <label>:48                                      ; preds = %42
  %49 = tail call i32 bitcast (i32 (%struct.__FILE_s.69*)* @__uflow to i32 (%struct.__FILE_s.37*)*)(%struct.__FILE_s.37* %f) nounwind optsize
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %._crit_edge

._crit_edge:                                      ; preds = %48
  %.sum.pre = add i64 %., 1
  br label %59

; <label>:51                                      ; preds = %48
  %52 = icmp eq i8* %38, %s
  br i1 %52, label %58, label %53

; <label>:53                                      ; preds = %51
  %54 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 0
  %55 = load i32* %54, align 4, !tbaa !6
  %56 = and i32 %55, 16
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %.loopexit

; <label>:58                                      ; preds = %53, %51
  br label %.loopexit

; <label>:59                                      ; preds = %._crit_edge, %.thread
  %.sum.pre-phi = phi i64 [ %.sum.pre, %._crit_edge ], [ %.sum3, %.thread ]
  %60 = phi i32 [ %49, %._crit_edge ], [ %47, %.thread ]
  %61 = add nsw i32 %40, -1
  %62 = trunc i32 %60 to i8
  %63 = getelementptr inbounds i8* %p.0, i64 %.sum.pre-phi
  store i8 %62, i8* %38, align 1, !tbaa !0
  %64 = icmp eq i8 %62, 10
  br i1 %64, label %.loopexit, label %8

.loopexit:                                        ; preds = %59, %58, %53, %30, %8
  %p.1 = phi i8* [ %38, %58 ], [ %38, %53 ], [ %p.0, %8 ], [ %63, %59 ], [ %38, %30 ]
  %.01 = phi i8* [ null, %58 ], [ %s, %53 ], [ %s, %8 ], [ %s, %59 ], [ %s, %30 ]
  store i8 0, i8* %p.1, align 1, !tbaa !0
  br label %65

; <label>:65                                      ; preds = %.loopexit, %7, %5
  %.0 = phi i8* [ %s, %7 ], [ %.01, %.loopexit ], [ null, %5 ]
  ret i8* %.0
}

define i32 @__fgetwc_unlocked(%struct.__FILE_s.69* %f) nounwind uwtable optsize {
  %st = alloca i64, align 8
  %tmpcast = bitcast i64* %st to %struct.mbstate_t*
  %wc = alloca i32, align 4
  %b = alloca i8, align 1
  store i64 0, i64* %st, align 8
  %1 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 19
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = add i8 %2, 1
  %4 = or i8 %3, %2
  store i8 %4, i8* %1, align 1, !tbaa !0
  %5 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 1
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 2
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = icmp ult i8* %6, %8
  br i1 %9, label %10, label %.preheader

; <label>:10                                      ; preds = %0
  %11 = ptrtoint i8* %8 to i64
  %12 = ptrtoint i8* %6 to i64
  %13 = sub i64 %11, %12
  %14 = call i64 @mbrtowc(i32* %wc, i8* %6, i64 %13, %struct.mbstate_t* %tmpcast) nounwind optsize
  %15 = icmp ult i64 %14, -2
  br i1 %15, label %16, label %23

; <label>:16                                      ; preds = %10
  %17 = icmp eq i64 %14, 0
  %18 = zext i1 %17 to i64
  %19 = add i64 %18, %14
  %20 = load i8** %5, align 8, !tbaa !7
  %21 = getelementptr inbounds i8* %20, i64 %19
  store i8* %21, i8** %5, align 8, !tbaa !7
  %22 = load i32* %wc, align 4, !tbaa !6
  br label %.loopexit

; <label>:23                                      ; preds = %10
  %24 = icmp eq i64 %14, -1
  br i1 %24, label %25, label %.preheader

; <label>:25                                      ; preds = %23
  %26 = load i8** %5, align 8, !tbaa !7
  %27 = getelementptr inbounds i8* %26, i64 1
  store i8* %27, i8** %5, align 8, !tbaa !7
  br label %.loopexit

.preheader:                                       ; preds = %44, %23, %0
  %l.0 = phi i64 [ %45, %44 ], [ -2, %0 ], [ %14, %23 ]
  %28 = icmp eq i64 %l.0, -2
  br i1 %28, label %29, label %47

; <label>:29                                      ; preds = %.preheader
  %30 = load i8** %5, align 8, !tbaa !7
  %31 = load i8** %7, align 8, !tbaa !7
  %32 = icmp ult i8* %30, %31
  br i1 %32, label %.thread, label %35

.thread:                                          ; preds = %29
  %33 = getelementptr inbounds i8* %30, i64 1
  store i8* %33, i8** %5, align 8, !tbaa !7
  %34 = load i8* %30, align 1, !tbaa !0
  store i8 %34, i8* %b, align 1, !tbaa !0
  br label %44

; <label>:35                                      ; preds = %29
  %36 = call i32 @__uflow(%struct.__FILE_s.69* %f) nounwind optsize
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %b, align 1, !tbaa !0
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %44

; <label>:39                                      ; preds = %35
  %40 = call i32 @mbsinit(%struct.mbstate_t* %tmpcast) nounwind optsize
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %.loopexit

; <label>:42                                      ; preds = %39
  %43 = call i32* @__errno_location() nounwind readnone optsize
  store i32 84, i32* %43, align 4, !tbaa !6
  br label %.loopexit

; <label>:44                                      ; preds = %35, %.thread
  %45 = call i64 @mbrtowc(i32* %wc, i8* %b, i64 1, %struct.mbstate_t* %tmpcast) nounwind optsize
  %46 = icmp eq i64 %45, -1
  br i1 %46, label %.loopexit, label %.preheader

; <label>:47                                      ; preds = %.preheader
  %48 = load i32* %wc, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %47, %44, %42, %39, %25, %16
  %.0 = phi i32 [ %22, %16 ], [ -1, %25 ], [ %48, %47 ], [ -1, %39 ], [ -1, %42 ], [ -1, %44 ]
  ret i32 %.0
}

define i32 @fgetwc(%struct.__FILE_s.69* %f) nounwind uwtable optsize {
  %1 = tail call i32 @__fgetwc_unlocked(%struct.__FILE_s.69* %f) optsize
  ret i32 %1
}

define i32* @fgetws(i32* %s, i32 %n, %struct.__FILE_s.75* %f) nounwind uwtable optsize {
  %1 = icmp eq i32 %n, 0
  br i1 %1, label %16, label %.preheader

.preheader:                                       ; preds = %6, %0
  %.01.in = phi i32 [ %.01, %6 ], [ %n, %0 ]
  %p.0 = phi i32* [ %7, %6 ], [ %s, %0 ]
  %.01 = add nsw i32 %.01.in, -1
  %2 = icmp eq i32 %.01, 0
  br i1 %2, label %9, label %3

; <label>:3                                       ; preds = %.preheader
  %4 = tail call i32 bitcast (i32 (%struct.__FILE_s.69*)* @__fgetwc_unlocked to i32 (%struct.__FILE_s.75*)*)(%struct.__FILE_s.75* %f) nounwind optsize
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %3
  %7 = getelementptr inbounds i32* %p.0, i64 1
  store i32 %4, i32* %p.0, align 4, !tbaa !6
  %8 = icmp eq i32 %4, 10
  br i1 %8, label %9, label %.preheader

; <label>:9                                       ; preds = %6, %3, %.preheader
  %p.1 = phi i32* [ %p.0, %3 ], [ %7, %6 ], [ %p.0, %.preheader ]
  store i32 0, i32* %p.1, align 4, !tbaa !6
  %10 = getelementptr inbounds %struct.__FILE_s.75* %f, i64 0, i32 0
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = and i32 %11, 32
  %13 = icmp eq i32 %12, 0
  %p.2 = select i1 %13, i32* %p.1, i32* %s
  %14 = icmp eq i32* %p.2, %s
  %15 = select i1 %14, i32* null, i32* %s
  br label %16

; <label>:16                                      ; preds = %9, %0
  %.0 = phi i32* [ %15, %9 ], [ %s, %0 ]
  ret i32* %.0
}

define i32 @fileno(%struct.__FILE_s.76* nocapture %f) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.76* %f, i64 0, i32 15
  %2 = load i32* %1, align 4, !tbaa !6
  ret i32 %2
}

define void @flockfile(%struct.__FILE_s.77* %f) nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (%struct.__FILE_s.106*)* @ftrylockfile to i32 (%struct.__FILE_s.77*)*)(%struct.__FILE_s.77* %f) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %3 = getelementptr inbounds %struct.__FILE_s.77* %f, i64 0, i32 21
  %4 = getelementptr inbounds %struct.__FILE_s.77* %f, i64 0, i32 22
  br label %5

; <label>:5                                       ; preds = %.backedge, %.lr.ph
  %6 = load i32* %3, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %.backedge, label %8

; <label>:8                                       ; preds = %5
  tail call void @__wait(i32* %3, i32* %4, i32 %6, i32 1) nounwind optsize
  br label %.backedge

.backedge:                                        ; preds = %8, %5
  %9 = tail call i32 bitcast (i32 (%struct.__FILE_s.106*)* @ftrylockfile to i32 (%struct.__FILE_s.77*)*)(%struct.__FILE_s.77* %f) nounwind optsize
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %._crit_edge, label %5

._crit_edge:                                      ; preds = %.backedge, %0
  ret void
}

define i32 @flock(i32 %fd, i32 %op) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = sext i32 %op to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 143, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define float @floorf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  %4 = add nsw i32 %3, -127
  %5 = icmp slt i32 %4, 23
  br i1 %5, label %6, label %32

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %4, 0
  br i1 %7, label %8, label %17

; <label>:8                                       ; preds = %6
  %9 = fadd float %x, 0x46293E5940000000
  %10 = fcmp ogt float %9, 0.000000e+00
  br i1 %10, label %11, label %36

; <label>:11                                      ; preds = %8
  %12 = icmp sgt i32 %1, -1
  br i1 %12, label %36, label %13

; <label>:13                                      ; preds = %11
  %14 = and i32 %1, 2147483647
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %36, label %16

; <label>:16                                      ; preds = %13
  br label %36

; <label>:17                                      ; preds = %6
  %18 = lshr i32 8388607, %4
  %19 = and i32 %18, %1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %38, label %21

; <label>:21                                      ; preds = %17
  %22 = fadd float %x, 0x46293E5940000000
  %23 = fcmp ogt float %22, 0.000000e+00
  br i1 %23, label %24, label %36

; <label>:24                                      ; preds = %21
  %25 = icmp slt i32 %1, 0
  br i1 %25, label %26, label %29

; <label>:26                                      ; preds = %24
  %27 = lshr i32 8388608, %4
  %28 = add nsw i32 %27, %1
  br label %29

; <label>:29                                      ; preds = %26, %24
  %i0.0 = phi i32 [ %28, %26 ], [ %1, %24 ]
  %30 = xor i32 %18, -1
  %31 = and i32 %i0.0, %30
  br label %36

; <label>:32                                      ; preds = %0
  %33 = icmp eq i32 %4, 128
  br i1 %33, label %34, label %38

; <label>:34                                      ; preds = %32
  %35 = fadd float %x, %x
  br label %38

; <label>:36                                      ; preds = %29, %21, %16, %13, %11, %8
  %i0.1 = phi i32 [ -1082130432, %16 ], [ %1, %13 ], [ %1, %8 ], [ %31, %29 ], [ %1, %21 ], [ 0, %11 ]
  %37 = bitcast i32 %i0.1 to float
  br label %38

; <label>:38                                      ; preds = %36, %34, %32, %17
  %.0 = phi float [ %37, %36 ], [ %35, %34 ], [ %x, %17 ], [ %x, %32 ]
  ret float %.0
}

define x86_fp80 @floorl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = zext i80 %1 to i128
  %3 = lshr i80 %1, 64
  %4 = trunc i80 %3 to i32
  %5 = and i32 %4, 32767
  %6 = add nsw i32 %5, -16383
  %7 = icmp slt i32 %6, 31
  br i1 %7, label %8, label %65

; <label>:8                                       ; preds = %0
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %10, label %23

; <label>:10                                      ; preds = %8
  %11 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %12 = fcmp ogt x86_fp80 %11, 0xK00000000000000000000
  br i1 %12, label %13, label %134

; <label>:13                                      ; preds = %10
  %14 = icmp eq i32 %5, 0
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %13
  %16 = lshr i80 %1, 32
  %17 = or i80 %16, %1
  %18 = trunc i80 %17 to i32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %134, label %20

; <label>:20                                      ; preds = %15, %13
  %21 = ashr i80 %1, 79
  %22 = and i80 %21, -302240678275694148452352
  br label %134

; <label>:23                                      ; preds = %8
  %24 = add nsw i32 %5, -16382
  %25 = zext i32 %24 to i64
  %26 = lshr i64 4294967295, %25
  %27 = lshr i80 %1, 32
  %28 = trunc i80 %27 to i64
  %29 = and i64 %28, 4294967295
  %30 = and i64 %26, %29
  %31 = trunc i80 %1 to i64
  %32 = and i64 %31, 4294967295
  %33 = or i64 %30, %32
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %136, label %35

; <label>:35                                      ; preds = %23
  %36 = icmp slt i80 %1, 0
  br i1 %36, label %37, label %55

; <label>:37                                      ; preds = %35
  %38 = sub i32 16414, %5
  %39 = zext i32 %38 to i64
  %40 = shl i64 1, %39
  %41 = add i64 %40, %28
  %.mask57 = and i64 %41, 4294967295
  %42 = zext i64 %.mask57 to i128
  %43 = shl nuw nsw i128 %42, 32
  %mask38 = and i128 %2, 1208907372870559760121855
  %ins39 = or i128 %43, %mask38
  %44 = icmp ult i64 %.mask57, %29
  br i1 %44, label %45, label %55

; <label>:45                                      ; preds = %37
  %46 = add i32 %4, 1
  %47 = and i32 %46, 32767
  %48 = and i32 %4, 32768
  %49 = or i32 %47, %48
  %50 = zext i32 %49 to i128
  %51 = shl nuw nsw i128 %50, 64
  %mask35 = and i128 %2, 4294967295
  %52 = and i64 %41, 2147483647
  %.mask58 = or i64 %52, 2147483648
  %53 = zext i64 %.mask58 to i128
  %54 = shl nuw nsw i128 %53, 32
  %.masked59 = and i128 %51, 1208907372870555465154560
  %mask32 = or i128 %.masked59, %mask35
  %ins33 = or i128 %mask32, %54
  br label %55

; <label>:55                                      ; preds = %45, %37, %35
  %u.0 = phi i128 [ %ins33, %45 ], [ %ins39, %37 ], [ %2, %35 ]
  %56 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %57 = fcmp ogt x86_fp80 %56, 0xK00000000000000000000
  %extract.t49 = trunc i128 %u.0 to i80
  br i1 %57, label %58, label %134

; <label>:58                                      ; preds = %55
  %59 = lshr i128 %u.0, 32
  %60 = trunc i128 %59 to i64
  %61 = and i64 %26, 4294967295
  %62 = xor i64 %61, 4294967295
  %.mask56 = and i64 %62, %60
  %63 = zext i64 %.mask56 to i128
  %64 = shl nuw nsw i128 %63, 32
  %mask29 = and i128 %u.0, 1208907372870555465154560
  %ins30 = or i128 %64, %mask29
  %ins30.tr = trunc i128 %ins30 to i80
  %extract.t48 = and i80 %ins30.tr, -4294967296
  br label %134

; <label>:65                                      ; preds = %0
  %66 = icmp slt i32 %6, 63
  br i1 %66, label %67, label %134

; <label>:67                                      ; preds = %65
  %68 = add nsw i32 %5, -16382
  %69 = zext i32 %68 to i64
  %70 = lshr i64 -1, %69
  %71 = trunc i80 %1 to i64
  %72 = and i64 %71, 4294967295
  %73 = and i64 %70, %72
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %136, label %75

; <label>:75                                      ; preds = %67
  %76 = icmp slt i80 %1, 0
  br i1 %76, label %77, label %126

; <label>:77                                      ; preds = %75
  %78 = icmp eq i32 %6, 31
  br i1 %78, label %79, label %99

; <label>:79                                      ; preds = %77
  %80 = lshr i80 %1, 32
  %81 = trunc i80 %80 to i32
  %82 = trunc i80 %80 to i64
  %83 = and i64 %82, 4294967295
  %84 = add i32 %81, 1
  %85 = zext i32 %84 to i128
  %86 = shl nuw nsw i128 %85, 32
  %mask24 = and i128 %2, 1208907372870559760121855
  %ins25 = or i128 %86, %mask24
  %87 = zext i32 %84 to i64
  %88 = icmp ult i64 %87, %83
  br i1 %88, label %89, label %126

; <label>:89                                      ; preds = %79
  %90 = add i32 %4, 1
  %91 = and i32 %90, 32767
  %92 = and i32 %4, 32768
  %93 = or i32 %91, %92
  %94 = zext i32 %93 to i128
  %95 = shl nuw nsw i128 %94, 64
  %mask21 = and i128 %2, 4294967295
  %96 = or i32 %84, -2147483648
  %97 = zext i32 %96 to i128
  %98 = shl nuw nsw i128 %97, 32
  %.masked54 = and i128 %95, 1208907372870555465154560
  %mask18 = or i128 %98, %mask21
  %ins19 = or i128 %mask18, %.masked54
  br label %126

; <label>:99                                      ; preds = %77
  %100 = sub i32 16446, %5
  %101 = zext i32 %100 to i64
  %102 = shl i64 1, %101
  %103 = add i64 %102, %71
  %.mask53 = and i64 %103, 4294967295
  %104 = zext i64 %.mask53 to i128
  %mask15 = and i128 %2, 1208925819614624879738880
  %ins16 = or i128 %104, %mask15
  %105 = icmp ult i64 %.mask53, %72
  br i1 %105, label %106, label %126

; <label>:106                                     ; preds = %99
  %107 = lshr i80 %1, 32
  %108 = trunc i80 %107 to i32
  %109 = trunc i80 %107 to i64
  %110 = and i64 %109, 4294967295
  %111 = add i32 %108, 1
  %112 = zext i32 %111 to i128
  %113 = shl nuw nsw i128 %112, 32
  %mask12 = and i128 %ins16, 1208907372870559760121855
  %ins13 = or i128 %mask12, %113
  %114 = zext i32 %111 to i64
  %115 = icmp ult i64 %114, %110
  br i1 %115, label %116, label %126

; <label>:116                                     ; preds = %106
  %117 = add i32 %4, 1
  %118 = and i32 %117, 32767
  %119 = and i32 %4, 32768
  %120 = or i32 %118, %119
  %121 = zext i32 %120 to i128
  %122 = shl nuw nsw i128 %121, 64
  %123 = or i32 %111, -2147483648
  %124 = zext i32 %123 to i128
  %125 = shl nuw nsw i128 %124, 32
  %.masked = and i128 %122, 1208907372870555465154560
  %mask6 = or i128 %.masked, %125
  %ins7 = or i128 %mask6, %104
  br label %126

; <label>:126                                     ; preds = %116, %106, %99, %89, %79, %75
  %u.1 = phi i128 [ %ins19, %89 ], [ %ins25, %79 ], [ %ins7, %116 ], [ %ins13, %106 ], [ %ins16, %99 ], [ %2, %75 ]
  %127 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %128 = fcmp ogt x86_fp80 %127, 0xK00000000000000000000
  %extract.t51 = trunc i128 %u.1 to i80
  br i1 %128, label %129, label %134

; <label>:129                                     ; preds = %126
  %130 = trunc i128 %u.1 to i64
  %131 = and i64 %70, 4294967295
  %132 = xor i64 %131, 4294967295
  %.mask = and i64 %132, %130
  %133 = zext i64 %.mask to i128
  %mask = and i128 %u.1, 1208925819614624879738880
  %ins = or i128 %133, %mask
  %extract.t50 = trunc i128 %ins to i80
  br label %134

; <label>:134                                     ; preds = %129, %126, %65, %58, %55, %20, %15, %10
  %u.2.off0 = phi i80 [ %22, %20 ], [ %1, %15 ], [ %1, %10 ], [ %extract.t48, %58 ], [ %extract.t49, %55 ], [ %extract.t50, %129 ], [ %extract.t51, %126 ], [ %1, %65 ]
  %135 = bitcast i80 %u.2.off0 to x86_fp80
  br label %136

; <label>:136                                     ; preds = %134, %67, %23
  %.0 = phi x86_fp80 [ %135, %134 ], [ %x, %23 ], [ %x, %67 ]
  ret x86_fp80 %.0
}

define double @floor(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = lshr i64 %1, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = add nsw i32 %7, -1023
  %9 = icmp slt i32 %8, 20
  br i1 %9, label %10, label %38

; <label>:10                                      ; preds = %0
  %11 = icmp slt i32 %8, 0
  br i1 %11, label %12, label %22

; <label>:12                                      ; preds = %10
  %13 = fadd double %x, 1.000000e+300
  %14 = fcmp ogt double %13, 0.000000e+00
  br i1 %14, label %15, label %67

; <label>:15                                      ; preds = %12
  %16 = icmp sgt i32 %3, -1
  br i1 %16, label %67, label %17

; <label>:17                                      ; preds = %15
  %18 = and i32 %3, 2147483647
  %19 = or i32 %18, %4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %67, label %21

; <label>:21                                      ; preds = %17
  br label %67

; <label>:22                                      ; preds = %10
  %23 = lshr i32 1048575, %8
  %24 = and i32 %23, %3
  %25 = or i32 %24, %4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %73, label %27

; <label>:27                                      ; preds = %22
  %28 = fadd double %x, 1.000000e+300
  %29 = fcmp ogt double %28, 0.000000e+00
  br i1 %29, label %30, label %67

; <label>:30                                      ; preds = %27
  %31 = icmp slt i32 %3, 0
  br i1 %31, label %32, label %35

; <label>:32                                      ; preds = %30
  %33 = lshr i32 1048576, %8
  %34 = add nsw i32 %33, %3
  br label %35

; <label>:35                                      ; preds = %32, %30
  %i0.0 = phi i32 [ %34, %32 ], [ %3, %30 ]
  %36 = xor i32 %23, -1
  %37 = and i32 %i0.0, %36
  br label %67

; <label>:38                                      ; preds = %0
  %39 = icmp sgt i32 %8, 51
  br i1 %39, label %40, label %44

; <label>:40                                      ; preds = %38
  %41 = icmp eq i32 %8, 1024
  br i1 %41, label %42, label %73

; <label>:42                                      ; preds = %40
  %43 = fadd double %x, %x
  br label %73

; <label>:44                                      ; preds = %38
  %45 = add nsw i32 %7, -1043
  %46 = lshr i32 -1, %45
  %47 = and i32 %46, %4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %73, label %49

; <label>:49                                      ; preds = %44
  %50 = fadd double %x, 1.000000e+300
  %51 = fcmp ogt double %50, 0.000000e+00
  br i1 %51, label %52, label %67

; <label>:52                                      ; preds = %49
  %53 = icmp slt i32 %3, 0
  br i1 %53, label %54, label %64

; <label>:54                                      ; preds = %52
  %55 = icmp eq i32 %8, 20
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %54
  %57 = add nsw i32 %3, 1
  br label %64

; <label>:58                                      ; preds = %54
  %59 = sub i32 1075, %7
  %60 = shl i32 1, %59
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %4, i32 %60)
  %61 = extractvalue { i32, i1 } %uadd, 0
  %62 = extractvalue { i32, i1 } %uadd, 1
  %63 = zext i1 %62 to i32
  %. = add nsw i32 %63, %3
  br label %64

; <label>:64                                      ; preds = %58, %56, %52
  %i1.0 = phi i32 [ %4, %56 ], [ %61, %58 ], [ %4, %52 ]
  %i0.2 = phi i32 [ %57, %56 ], [ %., %58 ], [ %3, %52 ]
  %65 = xor i32 %46, -1
  %66 = and i32 %i1.0, %65
  br label %67

; <label>:67                                      ; preds = %64, %49, %35, %27, %21, %17, %15, %12
  %i1.1 = phi i32 [ 0, %21 ], [ %4, %17 ], [ %4, %12 ], [ 0, %35 ], [ %4, %27 ], [ %66, %64 ], [ %4, %49 ], [ 0, %15 ]
  %i0.3 = phi i32 [ -1074790400, %21 ], [ %3, %17 ], [ %3, %12 ], [ %37, %35 ], [ %3, %27 ], [ %i0.2, %64 ], [ %3, %49 ], [ 0, %15 ]
  %68 = zext i32 %i0.3 to i64
  %69 = shl nuw i64 %68, 32
  %70 = zext i32 %i1.1 to i64
  %71 = or i64 %69, %70
  %72 = bitcast i64 %71 to double
  br label %73

; <label>:73                                      ; preds = %67, %44, %42, %40, %22
  %.0 = phi double [ %72, %67 ], [ %43, %42 ], [ %x, %22 ], [ %x, %40 ], [ %x, %44 ]
  ret double %.0
}

define float @fmaf(float %x, float %y, float %z) nounwind uwtable optsize {
  %vxy = alloca double, align 8
  %1 = fpext float %x to double
  %2 = fpext float %y to double
  %3 = fmul double %1, %2
  %4 = fpext float %z to double
  %5 = fadd double %3, %4
  %6 = bitcast double %5 to i64
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 536870911
  %9 = icmp ne i32 %8, 268435456
  %10 = and i64 %6, 9218868437227405312
  %11 = icmp eq i64 %10, 9218868437227405312
  %or.cond = or i1 %9, %11
  br i1 %or.cond, label %31, label %12

; <label>:12                                      ; preds = %0
  %13 = fsub double %5, %3
  %14 = fcmp oeq double %13, %4
  br i1 %14, label %31, label %15

; <label>:15                                      ; preds = %12
  %16 = call i32 @fegetround() nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %15
  %19 = call i32 @fesetround(i32 3072) nounwind optsize
  store volatile double %3, double* %vxy, align 8, !tbaa !3
  %20 = load volatile double* %vxy, align 8, !tbaa !3
  %21 = fadd double %20, %4
  %22 = call i32 @fesetround(i32 0) nounwind optsize
  %23 = fcmp oeq double %5, %21
  br i1 %23, label %24, label %31

; <label>:24                                      ; preds = %18
  %25 = bitcast double %21 to i64
  %26 = and i64 %25, -4294967296
  %27 = add i32 %7, 1
  %28 = zext i32 %27 to i64
  %29 = or i64 %26, %28
  %30 = bitcast i64 %29 to double
  br label %31

; <label>:31                                      ; preds = %24, %18, %15, %12, %0
  %.0.in = phi double [ %5, %0 ], [ %5, %15 ], [ %5, %12 ], [ %30, %24 ], [ %21, %18 ]
  %.0 = fptrunc double %.0.in to float
  ret float %.0
}

define x86_fp80 @fmal(x86_fp80 %x, x86_fp80 %y, x86_fp80 %z) nounwind uwtable optsize {
  %ex = alloca i32, align 4
  %ey = alloca i32, align 4
  %ez = alloca i32, align 4
  %vzs = alloca x86_fp80, align 16
  %1 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  %2 = fcmp oeq x86_fp80 %y, 0xK00000000000000000000
  %or.cond = or i1 %1, %2
  br i1 %or.cond, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = fmul x86_fp80 %x, %y
  %5 = fadd x86_fp80 %4, %z
  br label %154

; <label>:6                                       ; preds = %0
  %7 = fcmp oeq x86_fp80 %z, 0xK00000000000000000000
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %6
  %9 = fmul x86_fp80 %x, %y
  br label %154

; <label>:10                                      ; preds = %6
  %11 = call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %12 = icmp sgt i32 %11, 1
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %10
  %14 = call i32 @__fpclassifyl(x86_fp80 %y) nounwind optsize
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %19, label %16

; <label>:16                                      ; preds = %13, %10
  %17 = fmul x86_fp80 %x, %y
  %18 = fadd x86_fp80 %17, %z
  br label %154

; <label>:19                                      ; preds = %13
  %20 = call i32 @__fpclassifyl(x86_fp80 %z) nounwind optsize
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %22, label %154

; <label>:22                                      ; preds = %19
  %23 = call x86_fp80 @frexpl(x86_fp80 %x, i32* %ex) nounwind optsize
  %24 = call x86_fp80 @frexpl(x86_fp80 %y, i32* %ey) nounwind optsize
  %25 = call x86_fp80 @frexpl(x86_fp80 %z, i32* %ez) nounwind optsize
  %26 = call i32 @fegetround() nounwind optsize
  %27 = load i32* %ex, align 4, !tbaa !6
  %28 = load i32* %ey, align 4, !tbaa !6
  %29 = load i32* %ez, align 4, !tbaa !6
  %30 = add i32 %28, %27
  %31 = sub i32 %30, %29
  %32 = icmp slt i32 %31, -64
  br i1 %32, label %33, label %60

; <label>:33                                      ; preds = %22
  %34 = call i32 @feraiseexcept(i32 32) nounwind optsize
  %35 = call i32 @__fpclassifyl(x86_fp80 %z) nounwind optsize
  %36 = icmp eq i32 %35, 4
  br i1 %36, label %39, label %37

; <label>:37                                      ; preds = %33
  %38 = call i32 @feraiseexcept(i32 16) nounwind optsize
  br label %39

; <label>:39                                      ; preds = %37, %33
  switch i32 %26, label %154 [
    i32 3072, label %40
    i32 1024, label %48
    i32 2048, label %54
  ]

; <label>:40                                      ; preds = %39
  %41 = fcmp ogt x86_fp80 %x, 0xK00000000000000000000
  %42 = fcmp olt x86_fp80 %y, 0xK00000000000000000000
  %43 = xor i1 %41, %42
  %44 = fcmp olt x86_fp80 %z, 0xK00000000000000000000
  %45 = xor i1 %43, %44
  br i1 %45, label %154, label %46

; <label>:46                                      ; preds = %40
  %47 = call x86_fp80 @nextafterl(x86_fp80 %z, x86_fp80 0xK00000000000000000000) nounwind optsize
  br label %154

; <label>:48                                      ; preds = %39
  %49 = fcmp ogt x86_fp80 %x, 0xK00000000000000000000
  %50 = fcmp olt x86_fp80 %y, 0xK00000000000000000000
  %51 = xor i1 %49, %50
  br i1 %51, label %154, label %52

; <label>:52                                      ; preds = %48
  %53 = call x86_fp80 @nextafterl(x86_fp80 %z, x86_fp80 0xKFFFF8000000000000000) nounwind optsize
  br label %154

; <label>:54                                      ; preds = %39
  %55 = fcmp ogt x86_fp80 %x, 0xK00000000000000000000
  %56 = fcmp olt x86_fp80 %y, 0xK00000000000000000000
  %57 = xor i1 %55, %56
  br i1 %57, label %58, label %154

; <label>:58                                      ; preds = %54
  %59 = call x86_fp80 @nextafterl(x86_fp80 %z, x86_fp80 0xK7FFF8000000000000000) nounwind optsize
  br label %154

; <label>:60                                      ; preds = %22
  %61 = icmp slt i32 %31, 129
  br i1 %61, label %62, label %65

; <label>:62                                      ; preds = %60
  %63 = sub nsw i32 0, %31
  %64 = call x86_fp80 @ldexpl(x86_fp80 %25, i32 %63) nounwind optsize
  br label %67

; <label>:65                                      ; preds = %60
  %66 = call x86_fp80 @copysignl(x86_fp80 0xK00018000000000000000, x86_fp80 %25) nounwind optsize
  br label %67

; <label>:67                                      ; preds = %65, %62
  %zs.0 = phi x86_fp80 [ %64, %62 ], [ %66, %65 ]
  %68 = call i32 @fesetround(i32 0) nounwind optsize
  %69 = fmul x86_fp80 %23, 0xK401F8000000080000000
  %70 = fsub x86_fp80 %23, %69
  %71 = fadd x86_fp80 %70, %69
  %72 = fsub x86_fp80 %23, %71
  %73 = fmul x86_fp80 %24, 0xK401F8000000080000000
  %74 = fsub x86_fp80 %24, %73
  %75 = fadd x86_fp80 %74, %73
  %76 = fsub x86_fp80 %24, %75
  %77 = fmul x86_fp80 %71, %75
  %78 = fmul x86_fp80 %71, %76
  %79 = fmul x86_fp80 %72, %75
  %80 = fadd x86_fp80 %78, %79
  %81 = fadd x86_fp80 %77, %80
  %82 = fsub x86_fp80 %77, %81
  %83 = fadd x86_fp80 %82, %80
  %84 = fmul x86_fp80 %72, %76
  %85 = fadd x86_fp80 %83, %84
  %86 = fadd x86_fp80 %81, %zs.0
  %87 = fsub x86_fp80 %86, %81
  %88 = fsub x86_fp80 %86, %87
  %89 = fsub x86_fp80 %81, %88
  %90 = fsub x86_fp80 %zs.0, %87
  %91 = fadd x86_fp80 %89, %90
  %92 = load i32* %ex, align 4, !tbaa !6
  %93 = load i32* %ey, align 4, !tbaa !6
  %94 = add nsw i32 %93, %92
  %95 = fcmp oeq x86_fp80 %86, 0xK00000000000000000000
  br i1 %95, label %96, label %102

; <label>:96                                      ; preds = %67
  %97 = call i32 @fesetround(i32 %26) nounwind optsize
  store volatile x86_fp80 %zs.0, x86_fp80* %vzs, align 16, !tbaa !4
  %98 = load volatile x86_fp80* %vzs, align 16, !tbaa !4
  %99 = fadd x86_fp80 %81, %98
  %100 = call x86_fp80 @ldexpl(x86_fp80 %85, i32 %94) nounwind optsize
  %101 = fadd x86_fp80 %99, %100
  br label %154

; <label>:102                                     ; preds = %67
  %103 = icmp eq i32 %26, 0
  br i1 %103, label %109, label %104

; <label>:104                                     ; preds = %102
  %105 = call i32 @fesetround(i32 %26) nounwind optsize
  %106 = fadd x86_fp80 %91, %85
  %107 = fadd x86_fp80 %86, %106
  %108 = call x86_fp80 @ldexpl(x86_fp80 %107, i32 %94) nounwind optsize
  br label %154

; <label>:109                                     ; preds = %102
  %110 = fadd x86_fp80 %91, %85
  %111 = fsub x86_fp80 %110, %91
  %112 = fsub x86_fp80 %110, %111
  %113 = fsub x86_fp80 %91, %112
  %114 = fsub x86_fp80 %85, %111
  %115 = fadd x86_fp80 %113, %114
  %116 = fcmp une x86_fp80 %115, 0xK00000000000000000000
  br i1 %116, label %117, label %add_adjusted.exit

; <label>:117                                     ; preds = %109
  %118 = bitcast x86_fp80 %110 to i80
  %119 = and i80 %118, 1
  %120 = icmp eq i80 %119, 0
  br i1 %120, label %121, label %add_adjusted.exit

; <label>:121                                     ; preds = %117
  %122 = fmul x86_fp80 %115, 0xK7FFF8000000000000000
  %123 = call x86_fp80 @nextafterl(x86_fp80 %110, x86_fp80 %122) nounwind optsize
  br label %add_adjusted.exit

add_adjusted.exit:                                ; preds = %121, %117, %109
  %sum.0.0.i9 = phi x86_fp80 [ %123, %121 ], [ %110, %117 ], [ %110, %109 ]
  %124 = call i32 @ilogbl(x86_fp80 %86) nounwind optsize
  %125 = add nsw i32 %124, %94
  %126 = icmp sgt i32 %125, -16383
  %127 = fadd x86_fp80 %86, %sum.0.0.i9
  br i1 %126, label %128, label %130

; <label>:128                                     ; preds = %add_adjusted.exit
  %129 = call x86_fp80 @ldexpl(x86_fp80 %127, i32 %94) nounwind optsize
  br label %154

; <label>:130                                     ; preds = %add_adjusted.exit
  %131 = fsub x86_fp80 %127, %86
  %132 = fsub x86_fp80 %127, %131
  %133 = fsub x86_fp80 %86, %132
  %134 = fsub x86_fp80 %sum.0.0.i9, %131
  %135 = fadd x86_fp80 %133, %134
  %136 = fcmp une x86_fp80 %135, 0xK00000000000000000000
  br i1 %136, label %137, label %add_and_denormalize.exit

; <label>:137                                     ; preds = %130
  %138 = bitcast x86_fp80 %127 to i80
  %139 = lshr i80 %138, 64
  %140 = trunc i80 %139 to i32
  %141 = and i32 %140, 32767
  %142 = sub nsw i32 0, %141
  %143 = icmp ne i32 %94, %142
  %144 = zext i1 %143 to i32
  %145 = trunc i80 %138 to i32
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %144, %146
  br i1 %147, label %add_and_denormalize.exit, label %148

; <label>:148                                     ; preds = %137
  %149 = fmul x86_fp80 %135, 0xK7FFF8000000000000000
  %150 = call x86_fp80 @nextafterl(x86_fp80 %127, x86_fp80 %149) nounwind optsize
  br label %add_and_denormalize.exit

add_and_denormalize.exit:                         ; preds = %148, %137, %130
  %sum.0.0.i = phi x86_fp80 [ %150, %148 ], [ %127, %137 ], [ %127, %130 ]
  %151 = fptrunc x86_fp80 %sum.0.0.i to double
  %152 = call double @ldexp(double %151, i32 %94) nounwind optsize
  %153 = fpext double %152 to x86_fp80
  br label %154

; <label>:154                                     ; preds = %add_and_denormalize.exit, %128, %104, %96, %58, %54, %52, %48, %46, %40, %39, %19, %16, %8, %3
  %.0 = phi x86_fp80 [ %5, %3 ], [ %9, %8 ], [ %59, %58 ], [ %53, %52 ], [ %47, %46 ], [ %101, %96 ], [ %108, %104 ], [ %129, %128 ], [ %153, %add_and_denormalize.exit ], [ %18, %16 ], [ %z, %19 ], [ %z, %39 ], [ %z, %40 ], [ %z, %48 ], [ %z, %54 ]
  ret x86_fp80 %.0
}

define double @fma(double %x, double %y, double %z) nounwind uwtable optsize {
  %ex = alloca i32, align 4
  %ey = alloca i32, align 4
  %ez = alloca i32, align 4
  %vzs = alloca double, align 8
  %1 = fcmp oeq double %x, 0.000000e+00
  %2 = fcmp oeq double %y, 0.000000e+00
  %or.cond = or i1 %1, %2
  br i1 %or.cond, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = fmul double %x, %y
  %5 = fadd double %4, %z
  br label %164

; <label>:6                                       ; preds = %0
  %7 = fcmp oeq double %z, 0.000000e+00
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %6
  %9 = fmul double %x, %y
  br label %164

; <label>:10                                      ; preds = %6
  %11 = bitcast double %x to i64
  %12 = and i64 %11, 9218868437227405312
  %13 = icmp ult i64 %12, 9218868437227405312
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %10
  %15 = bitcast double %y to i64
  %16 = and i64 %15, 9218868437227405312
  %17 = icmp ult i64 %16, 9218868437227405312
  br i1 %17, label %21, label %18

; <label>:18                                      ; preds = %14, %10
  %19 = fmul double %x, %y
  %20 = fadd double %19, %z
  br label %164

; <label>:21                                      ; preds = %14
  %22 = bitcast double %z to i64
  %23 = and i64 %22, 9218868437227405312
  %24 = icmp ult i64 %23, 9218868437227405312
  br i1 %24, label %25, label %164

; <label>:25                                      ; preds = %21
  %26 = call double @frexp(double %x, i32* %ex) nounwind optsize
  %27 = call double @frexp(double %y, i32* %ey) nounwind optsize
  %28 = call double @frexp(double %z, i32* %ez) nounwind optsize
  %29 = call i32 @fegetround() nounwind optsize
  %30 = load i32* %ex, align 4, !tbaa !6
  %31 = load i32* %ey, align 4, !tbaa !6
  %32 = load i32* %ez, align 4, !tbaa !6
  %33 = add i32 %31, %30
  %34 = sub i32 %33, %32
  %35 = icmp slt i32 %34, -53
  br i1 %35, label %36, label %64

; <label>:36                                      ; preds = %25
  %37 = call i32 @feraiseexcept(i32 32) nounwind optsize
  %38 = add i64 %22, 4503599627370496
  %39 = and i64 %38, 9214364837600034816
  %40 = icmp ugt i64 %39, 9007199254740991
  br i1 %40, label %43, label %41

; <label>:41                                      ; preds = %36
  %42 = call i32 @feraiseexcept(i32 16) nounwind optsize
  br label %43

; <label>:43                                      ; preds = %41, %36
  switch i32 %29, label %164 [
    i32 3072, label %44
    i32 1024, label %52
    i32 2048, label %58
  ]

; <label>:44                                      ; preds = %43
  %45 = fcmp ogt double %x, 0.000000e+00
  %46 = fcmp olt double %y, 0.000000e+00
  %47 = xor i1 %45, %46
  %48 = fcmp olt double %z, 0.000000e+00
  %49 = xor i1 %47, %48
  br i1 %49, label %164, label %50

; <label>:50                                      ; preds = %44
  %51 = call double @nextafter(double %z, double 0.000000e+00) nounwind optsize
  br label %164

; <label>:52                                      ; preds = %43
  %53 = fcmp ogt double %x, 0.000000e+00
  %54 = fcmp olt double %y, 0.000000e+00
  %55 = xor i1 %53, %54
  br i1 %55, label %164, label %56

; <label>:56                                      ; preds = %52
  %57 = call double @nextafter(double %z, double 0xFFF0000000000000) nounwind optsize
  br label %164

; <label>:58                                      ; preds = %43
  %59 = fcmp ogt double %x, 0.000000e+00
  %60 = fcmp olt double %y, 0.000000e+00
  %61 = xor i1 %59, %60
  br i1 %61, label %62, label %164

; <label>:62                                      ; preds = %58
  %63 = call double @nextafter(double %z, double 0x7FF0000000000000) nounwind optsize
  br label %164

; <label>:64                                      ; preds = %25
  %65 = icmp slt i32 %34, 107
  br i1 %65, label %66, label %69

; <label>:66                                      ; preds = %64
  %67 = sub nsw i32 0, %34
  %68 = call double @ldexp(double %28, i32 %67) nounwind optsize
  br label %71

; <label>:69                                      ; preds = %64
  %70 = call double @copysign(double 0x10000000000000, double %28) nounwind optsize
  br label %71

; <label>:71                                      ; preds = %69, %66
  %zs.0 = phi double [ %68, %66 ], [ %70, %69 ]
  %72 = call i32 @fesetround(i32 0) nounwind optsize
  %73 = fmul double %26, 0x41A0000002000000
  %74 = fsub double %26, %73
  %75 = fadd double %74, %73
  %76 = fsub double %26, %75
  %77 = fmul double %27, 0x41A0000002000000
  %78 = fsub double %27, %77
  %79 = fadd double %78, %77
  %80 = fsub double %27, %79
  %81 = fmul double %75, %79
  %82 = fmul double %75, %80
  %83 = fmul double %76, %79
  %84 = fadd double %82, %83
  %85 = fadd double %81, %84
  %86 = fsub double %81, %85
  %87 = fadd double %86, %84
  %88 = fmul double %76, %80
  %89 = fadd double %87, %88
  %90 = fadd double %85, %zs.0
  %91 = fsub double %90, %85
  %92 = fsub double %90, %91
  %93 = fsub double %85, %92
  %94 = fsub double %zs.0, %91
  %95 = fadd double %93, %94
  %96 = load i32* %ex, align 4, !tbaa !6
  %97 = load i32* %ey, align 4, !tbaa !6
  %98 = add nsw i32 %97, %96
  %99 = fcmp oeq double %90, 0.000000e+00
  br i1 %99, label %100, label %106

; <label>:100                                     ; preds = %71
  %101 = call i32 @fesetround(i32 %29) nounwind optsize
  store volatile double %zs.0, double* %vzs, align 8, !tbaa !3
  %102 = load volatile double* %vzs, align 8, !tbaa !3
  %103 = fadd double %85, %102
  %104 = call double @ldexp(double %89, i32 %98) nounwind optsize
  %105 = fadd double %103, %104
  br label %164

; <label>:106                                     ; preds = %71
  %107 = icmp eq i32 %29, 0
  br i1 %107, label %113, label %108

; <label>:108                                     ; preds = %106
  %109 = call i32 @fesetround(i32 %29) nounwind optsize
  %110 = fadd double %95, %89
  %111 = fadd double %90, %110
  %112 = call double @ldexp(double %111, i32 %98) nounwind optsize
  br label %164

; <label>:113                                     ; preds = %106
  %114 = fadd double %95, %89
  %115 = fsub double %114, %95
  %116 = fsub double %114, %115
  %117 = fsub double %95, %116
  %118 = fsub double %89, %115
  %119 = fadd double %117, %118
  %120 = fcmp une double %119, 0.000000e+00
  br i1 %120, label %121, label %add_adjusted.exit

; <label>:121                                     ; preds = %113
  %122 = bitcast double %114 to i64
  %123 = and i64 %122, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %add_adjusted.exit

; <label>:125                                     ; preds = %121
  %126 = bitcast double %119 to i64
  %127 = xor i64 %126, %122
  %128 = lshr i64 %127, 62
  %129 = add i64 %122, 1
  %130 = sub i64 %129, %128
  %131 = bitcast i64 %130 to double
  br label %add_adjusted.exit

add_adjusted.exit:                                ; preds = %125, %121, %113
  %sum.05.0.i19 = phi double [ %131, %125 ], [ %114, %121 ], [ %114, %113 ]
  %132 = call i32 @ilogb(double %90) nounwind optsize
  %133 = add nsw i32 %132, %98
  %134 = icmp sgt i32 %133, -1023
  %135 = fadd double %90, %sum.05.0.i19
  br i1 %134, label %136, label %138

; <label>:136                                     ; preds = %add_adjusted.exit
  %137 = call double @ldexp(double %135, i32 %98) nounwind optsize
  br label %164

; <label>:138                                     ; preds = %add_adjusted.exit
  %139 = fsub double %135, %90
  %140 = fsub double %135, %139
  %141 = fsub double %90, %140
  %142 = fsub double %sum.05.0.i19, %139
  %143 = fadd double %141, %142
  %144 = fcmp une double %143, 0.000000e+00
  br i1 %144, label %145, label %add_and_denormalize.exit

; <label>:145                                     ; preds = %138
  %146 = bitcast double %135 to i64
  %147 = lshr i64 %146, 52
  %148 = trunc i64 %147 to i32
  %149 = and i32 %148, 2047
  %150 = sub nsw i32 0, %149
  %151 = icmp ne i32 %98, %150
  %152 = zext i1 %151 to i32
  %.tr.i = trunc i64 %146 to i32
  %153 = and i32 %.tr.i, 1
  %154 = icmp eq i32 %152, %153
  br i1 %154, label %add_and_denormalize.exit, label %155

; <label>:155                                     ; preds = %145
  %156 = bitcast double %143 to i64
  %157 = xor i64 %156, %146
  %158 = lshr i64 %157, 62
  %159 = and i64 %158, 2
  %160 = add i64 %146, 1
  %161 = sub i64 %160, %159
  %162 = bitcast i64 %161 to double
  br label %add_and_denormalize.exit

add_and_denormalize.exit:                         ; preds = %155, %145, %138
  %sum.05.0.i = phi double [ %162, %155 ], [ %135, %145 ], [ %135, %138 ]
  %163 = call double @ldexp(double %sum.05.0.i, i32 %98) nounwind optsize
  br label %164

; <label>:164                                     ; preds = %add_and_denormalize.exit, %136, %108, %100, %62, %58, %56, %52, %50, %44, %43, %21, %18, %8, %3
  %.0 = phi double [ %5, %3 ], [ %9, %8 ], [ %63, %62 ], [ %57, %56 ], [ %51, %50 ], [ %105, %100 ], [ %112, %108 ], [ %137, %136 ], [ %163, %add_and_denormalize.exit ], [ %20, %18 ], [ %z, %21 ], [ %z, %43 ], [ %z, %44 ], [ %z, %52 ], [ %z, %58 ]
  ret double %.0
}

define float @fmaxf(float %x, float %y) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095040
  br i1 %3, label %16, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast float %y to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp ugt i32 %6, 2139095040
  br i1 %7, label %16, label %8

; <label>:8                                       ; preds = %4
  %.lobit = lshr i32 %1, 31
  %.lobit10 = lshr i32 %5, 31
  %9 = icmp eq i32 %.lobit, %.lobit10
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp slt i32 %1, 0
  %12 = select i1 %11, float %y, float %x
  br label %16

; <label>:13                                      ; preds = %8
  %14 = fcmp olt float %x, %y
  %15 = select i1 %14, float %y, float %x
  br label %16

; <label>:16                                      ; preds = %13, %10, %4, %0
  %.0 = phi float [ %12, %10 ], [ %15, %13 ], [ %y, %0 ], [ %x, %4 ]
  ret float %.0
}

define x86_fp80 @fmaxl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %1 = tail call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %17, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @__fpclassifyl(x86_fp80 %y) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

; <label>:6                                       ; preds = %3
  %7 = tail call i32 @__signbitl(x86_fp80 %x) nounwind optsize
  %8 = tail call i32 @__signbitl(x86_fp80 %y) nounwind optsize
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %14, label %10

; <label>:10                                      ; preds = %6
  %11 = tail call i32 @__signbitl(x86_fp80 %x) nounwind optsize
  %12 = icmp ne i32 %11, 0
  %13 = select i1 %12, x86_fp80 %y, x86_fp80 %x
  br label %17

; <label>:14                                      ; preds = %6
  %15 = fcmp olt x86_fp80 %x, %y
  %16 = select i1 %15, x86_fp80 %y, x86_fp80 %x
  br label %17

; <label>:17                                      ; preds = %14, %10, %3, %0
  %.0 = phi x86_fp80 [ %13, %10 ], [ %16, %14 ], [ %y, %0 ], [ %x, %3 ]
  ret x86_fp80 %.0
}

define double @fmax(double %x, double %y) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = icmp ugt i64 %2, 9218868437227405312
  br i1 %3, label %18, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double %y to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %6, 9218868437227405312
  br i1 %7, label %18, label %8

; <label>:8                                       ; preds = %4
  %.lobit = lshr i64 %1, 63
  %9 = trunc i64 %.lobit to i32
  %.lobit10 = lshr i64 %5, 63
  %10 = trunc i64 %.lobit10 to i32
  %11 = icmp eq i32 %9, %10
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %8
  %13 = icmp slt i64 %1, 0
  %14 = select i1 %13, double %y, double %x
  br label %18

; <label>:15                                      ; preds = %8
  %16 = fcmp olt double %x, %y
  %17 = select i1 %16, double %y, double %x
  br label %18

; <label>:18                                      ; preds = %15, %12, %4, %0
  %.0 = phi double [ %14, %12 ], [ %17, %15 ], [ %y, %0 ], [ %x, %4 ]
  ret double %.0
}

define %struct.__FILE_s.79* @fmemopen(i8* %buf, i64 %size, i8* %mode) nounwind uwtable optsize {
  %1 = tail call i8* @strchr(i8* %mode, i32 43) nounwind optsize
  %2 = icmp eq i8* %1, null
  %3 = icmp eq i64 %size, 0
  br i1 %3, label %9, label %4

; <label>:4                                       ; preds = %0
  %5 = load i8* %mode, align 1, !tbaa !0
  %6 = sext i8 %5 to i32
  %7 = tail call i8* @strchr(i8* getelementptr inbounds ([4 x i8]* @.str165, i64 0, i64 0), i32 %6) nounwind optsize
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %4, %0
  %10 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %10, align 4, !tbaa !6
  br label %79

; <label>:11                                      ; preds = %4
  %12 = icmp ne i8* %buf, null
  %.not = xor i1 %12, true
  %13 = icmp ugt i64 %size, -1217
  %or.cond = and i1 %13, %.not
  br i1 %or.cond, label %14, label %16

; <label>:14                                      ; preds = %11
  %15 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %15, align 4, !tbaa !6
  br label %79

; <label>:16                                      ; preds = %11
  %size.op = add i64 %size, 1256
  %17 = select i1 %12, i64 1256, i64 %size.op
  %18 = tail call i8* @calloc(i64 %17, i64 1) nounwind optsize
  %19 = bitcast i8* %18 to %struct.__FILE_s.79*
  %20 = icmp eq i8* %18, null
  br i1 %20, label %79, label %21

; <label>:21                                      ; preds = %16
  %22 = getelementptr inbounds i8* %18, i64 184
  %23 = getelementptr inbounds i8* %18, i64 152
  %24 = bitcast i8* %23 to i8**
  store i8* %22, i8** %24, align 8, !tbaa !7
  %25 = getelementptr inbounds i8* %18, i64 120
  %26 = bitcast i8* %25 to i32*
  store i32 -1, i32* %26, align 4, !tbaa !6
  %27 = getelementptr inbounds i8* %18, i64 139
  store i8 -1, i8* %27, align 1, !tbaa !0
  %28 = getelementptr inbounds i8* %18, i64 232
  %29 = getelementptr inbounds i8* %18, i64 88
  %30 = bitcast i8* %29 to i8**
  store i8* %28, i8** %30, align 8, !tbaa !7
  %31 = getelementptr inbounds i8* %18, i64 96
  %32 = bitcast i8* %31 to i64*
  store i64 1024, i64* %32, align 8, !tbaa !5
  %33 = getelementptr inbounds i8* %18, i64 1256
  %.01 = select i1 %12, i8* %buf, i8* %33
  %34 = getelementptr inbounds i8* %18, i64 208
  %35 = bitcast i8* %34 to i8**
  store i8* %.01, i8** %35, align 8, !tbaa !7
  %36 = getelementptr inbounds i8* %18, i64 200
  %37 = bitcast i8* %36 to i64*
  store i64 %size, i64* %37, align 8, !tbaa !5
  %38 = load i8* %mode, align 1, !tbaa !0
  %39 = sext i8 %38 to i32
  %40 = getelementptr inbounds i8* %18, i64 216
  %41 = bitcast i8* %40 to i32*
  store i32 %39, i32* %41, align 4, !tbaa !6
  br i1 %2, label %42, label %47

; <label>:42                                      ; preds = %21
  %43 = load i8* %mode, align 1, !tbaa !0
  %44 = icmp eq i8 %43, 114
  %45 = select i1 %44, i32 8, i32 4
  %46 = bitcast i8* %18 to i32*
  store i32 %45, i32* %46, align 4, !tbaa !6
  br label %47

; <label>:47                                      ; preds = %42, %21
  %48 = load i8* %mode, align 1, !tbaa !0
  switch i8 %48, label %57 [
    i8 114, label %49
    i8 97, label %52
  ]

; <label>:49                                      ; preds = %47
  %50 = getelementptr inbounds i8* %18, i64 192
  %51 = bitcast i8* %50 to i64*
  store i64 %size, i64* %51, align 8, !tbaa !5
  br label %57

; <label>:52                                      ; preds = %47
  %53 = tail call i64 @strnlen(i8* %.01, i64 %size) nounwind optsize
  %54 = bitcast i8* %22 to i64*
  store i64 %53, i64* %54, align 8, !tbaa !5
  %55 = getelementptr inbounds i8* %18, i64 192
  %56 = bitcast i8* %55 to i64*
  store i64 %53, i64* %56, align 8, !tbaa !5
  br label %57

; <label>:57                                      ; preds = %52, %49, %47
  %58 = getelementptr inbounds i8* %18, i64 64
  %59 = bitcast i8* %58 to i64 (%struct.__FILE_s.79*, i8*, i64)**
  store i64 (%struct.__FILE_s.79*, i8*, i64)* @mread, i64 (%struct.__FILE_s.79*, i8*, i64)** %59, align 8, !tbaa !7
  %60 = getelementptr inbounds i8* %18, i64 72
  %61 = bitcast i8* %60 to i64 (%struct.__FILE_s.79*, i8*, i64)**
  store i64 (%struct.__FILE_s.79*, i8*, i64)* @mwrite, i64 (%struct.__FILE_s.79*, i8*, i64)** %61, align 8, !tbaa !7
  %62 = getelementptr inbounds i8* %18, i64 80
  %63 = bitcast i8* %62 to i64 (%struct.__FILE_s.79*, i64, i32)**
  store i64 (%struct.__FILE_s.79*, i64, i32)* @mseek, i64 (%struct.__FILE_s.79*, i64, i32)** %63, align 8, !tbaa !7
  %64 = getelementptr inbounds i8* %18, i64 24
  %65 = bitcast i8* %64 to i32 (%struct.__FILE_s.79*)**
  store i32 (%struct.__FILE_s.79*)* @mclose, i32 (%struct.__FILE_s.79*)** %65, align 8, !tbaa !7
  %66 = load i32* getelementptr inbounds (%struct.__libc.78* bitcast (%struct.__libc* @__libc to %struct.__libc.78*), i64 0, i32 1), align 8, !tbaa !6
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %79

; <label>:68                                      ; preds = %57
  %69 = getelementptr inbounds i8* %18, i64 140
  %70 = bitcast i8* %69 to i32*
  store i32 -1, i32* %70, align 4, !tbaa !6
  %71 = load %struct.__FILE_s.79** getelementptr inbounds (%struct.__libc.78* bitcast (%struct.__libc* @__libc to %struct.__libc.78*), i64 0, i32 9), align 8, !tbaa !7
  %72 = getelementptr inbounds i8* %18, i64 112
  %73 = bitcast i8* %72 to %struct.__FILE_s.79**
  store %struct.__FILE_s.79* %71, %struct.__FILE_s.79** %73, align 8, !tbaa !7
  %74 = load %struct.__FILE_s.79** getelementptr inbounds (%struct.__libc.78* bitcast (%struct.__libc* @__libc to %struct.__libc.78*), i64 0, i32 9), align 8, !tbaa !7
  %75 = icmp eq %struct.__FILE_s.79* %74, null
  br i1 %75, label %78, label %76

; <label>:76                                      ; preds = %68
  %77 = getelementptr inbounds %struct.__FILE_s.79* %74, i64 0, i32 13
  store %struct.__FILE_s.79* %19, %struct.__FILE_s.79** %77, align 8, !tbaa !7
  br label %78

; <label>:78                                      ; preds = %76, %68
  store %struct.__FILE_s.79* %19, %struct.__FILE_s.79** getelementptr inbounds (%struct.__libc.78* bitcast (%struct.__libc* @__libc to %struct.__libc.78*), i64 0, i32 9), align 8, !tbaa !7
  br label %79

; <label>:79                                      ; preds = %78, %57, %16, %14, %9
  %.0 = phi %struct.__FILE_s.79* [ null, %14 ], [ null, %9 ], [ null, %16 ], [ %19, %57 ], [ %19, %78 ]
  ret %struct.__FILE_s.79* %.0
}

define internal i64 @mread(%struct.__FILE_s.79* nocapture %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 23
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds i8* %2, i64 8
  %4 = bitcast i8* %3 to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = bitcast i8* %2 to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %8 = sub i64 %5, %7
  %9 = icmp ugt i64 %7, %5
  %rem.0 = select i1 %9, i64 0, i64 %8
  %10 = icmp ult i64 %rem.0, %len
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 0
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = or i32 %13, 16
  store i32 %14, i32* %12, align 4, !tbaa !6
  br label %15

; <label>:15                                      ; preds = %11, %0
  %.0 = phi i64 [ %rem.0, %11 ], [ %len, %0 ]
  %16 = getelementptr inbounds i8* %2, i64 24
  %17 = bitcast i8* %16 to i8**
  %18 = load i8** %17, align 8, !tbaa !7
  %19 = getelementptr inbounds i8* %18, i64 %7
  %20 = tail call i8* @memcpy(i8* %buf, i8* %19, i64 %.0) nounwind optsize
  %21 = load i64* %6, align 8, !tbaa !5
  %22 = add i64 %21, %.0
  store i64 %22, i64* %6, align 8, !tbaa !5
  %23 = sub i64 %rem.0, %.0
  %24 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 12
  %25 = load i64* %24, align 8, !tbaa !5
  %26 = icmp ugt i64 %23, %25
  %rem.1 = select i1 %26, i64 %25, i64 %23
  %27 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 11
  %28 = load i8** %27, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 1
  store i8* %28, i8** %29, align 8, !tbaa !7
  %30 = getelementptr inbounds i8* %28, i64 %rem.1
  %31 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 2
  store i8* %30, i8** %31, align 8, !tbaa !7
  %32 = load i8** %17, align 8, !tbaa !7
  %33 = getelementptr inbounds i8* %32, i64 %22
  %34 = tail call i8* @memcpy(i8* %28, i8* %33, i64 %rem.1) nounwind optsize
  %35 = load i64* %6, align 8, !tbaa !5
  %36 = add i64 %35, %rem.1
  store i64 %36, i64* %6, align 8, !tbaa !5
  ret i64 %.0
}

define internal i64 @mwrite(%struct.__FILE_s.79* %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 23
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 5
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 7
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = ptrtoint i8* %4 to i64
  %8 = ptrtoint i8* %6 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i8* %4, %6
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %0
  store i8* %6, i8** %3, align 8, !tbaa !7
  %12 = tail call i64 @mwrite(%struct.__FILE_s.79* %f, i8* %6, i64 %9) optsize
  %13 = icmp ult i64 %12, %9
  br i1 %13, label %57, label %14

; <label>:14                                      ; preds = %11, %0
  %15 = getelementptr inbounds i8* %2, i64 32
  %16 = bitcast i8* %15 to i32*
  %17 = load i32* %16, align 4, !tbaa !6
  %18 = icmp eq i32 %17, 97
  br i1 %18, label %19, label %._crit_edge

._crit_edge:                                      ; preds = %14
  %.phi.trans.insert = bitcast i8* %2 to i64*
  %.pre = load i64* %.phi.trans.insert, align 8, !tbaa !5
  %.pre2 = getelementptr inbounds i8* %2, i64 8
  %.pre3 = bitcast i8* %.pre2 to i64*
  br label %24

; <label>:19                                      ; preds = %14
  %20 = getelementptr inbounds i8* %2, i64 8
  %21 = bitcast i8* %20 to i64*
  %22 = load i64* %21, align 8, !tbaa !5
  %23 = bitcast i8* %2 to i64*
  store i64 %22, i64* %23, align 8, !tbaa !5
  br label %24

; <label>:24                                      ; preds = %19, %._crit_edge
  %.pre-phi4 = phi i64* [ %.pre3, %._crit_edge ], [ %21, %19 ]
  %25 = phi i64 [ %.pre, %._crit_edge ], [ %22, %19 ]
  %26 = getelementptr inbounds i8* %2, i64 16
  %27 = bitcast i8* %26 to i64*
  %28 = load i64* %27, align 8, !tbaa !5
  %29 = bitcast i8* %2 to i64*
  %30 = sub i64 %28, %25
  %31 = icmp ult i64 %30, %len
  %.01 = select i1 %31, i64 %30, i64 %len
  %32 = getelementptr inbounds i8* %2, i64 24
  %33 = bitcast i8* %32 to i8**
  %34 = load i8** %33, align 8, !tbaa !7
  %35 = getelementptr inbounds i8* %34, i64 %25
  %36 = tail call i8* @memcpy(i8* %35, i8* %buf, i64 %.01) nounwind optsize
  %37 = load i64* %29, align 8, !tbaa !5
  %38 = add i64 %37, %.01
  store i64 %38, i64* %29, align 8, !tbaa !5
  %39 = load i64* %.pre-phi4, align 8, !tbaa !5
  %40 = icmp ugt i64 %38, %39
  br i1 %40, label %41, label %57

; <label>:41                                      ; preds = %24
  store i64 %38, i64* %.pre-phi4, align 8, !tbaa !5
  %42 = load i64* %27, align 8, !tbaa !5
  %43 = icmp ult i64 %38, %42
  br i1 %43, label %44, label %47

; <label>:44                                      ; preds = %41
  %45 = load i8** %33, align 8, !tbaa !7
  %46 = getelementptr inbounds i8* %45, i64 %38
  store i8 0, i8* %46, align 1, !tbaa !0
  br label %57

; <label>:47                                      ; preds = %41
  %48 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 0
  %49 = load i32* %48, align 4, !tbaa !6
  %50 = and i32 %49, 4
  %51 = icmp eq i32 %50, 0
  %52 = icmp eq i64 %42, 0
  %or.cond = or i1 %51, %52
  br i1 %or.cond, label %57, label %53

; <label>:53                                      ; preds = %47
  %54 = add i64 %42, -1
  %55 = load i8** %33, align 8, !tbaa !7
  %56 = getelementptr inbounds i8* %55, i64 %54
  store i8 0, i8* %56, align 1, !tbaa !0
  br label %57

; <label>:57                                      ; preds = %53, %47, %44, %24, %11
  %.0 = phi i64 [ 0, %11 ], [ %.01, %47 ], [ %.01, %44 ], [ %.01, %53 ], [ %.01, %24 ]
  ret i64 %.0
}

define internal i64 @mseek(%struct.__FILE_s.79* nocapture %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %1 = alloca [3 x i64], align 8
  %2 = getelementptr inbounds %struct.__FILE_s.79* %f, i64 0, i32 23
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = icmp ugt i32 %whence, 2
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %21, %7, %0
  %6 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %29

; <label>:7                                       ; preds = %0
  %8 = sext i32 %whence to i64
  %9 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 0
  store i64 0, i64* %9, align 8, !tbaa !5
  %10 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 1
  %11 = bitcast i8* %3 to i64*
  %12 = load i64* %11, align 8, !tbaa !5
  store i64 %12, i64* %10, align 8, !tbaa !5
  %13 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 2
  %14 = getelementptr inbounds i8* %3, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64* %15, align 8, !tbaa !5
  store i64 %16, i64* %13, align 8, !tbaa !5
  %17 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 %8
  %18 = load i64* %17, align 8, !tbaa !5
  %19 = sub nsw i64 0, %18
  %20 = icmp slt i64 %off, %19
  br i1 %20, label %5, label %21

; <label>:21                                      ; preds = %7
  %22 = getelementptr inbounds i8* %3, i64 16
  %23 = bitcast i8* %22 to i64*
  %24 = load i64* %23, align 8, !tbaa !5
  %25 = sub nsw i64 %24, %18
  %26 = icmp slt i64 %25, %off
  br i1 %26, label %5, label %27

; <label>:27                                      ; preds = %21
  %28 = add nsw i64 %18, %off
  store i64 %28, i64* %11, align 8, !tbaa !5
  br label %29

; <label>:29                                      ; preds = %27, %5
  %.0 = phi i64 [ -1, %5 ], [ %28, %27 ]
  ret i64 %.0
}

define internal i32 @mclose(%struct.__FILE_s.79* nocapture %m) nounwind uwtable readnone optsize {
  ret i32 0
}

define float @fminf(float %x, float %y) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095040
  br i1 %3, label %16, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast float %y to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp ugt i32 %6, 2139095040
  br i1 %7, label %16, label %8

; <label>:8                                       ; preds = %4
  %.lobit = lshr i32 %1, 31
  %.lobit10 = lshr i32 %5, 31
  %9 = icmp eq i32 %.lobit, %.lobit10
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp slt i32 %1, 0
  %12 = select i1 %11, float %x, float %y
  br label %16

; <label>:13                                      ; preds = %8
  %14 = fcmp olt float %x, %y
  %15 = select i1 %14, float %x, float %y
  br label %16

; <label>:16                                      ; preds = %13, %10, %4, %0
  %.0 = phi float [ %12, %10 ], [ %15, %13 ], [ %y, %0 ], [ %x, %4 ]
  ret float %.0
}

define x86_fp80 @fminl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %1 = tail call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %17, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @__fpclassifyl(x86_fp80 %y) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

; <label>:6                                       ; preds = %3
  %7 = tail call i32 @__signbitl(x86_fp80 %x) nounwind optsize
  %8 = tail call i32 @__signbitl(x86_fp80 %y) nounwind optsize
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %14, label %10

; <label>:10                                      ; preds = %6
  %11 = tail call i32 @__signbitl(x86_fp80 %x) nounwind optsize
  %12 = icmp ne i32 %11, 0
  %13 = select i1 %12, x86_fp80 %x, x86_fp80 %y
  br label %17

; <label>:14                                      ; preds = %6
  %15 = fcmp olt x86_fp80 %x, %y
  %16 = select i1 %15, x86_fp80 %x, x86_fp80 %y
  br label %17

; <label>:17                                      ; preds = %14, %10, %3, %0
  %.0 = phi x86_fp80 [ %13, %10 ], [ %16, %14 ], [ %y, %0 ], [ %x, %3 ]
  ret x86_fp80 %.0
}

define double @fmin(double %x, double %y) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = icmp ugt i64 %2, 9218868437227405312
  br i1 %3, label %18, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double %y to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %6, 9218868437227405312
  br i1 %7, label %18, label %8

; <label>:8                                       ; preds = %4
  %.lobit = lshr i64 %1, 63
  %9 = trunc i64 %.lobit to i32
  %.lobit10 = lshr i64 %5, 63
  %10 = trunc i64 %.lobit10 to i32
  %11 = icmp eq i32 %9, %10
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %8
  %13 = icmp slt i64 %1, 0
  %14 = select i1 %13, double %x, double %y
  br label %18

; <label>:15                                      ; preds = %8
  %16 = fcmp olt double %x, %y
  %17 = select i1 %16, double %x, double %y
  br label %18

; <label>:18                                      ; preds = %15, %12, %4, %0
  %.0 = phi double [ %14, %12 ], [ %17, %15 ], [ %y, %0 ], [ %x, %4 ]
  ret double %.0
}

define float @fmodf(float %x, float %y) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = bitcast float %y to i32
  %3 = and i32 %1, -2147483648
  %4 = xor i32 %3, %1
  %5 = and i32 %2, 2147483647
  %6 = icmp eq i32 %5, 0
  %7 = icmp sgt i32 %4, 2139095039
  %or.cond = or i1 %6, %7
  %8 = icmp ugt i32 %5, 2139095040
  %or.cond6 = or i1 %or.cond, %8
  br i1 %or.cond6, label %9, label %12

; <label>:9                                       ; preds = %0
  %10 = fmul float %x, %y
  %11 = fdiv float %10, %10
  br label %94

; <label>:12                                      ; preds = %0
  %13 = icmp slt i32 %4, %5
  br i1 %13, label %94, label %14

; <label>:14                                      ; preds = %12
  %15 = icmp eq i32 %4, %5
  br i1 %15, label %16, label %21

; <label>:16                                      ; preds = %14
  %17 = lshr i32 %1, 31
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [2 x float]* @Zero, i64 0, i64 %18
  %20 = load float* %19, align 4, !tbaa !2
  br label %94

; <label>:21                                      ; preds = %14
  %22 = icmp slt i32 %4, 8388608
  br i1 %22, label %23, label %29

; <label>:23                                      ; preds = %21
  %24 = shl i32 %4, 8
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %.lr.ph21, label %.loopexit17

.lr.ph21:                                         ; preds = %.lr.ph21, %23
  %i.019 = phi i32 [ %27, %.lr.ph21 ], [ %24, %23 ]
  %ix.018 = phi i32 [ %26, %.lr.ph21 ], [ -126, %23 ]
  %26 = add nsw i32 %ix.018, -1
  %27 = shl i32 %i.019, 1
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %.lr.ph21, label %.loopexit17

; <label>:29                                      ; preds = %21
  %30 = ashr i32 %4, 23
  %31 = add nsw i32 %30, -127
  br label %.loopexit17

.loopexit17:                                      ; preds = %29, %.lr.ph21, %23
  %ix.1 = phi i32 [ %31, %29 ], [ -126, %23 ], [ %26, %.lr.ph21 ]
  %32 = icmp ult i32 %5, 8388608
  br i1 %32, label %33, label %39

; <label>:33                                      ; preds = %.loopexit17
  %34 = shl i32 %2, 8
  %35 = icmp sgt i32 %34, -1
  br i1 %35, label %.lr.ph15, label %.loopexit

.lr.ph15:                                         ; preds = %.lr.ph15, %33
  %i.113 = phi i32 [ %37, %.lr.ph15 ], [ %34, %33 ]
  %iy.012 = phi i32 [ %36, %.lr.ph15 ], [ -126, %33 ]
  %36 = add nsw i32 %iy.012, -1
  %37 = shl i32 %i.113, 1
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %.lr.ph15, label %.loopexit

; <label>:39                                      ; preds = %.loopexit17
  %40 = lshr i32 %5, 23
  %41 = add nsw i32 %40, -127
  br label %.loopexit

.loopexit:                                        ; preds = %39, %.lr.ph15, %33
  %iy.1 = phi i32 [ %41, %39 ], [ -126, %33 ], [ %36, %.lr.ph15 ]
  %42 = icmp sgt i32 %ix.1, -127
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %.loopexit
  %44 = and i32 %4, 8388607
  %45 = or i32 %44, 8388608
  br label %49

; <label>:46                                      ; preds = %.loopexit
  %47 = sub nsw i32 -126, %ix.1
  %48 = shl i32 %4, %47
  br label %49

; <label>:49                                      ; preds = %46, %43
  %hx.0 = phi i32 [ %45, %43 ], [ %48, %46 ]
  %50 = icmp sgt i32 %iy.1, -127
  br i1 %50, label %51, label %54

; <label>:51                                      ; preds = %49
  %52 = and i32 %2, 8388607
  %53 = or i32 %52, 8388608
  br label %57

; <label>:54                                      ; preds = %49
  %55 = sub nsw i32 -126, %iy.1
  %56 = shl i32 %5, %55
  br label %57

; <label>:57                                      ; preds = %54, %51
  %hy.0 = phi i32 [ %53, %51 ], [ %56, %54 ]
  %58 = sub nsw i32 %ix.1, %iy.1
  br label %59

; <label>:59                                      ; preds = %.backedge, %57
  %hx.1 = phi i32 [ %hx.0, %57 ], [ %hx.1.be, %.backedge ]
  %n.0 = phi i32 [ %58, %57 ], [ %60, %.backedge ]
  %60 = add nsw i32 %n.0, -1
  %61 = icmp eq i32 %n.0, 0
  %62 = sub nsw i32 %hx.1, %hy.0
  br i1 %61, label %72, label %63

; <label>:63                                      ; preds = %59
  %64 = icmp slt i32 %62, 0
  br i1 %64, label %.backedge, label %65

; <label>:65                                      ; preds = %63
  %66 = icmp eq i32 %hx.1, %hy.0
  br i1 %66, label %67, label %.backedge

; <label>:67                                      ; preds = %65
  %68 = lshr i32 %1, 31
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [2 x float]* @Zero, i64 0, i64 %69
  %71 = load float* %70, align 4, !tbaa !2
  br label %94

.backedge:                                        ; preds = %65, %63
  %hx.1.be.in = phi i32 [ %hx.1, %63 ], [ %62, %65 ]
  %hx.1.be = shl nsw i32 %hx.1.be.in, 1
  br label %59

; <label>:72                                      ; preds = %59
  %73 = icmp sgt i32 %62, -1
  %hx.2 = select i1 %73, i32 %62, i32 %hx.1
  %74 = icmp eq i32 %hx.2, 0
  br i1 %74, label %76, label %.preheader

.preheader:                                       ; preds = %72
  %75 = icmp slt i32 %hx.2, 8388608
  br i1 %75, label %.lr.ph, label %._crit_edge

; <label>:76                                      ; preds = %72
  %77 = lshr i32 %1, 31
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [2 x float]* @Zero, i64 0, i64 %78
  %80 = load float* %79, align 4, !tbaa !2
  br label %94

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %hx.38 = phi i32 [ %81, %.lr.ph ], [ %hx.2, %.preheader ]
  %iy.27 = phi i32 [ %82, %.lr.ph ], [ %iy.1, %.preheader ]
  %81 = shl nsw i32 %hx.38, 1
  %82 = add nsw i32 %iy.27, -1
  %83 = icmp slt i32 %81, 8388608
  br i1 %83, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %hx.3.lcssa = phi i32 [ %hx.2, %.preheader ], [ %81, %.lr.ph ]
  %iy.2.lcssa = phi i32 [ %iy.1, %.preheader ], [ %82, %.lr.ph ]
  %84 = icmp sgt i32 %iy.2.lcssa, -127
  br i1 %84, label %85, label %90

; <label>:85                                      ; preds = %._crit_edge
  %86 = add nsw i32 %hx.3.lcssa, -8388608
  %87 = shl i32 %iy.2.lcssa, 23
  %88 = add i32 %87, 1065353216
  %89 = or i32 %86, %88
  br label %93

; <label>:90                                      ; preds = %._crit_edge
  %91 = sub nsw i32 -126, %iy.2.lcssa
  %92 = ashr i32 %hx.3.lcssa, %91
  br label %93

; <label>:93                                      ; preds = %90, %85
  %.pn = phi i32 [ %89, %85 ], [ %92, %90 ]
  %.04.in = or i32 %.pn, %3
  %.04 = bitcast i32 %.04.in to float
  br label %94

; <label>:94                                      ; preds = %93, %76, %67, %16, %12, %9
  %.0 = phi float [ %11, %9 ], [ %20, %16 ], [ %71, %67 ], [ %80, %76 ], [ %.04, %93 ], [ %x, %12 ]
  ret float %.0
}

define x86_fp80 @fmodl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = bitcast x86_fp80 %y to i80
  %3 = lshr i80 %1, 79
  %4 = trunc i80 %3 to i64
  %5 = lshr i80 %2, 64
  %6 = trunc i80 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i80 %2, 32
  %9 = trunc i80 %8 to i32
  %10 = trunc i80 %2 to i32
  %11 = or i80 %8, %2
  %12 = trunc i80 %11 to i32
  %13 = or i32 %12, %7
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %29, label %15

; <label>:15                                      ; preds = %0
  %16 = lshr i80 %1, 64
  %17 = trunc i80 %16 to i32
  %18 = and i32 %17, 32767
  %19 = icmp eq i32 %18, 32767
  br i1 %19, label %29, label %20

; <label>:20                                      ; preds = %15
  %21 = icmp eq i32 %7, 32767
  br i1 %21, label %22, label %32

; <label>:22                                      ; preds = %20
  %23 = trunc i80 %8 to i64
  %24 = and i64 %23, 2147483647
  %25 = trunc i80 %2 to i64
  %26 = and i64 %25, 4294967295
  %27 = or i64 %24, %26
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %32, label %29

; <label>:29                                      ; preds = %22, %15, %0
  %30 = fmul x86_fp80 %x, %y
  %31 = fdiv x86_fp80 %30, %30
  br label %149

; <label>:32                                      ; preds = %22, %20
  %33 = icmp ugt i32 %18, %7
  br i1 %33, label %50, label %34

; <label>:34                                      ; preds = %32
  %35 = icmp ult i32 %18, %7
  br i1 %35, label %149, label %36

; <label>:36                                      ; preds = %34
  %37 = lshr i80 %1, 32
  %38 = trunc i80 %37 to i32
  %39 = icmp ugt i32 %38, %9
  br i1 %39, label %._crit_edge51, label %40

._crit_edge51:                                    ; preds = %36
  %.pre = trunc i80 %1 to i32
  br label %44

; <label>:40                                      ; preds = %36
  %41 = icmp ult i32 %38, %9
  %42 = trunc i80 %1 to i32
  %43 = icmp ult i32 %42, %10
  %or.cond = or i1 %41, %43
  br i1 %or.cond, label %149, label %44

; <label>:44                                      ; preds = %40, %._crit_edge51
  %.pre-phi = phi i32 [ %.pre, %._crit_edge51 ], [ %42, %40 ]
  %45 = icmp eq i32 %38, %9
  %46 = icmp eq i32 %.pre-phi, %10
  %or.cond33 = and i1 %45, %46
  br i1 %or.cond33, label %47, label %50

; <label>:47                                      ; preds = %44
  %48 = getelementptr inbounds [2 x x86_fp80]* @Zero166, i64 0, i64 %4
  %49 = load x86_fp80* %48, align 16, !tbaa !4
  br label %149

; <label>:50                                      ; preds = %44, %32
  %51 = icmp eq i32 %18, 0
  br i1 %51, label %52, label %59

; <label>:52                                      ; preds = %50
  %53 = fmul x86_fp80 %x, 0xK41FF8000000000000000
  %54 = bitcast x86_fp80 %53 to i80
  %55 = lshr i80 %54, 64
  %56 = trunc i80 %55 to i32
  %57 = and i32 %56, 32767
  %58 = add nsw i32 %57, -16895
  br label %61

; <label>:59                                      ; preds = %50
  %60 = add nsw i32 %18, -16383
  br label %61

; <label>:61                                      ; preds = %59, %52
  %ux.0.in = phi i80 [ %54, %52 ], [ %1, %59 ]
  %ix.0 = phi i32 [ %58, %52 ], [ %60, %59 ]
  %ux.0 = zext i80 %ux.0.in to i128
  %62 = icmp eq i32 %7, 0
  br i1 %62, label %63, label %70

; <label>:63                                      ; preds = %61
  %64 = fmul x86_fp80 %y, 0xK41FF8000000000000000
  %65 = bitcast x86_fp80 %64 to i80
  %66 = lshr i80 %65, 64
  %67 = trunc i80 %66 to i32
  %68 = and i32 %67, 32767
  %69 = add nsw i32 %68, -16895
  %extract.t = trunc i80 %65 to i32
  %extract = lshr i80 %65, 32
  %extract.t26 = trunc i80 %extract to i64
  br label %72

; <label>:70                                      ; preds = %61
  %71 = add nsw i32 %7, -16383
  %extract.t28 = trunc i80 %8 to i64
  br label %72

; <label>:72                                      ; preds = %70, %63
  %uy.0.off0 = phi i32 [ %extract.t, %63 ], [ %10, %70 ]
  %uy.0.off32 = phi i64 [ %extract.t26, %63 ], [ %extract.t28, %70 ]
  %iy.0 = phi i32 [ %69, %63 ], [ %71, %70 ]
  %73 = lshr i80 %ux.0.in, 32
  %74 = trunc i80 %73 to i64
  %75 = and i64 %74, 4294967295
  %76 = trunc i80 %ux.0.in to i32
  %77 = sub nsw i32 %ix.0, %iy.0
  %78 = and i64 %uy.0.off32, 4294967295
  br label %79

; <label>:79                                      ; preds = %.backedge, %72
  %lx.0 = phi i32 [ %76, %72 ], [ %lx.0.be, %.backedge ]
  %hx.0 = phi i64 [ %75, %72 ], [ %hx.0.be, %.backedge ]
  %n.0 = phi i32 [ %77, %72 ], [ %80, %.backedge ]
  %80 = add nsw i32 %n.0, -1
  %81 = icmp eq i32 %n.0, 0
  %82 = sub nsw i64 %hx.0, %78
  %83 = sub i32 %lx.0, %uy.0.off0
  %84 = icmp ult i32 %lx.0, %uy.0.off0
  %85 = sext i1 %84 to i64
  %.34 = add nsw i64 %82, %85
  br i1 %81, label %105, label %86

; <label>:86                                      ; preds = %79
  %87 = icmp slt i64 %.34, 0
  br i1 %87, label %88, label %93

; <label>:88                                      ; preds = %86
  %89 = shl nsw i64 %hx.0, 1
  %90 = lshr i32 %lx.0, 31
  %91 = zext i32 %90 to i64
  %92 = or i64 %89, %91
  br label %.backedge

; <label>:93                                      ; preds = %86
  %94 = zext i32 %83 to i64
  %95 = or i64 %.34, %94
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %100

; <label>:97                                      ; preds = %93
  %98 = getelementptr inbounds [2 x x86_fp80]* @Zero166, i64 0, i64 %4
  %99 = load x86_fp80* %98, align 16, !tbaa !4
  br label %149

; <label>:100                                     ; preds = %93
  %101 = shl nsw i64 %.34, 1
  %102 = lshr i32 %83, 31
  %103 = zext i32 %102 to i64
  %104 = or i64 %101, %103
  br label %.backedge

.backedge:                                        ; preds = %100, %88
  %lx.0.be.in = phi i32 [ %lx.0, %88 ], [ %83, %100 ]
  %hx.0.be = phi i64 [ %92, %88 ], [ %104, %100 ]
  %lx.0.be = shl i32 %lx.0.be.in, 1
  br label %79

; <label>:105                                     ; preds = %79
  %106 = icmp sgt i64 %.34, -1
  %lx.1 = select i1 %106, i32 %83, i32 %lx.0
  %hx.1 = select i1 %106, i64 %.34, i64 %hx.0
  %107 = zext i32 %lx.1 to i64
  %108 = or i64 %107, %hx.1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %111, label %.preheader

.preheader:                                       ; preds = %105
  %110 = icmp ult i64 %hx.1, 2147483648
  br i1 %110, label %.lr.ph, label %._crit_edge

; <label>:111                                     ; preds = %105
  %112 = getelementptr inbounds [2 x x86_fp80]* @Zero166, i64 0, i64 %4
  %113 = load x86_fp80* %112, align 16, !tbaa !4
  br label %149

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %hx.237 = phi i64 [ %117, %.lr.ph ], [ %hx.1, %.preheader ]
  %iy.136 = phi i32 [ %119, %.lr.ph ], [ %iy.0, %.preheader ]
  %lx.235 = phi i32 [ %118, %.lr.ph ], [ %lx.1, %.preheader ]
  %114 = shl nsw i64 %hx.237, 1
  %115 = lshr i32 %lx.235, 31
  %116 = zext i32 %115 to i64
  %117 = or i64 %114, %116
  %118 = shl i32 %lx.235, 1
  %119 = add nsw i32 %iy.136, -1
  %120 = icmp ult i64 %117, 2147483648
  br i1 %120, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %hx.2.lcssa = phi i64 [ %hx.1, %.preheader ], [ %117, %.lr.ph ]
  %iy.1.lcssa = phi i32 [ %iy.0, %.preheader ], [ %119, %.lr.ph ]
  %lx.2.lcssa = phi i32 [ %lx.1, %.preheader ], [ %118, %.lr.ph ]
  %.mask = and i64 %hx.2.lcssa, 4294967295
  %121 = zext i64 %.mask to i128
  %122 = shl nuw nsw i128 %121, 32
  %mask17 = and i128 %ux.0, 1208907372870555465154560
  %123 = zext i32 %lx.2.lcssa to i128
  %mask14 = or i128 %123, %mask17
  %ins15 = or i128 %mask14, %122
  %124 = icmp slt i32 %iy.1.lcssa, -16381
  br i1 %124, label %125, label %138

; <label>:125                                     ; preds = %._crit_edge
  %126 = add nsw i32 %iy.1.lcssa, 16895
  %127 = and i32 %126, 32767
  %128 = lshr i80 %ux.0.in, 64
  %129 = trunc i80 %128 to i32
  %130 = and i32 %129, 32768
  %131 = or i32 %127, %130
  %132 = zext i32 %131 to i128
  %133 = shl nuw nsw i128 %132, 64
  %mask11 = and i128 %ins15, 18446744073709551615
  %ins12 = or i128 %mask11, %133
  %134 = trunc i128 %ins12 to i80
  %135 = bitcast i80 %134 to x86_fp80
  %136 = fmul x86_fp80 %135, 0xK3DFF8000000000000000
  %137 = bitcast x86_fp80 %136 to i80
  br label %147

; <label>:138                                     ; preds = %._crit_edge
  %139 = add nsw i32 %iy.1.lcssa, 16383
  %140 = and i32 %139, 32767
  %141 = lshr i80 %ux.0.in, 64
  %142 = trunc i80 %141 to i32
  %143 = and i32 %142, 32768
  %144 = or i32 %140, %143
  %145 = zext i32 %144 to i128
  %146 = shl nuw nsw i128 %145, 64
  %mask5 = and i128 %ins15, 18446744073709551615
  %ins6 = or i128 %mask5, %146
  %extract.t30 = trunc i128 %ins6 to i80
  br label %147

; <label>:147                                     ; preds = %138, %125
  %ux.1.off0 = phi i80 [ %137, %125 ], [ %extract.t30, %138 ]
  %148 = bitcast i80 %ux.1.off0 to x86_fp80
  br label %149

; <label>:149                                     ; preds = %147, %111, %97, %47, %40, %34, %29
  %.0 = phi x86_fp80 [ %31, %29 ], [ %49, %47 ], [ %99, %97 ], [ %113, %111 ], [ %148, %147 ], [ %x, %40 ], [ %x, %34 ]
  ret x86_fp80 %.0
}

define double @fmod(double %x, double %y) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %y to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = and i32 %3, -2147483648
  %10 = xor i32 %9, %3
  %11 = and i32 %7, 2147483647
  %12 = or i32 %11, %8
  %13 = icmp eq i32 %12, 0
  %14 = icmp sgt i32 %10, 2146435071
  %or.cond = or i1 %13, %14
  br i1 %or.cond, label %21, label %15

; <label>:15                                      ; preds = %0
  %16 = sub i32 0, %8
  %17 = or i32 %8, %16
  %18 = lshr i32 %17, 31
  %19 = or i32 %11, %18
  %20 = icmp ugt i32 %19, 2146435072
  br i1 %20, label %21, label %24

; <label>:21                                      ; preds = %15, %0
  %22 = fmul double %x, %y
  %23 = fdiv double %22, %22
  br label %180

; <label>:24                                      ; preds = %15
  %25 = icmp sgt i32 %10, %11
  br i1 %25, label %35, label %26

; <label>:26                                      ; preds = %24
  %27 = icmp slt i32 %10, %11
  %28 = icmp ult i32 %4, %8
  %or.cond8 = or i1 %27, %28
  br i1 %or.cond8, label %180, label %29

; <label>:29                                      ; preds = %26
  %30 = icmp eq i32 %4, %8
  br i1 %30, label %31, label %35

; <label>:31                                      ; preds = %29
  %32 = lshr i64 %1, 63
  %33 = getelementptr inbounds [2 x double]* @Zero167, i64 0, i64 %32
  %34 = load double* %33, align 8, !tbaa !3
  br label %180

; <label>:35                                      ; preds = %29, %24
  %36 = icmp slt i32 %10, 1048576
  br i1 %36, label %37, label %49

; <label>:37                                      ; preds = %35
  %38 = icmp eq i32 %3, %9
  br i1 %38, label %.preheader34, label %43

.preheader34:                                     ; preds = %37
  %39 = icmp sgt i32 %4, 0
  br i1 %39, label %.lr.ph38, label %.loopexit

.lr.ph38:                                         ; preds = %.lr.ph38, %.preheader34
  %ix.037 = phi i32 [ %40, %.lr.ph38 ], [ -1043, %.preheader34 ]
  %i.036 = phi i32 [ %41, %.lr.ph38 ], [ %4, %.preheader34 ]
  %40 = add nsw i32 %ix.037, -1
  %41 = shl i32 %i.036, 1
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %.lr.ph38, label %.loopexit

; <label>:43                                      ; preds = %37
  %44 = shl i32 %10, 11
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %43
  %ix.111 = phi i32 [ %46, %.lr.ph ], [ -1022, %43 ]
  %i.110 = phi i32 [ %47, %.lr.ph ], [ %44, %43 ]
  %46 = add nsw i32 %ix.111, -1
  %47 = shl i32 %i.110, 1
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %.lr.ph, label %.loopexit

; <label>:49                                      ; preds = %35
  %50 = ashr i32 %10, 20
  %51 = add nsw i32 %50, -1023
  br label %.loopexit

.loopexit:                                        ; preds = %49, %.lr.ph, %43, %.lr.ph38, %.preheader34
  %ix.2 = phi i32 [ %51, %49 ], [ -1022, %43 ], [ %46, %.lr.ph ], [ -1043, %.preheader34 ], [ %40, %.lr.ph38 ]
  %52 = icmp ult i32 %11, 1048576
  br i1 %52, label %53, label %66

; <label>:53                                      ; preds = %.loopexit
  %54 = icmp eq i32 %11, 0
  br i1 %54, label %.preheader28, label %59

.preheader28:                                     ; preds = %53
  %55 = icmp sgt i32 %8, 0
  br i1 %55, label %.lr.ph32, label %.loopexit12

.lr.ph32:                                         ; preds = %.lr.ph32, %.preheader28
  %iy.031 = phi i32 [ %56, %.lr.ph32 ], [ -1043, %.preheader28 ]
  %i.230 = phi i32 [ %57, %.lr.ph32 ], [ %8, %.preheader28 ]
  %56 = add nsw i32 %iy.031, -1
  %57 = shl i32 %i.230, 1
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %.lr.ph32, label %.loopexit12

; <label>:59                                      ; preds = %53
  %60 = lshr i64 %5, 21
  %.tr = trunc i64 %60 to i32
  %61 = and i32 %.tr, -2048
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %.lr.ph15, label %.loopexit12

.lr.ph15:                                         ; preds = %.lr.ph15, %59
  %iy.114 = phi i32 [ %63, %.lr.ph15 ], [ -1022, %59 ]
  %i.313 = phi i32 [ %64, %.lr.ph15 ], [ %61, %59 ]
  %63 = add nsw i32 %iy.114, -1
  %64 = shl i32 %i.313, 1
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %.lr.ph15, label %.loopexit12

; <label>:66                                      ; preds = %.loopexit
  %67 = lshr i32 %11, 20
  %68 = add nsw i32 %67, -1023
  br label %.loopexit12

.loopexit12:                                      ; preds = %66, %.lr.ph15, %59, %.lr.ph32, %.preheader28
  %iy.2 = phi i32 [ %68, %66 ], [ -1022, %59 ], [ %63, %.lr.ph15 ], [ -1043, %.preheader28 ], [ %56, %.lr.ph32 ]
  %69 = icmp sgt i32 %ix.2, -1023
  br i1 %69, label %70, label %73

; <label>:70                                      ; preds = %.loopexit12
  %71 = and i32 %10, 1048575
  %72 = or i32 %71, 1048576
  br label %85

; <label>:73                                      ; preds = %.loopexit12
  %74 = sub nsw i32 -1022, %ix.2
  %75 = icmp slt i32 %74, 32
  br i1 %75, label %76, label %82

; <label>:76                                      ; preds = %73
  %77 = shl i32 %10, %74
  %78 = sub nsw i32 32, %74
  %79 = lshr i32 %4, %78
  %80 = or i32 %79, %77
  %81 = shl i32 %4, %74
  br label %85

; <label>:82                                      ; preds = %73
  %83 = add nsw i32 %74, -32
  %84 = shl i32 %4, %83
  br label %85

; <label>:85                                      ; preds = %82, %76, %70
  %lx.0 = phi i32 [ %4, %70 ], [ %81, %76 ], [ 0, %82 ]
  %hx.0 = phi i32 [ %72, %70 ], [ %80, %76 ], [ %84, %82 ]
  %86 = icmp sgt i32 %iy.2, -1023
  br i1 %86, label %87, label %90

; <label>:87                                      ; preds = %85
  %88 = and i32 %7, 1048575
  %89 = or i32 %88, 1048576
  br label %102

; <label>:90                                      ; preds = %85
  %91 = sub nsw i32 -1022, %iy.2
  %92 = icmp slt i32 %91, 32
  br i1 %92, label %93, label %99

; <label>:93                                      ; preds = %90
  %94 = shl i32 %11, %91
  %95 = sub nsw i32 32, %91
  %96 = lshr i32 %8, %95
  %97 = or i32 %96, %94
  %98 = shl i32 %8, %91
  br label %102

; <label>:99                                      ; preds = %90
  %100 = add nsw i32 %91, -32
  %101 = shl i32 %8, %100
  br label %102

; <label>:102                                     ; preds = %99, %93, %87
  %hy.0 = phi i32 [ %89, %87 ], [ %97, %93 ], [ %101, %99 ]
  %ly.0 = phi i32 [ %8, %87 ], [ %98, %93 ], [ 0, %99 ]
  %103 = sub nsw i32 %ix.2, %iy.2
  br label %104

; <label>:104                                     ; preds = %.backedge, %102
  %lx.1 = phi i32 [ %lx.0, %102 ], [ %lx.1.be, %.backedge ]
  %hx.1 = phi i32 [ %hx.0, %102 ], [ %hx.1.be, %.backedge ]
  %n.0 = phi i32 [ %103, %102 ], [ %105, %.backedge ]
  %105 = add nsw i32 %n.0, -1
  %106 = icmp eq i32 %n.0, 0
  %107 = sub nsw i32 %hx.1, %hy.0
  %108 = sub i32 %lx.1, %ly.0
  %109 = icmp ult i32 %lx.1, %ly.0
  %110 = sext i1 %109 to i32
  %.9 = add nsw i32 %107, %110
  br i1 %106, label %128, label %111

; <label>:111                                     ; preds = %104
  %112 = icmp slt i32 %.9, 0
  br i1 %112, label %113, label %117

; <label>:113                                     ; preds = %111
  %114 = shl nsw i32 %hx.1, 1
  %115 = lshr i32 %lx.1, 31
  %116 = or i32 %114, %115
  br label %.backedge

; <label>:117                                     ; preds = %111
  %118 = or i32 %.9, %108
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %124

; <label>:120                                     ; preds = %117
  %121 = lshr i64 %1, 63
  %122 = getelementptr inbounds [2 x double]* @Zero167, i64 0, i64 %121
  %123 = load double* %122, align 8, !tbaa !3
  br label %180

; <label>:124                                     ; preds = %117
  %125 = shl nsw i32 %.9, 1
  %126 = lshr i32 %108, 31
  %127 = or i32 %125, %126
  br label %.backedge

.backedge:                                        ; preds = %124, %113
  %lx.1.be.in = phi i32 [ %lx.1, %113 ], [ %108, %124 ]
  %hx.1.be = phi i32 [ %116, %113 ], [ %127, %124 ]
  %lx.1.be = shl i32 %lx.1.be.in, 1
  br label %104

; <label>:128                                     ; preds = %104
  %129 = icmp sgt i32 %.9, -1
  %lx.2 = select i1 %129, i32 %108, i32 %lx.1
  %hx.2 = select i1 %129, i32 %.9, i32 %hx.1
  %130 = or i32 %hx.2, %lx.2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %133, label %.preheader

.preheader:                                       ; preds = %128
  %132 = icmp slt i32 %hx.2, 1048576
  br i1 %132, label %.lr.ph20, label %._crit_edge

; <label>:133                                     ; preds = %128
  %134 = lshr i64 %1, 63
  %135 = getelementptr inbounds [2 x double]* @Zero167, i64 0, i64 %134
  %136 = load double* %135, align 8, !tbaa !3
  br label %180

.lr.ph20:                                         ; preds = %.lr.ph20, %.preheader
  %hx.319 = phi i32 [ %139, %.lr.ph20 ], [ %hx.2, %.preheader ]
  %iy.318 = phi i32 [ %141, %.lr.ph20 ], [ %iy.2, %.preheader ]
  %lx.317 = phi i32 [ %140, %.lr.ph20 ], [ %lx.2, %.preheader ]
  %137 = shl nsw i32 %hx.319, 1
  %138 = lshr i32 %lx.317, 31
  %139 = or i32 %137, %138
  %140 = shl i32 %lx.317, 1
  %141 = add nsw i32 %iy.318, -1
  %142 = icmp slt i32 %139, 1048576
  br i1 %142, label %.lr.ph20, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph20, %.preheader
  %hx.3.lcssa = phi i32 [ %hx.2, %.preheader ], [ %139, %.lr.ph20 ]
  %iy.3.lcssa = phi i32 [ %iy.2, %.preheader ], [ %141, %.lr.ph20 ]
  %lx.3.lcssa = phi i32 [ %lx.2, %.preheader ], [ %140, %.lr.ph20 ]
  %143 = icmp sgt i32 %iy.3.lcssa, -1023
  br i1 %143, label %144, label %154

; <label>:144                                     ; preds = %._crit_edge
  %145 = add nsw i32 %hx.3.lcssa, -1048576
  %146 = shl i32 %iy.3.lcssa, 20
  %147 = add i32 %146, 1072693248
  %148 = or i32 %147, %9
  %149 = or i32 %148, %145
  %150 = zext i32 %149 to i64
  %151 = shl nuw i64 %150, 32
  %152 = zext i32 %lx.3.lcssa to i64
  %153 = or i64 %151, %152
  br label %179

; <label>:154                                     ; preds = %._crit_edge
  %155 = sub nsw i32 -1022, %iy.3.lcssa
  %156 = icmp slt i32 %155, 21
  br i1 %156, label %157, label %163

; <label>:157                                     ; preds = %154
  %158 = lshr i32 %lx.3.lcssa, %155
  %159 = sub nsw i32 32, %155
  %160 = shl i32 %hx.3.lcssa, %159
  %161 = or i32 %160, %158
  %162 = ashr i32 %hx.3.lcssa, %155
  br label %173

; <label>:163                                     ; preds = %154
  %164 = icmp slt i32 %155, 32
  br i1 %164, label %165, label %170

; <label>:165                                     ; preds = %163
  %166 = sub nsw i32 32, %155
  %167 = shl i32 %hx.3.lcssa, %166
  %168 = lshr i32 %lx.3.lcssa, %155
  %169 = or i32 %167, %168
  br label %173

; <label>:170                                     ; preds = %163
  %171 = add nsw i32 %155, -32
  %172 = ashr i32 %hx.3.lcssa, %171
  br label %173

; <label>:173                                     ; preds = %170, %165, %157
  %lx.4 = phi i32 [ %161, %157 ], [ %169, %165 ], [ %172, %170 ]
  %hx.4 = phi i32 [ %162, %157 ], [ %9, %165 ], [ %9, %170 ]
  %174 = or i32 %hx.4, %9
  %175 = zext i32 %174 to i64
  %176 = shl nuw i64 %175, 32
  %177 = zext i32 %lx.4 to i64
  %178 = or i64 %176, %177
  br label %179

; <label>:179                                     ; preds = %173, %144
  %.04.in = phi i64 [ %153, %144 ], [ %178, %173 ]
  %.04 = bitcast i64 %.04.in to double
  br label %180

; <label>:180                                     ; preds = %179, %133, %120, %31, %26, %21
  %.0 = phi double [ %23, %21 ], [ %34, %31 ], [ %123, %120 ], [ %136, %133 ], [ %.04, %179 ], [ %x, %26 ]
  ret double %.0
}

define i32 @fnmatch(i8* %p, i8* %s, i32 %flags) nounwind uwtable optsize {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %class = alloca [33 x i8], align 16
  store i8* %p, i8** %1, align 8, !tbaa !7
  store i8* %s, i8** %2, align 8, !tbaa !7
  %3 = and i32 %flags, 1
  %4 = icmp ne i32 %3, 0
  %5 = select i1 %4, i32 47, i32 0
  %6 = and i32 %flags, 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %0
  %9 = and i32 %flags, 32768
  %10 = icmp ne i32 %9, 0
  %phitmp = select i1 %10, i32 256, i32 46
  br label %11

; <label>:11                                      ; preds = %8, %0
  %12 = phi i32 [ 256, %0 ], [ %phitmp, %8 ]
  %13 = or i32 %flags, 32768
  %14 = and i32 %flags, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds [33 x i8]* %class, i64 0, i64 0
  br label %.backedge22

.backedge22:                                      ; preds = %134, %133, %11
  %17 = phi i8* [ %p, %11 ], [ %135, %134 ], [ %127, %133 ]
  %no_period.0 = phi i32 [ %12, %11 ], [ 256, %134 ], [ 46, %133 ]
  %18 = getelementptr inbounds i8* %17, i64 1
  store i8* %18, i8** %1, align 8, !tbaa !7
  %19 = load i8* %17, align 1, !tbaa !0
  %20 = sext i8 %19 to i32
  %21 = icmp eq i8 %19, 0
  br i1 %21, label %136, label %22

; <label>:22                                      ; preds = %.backedge22
  switch i32 %20, label %._crit_edge [
    i32 63, label %23
    i32 92, label %28
    i32 42, label %.preheader6
    i32 91, label %69
  ]

; <label>:23                                      ; preds = %22
  %24 = call fastcc i32 @next(i8** %2) optsize
  %25 = icmp eq i32 %24, 0
  %26 = icmp eq i32 %24, %no_period.0
  %or.cond = or i1 %25, %26
  %27 = icmp eq i32 %24, %5
  %or.cond2 = or i1 %or.cond, %27
  br i1 %or.cond2, label %.critedge.thread, label %134

; <label>:28                                      ; preds = %22
  br i1 %15, label %29, label %33

; <label>:29                                      ; preds = %28
  %30 = getelementptr inbounds i8* %17, i64 2
  store i8* %30, i8** %1, align 8, !tbaa !7
  %31 = load i8* %18, align 1, !tbaa !0
  %32 = sext i8 %31 to i32
  br label %._crit_edge

; <label>:33                                      ; preds = %28
  %34 = load i8** %2, align 8, !tbaa !7
  %35 = getelementptr inbounds i8* %34, i64 1
  store i8* %35, i8** %2, align 8, !tbaa !7
  %36 = load i8* %34, align 1, !tbaa !0
  %37 = icmp eq i8 %36, %19
  br i1 %37, label %134, label %.critedge.thread

.preheader6:                                      ; preds = %40, %22
  %38 = phi i8* [ %41, %40 ], [ %18, %22 ]
  %39 = load i8* %38, align 1, !tbaa !0
  switch i8 %39, label %42 [
    i8 42, label %40
    i8 0, label %.loopexit
  ]

; <label>:40                                      ; preds = %.preheader6
  %41 = getelementptr inbounds i8* %38, i64 1
  store i8* %41, i8** %1, align 8, !tbaa !7
  br label %.preheader6

; <label>:42                                      ; preds = %.preheader6
  %43 = load i8** %2, align 8, !tbaa !7
  %44 = load i8* %43, align 1, !tbaa !0
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %.critedge.thread, label %46

.loopexit:                                        ; preds = %.preheader6
  %.pre = load i8** %2, align 8, !tbaa !7
  %.pre43 = load i8* %.pre, align 1, !tbaa !0
  br label %46

; <label>:46                                      ; preds = %.loopexit, %42
  %47 = phi i8 [ %.pre43, %.loopexit ], [ %44, %42 ]
  %48 = phi i8* [ %.pre, %.loopexit ], [ %43, %42 ]
  %49 = sext i8 %47 to i32
  %50 = icmp eq i32 %49, %no_period.0
  br i1 %50, label %.critedge.thread, label %51

; <label>:51                                      ; preds = %46
  %52 = icmp eq i8 %39, 0
  br i1 %52, label %53, label %.preheader

; <label>:53                                      ; preds = %51
  br i1 %4, label %54, label %.critedge.thread

; <label>:54                                      ; preds = %53
  %55 = call i8* @strchr(i8* %48, i32 %5) nounwind optsize
  %56 = icmp eq i8* %55, null
  br i1 %56, label %.critedge.thread, label %.preheader

.preheader:                                       ; preds = %67, %54, %51
  %57 = phi i8* [ %68, %67 ], [ %48, %51 ], [ %48, %54 ]
  %58 = load i8* %57, align 1, !tbaa !0
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %.critedge.thread, label %60

; <label>:60                                      ; preds = %.preheader
  %61 = call i32 @fnmatch(i8* %38, i8* %57, i32 %13) optsize
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %.critedge.thread, label %63

; <label>:63                                      ; preds = %60
  %64 = load i8* %57, align 1, !tbaa !0
  %65 = sext i8 %64 to i32
  %66 = icmp eq i32 %65, %5
  br i1 %66, label %.critedge.thread, label %67

; <label>:67                                      ; preds = %63
  %68 = getelementptr inbounds i8* %57, i64 1
  store i8* %68, i8** %2, align 8, !tbaa !7
  br label %.preheader

; <label>:69                                      ; preds = %22
  %70 = load i8* %18, align 1, !tbaa !0
  %71 = icmp eq i8 %70, 33
  %72 = icmp eq i8 %70, 94
  %73 = or i1 %71, %72
  %74 = zext i1 %73 to i32
  switch i8 %70, label %77 [
    i8 94, label %75
    i8 33, label %75
  ]

; <label>:75                                      ; preds = %69, %69
  %76 = getelementptr inbounds i8* %17, i64 2
  store i8* %76, i8** %1, align 8, !tbaa !7
  br label %77

; <label>:77                                      ; preds = %75, %69
  %78 = call fastcc i32 @next(i8** %2) optsize
  %79 = icmp eq i32 %78, 0
  %80 = icmp eq i32 %78, %5
  %or.cond3 = or i1 %79, %80
  %81 = icmp eq i32 %78, %no_period.0
  %or.cond4 = or i1 %or.cond3, %81
  br i1 %or.cond4, label %.critedge.thread, label %.outer

.outer:                                           ; preds = %122, %119, %101, %77
  %first.0.ph = phi i32 [ 1, %77 ], [ 0, %101 ], [ 0, %119 ], [ 0, %122 ]
  %match.0.ph = phi i32 [ 0, %77 ], [ %match.1, %101 ], [ 1, %119 ], [ 1, %122 ]
  br label %.backedge

.backedge:                                        ; preds = %122, %119, %117, %.thread, %.outer
  %first.0 = phi i32 [ %first.0.ph, %.outer ], [ 0, %122 ], [ 0, %119 ], [ 0, %.thread ], [ 0, %117 ]
  %82 = load i8** %1, align 8, !tbaa !7
  %83 = load i8* %82, align 1, !tbaa !0
  switch i8 %83, label %.thread [
    i8 0, label %.critedge.thread
    i8 93, label %84
    i8 91, label %86
  ]

; <label>:84                                      ; preds = %.backedge
  %85 = icmp eq i32 %first.0, 0
  br i1 %85, label %124, label %.thread

; <label>:86                                      ; preds = %.backedge
  %87 = getelementptr inbounds i8* %82, i64 1
  %88 = load i8* %87, align 1, !tbaa !0
  %89 = icmp eq i8 %88, 58
  br i1 %89, label %90, label %.thread

; <label>:90                                      ; preds = %86
  %91 = getelementptr inbounds i8* %82, i64 2
  store i8* %91, i8** %1, align 8, !tbaa !7
  br label %.critedge1

.critedge1:                                       ; preds = %93, %..critedge1_crit_edge, %90
  %z.0 = phi i8* [ %91, %90 ], [ %.pre44, %..critedge1_crit_edge ], [ %94, %93 ]
  %92 = load i8* %z.0, align 1, !tbaa !0
  switch i8 %92, label %..critedge1_crit_edge [
    i8 0, label %.critedge.thread
    i8 58, label %93
  ]

..critedge1_crit_edge:                            ; preds = %.critedge1
  %.pre44 = getelementptr inbounds i8* %z.0, i64 1
  br label %.critedge1

; <label>:93                                      ; preds = %.critedge1
  %94 = getelementptr inbounds i8* %z.0, i64 1
  %95 = load i8* %94, align 1, !tbaa !0
  %96 = icmp eq i8 %95, 93
  br i1 %96, label %.critedge, label %.critedge1

.critedge:                                        ; preds = %93
  %97 = ptrtoint i8* %z.0 to i64
  %98 = ptrtoint i8* %91 to i64
  %99 = sub i64 %97, %98
  %100 = icmp sgt i64 %99, 32
  br i1 %100, label %.critedge.thread, label %101

; <label>:101                                     ; preds = %.critedge
  %102 = call i8* @memcpy(i8* %16, i8* %91, i64 %99) nounwind optsize
  %103 = getelementptr inbounds [33 x i8]* %class, i64 0, i64 %99
  store i8 0, i8* %103, align 1, !tbaa !0
  %104 = call i32 @wctype(i8* %16) nounwind optsize
  %105 = call i32 @iswctype(i32 %78, i32 %104) nounwind optsize
  %106 = icmp eq i32 %105, 0
  %match.1 = select i1 %106, i32 %match.0.ph, i32 1
  %107 = getelementptr inbounds i8* %z.0, i64 2
  store i8* %107, i8** %1, align 8, !tbaa !7
  br label %.outer

.thread:                                          ; preds = %86, %84, %.backedge
  %108 = call fastcc i32 @bracket_next(i8** %1) optsize
  switch i32 %108, label %109 [
    i32 -256, label %.critedge.thread
    i32 -257, label %.backedge
  ]

; <label>:109                                     ; preds = %.thread
  %110 = load i8** %1, align 8, !tbaa !7
  %111 = load i8* %110, align 1, !tbaa !0
  %112 = icmp eq i8 %111, 45
  br i1 %112, label %113, label %122

; <label>:113                                     ; preds = %109
  %114 = getelementptr inbounds i8* %110, i64 1
  %115 = load i8* %114, align 1, !tbaa !0
  %116 = icmp eq i8 %115, 93
  br i1 %116, label %122, label %117

; <label>:117                                     ; preds = %113
  store i8* %114, i8** %1, align 8, !tbaa !7
  %118 = call fastcc i32 @bracket_next(i8** %1) optsize
  switch i32 %118, label %119 [
    i32 -256, label %.critedge.thread
    i32 -257, label %.backedge
  ]

; <label>:119                                     ; preds = %117
  %120 = icmp slt i32 %78, %108
  %121 = icmp sgt i32 %78, %118
  %or.cond5 = or i1 %120, %121
  br i1 %or.cond5, label %.backedge, label %.outer

; <label>:122                                     ; preds = %113, %109
  %123 = icmp eq i32 %78, %108
  br i1 %123, label %.outer, label %.backedge

; <label>:124                                     ; preds = %84
  %125 = getelementptr inbounds i8* %82, i64 1
  store i8* %125, i8** %1, align 8, !tbaa !7
  %126 = icmp eq i32 %74, %match.0.ph
  br i1 %126, label %.critedge.thread, label %134

._crit_edge:                                      ; preds = %29, %22
  %127 = phi i8* [ %30, %29 ], [ %18, %22 ]
  %c.0 = phi i32 [ %32, %29 ], [ %20, %22 ]
  %128 = load i8** %2, align 8, !tbaa !7
  %129 = getelementptr inbounds i8* %128, i64 1
  store i8* %129, i8** %2, align 8, !tbaa !7
  %130 = load i8* %128, align 1, !tbaa !0
  %131 = sext i8 %130 to i32
  %132 = icmp eq i32 %131, %c.0
  br i1 %132, label %133, label %.critedge.thread

; <label>:133                                     ; preds = %._crit_edge
  %.not = icmp ne i32 %c.0, %5
  %brmerge = or i1 %.not, %7
  br i1 %brmerge, label %134, label %.backedge22

; <label>:134                                     ; preds = %133, %124, %33, %23
  %135 = phi i8* [ %127, %133 ], [ %18, %23 ], [ %18, %33 ], [ %125, %124 ]
  br label %.backedge22

; <label>:136                                     ; preds = %.backedge22
  %137 = load i8** %2, align 8, !tbaa !7
  %138 = load i8* %137, align 1, !tbaa !0
  %not. = icmp ne i8 %138, 0
  %. = zext i1 %not. to i32
  br label %.critedge.thread

.critedge.thread:                                 ; preds = %136, %._crit_edge, %124, %117, %.thread, %.critedge, %.critedge1, %.backedge, %77, %63, %60, %.preheader, %54, %53, %46, %42, %33, %23
  %.0 = phi i32 [ 1, %42 ], [ 1, %46 ], [ 0, %54 ], [ 0, %53 ], [ %., %136 ], [ 1, %63 ], [ 1, %.preheader ], [ 0, %60 ], [ 1, %.critedge1 ], [ 1, %.critedge ], [ 1, %.backedge ], [ 1, %.thread ], [ 1, %117 ], [ 1, %23 ], [ 1, %33 ], [ 1, %77 ], [ 1, %124 ], [ 1, %._crit_edge ]
  ret i32 %.0
}

define internal fastcc i32 @next(i8** nocapture %s) nounwind uwtable optsize {
  %c = alloca i32, align 4
  %1 = load i8** %s, align 8, !tbaa !7
  %2 = call i32 @mbtowc(i32* %c, i8* %1, i64 4) nounwind optsize
  %3 = icmp slt i32 %2, 0
  %4 = load i8** %s, align 8, !tbaa !7
  br i1 %3, label %5, label %10

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %4, i64 1
  store i8* %6, i8** %s, align 8, !tbaa !7
  %7 = load i8* %4, align 1, !tbaa !0
  %8 = zext i8 %7 to i32
  %9 = or i32 %8, -256
  br label %14

; <label>:10                                      ; preds = %0
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds i8* %4, i64 %11
  store i8* %12, i8** %s, align 8, !tbaa !7
  %13 = load i32* %c, align 4, !tbaa !6
  br label %14

; <label>:14                                      ; preds = %10, %5
  %.0 = phi i32 [ %9, %5 ], [ %13, %10 ]
  ret i32 %.0
}

define internal fastcc i32 @bracket_next(i8** nocapture %s) nounwind uwtable optsize {
  %1 = load i8** %s, align 8, !tbaa !7
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 91
  br i1 %3, label %4, label %32

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %1, i64 1
  %6 = load i8* %5, align 1, !tbaa !0
  switch i8 %6, label %32 [
    i8 61, label %7
    i8 46, label %7
  ]

; <label>:7                                       ; preds = %4, %4
  %8 = getelementptr inbounds i8* %1, i64 2
  store i8* %8, i8** %s, align 8, !tbaa !7
  %9 = tail call fastcc i32 @next(i8** %s) optsize
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %.critedge.thread, label %11

; <label>:11                                      ; preds = %7
  %12 = load i8** %s, align 8, !tbaa !7
  %13 = load i8* %12, align 1, !tbaa !0
  %14 = icmp eq i8 %13, %6
  br i1 %14, label %15, label %.preheader

; <label>:15                                      ; preds = %11
  %16 = getelementptr inbounds i8* %12, i64 1
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = icmp eq i8 %17, 93
  br i1 %18, label %19, label %.preheader

; <label>:19                                      ; preds = %15
  %20 = getelementptr inbounds i8* %12, i64 2
  store i8* %20, i8** %s, align 8, !tbaa !7
  br label %.critedge.thread

.preheader:                                       ; preds = %.critedge2, %15, %11
  %21 = phi i8 [ %.pre, %.critedge2 ], [ %13, %15 ], [ %13, %11 ]
  %22 = phi i8* [ %26, %.critedge2 ], [ %12, %15 ], [ %12, %11 ]
  %23 = icmp eq i8 %21, 0
  br i1 %23, label %.critedge.thread, label %24

; <label>:24                                      ; preds = %.preheader
  %25 = icmp eq i8 %21, %6
  %26 = getelementptr inbounds i8* %22, i64 1
  br i1 %25, label %27, label %.critedge2

; <label>:27                                      ; preds = %24
  %28 = load i8* %26, align 1, !tbaa !0
  %29 = icmp eq i8 %28, 93
  br i1 %29, label %.critedge, label %.critedge2

.critedge2:                                       ; preds = %27, %24
  store i8* %26, i8** %s, align 8, !tbaa !7
  %.pre = load i8* %26, align 1, !tbaa !0
  br label %.preheader

.critedge:                                        ; preds = %27
  br i1 %23, label %.critedge.thread, label %30

; <label>:30                                      ; preds = %.critedge
  %31 = getelementptr inbounds i8* %22, i64 2
  store i8* %31, i8** %s, align 8, !tbaa !7
  br label %.critedge.thread

; <label>:32                                      ; preds = %4, %0
  %33 = tail call fastcc i32 @next(i8** %s) optsize
  %34 = icmp slt i32 %33, 1
  %. = select i1 %34, i32 -256, i32 %33
  br label %.critedge.thread

.critedge.thread:                                 ; preds = %32, %30, %.critedge, %.preheader, %19, %7
  %.0 = phi i32 [ %9, %19 ], [ -257, %30 ], [ -256, %7 ], [ -256, %.critedge ], [ %., %32 ], [ -256, %.preheader ]
  ret i32 %.0
}

define %struct.__FILE_s.61* @fopen(i8* %filename, i8* %mode) nounwind uwtable optsize {
  %1 = tail call i8* @strchr(i8* %mode, i32 43) nounwind optsize
  %2 = load i8* %mode, align 1, !tbaa !0
  %3 = sext i8 %2 to i32
  %4 = tail call i8* @strchr(i8* getelementptr inbounds ([4 x i8]* @.str168, i64 0, i64 0), i32 %3) nounwind optsize
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %7, align 4, !tbaa !6
  br label %30

; <label>:8                                       ; preds = %0
  %9 = icmp eq i8* %1, null
  %10 = load i8* %mode, align 1, !tbaa !0
  br i1 %9, label %11, label %._crit_edge

; <label>:11                                      ; preds = %8
  %not. = icmp ne i8 %10, 114
  %. = zext i1 %not. to i32
  br label %._crit_edge

._crit_edge:                                      ; preds = %11, %8
  %flags.0 = phi i32 [ %., %11 ], [ 2, %8 ]
  %12 = icmp eq i8 %10, 114
  %13 = or i32 %flags.0, 64
  %flags.1 = select i1 %12, i32 %flags.0, i32 %13
  %14 = or i32 %flags.1, 512
  %15 = icmp eq i8 %10, 119
  %.flags.1 = select i1 %15, i32 %14, i32 %flags.1
  %16 = icmp eq i8 %10, 97
  %17 = or i32 %.flags.1, 1024
  %flags.3 = select i1 %16, i32 %17, i32 %.flags.1
  %18 = ptrtoint i8* %filename to i64
  %19 = sext i32 %flags.3 to i64
  %20 = tail call i64 @__syscall_cp(i64 5, i64 %18, i64 %19, i64 438, i64 0, i64 0, i64 0) nounwind optsize
  %21 = tail call i64 @__syscall_ret(i64 %20) nounwind optsize
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %30, label %24

; <label>:24                                      ; preds = %._crit_edge
  %25 = tail call %struct.__FILE_s.61* @__fdopen(i32 %22, i8* %mode) nounwind optsize
  %26 = icmp eq %struct.__FILE_s.61* %25, null
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %24
  %28 = sext i32 %22 to i64
  %29 = tail call i64 (i64, ...)* @__syscall(i64 6, i64 %28, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %30

; <label>:30                                      ; preds = %27, %24, %._crit_edge, %6
  %.0 = phi %struct.__FILE_s.61* [ null, %27 ], [ null, %6 ], [ null, %._crit_edge ], [ %25, %24 ]
  ret %struct.__FILE_s.61* %.0
}

define %struct.__FILE_s.37* @__fopen_rb_ca(i8* %filename, %struct.__FILE_s.37* %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = bitcast %struct.__FILE_s.37* %f to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 184) nounwind optsize
  %3 = ptrtoint i8* %filename to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 5, i64 %3, i64 0, i64 0, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 15
  store i32 %6, i32* %7, align 4, !tbaa !6
  %8 = icmp slt i32 %6, 0
  br i1 %8, label %19, label %9

; <label>:9                                       ; preds = %0
  %10 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 0
  store i32 9, i32* %10, align 4, !tbaa !6
  %11 = getelementptr inbounds i8* %buf, i64 8
  %12 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 11
  store i8* %11, i8** %12, align 8, !tbaa !7
  %13 = add i64 %len, -8
  %14 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 12
  store i64 %13, i64* %14, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 8
  store i64 (%struct.__FILE_s.37*, i8*, i64)* bitcast (i64 (%struct.__FILE_s.643*, i8*, i64)* @__stdio_read to i64 (%struct.__FILE_s.37*, i8*, i64)*), i64 (%struct.__FILE_s.37*, i8*, i64)** %15, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 10
  store i64 (%struct.__FILE_s.37*, i64, i32)* bitcast (i64 (%struct.__FILE_s.646*, i64, i32)* @__stdio_seek to i64 (%struct.__FILE_s.37*, i64, i32)*), i64 (%struct.__FILE_s.37*, i64, i32)** %16, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 3
  store i32 (%struct.__FILE_s.37*)* bitcast (i32 (%struct.__FILE_s.642*)* @__stdio_close to i32 (%struct.__FILE_s.37*)*), i32 (%struct.__FILE_s.37*)** %17, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.__FILE_s.37* %f, i64 0, i32 21
  store i32 -1, i32* %18, align 4, !tbaa !6
  br label %19

; <label>:19                                      ; preds = %9, %0
  %.0 = phi %struct.__FILE_s.37* [ %f, %9 ], [ null, %0 ]
  ret %struct.__FILE_s.37* %.0
}

define i32 @forkpty(i32* %m, i8* %name, %struct.termios.82* %tio, %struct.winsize* %ws) nounwind uwtable optsize {
  %s = alloca i32, align 4
  %istmp = alloca [3 x i32], align 4
  %1 = bitcast [3 x i32]* %istmp to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 12, i32 4, i1 false)
  %2 = call i32 @openpty(i32* %m, i32* %s, i8* %name, %struct.termios.82* %tio, %struct.winsize* %ws) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %56, label %.preheader

.preheader:                                       ; preds = %19, %0
  %indvars.iv2 = phi i64 [ %indvars.iv.next3, %19 ], [ 0, %0 ]
  %i.0 = phi i32 [ %20, %19 ], [ 0, %0 ]
  %4 = trunc i64 %indvars.iv2 to i32
  %5 = icmp slt i32 %4, 3
  br i1 %5, label %6, label %21

; <label>:6                                       ; preds = %.preheader
  %7 = call i32 (i32, i32, ...)* @fcntl(i32 %4, i32 3) nounwind optsize
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %6
  %10 = load i32* %s, align 4, !tbaa !6
  %11 = call i32 (i32, i32, ...)* @fcntl(i32 %10, i32 0, i32 %4) nounwind optsize
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %21, label %13

; <label>:13                                      ; preds = %9
  %14 = icmp eq i32 %11, %4
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %13
  %16 = call i32 @close(i32 %11) nounwind optsize
  br label %19

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds [3 x i32]* %istmp, i64 0, i64 %indvars.iv2
  store i32 1, i32* %18, align 4, !tbaa !6
  br label %19

; <label>:19                                      ; preds = %17, %15, %6
  %indvars.iv.next3 = add i64 %indvars.iv2, 1
  %20 = add nsw i32 %i.0, 1
  br label %.preheader

; <label>:21                                      ; preds = %9, %.preheader
  %22 = icmp eq i32 %i.0, 3
  br i1 %22, label %23, label %.thread.preheader

.thread.preheader:                                ; preds = %23, %21
  %.ph = phi i32 [ -1, %21 ], [ %24, %23 ]
  br label %42

; <label>:23                                      ; preds = %21
  %24 = call i32 @fork() nounwind optsize
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %.thread.preheader

; <label>:26                                      ; preds = %23
  %27 = load i32* %m, align 4, !tbaa !6
  %28 = call i32 @close(i32 %27) nounwind optsize
  %29 = call i32 @setsid() nounwind optsize
  %30 = load i32* %s, align 4, !tbaa !6
  %31 = call i32 (i32, i32, ...)* @ioctl(i32 %30, i32 21518, i8* null) nounwind optsize
  %32 = load i32* %s, align 4, !tbaa !6
  %33 = call i32 @dup2(i32 %32, i32 0) nounwind optsize
  %34 = load i32* %s, align 4, !tbaa !6
  %35 = call i32 @dup2(i32 %34, i32 1) nounwind optsize
  %36 = load i32* %s, align 4, !tbaa !6
  %37 = call i32 @dup2(i32 %36, i32 2) nounwind optsize
  %38 = load i32* %s, align 4, !tbaa !6
  %39 = icmp sgt i32 %38, 2
  br i1 %39, label %40, label %56

; <label>:40                                      ; preds = %26
  %41 = call i32 @close(i32 %38) nounwind optsize
  br label %56

; <label>:42                                      ; preds = %.thread, %.thread.preheader
  %indvars.iv = phi i64 [ 0, %.thread.preheader ], [ %indvars.iv.next, %.thread ]
  %43 = getelementptr inbounds [3 x i32]* %istmp, i64 0, i64 %indvars.iv
  %44 = load i32* %43, align 4, !tbaa !6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %.thread, label %46

; <label>:46                                      ; preds = %42
  %47 = trunc i64 %indvars.iv to i32
  %48 = call i32 @close(i32 %47) nounwind optsize
  br label %.thread

.thread:                                          ; preds = %46, %42
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %49, label %42

; <label>:49                                      ; preds = %.thread
  %50 = load i32* %s, align 4, !tbaa !6
  %51 = call i32 @close(i32 %50) nounwind optsize
  %52 = icmp slt i32 %.ph, 0
  br i1 %52, label %53, label %56

; <label>:53                                      ; preds = %49
  %54 = load i32* %m, align 4, !tbaa !6
  %55 = call i32 @close(i32 %54) nounwind optsize
  br label %56

; <label>:56                                      ; preds = %53, %49, %40, %26, %0
  %.0 = phi i32 [ -1, %0 ], [ 0, %40 ], [ 0, %26 ], [ %.ph, %53 ], [ %.ph, %49 ]
  ret i32 %.0
}

define i64 @fpathconf(i32 %fd, i32 %name) nounwind uwtable optsize {
  %1 = icmp ugt i32 %name, 21
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %0
  %3 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %3, align 4, !tbaa !6
  br label %9

; <label>:4                                       ; preds = %0
  %5 = sext i32 %name to i64
  %6 = getelementptr inbounds [21 x i16]* @fpathconf.values, i64 0, i64 %5
  %7 = load i16* %6, align 2, !tbaa !8
  %8 = sext i16 %7 to i64
  br label %9

; <label>:9                                       ; preds = %4, %2
  %.0 = phi i64 [ -1, %2 ], [ %8, %4 ]
  ret i64 %.0
}

define i32 @__fpclassifyf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  switch i32 %3, label %9 [
    i32 0, label %4
    i32 255, label %7
  ]

; <label>:4                                       ; preds = %0
  %.mask = and i32 %1, 2147483647
  %5 = icmp ne i32 %.mask, 0
  %6 = select i1 %5, i32 3, i32 2
  br label %9

; <label>:7                                       ; preds = %0
  %.mask3 = and i32 %1, 8388607
  %not. = icmp eq i32 %.mask3, 0
  %8 = zext i1 %not. to i32
  br label %9

; <label>:9                                       ; preds = %7, %4, %0
  %.0 = phi i32 [ %8, %7 ], [ %6, %4 ], [ 4, %0 ]
  ret i32 %.0
}

define i32 @__fpclassifyl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %0
  %7 = trunc i80 %1 to i64
  %8 = icmp ne i64 %7, 0
  %9 = select i1 %8, i32 3, i32 2
  br label %19

; <label>:10                                      ; preds = %0
  %11 = icmp eq i32 %4, 32767
  %12 = trunc i80 %1 to i64
  br i1 %11, label %13, label %16

; <label>:13                                      ; preds = %10
  %14 = and i64 %12, 9223372036854775807
  %not. = icmp eq i64 %14, 0
  %15 = zext i1 %not. to i32
  br label %19

; <label>:16                                      ; preds = %10
  %17 = icmp slt i64 %12, 0
  %18 = select i1 %17, i32 4, i32 0
  br label %19

; <label>:19                                      ; preds = %16, %13, %6
  %.0 = phi i32 [ %15, %13 ], [ %18, %16 ], [ %9, %6 ]
  ret i32 %.0
}

define i32 @__fpclassify(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 52
  %.tr = trunc i64 %2 to i32
  %3 = and i32 %.tr, 2047
  switch i32 %3, label %9 [
    i32 0, label %4
    i32 2047, label %7
  ]

; <label>:4                                       ; preds = %0
  %.mask = and i64 %1, 9223372036854775807
  %5 = icmp ne i64 %.mask, 0
  %6 = select i1 %5, i32 3, i32 2
  br label %9

; <label>:7                                       ; preds = %0
  %.mask3 = and i64 %1, 4503599627370495
  %not. = icmp eq i64 %.mask3, 0
  %8 = zext i1 %not. to i32
  br label %9

; <label>:9                                       ; preds = %7, %4, %0
  %.0 = phi i32 [ %8, %7 ], [ %6, %4 ], [ 4, %0 ]
  ret i32 %.0
}

define i32 @fprintf(%struct.__FILE_s* %f, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.48], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.48]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.48]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s*, i8*, %struct.__va_list_tag.48*)*)(%struct.__FILE_s* %f, i8* %fmt, %struct.__va_list_tag.48* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @fputc(i32 %c, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 20
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = sext i8 %2 to i32
  %4 = icmp eq i32 %3, %c
  br i1 %4, label %15, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  %9 = load i8** %8, align 8, !tbaa !7
  %10 = icmp ult i8* %7, %9
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %5
  %12 = trunc i32 %c to i8
  %13 = getelementptr inbounds i8* %7, i64 1
  store i8* %13, i8** %6, align 8, !tbaa !7
  store i8 %12, i8* %7, align 1, !tbaa !0
  %14 = and i32 %c, 255
  br label %17

; <label>:15                                      ; preds = %5, %0
  %16 = tail call i32 @__overflow(%struct.__FILE_s.85* %f, i32 %c) nounwind optsize
  br label %17

; <label>:17                                      ; preds = %15, %11
  %18 = phi i32 [ %14, %11 ], [ %16, %15 ]
  ret i32 %18
}

define i32 @fputs(i8* %s, %struct.__FILE_s.86* %f) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %s) nounwind optsize
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i64 bitcast (i64 (i8*, i64, i64, %struct.__FILE_s.85*)* @fwrite to i64 (i8*, i64, i64, %struct.__FILE_s.86*)*)(i8* %s, i64 %1, i64 1, %struct.__FILE_s.86* %f) nounwind optsize
  %5 = trunc i64 %4 to i32
  %6 = add nsw i32 %5, -1
  br label %7

; <label>:7                                       ; preds = %3, %0
  %.0 = phi i32 [ %6, %3 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @__fputwc_unlocked(i32 %c, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %mbc = alloca [4 x i8], align 1
  %1 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 19
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = add i8 %2, 1
  %4 = or i8 %3, %2
  store i8 %4, i8* %1, align 1, !tbaa !0
  %5 = call i32 @isascii(i32 %c) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %24, label %7

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 20
  %9 = load i8* %8, align 1, !tbaa !0
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, %c
  br i1 %11, label %22, label %12

; <label>:12                                      ; preds = %7
  %13 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %14 = load i8** %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  %16 = load i8** %15, align 8, !tbaa !7
  %17 = icmp ult i8* %14, %16
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %12
  %19 = trunc i32 %c to i8
  %20 = getelementptr inbounds i8* %14, i64 1
  store i8* %20, i8** %13, align 8, !tbaa !7
  store i8 %19, i8* %14, align 1, !tbaa !0
  %21 = and i32 %c, 255
  br label %47

; <label>:22                                      ; preds = %12, %7
  %23 = call i32 @__overflow(%struct.__FILE_s.85* %f, i32 %c) nounwind optsize
  br label %47

; <label>:24                                      ; preds = %0
  %25 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %26 = load i8** %25, align 8, !tbaa !7
  %27 = getelementptr inbounds i8* %26, i64 4
  %28 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  %29 = load i8** %28, align 8, !tbaa !7
  %30 = icmp ult i8* %27, %29
  br i1 %30, label %31, label %38

; <label>:31                                      ; preds = %24
  %32 = call i32 @wctomb(i8* %26, i32 %c) nounwind optsize
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %47, label %34

; <label>:34                                      ; preds = %31
  %35 = load i8** %25, align 8, !tbaa !7
  %36 = sext i32 %32 to i64
  %37 = getelementptr inbounds i8* %35, i64 %36
  store i8* %37, i8** %25, align 8, !tbaa !7
  br label %47

; <label>:38                                      ; preds = %24
  %39 = getelementptr inbounds [4 x i8]* %mbc, i64 0, i64 0
  %40 = call i32 @wctomb(i8* %39, i32 %c) nounwind optsize
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %46, label %42

; <label>:42                                      ; preds = %38
  %43 = sext i32 %40 to i64
  %44 = call i64 @__fwritex(i8* %39, i64 %43, %struct.__FILE_s.85* %f) nounwind optsize
  %45 = icmp ult i64 %44, %43
  br i1 %45, label %46, label %47

; <label>:46                                      ; preds = %42, %38
  br label %47

; <label>:47                                      ; preds = %46, %42, %34, %31, %22, %18
  %.0 = phi i32 [ %c, %34 ], [ -1, %46 ], [ %c, %42 ], [ %21, %18 ], [ %23, %22 ], [ -1, %31 ]
  ret i32 %.0
}

define i32 @fputwc(i32 %c, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = tail call i32 @__fputwc_unlocked(i32 %c, %struct.__FILE_s.85* %f) optsize
  ret i32 %1
}

define i32 @fputws(i32* %ws, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = alloca i32*, align 8
  %buf = alloca [1024 x i8], align 16
  store i32* %ws, i32** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 19
  %3 = load i8* %2, align 1, !tbaa !0
  %4 = add i8 %3, 1
  %5 = or i8 %4, %3
  store i8 %5, i8* %2, align 1, !tbaa !0
  %6 = getelementptr inbounds [1024 x i8]* %buf, i64 0, i64 0
  br label %7

; <label>:7                                       ; preds = %._crit_edge, %0
  %8 = phi i32* [ %ws, %0 ], [ %.pre, %._crit_edge ]
  %l.0 = phi i64 [ 0, %0 ], [ %11, %._crit_edge ]
  %9 = icmp eq i32* %8, null
  br i1 %9, label %.critedge, label %10

; <label>:10                                      ; preds = %7
  %11 = call i64 @wcsrtombs(i8* %6, i32** %1, i64 1024, %struct.mbstate_t.89* null) nounwind optsize
  %12 = add i64 %11, 1
  %13 = icmp ugt i64 %12, 1
  br i1 %13, label %14, label %.critedge

; <label>:14                                      ; preds = %10
  %15 = call i64 @__fwritex(i8* %6, i64 %11, %struct.__FILE_s.85* %f) nounwind optsize
  %16 = icmp ult i64 %15, %11
  br i1 %16, label %.loopexit, label %._crit_edge

._crit_edge:                                      ; preds = %14
  %.pre = load i32** %1, align 8, !tbaa !7
  br label %7

.critedge:                                        ; preds = %10, %7
  %l.1 = phi i64 [ %11, %10 ], [ %l.0, %7 ]
  %17 = trunc i64 %l.1 to i32
  br label %.loopexit

.loopexit:                                        ; preds = %.critedge, %14
  %.0 = phi i32 [ %17, %.critedge ], [ -1, %14 ]
  ret i32 %.0
}

define i64 @fread(i8* %destv, i64 %size, i64 %nmemb, %struct.__FILE_s.90* %f) nounwind uwtable optsize {
  %1 = mul i64 %nmemb, %size
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %.loopexit, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.__FILE_s.90* %f, i64 0, i32 2
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.__FILE_s.90* %f, i64 0, i32 1
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = ptrtoint i8* %5 to i64
  %9 = ptrtoint i8* %7 to i64
  %10 = sub i64 %8, %9
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %12, label %.preheader

; <label>:12                                      ; preds = %3
  %13 = icmp ult i64 %10, %1
  %. = select i1 %13, i64 %10, i64 %1
  %14 = tail call i8* @memcpy(i8* %destv, i8* %7, i64 %.) nounwind optsize
  %15 = load i8** %6, align 8, !tbaa !7
  %16 = getelementptr inbounds i8* %15, i64 %.
  store i8* %16, i8** %6, align 8, !tbaa !7
  %17 = getelementptr inbounds i8* %destv, i64 %.
  %18 = sub i64 %1, %.
  br label %.preheader

.preheader:                                       ; preds = %12, %3
  %dest.0.ph = phi i8* [ %destv, %3 ], [ %17, %12 ]
  %l.0.ph = phi i64 [ %1, %3 ], [ %18, %12 ]
  %19 = getelementptr inbounds %struct.__FILE_s.90* %f, i64 0, i32 8
  br label %20

; <label>:20                                      ; preds = %32, %.preheader
  %dest.0 = phi i8* [ %34, %32 ], [ %dest.0.ph, %.preheader ]
  %l.0 = phi i64 [ %33, %32 ], [ %l.0.ph, %.preheader ]
  %21 = icmp eq i64 %l.0, 0
  br i1 %21, label %.loopexit, label %22

; <label>:22                                      ; preds = %20
  %23 = tail call i32 bitcast (i32 (%struct.__FILE_s.689*)* @__toread to i32 (%struct.__FILE_s.90*)*)(%struct.__FILE_s.90* %f) nounwind optsize
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %.thread

; <label>:25                                      ; preds = %22
  %26 = load i64 (%struct.__FILE_s.90*, i8*, i64)** %19, align 8, !tbaa !7
  %27 = tail call i64 %26(%struct.__FILE_s.90* %f, i8* %dest.0, i64 %l.0) nounwind optsize
  %28 = add i64 %27, 1
  %29 = icmp ult i64 %28, 2
  br i1 %29, label %.thread, label %32

.thread:                                          ; preds = %25, %22
  %30 = sub i64 %1, %l.0
  %31 = udiv i64 %30, %size
  br label %.loopexit

; <label>:32                                      ; preds = %25
  %33 = sub i64 %l.0, %27
  %34 = getelementptr inbounds i8* %dest.0, i64 %27
  br label %20

.loopexit:                                        ; preds = %.thread, %20, %0
  %.0 = phi i64 [ %31, %.thread ], [ 0, %0 ], [ %nmemb, %20 ]
  ret i64 %.0
}

define void @freeaddrinfo(%struct.addrinfo* %p) nounwind uwtable optsize {
  %1 = bitcast %struct.addrinfo* %p to i8*
  tail call void @free(i8* %1) optsize
  ret void
}

define void @freelocale(%struct.__locale.92* %l) nounwind uwtable optsize {
  %1 = bitcast %struct.__locale.92* %l to i8*
  tail call void @free(i8* %1) optsize
  ret void
}

define %struct.__FILE_s.67* @freopen(i8* %filename, i8* %mode, %struct.__FILE_s.67* %f) nounwind uwtable optsize {
  %1 = tail call i32 @fflush(%struct.__FILE_s.67* %f) nounwind optsize
  %2 = icmp eq i8* %filename, null
  br i1 %2, label %3, label %22

; <label>:3                                       ; preds = %0
  %4 = tail call %struct.__FILE_s.67* bitcast (%struct.__FILE_s.61* (i8*, i8*)* @fopen to %struct.__FILE_s.67* (i8*, i8*)*)(i8* getelementptr inbounds ([10 x i8]* @.str177, i64 0, i64 0), i8* %mode) nounwind optsize
  %5 = icmp eq %struct.__FILE_s.67* %4, null
  br i1 %5, label %60, label %6

; <label>:6                                       ; preds = %3
  %7 = getelementptr inbounds %struct.__FILE_s.67* %4, i64 0, i32 15
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = sext i32 %8 to i64
  %10 = tail call i64 (i64, ...)* @__syscall(i64 221, i64 %9, i64 3, i64 0, i32 0, i32 0, i32 0) nounwind optsize
  %11 = tail call i64 @__syscall_ret(i64 %10) nounwind optsize
  %12 = trunc i64 %11 to i32
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %58, label %14

; <label>:14                                      ; preds = %6
  %15 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 15
  %16 = load i32* %15, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  %18 = sext i32 %12 to i64
  %19 = tail call i64 (i64, ...)* @__syscall(i64 221, i64 %17, i64 4, i64 %18, i32 0, i32 0, i32 0) nounwind optsize
  %20 = tail call i64 @__syscall_ret(i64 %19) nounwind optsize
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %58, label %35

; <label>:22                                      ; preds = %0
  %23 = tail call %struct.__FILE_s.67* bitcast (%struct.__FILE_s.61* (i8*, i8*)* @fopen to %struct.__FILE_s.67* (i8*, i8*)*)(i8* %filename, i8* %mode) nounwind optsize
  %24 = icmp eq %struct.__FILE_s.67* %23, null
  br i1 %24, label %60, label %25

; <label>:25                                      ; preds = %22
  %26 = getelementptr inbounds %struct.__FILE_s.67* %23, i64 0, i32 15
  %27 = load i32* %26, align 4, !tbaa !6
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 15
  %30 = load i32* %29, align 4, !tbaa !6
  %31 = sext i32 %30 to i64
  %32 = tail call i64 (i64, ...)* @__syscall(i64 63, i64 %28, i64 %31, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %33 = tail call i64 @__syscall_ret(i64 %32) nounwind optsize
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %58, label %35

; <label>:35                                      ; preds = %25, %14
  %f2.0 = phi %struct.__FILE_s.67* [ %23, %25 ], [ %4, %14 ]
  %36 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 0
  %37 = load i32* %36, align 4, !tbaa !6
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.__FILE_s.67* %f2.0, i64 0, i32 0
  %40 = load i32* %39, align 4, !tbaa !6
  %41 = or i32 %38, %40
  store i32 %41, i32* %36, align 4, !tbaa !6
  %42 = getelementptr inbounds %struct.__FILE_s.67* %f2.0, i64 0, i32 8
  %43 = load i64 (%struct.__FILE_s.67*, i8*, i64)** %42, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 8
  store i64 (%struct.__FILE_s.67*, i8*, i64)* %43, i64 (%struct.__FILE_s.67*, i8*, i64)** %44, align 8, !tbaa !7
  %45 = getelementptr inbounds %struct.__FILE_s.67* %f2.0, i64 0, i32 9
  %46 = load i64 (%struct.__FILE_s.67*, i8*, i64)** %45, align 8, !tbaa !7
  %47 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 9
  store i64 (%struct.__FILE_s.67*, i8*, i64)* %46, i64 (%struct.__FILE_s.67*, i8*, i64)** %47, align 8, !tbaa !7
  %48 = getelementptr inbounds %struct.__FILE_s.67* %f2.0, i64 0, i32 10
  %49 = load i64 (%struct.__FILE_s.67*, i64, i32)** %48, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 10
  store i64 (%struct.__FILE_s.67*, i64, i32)* %49, i64 (%struct.__FILE_s.67*, i64, i32)** %50, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.__FILE_s.67* %f2.0, i64 0, i32 3
  %52 = load i32 (%struct.__FILE_s.67*)** %51, align 8, !tbaa !7
  %53 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 3
  store i32 (%struct.__FILE_s.67*)* %52, i32 (%struct.__FILE_s.67*)** %53, align 8, !tbaa !7
  %54 = getelementptr inbounds %struct.__FILE_s.67* %f2.0, i64 0, i32 25
  %55 = load i32 (%struct.__FILE_s.67*)** %54, align 8, !tbaa !7
  %56 = getelementptr inbounds %struct.__FILE_s.67* %f, i64 0, i32 25
  store i32 (%struct.__FILE_s.67*)* %55, i32 (%struct.__FILE_s.67*)** %56, align 8, !tbaa !7
  %57 = tail call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.67*)*)(%struct.__FILE_s.67* %f2.0) nounwind optsize
  br label %62

; <label>:58                                      ; preds = %25, %14, %6
  %f2.1 = phi %struct.__FILE_s.67* [ %23, %25 ], [ %4, %6 ], [ %4, %14 ]
  %59 = tail call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.67*)*)(%struct.__FILE_s.67* %f2.1) nounwind optsize
  br label %60

; <label>:60                                      ; preds = %58, %22, %3
  %61 = tail call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.67*)*)(%struct.__FILE_s.67* %f) nounwind optsize
  br label %62

; <label>:62                                      ; preds = %60, %35
  %.0 = phi %struct.__FILE_s.67* [ null, %60 ], [ %f, %35 ]
  ret %struct.__FILE_s.67* %.0
}

define float @frexpf(float %x, i32* %e) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  switch i32 %3, label %12 [
    i32 0, label %4
    i32 255, label %17
  ]

; <label>:4                                       ; preds = %0
  %5 = fcmp une float %x, 0.000000e+00
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %4
  %7 = fmul float %x, 0x43F0000000000000
  %8 = tail call float @frexpf(float %7, i32* %e) optsize
  %9 = load i32* %e, align 4, !tbaa !6
  %10 = add nsw i32 %9, -64
  br label %11

; <label>:11                                      ; preds = %6, %4
  %storemerge = phi i32 [ %10, %6 ], [ 0, %4 ]
  %.01 = phi float [ %8, %6 ], [ %x, %4 ]
  store i32 %storemerge, i32* %e, align 4
  br label %17

; <label>:12                                      ; preds = %0
  %13 = add nsw i32 %3, -126
  store i32 %13, i32* %e, align 4, !tbaa !6
  %14 = and i32 %1, -2139095041
  %15 = or i32 %14, 1056964608
  %16 = bitcast i32 %15 to float
  br label %17

; <label>:17                                      ; preds = %12, %11, %0
  %.0 = phi float [ %16, %12 ], [ %.01, %11 ], [ %x, %0 ]
  ret float %.0
}

define x86_fp80 @frexpl(x86_fp80 %x, i32* %e) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  switch i32 %4, label %13 [
    i32 0, label %5
    i32 32767, label %20
  ]

; <label>:5                                       ; preds = %0
  %6 = fcmp une x86_fp80 %x, 0xK00000000000000000000
  br i1 %6, label %7, label %12

; <label>:7                                       ; preds = %5
  %8 = fmul x86_fp80 %x, 0xK403F8000000000000000
  %9 = tail call x86_fp80 @frexpl(x86_fp80 %8, i32* %e) optsize
  %10 = load i32* %e, align 4, !tbaa !6
  %11 = add nsw i32 %10, -64
  br label %12

; <label>:12                                      ; preds = %7, %5
  %storemerge = phi i32 [ %11, %7 ], [ 0, %5 ]
  %.01 = phi x86_fp80 [ %9, %7 ], [ %x, %5 ]
  store i32 %storemerge, i32* %e, align 4
  br label %20

; <label>:13                                      ; preds = %0
  %14 = add nsw i32 %4, -16382
  store i32 %14, i32* %e, align 4, !tbaa !6
  %.tr = trunc i80 %2 to i16
  %15 = and i16 %.tr, -32768
  %mask3 = and i80 %1, 18446744073709551615
  %16 = or i16 %15, 16382
  %17 = zext i16 %16 to i80
  %18 = shl nuw i80 %17, 64
  %ins = or i80 %18, %mask3
  %19 = bitcast i80 %ins to x86_fp80
  br label %20

; <label>:20                                      ; preds = %13, %12, %0
  %.0 = phi x86_fp80 [ %19, %13 ], [ %.01, %12 ], [ %x, %0 ]
  ret x86_fp80 %.0
}

define double @frexp(double %x, i32* %e) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 52
  %.tr = trunc i64 %2 to i32
  %3 = and i32 %.tr, 2047
  switch i32 %3, label %12 [
    i32 0, label %4
    i32 2047, label %17
  ]

; <label>:4                                       ; preds = %0
  %5 = fcmp une double %x, 0.000000e+00
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %4
  %7 = fmul double %x, 0x43F0000000000000
  %8 = tail call double @frexp(double %7, i32* %e) optsize
  %9 = load i32* %e, align 4, !tbaa !6
  %10 = add nsw i32 %9, -64
  br label %11

; <label>:11                                      ; preds = %6, %4
  %storemerge = phi i32 [ %10, %6 ], [ 0, %4 ]
  %.01 = phi double [ %8, %6 ], [ %x, %4 ]
  store i32 %storemerge, i32* %e, align 4
  br label %17

; <label>:12                                      ; preds = %0
  %13 = add nsw i32 %3, -1022
  store i32 %13, i32* %e, align 4, !tbaa !6
  %14 = and i64 %1, -9218868437227405313
  %15 = or i64 %14, 4602678819172646912
  %16 = bitcast i64 %15 to double
  br label %17

; <label>:17                                      ; preds = %12, %11, %0
  %.0 = phi double [ %16, %12 ], [ %.01, %11 ], [ %x, %0 ]
  ret double %.0
}

define i32 @fscanf(%struct.__FILE_s.94* %f, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.95], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.95]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.95]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vfscanf(%struct.__FILE_s.94* %f, i8* %fmt, %struct.__va_list_tag.95* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @__fseeko_unlocked(%struct.__FILE_s.96* %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %1 = icmp eq i32 %whence, 1
  br i1 %1, label %2, label %11

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 2
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 1
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = ptrtoint i8* %4 to i64
  %8 = ptrtoint i8* %6 to i64
  %9 = sub i64 %off, %7
  %10 = add i64 %9, %8
  br label %11

; <label>:11                                      ; preds = %2, %0
  %.01 = phi i64 [ %10, %2 ], [ %off, %0 ]
  %12 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 5
  %13 = load i8** %12, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 7
  %15 = load i8** %14, align 8, !tbaa !7
  %16 = icmp ugt i8* %13, %15
  br i1 %16, label %17, label %23

; <label>:17                                      ; preds = %11
  %18 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 9
  %19 = load i64 (%struct.__FILE_s.96*, i8*, i64)** %18, align 8, !tbaa !7
  %20 = tail call i64 %19(%struct.__FILE_s.96* %f, i8* null, i64 0) nounwind optsize
  %21 = load i8** %12, align 8, !tbaa !7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %35, label %23

; <label>:23                                      ; preds = %17, %11
  %24 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 4
  store i8* null, i8** %24, align 8, !tbaa !7
  store i8* null, i8** %14, align 8, !tbaa !7
  store i8* null, i8** %12, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 10
  %26 = load i64 (%struct.__FILE_s.96*, i64, i32)** %25, align 8, !tbaa !7
  %27 = tail call i64 %26(%struct.__FILE_s.96* %f, i64 %.01, i32 %whence) nounwind optsize
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %35, label %29

; <label>:29                                      ; preds = %23
  %30 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 2
  store i8* null, i8** %30, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 1
  store i8* null, i8** %31, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 0
  %33 = load i32* %32, align 4, !tbaa !6
  %34 = and i32 %33, -17
  store i32 %34, i32* %32, align 4, !tbaa !6
  br label %35

; <label>:35                                      ; preds = %29, %23, %17
  %.0 = phi i32 [ 0, %29 ], [ -1, %17 ], [ -1, %23 ]
  ret i32 %.0
}

define i32 @__fseeko(%struct.__FILE_s.96* %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %1 = tail call i32 @__fseeko_unlocked(%struct.__FILE_s.96* %f, i64 %off, i32 %whence) optsize
  ret i32 %1
}

define i32 @fseek(%struct.__FILE_s.96* %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %1 = tail call i32 @__fseeko_unlocked(%struct.__FILE_s.96* %f, i64 %off, i32 %whence) nounwind optsize
  ret i32 %1
}

define i32 @fsetpos(%struct.__FILE_s.96* %f, %union.fpos_t.98* nocapture %pos) nounwind uwtable optsize {
  %1 = bitcast %union.fpos_t.98* %pos to i64*
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = tail call i32 @__fseeko(%struct.__FILE_s.96* %f, i64 %2, i32 0) nounwind optsize
  ret i32 %3
}

define i32 @fstatat(i32 %fd, i8* %path, %struct.stat.99* %buf, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = ptrtoint %struct.stat.99* %buf to i64
  %4 = sext i32 %flag to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 327, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @fstat(i32 %fd, %struct.stat* %buf) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.stat* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 197, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @fsync(i32 %fd) nounwind uwtable readnone optsize {
  ret i32 0
}

define i64 @__ftello_unlocked(%struct.__FILE_s.70* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.70* %f, i64 0, i32 10
  %2 = load i64 (%struct.__FILE_s.70*, i64, i32)** %1, align 8, !tbaa !7
  %3 = tail call i64 %2(%struct.__FILE_s.70* %f, i64 0, i32 1) nounwind optsize
  %4 = icmp slt i64 %3, 0
  br i1 %4, label %22, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.__FILE_s.70* %f, i64 0, i32 2
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.__FILE_s.70* %f, i64 0, i32 1
  %9 = load i8** %8, align 8, !tbaa !7
  %10 = ptrtoint i8* %7 to i64
  %11 = ptrtoint i8* %9 to i64
  %12 = getelementptr inbounds %struct.__FILE_s.70* %f, i64 0, i32 5
  %13 = load i8** %12, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.__FILE_s.70* %f, i64 0, i32 7
  %15 = load i8** %14, align 8, !tbaa !7
  %16 = ptrtoint i8* %13 to i64
  %17 = ptrtoint i8* %15 to i64
  %18 = sub i64 %3, %10
  %19 = add i64 %18, %11
  %20 = add i64 %19, %16
  %21 = sub i64 %20, %17
  br label %22

; <label>:22                                      ; preds = %5, %0
  %.0 = phi i64 [ %21, %5 ], [ %3, %0 ]
  ret i64 %.0
}

define i64 @__ftello(%struct.__FILE_s.70* %f) nounwind uwtable optsize {
  %1 = tail call i64 @__ftello_unlocked(%struct.__FILE_s.70* %f) optsize
  ret i64 %1
}

define i64 @ftell(%struct.__FILE_s.70* %f) nounwind uwtable optsize {
  %1 = tail call i64 @__ftello_unlocked(%struct.__FILE_s.70* %f) nounwind optsize
  ret i64 %1
}

define i32 @ftok(i8* %path, i32 %id) nounwind uwtable optsize {
  %st = alloca %struct.stat.104, align 8
  %1 = call i32 @stat(i8* %path, %struct.stat.104* %st) nounwind optsize
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %16, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.stat.104* %st, i64 0, i32 1
  %5 = load i64* %4, align 8, !tbaa !9
  %6 = and i64 %5, 65535
  %7 = getelementptr inbounds %struct.stat.104* %st, i64 0, i32 0
  %8 = load i64* %7, align 8, !tbaa !5
  %9 = shl i64 %8, 16
  %10 = and i64 %9, 16711680
  %11 = shl i32 %id, 24
  %12 = zext i32 %11 to i64
  %13 = or i64 %6, %12
  %14 = or i64 %13, %10
  %15 = trunc i64 %14 to i32
  br label %16

; <label>:16                                      ; preds = %3, %0
  %.0 = phi i32 [ %15, %3 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @ftruncate(i32 %fd, i64 %length) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 194, i64 %1, i64 0, i64 %length, i64 undef, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @ftrylockfile(%struct.__FILE_s.106* %f) nounwind uwtable optsize {
  %1 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %2 = getelementptr inbounds %struct.__pthread* %1, i64 0, i32 1
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = getelementptr inbounds %struct.__FILE_s.106* %f, i64 0, i32 21
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = icmp eq i32 %5, %3
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.__FILE_s.106* %f, i64 0, i32 17
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = icmp eq i64 %9, 9223372036854775807
  br i1 %10, label %a_cas.exit.thread1, label %11

; <label>:11                                      ; preds = %7
  %12 = add nsw i64 %9, 1
  store i64 %12, i64* %8, align 8, !tbaa !5
  br label %a_cas.exit.thread1

; <label>:13                                      ; preds = %0
  %14 = icmp slt i32 %5, 0
  br i1 %14, label %.thread, label %15

.thread:                                          ; preds = %13
  store i32 0, i32* %4, align 4, !tbaa !6
  br label %.preheader

; <label>:15                                      ; preds = %13
  %16 = icmp eq i32 %5, 0
  br i1 %16, label %.preheader, label %a_cas.exit.thread1

.preheader:                                       ; preds = %19, %15, %.thread
  %17 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 %3, i32* %4) nounwind optsize
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

; <label>:19                                      ; preds = %.preheader
  %20 = load volatile i32* %4, align 4, !tbaa !6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %.preheader, label %a_cas.exit.thread1

; <label>:22                                      ; preds = %.preheader
  %23 = getelementptr inbounds %struct.__FILE_s.106* %f, i64 0, i32 17
  store i64 1, i64* %23, align 8, !tbaa !5
  br label %a_cas.exit.thread1

a_cas.exit.thread1:                               ; preds = %22, %19, %15, %11, %7
  %.0 = phi i32 [ 0, %11 ], [ 0, %22 ], [ -1, %7 ], [ -1, %15 ], [ -1, %19 ]
  ret i32 %.0
}

declare %struct.__pthread* @pthread_self() nounwind readnone optsize

define i32 @ftw(i8* %path, i32 (i8*, %struct.stat.111*, i32)* %fn, i32 %fd_limit) nounwind uwtable optsize {
  %1 = bitcast i32 (i8*, %struct.stat.111*, i32)* %fn to i32 (i8*, %struct.stat.111*, i32, %struct.FTW*)*
  %2 = tail call i32 @nftw(i8* %path, i32 (i8*, %struct.stat.111*, i32, %struct.FTW*)* %1, i32 %fd_limit, i32 1) nounwind optsize
  ret i32 %2
}

define void @funlockfile(%struct.__FILE_s.113* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.113* %f, i64 0, i32 17
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = add nsw i64 %2, -1
  store i64 %3, i64* %1, align 8, !tbaa !5
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  tail call void bitcast (void (%struct.__FILE_s.69*)* @__unlockfile to void (%struct.__FILE_s.113*)*)(%struct.__FILE_s.113* %f) nounwind optsize
  br label %6

; <label>:6                                       ; preds = %5, %0
  ret void
}

define i32 @__futex(i32* %addr, i32 %op, i32 %val, i8* %ts) nounwind uwtable optsize {
  %1 = ptrtoint i32* %addr to i64
  %2 = sext i32 %op to i64
  %3 = sext i32 %val to i64
  %4 = ptrtoint i8* %ts to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 240, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @futimens(i32 %fd, %struct.timespec.114* %times) nounwind uwtable optsize {
  %1 = tail call i32 @utimensat(i32 %fd, i8* null, %struct.timespec.114* %times, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @futimes(i32 %fd, %struct.timeval.115* nocapture %tv) nounwind uwtable optsize {
  %times = alloca [2 x %struct.timespec.114], align 16
  %1 = getelementptr inbounds %struct.timeval.115* %tv, i64 0, i32 0
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 0, i32 0
  store i64 %2, i64* %3, align 16, !tbaa !5
  %4 = getelementptr inbounds %struct.timeval.115* %tv, i64 0, i32 1
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = mul nsw i64 %5, 1000
  %7 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 0, i32 1
  store i64 %6, i64* %7, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.timeval.115* %tv, i64 1, i32 0
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 1, i32 0
  store i64 %9, i64* %10, align 16, !tbaa !5
  %11 = getelementptr inbounds %struct.timeval.115* %tv, i64 1, i32 1
  %12 = load i64* %11, align 8, !tbaa !5
  %13 = mul nsw i64 %12, 1000
  %14 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 1, i32 1
  store i64 %13, i64* %14, align 8, !tbaa !5
  %15 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 0
  %16 = call i32 @futimens(i32 %fd, %struct.timespec.114* %15) nounwind optsize
  ret i32 %16
}

define i32 @fwide(%struct.__FILE_s.117* nocapture %f, i32 %mode) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.117* %f, i64 0, i32 19
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %10

; <label>:4                                       ; preds = %0
  %5 = ashr i32 %mode, 31
  %6 = sub nsw i32 0, %mode
  %7 = lshr i32 %6, 31
  %8 = or i32 %5, %7
  %9 = trunc i32 %8 to i8
  store i8 %9, i8* %1, align 1, !tbaa !0
  br label %10

; <label>:10                                      ; preds = %4, %0
  %11 = phi i8 [ %2, %0 ], [ %9, %4 ]
  %12 = sext i8 %11 to i32
  ret i32 %12
}

define i32 @fwprintf(%struct.__FILE_s.118* %f, i32* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.119], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.119]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vfwprintf(%struct.__FILE_s.118* %f, i32* %fmt, %struct.__va_list_tag.119* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i64 @__fwritex(i8* %s, i64 %l, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = tail call i32 bitcast (i32 (%struct.__FILE_s.694*)* @__towrite to i32 (%struct.__FILE_s.85*)*)(%struct.__FILE_s.85* %f) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %._crit_edge, label %41

._crit_edge:                                      ; preds = %4
  %.pre6 = load i8** %1, align 8, !tbaa !7
  br label %7

; <label>:7                                       ; preds = %._crit_edge, %0
  %8 = phi i8* [ %.pre6, %._crit_edge ], [ %2, %0 ]
  %9 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = ptrtoint i8* %8 to i64
  %12 = ptrtoint i8* %10 to i64
  %13 = sub i64 %11, %12
  %14 = icmp ult i64 %13, %l
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %7
  %16 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 9
  %17 = load i64 (%struct.__FILE_s.85*, i8*, i64)** %16, align 8, !tbaa !7
  %18 = tail call i64 %17(%struct.__FILE_s.85* %f, i8* %s, i64 %l) nounwind optsize
  br label %41

; <label>:19                                      ; preds = %7
  %20 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 20
  %21 = load i8* %20, align 1, !tbaa !0
  %22 = icmp sgt i8 %21, -1
  br i1 %22, label %.preheader, label %.critedge3

.preheader:                                       ; preds = %24, %19
  %i.0 = phi i64 [ %25, %24 ], [ %l, %19 ]
  %23 = icmp eq i64 %i.0, 0
  br i1 %23, label %.critedge3, label %24

; <label>:24                                      ; preds = %.preheader
  %25 = add i64 %i.0, -1
  %26 = getelementptr inbounds i8* %s, i64 %25
  %27 = load i8* %26, align 1, !tbaa !0
  %28 = icmp eq i8 %27, 10
  br i1 %28, label %.critedge, label %.preheader

.critedge:                                        ; preds = %24
  %29 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 9
  %30 = load i64 (%struct.__FILE_s.85*, i8*, i64)** %29, align 8, !tbaa !7
  %31 = tail call i64 %30(%struct.__FILE_s.85* %f, i8* %s, i64 %i.0) nounwind optsize
  %32 = icmp ult i64 %31, %i.0
  br i1 %32, label %41, label %33

; <label>:33                                      ; preds = %.critedge
  %34 = getelementptr inbounds i8* %s, i64 %i.0
  %35 = sub i64 %l, %i.0
  %.pre = load i8** %9, align 8, !tbaa !7
  br label %.critedge3

.critedge3:                                       ; preds = %33, %.preheader, %19
  %36 = phi i8* [ %.pre, %33 ], [ %10, %19 ], [ %10, %.preheader ]
  %i.1 = phi i64 [ %i.0, %33 ], [ 0, %19 ], [ 0, %.preheader ]
  %.02 = phi i64 [ %35, %33 ], [ %l, %19 ], [ %l, %.preheader ]
  %.01 = phi i8* [ %34, %33 ], [ %s, %19 ], [ %s, %.preheader ]
  %37 = tail call i8* @memcpy(i8* %36, i8* %.01, i64 %.02) nounwind optsize
  %38 = load i8** %9, align 8, !tbaa !7
  %39 = getelementptr inbounds i8* %38, i64 %.02
  store i8* %39, i8** %9, align 8, !tbaa !7
  %40 = add i64 %.02, %i.1
  br label %41

; <label>:41                                      ; preds = %.critedge3, %.critedge, %15, %4
  %.0 = phi i64 [ %18, %15 ], [ %40, %.critedge3 ], [ 0, %4 ], [ %i.0, %.critedge ]
  ret i64 %.0
}

define i64 @fwrite(i8* %src, i64 %size, i64 %nmemb, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = mul i64 %nmemb, %size
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @__fwritex(i8* %src, i64 %1, %struct.__FILE_s.85* %f) optsize
  %5 = icmp eq i64 %4, %1
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %3
  %7 = udiv i64 %1, %size
  br label %8

; <label>:8                                       ; preds = %6, %3, %0
  %.0 = phi i64 [ 0, %0 ], [ %7, %6 ], [ %nmemb, %3 ]
  ret i64 %.0
}

define i32 @fwscanf(%struct.__FILE_s.121* %f, i32* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.122], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.122]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.122]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vfwscanf(%struct.__FILE_s.121* %f, i32* %fmt, %struct.__va_list_tag.122* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i8* @gai_strerror(i32 %ecode) nounwind uwtable readonly optsize {
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader, %0
  %s.0 = phi i8* [ getelementptr inbounds ([239 x i8]* @msgs, i64 0, i64 0), %0 ], [ %6, %.preheader ]
  %.0.in = phi i32 [ %ecode, %0 ], [ %.0, %.preheader ]
  %.0 = add nsw i32 %.0.in, 1
  %1 = icmp eq i32 %.0, 0
  %.pre = load i8* %s.0, align 1, !tbaa !0
  br i1 %1, label %.critedge, label %2

; <label>:2                                       ; preds = %.loopexit
  %3 = icmp eq i8 %.pre, 0
  br i1 %3, label %.critedge, label %.preheader

.preheader:                                       ; preds = %._crit_edge, %2
  %4 = phi i8 [ %.pre1, %._crit_edge ], [ %.pre, %2 ]
  %s.1 = phi i8* [ %6, %._crit_edge ], [ %s.0, %2 ]
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds i8* %s.1, i64 1
  br i1 %5, label %.loopexit, label %._crit_edge

._crit_edge:                                      ; preds = %.preheader
  %.pre1 = load i8* %6, align 1, !tbaa !0
  br label %.preheader

.critedge:                                        ; preds = %2, %.loopexit
  %7 = phi i8 [ 0, %2 ], [ %.pre, %.loopexit ]
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds i8* %s.0, i64 1
  %10 = select i1 %8, i8* %s.0, i8* %9
  ret i8* %10
}

define i8* @gcvt(double %x, i32 %n, i8* %b) nounwind uwtable optsize {
  %1 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %b, i8* getelementptr inbounds ([5 x i8]* @.str192, i64 0, i64 0), i32 %n, double %x) nounwind optsize
  ret i8* %b
}

define i32 @getaddrinfo(i8* %host, i8* %serv, %struct.addrinfo.125* %hint, %struct.addrinfo.125** nocapture %res) nounwind uwtable optsize {
  %sa = alloca %union.sa, align 4
  %reply = alloca [1024 x i8], align 16
  %line = alloca [512 x i8], align 16
  %_f = alloca %struct.__FILE_s.37, align 8
  %_buf = alloca [64 x i8], align 16
  %z = alloca i8*, align 8
  %1 = icmp eq %struct.addrinfo.125* %hint, null
  br i1 %1, label %11, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 0
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 1
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 2
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 3
  %10 = load i32* %9, align 4, !tbaa !6
  br label %11

; <label>:11                                      ; preds = %2, %0
  %12 = phi i32 [ %8, %2 ], [ 0, %0 ]
  %13 = phi i32 [ %4, %2 ], [ 0, %0 ]
  %14 = phi i32 [ %6, %2 ], [ 0, %0 ]
  %15 = phi i32 [ %10, %2 ], [ 0, %0 ]
  %16 = bitcast %union.sa* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* bitcast ({ %struct.sockaddr_in.123, [12 x i8] }* @getaddrinfo.sa to i8*), i64 28, i32 4, i1 false)
  %17 = icmp ne i8* %host, null
  br i1 %17, label %18, label %21

; <label>:18                                      ; preds = %11
  %19 = call i64 @strlen(i8* %host) nounwind optsize
  %20 = icmp ugt i64 %19, 255
  br i1 %20, label %313, label %21

; <label>:21                                      ; preds = %18, %11
  %22 = icmp ne i8* %serv, null
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %21
  %24 = call i64 @strlen(i8* %serv) nounwind optsize
  %25 = icmp ugt i64 %24, 32
  br i1 %25, label %313, label %26

; <label>:26                                      ; preds = %23, %21
  %27 = icmp ne i32 %12, 0
  %28 = icmp eq i32 %15, 0
  %or.cond = and i1 %27, %28
  br i1 %or.cond, label %29, label %32

; <label>:29                                      ; preds = %26
  %30 = icmp eq i32 %12, 2
  %31 = select i1 %30, i32 17, i32 6
  br label %32

; <label>:32                                      ; preds = %29, %26
  %proto.0 = phi i32 [ %31, %29 ], [ %15, %26 ]
  %33 = icmp eq i32 %proto.0, 0
  %or.cond5 = or i1 %27, %33
  br i1 %or.cond5, label %37, label %34

; <label>:34                                      ; preds = %32
  %35 = icmp eq i32 %proto.0, 17
  %36 = select i1 %35, i32 2, i32 1
  br label %37

; <label>:37                                      ; preds = %34, %32
  %type.0 = phi i32 [ %12, %32 ], [ %36, %34 ]
  br i1 %22, label %38, label %51

; <label>:38                                      ; preds = %37
  %39 = load i8* %serv, align 1, !tbaa !0
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %313, label %41

; <label>:41                                      ; preds = %38
  %42 = call i64 @strtoul(i8* %serv, i8** %z, i32 10) nounwind optsize
  %43 = load i8** %z, align 8, !tbaa !7
  %44 = load i8* %43, align 1, !tbaa !0
  %45 = icmp eq i8 %44, 0
  %46 = icmp ugt i64 %42, 65535
  %or.cond6 = and i1 %45, %46
  %47 = icmp eq i64 %42, 0
  %or.cond9 = or i1 %or.cond6, %47
  br i1 %or.cond9, label %313, label %48

; <label>:48                                      ; preds = %41
  %49 = trunc i64 %42 to i16
  %50 = call zeroext i16 @htons(i16 zeroext %49) nounwind optsize
  br label %51

; <label>:51                                      ; preds = %48, %37
  %port.0 = phi i16 [ %50, %48 ], [ 0, %37 ]
  br i1 %17, label %86, label %52

; <label>:52                                      ; preds = %51
  %53 = icmp eq i32 %14, 0
  %family.0 = select i1 %53, i32 2, i32 %14
  %54 = call i8* @calloc(i64 80, i64 5) nounwind optsize
  %55 = icmp eq i8* %54, null
  br i1 %55, label %313, label %56

; <label>:56                                      ; preds = %52
  %57 = bitcast i8* %54 to %struct.addrinfo.125*
  %58 = getelementptr inbounds i8* %54, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %proto.0, i32* %59, align 4, !tbaa !6
  %60 = getelementptr inbounds i8* %54, i64 8
  %61 = bitcast i8* %60 to i32*
  store i32 %type.0, i32* %61, align 4, !tbaa !6
  %62 = getelementptr inbounds i8* %54, i64 48
  %63 = bitcast i8* %62 to %struct.sockaddr.126*
  %64 = getelementptr inbounds i8* %54, i64 24
  %65 = bitcast i8* %64 to %struct.sockaddr.126**
  store %struct.sockaddr.126* %63, %struct.sockaddr.126** %65, align 8, !tbaa !7
  %66 = icmp eq i32 %family.0, 10
  %67 = select i1 %66, i32 28, i32 16
  %68 = getelementptr inbounds i8* %54, i64 16
  %69 = bitcast i8* %68 to i32*
  store i32 %67, i32* %69, align 4, !tbaa !6
  %70 = getelementptr inbounds i8* %54, i64 4
  %71 = bitcast i8* %70 to i32*
  store i32 %family.0, i32* %71, align 4, !tbaa !6
  %72 = trunc i32 %family.0 to i16
  %73 = bitcast i8* %62 to i16*
  store i16 %72, i16* %73, align 2, !tbaa !8
  %74 = getelementptr inbounds i8* %54, i64 50
  %75 = bitcast i8* %74 to i16*
  store i16 %port.0, i16* %75, align 2, !tbaa !8
  %76 = and i32 %13, 1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %85

; <label>:78                                      ; preds = %56
  %79 = icmp eq i32 %family.0, 2
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %78
  %81 = getelementptr inbounds i8* %54, i64 52
  store i8 127, i8* %81, align 1, !tbaa !0
  %82 = getelementptr inbounds i8* %54, i64 55
  store i8 1, i8* %82, align 1, !tbaa !0
  br label %85

; <label>:83                                      ; preds = %78
  %84 = getelementptr inbounds i8* %54, i64 71
  store i8 1, i8* %84, align 1, !tbaa !0
  br label %85

; <label>:85                                      ; preds = %83, %80, %56
  store %struct.addrinfo.125* %57, %struct.addrinfo.125** %res, align 8, !tbaa !7
  br label %313

; <label>:86                                      ; preds = %51
  %87 = load i8* %host, align 1, !tbaa !0
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %313, label %89

; <label>:89                                      ; preds = %86
  %90 = call i32 @__ipparse(i8* %16, i32 %14, i8* %host) nounwind optsize
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %118

; <label>:92                                      ; preds = %89
  %93 = call i8* @calloc(i64 80, i64 5) nounwind optsize
  %94 = icmp eq i8* %93, null
  br i1 %94, label %313, label %95

; <label>:95                                      ; preds = %92
  %96 = getelementptr inbounds %union.sa* %sa, i64 0, i32 0, i32 0
  %97 = load i16* %96, align 4, !tbaa !8
  %98 = zext i16 %97 to i32
  %99 = bitcast i8* %93 to %struct.addrinfo.125*
  %100 = getelementptr inbounds i8* %93, i64 12
  %101 = bitcast i8* %100 to i32*
  store i32 %proto.0, i32* %101, align 4, !tbaa !6
  %102 = getelementptr inbounds i8* %93, i64 8
  %103 = bitcast i8* %102 to i32*
  store i32 %type.0, i32* %103, align 4, !tbaa !6
  %104 = getelementptr inbounds i8* %93, i64 48
  %105 = bitcast i8* %104 to %struct.sockaddr.126*
  %106 = getelementptr inbounds i8* %93, i64 24
  %107 = bitcast i8* %106 to %struct.sockaddr.126**
  store %struct.sockaddr.126* %105, %struct.sockaddr.126** %107, align 8, !tbaa !7
  %108 = icmp eq i16 %97, 10
  %109 = select i1 %108, i32 28, i32 16
  %110 = getelementptr inbounds i8* %93, i64 16
  %111 = bitcast i8* %110 to i32*
  store i32 %109, i32* %111, align 4, !tbaa !6
  %112 = getelementptr inbounds i8* %93, i64 4
  %113 = bitcast i8* %112 to i32*
  store i32 %98, i32* %113, align 4, !tbaa !6
  %114 = getelementptr inbounds i8* %93, i64 32
  %115 = bitcast i8* %114 to i8**
  store i8* %host, i8** %115, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %16, i64 28, i32 4, i1 false)
  %116 = getelementptr inbounds i8* %93, i64 50
  %117 = bitcast i8* %116 to i16*
  store i16 %port.0, i16* %117, align 2, !tbaa !8
  store %struct.addrinfo.125* %99, %struct.addrinfo.125** %res, align 8, !tbaa !7
  br label %313

; <label>:118                                     ; preds = %89
  %119 = and i32 %13, 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %313

; <label>:121                                     ; preds = %118
  %122 = getelementptr inbounds [64 x i8]* %_buf, i64 0, i64 0
  %123 = call %struct.__FILE_s.37* @__fopen_rb_ca(i8* getelementptr inbounds ([11 x i8]* @.str193, i64 0, i64 0), %struct.__FILE_s.37* %_f, i8* %122, i64 64) nounwind optsize
  %124 = icmp eq %struct.__FILE_s.37* %123, null
  br i1 %124, label %.critedge8, label %.critedge7.preheader

.critedge7.preheader:                             ; preds = %121
  %125 = getelementptr inbounds [512 x i8]* %line, i64 0, i64 0
  %126 = getelementptr inbounds [512 x i8]* %line, i64 0, i64 1
  br label %.critedge7

.critedge7:                                       ; preds = %135, %.critedge7.preheader
  %127 = call i8* @fgets(i8* %125, i32 512, %struct.__FILE_s.37* %123) nounwind optsize
  %128 = icmp eq i8* %127, null
  br i1 %128, label %225, label %129

; <label>:129                                     ; preds = %.critedge7
  %130 = call i64 @strlen(i8* %host) nounwind optsize
  %131 = call i8* @strchr(i8* %125, i32 35) nounwind optsize
  %132 = icmp eq i8* %131, null
  br i1 %132, label %135, label %133

; <label>:133                                     ; preds = %129
  %134 = getelementptr inbounds i8* %131, i64 1
  store i8 10, i8* %131, align 1, !tbaa !0
  store i8 0, i8* %134, align 1, !tbaa !0
  br label %135

; <label>:135                                     ; preds = %.critedge1, %133, %129
  %p.0 = phi i8* [ %150, %.critedge1 ], [ %126, %129 ], [ %126, %133 ]
  %136 = call i8* @strstr(i8* %p.0, i8* %host) nounwind optsize
  %137 = icmp eq i8* %136, null
  br i1 %137, label %.critedge7, label %138

; <label>:138                                     ; preds = %135
  %139 = getelementptr inbounds i8* %136, i64 -1
  %140 = load i8* %139, align 1, !tbaa !0
  %141 = sext i8 %140 to i32
  %142 = call i32 @isspace(i32 %141) nounwind optsize
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %.critedge1, label %144

; <label>:144                                     ; preds = %138
  %145 = getelementptr inbounds i8* %136, i64 %130
  %146 = load i8* %145, align 1, !tbaa !0
  %147 = sext i8 %146 to i32
  %148 = call i32 @isspace(i32 %147) nounwind optsize
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %.critedge1, label %.critedge

.critedge1:                                       ; preds = %144, %138
  %150 = getelementptr inbounds i8* %136, i64 1
  br label %135

.critedge:                                        ; preds = %144
  %151 = call i32 bitcast (i32 (%struct.__FILE_s.54*)* @__fclose_ca to i32 (%struct.__FILE_s.37*)*)(%struct.__FILE_s.37* %123) nounwind optsize
  br label %152

; <label>:152                                     ; preds = %159, %.critedge
  %p.1 = phi i8* [ %125, %.critedge ], [ %160, %159 ]
  %153 = load i8* %p.1, align 1, !tbaa !0
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %.critedge2, label %155

; <label>:155                                     ; preds = %152
  %156 = sext i8 %153 to i32
  %157 = call i32 @isspace(i32 %156) nounwind optsize
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %.critedge2

; <label>:159                                     ; preds = %155
  %160 = getelementptr inbounds i8* %p.1, i64 1
  br label %152

.critedge2:                                       ; preds = %155, %152
  store i8 0, i8* %p.1, align 1, !tbaa !0
  %161 = call i32 @__ipparse(i8* %16, i32 %14, i8* %125) nounwind optsize
  %162 = icmp slt i32 %161, 0
  br i1 %162, label %313, label %163

; <label>:163                                     ; preds = %.critedge2
  %164 = call i8* @calloc(i64 80, i64 5) nounwind optsize
  %165 = icmp eq i8* %164, null
  br i1 %165, label %313, label %166

; <label>:166                                     ; preds = %163
  %167 = getelementptr inbounds %union.sa* %sa, i64 0, i32 0, i32 0
  %168 = load i16* %167, align 4, !tbaa !8
  %169 = zext i16 %168 to i32
  %170 = bitcast i8* %164 to %struct.addrinfo.125*
  %171 = getelementptr inbounds i8* %164, i64 12
  %172 = bitcast i8* %171 to i32*
  store i32 %proto.0, i32* %172, align 4, !tbaa !6
  %173 = getelementptr inbounds i8* %164, i64 8
  %174 = bitcast i8* %173 to i32*
  store i32 %type.0, i32* %174, align 4, !tbaa !6
  %175 = getelementptr inbounds i8* %164, i64 48
  %176 = bitcast i8* %175 to %struct.sockaddr.126*
  %177 = getelementptr inbounds i8* %164, i64 24
  %178 = bitcast i8* %177 to %struct.sockaddr.126**
  store %struct.sockaddr.126* %176, %struct.sockaddr.126** %178, align 8, !tbaa !7
  %179 = icmp eq i16 %168, 10
  %180 = select i1 %179, i32 28, i32 16
  %181 = getelementptr inbounds i8* %164, i64 16
  %182 = bitcast i8* %181 to i32*
  store i32 %180, i32* %182, align 4, !tbaa !6
  %183 = getelementptr inbounds i8* %164, i64 4
  %184 = bitcast i8* %183 to i32*
  store i32 %169, i32* %184, align 4, !tbaa !6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %175, i8* %16, i64 28, i32 4, i1 false)
  %185 = getelementptr inbounds i8* %164, i64 50
  %186 = bitcast i8* %185 to i16*
  store i16 %port.0, i16* %186, align 2, !tbaa !8
  br label %187

; <label>:187                                     ; preds = %190, %166
  %p.1.pn = phi i8* [ %p.1, %166 ], [ %p.2, %190 ]
  %p.2 = getelementptr inbounds i8* %p.1.pn, i64 1
  %188 = load i8* %p.2, align 1, !tbaa !0
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %.critedge3, label %190

; <label>:190                                     ; preds = %187
  %191 = sext i8 %188 to i32
  %192 = call i32 @isspace(i32 %191) nounwind optsize
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %.critedge3, label %187

.critedge3:                                       ; preds = %190, %187
  %194 = getelementptr inbounds i8* %164, i64 80
  %195 = getelementptr inbounds i8* %164, i64 32
  %196 = bitcast i8* %195 to i8**
  store i8* %194, i8** %196, align 8, !tbaa !7
  %197 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %194, i64 256, i8* getelementptr inbounds ([3 x i8]* @.str1194, i64 0, i64 0), i8* %p.2) nounwind optsize
  %198 = load i8** %196, align 8, !tbaa !7
  br label %199

; <label>:199                                     ; preds = %206, %.critedge3
  %p.3 = phi i8* [ %198, %.critedge3 ], [ %207, %206 ]
  %200 = load i8* %p.3, align 1, !tbaa !0
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %.critedge4, label %202

; <label>:202                                     ; preds = %199
  %203 = sext i8 %200 to i32
  %204 = call i32 @isspace(i32 %203) nounwind optsize
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %.critedge4

; <label>:206                                     ; preds = %202
  %207 = getelementptr inbounds i8* %p.3, i64 1
  br label %199

.critedge4:                                       ; preds = %202, %199
  store i8 0, i8* %p.3, align 1, !tbaa !0
  %208 = load i8** %196, align 8, !tbaa !7
  %209 = call i64 @strlen(i8* %208) nounwind optsize
  %210 = add i64 %209, -1
  %211 = icmp ugt i64 %210, 254
  br i1 %211, label %is_valid.exit.thread, label %212

; <label>:212                                     ; preds = %.critedge4
  %213 = call i64 @mbstowcs(i32* null, i8* %208, i64 0) nounwind optsize
  %214 = icmp ugt i64 %213, 255
  br i1 %214, label %is_valid.exit.thread, label %.preheader.i

.preheader.i:                                     ; preds = %.critedge.i, %212
  %s.0.i = phi i8* [ %221, %.critedge.i ], [ %208, %212 ]
  %215 = load i8* %s.0.i, align 1, !tbaa !0
  %216 = icmp slt i8 %215, 0
  %.off.i = add i8 %215, -45
  %switch.i = icmp ult i8 %.off.i, 2
  %or.cond.i = or i1 %216, %switch.i
  br i1 %or.cond.i, label %.critedge.i, label %217

; <label>:217                                     ; preds = %.preheader.i
  %218 = zext i8 %215 to i32
  %219 = call i32 @isalnum(i32 %218) nounwind optsize
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %is_valid.exit, label %.critedge.i

.critedge.i:                                      ; preds = %217, %.preheader.i
  %221 = getelementptr inbounds i8* %s.0.i, i64 1
  br label %.preheader.i

is_valid.exit:                                    ; preds = %217
  %222 = load i8* %s.0.i, align 1, !tbaa !0
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %224, label %is_valid.exit.thread

is_valid.exit.thread:                             ; preds = %is_valid.exit, %212, %.critedge4
  store i8* null, i8** %196, align 8, !tbaa !7
  br label %224

; <label>:224                                     ; preds = %is_valid.exit.thread, %is_valid.exit
  store %struct.addrinfo.125* %170, %struct.addrinfo.125** %res, align 8, !tbaa !7
  br label %313

; <label>:225                                     ; preds = %.critedge7
  %226 = call i32 bitcast (i32 (%struct.__FILE_s.54*)* @__fclose_ca to i32 (%struct.__FILE_s.37*)*)(%struct.__FILE_s.37* %123) nounwind optsize
  br label %.critedge8

.critedge8:                                       ; preds = %225, %121
  %227 = getelementptr inbounds [1024 x i8]* %reply, i64 0, i64 0
  %228 = call i8* @memset(i8* %227, i32 0, i64 1024) nounwind optsize
  %229 = call i32 @__dns_query(i8* %227, i8* %host, i32 %14, i32 0) nounwind optsize
  %230 = icmp slt i32 %229, 0
  br i1 %230, label %313, label %231

; <label>:231                                     ; preds = %.critedge8
  %232 = call i32 @__dns_count_addrs(i8* %227, i32 %229) nounwind optsize
  %233 = icmp slt i32 %232, 1
  br i1 %233, label %313, label %234

; <label>:234                                     ; preds = %231
  %235 = sext i32 %232 to i64
  %236 = add i64 %235, 4
  %237 = call i8* @calloc(i64 80, i64 %236) nounwind optsize
  %238 = bitcast i8* %237 to %struct.aibuf*
  %239 = icmp eq i8* %237, null
  br i1 %239, label %313, label %240

; <label>:240                                     ; preds = %234
  %241 = icmp eq i32 %14, 10
  br i1 %241, label %.thread, label %242

; <label>:242                                     ; preds = %240
  %243 = getelementptr inbounds i8* %237, i64 52
  %244 = call i32 @__dns_get_rr(i8* %243, i64 80, i64 4, i64 %235, i8* %227, i32 1, i32 0) nounwind optsize
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %242
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %242 ]
  %j.012 = phi i32 [ %246, %.lr.ph ], [ %244, %242 ]
  %246 = add nsw i32 %j.012, -1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %247 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv, i32 1, i32 0, i32 0
  store i16 2, i16* %247, align 2, !tbaa !8
  %248 = icmp eq i32 %246, 0
  br i1 %248, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %242
  %i.0.lcssa = phi i32 [ 0, %242 ], [ %244, %.lr.ph ]
  %249 = icmp eq i32 %14, 2
  br i1 %249, label %.loopexit26, label %.thread

.thread:                                          ; preds = %._crit_edge, %240
  %i.110 = phi i32 [ %i.0.lcssa, %._crit_edge ], [ 0, %240 ]
  %250 = sext i32 %i.110 to i64
  %251 = getelementptr inbounds %struct.aibuf* %238, i64 %250, i32 1, i32 0, i32 3
  %252 = bitcast %struct.in6_addr.128* %251 to i8*
  %253 = sub nsw i32 %232, %i.110
  %254 = sext i32 %253 to i64
  %255 = call i32 @__dns_get_rr(i8* %252, i64 80, i64 16, i64 %254, i8* %227, i32 28, i32 0) nounwind optsize
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %.loopexit26, label %.lr.ph29

.lr.ph29:                                         ; preds = %.lr.ph29, %.thread
  %indvars.iv39 = phi i64 [ %indvars.iv.next40, %.lr.ph29 ], [ %250, %.thread ]
  %j.128 = phi i32 [ %257, %.lr.ph29 ], [ %255, %.thread ]
  %257 = add nsw i32 %j.128, -1
  %indvars.iv.next40 = add i64 %indvars.iv39, 1
  %258 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv39, i32 1, i32 0, i32 0
  store i16 10, i16* %258, align 2, !tbaa !8
  %259 = icmp eq i32 %257, 0
  br i1 %259, label %..loopexit26_crit_edge, label %.lr.ph29

..loopexit26_crit_edge:                           ; preds = %.lr.ph29
  %260 = add i32 %255, %i.110
  br label %.loopexit26

.loopexit26:                                      ; preds = %..loopexit26_crit_edge, %.thread, %._crit_edge
  %i.3 = phi i32 [ %i.0.lcssa, %._crit_edge ], [ %260, %..loopexit26_crit_edge ], [ %i.110, %.thread ]
  %261 = icmp sgt i32 %229, 1
  br i1 %261, label %262, label %.loopexit

; <label>:262                                     ; preds = %.loopexit26
  %263 = sext i32 %i.3 to i64
  %264 = getelementptr inbounds %struct.aibuf* %238, i64 %263, i32 1, i32 0, i32 2
  %265 = bitcast i32* %264 to i8*
  %266 = sub nsw i32 %232, %i.3
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [1024 x i8]* %reply, i64 0, i64 512
  %269 = call i32 @__dns_get_rr(i8* %265, i64 80, i64 4, i64 %267, i8* %268, i32 1, i32 0) nounwind optsize
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %275, label %.lr.ph23

.lr.ph23:                                         ; preds = %.lr.ph23, %262
  %indvars.iv37 = phi i64 [ %indvars.iv.next38, %.lr.ph23 ], [ %263, %262 ]
  %j.221 = phi i32 [ %271, %.lr.ph23 ], [ %269, %262 ]
  %271 = add nsw i32 %j.221, -1
  %indvars.iv.next38 = add i64 %indvars.iv37, 1
  %272 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv37, i32 1, i32 0, i32 0
  store i16 2, i16* %272, align 2, !tbaa !8
  %273 = icmp eq i32 %271, 0
  br i1 %273, label %._crit_edge24, label %.lr.ph23

._crit_edge24:                                    ; preds = %.lr.ph23
  %274 = add i32 %269, %i.3
  br label %275

; <label>:275                                     ; preds = %._crit_edge24, %262
  %i.4.lcssa = phi i32 [ %274, %._crit_edge24 ], [ %i.3, %262 ]
  %276 = sext i32 %i.4.lcssa to i64
  %277 = getelementptr inbounds %struct.aibuf* %238, i64 %276, i32 1, i32 0, i32 3
  %278 = bitcast %struct.in6_addr.128* %277 to i8*
  %279 = sub nsw i32 %232, %i.4.lcssa
  %280 = sext i32 %279 to i64
  %281 = call i32 @__dns_get_rr(i8* %278, i64 80, i64 16, i64 %280, i8* %268, i32 28, i32 0) nounwind optsize
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %.loopexit, label %.lr.ph19

.lr.ph19:                                         ; preds = %.lr.ph19, %275
  %indvars.iv35 = phi i64 [ %indvars.iv.next36, %.lr.ph19 ], [ %276, %275 ]
  %j.317 = phi i32 [ %283, %.lr.ph19 ], [ %281, %275 ]
  %283 = add nsw i32 %j.317, -1
  %indvars.iv.next36 = add i64 %indvars.iv35, 1
  %284 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv35, i32 1, i32 0, i32 0
  store i16 10, i16* %284, align 2, !tbaa !8
  %285 = icmp eq i32 %283, 0
  br i1 %285, label %.loopexit, label %.lr.ph19

.loopexit:                                        ; preds = %.lr.ph19, %275, %.loopexit26
  %286 = getelementptr inbounds %struct.aibuf* %238, i64 %235
  %287 = bitcast %struct.aibuf* %286 to i8*
  %288 = call i32 @__dns_get_rr(i8* %287, i64 0, i64 256, i64 1, i8* %227, i32 5, i32 1) nounwind optsize
  %289 = icmp slt i32 %288, 0
  br i1 %289, label %290, label %.preheader

; <label>:290                                     ; preds = %.loopexit
  %291 = call i8* @strcpy(i8* %287, i8* %host) nounwind optsize
  br label %.preheader

.preheader:                                       ; preds = %290, %.loopexit
  %292 = icmp sgt i32 %232, 0
  br i1 %292, label %.lr.ph14, label %._crit_edge15

.lr.ph14:                                         ; preds = %.lr.ph14, %.preheader
  %indvars.iv33 = phi i64 [ %indvars.iv.next34, %.lr.ph14 ], [ 0, %.preheader ]
  %293 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 3
  store i32 %proto.0, i32* %293, align 4, !tbaa !6
  %294 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 2
  store i32 %type.0, i32* %294, align 4, !tbaa !6
  %295 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 1
  %296 = bitcast %union.sa* %295 to %struct.sockaddr.126*
  %297 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 5
  store %struct.sockaddr.126* %296, %struct.sockaddr.126** %297, align 8, !tbaa !7
  %298 = getelementptr inbounds %union.sa* %295, i64 0, i32 0, i32 0
  %299 = load i16* %298, align 2, !tbaa !8
  %300 = icmp eq i16 %299, 10
  %301 = select i1 %300, i32 28, i32 16
  %302 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 4
  store i32 %301, i32* %302, align 4, !tbaa !6
  %303 = zext i16 %299 to i32
  %304 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 1
  store i32 %303, i32* %304, align 4, !tbaa !6
  %305 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 1, i32 0, i32 1
  store i16 %port.0, i16* %305, align 2, !tbaa !8
  %indvars.iv.next34 = add i64 %indvars.iv33, 1
  %306 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv.next34, i32 0
  %307 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 7
  store %struct.addrinfo.125* %306, %struct.addrinfo.125** %307, align 8, !tbaa !7
  %308 = getelementptr inbounds %struct.aibuf* %238, i64 %indvars.iv33, i32 0, i32 6
  store i8* %287, i8** %308, align 8, !tbaa !7
  %lftr.wideiv = trunc i64 %indvars.iv.next34 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %232
  br i1 %exitcond, label %._crit_edge15, label %.lr.ph14

._crit_edge15:                                    ; preds = %.lr.ph14, %.preheader
  %309 = add nsw i32 %232, -1
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds %struct.aibuf* %238, i64 %310, i32 0, i32 7
  store %struct.addrinfo.125* null, %struct.addrinfo.125** %311, align 8, !tbaa !7
  %312 = bitcast i8* %237 to %struct.addrinfo.125*
  store %struct.addrinfo.125* %312, %struct.addrinfo.125** %res, align 8, !tbaa !7
  br label %313

; <label>:313                                     ; preds = %._crit_edge15, %234, %231, %.critedge8, %224, %163, %.critedge2, %118, %95, %92, %86, %85, %52, %41, %38, %23, %18
  %.0 = phi i32 [ 0, %95 ], [ 0, %224 ], [ 0, %._crit_edge15 ], [ 0, %85 ], [ -2, %18 ], [ -8, %23 ], [ -8, %38 ], [ -8, %41 ], [ -10, %52 ], [ -2, %86 ], [ -10, %92 ], [ -2, %118 ], [ -2, %.critedge2 ], [ -10, %163 ], [ %229, %.critedge8 ], [ -2, %231 ], [ -10, %234 ]
  ret i32 %.0
}

define i32 @getchar() nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.69** @stdin, align 8, !tbaa !7
  %2 = tail call i32 @fgetc(%struct.__FILE_s.69* %1) nounwind optsize
  ret i32 %2
}

define i32 @getchar_unlocked() nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.132** bitcast (%struct.__FILE_s.69** @stdin to %struct.__FILE_s.132**), align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__FILE_s.132* %1, i64 0, i32 1
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.__FILE_s.132* %1, i64 0, i32 2
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %7, label %11

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds i8* %3, i64 1
  store i8* %8, i8** %2, align 8, !tbaa !7
  %9 = load i8* %3, align 1, !tbaa !0
  %10 = zext i8 %9 to i32
  br label %13

; <label>:11                                      ; preds = %0
  %12 = tail call i32 bitcast (i32 (%struct.__FILE_s.69*)* @__uflow to i32 (%struct.__FILE_s.132*)*)(%struct.__FILE_s.132* %1) nounwind optsize
  br label %13

; <label>:13                                      ; preds = %11, %7
  %14 = phi i32 [ %10, %7 ], [ %12, %11 ]
  ret i32 %14
}

define i32 @getc_unlocked(%struct.__FILE_s.69* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 2
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = icmp ult i8* %2, %4
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds i8* %2, i64 1
  store i8* %7, i8** %1, align 8, !tbaa !7
  %8 = load i8* %2, align 1, !tbaa !0
  %9 = zext i8 %8 to i32
  br label %12

; <label>:10                                      ; preds = %0
  %11 = tail call i32 @__uflow(%struct.__FILE_s.69* %f) nounwind optsize
  br label %12

; <label>:12                                      ; preds = %10, %6
  %13 = phi i32 [ %9, %6 ], [ %11, %10 ]
  ret i32 %13
}

define i8* @get_current_dir_name() nounwind uwtable optsize {
  %a = alloca %struct.stat.104, align 8
  %b = alloca %struct.stat.104, align 8
  %buf = alloca [4096 x i8], align 16
  %1 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8]* @.str195, i64 0, i64 0)) nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %26, label %3

; <label>:3                                       ; preds = %0
  %4 = load i8* %1, align 1, !tbaa !0
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %26, label %6

; <label>:6                                       ; preds = %3
  %7 = call i32 @stat(i8* %1, %struct.stat.104* %a) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %26

; <label>:9                                       ; preds = %6
  %10 = call i32 @stat(i8* getelementptr inbounds ([2 x i8]* @.str1196, i64 0, i64 0), %struct.stat.104* %b) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %26

; <label>:12                                      ; preds = %9
  %13 = getelementptr inbounds %struct.stat.104* %a, i64 0, i32 0
  %14 = load i64* %13, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.stat.104* %b, i64 0, i32 0
  %16 = load i64* %15, align 8, !tbaa !5
  %17 = icmp eq i64 %14, %16
  br i1 %17, label %18, label %26

; <label>:18                                      ; preds = %12
  %19 = getelementptr inbounds %struct.stat.104* %a, i64 0, i32 1
  %20 = load i64* %19, align 8, !tbaa !9
  %21 = getelementptr inbounds %struct.stat.104* %b, i64 0, i32 1
  %22 = load i64* %21, align 8, !tbaa !9
  %23 = icmp eq i64 %20, %22
  br i1 %23, label %24, label %26

; <label>:24                                      ; preds = %18
  %25 = call i8* @strdup(i8* %1) nounwind optsize
  br label %32

; <label>:26                                      ; preds = %18, %12, %9, %6, %3, %0
  %27 = getelementptr inbounds [4096 x i8]* %buf, i64 0, i64 0
  %28 = call i8* @getcwd(i8* %27, i64 4096) nounwind optsize
  %29 = icmp eq i8* %28, null
  br i1 %29, label %32, label %30

; <label>:30                                      ; preds = %26
  %31 = call i8* @strdup(i8* %27) nounwind optsize
  br label %32

; <label>:32                                      ; preds = %30, %26, %24
  %.0 = phi i8* [ %31, %30 ], [ %25, %24 ], [ null, %26 ]
  ret i8* %.0
}

define i8* @getcwd(i8* %buf, i64 %size) nounwind uwtable optsize {
  %tmp = alloca [4096 x i8], align 16
  %1 = icmp eq i8* %buf, null
  %2 = getelementptr inbounds [4096 x i8]* %tmp, i64 0, i64 0
  %.02 = select i1 %1, i64 4096, i64 %size
  %.01 = select i1 %1, i8* %2, i8* %buf
  %3 = ptrtoint i8* %.01 to i64
  %4 = call i64 (i64, ...)* @__syscall(i64 183, i64 %3, i64 %.02, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %5 = call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = icmp slt i64 %5, 0
  br i1 %6, label %11, label %7

; <label>:7                                       ; preds = %0
  %8 = icmp eq i8* %.01, %2
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %7
  %10 = call i8* @strdup(i8* %.01) nounwind optsize
  br label %11

; <label>:11                                      ; preds = %9, %7, %0
  %.0 = phi i8* [ null, %0 ], [ %10, %9 ], [ %.01, %7 ]
  ret i8* %.0
}

define %struct.tm.136* @getdate(i8* %s) nounwind uwtable optsize {
  %fmt = alloca [100 x i8], align 16
  %cs = alloca i32, align 4
  %1 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8]* @.str199, i64 0, i64 0)) nounwind optsize
  %2 = call i32 @pthread_setcancelstate(i32 0, i32* %cs) nounwind optsize
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i32 1, i32* @getdate_err, align 4, !tbaa !6
  br label %.thread

; <label>:5                                       ; preds = %0
  %6 = call %struct.__FILE_s.61* @fopen(i8* %1, i8* getelementptr inbounds ([2 x i8]* @.str1200, i64 0, i64 0)) nounwind optsize
  %7 = icmp eq %struct.__FILE_s.61* %6, null
  br i1 %7, label %9, label %.preheader

.preheader:                                       ; preds = %5
  %8 = getelementptr inbounds [100 x i8]* %fmt, i64 0, i64 0
  br label %.backedge

; <label>:9                                       ; preds = %5
  %10 = call i32* @__errno_location() nounwind readnone optsize
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = icmp eq i32 %11, 12
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  store i32 6, i32* @getdate_err, align 4, !tbaa !6
  br label %.loopexit

; <label>:14                                      ; preds = %9
  store i32 2, i32* @getdate_err, align 4, !tbaa !6
  br label %.thread

.backedge:                                        ; preds = %20, %17, %.preheader
  %15 = call i8* bitcast (i8* (i8*, i32, %struct.__FILE_s.37*)* @fgets to i8* (i8*, i32, %struct.__FILE_s.61*)*)(i8* %8, i32 100, %struct.__FILE_s.61* %6) nounwind optsize
  %16 = icmp eq i8* %15, null
  br i1 %16, label %23, label %17

; <label>:17                                      ; preds = %.backedge
  %18 = call i8* @strptime(i8* %s, i8* %8, %struct.tm.136* @getdate.tmbuf) nounwind optsize
  %19 = icmp eq i8* %18, null
  br i1 %19, label %.backedge, label %20

; <label>:20                                      ; preds = %17
  %21 = load i8* %18, align 1, !tbaa !0
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %.loopexit, label %.backedge

; <label>:23                                      ; preds = %.backedge
  store i32 7, i32* @getdate_err, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %23, %20, %13
  %ret.0 = phi %struct.tm.136* [ null, %23 ], [ null, %13 ], [ @getdate.tmbuf, %20 ]
  br i1 %7, label %.thread, label %24

; <label>:24                                      ; preds = %.loopexit
  %25 = call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %6) nounwind optsize
  br label %.thread

.thread:                                          ; preds = %24, %.loopexit, %14, %4
  %ret.01 = phi %struct.tm.136* [ %ret.0, %.loopexit ], [ %ret.0, %24 ], [ null, %14 ], [ null, %4 ]
  %26 = load i32* %cs, align 4, !tbaa !6
  %27 = call i32 @pthread_setcancelstate(i32 %26, i32* null) nounwind optsize
  ret %struct.tm.136* %ret.01
}

define i64 @getdelim(i8** %s, i64* %n, i32 %delim, %struct.__FILE_s.138* %f) nounwind uwtable optsize {
  %1 = icmp eq i64* %n, null
  %2 = icmp eq i8** %s, null
  %or.cond = or i1 %1, %2
  br i1 %or.cond, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %4, align 4, !tbaa !6
  br label %87

; <label>:5                                       ; preds = %0
  %6 = load i8** %s, align 8, !tbaa !7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %.preheader

; <label>:8                                       ; preds = %5
  store i64 0, i64* %n, align 8, !tbaa !5
  br label %.preheader

.preheader:                                       ; preds = %8, %5
  %9 = getelementptr inbounds %struct.__FILE_s.138* %f, i64 0, i32 1
  %10 = getelementptr inbounds %struct.__FILE_s.138* %f, i64 0, i32 2
  br label %11

; <label>:11                                      ; preds = %75, %.preheader
  %i.0 = phi i64 [ %78, %75 ], [ 0, %.preheader ]
  %12 = load i8** %9, align 8, !tbaa !7
  %13 = load i8** %10, align 8, !tbaa !7
  %14 = ptrtoint i8* %13 to i64
  %15 = ptrtoint i8* %12 to i64
  %16 = sub i64 %14, %15
  %17 = tail call i8* @memchr(i8* %12, i32 %delim, i64 %16) nounwind optsize
  %18 = icmp ne i8* %17, null
  br i1 %18, label %19, label %25

; <label>:19                                      ; preds = %11
  %20 = load i8** %9, align 8, !tbaa !7
  %21 = ptrtoint i8* %17 to i64
  %22 = ptrtoint i8* %20 to i64
  %23 = add i64 %21, 1
  %24 = sub i64 %23, %22
  br label %31

; <label>:25                                      ; preds = %11
  %26 = load i8** %10, align 8, !tbaa !7
  %27 = load i8** %9, align 8, !tbaa !7
  %28 = ptrtoint i8* %26 to i64
  %29 = ptrtoint i8* %27 to i64
  %30 = sub i64 %28, %29
  br label %31

; <label>:31                                      ; preds = %25, %19
  %32 = phi i8* [ %20, %19 ], [ %27, %25 ]
  %33 = phi i64 [ %24, %19 ], [ %30, %25 ]
  %34 = add i64 %33, %i.0
  %35 = load i64* %n, align 8, !tbaa !5
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %._crit_edge, label %37

._crit_edge:                                      ; preds = %31
  %.pre5 = load i8** %s, align 8, !tbaa !7
  br label %52

; <label>:37                                      ; preds = %31
  %38 = sub i64 9223372036854775807, %i.0
  %39 = icmp ult i64 %33, %38
  br i1 %39, label %40, label %85

; <label>:40                                      ; preds = %37
  %41 = add i64 %34, 2
  %42 = icmp ult i64 %41, 4611686018427387903
  %43 = zext i1 %42 to i64
  %. = shl i64 %41, %43
  store i64 %., i64* %n, align 8
  %44 = load i8** %s, align 8, !tbaa !7
  %45 = tail call i8* @realloc(i8* %44, i64 %.) nounwind optsize
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %51

; <label>:47                                      ; preds = %40
  store i64 %41, i64* %n, align 8, !tbaa !5
  %48 = load i8** %s, align 8, !tbaa !7
  %49 = tail call i8* @realloc(i8* %48, i64 %41) nounwind optsize
  %50 = icmp eq i8* %49, null
  br i1 %50, label %85, label %51

; <label>:51                                      ; preds = %47, %40
  %tmp.0 = phi i8* [ %45, %40 ], [ %49, %47 ]
  store i8* %tmp.0, i8** %s, align 8, !tbaa !7
  %.pre = load i8** %9, align 8, !tbaa !7
  br label %52

; <label>:52                                      ; preds = %51, %._crit_edge
  %53 = phi i8* [ %.pre5, %._crit_edge ], [ %tmp.0, %51 ]
  %54 = phi i8* [ %32, %._crit_edge ], [ %.pre, %51 ]
  %55 = getelementptr inbounds i8* %53, i64 %i.0
  %56 = tail call i8* @memcpy(i8* %55, i8* %54, i64 %33) nounwind optsize
  %57 = load i8** %9, align 8, !tbaa !7
  %58 = getelementptr inbounds i8* %57, i64 %33
  store i8* %58, i8** %9, align 8, !tbaa !7
  br i1 %18, label %.loopexit, label %59

; <label>:59                                      ; preds = %52
  %60 = load i8** %10, align 8, !tbaa !7
  %61 = icmp ult i8* %58, %60
  br i1 %61, label %.thread, label %65

.thread:                                          ; preds = %59
  %.sum = add i64 %33, 1
  %62 = getelementptr inbounds i8* %57, i64 %.sum
  store i8* %62, i8** %9, align 8, !tbaa !7
  %63 = load i8* %58, align 1, !tbaa !0
  %64 = zext i8 %63 to i32
  br label %75

; <label>:65                                      ; preds = %59
  %66 = tail call i32 bitcast (i32 (%struct.__FILE_s.69*)* @__uflow to i32 (%struct.__FILE_s.138*)*)(%struct.__FILE_s.138* %f) nounwind optsize
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %68, label %75

; <label>:68                                      ; preds = %65
  %69 = icmp eq i64 %34, 0
  br i1 %69, label %87, label %70

; <label>:70                                      ; preds = %68
  %71 = getelementptr inbounds %struct.__FILE_s.138* %f, i64 0, i32 0
  %72 = load i32* %71, align 4, !tbaa !6
  %73 = and i32 %72, 16
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %87, label %.loopexit

; <label>:75                                      ; preds = %65, %.thread
  %76 = phi i32 [ %64, %.thread ], [ %66, %65 ]
  %77 = trunc i32 %76 to i8
  %78 = add i64 %34, 1
  %79 = load i8** %s, align 8, !tbaa !7
  %80 = getelementptr inbounds i8* %79, i64 %34
  store i8 %77, i8* %80, align 1, !tbaa !0
  %81 = sext i8 %77 to i32
  %82 = icmp eq i32 %81, %delim
  br i1 %82, label %.loopexit, label %11

.loopexit:                                        ; preds = %75, %70, %52
  %i.1 = phi i64 [ %34, %70 ], [ %78, %75 ], [ %34, %52 ]
  %83 = load i8** %s, align 8, !tbaa !7
  %84 = getelementptr inbounds i8* %83, i64 %i.1
  store i8 0, i8* %84, align 1, !tbaa !0
  br label %87

; <label>:85                                      ; preds = %47, %37
  %86 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %86, align 4, !tbaa !6
  br label %87

; <label>:87                                      ; preds = %85, %.loopexit, %70, %68, %3
  %.0 = phi i64 [ -1, %85 ], [ %i.1, %.loopexit ], [ -1, %3 ], [ -1, %70 ], [ -1, %68 ]
  ret i64 %.0
}

define i32 @__getdents(i32 %fd, %struct.dirent.139* %buf, i64 %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.dirent.139* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 217, i64 %1, i64 %2, i64 %len, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @getdomainname(i8* nocapture %name, i64 %len) nounwind uwtable optsize {
  store i8 0, i8* %name, align 1, !tbaa !0
  ret i32 0
}

define i32 @getdtablesize() nounwind uwtable optsize {
  %rl = alloca %struct.rlimit, align 8
  %1 = call i32 @getrlimit(i32 7, %struct.rlimit* %rl) nounwind optsize
  %2 = getelementptr inbounds %struct.rlimit* %rl, i64 0, i32 1
  %3 = load i64* %2, align 8, !tbaa !9
  %4 = icmp ult i64 %3, 2147483647
  %phitmp = trunc i64 %3 to i32
  %5 = select i1 %4, i32 %phitmp, i32 2147483647
  ret i32 %5
}

define i32 @getegid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 202, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define i8* @getenv(i8* %name) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %name) nounwind optsize
  %2 = load i8*** @__environ, align 8, !tbaa !7
  %3 = icmp eq i8** %2, null
  br i1 %3, label %.critedge.thread, label %4

; <label>:4                                       ; preds = %0
  %5 = load i8* %name, align 1, !tbaa !0
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %.critedge.thread, label %7

; <label>:7                                       ; preds = %4
  %8 = tail call i8* @strchr(i8* %name, i32 61) nounwind optsize
  %9 = icmp eq i8* %8, null
  br i1 %9, label %.preheader, label %.critedge.thread

.preheader:                                       ; preds = %.critedge1, %7
  %indvars.iv = phi i64 [ %indvars.iv.next, %.critedge1 ], [ 0, %7 ]
  %10 = load i8*** @__environ, align 8, !tbaa !7
  %11 = getelementptr inbounds i8** %10, i64 %indvars.iv
  %12 = load i8** %11, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %.critedge.thread, label %14

; <label>:14                                      ; preds = %.preheader
  %15 = tail call i32 @strncmp(i8* %name, i8* %12, i64 %1) nounwind optsize
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %.critedge1

; <label>:17                                      ; preds = %14
  %18 = load i8*** @__environ, align 8, !tbaa !7
  %19 = getelementptr inbounds i8** %18, i64 %indvars.iv
  %20 = load i8** %19, align 8, !tbaa !7
  %21 = getelementptr inbounds i8* %20, i64 %1
  %22 = load i8* %21, align 1, !tbaa !0
  %23 = icmp eq i8 %22, 61
  br i1 %23, label %.critedge, label %.critedge1

.critedge1:                                       ; preds = %17, %14
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %.preheader

.critedge:                                        ; preds = %17
  %24 = icmp eq i8* %20, null
  br i1 %24, label %.critedge.thread, label %25

; <label>:25                                      ; preds = %.critedge
  %.sum = add i64 %1, 1
  %26 = getelementptr inbounds i8* %20, i64 %.sum
  br label %.critedge.thread

.critedge.thread:                                 ; preds = %25, %.critedge, %.preheader, %7, %4, %0
  %.0 = phi i8* [ %26, %25 ], [ null, %7 ], [ null, %4 ], [ null, %0 ], [ null, %.critedge ], [ null, %.preheader ]
  ret i8* %.0
}

define i32 @geteuid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 201, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define i32 @getgid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 200, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define %struct.group* @__getgrent_a(%struct.__FILE_s.140* %f, %struct.group* %gr, i8** %line, i64* %size, i8*** nocapture %mem, i64* nocapture %nmem) nounwind uwtable optsize {
  %cs = alloca i32, align 4
  %1 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %2 = getelementptr inbounds %struct.group* %gr, i64 0, i32 0
  %3 = getelementptr inbounds %struct.group* %gr, i64 0, i32 1
  %4 = getelementptr inbounds %struct.group* %gr, i64 0, i32 2
  br label %.backedge

.backedge:                                        ; preds = %21, %17, %9, %0
  %5 = call i64 @getline(i8** %line, i64* %size, %struct.__FILE_s.140* %f) nounwind optsize
  %6 = icmp slt i64 %5, 0
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %.backedge
  %8 = load i8** %line, align 8, !tbaa !7
  call void @free(i8* %8) optsize
  store i8* null, i8** %line, align 8, !tbaa !7
  br label %70

; <label>:9                                       ; preds = %.backedge
  %10 = add nsw i64 %5, -1
  %11 = load i8** %line, align 8, !tbaa !7
  %12 = getelementptr inbounds i8* %11, i64 %10
  store i8 0, i8* %12, align 1, !tbaa !0
  %13 = load i8** %line, align 8, !tbaa !7
  %14 = getelementptr inbounds i8* %13, i64 1
  store i8* %13, i8** %2, align 8, !tbaa !7
  %15 = call i8* @strchr(i8* %14, i32 58) nounwind optsize
  %16 = icmp eq i8* %15, null
  br i1 %16, label %.backedge, label %17

; <label>:17                                      ; preds = %9
  %18 = getelementptr inbounds i8* %15, i64 1
  store i8 0, i8* %15, align 1, !tbaa !0
  store i8* %18, i8** %3, align 8, !tbaa !7
  %19 = call i8* @strchr(i8* %18, i32 58) nounwind optsize
  %20 = icmp eq i8* %19, null
  br i1 %20, label %.backedge, label %21

; <label>:21                                      ; preds = %17
  %22 = getelementptr inbounds i8* %19, i64 1
  store i8 0, i8* %19, align 1, !tbaa !0
  %23 = call i32 @atoi(i8* %22) nounwind optsize
  store i32 %23, i32* %4, align 4, !tbaa !6
  %24 = call i8* @strchr(i8* %22, i32 58) nounwind optsize
  %25 = icmp eq i8* %24, null
  br i1 %25, label %.backedge, label %26

; <label>:26                                      ; preds = %21
  %27 = getelementptr inbounds i8* %24, i64 1
  store i8 0, i8* %24, align 1, !tbaa !0
  %28 = load i8* %27, align 1, !tbaa !0
  %29 = icmp ne i8 %28, 0
  %30 = zext i1 %29 to i64
  store i64 %30, i64* %nmem, align 8, !tbaa !5
  br label %31

; <label>:31                                      ; preds = %36, %26
  %32 = phi i64 [ %30, %26 ], [ %37, %36 ]
  %s.0 = phi i8* [ %27, %26 ], [ %38, %36 ]
  %33 = load i8* %s.0, align 1, !tbaa !0
  switch i8 %33, label %36 [
    i8 0, label %39
    i8 44, label %34
  ]

; <label>:34                                      ; preds = %31
  %35 = add i64 %32, 1
  store i64 %35, i64* %nmem, align 8, !tbaa !5
  br label %36

; <label>:36                                      ; preds = %34, %31
  %37 = phi i64 [ %32, %31 ], [ %35, %34 ]
  %38 = getelementptr inbounds i8* %s.0, i64 1
  br label %31

; <label>:39                                      ; preds = %31
  %40 = load i8*** %mem, align 8, !tbaa !7
  %41 = bitcast i8** %40 to i8*
  call void @free(i8* %41) optsize
  %42 = load i64* %nmem, align 8, !tbaa !5
  %43 = add i64 %42, 1
  %44 = call i8* @calloc(i64 8, i64 %43) nounwind optsize
  %45 = bitcast i8* %44 to i8**
  store i8** %45, i8*** %mem, align 8, !tbaa !7
  %46 = icmp eq i8* %44, null
  br i1 %46, label %47, label %49

; <label>:47                                      ; preds = %39
  %48 = load i8** %line, align 8, !tbaa !7
  call void @free(i8* %48) optsize
  store i8* null, i8** %line, align 8, !tbaa !7
  br label %73

; <label>:49                                      ; preds = %39
  %50 = load i8* %27, align 1, !tbaa !0
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %66, label %52

; <label>:52                                      ; preds = %49
  store i8* %27, i8** %45, align 8, !tbaa !7
  br label %53

; <label>:53                                      ; preds = %60, %52
  %s.1 = phi i8* [ %27, %52 ], [ %61, %60 ]
  %i.0 = phi i64 [ 0, %52 ], [ %i.1, %60 ]
  %54 = load i8* %s.1, align 1, !tbaa !0
  switch i8 %54, label %60 [
    i8 0, label %62
    i8 44, label %55
  ]

; <label>:55                                      ; preds = %53
  %56 = getelementptr inbounds i8* %s.1, i64 1
  store i8 0, i8* %s.1, align 1, !tbaa !0
  %57 = add i64 %i.0, 1
  %58 = load i8*** %mem, align 8, !tbaa !7
  %59 = getelementptr inbounds i8** %58, i64 %57
  store i8* %56, i8** %59, align 8, !tbaa !7
  br label %60

; <label>:60                                      ; preds = %55, %53
  %s.2 = phi i8* [ %56, %55 ], [ %s.1, %53 ]
  %i.1 = phi i64 [ %57, %55 ], [ %i.0, %53 ]
  %61 = getelementptr inbounds i8* %s.2, i64 1
  br label %53

; <label>:62                                      ; preds = %53
  %63 = add i64 %i.0, 1
  %64 = load i8*** %mem, align 8, !tbaa !7
  %65 = getelementptr inbounds i8** %64, i64 %63
  store i8* null, i8** %65, align 8, !tbaa !7
  br label %67

; <label>:66                                      ; preds = %49
  store i8* null, i8** %45, align 8, !tbaa !7
  br label %67

; <label>:67                                      ; preds = %66, %62
  %68 = load i8*** %mem, align 8, !tbaa !7
  %69 = getelementptr inbounds %struct.group* %gr, i64 0, i32 3
  store i8** %68, i8*** %69, align 8, !tbaa !7
  br label %70

; <label>:70                                      ; preds = %67, %7
  %.01 = phi %struct.group* [ null, %7 ], [ %gr, %67 ]
  %71 = load i32* %cs, align 4, !tbaa !6
  %72 = call i32 @pthread_setcancelstate(i32 %71, i32* null) nounwind optsize
  br label %73

; <label>:73                                      ; preds = %70, %47
  %.0 = phi %struct.group* [ %.01, %70 ], [ null, %47 ]
  ret %struct.group* %.0
}

define void @setgrent() nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.52** @f, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @fclose(%struct.__FILE_s.52* %1) nounwind optsize
  br label %5

; <label>:5                                       ; preds = %3, %0
  store %struct.__FILE_s.52* null, %struct.__FILE_s.52** @f, align 8, !tbaa !7
  ret void
}

define %struct.group.142* @getgrent() nounwind uwtable optsize {
  %size = alloca i64, align 8
  %nmem = alloca i64, align 8
  store i64 0, i64* %size, align 8, !tbaa !5
  store i64 0, i64* %nmem, align 8, !tbaa !5
  %1 = load %struct.__FILE_s.52** @f, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %3, label %.thread

; <label>:3                                       ; preds = %0
  %4 = call %struct.__FILE_s.52* bitcast (%struct.__FILE_s.61* (i8*, i8*)* @fopen to %struct.__FILE_s.52* (i8*, i8*)*)(i8* getelementptr inbounds ([11 x i8]* @.str205, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str1206, i64 0, i64 0)) nounwind optsize
  store %struct.__FILE_s.52* %4, %struct.__FILE_s.52** @f, align 8, !tbaa !7
  %5 = icmp eq %struct.__FILE_s.52* %4, null
  br i1 %5, label %8, label %.thread

.thread:                                          ; preds = %3, %0
  %6 = phi %struct.__FILE_s.52* [ %4, %3 ], [ %1, %0 ]
  %7 = call %struct.group.142* bitcast (%struct.group* (%struct.__FILE_s.140*, %struct.group*, i8**, i64*, i8***, i64*)* @__getgrent_a to %struct.group.142* (%struct.__FILE_s.52*, %struct.group.142*, i8**, i64*, i8***, i64*)*)(%struct.__FILE_s.52* %6, %struct.group.142* @getgrent.gr, i8** @getgrent.line, i64* %size, i8*** @getgrent.mem, i64* %nmem) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %.thread, %3
  %.0 = phi %struct.group.142* [ %7, %.thread ], [ null, %3 ]
  ret %struct.group.142* %.0
}

define %struct.group.142* @getgrgid(i32 %gid) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.52** @f, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %setgrent.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @fclose(%struct.__FILE_s.52* %1) nounwind optsize
  br label %setgrent.exit

setgrent.exit:                                    ; preds = %3, %0
  store %struct.__FILE_s.52* null, %struct.__FILE_s.52** @f, align 8, !tbaa !7
  br label %5

; <label>:5                                       ; preds = %8, %setgrent.exit
  %6 = tail call %struct.group.142* @getgrent() optsize
  %7 = icmp eq %struct.group.142* %6, null
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds %struct.group.142* %6, i64 0, i32 2
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = icmp eq i32 %10, %gid
  br i1 %11, label %.critedge, label %5

.critedge:                                        ; preds = %8, %5
  %12 = tail call i32* @__errno_location() nounwind readnone optsize
  %13 = load i32* %12, align 4, !tbaa !6
  tail call void @endgrent() nounwind optsize
  store i32 %13, i32* %12, align 4, !tbaa !6
  ret %struct.group.142* %6
}

define %struct.group.142* @getgrnam(i8* %name) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.52** @f, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %setgrent.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @fclose(%struct.__FILE_s.52* %1) nounwind optsize
  br label %setgrent.exit

setgrent.exit:                                    ; preds = %3, %0
  store %struct.__FILE_s.52* null, %struct.__FILE_s.52** @f, align 8, !tbaa !7
  br label %5

; <label>:5                                       ; preds = %8, %setgrent.exit
  %6 = tail call %struct.group.142* @getgrent() optsize
  %7 = icmp eq %struct.group.142* %6, null
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds %struct.group.142* %6, i64 0, i32 0
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = tail call i32 @strcmp(i8* %10, i8* %name) nounwind optsize
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %.critedge, label %5

.critedge:                                        ; preds = %8, %5
  %13 = tail call i32* @__errno_location() nounwind readnone optsize
  %14 = load i32* %13, align 4, !tbaa !6
  tail call void @endgrent() nounwind optsize
  store i32 %14, i32* %13, align 4, !tbaa !6
  ret %struct.group.142* %6
}

define i32 @getgrouplist(i8* %user, i32 %gid, i32* nocapture %groups, i32* nocapture %ngroups) nounwind uwtable optsize {
  %1 = load i32* %ngroups, align 4, !tbaa !6
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %31, label %3

; <label>:3                                       ; preds = %0
  store i32 %gid, i32* %groups, align 4, !tbaa !6
  store i32 1, i32* %ngroups, align 4, !tbaa !6
  tail call void @setgrent() nounwind optsize
  br label %.outer

.outer:                                           ; preds = %25, %3
  %groups.pn = phi i32* [ %groups, %3 ], [ %.02.ph, %25 ]
  %.02.ph = getelementptr inbounds i32* %groups.pn, i64 1
  br label %.backedge

.backedge:                                        ; preds = %21, %.critedge1, %10, %.outer
  %4 = tail call %struct.group.142* @getgrent() nounwind optsize
  %5 = icmp eq %struct.group.142* %4, null
  br i1 %5, label %.critedge, label %6

; <label>:6                                       ; preds = %.backedge
  %7 = load i32* %ngroups, align 4, !tbaa !6
  %8 = icmp eq i32 %7, 2147483647
  br i1 %8, label %.critedge, label %.preheader

.preheader:                                       ; preds = %6
  %9 = getelementptr inbounds %struct.group.142* %4, i64 0, i32 3
  br label %10

; <label>:10                                      ; preds = %18, %.preheader
  %i.0 = phi i64 [ %19, %18 ], [ 0, %.preheader ]
  %11 = load i8*** %9, align 8, !tbaa !7
  %12 = getelementptr inbounds i8** %11, i64 %i.0
  %13 = load i8** %12, align 8, !tbaa !7
  %14 = icmp eq i8* %13, null
  br i1 %14, label %.backedge, label %15

; <label>:15                                      ; preds = %10
  %16 = tail call i32 @strcmp(i8* %user, i8* %13) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %.critedge1, label %18

; <label>:18                                      ; preds = %15
  %19 = add i64 %i.0, 1
  br label %10

.critedge1:                                       ; preds = %15
  %.pre = load i8*** %9, align 8, !tbaa !7
  %.phi.trans.insert = getelementptr inbounds i8** %.pre, i64 %i.0
  %.pre6 = load i8** %.phi.trans.insert, align 8, !tbaa !7
  %20 = icmp eq i8* %.pre6, null
  br i1 %20, label %.backedge, label %21

; <label>:21                                      ; preds = %.critedge1
  %22 = load i32* %ngroups, align 4, !tbaa !6
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %ngroups, align 4, !tbaa !6
  %24 = icmp ugt i32 %23, %1
  br i1 %24, label %.backedge, label %25

; <label>:25                                      ; preds = %21
  %26 = getelementptr inbounds %struct.group.142* %4, i64 0, i32 2
  %27 = load i32* %26, align 4, !tbaa !6
  store i32 %27, i32* %.02.ph, align 4, !tbaa !6
  br label %.outer

.critedge:                                        ; preds = %6, %.backedge
  tail call void @endgrent() nounwind optsize
  %28 = load i32* %ngroups, align 4, !tbaa !6
  %29 = icmp ugt i32 %28, %1
  %30 = select i1 %29, i32 -1, i32 %28
  br label %31

; <label>:31                                      ; preds = %.critedge, %0
  %.0 = phi i32 [ -1, %0 ], [ %30, %.critedge ]
  ret i32 %.0
}

define i32 @getgroups(i32 %count, i32* %list) nounwind uwtable optsize {
  %1 = sext i32 %count to i64
  %2 = ptrtoint i32* %list to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 205, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @getgrnam_r(i8* %name, %struct.group.144* %gr, i8* %buf, i64 %size, %struct.group.144** nocapture %res) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @getgr_r(i8* %name, i32 0, %struct.group.144* %gr, i8* %buf, i64 %size, %struct.group.144** %res) optsize
  ret i32 %1
}

define internal fastcc i32 @getgr_r(i8* %name, i32 %gid, %struct.group.144* %gr, i8* %buf, i64 %size, %struct.group.144** nocapture %res) nounwind uwtable optsize {
  %line = alloca i8*, align 8
  %len = alloca i64, align 8
  %mem = alloca i8**, align 8
  %nmem = alloca i64, align 8
  %cs = alloca i32, align 4
  store i8* null, i8** %line, align 8, !tbaa !7
  store i64 0, i64* %len, align 8, !tbaa !5
  store i8** null, i8*** %mem, align 8, !tbaa !7
  store i64 0, i64* %nmem, align 8, !tbaa !5
  %1 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %2 = call %struct.__FILE_s.61* @fopen(i8* getelementptr inbounds ([11 x i8]* @.str207, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str1208, i64 0, i64 0)) nounwind optsize
  %3 = icmp eq %struct.__FILE_s.61* %2, null
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = call i32* @__errno_location() nounwind readnone optsize
  %6 = load i32* %5, align 4, !tbaa !6
  br label %70

; <label>:7                                       ; preds = %0
  store %struct.group.144* null, %struct.group.144** %res, align 8, !tbaa !7
  %8 = icmp eq i8* %name, null
  %9 = getelementptr inbounds %struct.group.144* %gr, i64 0, i32 2
  %10 = getelementptr inbounds %struct.group.144* %gr, i64 0, i32 0
  br label %.backedge

.backedge:                                        ; preds = %.critedge, %14, %7
  %11 = call %struct.group.144* bitcast (%struct.group* (%struct.__FILE_s.140*, %struct.group*, i8**, i64*, i8***, i64*)* @__getgrent_a to %struct.group.144* (%struct.__FILE_s.61*, %struct.group.144*, i8**, i64*, i8***, i64*)*)(%struct.__FILE_s.61* %2, %struct.group.144* %gr, i8** %line, i64* %len, i8*** %mem, i64* %nmem) nounwind optsize
  %12 = icmp eq %struct.group.144* %11, null
  br i1 %12, label %.loopexit, label %13

; <label>:13                                      ; preds = %.backedge
  br i1 %8, label %.critedge, label %14

; <label>:14                                      ; preds = %13
  %15 = load i8** %10, align 8, !tbaa !7
  %16 = call i32 @strcmp(i8* %name, i8* %15) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %.backedge

.critedge:                                        ; preds = %13
  %18 = load i32* %9, align 4, !tbaa !6
  %19 = icmp eq i32 %18, %gid
  br i1 %19, label %20, label %.backedge

; <label>:20                                      ; preds = %.critedge, %14
  %21 = load i64* %len, align 8, !tbaa !5
  %22 = load i64* %nmem, align 8, !tbaa !5
  %23 = shl i64 %22, 3
  %24 = add i64 %21, 32
  %25 = add i64 %24, %23
  %26 = icmp ugt i64 %25, %size
  br i1 %26, label %.loopexit, label %27

; <label>:27                                      ; preds = %20
  store %struct.group.144* %gr, %struct.group.144** %res, align 8, !tbaa !7
  %28 = ptrtoint i8* %buf to i64
  %29 = sub i64 0, %28
  %30 = and i64 %29, 15
  %31 = getelementptr inbounds i8* %buf, i64 %30
  %32 = bitcast i8* %31 to i8**
  %33 = getelementptr inbounds %struct.group.144* %gr, i64 0, i32 3
  store i8** %32, i8*** %33, align 8, !tbaa !7
  %.sum = add i64 %23, %30
  %34 = getelementptr inbounds i8* %buf, i64 %.sum
  %35 = load i8** %line, align 8, !tbaa !7
  %36 = call i8* @memcpy(i8* %34, i8* %35, i64 %21) nounwind optsize
  %37 = load i8** %10, align 8, !tbaa !7
  %38 = load i8** %line, align 8, !tbaa !7
  %39 = ptrtoint i8* %37 to i64
  %40 = ptrtoint i8* %38 to i64
  %41 = add i64 %39, %.sum
  %.sum1 = sub i64 %41, %40
  %42 = getelementptr inbounds i8* %buf, i64 %.sum1
  store i8* %42, i8** %10, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.group.144* %gr, i64 0, i32 1
  %44 = load i8** %43, align 8, !tbaa !7
  %45 = ptrtoint i8* %44 to i64
  %46 = add i64 %45, %.sum
  %.sum2 = sub i64 %46, %40
  %47 = getelementptr inbounds i8* %buf, i64 %.sum2
  store i8* %47, i8** %43, align 8, !tbaa !7
  %48 = load i8*** %mem, align 8, !tbaa !7
  %49 = load i8** %48, align 8, !tbaa !7
  %50 = icmp eq i8* %49, null
  br i1 %50, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %._crit_edge7, %27
  %51 = phi i8* [ %.pre, %._crit_edge7 ], [ %38, %27 ]
  %52 = phi i8* [ %62, %._crit_edge7 ], [ %49, %27 ]
  %i.06 = phi i64 [ %59, %._crit_edge7 ], [ 0, %27 ]
  %53 = ptrtoint i8* %52 to i64
  %54 = ptrtoint i8* %51 to i64
  %55 = add i64 %53, %.sum
  %.sum3 = sub i64 %55, %54
  %56 = getelementptr inbounds i8* %buf, i64 %.sum3
  %57 = load i8*** %33, align 8, !tbaa !7
  %58 = getelementptr inbounds i8** %57, i64 %i.06
  store i8* %56, i8** %58, align 8, !tbaa !7
  %59 = add i64 %i.06, 1
  %60 = load i8*** %mem, align 8, !tbaa !7
  %61 = getelementptr inbounds i8** %60, i64 %59
  %62 = load i8** %61, align 8, !tbaa !7
  %63 = icmp eq i8* %62, null
  br i1 %63, label %._crit_edge, label %._crit_edge7

._crit_edge7:                                     ; preds = %.lr.ph
  %.pre = load i8** %line, align 8, !tbaa !7
  br label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %27
  %i.0.lcssa = phi i64 [ 0, %27 ], [ %59, %.lr.ph ]
  %64 = load i8*** %33, align 8, !tbaa !7
  %65 = getelementptr inbounds i8** %64, i64 %i.0.lcssa
  store i8* null, i8** %65, align 8, !tbaa !7
  br label %.loopexit

.loopexit:                                        ; preds = %._crit_edge, %20, %.backedge
  %rv.0 = phi i32 [ 0, %._crit_edge ], [ 34, %20 ], [ 0, %.backedge ]
  %66 = load i8*** %mem, align 8, !tbaa !7
  %67 = bitcast i8** %66 to i8*
  call void @free(i8* %67) optsize
  %68 = load i8** %line, align 8, !tbaa !7
  call void @free(i8* %68) optsize
  %69 = call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %2) nounwind optsize
  br label %70

; <label>:70                                      ; preds = %.loopexit, %4
  %rv.1 = phi i32 [ %rv.0, %.loopexit ], [ %6, %4 ]
  %71 = load i32* %cs, align 4, !tbaa !6
  %72 = call i32 @pthread_setcancelstate(i32 %71, i32* null) nounwind optsize
  ret i32 %rv.1
}

define i32 @getgrgid_r(i32 %gid, %struct.group.144* %gr, i8* %buf, i64 %size, %struct.group.144** nocapture %res) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @getgr_r(i8* null, i32 %gid, %struct.group.144* %gr, i8* %buf, i64 %size, %struct.group.144** %res) optsize
  ret i32 %1
}

define %struct.hostent* @gethostbyaddr(i8* %a, i32 %l, i32 %af) nounwind uwtable optsize {
  %res = alloca %struct.hostent*, align 8
  %1 = call i32 @gethostbyaddr_r(i8* %a, i32 %l, i32 %af, %struct.hostent* @gethostbyaddr.h, i8* bitcast ([64 x i64]* @gethostbyaddr.buf to i8*), i64 512, %struct.hostent** %res, i32* @h_errno) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %gethostbyaddr.h. = select i1 %2, %struct.hostent* @gethostbyaddr.h, %struct.hostent* null
  ret %struct.hostent* %gethostbyaddr.h.
}

define i32 @gethostbyaddr_r(i8* %a, i32 %l, i32 %af, %struct.hostent* %h, i8* %buf, i64 %buflen, %struct.hostent** nocapture %res, i32* nocapture %err) nounwind uwtable optsize {
  %sa = alloca %union.anon.147, align 4
  %1 = bitcast %union.anon.147* %sa to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 28, i32 4, i1 false)
  %2 = getelementptr inbounds %union.anon.147* %sa, i64 0, i32 0, i32 0
  %3 = trunc i32 %af to i16
  store i16 %3, i16* %2, align 4, !tbaa !8
  %4 = icmp eq i32 %af, 10
  %5 = select i1 %4, i32 28, i32 16
  %6 = icmp eq i32 %l, 16
  %or.cond = and i1 %4, %6
  br i1 %or.cond, label %7, label %11

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %union.anon.147* %sa, i64 0, i32 0, i32 3
  %9 = bitcast %struct.in6_addr.149* %8 to i8*
  %10 = call i8* @memcpy(i8* %9, i8* %a, i64 16) nounwind optsize
  br label %19

; <label>:11                                      ; preds = %0
  %12 = icmp eq i32 %af, 2
  %13 = icmp eq i32 %l, 4
  %or.cond3 = and i1 %12, %13
  br i1 %or.cond3, label %14, label %18

; <label>:14                                      ; preds = %11
  %15 = getelementptr inbounds %union.anon.147* %sa, i64 0, i32 0, i32 2
  %16 = bitcast i32* %15 to i8*
  %17 = call i8* @memcpy(i8* %16, i8* %a, i64 4) nounwind optsize
  br label %19

; <label>:18                                      ; preds = %11
  store i32 3, i32* %err, align 4, !tbaa !6
  br label %62

; <label>:19                                      ; preds = %14, %7
  %20 = ptrtoint i8* %buf to i64
  %.tr = trunc i64 %20 to i32
  %21 = and i32 %.tr, 7
  %22 = icmp eq i32 %21, 0
  %23 = zext i32 %21 to i64
  %24 = select i1 %22, i64 8, i64 %23
  %25 = sub i64 40, %24
  %26 = zext i32 %l to i64
  %27 = add i64 %25, %26
  %28 = icmp ult i64 %27, %buflen
  br i1 %28, label %31, label %29

; <label>:29                                      ; preds = %19
  %30 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %30, align 4, !tbaa !6
  br label %62

; <label>:31                                      ; preds = %19
  %32 = sub i64 8, %24
  %33 = getelementptr inbounds i8* %buf, i64 %32
  %34 = sub i64 %buflen, %27
  %35 = bitcast i8* %33 to i8**
  %36 = getelementptr inbounds %struct.hostent* %h, i64 0, i32 4
  store i8** %35, i8*** %36, align 8, !tbaa !7
  %.sum = add i64 %32, 16
  %37 = getelementptr inbounds i8* %buf, i64 %.sum
  %38 = bitcast i8* %37 to i8**
  %39 = getelementptr inbounds %struct.hostent* %h, i64 0, i32 1
  store i8** %38, i8*** %39, align 8, !tbaa !7
  %.sum1 = add i64 %32, 32
  %40 = getelementptr inbounds i8* %buf, i64 %.sum1
  store i8* %40, i8** %35, align 8, !tbaa !7
  %41 = load i8*** %36, align 8, !tbaa !7
  %42 = load i8** %41, align 8, !tbaa !7
  %43 = call i8* @memcpy(i8* %42, i8* %a, i64 %26) nounwind optsize
  %.sum2 = add i64 %.sum1, %26
  %44 = getelementptr inbounds i8* %buf, i64 %.sum2
  %45 = load i8*** %36, align 8, !tbaa !7
  %46 = getelementptr inbounds i8** %45, i64 1
  store i8* null, i8** %46, align 8, !tbaa !7
  %47 = load i8*** %39, align 8, !tbaa !7
  store i8* %44, i8** %47, align 8, !tbaa !7
  %48 = load i8*** %39, align 8, !tbaa !7
  %49 = getelementptr inbounds i8** %48, i64 1
  store i8* null, i8** %49, align 8, !tbaa !7
  %50 = bitcast %union.anon.147* %sa to %struct.sockaddr.151*
  %51 = trunc i64 %34 to i32
  %52 = call i32 @getnameinfo(%struct.sockaddr.151* %50, i32 %5, i8* %44, i32 %51, i8* null, i32 0, i32 0) nounwind optsize
  switch i32 %52, label %56 [
    i32 -3, label %53
    i32 -12, label %54
    i32 0, label %57
  ]

; <label>:53                                      ; preds = %31
  store i32 2, i32* %err, align 4, !tbaa !6
  br label %62

; <label>:54                                      ; preds = %31
  %55 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %55, align 4, !tbaa !6
  br label %56

; <label>:56                                      ; preds = %54, %31
  store i32 3, i32* %err, align 4, !tbaa !6
  br label %62

; <label>:57                                      ; preds = %31
  %58 = getelementptr inbounds %struct.hostent* %h, i64 0, i32 2
  store i32 %af, i32* %58, align 4, !tbaa !6
  %59 = load i8*** %39, align 8, !tbaa !7
  %60 = load i8** %59, align 8, !tbaa !7
  %61 = getelementptr inbounds %struct.hostent* %h, i64 0, i32 0
  store i8* %60, i8** %61, align 8, !tbaa !7
  store %struct.hostent* %h, %struct.hostent** %res, align 8, !tbaa !7
  br label %62

; <label>:62                                      ; preds = %57, %56, %53, %29, %18
  %.0 = phi i32 [ -1, %29 ], [ -1, %56 ], [ 0, %57 ], [ -1, %53 ], [ -1, %18 ]
  ret i32 %.0
}

define %struct.hostent.152* @gethostbyname2(i8* %name, i32 %af) nounwind uwtable optsize {
  %res = alloca %struct.hostent.152*, align 8
  %1 = call i32 @gethostbyname2_r(i8* %name, i32 %af, %struct.hostent.152* @gethostbyname2.h, i8* bitcast ([64 x i64]* @gethostbyname2.buf to i8*), i64 512, %struct.hostent.152** %res, i32* @h_errno) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %gethostbyname2.h. = select i1 %2, %struct.hostent.152* @gethostbyname2.h, %struct.hostent.152* null
  ret %struct.hostent.152* %gethostbyname2.h.
}

define i32 @gethostbyname2_r(i8* %name, i32 %af, %struct.hostent.152* %h, i8* %buf, i64 %buflen, %struct.hostent.152** nocapture %res, i32* nocapture %err) nounwind uwtable optsize {
  %hint = alloca %struct.addrinfo.125, align 8
  %ai = alloca %struct.addrinfo.125*, align 8
  %1 = bitcast %struct.addrinfo.125* %hint to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 48, i32 8, i1 false)
  %2 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 0
  store i32 2, i32* %2, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 1
  %4 = icmp eq i32 %af, 10
  %5 = select i1 %4, i32 10, i32 2
  store i32 %5, i32* %3, align 4, !tbaa !6
  %6 = ptrtoint i8* %buf to i64
  %.tr = trunc i64 %6 to i32
  %7 = and i32 %.tr, 7
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %18, label %9

; <label>:9                                       ; preds = %0
  %10 = zext i32 %7 to i64
  %11 = sub i64 8, %10
  %12 = icmp ugt i64 %11, %buflen
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %9
  %14 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %14, align 4, !tbaa !6
  br label %99

; <label>:15                                      ; preds = %9
  %16 = getelementptr inbounds i8* %buf, i64 %11
  %17 = sub i64 %buflen, %11
  br label %18

; <label>:18                                      ; preds = %15, %0
  %.02 = phi i64 [ %17, %15 ], [ %buflen, %0 ]
  %.01 = phi i8* [ %16, %15 ], [ %buf, %0 ]
  %19 = call i32 @getaddrinfo(i8* %name, i8* null, %struct.addrinfo.125* %hint, %struct.addrinfo.125** %ai) nounwind optsize
  %20 = call i32 @getaddrinfo(i8* %name, i8* null, %struct.addrinfo.125* %hint, %struct.addrinfo.125** %ai) nounwind optsize
  switch i32 %20, label %23 [
    i32 -2, label %21
    i32 -3, label %22
    i32 0, label %24
  ]

; <label>:21                                      ; preds = %18
  store i32 1, i32* %err, align 4, !tbaa !6
  br label %99

; <label>:22                                      ; preds = %18
  store i32 2, i32* %err, align 4, !tbaa !6
  br label %99

; <label>:23                                      ; preds = %18
  store i32 3, i32* %err, align 4, !tbaa !6
  br label %99

; <label>:24                                      ; preds = %18
  %25 = getelementptr inbounds %struct.hostent.152* %h, i64 0, i32 2
  store i32 %5, i32* %25, align 4, !tbaa !6
  %26 = select i1 %4, i32 16, i32 4
  %27 = getelementptr inbounds %struct.hostent.152* %h, i64 0, i32 3
  store i32 %26, i32* %27, align 4, !tbaa !6
  %28 = load %struct.addrinfo.125** %ai, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.addrinfo.125* %28, i64 0, i32 6
  %30 = load i8** %29, align 8, !tbaa !7
  %31 = icmp eq i8* %30, null
  %name. = select i1 %31, i8* %name, i8* %30
  %32 = icmp eq %struct.addrinfo.125* %28, null
  br i1 %32, label %39, label %.lr.ph14

.lr.ph14:                                         ; preds = %24
  %33 = zext i32 %26 to i64
  br label %34

; <label>:34                                      ; preds = %34, %.lr.ph14
  %p.012 = phi %struct.addrinfo.125* [ %28, %.lr.ph14 ], [ %p.0, %34 ]
  %need.011 = phi i64 [ 32, %.lr.ph14 ], [ %36, %34 ]
  %i.010 = phi i32 [ 1, %.lr.ph14 ], [ %phitmp, %34 ]
  %35 = add i64 %need.011, 8
  %36 = add i64 %35, %33
  %37 = getelementptr inbounds %struct.addrinfo.125* %p.012, i64 0, i32 7
  %phitmp = add i32 %i.010, 1
  %p.0 = load %struct.addrinfo.125** %37, align 8
  %38 = icmp eq %struct.addrinfo.125* %p.0, null
  br i1 %38, label %._crit_edge15, label %34

._crit_edge15:                                    ; preds = %34
  %phitmp18 = add i64 %36, 2
  %phitmp19 = sext i32 %phitmp to i64
  %phitmp20 = shl nsw i64 %phitmp19, 3
  %phitmp21 = add i64 %phitmp20, 24
  br label %39

; <label>:39                                      ; preds = %._crit_edge15, %24
  %need.0.lcssa = phi i64 [ %phitmp18, %._crit_edge15 ], [ 34, %24 ]
  %i.0.lcssa = phi i64 [ %phitmp21, %._crit_edge15 ], [ 32, %24 ]
  %40 = call i64 @strlen(i8* %name) nounwind optsize
  %41 = call i64 @strlen(i8* %name.) nounwind optsize
  %42 = add i64 %need.0.lcssa, %40
  %43 = add i64 %42, %41
  %44 = icmp ugt i64 %43, %.02
  br i1 %44, label %45, label %48

; <label>:45                                      ; preds = %39
  %46 = load %struct.addrinfo.125** %ai, align 8, !tbaa !7
  call void bitcast (void (%struct.addrinfo*)* @freeaddrinfo to void (%struct.addrinfo.125*)*)(%struct.addrinfo.125* %46) nounwind optsize
  %47 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %47, align 4, !tbaa !6
  br label %99

; <label>:48                                      ; preds = %39
  %49 = bitcast i8* %.01 to i8**
  %50 = getelementptr inbounds %struct.hostent.152* %h, i64 0, i32 1
  store i8** %49, i8*** %50, align 8, !tbaa !7
  %51 = getelementptr inbounds i8* %.01, i64 24
  %52 = bitcast i8* %51 to i8**
  %53 = getelementptr inbounds %struct.hostent.152* %h, i64 0, i32 4
  store i8** %52, i8*** %53, align 8, !tbaa !7
  %54 = getelementptr inbounds i8* %.01, i64 %i.0.lcssa
  store i8* %54, i8** %49, align 8, !tbaa !7
  %55 = getelementptr inbounds %struct.hostent.152* %h, i64 0, i32 0
  store i8* %54, i8** %55, align 8, !tbaa !7
  %56 = call i8* @strcpy(i8* %54, i8* %name.) nounwind optsize
  %57 = load i8** %55, align 8, !tbaa !7
  %58 = call i64 @strlen(i8* %57) nounwind optsize
  %59 = add i64 %i.0.lcssa, 1
  %.sum3 = add i64 %59, %58
  %60 = getelementptr inbounds i8* %.01, i64 %.sum3
  %61 = load i8** %55, align 8, !tbaa !7
  %62 = call i32 @strcmp(i8* %61, i8* %name) nounwind optsize
  %63 = icmp eq i32 %62, 0
  %64 = load i8*** %50, align 8, !tbaa !7
  %65 = getelementptr inbounds i8** %64, i64 1
  br i1 %63, label %77, label %66

; <label>:66                                      ; preds = %48
  store i8* %60, i8** %65, align 8, !tbaa !7
  %67 = load i8*** %50, align 8, !tbaa !7
  %68 = getelementptr inbounds i8** %67, i64 1
  %69 = load i8** %68, align 8, !tbaa !7
  %70 = call i8* @strcpy(i8* %69, i8* %name) nounwind optsize
  %71 = load i8*** %50, align 8, !tbaa !7
  %72 = getelementptr inbounds i8** %71, i64 1
  %73 = load i8** %72, align 8, !tbaa !7
  %74 = call i64 @strlen(i8* %73) nounwind optsize
  %75 = add i64 %.sum3, 1
  %.sum4 = add i64 %75, %74
  %76 = getelementptr inbounds i8* %.01, i64 %.sum4
  br label %78

; <label>:77                                      ; preds = %48
  store i8* null, i8** %65, align 8, !tbaa !7
  br label %78

; <label>:78                                      ; preds = %77, %66
  %.1 = phi i8* [ %76, %66 ], [ %60, %77 ]
  %79 = load i8*** %50, align 8, !tbaa !7
  %80 = getelementptr inbounds i8** %79, i64 2
  store i8* null, i8** %80, align 8, !tbaa !7
  %p.15 = load %struct.addrinfo.125** %ai, align 8
  %81 = icmp eq %struct.addrinfo.125* %p.15, null
  %82 = load i8*** %53, align 8, !tbaa !7
  br i1 %81, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %78
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %78 ]
  %83 = phi i8** [ %97, %.lr.ph ], [ %82, %78 ]
  %p.18 = phi %struct.addrinfo.125* [ %p.1, %.lr.ph ], [ %p.15, %78 ]
  %.26 = phi i8* [ %86, %.lr.ph ], [ %.1, %78 ]
  store i8* %.26, i8** %83, align 8, !tbaa !7
  %84 = load i32* %27, align 4, !tbaa !6
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8* %.26, i64 %85
  %87 = load i8*** %53, align 8, !tbaa !7
  %88 = getelementptr inbounds i8** %87, i64 %indvars.iv
  %89 = load i8** %88, align 8, !tbaa !7
  %90 = getelementptr inbounds %struct.addrinfo.125* %p.18, i64 0, i32 5
  %91 = load %struct.sockaddr.126** %90, align 8, !tbaa !7
  %92 = getelementptr inbounds %struct.sockaddr.126* %91, i64 0, i32 1, i64 2
  %93 = call i8* @memcpy(i8* %89, i8* %92, i64 %85) nounwind optsize
  %indvars.iv.next = add i64 %indvars.iv, 1
  %94 = getelementptr inbounds %struct.addrinfo.125* %p.18, i64 0, i32 7
  %p.1 = load %struct.addrinfo.125** %94, align 8
  %95 = icmp eq %struct.addrinfo.125* %p.1, null
  %96 = load i8*** %53, align 8, !tbaa !7
  %97 = getelementptr inbounds i8** %96, i64 %indvars.iv.next
  br i1 %95, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %78
  %.lcssa = phi i8** [ %82, %78 ], [ %97, %.lr.ph ]
  store i8* null, i8** %.lcssa, align 8, !tbaa !7
  store %struct.hostent.152* %h, %struct.hostent.152** %res, align 8, !tbaa !7
  %98 = load %struct.addrinfo.125** %ai, align 8, !tbaa !7
  call void bitcast (void (%struct.addrinfo*)* @freeaddrinfo to void (%struct.addrinfo.125*)*)(%struct.addrinfo.125* %98) nounwind optsize
  br label %99

; <label>:99                                      ; preds = %._crit_edge, %45, %23, %22, %21, %13
  %.0 = phi i32 [ -1, %13 ], [ -1, %23 ], [ -1, %45 ], [ 0, %._crit_edge ], [ -1, %22 ], [ -1, %21 ]
  ret i32 %.0
}

define %struct.hostent.152* @gethostbyname(i8* %name) nounwind uwtable optsize {
  %1 = tail call %struct.hostent.152* @gethostbyname2(i8* %name, i32 2) nounwind optsize
  ret %struct.hostent.152* %1
}

define i32 @gethostbyname_r(i8* %name, %struct.hostent.152* %h, i8* %buf, i64 %buflen, %struct.hostent.152** %res, i32* %err) nounwind uwtable optsize {
  %1 = tail call i32 @gethostbyname2_r(i8* %name, i32 2, %struct.hostent.152* %h, i8* %buf, i64 %buflen, %struct.hostent.152** %res, i32* %err) nounwind optsize
  ret i32 %1
}

define i64 @gethostid() nounwind uwtable readnone optsize {
  ret i64 0
}

define i32 @gethostname(i8* nocapture %name, i64 %len) nounwind uwtable optsize {
  %uts = alloca %struct.utsname, align 1
  %1 = call i32 @uname(%struct.utsname* %uts) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %18

; <label>:3                                       ; preds = %0
  %4 = icmp ugt i64 %len, 65
  %.01 = select i1 %4, i64 65, i64 %len
  br label %5

; <label>:5                                       ; preds = %12, %3
  %i.0 = phi i64 [ %13, %12 ], [ 0, %3 ]
  %6 = icmp ult i64 %i.0, %.01
  br i1 %6, label %7, label %.critedge

; <label>:7                                       ; preds = %5
  %8 = getelementptr inbounds %struct.utsname* %uts, i64 0, i32 1, i64 %i.0
  %9 = load i8* %8, align 1, !tbaa !0
  %10 = getelementptr inbounds i8* %name, i64 %i.0
  store i8 %9, i8* %10, align 1, !tbaa !0
  %11 = icmp eq i8 %9, 0
  br i1 %11, label %.critedge, label %12

; <label>:12                                      ; preds = %7
  %13 = add i64 %i.0, 1
  br label %5

.critedge:                                        ; preds = %7, %5
  %14 = icmp eq i64 %i.0, %.01
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %.critedge
  %16 = add i64 %i.0, -1
  %17 = getelementptr inbounds i8* %name, i64 %16
  store i8 0, i8* %17, align 1, !tbaa !0
  br label %18

; <label>:18                                      ; preds = %15, %.critedge, %0
  %.0 = phi i32 [ -1, %0 ], [ 0, %15 ], [ 0, %.critedge ]
  ret i32 %.0
}

define i32 @getitimer(i32 %which, %struct.itimerval* %old) nounwind uwtable optsize {
  %1 = sext i32 %which to i64
  %2 = ptrtoint %struct.itimerval* %old to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 105, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i64 @getline(i8** %s, i64* %n, %struct.__FILE_s.140* %f) nounwind uwtable optsize {
  %1 = tail call i64 bitcast (i64 (i8**, i64*, i32, %struct.__FILE_s.138*)* @getdelim to i64 (i8**, i64*, i32, %struct.__FILE_s.140*)*)(i8** %s, i64* %n, i32 10, %struct.__FILE_s.140* %f) nounwind optsize
  ret i64 %1
}

define i8* @getlogin() nounwind uwtable optsize {
  %1 = tail call i8* @getenv(i8* getelementptr inbounds ([8 x i8]* @.str215, i64 0, i64 0)) nounwind optsize
  ret i8* %1
}

define i32 @getlogin_r(i8* %name, i64 %size) nounwind uwtable optsize {
  %1 = tail call i8* @getlogin() nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @strlen(i8* %name) nounwind optsize
  %5 = icmp ult i64 %4, %size
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %3
  %7 = tail call i8* @strcpy(i8* %name, i8* %1) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %6, %3, %0
  %.0 = phi i32 [ 0, %6 ], [ 6, %0 ], [ 34, %3 ]
  ret i32 %.0
}

define i32 @getnameinfo(%struct.sockaddr.151* %sa, i32 %sl, i8* %node, i32 %nodelen, i8* %serv, i32 %servlen, i32 %flags) nounwind uwtable optsize {
  %buf = alloca [256 x i8], align 16
  %reply = alloca [512 x i8], align 16
  %1 = getelementptr inbounds %struct.sockaddr.151* %sa, i64 0, i32 0
  %2 = load i16* %1, align 2, !tbaa !8
  %3 = zext i16 %2 to i32
  switch i32 %3, label %51 [
    i32 2, label %4
    i32 10, label %7
  ]

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.sockaddr.151* %sa, i64 0, i32 1, i64 2
  %6 = icmp eq i32 %sl, 16
  br i1 %6, label %10, label %51

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.sockaddr.151* %sa, i64 0, i32 1, i64 6
  %9 = icmp eq i32 %sl, 28
  br i1 %9, label %10, label %51

; <label>:10                                      ; preds = %7, %4
  %a.0 = phi i8* [ %8, %7 ], [ %5, %4 ]
  %11 = icmp eq i8* %node, null
  %12 = icmp eq i32 %nodelen, 0
  %or.cond = or i1 %11, %12
  br i1 %or.cond, label %37, label %13

; <label>:13                                      ; preds = %10
  %14 = and i32 %flags, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %24

; <label>:16                                      ; preds = %13
  %17 = getelementptr inbounds [512 x i8]* %reply, i64 0, i64 0
  %18 = call i32 @__dns_query(i8* %17, i8* %a.0, i32 %3, i32 1) nounwind optsize
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %24, label %20

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  %22 = call i32 @__dns_get_rr(i8* %21, i64 0, i64 256, i64 1, i8* %17, i32 12, i32 1) nounwind optsize
  %23 = icmp slt i32 %22, 1
  br i1 %23, label %24, label %30

; <label>:24                                      ; preds = %20, %16, %13
  %25 = and i32 %flags, 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %51

; <label>:27                                      ; preds = %24
  %28 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  %29 = call i8* @inet_ntop(i32 %3, i8* %a.0, i8* %28, i32 256) nounwind optsize
  br label %30

; <label>:30                                      ; preds = %27, %20
  %31 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  %32 = call i64 @strlen(i8* %31) nounwind optsize
  %33 = zext i32 %nodelen to i64
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %35, label %51

; <label>:35                                      ; preds = %30
  %36 = call i8* @strcpy(i8* %node, i8* %31) nounwind optsize
  br label %37

; <label>:37                                      ; preds = %35, %10
  %38 = icmp eq i8* %serv, null
  %39 = icmp eq i32 %servlen, 0
  %or.cond1 = or i1 %38, %39
  br i1 %or.cond1, label %51, label %40

; <label>:40                                      ; preds = %37
  %41 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  %42 = getelementptr inbounds %struct.sockaddr.151* %sa, i64 0, i32 1
  %43 = bitcast [14 x i8]* %42 to i16*
  %44 = load i16* %43, align 2, !tbaa !8
  %45 = call zeroext i16 @ntohs(i16 zeroext %44) nounwind optsize
  %46 = zext i16 %45 to i32
  %47 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %41, i64 256, i8* getelementptr inbounds ([3 x i8]* @.str216, i64 0, i64 0), i32 %46) nounwind optsize
  %48 = icmp ult i32 %47, %servlen
  br i1 %48, label %49, label %51

; <label>:49                                      ; preds = %40
  %50 = call i8* @strcpy(i8* %serv, i8* %41) nounwind optsize
  br label %51

; <label>:51                                      ; preds = %49, %40, %37, %30, %24, %7, %4, %0
  %.0 = phi i32 [ -6, %4 ], [ -6, %7 ], [ -6, %0 ], [ -2, %24 ], [ -12, %30 ], [ -12, %40 ], [ 0, %37 ], [ 0, %49 ]
  ret i32 %.0
}

define i32 @getopt_long(i32 %argc, i8** %argv, i8* %optstring, %struct.option* nocapture %longopts, i32* %idx) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @__getopt_long(i32 %argc, i8** %argv, i8* %optstring, %struct.option* %longopts, i32* %idx, i32 0) optsize
  ret i32 %1
}

define internal fastcc i32 @__getopt_long(i32 %argc, i8** %argv, i8* %optstring, %struct.option* nocapture %longopts, i32* %idx, i32 %longonly) nounwind uwtable optsize {
  %1 = load i32* @optind, align 4, !tbaa !6
  %2 = icmp slt i32 %1, %argc
  br i1 %2, label %3, label %71

; <label>:3                                       ; preds = %0
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i8** %argv, i64 %4
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %71, label %8

; <label>:8                                       ; preds = %3
  %9 = load i8* %6, align 1, !tbaa !0
  %10 = icmp eq i8 %9, 45
  br i1 %10, label %11, label %71

; <label>:11                                      ; preds = %8
  %12 = icmp eq i32 %longonly, 0
  %.phi.trans.insert = getelementptr inbounds i8* %6, i64 1
  %.pre = load i8* %.phi.trans.insert, align 1, !tbaa !0
  br i1 %12, label %15, label %13

; <label>:13                                      ; preds = %11
  %14 = icmp eq i8 %.pre, 0
  br i1 %14, label %.thread, label %..preheader4_crit_edge

..preheader4_crit_edge:                           ; preds = %13
  %.pre28 = getelementptr inbounds i8* %6, i64 2
  %phitmp = icmp eq i8 %.pre, 45
  br label %.preheader4

; <label>:15                                      ; preds = %11
  %16 = icmp eq i8 %.pre, 45
  br i1 %16, label %17, label %.thread

; <label>:17                                      ; preds = %15
  %18 = getelementptr inbounds i8* %6, i64 2
  %19 = load i8* %18, align 1, !tbaa !0
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %.thread, label %.preheader4

.preheader4:                                      ; preds = %17, %..preheader4_crit_edge
  %.pre-phi = phi i8* [ %.pre28, %..preheader4_crit_edge ], [ %18, %17 ]
  %21 = phi i1 [ %phitmp, %..preheader4_crit_edge ], [ true, %17 ]
  %22 = getelementptr inbounds i8* %6, i64 1
  br label %23

; <label>:23                                      ; preds = %.critedge, %.preheader4
  %indvars.iv = phi i64 [ 0, %.preheader4 ], [ %indvars.iv.next, %.critedge ]
  %i.0 = phi i32 [ 0, %.preheader4 ], [ %66, %.critedge ]
  %24 = getelementptr inbounds %struct.option* %longopts, i64 %indvars.iv, i32 0
  %25 = load i8** %24, align 8, !tbaa !7
  %26 = icmp eq i8* %25, null
  br i1 %26, label %67, label %27

; <label>:27                                      ; preds = %23
  br i1 %21, label %28, label %.preheader

; <label>:28                                      ; preds = %27
  br label %.preheader

.preheader:                                       ; preds = %34, %28, %27
  %name.0 = phi i8* [ %35, %34 ], [ %25, %28 ], [ %25, %27 ]
  %opt.0 = phi i8* [ %36, %34 ], [ %.pre-phi, %28 ], [ %22, %27 ]
  %29 = load i8* %name.0, align 1, !tbaa !0
  %30 = icmp eq i8 %29, 0
  %31 = load i8* %opt.0, align 1, !tbaa !0
  br i1 %30, label %.critedge.thread, label %32

; <label>:32                                      ; preds = %.preheader
  %33 = icmp eq i8 %29, %31
  br i1 %33, label %34, label %.critedge

; <label>:34                                      ; preds = %32
  %35 = getelementptr inbounds i8* %name.0, i64 1
  %36 = getelementptr inbounds i8* %opt.0, i64 1
  br label %.preheader

.critedge.thread:                                 ; preds = %.preheader
  switch i8 %31, label %.critedge [
    i8 0, label %37
    i8 61, label %37
  ]

; <label>:37                                      ; preds = %.critedge.thread, %.critedge.thread
  %38 = icmp eq i8 %31, 61
  %39 = getelementptr inbounds %struct.option* %longopts, i64 %indvars.iv, i32 1
  %40 = load i32* %39, align 4, !tbaa !6
  br i1 %38, label %41, label %45

; <label>:41                                      ; preds = %37
  %42 = icmp eq i32 %40, 0
  br i1 %42, label %.critedge, label %43

; <label>:43                                      ; preds = %41
  %44 = getelementptr inbounds i8* %opt.0, i64 1
  store i8* %44, i8** @optarg, align 8, !tbaa !7
  br label %54

; <label>:45                                      ; preds = %37
  %46 = icmp eq i32 %40, 1
  br i1 %46, label %47, label %53

; <label>:47                                      ; preds = %45
  %48 = add nsw i32 %1, 1
  store i32 %48, i32* @optind, align 4, !tbaa !6
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8** %argv, i64 %49
  %51 = load i8** %50, align 8, !tbaa !7
  store i8* %51, i8** @optarg, align 8, !tbaa !7
  %52 = icmp eq i8* %51, null
  br i1 %52, label %71, label %54

; <label>:53                                      ; preds = %45
  store i8* null, i8** @optarg, align 8, !tbaa !7
  br label %54

; <label>:54                                      ; preds = %53, %47, %43
  %55 = phi i32 [ %48, %47 ], [ %1, %53 ], [ %1, %43 ]
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* @optind, align 4, !tbaa !6
  %57 = icmp eq i32* %idx, null
  br i1 %57, label %59, label %58

; <label>:58                                      ; preds = %54
  store i32 %i.0, i32* %idx, align 4, !tbaa !6
  br label %59

; <label>:59                                      ; preds = %58, %54
  %60 = getelementptr inbounds %struct.option* %longopts, i64 %indvars.iv, i32 2
  %61 = load i32** %60, align 8, !tbaa !7
  %62 = icmp eq i32* %61, null
  %63 = getelementptr inbounds %struct.option* %longopts, i64 %indvars.iv, i32 3
  %64 = load i32* %63, align 4, !tbaa !6
  br i1 %62, label %71, label %65

; <label>:65                                      ; preds = %59
  store i32 %64, i32* %61, align 4, !tbaa !6
  br label %71

.critedge:                                        ; preds = %41, %.critedge.thread, %32
  %indvars.iv.next = add i64 %indvars.iv, 1
  %66 = add nsw i32 %i.0, 1
  br label %23

; <label>:67                                      ; preds = %23
  br i1 %21, label %68, label %.thread

; <label>:68                                      ; preds = %67
  %69 = add nsw i32 %1, 1
  store i32 %69, i32* @optind, align 4, !tbaa !6
  br label %71

.thread:                                          ; preds = %67, %17, %15, %13
  %70 = tail call i32 @getopt(i32 %argc, i8** %argv, i8* %optstring) nounwind optsize
  br label %71

; <label>:71                                      ; preds = %.thread, %68, %65, %59, %47, %8, %3, %0
  %.0 = phi i32 [ 0, %65 ], [ 63, %68 ], [ %70, %.thread ], [ -1, %8 ], [ -1, %3 ], [ -1, %0 ], [ 58, %47 ], [ %64, %59 ]
  ret i32 %.0
}

define i32 @getopt_long_only(i32 %argc, i8** %argv, i8* %optstring, %struct.option* nocapture %longopts, i32* %idx) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @__getopt_long(i32 %argc, i8** %argv, i8* %optstring, %struct.option* %longopts, i32* %idx, i32 1) optsize
  ret i32 %1
}

define i32 @getopt(i32 %argc, i8** nocapture %argv, i8* %optstring) nounwind uwtable optsize {
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %1 = load i32* @optind, align 4, !tbaa !6
  %2 = icmp slt i32 %1, %argc
  br i1 %2, label %3, label %101

; <label>:3                                       ; preds = %0
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i8** %argv, i64 %4
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %101, label %8

; <label>:8                                       ; preds = %3
  %9 = load i8* %6, align 1, !tbaa !0
  %10 = icmp eq i8 %9, 45
  br i1 %10, label %11, label %101

; <label>:11                                      ; preds = %8
  %12 = getelementptr inbounds i8* %6, i64 1
  %13 = load i8* %12, align 1, !tbaa !0
  switch i8 %13, label %20 [
    i8 0, label %101
    i8 45, label %14
  ]

; <label>:14                                      ; preds = %11
  %15 = getelementptr inbounds i8* %6, i64 2
  %16 = load i8* %15, align 1, !tbaa !0
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %14
  %19 = add nsw i32 %1, 1
  store i32 %19, i32* @optind, align 4, !tbaa !6
  br label %101

; <label>:20                                      ; preds = %14, %11
  %21 = load i32* @optpos, align 4, !tbaa !6
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %20
  store i32 1, i32* @optpos, align 4, !tbaa !6
  br label %24

; <label>:24                                      ; preds = %23, %20
  %25 = phi i32 [ %21, %20 ], [ 1, %23 ]
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8* %6, i64 %26
  %28 = call i32 @mbtowc(i32* %c, i8* %27, i64 4) nounwind optsize
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %._crit_edge

._crit_edge:                                      ; preds = %24
  %.pre = load i32* %c, align 4, !tbaa !6
  br label %31

; <label>:30                                      ; preds = %24
  store i32 65533, i32* %c, align 4, !tbaa !6
  br label %31

; <label>:31                                      ; preds = %30, %._crit_edge
  %32 = phi i32 [ 65533, %30 ], [ %.pre, %._crit_edge ]
  %k.0 = phi i32 [ 1, %30 ], [ %28, %._crit_edge ]
  %33 = load i32* @optind, align 4, !tbaa !6
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8** %argv, i64 %34
  %36 = load i8** %35, align 8, !tbaa !7
  %37 = load i32* @optpos, align 4, !tbaa !6
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8* %36, i64 %38
  store i32 %32, i32* @optopt, align 4, !tbaa !6
  %40 = add nsw i32 %37, %k.0
  store i32 %40, i32* @optpos, align 4, !tbaa !6
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8* %36, i64 %41
  %43 = load i8* %42, align 1, !tbaa !0
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %.preheader

; <label>:45                                      ; preds = %31
  %46 = add nsw i32 %33, 1
  store i32 %46, i32* @optind, align 4, !tbaa !6
  store i32 0, i32* @optpos, align 4, !tbaa !6
  br label %.preheader

.preheader:                                       ; preds = %52, %45, %31
  %i.0 = phi i32 [ %55, %52 ], [ 0, %31 ], [ 0, %45 ]
  %47 = sext i32 %i.0 to i64
  %48 = getelementptr inbounds i8* %optstring, i64 %47
  %49 = call i32 @mbtowc(i32* %d, i8* %48, i64 4) nounwind optsize
  %50 = icmp eq i32 %49, 0
  %.pre2 = load i32* %d, align 4, !tbaa !6
  %.pre3 = load i32* %c, align 4, !tbaa !6
  %51 = icmp eq i32 %.pre2, %.pre3
  %or.cond4 = or i1 %50, %51
  br i1 %or.cond4, label %.critedge, label %52

; <label>:52                                      ; preds = %.preheader
  %53 = icmp slt i32 %49, 1
  %54 = select i1 %53, i32 1, i32 %49
  %55 = add nsw i32 %54, %i.0
  br label %.preheader

.critedge:                                        ; preds = %.preheader
  %56 = icmp eq i32 %.pre2, %.pre3
  br i1 %56, label %70, label %57

; <label>:57                                      ; preds = %.critedge
  %58 = load i8* %optstring, align 1, !tbaa !0
  %59 = icmp ne i8 %58, 58
  %60 = load i32* @opterr, align 4, !tbaa !6
  %61 = icmp ne i32 %60, 0
  %or.cond = and i1 %59, %61
  br i1 %or.cond, label %62, label %101

; <label>:62                                      ; preds = %57
  %63 = load i8** %argv, align 8, !tbaa !7
  %64 = call i64 @strlen(i8* %63) nounwind optsize
  %65 = call i64 @write(i32 2, i8* %63, i64 %64) nounwind optsize
  %66 = call i64 @write(i32 2, i8* getelementptr inbounds ([19 x i8]* @.str221, i64 0, i64 0), i64 18) nounwind optsize
  %67 = sext i32 %k.0 to i64
  %68 = call i64 @write(i32 2, i8* %39, i64 %67) nounwind optsize
  %69 = call i64 @write(i32 2, i8* getelementptr inbounds ([2 x i8]* @.str1222, i64 0, i64 0), i64 1) nounwind optsize
  br label %101

; <label>:70                                      ; preds = %.critedge
  %71 = add nsw i32 %i.0, 1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8* %optstring, i64 %72
  %74 = load i8* %73, align 1, !tbaa !0
  %75 = icmp eq i8 %74, 58
  br i1 %75, label %76, label %101

; <label>:76                                      ; preds = %70
  %77 = load i32* @optind, align 4, !tbaa !6
  %78 = icmp slt i32 %77, %argc
  br i1 %78, label %93, label %79

; <label>:79                                      ; preds = %76
  %80 = load i8* %optstring, align 1, !tbaa !0
  %81 = icmp eq i8 %80, 58
  br i1 %81, label %101, label %82

; <label>:82                                      ; preds = %79
  %83 = load i32* @opterr, align 4, !tbaa !6
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %101, label %85

; <label>:85                                      ; preds = %82
  %86 = load i8** %argv, align 8, !tbaa !7
  %87 = call i64 @strlen(i8* %86) nounwind optsize
  %88 = call i64 @write(i32 2, i8* %86, i64 %87) nounwind optsize
  %89 = call i64 @write(i32 2, i8* getelementptr inbounds ([32 x i8]* @.str2223, i64 0, i64 0), i64 31) nounwind optsize
  %90 = sext i32 %k.0 to i64
  %91 = call i64 @write(i32 2, i8* %39, i64 %90) nounwind optsize
  %92 = call i64 @write(i32 2, i8* getelementptr inbounds ([2 x i8]* @.str1222, i64 0, i64 0), i64 1) nounwind optsize
  br label %101

; <label>:93                                      ; preds = %76
  %94 = add nsw i32 %77, 1
  store i32 %94, i32* @optind, align 4, !tbaa !6
  %95 = sext i32 %77 to i64
  %96 = getelementptr inbounds i8** %argv, i64 %95
  %97 = load i8** %96, align 8, !tbaa !7
  %98 = load i32* @optpos, align 4, !tbaa !6
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8* %97, i64 %99
  store i8* %100, i8** @optarg, align 8, !tbaa !7
  store i32 0, i32* @optpos, align 4, !tbaa !6
  br label %101

; <label>:101                                     ; preds = %93, %85, %82, %79, %70, %62, %57, %18, %11, %8, %3, %0
  %.0 = phi i32 [ -1, %18 ], [ -1, %11 ], [ -1, %8 ], [ -1, %3 ], [ -1, %0 ], [ 63, %62 ], [ 63, %57 ], [ 58, %79 ], [ 63, %82 ], [ 63, %85 ], [ %.pre3, %93 ], [ %.pre3, %70 ]
  ret i32 %.0
}

define i32 @getpagesize() nounwind uwtable readnone optsize {
  ret i32 4096
}

define i8* @getpass(i8* %prompt) nounwind uwtable optsize {
  %s = alloca %struct.termios.162, align 4
  %t = alloca %struct.termios.162, align 4
  %1 = call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([9 x i8]* @.str228, i64 0, i64 0), i32 256) nounwind optsize
  %2 = icmp slt i32 %1, 0
  %fd.0 = select i1 %2, i32 0, i32 %1
  %3 = call i32 @tcgetattr(i32 %fd.0, %struct.termios.162* %t) nounwind optsize
  %4 = bitcast %struct.termios.162* %s to i8*
  %5 = bitcast %struct.termios.162* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 60, i32 4, i1 false)
  %6 = getelementptr inbounds %struct.termios.162* %t, i64 0, i32 3
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = and i32 %7, -12
  %9 = or i32 %8, 2
  store i32 %9, i32* %6, align 4, !tbaa !6
  %10 = getelementptr inbounds %struct.termios.162* %t, i64 0, i32 0
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = and i32 %11, -449
  %13 = or i32 %12, 256
  store i32 %13, i32* %10, align 4, !tbaa !6
  %14 = call i32 @tcsetattr(i32 %fd.0, i32 2, %struct.termios.162* %t) nounwind optsize
  %15 = call i32 @tcdrain(i32 %fd.0) nounwind optsize
  %16 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  %17 = call i32 bitcast (i32 (i8*, %struct.__FILE_s.86*)* @fputs to i32 (i8*, %struct.__FILE_s*)*)(i8* %prompt, %struct.__FILE_s* %16) nounwind optsize
  %18 = call i32 bitcast (i32 (%struct.__FILE_s.67*)* @fflush to i32 (%struct.__FILE_s*)*)(%struct.__FILE_s* %16) nounwind optsize
  %19 = call i64 @read(i32 %fd.0, i8* getelementptr inbounds ([128 x i8]* @getpass.password, i64 0, i64 0), i64 128) nounwind optsize
  %20 = icmp sgt i64 %19, -1
  br i1 %20, label %21, label %30

; <label>:21                                      ; preds = %0
  %22 = icmp sgt i64 %19, 0
  br i1 %22, label %23, label %28

; <label>:23                                      ; preds = %21
  %24 = add nsw i64 %19, -1
  %25 = getelementptr inbounds [128 x i8]* @getpass.password, i64 0, i64 %24
  %26 = load i8* %25, align 1, !tbaa !0
  %27 = icmp eq i8 %26, 10
  %. = select i1 %27, i64 %24, i64 %19
  br label %28

; <label>:28                                      ; preds = %23, %21
  %l.0 = phi i64 [ %19, %21 ], [ %., %23 ]
  %29 = getelementptr inbounds [128 x i8]* @getpass.password, i64 0, i64 %l.0
  store i8 0, i8* %29, align 1, !tbaa !0
  br label %30

; <label>:30                                      ; preds = %28, %0
  %31 = call i32 @tcsetattr(i32 %fd.0, i32 2, %struct.termios.162* %s) nounwind optsize
  %32 = icmp sgt i32 %fd.0, 2
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %30
  %34 = call i32 @close(i32 %fd.0) nounwind optsize
  br label %35

; <label>:35                                      ; preds = %33, %30
  ret i8* getelementptr inbounds ([128 x i8]* @getpass.password, i64 0, i64 0)
}

define i32 @getpeername(i32 %fd, %struct.sockaddr.163* %addr, i32* %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.sockaddr.163* %addr to i64
  %3 = ptrtoint i32* %len to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 287, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @getpgid(i32 %pid) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 132, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @getpgrp() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 65, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define i32 @getpid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 20, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define i32 @getppid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 64, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define i32 @getpriority(i32 %which, i32 %who) nounwind uwtable optsize {
  %1 = sext i32 %which to i64
  %2 = sext i32 %who to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 96, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %5, 0
  %7 = sub nsw i32 20, %5
  %.0 = select i1 %6, i32 %5, i32 %7
  ret i32 %.0
}

define %struct.passwd.71* @__getpwent_a(%struct.__FILE_s.72* %f, %struct.passwd.71* %pw, i8** %line, i64* %size) nounwind uwtable optsize {
  %cs = alloca i32, align 4
  %1 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %2 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 0
  %3 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 1
  %4 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 2
  %5 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 3
  %6 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 4
  %7 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 5
  br label %.backedge

.backedge:                                        ; preds = %38, %34, %29, %24, %20, %12, %0
  %8 = call i64 bitcast (i64 (i8**, i64*, %struct.__FILE_s.140*)* @getline to i64 (i8**, i64*, %struct.__FILE_s.72*)*)(i8** %line, i64* %size, %struct.__FILE_s.72* %f) nounwind optsize
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %.backedge
  %11 = load i8** %line, align 8, !tbaa !7
  call void @free(i8* %11) optsize
  store i8* null, i8** %line, align 8, !tbaa !7
  br label %45

; <label>:12                                      ; preds = %.backedge
  %13 = add nsw i64 %8, -1
  %14 = load i8** %line, align 8, !tbaa !7
  %15 = getelementptr inbounds i8* %14, i64 %13
  store i8 0, i8* %15, align 1, !tbaa !0
  %16 = load i8** %line, align 8, !tbaa !7
  %17 = getelementptr inbounds i8* %16, i64 1
  store i8* %16, i8** %2, align 8, !tbaa !7
  %18 = call i8* @strchr(i8* %17, i32 58) nounwind optsize
  %19 = icmp eq i8* %18, null
  br i1 %19, label %.backedge, label %20

; <label>:20                                      ; preds = %12
  %21 = getelementptr inbounds i8* %18, i64 1
  store i8 0, i8* %18, align 1, !tbaa !0
  store i8* %21, i8** %3, align 8, !tbaa !7
  %22 = call i8* @strchr(i8* %21, i32 58) nounwind optsize
  %23 = icmp eq i8* %22, null
  br i1 %23, label %.backedge, label %24

; <label>:24                                      ; preds = %20
  %25 = getelementptr inbounds i8* %22, i64 1
  store i8 0, i8* %22, align 1, !tbaa !0
  %26 = call i32 @atoi(i8* %25) nounwind optsize
  store i32 %26, i32* %4, align 4, !tbaa !6
  %27 = call i8* @strchr(i8* %25, i32 58) nounwind optsize
  %28 = icmp eq i8* %27, null
  br i1 %28, label %.backedge, label %29

; <label>:29                                      ; preds = %24
  %30 = getelementptr inbounds i8* %27, i64 1
  store i8 0, i8* %27, align 1, !tbaa !0
  %31 = call i32 @atoi(i8* %30) nounwind optsize
  store i32 %31, i32* %5, align 4, !tbaa !6
  %32 = call i8* @strchr(i8* %30, i32 58) nounwind optsize
  %33 = icmp eq i8* %32, null
  br i1 %33, label %.backedge, label %34

; <label>:34                                      ; preds = %29
  %35 = getelementptr inbounds i8* %32, i64 1
  store i8 0, i8* %32, align 1, !tbaa !0
  store i8* %35, i8** %6, align 8, !tbaa !7
  %36 = call i8* @strchr(i8* %35, i32 58) nounwind optsize
  %37 = icmp eq i8* %36, null
  br i1 %37, label %.backedge, label %38

; <label>:38                                      ; preds = %34
  %39 = getelementptr inbounds i8* %36, i64 1
  store i8 0, i8* %36, align 1, !tbaa !0
  store i8* %39, i8** %7, align 8, !tbaa !7
  %40 = call i8* @strchr(i8* %39, i32 58) nounwind optsize
  %41 = icmp eq i8* %40, null
  br i1 %41, label %.backedge, label %42

; <label>:42                                      ; preds = %38
  %43 = getelementptr inbounds i8* %40, i64 1
  store i8 0, i8* %40, align 1, !tbaa !0
  %44 = getelementptr inbounds %struct.passwd.71* %pw, i64 0, i32 6
  store i8* %43, i8** %44, align 8, !tbaa !7
  br label %45

; <label>:45                                      ; preds = %42, %10
  %.0 = phi %struct.passwd.71* [ null, %10 ], [ %pw, %42 ]
  %46 = load i32* %cs, align 4, !tbaa !6
  %47 = call i32 @pthread_setcancelstate(i32 %46, i32* null) nounwind optsize
  ret %struct.passwd.71* %.0
}

define void @setpwent() nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @fclose(%struct.__FILE_s.52* %1) nounwind optsize
  br label %5

; <label>:5                                       ; preds = %3, %0
  store %struct.__FILE_s.52* null, %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  ret void
}

define %struct.passwd.167* @getpwent() nounwind uwtable optsize {
  %size = alloca i64, align 8
  store i64 0, i64* %size, align 8, !tbaa !5
  %1 = load %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %3, label %.thread

; <label>:3                                       ; preds = %0
  %4 = call %struct.__FILE_s.52* bitcast (%struct.__FILE_s.61* (i8*, i8*)* @fopen to %struct.__FILE_s.52* (i8*, i8*)*)(i8* getelementptr inbounds ([12 x i8]* @.str234, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str1235, i64 0, i64 0)) nounwind optsize
  store %struct.__FILE_s.52* %4, %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  %5 = icmp eq %struct.__FILE_s.52* %4, null
  br i1 %5, label %8, label %.thread

.thread:                                          ; preds = %3, %0
  %6 = phi %struct.__FILE_s.52* [ %4, %3 ], [ %1, %0 ]
  %7 = call %struct.passwd.167* bitcast (%struct.passwd.71* (%struct.__FILE_s.72*, %struct.passwd.71*, i8**, i64*)* @__getpwent_a to %struct.passwd.167* (%struct.__FILE_s.52*, %struct.passwd.167*, i8**, i64*)*)(%struct.__FILE_s.52* %6, %struct.passwd.167* @getpwent.pw, i8** @getpwent.line, i64* %size) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %.thread, %3
  %.0 = phi %struct.passwd.167* [ %7, %.thread ], [ null, %3 ]
  ret %struct.passwd.167* %.0
}

define %struct.passwd.167* @getpwuid(i32 %uid) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %setpwent.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @fclose(%struct.__FILE_s.52* %1) nounwind optsize
  br label %setpwent.exit

setpwent.exit:                                    ; preds = %3, %0
  store %struct.__FILE_s.52* null, %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  br label %5

; <label>:5                                       ; preds = %8, %setpwent.exit
  %6 = tail call %struct.passwd.167* @getpwent() optsize
  %7 = icmp eq %struct.passwd.167* %6, null
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds %struct.passwd.167* %6, i64 0, i32 2
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = icmp eq i32 %10, %uid
  br i1 %11, label %.critedge, label %5

.critedge:                                        ; preds = %8, %5
  %12 = tail call i32* @__errno_location() nounwind readnone optsize
  %13 = load i32* %12, align 4, !tbaa !6
  tail call void @endpwent() nounwind optsize
  store i32 %13, i32* %12, align 4, !tbaa !6
  ret %struct.passwd.167* %6
}

define %struct.passwd.167* @getpwnam(i8* %name) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  %2 = icmp eq %struct.__FILE_s.52* %1, null
  br i1 %2, label %setpwent.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @fclose(%struct.__FILE_s.52* %1) nounwind optsize
  br label %setpwent.exit

setpwent.exit:                                    ; preds = %3, %0
  store %struct.__FILE_s.52* null, %struct.__FILE_s.52** @f233, align 8, !tbaa !7
  br label %5

; <label>:5                                       ; preds = %8, %setpwent.exit
  %6 = tail call %struct.passwd.167* @getpwent() optsize
  %7 = icmp eq %struct.passwd.167* %6, null
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds %struct.passwd.167* %6, i64 0, i32 0
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = tail call i32 @strcmp(i8* %10, i8* %name) nounwind optsize
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %.critedge, label %5

.critedge:                                        ; preds = %8, %5
  %13 = tail call i32* @__errno_location() nounwind readnone optsize
  %14 = load i32* %13, align 4, !tbaa !6
  tail call void @endpwent() nounwind optsize
  store i32 %14, i32* %13, align 4, !tbaa !6
  ret %struct.passwd.167* %6
}

define i32 @getpwnam_r(i8* %name, %struct.passwd* %pw, i8* %buf, i64 %size, %struct.passwd** nocapture %res) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @getpw_r(i8* %name, i32 0, %struct.passwd* %pw, i8* %buf, i64 %size, %struct.passwd** %res) optsize
  ret i32 %1
}

define internal fastcc i32 @getpw_r(i8* %name, i32 %uid, %struct.passwd* %pw, i8* %buf, i64 %size, %struct.passwd** nocapture %res) nounwind uwtable optsize {
  %line = alloca i8*, align 8
  %len = alloca i64, align 8
  %cs = alloca i32, align 4
  store i8* null, i8** %line, align 8, !tbaa !7
  store i64 0, i64* %len, align 8, !tbaa !5
  %1 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %2 = call %struct.__FILE_s.61* @fopen(i8* getelementptr inbounds ([12 x i8]* @.str236, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str1237, i64 0, i64 0)) nounwind optsize
  %3 = icmp eq %struct.__FILE_s.61* %2, null
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = call i32* @__errno_location() nounwind readnone optsize
  %6 = load i32* %5, align 4, !tbaa !6
  br label %54

; <label>:7                                       ; preds = %0
  store %struct.passwd* null, %struct.passwd** %res, align 8, !tbaa !7
  %8 = icmp eq i8* %name, null
  %9 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 2
  %10 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 0
  br label %.backedge

.backedge:                                        ; preds = %.critedge, %14, %7
  %11 = call %struct.passwd* bitcast (%struct.passwd.71* (%struct.__FILE_s.72*, %struct.passwd.71*, i8**, i64*)* @__getpwent_a to %struct.passwd* (%struct.__FILE_s.61*, %struct.passwd*, i8**, i64*)*)(%struct.__FILE_s.61* %2, %struct.passwd* %pw, i8** %line, i64* %len) nounwind optsize
  %12 = icmp eq %struct.passwd* %11, null
  br i1 %12, label %._crit_edge, label %13

; <label>:13                                      ; preds = %.backedge
  br i1 %8, label %.critedge, label %14

; <label>:14                                      ; preds = %13
  %15 = load i8** %10, align 8, !tbaa !7
  %16 = call i32 @strcmp(i8* %name, i8* %15) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %.backedge

.critedge:                                        ; preds = %13
  %18 = load i32* %9, align 4, !tbaa !6
  %19 = icmp eq i32 %18, %uid
  br i1 %19, label %20, label %.backedge

; <label>:20                                      ; preds = %.critedge, %14
  %21 = load i64* %len, align 8, !tbaa !5
  %22 = icmp ugt i64 %21, %size
  br i1 %22, label %._crit_edge, label %23

; <label>:23                                      ; preds = %20
  store %struct.passwd* %pw, %struct.passwd** %res, align 8, !tbaa !7
  %24 = load i8** %line, align 8, !tbaa !7
  %25 = call i8* @memcpy(i8* %buf, i8* %24, i64 %21) nounwind optsize
  %26 = load i8** %10, align 8, !tbaa !7
  %27 = load i8** %line, align 8, !tbaa !7
  %28 = ptrtoint i8* %26 to i64
  %29 = ptrtoint i8* %27 to i64
  %30 = sub i64 %28, %29
  %31 = getelementptr inbounds i8* %buf, i64 %30
  store i8* %31, i8** %10, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 1
  %33 = load i8** %32, align 8, !tbaa !7
  %34 = ptrtoint i8* %33 to i64
  %35 = sub i64 %34, %29
  %36 = getelementptr inbounds i8* %buf, i64 %35
  store i8* %36, i8** %32, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 4
  %38 = load i8** %37, align 8, !tbaa !7
  %39 = ptrtoint i8* %38 to i64
  %40 = sub i64 %39, %29
  %41 = getelementptr inbounds i8* %buf, i64 %40
  store i8* %41, i8** %37, align 8, !tbaa !7
  %42 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 5
  %43 = load i8** %42, align 8, !tbaa !7
  %44 = ptrtoint i8* %43 to i64
  %45 = sub i64 %44, %29
  %46 = getelementptr inbounds i8* %buf, i64 %45
  store i8* %46, i8** %42, align 8, !tbaa !7
  %47 = getelementptr inbounds %struct.passwd* %pw, i64 0, i32 6
  %48 = load i8** %47, align 8, !tbaa !7
  %49 = ptrtoint i8* %48 to i64
  %50 = sub i64 %49, %29
  %51 = getelementptr inbounds i8* %buf, i64 %50
  store i8* %51, i8** %47, align 8, !tbaa !7
  br label %._crit_edge

._crit_edge:                                      ; preds = %23, %20, %.backedge
  %rv.0 = phi i32 [ 0, %23 ], [ 34, %20 ], [ 0, %.backedge ]
  %52 = load i8** %line, align 8, !tbaa !7
  call void @free(i8* %52) optsize
  %53 = call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %2) nounwind optsize
  br label %54

; <label>:54                                      ; preds = %._crit_edge, %4
  %rv.1 = phi i32 [ %rv.0, %._crit_edge ], [ %6, %4 ]
  %55 = load i32* %cs, align 4, !tbaa !6
  %56 = call i32 @pthread_setcancelstate(i32 %55, i32* null) nounwind optsize
  ret i32 %rv.1
}

define i32 @getpwuid_r(i32 %uid, %struct.passwd* %pw, i8* %buf, i64 %size, %struct.passwd** nocapture %res) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @getpw_r(i8* null, i32 %uid, %struct.passwd* %pw, i8* %buf, i64 %size, %struct.passwd** %res) optsize
  ret i32 %1
}

define i32 @getrlimit(i32 %resource, %struct.rlimit* %rlim) nounwind uwtable optsize {
  %k_rlim = alloca [2 x i64], align 16
  %1 = sext i32 %resource to i64
  %2 = ptrtoint %struct.rlimit* %rlim to i64
  %3 = call i64 (i64, ...)* @__syscall(i64 369, i64 0, i64 %1, i64 0, i64 %2, i32 0, i32 0) nounwind optsize
  %4 = call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %23, label %7

; <label>:7                                       ; preds = %0
  %8 = call i32* @__errno_location() nounwind readnone optsize
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = icmp eq i32 %9, 38
  br i1 %10, label %11, label %23

; <label>:11                                      ; preds = %7
  %12 = ptrtoint [2 x i64]* %k_rlim to i64
  %13 = call i64 (i64, ...)* @__syscall(i64 191, i64 %1, i64 %12, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %14 = call i64 @__syscall_ret(i64 %13) nounwind optsize
  %15 = icmp slt i64 %14, 0
  br i1 %15, label %23, label %16

; <label>:16                                      ; preds = %11
  %17 = getelementptr inbounds [2 x i64]* %k_rlim, i64 0, i64 0
  %18 = load i64* %17, align 16, !tbaa !5
  %19 = getelementptr inbounds %struct.rlimit* %rlim, i64 0, i32 0
  store i64 %18, i64* %19, align 8, !tbaa !9
  %20 = getelementptr inbounds [2 x i64]* %k_rlim, i64 0, i64 1
  %21 = load i64* %20, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.rlimit* %rlim, i64 0, i32 1
  store i64 %21, i64* %22, align 8, !tbaa !9
  br label %23

; <label>:23                                      ; preds = %16, %11, %7, %0
  %.0 = phi i32 [ 0, %16 ], [ %5, %7 ], [ 0, %0 ], [ -1, %11 ]
  ret i32 %.0
}

define i32 @getrusage(i32 %who, %struct.rusage* %ru) nounwind uwtable optsize {
  %1 = sext i32 %who to i64
  %2 = ptrtoint %struct.rusage* %ru to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 77, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define %struct.servent* @getservbyname(i8* %name, i8* %prots) nounwind uwtable optsize {
  %res = alloca %struct.servent*, align 8
  %1 = call i32 @getservbyname_r(i8* %name, i8* %prots, %struct.servent* @getservbyname.se, i8* bitcast ([4 x i64]* @getservbyname.buf to i8*), i64 32, %struct.servent** %res) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %getservbyname.se. = select i1 %2, %struct.servent* @getservbyname.se, %struct.servent* null
  ret %struct.servent* %getservbyname.se.
}

define i32 @getservbyname_r(i8* %name, i8* %prots, %struct.servent* %se, i8* %buf, i64 %buflen, %struct.servent** nocapture %res) nounwind uwtable optsize {
  %ai = alloca %struct.addrinfo.125*, align 8
  %hint = alloca %struct.addrinfo.125, align 8
  %1 = bitcast %struct.addrinfo.125* %hint to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 48, i32 8, i1 false)
  %2 = getelementptr %struct.addrinfo.125* %hint, i64 0, i32 1
  store i32 2, i32* %2, align 4
  %3 = ptrtoint i8* %buf to i64
  %.tr = trunc i64 %3 to i32
  %4 = and i32 %.tr, 7
  %5 = icmp eq i32 %4, 0
  %6 = zext i32 %4 to i64
  %7 = select i1 %5, i64 8, i64 %6
  %8 = sub i64 24, %7
  %9 = icmp ugt i64 %8, %buflen
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %0
  %11 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %11, align 4, !tbaa !6
  br label %42

; <label>:12                                      ; preds = %0
  %13 = sub i64 8, %7
  %14 = getelementptr inbounds i8* %buf, i64 %13
  %15 = call i32 @strcmp(i8* %prots, i8* getelementptr inbounds ([4 x i8]* @.str242, i64 0, i64 0)) nounwind optsize
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %12
  %18 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 3
  store i32 6, i32* %18, align 4, !tbaa !6
  br label %24

; <label>:19                                      ; preds = %12
  %20 = call i32 @strcmp(i8* %prots, i8* getelementptr inbounds ([4 x i8]* @.str1243, i64 0, i64 0)) nounwind optsize
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %42

; <label>:22                                      ; preds = %19
  %23 = getelementptr inbounds %struct.addrinfo.125* %hint, i64 0, i32 3
  store i32 17, i32* %23, align 4, !tbaa !6
  br label %24

; <label>:24                                      ; preds = %22, %17
  %25 = call i32 @getaddrinfo(i8* null, i8* %name, %struct.addrinfo.125* %hint, %struct.addrinfo.125** %ai) nounwind optsize
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %42, label %27

; <label>:27                                      ; preds = %24
  %28 = getelementptr inbounds %struct.servent* %se, i64 0, i32 0
  store i8* %name, i8** %28, align 8, !tbaa !7
  %29 = bitcast i8* %14 to i8**
  %30 = getelementptr inbounds %struct.servent* %se, i64 0, i32 1
  store i8** %29, i8*** %30, align 8, !tbaa !7
  store i8* %name, i8** %29, align 8, !tbaa !7
  %31 = load i8*** %30, align 8, !tbaa !7
  %32 = getelementptr inbounds i8** %31, i64 1
  store i8* null, i8** %32, align 8, !tbaa !7
  %33 = load %struct.addrinfo.125** %ai, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.addrinfo.125* %33, i64 0, i32 5
  %35 = load %struct.sockaddr.126** %34, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.sockaddr.126* %35, i64 0, i32 1
  %37 = bitcast [14 x i8]* %36 to i16*
  %38 = load i16* %37, align 2, !tbaa !8
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds %struct.servent* %se, i64 0, i32 2
  store i32 %39, i32* %40, align 4, !tbaa !6
  %41 = getelementptr inbounds %struct.servent* %se, i64 0, i32 3
  store i8* %prots, i8** %41, align 8, !tbaa !7
  call void bitcast (void (%struct.addrinfo*)* @freeaddrinfo to void (%struct.addrinfo.125*)*)(%struct.addrinfo.125* %33) nounwind optsize
  store %struct.servent* %se, %struct.servent** %res, align 8, !tbaa !7
  br label %42

; <label>:42                                      ; preds = %27, %24, %19, %10
  %.0 = phi i32 [ -1, %10 ], [ 0, %27 ], [ -1, %19 ], [ -1, %24 ]
  ret i32 %.0
}

define %struct.servent.175* @getservbyport(i32 %port, i8* %prots) nounwind uwtable optsize {
  %res = alloca %struct.servent.175*, align 8
  %1 = call i32 @getservbyport_r(i32 %port, i8* %prots, %struct.servent.175* @getservbyport.se, i8* bitcast ([4 x i64]* @getservbyport.buf to i8*), i64 32, %struct.servent.175** %res) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %getservbyport.se. = select i1 %2, %struct.servent.175* @getservbyport.se, %struct.servent.175* null
  ret %struct.servent.175* %getservbyport.se.
}

define i32 @getservbyport_r(i32 %port, i8* %prots, %struct.servent.175* %se, i8* %buf, i64 %buflen, %struct.servent.175** nocapture %res) nounwind uwtable optsize {
  %sin = alloca %struct.sockaddr_in.177, align 4
  %1 = getelementptr inbounds %struct.sockaddr_in.177* %sin, i64 0, i32 0
  store i16 2, i16* %1, align 4, !tbaa !8
  %2 = getelementptr inbounds %struct.sockaddr_in.177* %sin, i64 0, i32 1
  %3 = trunc i32 %port to i16
  store i16 %3, i16* %2, align 2, !tbaa !8
  %4 = getelementptr inbounds %struct.sockaddr_in.177* %sin, i64 0, i32 2, i32 0
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct.sockaddr_in.177* %sin, i64 0, i32 3, i64 0
  %6 = bitcast i8* %5 to i64*
  store i64 0, i64* %6, align 4
  %7 = ptrtoint i8* %buf to i64
  %.tr = trunc i64 %7 to i32
  %8 = and i32 %.tr, 7
  %9 = icmp eq i32 %8, 0
  %10 = zext i32 %8 to i64
  %11 = select i1 %9, i64 8, i64 %10
  %12 = sub i64 24, %11
  %13 = icmp ugt i64 %12, %buflen
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %0
  %15 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %15, align 4, !tbaa !6
  br label %44

; <label>:16                                      ; preds = %0
  %17 = sub i64 8, %11
  %18 = getelementptr inbounds i8* %buf, i64 %17
  %19 = call i32 @strcmp(i8* %prots, i8* getelementptr inbounds ([4 x i8]* @.str246, i64 0, i64 0)) nounwind optsize
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

; <label>:21                                      ; preds = %16
  %22 = call i32 @strcmp(i8* %prots, i8* getelementptr inbounds ([4 x i8]* @.str1247, i64 0, i64 0)) nounwind optsize
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %44

; <label>:24                                      ; preds = %21, %16
  %25 = getelementptr inbounds %struct.servent.175* %se, i64 0, i32 2
  store i32 %port, i32* %25, align 4, !tbaa !6
  %26 = getelementptr inbounds %struct.servent.175* %se, i64 0, i32 3
  store i8* %prots, i8** %26, align 8, !tbaa !7
  %27 = bitcast i8* %18 to i8**
  %28 = getelementptr inbounds %struct.servent.175* %se, i64 0, i32 1
  store i8** %27, i8*** %28, align 8, !tbaa !7
  %.sum = add i64 %17, 16
  %29 = getelementptr inbounds i8* %buf, i64 %.sum
  %30 = add i64 %buflen, 4294967280
  %31 = sub i64 %30, %17
  %.sum1 = add i64 %17, 8
  %32 = getelementptr inbounds i8* %buf, i64 %.sum1
  %33 = bitcast i8* %32 to i8**
  store i8* null, i8** %33, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.servent.175* %se, i64 0, i32 0
  store i8* %29, i8** %34, align 8, !tbaa !7
  %35 = load i8*** %28, align 8, !tbaa !7
  store i8* %29, i8** %35, align 8, !tbaa !7
  %36 = bitcast %struct.sockaddr_in.177* %sin to %struct.sockaddr.151*
  %37 = trunc i64 %31 to i32
  %38 = call i32 @strcmp(i8* %prots, i8* getelementptr inbounds ([4 x i8]* @.str1247, i64 0, i64 0)) nounwind optsize
  %39 = icmp ne i32 %38, 0
  %40 = select i1 %39, i32 0, i32 16
  %41 = call i32 @getnameinfo(%struct.sockaddr.151* %36, i32 16, i8* null, i32 0, i8* %29, i32 %37, i32 %40) nounwind optsize
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %44, label %43

; <label>:43                                      ; preds = %24
  store %struct.servent.175* %se, %struct.servent.175** %res, align 8, !tbaa !7
  br label %44

; <label>:44                                      ; preds = %43, %24, %21, %14
  %.0 = phi i32 [ -1, %14 ], [ 0, %43 ], [ -1, %21 ], [ -1, %24 ]
  ret i32 %.0
}

define i32 @getsid(i32 %pid) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 147, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i8* @gets(i8* %s) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.37** bitcast (%struct.__FILE_s.69** @stdin to %struct.__FILE_s.37**), align 8, !tbaa !7
  %2 = tail call i8* @fgets(i8* %s, i32 2147483647, %struct.__FILE_s.37* %1) nounwind optsize
  %3 = icmp eq i8* %2, null
  br i1 %3, label %14, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i64 @strlen(i8* %s) nounwind optsize
  %6 = add i64 %5, -1
  %7 = getelementptr inbounds i8* %s, i64 %6
  %8 = load i8* %7, align 1, !tbaa !0
  %9 = icmp eq i8 %8, 10
  br i1 %9, label %10, label %14

; <label>:10                                      ; preds = %4
  %11 = tail call i64 @strlen(i8* %s) nounwind optsize
  %12 = add i64 %11, -1
  %13 = getelementptr inbounds i8* %s, i64 %12
  store i8 0, i8* %13, align 1, !tbaa !0
  br label %14

; <label>:14                                      ; preds = %10, %4, %0
  ret i8* %2
}

define i32 @getsockname(i32 %fd, %struct.sockaddr.181* %addr, i32* %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.sockaddr.181* %addr to i64
  %3 = ptrtoint i32* %len to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 286, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i8* %optval, i32* %optlen) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = sext i32 %level to i64
  %3 = sext i32 %optname to i64
  %4 = ptrtoint i8* %optval to i64
  %5 = ptrtoint i32* %optlen to i64
  %6 = tail call i64 (i64, ...)* @__syscall(i64 295, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 0) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define void @setspent() nounwind uwtable readnone optsize {
  ret void
}

define void @endspent() nounwind uwtable readnone optsize {
  ret void
}

define noalias %struct.spwd* @getspent() nounwind uwtable readnone optsize {
  ret %struct.spwd* null
}

define %struct.spwd.182* @getspnam(i8* %name) nounwind uwtable optsize {
  %res = alloca %struct.spwd.182*, align 8
  %1 = load i8** @getspnam.line, align 8, !tbaa !7
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %.thread

; <label>:3                                       ; preds = %0
  %4 = call i8* @malloc(i64 256) optsize
  store i8* %4, i8** @getspnam.line, align 8, !tbaa !7
  %5 = icmp eq i8* %4, null
  br i1 %5, label %13, label %.thread

.thread:                                          ; preds = %3, %0
  %6 = phi i8* [ %4, %3 ], [ %1, %0 ]
  %7 = call i32 @getspnam_r(i8* %name, %struct.spwd.182* @getspnam.sp, i8* %6, i64 256, %struct.spwd.182** %res) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

; <label>:9                                       ; preds = %.thread
  %10 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %7, i32* %10, align 4, !tbaa !6
  br label %11

; <label>:11                                      ; preds = %9, %.thread
  %12 = load %struct.spwd.182** %res, align 8, !tbaa !7
  br label %13

; <label>:13                                      ; preds = %11, %3
  %.0 = phi %struct.spwd.182* [ %12, %11 ], [ null, %3 ]
  ret %struct.spwd.182* %.0
}

define i32 @getspnam_r(i8* %name, %struct.spwd.182* %sp, i8* %buf, i64 %size, %struct.spwd.182** nocapture %res) nounwind uwtable optsize {
  %path = alloca [275 x i8], align 16
  %cs = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %__cb = alloca %struct.__ptcb, align 8
  %1 = call i64 @strlen(i8* %name) nounwind optsize
  store %struct.spwd.182* null, %struct.spwd.182** %res, align 8, !tbaa !7
  %2 = load i8* %name, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 46
  br i1 %3, label %158, label %4

; <label>:4                                       ; preds = %0
  %5 = call i8* @strchr(i8* %name, i32 47) nounwind optsize
  %6 = icmp ne i8* %5, null
  %7 = icmp eq i64 %1, 0
  %or.cond = or i1 %6, %7
  br i1 %or.cond, label %158, label %8

; <label>:8                                       ; preds = %4
  %9 = add i64 %1, 100
  %10 = icmp ugt i64 %9, %size
  br i1 %10, label %158, label %11

; <label>:11                                      ; preds = %8
  %12 = getelementptr inbounds [275 x i8]* %path, i64 0, i64 0
  %13 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %12, i64 275, i8* getelementptr inbounds ([19 x i8]* @.str250, i64 0, i64 0), i8* %name) nounwind optsize
  %14 = icmp ugt i32 %13, 274
  br i1 %14, label %158, label %15

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, i32, ...)* @open(i8* %12, i32 133120) nounwind optsize
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %37

; <label>:18                                      ; preds = %15
  %19 = bitcast %struct.stat* %st to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 144, i32 8, i1 false)
  %20 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %20, align 4, !tbaa !6
  %21 = call i32 @fstat(i32 %16, %struct.stat* %st) nounwind optsize
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %31

; <label>:23                                      ; preds = %18
  %24 = getelementptr inbounds %struct.stat* %st, i64 0, i32 3
  %25 = load i32* %24, align 8, !tbaa !6
  %26 = and i32 %25, 61440
  %27 = icmp eq i32 %26, 32768
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %23
  %29 = call %struct.__FILE_s.61* @fdopen(i32 %16, i8* getelementptr inbounds ([3 x i8]* @.str1251, i64 0, i64 0)) nounwind optsize
  %30 = icmp eq %struct.__FILE_s.61* %29, null
  br i1 %30, label %31, label %43

; <label>:31                                      ; preds = %28, %23, %18
  %32 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %33 = call i32 @close(i32 %16) nounwind optsize
  %34 = load i32* %cs, align 4, !tbaa !6
  %35 = call i32 @pthread_setcancelstate(i32 %34, i32* null) nounwind optsize
  %36 = load i32* %20, align 4, !tbaa !6
  br label %158

; <label>:37                                      ; preds = %15
  %38 = call %struct.__FILE_s.61* @fopen(i8* getelementptr inbounds ([12 x i8]* @.str2252, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str1251, i64 0, i64 0)) nounwind optsize
  %39 = icmp eq %struct.__FILE_s.61* %38, null
  br i1 %39, label %40, label %43

; <label>:40                                      ; preds = %37
  %41 = call i32* @__errno_location() nounwind readnone optsize
  %42 = load i32* %41, align 4, !tbaa !6
  br label %158

; <label>:43                                      ; preds = %37, %28
  %f.0 = phi %struct.__FILE_s.61* [ %29, %28 ], [ %38, %37 ]
  %44 = bitcast %struct.__FILE_s.61* %f.0 to i8*
  call void @_pthread_cleanup_push(%struct.__ptcb* %__cb, void (i8*)* @cleanup255, i8* %44) nounwind optsize
  %45 = trunc i64 %size to i32
  %46 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 0
  %47 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 1
  %48 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 2
  %49 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 3
  %50 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 4
  %51 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 5
  %52 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 6
  %53 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 7
  br label %.backedge

.backedge:                                        ; preds = %xatol.exit5, %xatol.exit4, %xatol.exit3, %xatol.exit2, %xatol.exit1, %xatol.exit, %78, %75, %64, %43
  %skip.0 = phi i32 [ 0, %43 ], [ %69, %64 ], [ %skip.0, %xatol.exit5 ], [ %skip.0, %xatol.exit4 ], [ %skip.0, %xatol.exit3 ], [ %skip.0, %xatol.exit2 ], [ %skip.0, %xatol.exit1 ], [ %skip.0, %xatol.exit ], [ %skip.0, %78 ], [ %skip.0, %75 ]
  %54 = call i8* bitcast (i8* (i8*, i32, %struct.__FILE_s.37*)* @fgets to i8* (i8*, i32, %struct.__FILE_s.61*)*)(i8* %buf, i32 %45, %struct.__FILE_s.61* %f.0) nounwind optsize
  %55 = icmp eq i8* %54, null
  br i1 %55, label %.critedge, label %56

; <label>:56                                      ; preds = %.backedge
  %57 = call i64 @strlen(i8* %buf) nounwind optsize
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %.critedge, label %59

; <label>:59                                      ; preds = %56
  %60 = icmp eq i32 %skip.0, 0
  br i1 %60, label %61, label %64

; <label>:61                                      ; preds = %59
  %62 = call i32 @strncmp(i8* %name, i8* %buf, i64 %1) nounwind optsize
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %70, label %64

; <label>:64                                      ; preds = %61, %59
  %65 = add i64 %57, -1
  %66 = getelementptr inbounds i8* %buf, i64 %65
  %67 = load i8* %66, align 1, !tbaa !0
  %68 = icmp ne i8 %67, 10
  %69 = zext i1 %68 to i32
  br label %.backedge

; <label>:70                                      ; preds = %61
  %71 = add i64 %57, -1
  %72 = getelementptr inbounds i8* %buf, i64 %71
  %73 = load i8* %72, align 1, !tbaa !0
  %74 = icmp eq i8 %73, 10
  br i1 %74, label %75, label %.critedge

; <label>:75                                      ; preds = %70
  store i8 0, i8* %72, align 1, !tbaa !0
  store i8* %buf, i8** %46, align 8, !tbaa !7
  %76 = call i8* @strchr(i8* %buf, i32 58) nounwind optsize
  %77 = icmp eq i8* %76, null
  br i1 %77, label %.backedge, label %78

; <label>:78                                      ; preds = %75
  %79 = getelementptr inbounds i8* %76, i64 1
  store i8 0, i8* %76, align 1, !tbaa !0
  store i8* %79, i8** %47, align 8, !tbaa !7
  %80 = call i8* @strchr(i8* %79, i32 58) nounwind optsize
  %81 = icmp eq i8* %80, null
  br i1 %81, label %.backedge, label %82

; <label>:82                                      ; preds = %78
  %83 = getelementptr inbounds i8* %80, i64 1
  store i8 0, i8* %80, align 1, !tbaa !0
  %84 = load i8* %83, align 1, !tbaa !0
  %85 = sext i8 %84 to i32
  %86 = add i32 %85, -48
  %87 = icmp ult i32 %86, 10
  br i1 %87, label %88, label %xatol.exit

; <label>:88                                      ; preds = %82
  %89 = call i64 @atol(i8* %83) nounwind optsize
  br label %xatol.exit

xatol.exit:                                       ; preds = %88, %82
  %90 = phi i64 [ %89, %88 ], [ -1, %82 ]
  store i64 %90, i64* %48, align 8, !tbaa !5
  %91 = call i8* @strchr(i8* %83, i32 58) nounwind optsize
  %92 = icmp eq i8* %91, null
  br i1 %92, label %.backedge, label %93

; <label>:93                                      ; preds = %xatol.exit
  %94 = getelementptr inbounds i8* %91, i64 1
  store i8 0, i8* %91, align 1, !tbaa !0
  %95 = load i8* %94, align 1, !tbaa !0
  %96 = sext i8 %95 to i32
  %97 = add i32 %96, -48
  %98 = icmp ult i32 %97, 10
  br i1 %98, label %99, label %xatol.exit1

; <label>:99                                      ; preds = %93
  %100 = call i64 @atol(i8* %94) nounwind optsize
  br label %xatol.exit1

xatol.exit1:                                      ; preds = %99, %93
  %101 = phi i64 [ %100, %99 ], [ -1, %93 ]
  store i64 %101, i64* %49, align 8, !tbaa !5
  %102 = call i8* @strchr(i8* %94, i32 58) nounwind optsize
  %103 = icmp eq i8* %102, null
  br i1 %103, label %.backedge, label %104

; <label>:104                                     ; preds = %xatol.exit1
  %105 = getelementptr inbounds i8* %102, i64 1
  store i8 0, i8* %102, align 1, !tbaa !0
  %106 = load i8* %105, align 1, !tbaa !0
  %107 = sext i8 %106 to i32
  %108 = add i32 %107, -48
  %109 = icmp ult i32 %108, 10
  br i1 %109, label %110, label %xatol.exit2

; <label>:110                                     ; preds = %104
  %111 = call i64 @atol(i8* %105) nounwind optsize
  br label %xatol.exit2

xatol.exit2:                                      ; preds = %110, %104
  %112 = phi i64 [ %111, %110 ], [ -1, %104 ]
  store i64 %112, i64* %50, align 8, !tbaa !5
  %113 = call i8* @strchr(i8* %105, i32 58) nounwind optsize
  %114 = icmp eq i8* %113, null
  br i1 %114, label %.backedge, label %115

; <label>:115                                     ; preds = %xatol.exit2
  %116 = getelementptr inbounds i8* %113, i64 1
  store i8 0, i8* %113, align 1, !tbaa !0
  %117 = load i8* %116, align 1, !tbaa !0
  %118 = sext i8 %117 to i32
  %119 = add i32 %118, -48
  %120 = icmp ult i32 %119, 10
  br i1 %120, label %121, label %xatol.exit3

; <label>:121                                     ; preds = %115
  %122 = call i64 @atol(i8* %116) nounwind optsize
  br label %xatol.exit3

xatol.exit3:                                      ; preds = %121, %115
  %123 = phi i64 [ %122, %121 ], [ -1, %115 ]
  store i64 %123, i64* %51, align 8, !tbaa !5
  %124 = call i8* @strchr(i8* %116, i32 58) nounwind optsize
  %125 = icmp eq i8* %124, null
  br i1 %125, label %.backedge, label %126

; <label>:126                                     ; preds = %xatol.exit3
  %127 = getelementptr inbounds i8* %124, i64 1
  store i8 0, i8* %124, align 1, !tbaa !0
  %128 = load i8* %127, align 1, !tbaa !0
  %129 = sext i8 %128 to i32
  %130 = add i32 %129, -48
  %131 = icmp ult i32 %130, 10
  br i1 %131, label %132, label %xatol.exit4

; <label>:132                                     ; preds = %126
  %133 = call i64 @atol(i8* %127) nounwind optsize
  br label %xatol.exit4

xatol.exit4:                                      ; preds = %132, %126
  %134 = phi i64 [ %133, %132 ], [ -1, %126 ]
  store i64 %134, i64* %52, align 8, !tbaa !5
  %135 = call i8* @strchr(i8* %127, i32 58) nounwind optsize
  %136 = icmp eq i8* %135, null
  br i1 %136, label %.backedge, label %137

; <label>:137                                     ; preds = %xatol.exit4
  %138 = getelementptr inbounds i8* %135, i64 1
  store i8 0, i8* %135, align 1, !tbaa !0
  %139 = load i8* %138, align 1, !tbaa !0
  %140 = sext i8 %139 to i32
  %141 = add i32 %140, -48
  %142 = icmp ult i32 %141, 10
  br i1 %142, label %143, label %xatol.exit5

; <label>:143                                     ; preds = %137
  %144 = call i64 @atol(i8* %138) nounwind optsize
  br label %xatol.exit5

xatol.exit5:                                      ; preds = %143, %137
  %145 = phi i64 [ %144, %143 ], [ -1, %137 ]
  store i64 %145, i64* %53, align 8, !tbaa !5
  %146 = call i8* @strchr(i8* %138, i32 58) nounwind optsize
  %147 = icmp eq i8* %146, null
  br i1 %147, label %.backedge, label %148

; <label>:148                                     ; preds = %xatol.exit5
  %149 = getelementptr inbounds i8* %146, i64 1
  store i8 0, i8* %146, align 1, !tbaa !0
  %150 = load i8* %149, align 1, !tbaa !0
  %151 = sext i8 %150 to i32
  %152 = add i32 %151, -48
  %153 = icmp ult i32 %152, 10
  br i1 %153, label %154, label %xatol.exit6

; <label>:154                                     ; preds = %148
  %155 = call i64 @atol(i8* %149) nounwind optsize
  br label %xatol.exit6

xatol.exit6:                                      ; preds = %154, %148
  %156 = phi i64 [ %155, %154 ], [ -1, %148 ]
  %157 = getelementptr inbounds %struct.spwd.182* %sp, i64 0, i32 8
  store i64 %156, i64* %157, align 8, !tbaa !5
  store %struct.spwd.182* %sp, %struct.spwd.182** %res, align 8, !tbaa !7
  br label %.critedge

.critedge:                                        ; preds = %xatol.exit6, %70, %56, %.backedge
  %rv.0 = phi i32 [ 0, %xatol.exit6 ], [ 34, %70 ], [ 0, %56 ], [ 0, %.backedge ]
  call void @_pthread_cleanup_pop(%struct.__ptcb* %__cb, i32 1) nounwind optsize
  br label %158

; <label>:158                                     ; preds = %.critedge, %40, %31, %11, %8, %4, %0
  %.0 = phi i32 [ %36, %31 ], [ %rv.0, %.critedge ], [ %42, %40 ], [ 22, %4 ], [ 22, %0 ], [ 34, %8 ], [ 22, %11 ]
  ret i32 %.0
}

define internal void @cleanup255(i8* %p) nounwind uwtable optsize {
  %1 = bitcast i8* %p to %struct.__FILE_s.61*
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %1) nounwind optsize
  ret void
}

define i32 @getsubopt(i8** nocapture %opt, i8** nocapture %keys, i8** nocapture %val) nounwind uwtable optsize {
  %1 = load i8** %opt, align 8, !tbaa !7
  store i8* null, i8** %val, align 8, !tbaa !7
  %2 = tail call i8* @strchr(i8* %1, i32 44) nounwind optsize
  store i8* %2, i8** %opt, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %2, i64 1
  store i8* %5, i8** %opt, align 8, !tbaa !7
  store i8 0, i8* %2, align 1, !tbaa !0
  br label %.preheader

; <label>:6                                       ; preds = %0
  %7 = tail call i64 @strlen(i8* %1) nounwind optsize
  %8 = getelementptr inbounds i8* %1, i64 %7
  store i8* %8, i8** %opt, align 8, !tbaa !7
  br label %.preheader

.preheader:                                       ; preds = %21, %6, %4
  %indvars.iv = phi i64 [ %indvars.iv.next, %21 ], [ 0, %6 ], [ 0, %4 ]
  %i.0 = phi i32 [ %22, %21 ], [ 0, %6 ], [ 0, %4 ]
  %9 = getelementptr inbounds i8** %keys, i64 %indvars.iv
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = icmp eq i8* %10, null
  br i1 %11, label %.loopexit, label %12

; <label>:12                                      ; preds = %.preheader
  %13 = tail call i64 @strlen(i8* %10) nounwind optsize
  %14 = load i8** %9, align 8, !tbaa !7
  %15 = tail call i32 @strncmp(i8* %14, i8* %1, i64 %13) nounwind optsize
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %12
  %18 = getelementptr inbounds i8* %1, i64 %13
  %19 = load i8* %18, align 1, !tbaa !0
  switch i8 %19, label %21 [
    i8 61, label %20
    i8 0, label %.loopexit
  ]

; <label>:20                                      ; preds = %17
  store i8* %18, i8** %val, align 8, !tbaa !7
  br label %.loopexit

; <label>:21                                      ; preds = %17, %12
  %indvars.iv.next = add i64 %indvars.iv, 1
  %22 = add nsw i32 %i.0, 1
  br label %.preheader

.loopexit:                                        ; preds = %20, %17, %.preheader
  %.0 = phi i32 [ %i.0, %20 ], [ -1, %.preheader ], [ %i.0, %17 ]
  ret i32 %.0
}

define i32 @gettimeofday(%struct.timeval.188* %tv, i8* nocapture %tz) nounwind uwtable optsize {
  %ts = alloca %struct.timespec.29, align 8
  %1 = icmp eq %struct.timeval.188* %tv, null
  br i1 %1, label %13, label %2

; <label>:2                                       ; preds = %0
  %3 = call i32 @clock_gettime(i32 0, %struct.timespec.29* %ts) nounwind optsize
  %4 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 0
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.timeval.188* %tv, i64 0, i32 0
  store i64 %5, i64* %6, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %8 = load i64* %7, align 8, !tbaa !5
  %9 = trunc i64 %8 to i32
  %10 = sdiv i32 %9, 1000
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.timeval.188* %tv, i64 0, i32 1
  store i64 %11, i64* %12, align 8, !tbaa !5
  br label %13

; <label>:13                                      ; preds = %2, %0
  ret i32 0
}

define i32 @getuid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 199, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

define i32 @getwchar() nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.69** @stdin, align 8, !tbaa !7
  %2 = tail call i32 @fgetwc(%struct.__FILE_s.69* %1) nounwind optsize
  ret i32 %2
}

define i32 @getwc(%struct.__FILE_s.69* %f) nounwind uwtable optsize {
  %1 = tail call i32 @fgetwc(%struct.__FILE_s.69* %f) nounwind optsize
  ret i32 %1
}

define i32 @getw(%struct.__FILE_s.90* %f) nounwind uwtable optsize {
  %x = alloca i32, align 4
  %1 = bitcast i32* %x to i8*
  %2 = call i64 @fread(i8* %1, i64 4, i64 1, %struct.__FILE_s.90* %f) nounwind optsize
  %3 = icmp ne i64 %2, 0
  %4 = load i32* %x, align 4, !tbaa !6
  %5 = select i1 %3, i32 %4, i32 -1
  ret i32 %5
}

define i32 @glob(i8* %pat, i32 %flags, i32 (i8*, i32)* %errfunc, %struct.glob_t* nocapture %g) nounwind uwtable optsize {
  %head = alloca %struct.match, align 8
  %tail = alloca %struct.match*, align 8
  %1 = bitcast %struct.match* %head to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ({ %struct.match*, [1 x i8], [7 x i8] }* @glob.head to i8*), i64 16, i32 8, i1 false)
  store %struct.match* %head, %struct.match** %tail, align 8, !tbaa !7
  %2 = and i32 %flags, 8
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 2
  %6 = load i64* %5, align 8, !tbaa !5
  br label %7

; <label>:7                                       ; preds = %4, %0
  %8 = phi i64 [ %6, %4 ], [ 0, %0 ]
  %9 = load i8* %pat, align 1, !tbaa !0
  %10 = icmp eq i8 %9, 47
  br i1 %10, label %.lr.ph21, label %.loopexit19

.lr.ph21:                                         ; preds = %.lr.ph21, %7
  %p.020 = phi i8* [ %11, %.lr.ph21 ], [ %pat, %7 ]
  %11 = getelementptr inbounds i8* %p.020, i64 1
  %12 = load i8* %11, align 1, !tbaa !0
  %13 = icmp eq i8 %12, 47
  br i1 %13, label %.lr.ph21, label %.loopexit19

.loopexit19:                                      ; preds = %.lr.ph21, %7
  %d.0 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str1257, i64 0, i64 0), %7 ], [ getelementptr inbounds ([2 x i8]* @.str256, i64 0, i64 0), %.lr.ph21 ]
  %p.1 = phi i8* [ %pat, %7 ], [ %11, %.lr.ph21 ]
  %14 = call i64 @strlen(i8* %p.1) nounwind optsize
  %15 = icmp ugt i64 %14, 4096
  br i1 %15, label %freelist.exit, label %16

; <label>:16                                      ; preds = %.loopexit19
  %17 = icmp eq i32 (i8*, i32)* %errfunc, null
  %.01 = select i1 %17, i32 (i8*, i32)* @ignore_err, i32 (i8*, i32)* %errfunc
  %18 = and i32 %flags, 32
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %24, label %20

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 2
  store i64 %8, i64* %21, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 0
  store i64 0, i64* %22, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 1
  store i8** null, i8*** %23, align 8, !tbaa !7
  br label %24

; <label>:24                                      ; preds = %20, %16
  %25 = load i8* %p.1, align 1, !tbaa !0
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %.thread, label %27

; <label>:27                                      ; preds = %24
  %28 = call fastcc i32 @match_in_dir(i8* %d.0, i8* %p.1, i32 %flags, i32 (i8*, i32)* %.01, %struct.match** %tail) optsize
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %.thread

; <label>:30                                      ; preds = %27
  %31 = getelementptr inbounds %struct.match* %head, i64 0, i32 0
  %32 = load %struct.match** %31, align 8, !tbaa !7
  %33 = icmp eq %struct.match* %32, null
  br i1 %33, label %freelist.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %30
  %match.01.i = phi %struct.match* [ %35, %.lr.ph.i ], [ %32, %30 ]
  %34 = getelementptr inbounds %struct.match* %match.01.i, i64 0, i32 0
  %35 = load %struct.match** %34, align 8, !tbaa !7
  %36 = bitcast %struct.match* %match.01.i to i8*
  call void @free(i8* %36) nounwind optsize
  %37 = icmp eq %struct.match* %35, null
  br i1 %37, label %freelist.exit, label %.lr.ph.i

.thread:                                          ; preds = %27, %24
  %error.08 = phi i32 [ %28, %27 ], [ 0, %24 ]
  %38 = getelementptr inbounds %struct.match* %head, i64 0, i32 0
  %39 = load %struct.match** %38, align 8, !tbaa !7
  store %struct.match* %39, %struct.match** %tail, align 8, !tbaa !7
  %40 = icmp eq %struct.match* %39, null
  br i1 %40, label %._crit_edge16.thread, label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15, %.thread
  %cnt.014 = phi i64 [ %44, %.lr.ph15 ], [ 0, %.thread ]
  %41 = phi %struct.match* [ %43, %.lr.ph15 ], [ %39, %.thread ]
  %42 = getelementptr inbounds %struct.match* %41, i64 0, i32 0
  %43 = load %struct.match** %42, align 8, !tbaa !7
  store %struct.match* %43, %struct.match** %tail, align 8, !tbaa !7
  %44 = add i64 %cnt.014, 1
  %45 = icmp eq %struct.match* %43, null
  br i1 %45, label %._crit_edge16, label %.lr.ph15

._crit_edge16:                                    ; preds = %.lr.ph15
  %46 = icmp eq i64 %44, 0
  br i1 %46, label %._crit_edge16.thread, label %53

._crit_edge16.thread:                             ; preds = %._crit_edge16, %.thread
  %47 = and i32 %flags, 16
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %freelist.exit, label %49

; <label>:49                                      ; preds = %._crit_edge16.thread
  store %struct.match* %head, %struct.match** %tail, align 8, !tbaa !7
  %50 = call i64 @strlen(i8* %pat) nounwind optsize
  %51 = call fastcc i32 @append(%struct.match** %tail, i8* %pat, i64 %50, i32 0) optsize
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %freelist.exit

; <label>:53                                      ; preds = %49, %._crit_edge16
  %cnt.1 = phi i64 [ %44, %._crit_edge16 ], [ 1, %49 ]
  br i1 %19, label %54, label %77

; <label>:54                                      ; preds = %53
  %55 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 1
  %56 = load i8*** %55, align 8, !tbaa !7
  %57 = bitcast i8** %56 to i8*
  %58 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 0
  %59 = load i64* %58, align 8, !tbaa !5
  %60 = add i64 %cnt.1, %8
  %61 = add i64 %60, %59
  %62 = shl i64 %61, 3
  %63 = add i64 %62, 8
  %64 = call i8* @realloc(i8* %57, i64 %63) nounwind optsize
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %73

; <label>:66                                      ; preds = %54
  %67 = load %struct.match** %38, align 8, !tbaa !7
  %68 = icmp eq %struct.match* %67, null
  br i1 %68, label %freelist.exit, label %.lr.ph.i3

.lr.ph.i3:                                        ; preds = %.lr.ph.i3, %66
  %match.01.i2 = phi %struct.match* [ %70, %.lr.ph.i3 ], [ %67, %66 ]
  %69 = getelementptr inbounds %struct.match* %match.01.i2, i64 0, i32 0
  %70 = load %struct.match** %69, align 8, !tbaa !7
  %71 = bitcast %struct.match* %match.01.i2 to i8*
  call void @free(i8* %71) nounwind optsize
  %72 = icmp eq %struct.match* %70, null
  br i1 %72, label %freelist.exit, label %.lr.ph.i3

; <label>:73                                      ; preds = %54
  %74 = bitcast i8* %64 to i8**
  store i8** %74, i8*** %55, align 8, !tbaa !7
  %75 = load i64* %58, align 8, !tbaa !5
  %76 = add i64 %75, %8
  br label %.loopexit

; <label>:77                                      ; preds = %53
  %78 = add i64 %cnt.1, %8
  %79 = shl i64 %78, 3
  %80 = add i64 %79, 8
  %81 = call i8* @malloc(i64 %80) optsize
  %82 = bitcast i8* %81 to i8**
  %83 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 1
  store i8** %82, i8*** %83, align 8, !tbaa !7
  %84 = icmp eq i8* %81, null
  br i1 %84, label %86, label %.preheader

.preheader:                                       ; preds = %77
  %85 = icmp eq i64 %8, 0
  br i1 %85, label %.loopexit, label %.lr.ph

; <label>:86                                      ; preds = %77
  %87 = load %struct.match** %38, align 8, !tbaa !7
  %88 = icmp eq %struct.match* %87, null
  br i1 %88, label %freelist.exit, label %.lr.ph.i6

.lr.ph.i6:                                        ; preds = %.lr.ph.i6, %86
  %match.01.i5 = phi %struct.match* [ %90, %.lr.ph.i6 ], [ %87, %86 ]
  %89 = getelementptr inbounds %struct.match* %match.01.i5, i64 0, i32 0
  %90 = load %struct.match** %89, align 8, !tbaa !7
  %91 = bitcast %struct.match* %match.01.i5 to i8*
  call void @free(i8* %91) nounwind optsize
  %92 = icmp eq %struct.match* %90, null
  br i1 %92, label %freelist.exit, label %.lr.ph.i6

.lr.ph:                                           ; preds = %._crit_edge25, %.preheader
  %93 = phi i8** [ %.pre, %._crit_edge25 ], [ %82, %.preheader ]
  %i.09 = phi i64 [ %95, %._crit_edge25 ], [ 0, %.preheader ]
  %94 = getelementptr inbounds i8** %93, i64 %i.09
  store i8* null, i8** %94, align 8, !tbaa !7
  %95 = add i64 %i.09, 1
  %exitcond = icmp eq i64 %95, %8
  br i1 %exitcond, label %.loopexit, label %._crit_edge25

._crit_edge25:                                    ; preds = %.lr.ph
  %.pre = load i8*** %83, align 8, !tbaa !7
  br label %.lr.ph

.loopexit:                                        ; preds = %.lr.ph, %.preheader, %73
  %offs.0 = phi i64 [ %76, %73 ], [ %8, %.lr.ph ], [ 0, %.preheader ]
  %96 = load %struct.match** %38, align 8, !tbaa !7
  store %struct.match* %96, %struct.match** %tail, align 8, !tbaa !7
  %97 = icmp eq i64 %cnt.1, 0
  %.pre28 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 1
  br i1 %97, label %._crit_edge, label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge26, %.loopexit
  %98 = phi %struct.match* [ %105, %._crit_edge26 ], [ %96, %.loopexit ]
  %i.111 = phi i64 [ %106, %._crit_edge26 ], [ 0, %.loopexit ]
  %99 = getelementptr inbounds %struct.match* %98, i64 0, i32 1, i64 0
  %100 = add i64 %i.111, %offs.0
  %101 = load i8*** %.pre28, align 8, !tbaa !7
  %102 = getelementptr inbounds i8** %101, i64 %100
  store i8* %99, i8** %102, align 8, !tbaa !7
  %103 = load %struct.match** %tail, align 8, !tbaa !7
  %104 = getelementptr inbounds %struct.match* %103, i64 0, i32 0
  %105 = load %struct.match** %104, align 8, !tbaa !7
  store %struct.match* %105, %struct.match** %tail, align 8, !tbaa !7
  %106 = add i64 %i.111, 1
  %exitcond23 = icmp eq i64 %106, %cnt.1
  br i1 %exitcond23, label %._crit_edge, label %._crit_edge26

._crit_edge:                                      ; preds = %._crit_edge26, %.loopexit
  %i.1.lcssa = phi i64 [ %cnt.1, %._crit_edge26 ], [ 0, %.loopexit ]
  %107 = add i64 %i.1.lcssa, %offs.0
  %108 = load i8*** %.pre28, align 8, !tbaa !7
  %109 = getelementptr inbounds i8** %108, i64 %107
  store i8* null, i8** %109, align 8, !tbaa !7
  %110 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 0
  %111 = load i64* %110, align 8, !tbaa !5
  %112 = add i64 %111, %cnt.1
  store i64 %112, i64* %110, align 8, !tbaa !5
  %113 = and i32 %flags, 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %freelist.exit

; <label>:115                                     ; preds = %._crit_edge
  %116 = load i8*** %.pre28, align 8, !tbaa !7
  %117 = getelementptr inbounds i8** %116, i64 %offs.0
  %118 = bitcast i8** %117 to i8*
  call void @qsort(i8* %118, i64 %cnt.1, i64 8, i32 (i8*, i8*)* @sort) nounwind optsize
  br label %freelist.exit

freelist.exit:                                    ; preds = %115, %._crit_edge, %.lr.ph.i6, %86, %.lr.ph.i3, %66, %49, %._crit_edge16.thread, %.lr.ph.i, %30, %.loopexit19
  %.0 = phi i32 [ 1, %.loopexit19 ], [ 1, %49 ], [ 3, %._crit_edge16.thread ], [ %error.08, %._crit_edge ], [ %error.08, %115 ], [ 1, %30 ], [ 1, %66 ], [ 1, %86 ], [ %28, %.lr.ph.i ], [ 1, %.lr.ph.i6 ], [ 1, %.lr.ph.i3 ]
  ret i32 %.0
}

define internal i32 @ignore_err(i8* nocapture %path, i32 %err) nounwind uwtable readnone optsize {
  ret i32 0
}

define internal fastcc i32 @match_in_dir(i8* %d, i8* %p, i32 %flags, i32 (i8*, i32)* %errfunc, %struct.match** %tail) nounwind uwtable optsize {
  %de_buf = alloca %struct.dirent.193, align 8
  %de = alloca %struct.dirent.193*, align 8
  %st = alloca %struct.stat.104, align 8
  %st1 = alloca %struct.stat.104, align 8
  %1 = call i64 @strlen(i8* %p) nounwind optsize
  %2 = add i64 %1, 1
  %3 = alloca i8, i64 %2, align 16
  %4 = call i64 @strlen(i8* %d) nounwind optsize
  %5 = and i32 %flags, 64
  %6 = lshr exact i32 %5, 5
  %7 = lshr i32 %flags, 5
  %8 = and i32 %7, 4
  %9 = or i32 %8, %6
  %10 = xor i32 %9, 4
  %11 = call i8* @strchr(i8* %p, i32 47) nounwind optsize
  %12 = icmp eq i8* %11, null
  br i1 %12, label %.loopexit, label %13

; <label>:13                                      ; preds = %0
  %14 = call i8* @strcpy(i8* %3, i8* %p) nounwind optsize
  %15 = ptrtoint i8* %11 to i64
  %16 = ptrtoint i8* %p to i64
  %17 = sub i64 %15, %16
  %18 = getelementptr inbounds i8* %3, i64 %17
  store i8 0, i8* %18, align 1, !tbaa !0
  %19 = load i8* %11, align 1, !tbaa !0
  %20 = icmp eq i8 %19, 47
  br i1 %20, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %13
  %p2.06 = phi i8* [ %21, %.lr.ph ], [ %11, %13 ]
  %21 = getelementptr inbounds i8* %p2.06, i64 1
  %22 = load i8* %21, align 1, !tbaa !0
  %23 = icmp eq i8 %22, 47
  br i1 %23, label %.lr.ph, label %.loopexit

.loopexit:                                        ; preds = %.lr.ph, %13, %0
  %p2.1 = phi i8* [ null, %0 ], [ %11, %13 ], [ %21, %.lr.ph ]
  %.03 = phi i8* [ %p, %0 ], [ %3, %13 ], [ %3, %.lr.ph ]
  %24 = icmp eq i32 %5, 0
  br label %25

; <label>:25                                      ; preds = %34, %.loopexit
  %bracket.0.i = phi i32 [ 0, %.loopexit ], [ %bracket.1.i, %34 ]
  %.01.i = phi i8* [ %.03, %.loopexit ], [ %35, %34 ]
  %26 = load i8* %.01.i, align 1, !tbaa !0
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %is_literal.exit, label %28

; <label>:28                                      ; preds = %25
  %29 = sext i8 %26 to i32
  switch i32 %29, label %34 [
    i32 92, label %30
    i32 63, label %is_literal.exit
    i32 42, label %is_literal.exit
    i32 91, label %31
    i32 93, label %32
  ]

; <label>:30                                      ; preds = %28
  br i1 %24, label %is_literal.exit, label %34

; <label>:31                                      ; preds = %28
  br label %34

; <label>:32                                      ; preds = %28
  %33 = icmp eq i32 %bracket.0.i, 0
  br i1 %33, label %34, label %is_literal.exit

; <label>:34                                      ; preds = %32, %31, %30, %28
  %bracket.1.i = phi i32 [ %bracket.0.i, %28 ], [ 0, %32 ], [ 1, %31 ], [ %bracket.0.i, %30 ]
  %35 = getelementptr inbounds i8* %.01.i, i64 1
  br label %25

is_literal.exit:                                  ; preds = %32, %30, %28, %28, %25
  %.0.i = phi i32 [ 0, %30 ], [ 0, %28 ], [ 0, %28 ], [ 0, %32 ], [ 1, %25 ]
  %36 = load i8* %d, align 1, !tbaa !0
  %37 = icmp eq i8 %36, 47
  br i1 %37, label %38, label %43

; <label>:38                                      ; preds = %is_literal.exit
  %39 = getelementptr inbounds i8* %d, i64 1
  %40 = load i8* %39, align 1, !tbaa !0
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %43

; <label>:42                                      ; preds = %38
  br label %43

; <label>:43                                      ; preds = %42, %38, %is_literal.exit
  %l.0 = phi i64 [ %4, %38 ], [ 0, %42 ], [ %4, %is_literal.exit ]
  %44 = icmp ne i8 %36, 0
  %45 = select i1 %44, i8* %d, i8* getelementptr inbounds ([2 x i8]* @.str2258, i64 0, i64 0)
  %46 = call %struct.__DIR_s* @opendir(i8* %45) nounwind optsize
  %47 = call i32* @__errno_location() nounwind readnone optsize
  %48 = load i32* %47, align 4, !tbaa !6
  %49 = icmp eq %struct.__DIR_s* %46, null
  br i1 %49, label %50, label %72

; <label>:50                                      ; preds = %43
  switch i32 %48, label %65 [
    i32 20, label %174
    i32 13, label %51
  ]

; <label>:51                                      ; preds = %50
  %52 = load i8* %.03, align 1, !tbaa !0
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %65

; <label>:54                                      ; preds = %51
  %55 = call i32 @stat(i8* %d, %struct.stat.104* %st) nounwind optsize
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %65

; <label>:57                                      ; preds = %54
  %58 = getelementptr inbounds %struct.stat.104* %st, i64 0, i32 3
  %59 = load i32* %58, align 8, !tbaa !6
  %60 = and i32 %59, 61440
  %61 = icmp eq i32 %60, 16384
  br i1 %61, label %62, label %65

; <label>:62                                      ; preds = %57
  %63 = trunc i64 %l.0 to i32
  %64 = call fastcc i32 @append(%struct.match** %tail, i8* %d, i64 %l.0, i32 %63) optsize
  %not. = icmp ne i32 %64, 0
  %. = zext i1 %not. to i32
  br label %174

; <label>:65                                      ; preds = %57, %54, %51, %50
  %66 = call i32 %errfunc(i8* %d, i32 %48) nounwind optsize
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %174

; <label>:68                                      ; preds = %65
  %69 = and i32 %flags, 1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %174

; <label>:71                                      ; preds = %68
  br label %174

; <label>:72                                      ; preds = %43
  %73 = load i8* %.03, align 1, !tbaa !0
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %82, label %.preheader

.preheader:                                       ; preds = %72
  %75 = add i64 %l.0, 2
  %76 = icmp eq i32 %.0.i, 0
  %77 = icmp ne i8* %p2.1, null
  %78 = and i32 %flags, 2
  %79 = icmp eq i32 %78, 0
  %80 = add i64 %l.0, 1
  %81 = getelementptr inbounds %struct.stat.104* %st1, i64 0, i32 3
  br label %88

; <label>:82                                      ; preds = %72
  %83 = trunc i64 %l.0 to i32
  %84 = call fastcc i32 @append(%struct.match** %tail, i8* %d, i64 %l.0, i32 %83) optsize
  %85 = icmp ne i32 %84, 0
  %86 = zext i1 %85 to i32
  %87 = call i32 @closedir(%struct.__DIR_s* %46) nounwind optsize
  br label %174

; <label>:88                                      ; preds = %.thread, %.preheader
  %89 = call i32 @readdir_r(%struct.__DIR_s* %46, %struct.dirent.193* %de_buf, %struct.dirent.193** %de) nounwind optsize
  %90 = icmp eq i32 %89, 0
  %91 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %92 = icmp ne %struct.dirent.193* %91, null
  %or.cond = and i1 %90, %92
  br i1 %or.cond, label %93, label %.critedge

; <label>:93                                      ; preds = %88
  %94 = getelementptr inbounds %struct.dirent.193* %91, i64 0, i32 2
  %95 = load i16* %94, align 2, !tbaa !8
  %96 = zext i16 %95 to i64
  %97 = add i64 %75, %96
  %98 = call i8* @llvm.stacksave()
  %99 = alloca i8, i64 %97, align 16
  %100 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %101 = getelementptr inbounds %struct.dirent.193* %100, i64 0, i32 4, i64 0
  br i1 %76, label %102, label %.critedge5

; <label>:102                                     ; preds = %93
  %103 = call i32 @fnmatch(i8* %.03, i8* %101, i32 %10) nounwind optsize
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %107, label %.thread

.critedge5:                                       ; preds = %93
  %105 = call i32 @strcmp(i8* %.03, i8* %101) nounwind optsize
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %.thread

; <label>:107                                     ; preds = %.critedge5, %102
  br i1 %77, label %108, label %117

; <label>:108                                     ; preds = %107
  %109 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %110 = getelementptr inbounds %struct.dirent.193* %109, i64 0, i32 3
  %111 = load i8* %110, align 1, !tbaa !0
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %117, label %113

; <label>:113                                     ; preds = %108
  %114 = zext i8 %111 to i32
  %115 = shl nuw nsw i32 %114, 12
  %116 = and i32 %115, 61440
  switch i32 %116, label %.thread [
    i32 16384, label %117
    i32 40960, label %117
  ]

; <label>:117                                     ; preds = %113, %113, %108, %107
  %118 = load i8* %d, align 1, !tbaa !0
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %127, label %120

; <label>:120                                     ; preds = %117
  %121 = call i8* @memcpy(i8* %99, i8* %d, i64 %l.0) nounwind optsize
  %122 = getelementptr inbounds i8* %99, i64 %l.0
  store i8 47, i8* %122, align 1, !tbaa !0
  %123 = getelementptr inbounds i8* %99, i64 %80
  %124 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %125 = getelementptr inbounds %struct.dirent.193* %124, i64 0, i32 4, i64 0
  %126 = call i8* @strcpy(i8* %123, i8* %125) nounwind optsize
  br label %130

; <label>:127                                     ; preds = %117
  %128 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %129 = getelementptr inbounds %struct.dirent.193* %128, i64 0, i32 4, i64 0
  br label %130

; <label>:130                                     ; preds = %127, %120
  %name.0 = phi i8* [ %99, %120 ], [ %129, %127 ]
  br i1 %77, label %131, label %136

; <label>:131                                     ; preds = %130
  %132 = call fastcc i32 @match_in_dir(i8* %name.0, i8* %p2.1, i32 %flags, i32 (i8*, i32)* %errfunc, %struct.match** %tail) optsize
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %.thread, label %134

; <label>:134                                     ; preds = %131
  %135 = call i32 @closedir(%struct.__DIR_s* %46) nounwind optsize
  br label %165

; <label>:136                                     ; preds = %130
  br i1 %79, label %._crit_edge, label %137

; <label>:137                                     ; preds = %136
  %138 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %139 = getelementptr inbounds %struct.dirent.193* %138, i64 0, i32 3
  %140 = load i8* %139, align 1, !tbaa !0
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %150, label %142

; <label>:142                                     ; preds = %137
  %143 = zext i8 %140 to i32
  %144 = shl nuw nsw i32 %143, 12
  %145 = and i32 %144, 61440
  %146 = icmp eq i32 %145, 40960
  br i1 %146, label %150, label %147

; <label>:147                                     ; preds = %142
  %148 = icmp eq i32 %145, 16384
  %149 = zext i1 %148 to i32
  br label %._crit_edge

; <label>:150                                     ; preds = %142, %137
  %151 = call i32 @stat(i8* %name.0, %struct.stat.104* %st1) nounwind optsize
  %152 = load i32* %81, align 8, !tbaa !6
  %153 = and i32 %152, 61440
  %154 = icmp eq i32 %153, 16384
  %155 = zext i1 %154 to i32
  br label %._crit_edge

._crit_edge:                                      ; preds = %150, %147, %136
  %mark.0 = phi i32 [ %155, %150 ], [ %149, %147 ], [ 0, %136 ]
  %156 = load %struct.dirent.193** %de, align 8, !tbaa !7
  %157 = getelementptr inbounds %struct.dirent.193* %156, i64 0, i32 2
  %158 = load i16* %157, align 2, !tbaa !8
  %159 = zext i16 %158 to i64
  %160 = add i64 %80, %159
  %161 = call fastcc i32 @append(%struct.match** %tail, i8* %name.0, i64 %160, i32 %mark.0) optsize
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %.thread, label %163

; <label>:163                                     ; preds = %._crit_edge
  %164 = call i32 @closedir(%struct.__DIR_s* %46) nounwind optsize
  br label %165

.thread:                                          ; preds = %._crit_edge, %131, %113, %.critedge5, %102
  call void @llvm.stackrestore(i8* %98)
  br label %88

; <label>:165                                     ; preds = %163, %134
  %.1 = phi i32 [ %132, %134 ], [ 1, %163 ]
  call void @llvm.stackrestore(i8* %98)
  br label %174

.critedge:                                        ; preds = %88
  %166 = call i32 @closedir(%struct.__DIR_s* %46) nounwind optsize
  br i1 %90, label %173, label %167

; <label>:167                                     ; preds = %.critedge
  %168 = call i32 %errfunc(i8* %d, i32 %89) nounwind optsize
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %174

; <label>:170                                     ; preds = %167
  %171 = and i32 %flags, 1
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %174

; <label>:173                                     ; preds = %170, %.critedge
  br label %174

; <label>:174                                     ; preds = %173, %170, %167, %165, %82, %71, %68, %65, %62, %50
  %.2 = phi i32 [ %.1, %165 ], [ 0, %173 ], [ %86, %82 ], [ 0, %71 ], [ 0, %50 ], [ %., %62 ], [ 2, %68 ], [ 2, %65 ], [ 2, %170 ], [ 2, %167 ]
  ret i32 %.2
}

define internal fastcc i32 @append(%struct.match** nocapture %tail, i8* %name, i64 %len, i32 %mark) nounwind uwtable optsize {
  %1 = add i64 %len, 17
  %2 = tail call i8* @malloc(i64 %1) optsize
  %3 = bitcast i8* %2 to %struct.match*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %15, label %5

; <label>:5                                       ; preds = %0
  %6 = load %struct.match** %tail, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.match* %6, i64 0, i32 0
  store %struct.match* %3, %struct.match** %7, align 8, !tbaa !7
  %8 = bitcast i8* %2 to %struct.match**
  store %struct.match* null, %struct.match** %8, align 8, !tbaa !7
  %9 = getelementptr inbounds i8* %2, i64 8
  %10 = tail call i8* @strcpy(i8* %9, i8* %name) nounwind optsize
  %11 = icmp eq i32 %mark, 0
  br i1 %11, label %14, label %12

; <label>:12                                      ; preds = %5
  %13 = tail call i8* @strcat(i8* %9, i8* getelementptr inbounds ([2 x i8]* @.str256, i64 0, i64 0)) nounwind optsize
  br label %14

; <label>:14                                      ; preds = %12, %5
  store %struct.match* %3, %struct.match** %tail, align 8, !tbaa !7
  br label %15

; <label>:15                                      ; preds = %14, %0
  %.0 = phi i32 [ 0, %14 ], [ -1, %0 ]
  ret i32 %.0
}

define internal i32 @sort(i8* nocapture %a, i8* nocapture %b) nounwind uwtable optsize {
  %1 = bitcast i8* %a to i8**
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = bitcast i8* %b to i8**
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = tail call i32 @strcmp(i8* %2, i8* %4) nounwind optsize
  ret i32 %5
}

define void @globfree(%struct.glob_t* nocapture %g) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 0
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %._crit_edge2, label %.lr.ph

._crit_edge2:                                     ; preds = %0
  %.pre = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 1
  br label %._crit_edge

.lr.ph:                                           ; preds = %0
  %4 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 2
  %5 = getelementptr inbounds %struct.glob_t* %g, i64 0, i32 1
  br label %6

; <label>:6                                       ; preds = %6, %.lr.ph
  %i.01 = phi i64 [ 0, %.lr.ph ], [ %13, %6 ]
  %7 = load i64* %4, align 8, !tbaa !5
  %8 = add i64 %7, %i.01
  %9 = load i8*** %5, align 8, !tbaa !7
  %10 = getelementptr inbounds i8** %9, i64 %8
  %11 = load i8** %10, align 8, !tbaa !7
  %12 = getelementptr inbounds i8* %11, i64 -8
  tail call void @free(i8* %12) optsize
  %13 = add i64 %i.01, 1
  %14 = load i64* %1, align 8, !tbaa !5
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %6, label %._crit_edge

._crit_edge:                                      ; preds = %6, %._crit_edge2
  %.pre-phi = phi i8*** [ %.pre, %._crit_edge2 ], [ %5, %6 ]
  %16 = load i8*** %.pre-phi, align 8, !tbaa !7
  %17 = bitcast i8** %16 to i8*
  tail call void @free(i8* %17) optsize
  store i64 0, i64* %1, align 8, !tbaa !5
  store i8** null, i8*** %.pre-phi, align 8, !tbaa !7
  ret void
}

define %struct.tm.197* @gmtime(i64* nocapture %t) nounwind uwtable optsize {
  %1 = load i64* %t, align 8, !tbaa !5
  %2 = tail call %struct.tm.197* @__time_to_tm(i64 %1, %struct.tm.197* @gmtime.tm) nounwind optsize
  store i32 0, i32* getelementptr inbounds (%struct.tm.197* @gmtime.tm, i64 0, i32 8), align 8, !tbaa !6
  ret %struct.tm.197* @gmtime.tm
}

define %struct.tm.197* @gmtime_r(i64* nocapture %t, %struct.tm.197* %result) nounwind uwtable optsize {
  %1 = load i64* %t, align 8, !tbaa !5
  %2 = tail call %struct.tm.197* @__time_to_tm(i64 %1, %struct.tm.197* %result) nounwind optsize
  %3 = getelementptr inbounds %struct.tm.197* %result, i64 0, i32 8
  store i32 0, i32* %3, align 4, !tbaa !6
  ret %struct.tm.197* %result
}

define i32 @hcreate(i64 %nel) nounwind uwtable optsize {
  store i64 0, i64* @mask, align 8, !tbaa !5
  store i64 0, i64* @used, align 8, !tbaa !5
  store %struct.entry* null, %struct.entry** @tab, align 8, !tbaa !7
  %1 = tail call fastcc i32 @resize(i64 %nel) optsize
  ret i32 %1
}

define internal fastcc i32 @resize(i64 %nel) nounwind uwtable optsize {
  %1 = load %struct.entry** @tab, align 8, !tbaa !7
  %2 = load i64* @mask, align 8, !tbaa !5
  %.sum = add i64 %2, 1
  %3 = getelementptr inbounds %struct.entry* %1, i64 %.sum
  %4 = icmp ugt i64 %nel, -9223372036854775808
  %.01 = select i1 %4, i64 -9223372036854775808, i64 %nel
  %5 = icmp ugt i64 %.01, 8
  br i1 %5, label %.lr.ph9, label %._crit_edge10

.lr.ph9:                                          ; preds = %.lr.ph9, %0
  %newsize.07 = phi i64 [ %6, %.lr.ph9 ], [ 8, %0 ]
  %6 = shl i64 %newsize.07, 1
  %7 = icmp ult i64 %6, %.01
  br i1 %7, label %.lr.ph9, label %._crit_edge10

._crit_edge10:                                    ; preds = %.lr.ph9, %0
  %newsize.0.lcssa = phi i64 [ 8, %0 ], [ %6, %.lr.ph9 ]
  %8 = tail call i8* @calloc(i64 %newsize.0.lcssa, i64 24) nounwind optsize
  %9 = bitcast i8* %8 to %struct.entry*
  store %struct.entry* %9, %struct.entry** @tab, align 8, !tbaa !7
  %10 = icmp eq i8* %8, null
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %._crit_edge10
  store %struct.entry* %1, %struct.entry** @tab, align 8, !tbaa !7
  br label %40

; <label>:12                                      ; preds = %._crit_edge10
  %13 = add i64 %newsize.0.lcssa, -1
  store i64 %13, i64* @mask, align 8, !tbaa !5
  %14 = icmp eq %struct.entry* %1, null
  br i1 %14, label %40, label %.preheader

.preheader:                                       ; preds = %12
  %15 = icmp sgt i64 %.sum, 0
  br i1 %15, label %.lr.ph5, label %._crit_edge6

.lr.ph5:                                          ; preds = %36, %.preheader
  %e.04 = phi %struct.entry* [ %37, %36 ], [ %1, %.preheader ]
  %16 = getelementptr inbounds %struct.entry* %e.04, i64 0, i32 0, i32 0
  %17 = load i8** %16, align 8, !tbaa !7
  %18 = icmp eq i8* %17, null
  br i1 %18, label %36, label %19

; <label>:19                                      ; preds = %.lr.ph5
  %20 = getelementptr inbounds %struct.entry* %e.04, i64 0, i32 1
  %21 = load i64* %20, align 8, !tbaa !5
  %22 = and i64 %13, %21
  %23 = getelementptr inbounds %struct.entry* %9, i64 %22
  %24 = getelementptr inbounds %struct.entry* %23, i64 0, i32 0, i32 0
  %25 = load i8** %24, align 8, !tbaa !7
  %26 = icmp eq i8* %25, null
  br i1 %26, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %19
  %i.03 = phi i64 [ %28, %.lr.ph ], [ %21, %19 ]
  %j.02 = phi i64 [ %27, %.lr.ph ], [ 1, %19 ]
  %27 = add i64 %j.02, 1
  %28 = add i64 %i.03, %j.02
  %29 = and i64 %13, %28
  %30 = getelementptr inbounds %struct.entry* %9, i64 %29
  %31 = getelementptr inbounds %struct.entry* %30, i64 0, i32 0, i32 0
  %32 = load i8** %31, align 8, !tbaa !7
  %33 = icmp eq i8* %32, null
  br i1 %33, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %19
  %.lcssa = phi %struct.entry* [ %23, %19 ], [ %30, %.lr.ph ]
  %34 = bitcast %struct.entry* %.lcssa to i8*
  %35 = bitcast %struct.entry* %e.04 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 24, i32 8, i1 false)
  br label %36

; <label>:36                                      ; preds = %._crit_edge, %.lr.ph5
  %37 = getelementptr inbounds %struct.entry* %e.04, i64 1
  %38 = icmp ult %struct.entry* %37, %3
  br i1 %38, label %.lr.ph5, label %._crit_edge6

._crit_edge6:                                     ; preds = %36, %.preheader
  %39 = bitcast %struct.entry* %1 to i8*
  tail call void @free(i8* %39) optsize
  br label %40

; <label>:40                                      ; preds = %._crit_edge6, %12, %11
  %.0 = phi i32 [ 1, %._crit_edge6 ], [ 0, %11 ], [ 1, %12 ]
  ret i32 %.0
}

define void @hdestroy() nounwind uwtable optsize {
  %1 = load %struct.entry** @tab, align 8, !tbaa !7
  %2 = bitcast %struct.entry* %1 to i8*
  tail call void @free(i8* %2) optsize
  store %struct.entry* null, %struct.entry** @tab, align 8, !tbaa !7
  store i64 0, i64* @mask, align 8, !tbaa !5
  store i64 0, i64* @used, align 8, !tbaa !5
  ret void
}

define %struct.ENTRY* @hsearch(i8* %item.coerce0, i8* %item.coerce1, i32 %action) nounwind uwtable optsize {
  %1 = load i8* %item.coerce0, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %keyhash.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %0
  %3 = phi i8 [ %8, %.lr.ph.i ], [ %1, %0 ]
  %h.02.i = phi i64 [ %7, %.lr.ph.i ], [ 0, %0 ]
  %p.01.i = phi i8* [ %5, %.lr.ph.i ], [ %item.coerce0, %0 ]
  %4 = mul i64 %h.02.i, 31
  %5 = getelementptr inbounds i8* %p.01.i, i64 1
  %6 = zext i8 %3 to i64
  %7 = add i64 %4, %6
  %8 = load i8* %5, align 1, !tbaa !0
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %keyhash.exit, label %.lr.ph.i

keyhash.exit:                                     ; preds = %.lr.ph.i, %0
  %h.0.lcssa.i = phi i64 [ 0, %0 ], [ %7, %.lr.ph.i ]
  %10 = tail call fastcc %struct.entry* @lookup(i8* %item.coerce0, i64 %h.0.lcssa.i) optsize
  %11 = getelementptr inbounds %struct.entry* %10, i64 0, i32 0, i32 0
  %12 = load i8** %11, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %16, label %14

; <label>:14                                      ; preds = %keyhash.exit
  %15 = getelementptr inbounds %struct.entry* %10, i64 0, i32 0
  br label %37

; <label>:16                                      ; preds = %keyhash.exit
  %17 = icmp eq i32 %action, 0
  br i1 %17, label %37, label %18

; <label>:18                                      ; preds = %16
  store i8* %item.coerce0, i8** %11, align 8
  %.1 = getelementptr inbounds %struct.entry* %10, i64 0, i32 0, i32 1
  store i8* %item.coerce1, i8** %.1, align 8
  %19 = getelementptr inbounds %struct.entry* %10, i64 0, i32 1
  store i64 %h.0.lcssa.i, i64* %19, align 8, !tbaa !5
  %20 = load i64* @used, align 8, !tbaa !5
  %21 = add i64 %20, 1
  store i64 %21, i64* @used, align 8, !tbaa !5
  %22 = load i64* @mask, align 8, !tbaa !5
  %23 = lshr i64 %22, 2
  %24 = sub i64 %22, %23
  %25 = icmp ugt i64 %21, %24
  br i1 %25, label %26, label %35

; <label>:26                                      ; preds = %18
  %27 = shl i64 %21, 1
  %28 = tail call fastcc i32 @resize(i64 %27) optsize
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %33

; <label>:30                                      ; preds = %26
  %31 = load i64* @used, align 8, !tbaa !5
  %32 = add i64 %31, -1
  store i64 %32, i64* @used, align 8, !tbaa !5
  store i8* null, i8** %11, align 8, !tbaa !7
  br label %37

; <label>:33                                      ; preds = %26
  %34 = tail call fastcc %struct.entry* @lookup(i8* %item.coerce0, i64 %h.0.lcssa.i) optsize
  br label %35

; <label>:35                                      ; preds = %33, %18
  %e.0 = phi %struct.entry* [ %34, %33 ], [ %10, %18 ]
  %36 = getelementptr inbounds %struct.entry* %e.0, i64 0, i32 0
  br label %37

; <label>:37                                      ; preds = %35, %30, %16, %14
  %.0 = phi %struct.ENTRY* [ %15, %14 ], [ %36, %35 ], [ null, %30 ], [ null, %16 ]
  ret %struct.ENTRY* %.0
}

define internal fastcc %struct.entry* @lookup(i8* %key, i64 %hash) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %16, %0
  %i.0 = phi i64 [ %hash, %0 ], [ %18, %16 ]
  %j.0 = phi i64 [ 1, %0 ], [ %17, %16 ]
  %2 = load %struct.entry** @tab, align 8, !tbaa !7
  %3 = load i64* @mask, align 8, !tbaa !5
  %4 = and i64 %3, %i.0
  %5 = getelementptr inbounds %struct.entry* %2, i64 %4
  %6 = getelementptr inbounds %struct.entry* %5, i64 0, i32 0, i32 0
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %19, label %9

; <label>:9                                       ; preds = %1
  %10 = getelementptr inbounds %struct.entry* %2, i64 %4, i32 1
  %11 = load i64* %10, align 8, !tbaa !5
  %12 = icmp eq i64 %11, %hash
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %9
  %14 = tail call i32 @strcmp(i8* %7, i8* %key) nounwind optsize
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

; <label>:16                                      ; preds = %13, %9
  %17 = add i64 %j.0, 1
  %18 = add i64 %j.0, %i.0
  br label %1

; <label>:19                                      ; preds = %13, %1
  ret %struct.entry* %5
}

define i8* @hstrerror(i32 %ecode) nounwind uwtable readonly optsize {
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader, %0
  %s.0 = phi i8* [ getelementptr inbounds ([84 x i8]* @msgs261, i64 0, i64 0), %0 ], [ %6, %.preheader ]
  %.0.in = phi i32 [ %ecode, %0 ], [ %.0, %.preheader ]
  %.0 = add nsw i32 %.0.in, -1
  %1 = icmp eq i32 %.0, 0
  %.pre = load i8* %s.0, align 1, !tbaa !0
  br i1 %1, label %.critedge, label %2

; <label>:2                                       ; preds = %.loopexit
  %3 = icmp eq i8 %.pre, 0
  br i1 %3, label %.critedge, label %.preheader

.preheader:                                       ; preds = %._crit_edge, %2
  %4 = phi i8 [ %.pre1, %._crit_edge ], [ %.pre, %2 ]
  %s.1 = phi i8* [ %6, %._crit_edge ], [ %s.0, %2 ]
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds i8* %s.1, i64 1
  br i1 %5, label %.loopexit, label %._crit_edge

._crit_edge:                                      ; preds = %.preheader
  %.pre1 = load i8* %6, align 1, !tbaa !0
  br label %.preheader

.critedge:                                        ; preds = %2, %.loopexit
  %7 = phi i8 [ 0, %2 ], [ %.pre, %.loopexit ]
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds i8* %s.0, i64 1
  %10 = select i1 %8, i8* %s.0, i8* %9
  ret i8* %10
}

define i32 @htonl(i32 %n) nounwind uwtable readnone optsize {
  %1 = tail call i32 @llvm.bswap.i32(i32 %n) nounwind
  ret i32 %1
}

declare i32 @llvm.bswap.i32(i32) nounwind readnone

define zeroext i16 @htons(i16 zeroext %n) nounwind uwtable readnone optsize {
  %1 = tail call i16 @llvm.bswap.i16(i16 %n) nounwind
  ret i16 %1
}

declare i16 @llvm.bswap.i16(i16) nounwind readnone

define float @hypotf(float %x, float %y) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = bitcast float %y to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, %2
  %x.y = select i1 %5, float %x, float %y
  %y.x = select i1 %5, float %y, float %x
  %. = select i1 %5, i32 %4, i32 %2
  %.12 = select i1 %5, i32 %2, i32 %4
  %6 = tail call float @fabsf(float %y.x) nounwind optsize
  %7 = tail call float @fabsf(float %x.y) nounwind optsize
  %8 = sub nsw i32 %., %.12
  %9 = icmp sgt i32 %8, 251658240
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %0
  %11 = fadd float %6, %7
  br label %85

; <label>:12                                      ; preds = %0
  %13 = icmp ugt i32 %., 1484783616
  br i1 %13, label %14, label %29

; <label>:14                                      ; preds = %12
  %15 = icmp ugt i32 %., 2139095039
  br i1 %15, label %16, label %24

; <label>:16                                      ; preds = %14
  %17 = fadd float %x, 0.000000e+00
  %18 = tail call float @fabsf(float %17) nounwind optsize
  %19 = fadd float %y, 0.000000e+00
  %20 = tail call float @fabsf(float %19) nounwind optsize
  %21 = fsub float %18, %20
  %22 = icmp eq i32 %., 2139095040
  %w.0 = select i1 %22, float %6, float %21
  %23 = icmp eq i32 %.12, 2139095040
  %w.1 = select i1 %23, float %7, float %w.0
  br label %85

; <label>:24                                      ; preds = %14
  %25 = add nsw i32 %., -570425344
  %26 = add nsw i32 %.12, -570425344
  %27 = bitcast i32 %25 to float
  %28 = bitcast i32 %26 to float
  br label %29

; <label>:29                                      ; preds = %24, %12
  %k.0 = phi i32 [ 68, %24 ], [ 0, %12 ]
  %b.1 = phi float [ %28, %24 ], [ %7, %12 ]
  %a.1 = phi float [ %27, %24 ], [ %6, %12 ]
  %ha.1 = phi i32 [ %25, %24 ], [ %., %12 ]
  %hb.1 = phi i32 [ %26, %24 ], [ %.12, %12 ]
  %30 = icmp slt i32 %hb.1, 645922816
  br i1 %30, label %31, label %45

; <label>:31                                      ; preds = %29
  %32 = icmp slt i32 %hb.1, 8388608
  br i1 %32, label %33, label %39

; <label>:33                                      ; preds = %31
  %34 = icmp eq i32 %hb.1, 0
  br i1 %34, label %85, label %35

; <label>:35                                      ; preds = %33
  %36 = fmul float %b.1, 0x47D0000000000000
  %37 = fmul float %a.1, 0x47D0000000000000
  %38 = or i32 %k.0, -126
  br label %45

; <label>:39                                      ; preds = %31
  %40 = add nsw i32 %ha.1, 570425344
  %41 = add nsw i32 %hb.1, 570425344
  %42 = add nsw i32 %k.0, -68
  %43 = bitcast i32 %40 to float
  %44 = bitcast i32 %41 to float
  br label %45

; <label>:45                                      ; preds = %39, %35, %29
  %k.1 = phi i32 [ %38, %35 ], [ %42, %39 ], [ %k.0, %29 ]
  %b.2 = phi float [ %36, %35 ], [ %44, %39 ], [ %b.1, %29 ]
  %a.2 = phi float [ %37, %35 ], [ %43, %39 ], [ %a.1, %29 ]
  %ha.2 = phi i32 [ %ha.1, %35 ], [ %40, %39 ], [ %ha.1, %29 ]
  %hb.2 = phi i32 [ %hb.1, %35 ], [ %41, %39 ], [ %hb.1, %29 ]
  %46 = fsub float %a.2, %b.2
  %47 = fcmp ogt float %46, %b.2
  br i1 %47, label %48, label %60

; <label>:48                                      ; preds = %45
  %49 = and i32 %ha.2, -4096
  %50 = bitcast i32 %49 to float
  %51 = fsub float %a.2, %50
  %52 = fmul float %50, %50
  %53 = fsub float -0.000000e+00, %b.2
  %54 = fmul float %b.2, %53
  %55 = fadd float %a.2, %50
  %56 = fmul float %51, %55
  %57 = fsub float %54, %56
  %58 = fsub float %52, %57
  %59 = tail call float @sqrtf(float %58) nounwind optsize
  br label %78

; <label>:60                                      ; preds = %45
  %61 = fadd float %a.2, %a.2
  %62 = and i32 %hb.2, -4096
  %63 = bitcast i32 %62 to float
  %64 = fsub float %b.2, %63
  %65 = add nsw i32 %ha.2, 8388608
  %66 = and i32 %65, -4096
  %67 = bitcast i32 %66 to float
  %68 = fsub float %61, %67
  %69 = fmul float %67, %63
  %70 = fsub float -0.000000e+00, %46
  %71 = fmul float %46, %70
  %72 = fmul float %67, %64
  %73 = fmul float %68, %b.2
  %74 = fadd float %72, %73
  %75 = fsub float %71, %74
  %76 = fsub float %69, %75
  %77 = tail call float @sqrtf(float %76) nounwind optsize
  br label %78

; <label>:78                                      ; preds = %60, %48
  %w.2 = phi float [ %59, %48 ], [ %77, %60 ]
  %79 = icmp eq i32 %k.1, 0
  br i1 %79, label %85, label %80

; <label>:80                                      ; preds = %78
  %81 = shl nsw i32 %k.1, 23
  %82 = add nsw i32 %81, 1065353216
  %83 = bitcast i32 %82 to float
  %84 = fmul float %83, %w.2
  br label %85

; <label>:85                                      ; preds = %80, %78, %33, %16, %10
  %.0 = phi float [ %11, %10 ], [ %84, %80 ], [ %w.1, %16 ], [ %a.1, %33 ], [ %w.2, %78 ]
  ret float %.0
}

define x86_fp80 @hypotl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = bitcast x86_fp80 %y to i80
  %6 = lshr i80 %5, 64
  %7 = trunc i80 %6 to i32
  %8 = and i32 %7, 32767
  %9 = icmp ugt i32 %8, %4
  %. = select i1 %9, i32 %8, i32 %4
  %.81 = select i1 %9, i32 %4, i32 %8
  %x.y = select i1 %9, x86_fp80 %x, x86_fp80 %y
  %y.x = select i1 %9, x86_fp80 %y, x86_fp80 %x
  %10 = tail call x86_fp80 @fabsl(x86_fp80 %y.x) nounwind optsize
  %11 = tail call x86_fp80 @fabsl(x86_fp80 %x.y) nounwind optsize
  %12 = sub nsw i32 %., %.81
  %13 = icmp sgt i32 %12, 71
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %0
  %15 = fadd x86_fp80 %10, %11
  br label %112

; <label>:16                                      ; preds = %0
  %17 = icmp ugt i32 %., 24563
  br i1 %17, label %18, label %46

; <label>:18                                      ; preds = %16
  %19 = icmp eq i32 %., 32767
  br i1 %19, label %20, label %35

; <label>:20                                      ; preds = %18
  %21 = fadd x86_fp80 %x, 0xK00000000000000000000
  %22 = tail call x86_fp80 @fabsl(x86_fp80 %21) nounwind optsize
  %23 = fadd x86_fp80 %y, 0xK00000000000000000000
  %24 = tail call x86_fp80 @fabsl(x86_fp80 %23) nounwind optsize
  %25 = fsub x86_fp80 %22, %24
  %26 = bitcast x86_fp80 %10 to i80
  %27 = and i80 %26, 18446744073709551615
  %28 = icmp eq i80 %27, 9223372036854775808
  %w.0 = select i1 %28, x86_fp80 %10, x86_fp80 %25
  %29 = icmp eq i32 %.81, 32767
  br i1 %29, label %30, label %112

; <label>:30                                      ; preds = %20
  %31 = bitcast x86_fp80 %11 to i80
  %32 = and i80 %31, 18446744073709551615
  %33 = icmp eq i80 %32, 9223372036854775808
  br i1 %33, label %34, label %112

; <label>:34                                      ; preds = %30
  br label %112

; <label>:35                                      ; preds = %18
  %36 = add nsw i32 %., -8280
  %37 = add nsw i32 %.81, -8280
  %38 = bitcast x86_fp80 %10 to i80
  %39 = zext i32 %36 to i80
  %40 = shl i80 %39, 64
  %mask64 = and i80 %38, 18446744073709551615
  %ins65 = or i80 %mask64, %40
  %41 = bitcast i80 %ins65 to x86_fp80
  %42 = bitcast x86_fp80 %11 to i80
  %43 = zext i32 %37 to i80
  %44 = shl i80 %43, 64
  %mask58 = and i80 %42, 18446744073709551615
  %ins59 = or i80 %mask58, %44
  %45 = bitcast i80 %ins59 to x86_fp80
  br label %46

; <label>:46                                      ; preds = %35, %16
  %k.0 = phi i32 [ 8280, %35 ], [ 0, %16 ]
  %ha.1 = phi i32 [ %36, %35 ], [ %., %16 ]
  %hb.1 = phi i32 [ %37, %35 ], [ %.81, %16 ]
  %b.1 = phi x86_fp80 [ %45, %35 ], [ %11, %16 ]
  %a.1 = phi x86_fp80 [ %41, %35 ], [ %10, %16 ]
  %47 = icmp slt i32 %hb.1, 8203
  br i1 %47, label %48, label %72

; <label>:48                                      ; preds = %46
  %49 = icmp slt i32 %hb.1, 1
  br i1 %49, label %50, label %60

; <label>:50                                      ; preds = %48
  %51 = bitcast x86_fp80 %b.1 to i80
  %52 = lshr i80 %51, 32
  %53 = or i80 %52, %51
  %54 = trunc i80 %53 to i32
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %112, label %56

; <label>:56                                      ; preds = %50
  %57 = fmul x86_fp80 %b.1, 0xK7FFD0000000000000000
  %58 = fmul x86_fp80 %a.1, 0xK7FFD0000000000000000
  %59 = or i32 %k.0, -16382
  br label %72

; <label>:60                                      ; preds = %48
  %61 = add nsw i32 %ha.1, 8280
  %62 = add nsw i32 %hb.1, 8280
  %63 = add nsw i32 %k.0, -8280
  %64 = bitcast x86_fp80 %a.1 to i80
  %65 = zext i32 %61 to i80
  %66 = shl i80 %65, 64
  %mask44 = and i80 %64, 18446744073709551615
  %ins45 = or i80 %mask44, %66
  %67 = bitcast i80 %ins45 to x86_fp80
  %68 = bitcast x86_fp80 %b.1 to i80
  %69 = zext i32 %62 to i80
  %70 = shl i80 %69, 64
  %mask38 = and i80 %68, 18446744073709551615
  %ins39 = or i80 %mask38, %70
  %71 = bitcast i80 %ins39 to x86_fp80
  br label %72

; <label>:72                                      ; preds = %60, %56, %46
  %k.1 = phi i32 [ %59, %56 ], [ %63, %60 ], [ %k.0, %46 ]
  %b.2 = phi x86_fp80 [ %57, %56 ], [ %71, %60 ], [ %b.1, %46 ]
  %a.2 = phi x86_fp80 [ %58, %56 ], [ %67, %60 ], [ %a.1, %46 ]
  %73 = fsub x86_fp80 %a.2, %b.2
  %74 = fcmp ogt x86_fp80 %73, %b.2
  br i1 %74, label %75, label %87

; <label>:75                                      ; preds = %72
  %76 = bitcast x86_fp80 %a.2 to i80
  %mask33 = and i80 %76, -4294967296
  %77 = bitcast i80 %mask33 to x86_fp80
  %78 = fsub x86_fp80 %a.2, %77
  %79 = fmul x86_fp80 %77, %77
  %80 = fsub x86_fp80 0xK80000000000000000000, %b.2
  %81 = fmul x86_fp80 %b.2, %80
  %82 = fadd x86_fp80 %a.2, %77
  %83 = fmul x86_fp80 %78, %82
  %84 = fsub x86_fp80 %81, %83
  %85 = fsub x86_fp80 %79, %84
  %86 = tail call x86_fp80 @sqrtl(x86_fp80 %85) nounwind optsize
  br label %104

; <label>:87                                      ; preds = %72
  %88 = fadd x86_fp80 %a.2, %a.2
  %89 = bitcast x86_fp80 %b.2 to i80
  %mask28 = and i80 %89, -4294967296
  %90 = bitcast i80 %mask28 to x86_fp80
  %91 = fsub x86_fp80 %b.2, %90
  %92 = bitcast x86_fp80 %88 to i80
  %mask23 = and i80 %92, -4294967296
  %93 = bitcast i80 %mask23 to x86_fp80
  %94 = fsub x86_fp80 %88, %93
  %95 = fmul x86_fp80 %93, %90
  %96 = fsub x86_fp80 0xK80000000000000000000, %73
  %97 = fmul x86_fp80 %73, %96
  %98 = fmul x86_fp80 %93, %91
  %99 = fmul x86_fp80 %94, %b.2
  %100 = fadd x86_fp80 %98, %99
  %101 = fsub x86_fp80 %97, %100
  %102 = fsub x86_fp80 %95, %101
  %103 = tail call x86_fp80 @sqrtl(x86_fp80 %102) nounwind optsize
  br label %104

; <label>:104                                     ; preds = %87, %75
  %w.2 = phi x86_fp80 [ %86, %75 ], [ %103, %87 ]
  %105 = icmp eq i32 %k.1, 0
  br i1 %105, label %112, label %106

; <label>:106                                     ; preds = %104
  %107 = add i32 %k.1, 16383
  %108 = zext i32 %107 to i80
  %109 = shl i80 %108, 64
  %ins = or i80 %109, 9223372036854775808
  %110 = bitcast i80 %ins to x86_fp80
  %111 = fmul x86_fp80 %110, %w.2
  br label %112

; <label>:112                                     ; preds = %106, %104, %50, %34, %30, %20, %14
  %.0 = phi x86_fp80 [ %15, %14 ], [ %111, %106 ], [ %11, %34 ], [ %w.0, %30 ], [ %w.0, %20 ], [ %a.1, %50 ], [ %w.2, %104 ]
  ret x86_fp80 %.0
}

define double @hypot(double %x, double %y) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast double %y to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = icmp ugt i32 %8, %4
  %. = select i1 %9, i32 %8, i32 %4
  %x.y = select i1 %9, double %x, double %y
  %y.x = select i1 %9, double %y, double %x
  %.39 = select i1 %9, i32 %4, i32 %8
  %10 = tail call double @fabs(double %y.x) nounwind optsize
  %11 = tail call double @fabs(double %x.y) nounwind optsize
  %12 = sub nsw i32 %., %.39
  %13 = icmp sgt i32 %12, 62914560
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %0
  %15 = fadd double %10, %11
  br label %125

; <label>:16                                      ; preds = %0
  %17 = icmp ugt i32 %., 1596981248
  br i1 %17, label %18, label %51

; <label>:18                                      ; preds = %16
  %19 = icmp ugt i32 %., 2146435071
  br i1 %19, label %20, label %36

; <label>:20                                      ; preds = %18
  %21 = fadd double %x, 0.000000e+00
  %22 = tail call double @fabs(double %21) nounwind optsize
  %23 = fadd double %y, 0.000000e+00
  %24 = tail call double @fabs(double %23) nounwind optsize
  %25 = fsub double %22, %24
  %26 = bitcast double %10 to i64
  %27 = trunc i64 %26 to i32
  %28 = and i32 %., 1048575
  %29 = or i32 %27, %28
  %30 = icmp eq i32 %29, 0
  %w.0 = select i1 %30, double %10, double %25
  %31 = bitcast double %11 to i64
  %32 = trunc i64 %31 to i32
  %33 = xor i32 %.39, 2146435072
  %34 = or i32 %32, %33
  %35 = icmp eq i32 %34, 0
  %w.1 = select i1 %35, double %11, double %w.0
  br label %125

; <label>:36                                      ; preds = %18
  %37 = add nsw i32 %., -629145600
  %38 = add nsw i32 %.39, -629145600
  %39 = bitcast double %10 to i64
  %40 = and i64 %39, 4294967295
  %41 = zext i32 %37 to i64
  %42 = shl nuw i64 %41, 32
  %43 = or i64 %40, %42
  %44 = bitcast i64 %43 to double
  %45 = bitcast double %11 to i64
  %46 = and i64 %45, 4294967295
  %47 = zext i32 %38 to i64
  %48 = shl nuw i64 %47, 32
  %49 = or i64 %46, %48
  %50 = bitcast i64 %49 to double
  br label %51

; <label>:51                                      ; preds = %36, %16
  %k.0 = phi i32 [ 600, %36 ], [ 0, %16 ]
  %ha.1 = phi i32 [ %37, %36 ], [ %., %16 ]
  %b.1 = phi double [ %50, %36 ], [ %11, %16 ]
  %a.1 = phi double [ %44, %36 ], [ %10, %16 ]
  %hb.1 = phi i32 [ %38, %36 ], [ %.39, %16 ]
  %52 = icmp slt i32 %hb.1, 548405248
  br i1 %52, label %53, label %80

; <label>:53                                      ; preds = %51
  %54 = icmp slt i32 %hb.1, 1048576
  br i1 %54, label %55, label %64

; <label>:55                                      ; preds = %53
  %56 = bitcast double %b.1 to i64
  %57 = trunc i64 %56 to i32
  %58 = or i32 %hb.1, %57
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %125, label %60

; <label>:60                                      ; preds = %55
  %61 = fmul double %b.1, 0x7FD0000000000000
  %62 = fmul double %a.1, 0x7FD0000000000000
  %63 = or i32 %k.0, -1022
  br label %80

; <label>:64                                      ; preds = %53
  %65 = add nsw i32 %ha.1, 629145600
  %66 = add nsw i32 %hb.1, 629145600
  %67 = add nsw i32 %k.0, -600
  %68 = bitcast double %a.1 to i64
  %69 = and i64 %68, 4294967295
  %70 = zext i32 %65 to i64
  %71 = shl nuw i64 %70, 32
  %72 = or i64 %69, %71
  %73 = bitcast i64 %72 to double
  %74 = bitcast double %b.1 to i64
  %75 = and i64 %74, 4294967295
  %76 = zext i32 %66 to i64
  %77 = shl nuw i64 %76, 32
  %78 = or i64 %77, %75
  %79 = bitcast i64 %78 to double
  br label %80

; <label>:80                                      ; preds = %64, %60, %51
  %k.1 = phi i32 [ %63, %60 ], [ %67, %64 ], [ %k.0, %51 ]
  %ha.2 = phi i32 [ %ha.1, %60 ], [ %65, %64 ], [ %ha.1, %51 ]
  %b.2 = phi double [ %61, %60 ], [ %79, %64 ], [ %b.1, %51 ]
  %a.2 = phi double [ %62, %60 ], [ %73, %64 ], [ %a.1, %51 ]
  %hb.2 = phi i32 [ %hb.1, %60 ], [ %66, %64 ], [ %hb.1, %51 ]
  %81 = fsub double %a.2, %b.2
  %82 = fcmp ogt double %81, %b.2
  br i1 %82, label %83, label %96

; <label>:83                                      ; preds = %80
  %84 = zext i32 %ha.2 to i64
  %85 = shl nuw i64 %84, 32
  %86 = bitcast i64 %85 to double
  %87 = fsub double %a.2, %86
  %88 = fmul double %86, %86
  %89 = fsub double -0.000000e+00, %b.2
  %90 = fmul double %b.2, %89
  %91 = fadd double %a.2, %86
  %92 = fmul double %87, %91
  %93 = fsub double %90, %92
  %94 = fsub double %88, %93
  %95 = tail call double @sqrt(double %94) nounwind optsize
  br label %116

; <label>:96                                      ; preds = %80
  %97 = fadd double %a.2, %a.2
  %98 = zext i32 %hb.2 to i64
  %99 = shl nuw i64 %98, 32
  %100 = bitcast i64 %99 to double
  %101 = fsub double %b.2, %100
  %102 = add nsw i32 %ha.2, 1048576
  %103 = zext i32 %102 to i64
  %104 = shl nuw i64 %103, 32
  %105 = bitcast i64 %104 to double
  %106 = fsub double %97, %105
  %107 = fmul double %105, %100
  %108 = fsub double -0.000000e+00, %81
  %109 = fmul double %81, %108
  %110 = fmul double %105, %101
  %111 = fmul double %106, %b.2
  %112 = fadd double %110, %111
  %113 = fsub double %109, %112
  %114 = fsub double %107, %113
  %115 = tail call double @sqrt(double %114) nounwind optsize
  br label %116

; <label>:116                                     ; preds = %96, %83
  %w.2 = phi double [ %95, %83 ], [ %115, %96 ]
  %117 = icmp eq i32 %k.1, 0
  br i1 %117, label %125, label %118

; <label>:118                                     ; preds = %116
  %119 = shl nsw i32 %k.1, 20
  %120 = add i32 %119, 1072693248
  %121 = zext i32 %120 to i64
  %122 = shl nuw i64 %121, 32
  %123 = bitcast i64 %122 to double
  %124 = fmul double %123, %w.2
  br label %125

; <label>:125                                     ; preds = %118, %116, %55, %20, %14
  %.0 = phi double [ %15, %14 ], [ %124, %118 ], [ %w.1, %20 ], [ %a.1, %55 ], [ %w.2, %116 ]
  ret double %.0
}

define i8* @iconv_open(i8* nocapture %to, i8* nocapture %from) nounwind uwtable optsize {
  %1 = tail call fastcc i64 @find_charmap(i8* %to) optsize
  %2 = icmp eq i64 %1, -1
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call fastcc i64 @find_charmap(i8* %from) optsize
  %5 = icmp eq i64 %4, -1
  %6 = icmp ugt i64 %1, 207
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %7, label %9

; <label>:7                                       ; preds = %3, %0
  %8 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %8, align 4, !tbaa !6
  br label %13

; <label>:9                                       ; preds = %3
  %10 = shl i64 %4, 16
  %11 = or i64 %10, %1
  %12 = inttoptr i64 %11 to i8*
  br label %13

; <label>:13                                      ; preds = %9, %7
  %.0 = phi i8* [ inttoptr (i64 -1 to i8*), %7 ], [ %12, %9 ]
  ret i8* %.0
}

define internal fastcc i64 @find_charmap(i8* nocapture %name) nounwind uwtable optsize {
  br label %.backedge

.backedge:                                        ; preds = %43, %41, %fuzzycmp.exit.thread, %0
  %s.0 = phi i8* [ getelementptr inbounds ([3964 x i8]* @charmaps, i64 0, i64 0), %0 ], [ %34, %fuzzycmp.exit.thread ], [ %42, %41 ], [ %50, %43 ]
  %1 = load i8* %s.0, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %.loopexit, label %.preheader4

.preheader4:                                      ; preds = %19, %.backedge
  %.pre10.i = phi i8 [ %.pre10.i.pre, %19 ], [ %1, %.backedge ]
  %.02.i = phi i8* [ %21, %19 ], [ %s.0, %.backedge ]
  %.01.i = phi i8* [ %20, %19 ], [ %name, %.backedge ]
  %3 = load i8* %.01.i, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %fuzzycmp.exit, label %5

; <label>:5                                       ; preds = %.preheader4
  %6 = icmp eq i8 %.pre10.i, 0
  br i1 %6, label %fuzzycmp.exit, label %.preheader.i

.preheader.i:                                     ; preds = %15, %5
  %7 = phi i8 [ %.pre.i, %15 ], [ %3, %5 ]
  %.1.i = phi i8* [ %16, %15 ], [ %.01.i, %5 ]
  %8 = zext i8 %7 to i32
  %9 = icmp eq i8 %7, 0
  %.pre11.i = or i32 %8, 32
  br i1 %9, label %.critedge3.i, label %10

; <label>:10                                      ; preds = %.preheader.i
  %11 = add i32 %.pre11.i, -97
  %12 = icmp ugt i32 %11, 26
  %13 = add nsw i32 %8, -48
  %14 = icmp ugt i32 %13, 10
  %or.cond.i = and i1 %12, %14
  br i1 %or.cond.i, label %15, label %.critedge3.i

; <label>:15                                      ; preds = %10
  %16 = getelementptr inbounds i8* %.1.i, i64 1
  %.pre.i = load i8* %16, align 1, !tbaa !0
  br label %.preheader.i

.critedge3.i:                                     ; preds = %10, %.preheader.i
  %17 = zext i8 %.pre10.i to i32
  %18 = icmp eq i32 %.pre11.i, %17
  br i1 %18, label %19, label %fuzzycmp.exit.thread

; <label>:19                                      ; preds = %.critedge3.i
  %20 = getelementptr inbounds i8* %.1.i, i64 1
  %21 = getelementptr inbounds i8* %.02.i, i64 1
  %.pre10.i.pre = load i8* %21, align 1, !tbaa !0
  br label %.preheader4

fuzzycmp.exit:                                    ; preds = %5, %.preheader4
  %22 = phi i8 [ 0, %5 ], [ %.pre10.i, %.preheader4 ]
  %23 = icmp eq i8 %3, %22
  br i1 %23, label %.lr.ph, label %fuzzycmp.exit.thread

.lr.ph:                                           ; preds = %.lr.ph, %fuzzycmp.exit
  %s.13 = phi i8* [ %26, %.lr.ph ], [ %s.0, %fuzzycmp.exit ]
  %24 = tail call i64 @strlen(i8* %s.13) nounwind optsize
  %25 = add i64 %24, 1
  %26 = getelementptr inbounds i8* %s.13, i64 %25
  %27 = load i8* %26, align 1, !tbaa !0
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph
  %.sum11 = add i64 %24, 2
  %29 = getelementptr inbounds i8* %s.13, i64 %.sum11
  %30 = ptrtoint i8* %29 to i64
  %31 = sub i64 %30, ptrtoint ([3964 x i8]* @charmaps to i64)
  br label %.loopexit

fuzzycmp.exit.thread:                             ; preds = %fuzzycmp.exit, %.critedge3.i
  %32 = tail call i64 @strlen(i8* %s.0) nounwind optsize
  %33 = add i64 %32, 1
  %34 = getelementptr inbounds i8* %s.0, i64 %33
  %35 = load i8* %34, align 1, !tbaa !0
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %.backedge

; <label>:37                                      ; preds = %fuzzycmp.exit.thread
  %.sum = add i64 %32, 2
  %38 = getelementptr inbounds i8* %s.0, i64 %.sum
  %39 = load i8* %38, align 1, !tbaa !0
  %40 = icmp ugt i8 %39, -128
  br i1 %40, label %41, label %43

; <label>:41                                      ; preds = %37
  %.sum2 = add i64 %32, 3
  %42 = getelementptr inbounds i8* %s.0, i64 %.sum2
  br label %.backedge

; <label>:43                                      ; preds = %37
  %44 = zext i8 %39 to i32
  %45 = sub i32 128, %44
  %46 = lshr i32 %45, 2
  %47 = mul i32 %46, 5
  %48 = add i32 %47, 2
  %49 = zext i32 %48 to i64
  %.sum1 = add i64 %49, %33
  %50 = getelementptr inbounds i8* %s.0, i64 %.sum1
  br label %.backedge

.loopexit:                                        ; preds = %._crit_edge, %.backedge
  %.0 = phi i64 [ %31, %._crit_edge ], [ -1, %.backedge ]
  ret i64 %.0
}

define i32 @iconv_close(i8* nocapture %cd) nounwind uwtable readnone optsize {
  ret i32 0
}

define i64 @iconv(i8* %cd0, i8** %in, i64* nocapture %inb, i8** nocapture %out, i64* nocapture %outb) nounwind uwtable optsize {
  %st = alloca i64, align 8
  %tmpcast = bitcast i64* %st to %struct.mbstate_t*
  %wc = alloca i32, align 4
  %tmp = alloca [4 x i8], align 1
  %1 = ptrtoint i8* %cd0 to i64
  %2 = and i64 %1, 65535
  %3 = lshr i64 %1, 16
  %4 = trunc i64 %3 to i32
  %5 = and i64 %3, 4294967295
  %.sum = add i64 %5, 1
  store i64 0, i64* %st, align 8
  %6 = getelementptr inbounds [3964 x i8]* @charmaps, i64 0, i64 %5
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = getelementptr inbounds [3964 x i8]* @charmaps, i64 0, i64 %2
  %9 = load i8* %8, align 1, !tbaa !0
  %10 = icmp eq i8** %in, null
  br i1 %10, label %.loopexit35, label %11

; <label>:11                                      ; preds = %0
  %12 = load i8** %in, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %.loopexit35, label %14

; <label>:14                                      ; preds = %11
  %15 = load i64* %inb, align 8, !tbaa !5
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %.loopexit35, label %.preheader34

.preheader34:                                     ; preds = %14
  %17 = zext i8 %7 to i32
  %18 = add nsw i32 %17, 128
  %19 = and i32 %17, 3
  %20 = zext i32 %19 to i64
  %21 = xor i32 %19, 1
  %22 = zext i32 %21 to i64
  %23 = xor i32 %19, 2
  %24 = zext i32 %23 to i64
  %25 = xor i32 %19, 3
  %26 = zext i32 %25 to i64
  %27 = and i32 %17, 1
  %28 = zext i32 %27 to i64
  %29 = sub nsw i32 1, %27
  %30 = zext i32 %29 to i64
  %31 = add nsw i32 %17, -196
  %32 = icmp ult i32 %31, 2
  %33 = and i32 %4, 1
  %34 = sub nsw i32 1, %33
  %35 = zext i32 %33 to i64
  %36 = zext i32 %34 to i64
  %.sum2021 = or i64 %35, 2
  %.sum2223 = or i64 %36, 2
  %37 = icmp eq i8 %7, -38
  %38 = icmp eq i8 %7, -40
  %39 = zext i8 %9 to i32
  %40 = add nsw i32 %39, 128
  %41 = sub nsw i32 128, %39
  %42 = getelementptr inbounds [4 x i8]* %tmp, i64 0, i64 0
  %43 = and i32 %39, 1
  %44 = zext i32 %43 to i64
  %45 = sub nsw i32 1, %43
  %46 = zext i32 %45 to i64
  %.sum1617 = or i64 %44, 2
  %.sum1819 = or i64 %46, 2
  %47 = and i32 %39, 3
  %48 = zext i32 %47 to i64
  %49 = xor i32 %47, 1
  %50 = zext i32 %49 to i64
  %51 = xor i32 %47, 2
  %52 = zext i32 %51 to i64
  %53 = xor i32 %47, 3
  %54 = zext i32 %53 to i64
  br label %55

; <label>:55                                      ; preds = %417, %.preheader34
  %56 = phi i8* [ %419, %417 ], [ %12, %.preheader34 ]
  %57 = phi i64 [ %421, %417 ], [ %15, %.preheader34 ]
  %x.0 = phi i64 [ %x.3, %417 ], [ 0, %.preheader34 ]
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %.loopexit35, label %59

; <label>:59                                      ; preds = %55
  %60 = load i8* %56, align 1, !tbaa !0
  %61 = zext i8 %60 to i32
  %62 = icmp slt i8 %60, 0
  br i1 %62, label %63, label %.loopexit31

; <label>:63                                      ; preds = %59
  switch i32 %17, label %258 [
    i32 200, label %64
    i32 198, label %.loopexit36
    i32 199, label %69
    i32 192, label %74
    i32 195, label %74
    i32 196, label %99
    i32 197, label %99
    i32 194, label %99
    i32 193, label %99
    i32 209, label %132
    i32 208, label %171
    i32 218, label %195
    i32 217, label %197
    i32 216, label %197
  ]

; <label>:64                                      ; preds = %63
  %65 = call i64 @mbrtowc(i32* %wc, i8* %56, i64 %57, %struct.mbstate_t* %tmpcast) nounwind optsize
  switch i64 %65, label %67 [
    i64 0, label %66
    i64 -1, label %.loopexit36
    i64 -2, label %422
  ]

; <label>:66                                      ; preds = %64
  br label %67

; <label>:67                                      ; preds = %66, %64
  %l.0 = phi i64 [ 1, %66 ], [ %65, %64 ]
  %68 = load i32* %wc, align 4, !tbaa !6
  br label %.loopexit31

; <label>:69                                      ; preds = %63
  %70 = icmp ult i64 %57, 4
  br i1 %70, label %422, label %71

; <label>:71                                      ; preds = %69
  %72 = bitcast i8* %56 to i32*
  %73 = load i32* %72, align 4, !tbaa !6
  br label %95

; <label>:74                                      ; preds = %63, %63
  %75 = icmp ult i64 %57, 4
  br i1 %75, label %422, label %76

; <label>:76                                      ; preds = %74
  %77 = getelementptr inbounds i8* %56, i64 %20
  %78 = load i8* %77, align 1, !tbaa !0
  %79 = zext i8 %78 to i32
  %80 = shl nuw i32 %79, 24
  %81 = getelementptr inbounds i8* %56, i64 %22
  %82 = load i8* %81, align 1, !tbaa !0
  %83 = zext i8 %82 to i32
  %84 = shl nuw nsw i32 %83, 16
  %85 = getelementptr inbounds i8* %56, i64 %24
  %86 = load i8* %85, align 1, !tbaa !0
  %87 = zext i8 %86 to i32
  %88 = shl nuw nsw i32 %87, 8
  %89 = getelementptr inbounds i8* %56, i64 %26
  %90 = load i8* %89, align 1, !tbaa !0
  %91 = zext i8 %90 to i32
  %92 = or i32 %84, %80
  %93 = or i32 %92, %88
  %94 = or i32 %93, %91
  br label %95

; <label>:95                                      ; preds = %76, %71
  %c.0 = phi i32 [ %94, %76 ], [ %73, %71 ]
  %96 = add i32 %c.0, -55296
  %97 = icmp ult i32 %96, 2048
  %98 = icmp ugt i32 %c.0, 1114111
  %or.cond = or i1 %97, %98
  br i1 %or.cond, label %.loopexit36, label %.loopexit31

; <label>:99                                      ; preds = %63, %63, %63, %63
  %100 = icmp ult i64 %57, 2
  br i1 %100, label %422, label %101

; <label>:101                                     ; preds = %99
  %102 = getelementptr inbounds i8* %56, i64 %28
  %103 = load i8* %102, align 1, !tbaa !0
  %104 = zext i8 %103 to i32
  %105 = shl nuw nsw i32 %104, 8
  %106 = getelementptr inbounds i8* %56, i64 %30
  %107 = load i8* %106, align 1, !tbaa !0
  %108 = zext i8 %107 to i32
  %109 = or i32 %105, %108
  %110 = add i32 %109, -56320
  %111 = icmp ult i32 %110, 1024
  br i1 %111, label %.loopexit36, label %112

; <label>:112                                     ; preds = %101
  %113 = add i32 %109, -55296
  %114 = icmp ult i32 %113, 1024
  br i1 %114, label %115, label %.loopexit31

; <label>:115                                     ; preds = %112
  br i1 %32, label %.loopexit36, label %116

; <label>:116                                     ; preds = %115
  %117 = icmp ult i64 %57, 4
  br i1 %117, label %422, label %118

; <label>:118                                     ; preds = %116
  %119 = icmp ugt i32 %110, 1023
  br i1 %119, label %.loopexit36, label %120

; <label>:120                                     ; preds = %118
  %121 = getelementptr inbounds i8* %56, i64 %.sum2021
  %122 = getelementptr inbounds i8* %56, i64 %.sum2223
  %123 = load i8* %121, align 1, !tbaa !0
  %124 = load i8* %122, align 1, !tbaa !0
  %125 = zext i8 %123 to i32
  %126 = zext i8 %124 to i32
  %127 = shl nuw nsw i32 %125, 8
  %128 = or i32 %127, %126
  %129 = shl nsw i32 %113, 10
  %130 = add i32 %128, -56320
  %131 = or i32 %130, %129
  br label %.loopexit31

; <label>:132                                     ; preds = %63
  %133 = add i32 %61, -161
  %134 = icmp ult i32 %133, 63
  br i1 %134, label %135, label %137

; <label>:135                                     ; preds = %132
  %136 = add i32 %61, 65216
  br label %.loopexit31

; <label>:137                                     ; preds = %132
  %138 = icmp ult i64 %57, 2
  br i1 %138, label %422, label %139

; <label>:139                                     ; preds = %137
  %140 = getelementptr inbounds i8* %56, i64 1
  %141 = load i8* %140, align 1, !tbaa !0
  %142 = zext i8 %141 to i32
  %143 = add i32 %61, -129
  %144 = icmp ult i32 %143, 31
  br i1 %144, label %150, label %145

; <label>:145                                     ; preds = %139
  %146 = add i32 %61, -224
  %147 = icmp ult i32 %146, 16
  br i1 %147, label %148, label %.loopexit36

; <label>:148                                     ; preds = %145
  %149 = add i32 %61, -193
  br label %150

; <label>:150                                     ; preds = %148, %139
  %c.1 = phi i32 [ %149, %148 ], [ %143, %139 ]
  %151 = shl nsw i32 %c.1, 1
  %152 = add i32 %142, -64
  %153 = icmp ult i32 %152, 95
  br i1 %153, label %154, label %159

; <label>:154                                     ; preds = %150
  %155 = icmp eq i8 %141, 127
  br i1 %155, label %.loopexit36, label %156

; <label>:156                                     ; preds = %154
  %.lobit = ashr i8 %141, 7
  %157 = sext i8 %.lobit to i32
  %158 = add i32 %152, %157
  br label %164

; <label>:159                                     ; preds = %150
  %160 = add i32 %142, -159
  %161 = icmp ult i32 %160, 94
  %162 = zext i1 %161 to i32
  %.11 = or i32 %151, %162
  br i1 %161, label %163, label %164

; <label>:163                                     ; preds = %159
  br label %164

; <label>:164                                     ; preds = %163, %159, %156
  %c.2 = phi i32 [ %151, %156 ], [ %.11, %163 ], [ %.11, %159 ]
  %d.1 = phi i32 [ %158, %156 ], [ %160, %163 ], [ %142, %159 ]
  %165 = zext i32 %d.1 to i64
  %166 = zext i32 %c.2 to i64
  %167 = getelementptr inbounds [84 x [94 x i16]]* @jis0208, i64 0, i64 %166, i64 %165
  %168 = load i16* %167, align 2, !tbaa !8
  %169 = zext i16 %168 to i32
  %170 = icmp eq i16 %168, 0
  br i1 %170, label %.loopexit36, label %.loopexit31

; <label>:171                                     ; preds = %63
  %172 = icmp ult i64 %57, 2
  br i1 %172, label %422, label %173

; <label>:173                                     ; preds = %171
  %174 = getelementptr inbounds i8* %56, i64 1
  %175 = load i8* %174, align 1, !tbaa !0
  %176 = zext i8 %175 to i32
  %177 = icmp eq i8 %60, -114
  br i1 %177, label %178, label %183

; <label>:178                                     ; preds = %173
  %179 = add i32 %176, -161
  %180 = icmp ugt i32 %179, 62
  br i1 %180, label %.loopexit36, label %181

; <label>:181                                     ; preds = %178
  %182 = add i32 %176, 65216
  br label %.loopexit31

; <label>:183                                     ; preds = %173
  %184 = add i32 %61, -161
  %185 = add i32 %176, -161
  %186 = icmp ugt i32 %184, 83
  %187 = icmp ugt i32 %185, 93
  %or.cond12 = or i1 %186, %187
  br i1 %or.cond12, label %.loopexit36, label %188

; <label>:188                                     ; preds = %183
  %189 = zext i32 %185 to i64
  %190 = zext i32 %184 to i64
  %191 = getelementptr inbounds [84 x [94 x i16]]* @jis0208, i64 0, i64 %190, i64 %189
  %192 = load i16* %191, align 2, !tbaa !8
  %193 = zext i16 %192 to i32
  %194 = icmp eq i16 %192, 0
  br i1 %194, label %.loopexit36, label %.loopexit31

; <label>:195                                     ; preds = %63
  %196 = icmp ult i8 %60, -95
  br i1 %196, label %.loopexit36, label %197

; <label>:197                                     ; preds = %195, %63, %63
  %198 = add i32 %61, -129
  %199 = icmp ugt i32 %198, 125
  br i1 %199, label %.loopexit36, label %200

; <label>:200                                     ; preds = %197
  %201 = icmp ult i64 %57, 2
  br i1 %201, label %422, label %202

; <label>:202                                     ; preds = %200
  %203 = getelementptr inbounds i8* %56, i64 1
  %204 = load i8* %203, align 1, !tbaa !0
  %205 = zext i8 %204 to i32
  %206 = icmp ult i8 %204, -95
  %or.cond13 = and i1 %206, %37
  br i1 %or.cond13, label %.loopexit36, label %207

; <label>:207                                     ; preds = %202
  %208 = add i32 %205, -64
  %209 = icmp ugt i32 %208, 190
  %210 = icmp eq i8 %204, 127
  %or.cond3 = or i1 %209, %210
  br i1 %or.cond3, label %211, label %250

; <label>:211                                     ; preds = %207
  %212 = add i32 %205, -48
  %213 = icmp ult i32 %212, 10
  %or.cond14 = and i1 %213, %38
  br i1 %or.cond14, label %214, label %.loopexit36

; <label>:214                                     ; preds = %211
  %215 = icmp ult i64 %57, 4
  br i1 %215, label %422, label %216

; <label>:216                                     ; preds = %214
  %217 = getelementptr inbounds i8* %56, i64 2
  %218 = load i8* %217, align 1, !tbaa !0
  %219 = zext i8 %218 to i32
  %220 = add i32 %219, -129
  %221 = icmp ugt i32 %220, 126
  br i1 %221, label %.loopexit36, label %222

; <label>:222                                     ; preds = %216
  %223 = getelementptr inbounds i8* %56, i64 3
  %224 = load i8* %223, align 1, !tbaa !0
  %225 = zext i8 %224 to i32
  %226 = add i32 %225, -48
  %227 = icmp ugt i32 %226, 9
  br i1 %227, label %.loopexit36, label %228

; <label>:228                                     ; preds = %222
  %229 = mul i32 %198, 10
  %230 = add i32 %205, %229
  %231 = mul i32 %230, 1260
  %232 = mul i32 %220, 10
  %233 = add i32 %231, -60352
  %234 = add i32 %233, %232
  %235 = add i32 %234, %226
  br label %.preheader28

.preheader28:                                     ; preds = %244, %228
  %d.233 = phi i32 [ 0, %228 ], [ %245, %244 ]
  %c.332 = phi i32 [ %235, %228 ], [ %248, %244 ]
  %236 = sub i32 %c.332, %d.233
  br label %.preheader25

.preheader25:                                     ; preds = %243, %.preheader28
  %indvars.iv40 = phi i64 [ 0, %.preheader28 ], [ %indvars.iv.next41, %243 ]
  %k.029 = phi i64 [ 0, %.preheader28 ], [ %k.1., %243 ]
  br label %237

; <label>:237                                     ; preds = %237, %.preheader25
  %indvars.iv = phi i64 [ 0, %.preheader25 ], [ %indvars.iv.next, %237 ]
  %k.126 = phi i64 [ %k.029, %.preheader25 ], [ %k.1., %237 ]
  %238 = getelementptr inbounds [126 x [190 x i16]]* @gb18030, i64 0, i64 %indvars.iv40, i64 %indvars.iv
  %239 = load i16* %238, align 2, !tbaa !8
  %240 = zext i16 %239 to i32
  %241 = sub i32 %240, %d.233
  %not. = icmp ule i32 %241, %236
  %242 = zext i1 %not. to i64
  %k.1. = add i64 %242, %k.126
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 190
  br i1 %exitcond, label %243, label %237

; <label>:243                                     ; preds = %237
  %indvars.iv.next41 = add i64 %indvars.iv40, 1
  %lftr.wideiv42 = trunc i64 %indvars.iv.next41 to i32
  %exitcond43 = icmp eq i32 %lftr.wideiv42, 126
  br i1 %exitcond43, label %244, label %.preheader25

; <label>:244                                     ; preds = %243
  %245 = add i32 %c.332, 1
  %246 = zext i32 %c.332 to i64
  %247 = add i64 %k.1., %246
  %248 = trunc i64 %247 to i32
  %249 = icmp ugt i32 %245, %248
  br i1 %249, label %.loopexit31, label %.preheader28

; <label>:250                                     ; preds = %207
  %251 = add i32 %205, -65
  %252 = icmp ugt i32 %208, 63
  %.15 = select i1 %252, i32 %251, i32 %208
  %253 = zext i32 %.15 to i64
  %254 = zext i32 %198 to i64
  %255 = getelementptr inbounds [126 x [190 x i16]]* @gb18030, i64 0, i64 %254, i64 %253
  %256 = load i16* %255, align 2, !tbaa !8
  %257 = zext i16 %256 to i32
  br label %.loopexit31

; <label>:258                                     ; preds = %63
  %259 = icmp ult i32 %61, %18
  br i1 %259, label %.loopexit31, label %260

; <label>:260                                     ; preds = %258
  %261 = sub i32 %61, %18
  %262 = mul i32 %261, 5
  %263 = lshr i32 %262, 2
  %264 = zext i32 %263 to i64
  %.sum9 = add i64 %264, %.sum
  %265 = getelementptr inbounds [3964 x i8]* @charmaps, i64 0, i64 %.sum9
  %266 = load i8* %265, align 1, !tbaa !0
  %267 = zext i8 %266 to i32
  %268 = shl nsw i32 %261, 1
  %269 = and i32 %268, 6
  %270 = lshr i32 %267, %269
  %271 = add i32 %263, 1
  %272 = zext i32 %271 to i64
  %.sum10 = add i64 %272, %.sum
  %273 = getelementptr inbounds [3964 x i8]* @charmaps, i64 0, i64 %.sum10
  %274 = load i8* %273, align 1, !tbaa !0
  %275 = zext i8 %274 to i32
  %276 = sub i32 8, %269
  %277 = shl i32 %275, %276
  %278 = and i32 %277, 1023
  %279 = or i32 %278, %270
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [623 x i16]* @legacy_chars, i64 0, i64 %280
  %282 = load i16* %281, align 2, !tbaa !8
  %283 = zext i16 %282 to i32
  %284 = icmp eq i32 %279, 0
  %c.4 = select i1 %284, i32 %61, i32 %283
  %285 = icmp eq i32 %c.4, 1
  br i1 %285, label %.loopexit36, label %.loopexit31

.loopexit31:                                      ; preds = %260, %258, %250, %244, %188, %181, %164, %135, %120, %112, %95, %67, %59
  %c.5 = phi i32 [ %61, %258 ], [ %c.4, %260 ], [ %257, %250 ], [ %182, %181 ], [ %193, %188 ], [ %136, %135 ], [ %169, %164 ], [ %131, %120 ], [ %109, %112 ], [ %c.0, %95 ], [ %68, %67 ], [ %61, %59 ], [ %248, %244 ]
  %l.2 = phi i64 [ 1, %258 ], [ 1, %260 ], [ 2, %250 ], [ 2, %181 ], [ 2, %188 ], [ 1, %135 ], [ 2, %164 ], [ 4, %120 ], [ 2, %112 ], [ 4, %95 ], [ %l.0, %67 ], [ 1, %59 ], [ 4, %244 ]
  switch i32 %39, label %._crit_edge [
    i32 199, label %286
    i32 200, label %294
    i32 198, label %314
    i32 196, label %356
    i32 197, label %356
    i32 194, label %356
    i32 193, label %356
    i32 192, label %397
    i32 195, label %397
  ]

; <label>:286                                     ; preds = %.loopexit31
  %287 = load i64* %outb, align 8, !tbaa !5
  %288 = icmp ult i64 %287, 4
  br i1 %288, label %.loopexit36, label %289

; <label>:289                                     ; preds = %286
  %290 = load i8** %out, align 8, !tbaa !7
  %291 = bitcast i8* %290 to i32*
  store i32 %c.5, i32* %291, align 4, !tbaa !6
  %292 = getelementptr inbounds i8* %290, i64 4
  store i8* %292, i8** %out, align 8, !tbaa !7
  %293 = add i64 %287, -4
  store i64 %293, i64* %outb, align 8, !tbaa !5
  br label %417

; <label>:294                                     ; preds = %.loopexit31
  %295 = load i64* %outb, align 8, !tbaa !5
  %296 = icmp ult i64 %295, 4
  br i1 %296, label %297, label %305

; <label>:297                                     ; preds = %294
  %298 = call i32 @wctomb(i8* %42, i32 %c.5) nounwind optsize
  %299 = sext i32 %298 to i64
  %300 = load i64* %outb, align 8, !tbaa !5
  %301 = icmp ult i64 %300, %299
  br i1 %301, label %.loopexit36, label %302

; <label>:302                                     ; preds = %297
  %303 = load i8** %out, align 8, !tbaa !7
  %304 = call i8* @memcpy(i8* %303, i8* %42, i64 %299) nounwind optsize
  br label %309

; <label>:305                                     ; preds = %294
  %306 = load i8** %out, align 8, !tbaa !7
  %307 = call i32 @wctomb(i8* %306, i32 %c.5) nounwind optsize
  %308 = sext i32 %307 to i64
  br label %309

; <label>:309                                     ; preds = %305, %302
  %k.3 = phi i64 [ %299, %302 ], [ %308, %305 ]
  %310 = load i8** %out, align 8, !tbaa !7
  %311 = getelementptr inbounds i8* %310, i64 %k.3
  store i8* %311, i8** %out, align 8, !tbaa !7
  %312 = load i64* %outb, align 8, !tbaa !5
  %313 = sub i64 %312, %k.3
  store i64 %313, i64* %outb, align 8, !tbaa !5
  br label %417

; <label>:314                                     ; preds = %.loopexit31
  %315 = icmp ugt i32 %c.5, 127
  br i1 %315, label %.loopexit, label %._crit_edge

.loopexit:                                        ; preds = %.preheader, %314
  %x.1 = phi i64 [ %x.0, %314 ], [ %x.2, %.preheader ]
  %316 = add i64 %x.1, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %.loopexit, %314, %.loopexit31
  %c.6 = phi i32 [ 42, %.loopexit ], [ %c.5, %.loopexit31 ], [ %c.5, %314 ]
  %x.2 = phi i64 [ %316, %.loopexit ], [ %x.0, %.loopexit31 ], [ %x.0, %314 ]
  %317 = load i64* %outb, align 8, !tbaa !5
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %.loopexit36, label %319

; <label>:319                                     ; preds = %._crit_edge
  %320 = icmp ult i32 %c.6, %40
  br i1 %320, label %321, label %.preheader

; <label>:321                                     ; preds = %352, %319
  %c.7 = phi i32 [ %c.6, %319 ], [ %353, %352 ]
  %322 = trunc i32 %c.7 to i8
  %323 = load i8** %out, align 8, !tbaa !7
  %324 = getelementptr inbounds i8* %323, i64 1
  store i8* %324, i8** %out, align 8, !tbaa !7
  store i8 %322, i8* %323, align 1, !tbaa !0
  %325 = load i64* %outb, align 8, !tbaa !5
  %326 = add i64 %325, -1
  store i64 %326, i64* %outb, align 8, !tbaa !5
  br label %417

.preheader:                                       ; preds = %354, %319
  %c.8 = phi i32 [ %355, %354 ], [ 0, %319 ]
  %327 = icmp ult i32 %c.8, %41
  br i1 %327, label %328, label %.loopexit

; <label>:328                                     ; preds = %.preheader
  %329 = mul i32 %c.8, 5
  %330 = lshr i32 %329, 2
  %331 = zext i32 %330 to i64
  %.sum7 = add i64 %331, %.sum
  %332 = getelementptr inbounds [3964 x i8]* @charmaps, i64 0, i64 %.sum7
  %333 = load i8* %332, align 1, !tbaa !0
  %334 = zext i8 %333 to i32
  %335 = shl i32 %c.8, 1
  %336 = and i32 %335, 6
  %337 = lshr i32 %334, %336
  %338 = add i32 %330, 1
  %339 = zext i32 %338 to i64
  %.sum8 = add i64 %339, %.sum
  %340 = getelementptr inbounds [3964 x i8]* @charmaps, i64 0, i64 %.sum8
  %341 = load i8* %340, align 1, !tbaa !0
  %342 = zext i8 %341 to i32
  %343 = sub i32 8, %336
  %344 = shl i32 %342, %343
  %345 = and i32 %344, 1023
  %346 = or i32 %345, %337
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [623 x i16]* @legacy_chars, i64 0, i64 %347
  %349 = load i16* %348, align 2, !tbaa !8
  %350 = zext i16 %349 to i32
  %351 = icmp eq i32 %c.6, %350
  br i1 %351, label %352, label %354

; <label>:352                                     ; preds = %328
  %353 = add i32 %c.8, 128
  br label %321

; <label>:354                                     ; preds = %328
  %355 = add i32 %c.8, 1
  br label %.preheader

; <label>:356                                     ; preds = %.loopexit31, %.loopexit31, %.loopexit31, %.loopexit31
  %357 = icmp ult i32 %c.5, 65536
  br i1 %357, label %358, label %372

; <label>:358                                     ; preds = %356
  %359 = load i64* %outb, align 8, !tbaa !5
  %360 = icmp ult i64 %359, 2
  br i1 %360, label %.loopexit36, label %361

; <label>:361                                     ; preds = %358
  %362 = load i8** %out, align 8, !tbaa !7
  %363 = lshr i32 %c.5, 8
  %364 = trunc i32 %363 to i8
  %365 = getelementptr inbounds i8* %362, i64 %44
  store i8 %364, i8* %365, align 1, !tbaa !0
  %366 = trunc i32 %c.5 to i8
  %367 = getelementptr inbounds i8* %362, i64 %46
  store i8 %366, i8* %367, align 1, !tbaa !0
  %368 = load i8** %out, align 8, !tbaa !7
  %369 = getelementptr inbounds i8* %368, i64 2
  store i8* %369, i8** %out, align 8, !tbaa !7
  %370 = load i64* %outb, align 8, !tbaa !5
  %371 = add i64 %370, -2
  store i64 %371, i64* %outb, align 8, !tbaa !5
  br label %417

; <label>:372                                     ; preds = %356
  br i1 %32, label %.loopexit36, label %373

; <label>:373                                     ; preds = %372
  %374 = load i64* %outb, align 8, !tbaa !5
  %375 = icmp ult i64 %374, 4
  br i1 %375, label %.loopexit36, label %376

; <label>:376                                     ; preds = %373
  %377 = load i8** %out, align 8, !tbaa !7
  %378 = lshr i32 %c.5, 10
  %379 = lshr i32 %c.5, 18
  %380 = or i32 %379, 216
  %381 = trunc i32 %380 to i8
  %382 = getelementptr inbounds i8* %377, i64 %44
  store i8 %381, i8* %382, align 1, !tbaa !0
  %383 = trunc i32 %378 to i8
  %384 = getelementptr inbounds i8* %377, i64 %46
  store i8 %383, i8* %384, align 1, !tbaa !0
  %385 = load i8** %out, align 8, !tbaa !7
  %386 = lshr i32 %c.5, 8
  %387 = and i32 %386, 3
  %388 = or i32 %387, 220
  %389 = trunc i32 %388 to i8
  %390 = getelementptr inbounds i8* %385, i64 %.sum1617
  store i8 %389, i8* %390, align 1, !tbaa !0
  %391 = trunc i32 %c.5 to i8
  %392 = getelementptr inbounds i8* %385, i64 %.sum1819
  store i8 %391, i8* %392, align 1, !tbaa !0
  %393 = load i8** %out, align 8, !tbaa !7
  %394 = getelementptr inbounds i8* %393, i64 4
  store i8* %394, i8** %out, align 8, !tbaa !7
  %395 = load i64* %outb, align 8, !tbaa !5
  %396 = add i64 %395, -4
  store i64 %396, i64* %outb, align 8, !tbaa !5
  br label %417

; <label>:397                                     ; preds = %.loopexit31, %.loopexit31
  %398 = load i64* %outb, align 8, !tbaa !5
  %399 = icmp ult i64 %398, 4
  br i1 %399, label %.loopexit36, label %400

; <label>:400                                     ; preds = %397
  %401 = load i8** %out, align 8, !tbaa !7
  %402 = lshr i32 %c.5, 24
  %403 = trunc i32 %402 to i8
  %404 = getelementptr inbounds i8* %401, i64 %48
  store i8 %403, i8* %404, align 1, !tbaa !0
  %405 = lshr i32 %c.5, 16
  %406 = trunc i32 %405 to i8
  %407 = getelementptr inbounds i8* %401, i64 %50
  store i8 %406, i8* %407, align 1, !tbaa !0
  %408 = lshr i32 %c.5, 8
  %409 = trunc i32 %408 to i8
  %410 = getelementptr inbounds i8* %401, i64 %52
  store i8 %409, i8* %410, align 1, !tbaa !0
  %411 = trunc i32 %c.5 to i8
  %412 = getelementptr inbounds i8* %401, i64 %54
  store i8 %411, i8* %412, align 1, !tbaa !0
  %413 = load i8** %out, align 8, !tbaa !7
  %414 = getelementptr inbounds i8* %413, i64 4
  store i8* %414, i8** %out, align 8, !tbaa !7
  %415 = load i64* %outb, align 8, !tbaa !5
  %416 = add i64 %415, -4
  store i64 %416, i64* %outb, align 8, !tbaa !5
  br label %417

; <label>:417                                     ; preds = %400, %376, %361, %321, %309, %289
  %x.3 = phi i64 [ %x.2, %321 ], [ %x.0, %400 ], [ %x.0, %361 ], [ %x.0, %376 ], [ %x.0, %309 ], [ %x.0, %289 ]
  %418 = load i8** %in, align 8, !tbaa !7
  %419 = getelementptr inbounds i8* %418, i64 %l.2
  store i8* %419, i8** %in, align 8, !tbaa !7
  %420 = load i64* %inb, align 8, !tbaa !5
  %421 = sub i64 %420, %l.2
  store i64 %421, i64* %inb, align 8, !tbaa !5
  br label %55

.loopexit36:                                      ; preds = %397, %373, %372, %358, %._crit_edge, %297, %286, %260, %222, %216, %211, %202, %197, %195, %188, %183, %178, %164, %154, %145, %118, %115, %101, %95, %64, %63
  %err.0.ph = phi i32 [ 7, %286 ], [ 7, %297 ], [ 7, %._crit_edge ], [ 7, %358 ], [ 7, %373 ], [ 7, %397 ], [ 84, %63 ], [ 84, %95 ], [ 84, %101 ], [ 84, %115 ], [ 84, %118 ], [ 84, %145 ], [ 84, %154 ], [ 84, %178 ], [ 84, %183 ], [ 84, %195 ], [ 84, %197 ], [ 84, %216 ], [ 84, %222 ], [ 84, %260 ], [ 84, %372 ], [ 84, %188 ], [ 84, %164 ], [ 84, %64 ], [ 84, %202 ], [ 84, %211 ]
  br label %422

; <label>:422                                     ; preds = %.loopexit36, %214, %200, %171, %137, %116, %99, %74, %69, %64
  %err.0 = phi i32 [ %err.0.ph, %.loopexit36 ], [ 22, %64 ], [ 22, %214 ], [ 22, %200 ], [ 22, %171 ], [ 22, %137 ], [ 22, %116 ], [ 22, %99 ], [ 22, %74 ], [ 22, %69 ]
  %423 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %err.0, i32* %423, align 4, !tbaa !6
  br label %.loopexit35

.loopexit35:                                      ; preds = %422, %55, %14, %11, %0
  %.0 = phi i64 [ -1, %422 ], [ 0, %14 ], [ 0, %11 ], [ 0, %0 ], [ %x.0, %55 ]
  ret i64 %.0
}

define void @if_freenameindex(%struct.if_nameindex* %idx) nounwind uwtable optsize {
  %1 = bitcast %struct.if_nameindex* %idx to i8*
  tail call void @free(i8* %1) optsize
  ret void
}

define i8* @if_indextoname(i32 %index, i8* %name) nounwind uwtable optsize {
  %ifr = alloca %struct.ifreq, align 8
  %1 = call i32 @socket(i32 1, i32 2, i32 0) nounwind optsize
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %13, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.ifreq* %ifr, i64 0, i32 1
  %5 = bitcast %union.anon.0.201* %4 to i32*
  store i32 %index, i32* %5, align 8, !tbaa !6
  %6 = call i32 (i32, i32, ...)* @ioctl(i32 %1, i32 35088, %struct.ifreq* %ifr) nounwind optsize
  %7 = sext i32 %1 to i64
  %8 = call i64 (i64, ...)* @__syscall(i64 6, i64 %7, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %3
  %11 = getelementptr inbounds %struct.ifreq* %ifr, i64 0, i32 0, i32 0, i64 0
  %12 = call i8* @strncpy(i8* %name, i8* %11, i64 16) nounwind optsize
  br label %13

; <label>:13                                      ; preds = %10, %3, %0
  %.0 = phi i8* [ null, %0 ], [ %12, %10 ], [ null, %3 ]
  ret i8* %.0
}

define %struct.if_nameindex.202* @if_nameindex() nounwind uwtable optsize {
  %conf.i = alloca %struct.ifconf, align 8
  %1 = call i32 @socket(i32 1, i32 2, i32 0) nounwind optsize
  %2 = icmp sgt i32 %1, -1
  br i1 %2, label %.preheader, label %55

.preheader:                                       ; preds = %0
  %3 = bitcast %struct.ifconf* %conf.i to i8*
  %4 = getelementptr inbounds %struct.ifconf* %conf.i, i64 0, i32 1
  %5 = getelementptr inbounds %union.anon.203* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.ifconf* %conf.i, i64 0, i32 0
  %7 = bitcast %union.anon.203* %4 to %struct.ifreq.204**
  br label %8

; <label>:8                                       ; preds = %50, %.preheader
  %n.0 = phi i64 [ %51, %50 ], [ 0, %.preheader ]
  call void @llvm.lifetime.start(i64 -1, i8* %3) nounwind
  %9 = mul i64 %n.0, 56
  %10 = call i8* @malloc(i64 %9) nounwind optsize
  %11 = bitcast i8* %10 to %struct.if_nameindex.202*
  %12 = icmp eq i8* %10, null
  br i1 %12, label %do_nameindex.exit, label %13

; <label>:13                                      ; preds = %8
  %14 = getelementptr inbounds %struct.if_nameindex.202* %11, i64 %n.0
  %15 = bitcast %struct.if_nameindex.202* %14 to i8*
  store i8* %15, i8** %5, align 8, !tbaa !7
  %16 = mul i64 %n.0, 40
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %6, align 8, !tbaa !6
  %18 = call i32 (i32, i32, ...)* @ioctl(i32 %1, i32 35090, %struct.ifconf* %conf.i) nounwind optsize
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %13
  call void @free(i8* %10) nounwind optsize
  br label %do_nameindex.exit

; <label>:21                                      ; preds = %13
  %22 = load i32* %6, align 8, !tbaa !6
  %23 = sext i32 %22 to i64
  %24 = icmp eq i64 %23, %16
  br i1 %24, label %do_nameindex.exit.thread, label %25

do_nameindex.exit.thread:                         ; preds = %21
  call void @free(i8* %10) nounwind optsize
  call void @llvm.lifetime.end(i64 -1, i8* %3) nounwind
  br label %50

; <label>:25                                      ; preds = %21
  %26 = icmp ugt i32 %22, 39
  br i1 %26, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %25
  %27 = udiv i64 %23, 40
  br label %28

; <label>:28                                      ; preds = %44, %.lr.ph.i
  %i.03.i = phi i64 [ 0, %.lr.ph.i ], [ %45, %44 ]
  %.012.i = phi i64 [ %27, %.lr.ph.i ], [ %.1.i, %44 ]
  %29 = load %struct.ifreq.204** %7, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.ifreq.204* %29, i64 %i.03.i
  %31 = call i32 (i32, i32, ...)* @ioctl(i32 %1, i32 35123, %struct.ifreq.204* %30) nounwind optsize
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %28
  %34 = add i64 %i.03.i, -1
  %35 = add i64 %.012.i, -1
  br label %44

; <label>:36                                      ; preds = %28
  %37 = load %struct.ifreq.204** %7, align 8, !tbaa !7
  %38 = getelementptr inbounds %struct.ifreq.204* %37, i64 %i.03.i, i32 1
  %39 = bitcast %union.anon.1* %38 to i32*
  %40 = load i32* %39, align 4, !tbaa !6
  %41 = getelementptr inbounds %struct.if_nameindex.202* %11, i64 %i.03.i, i32 0
  store i32 %40, i32* %41, align 4, !tbaa !6
  %42 = getelementptr inbounds %struct.ifreq.204* %37, i64 %i.03.i, i32 0, i32 0, i64 0
  %43 = getelementptr inbounds %struct.if_nameindex.202* %11, i64 %i.03.i, i32 1
  store i8* %42, i8** %43, align 8, !tbaa !7
  br label %44

; <label>:44                                      ; preds = %36, %33
  %.1.i = phi i64 [ %35, %33 ], [ %.012.i, %36 ]
  %i.1.i = phi i64 [ %34, %33 ], [ %i.03.i, %36 ]
  %45 = add i64 %i.1.i, 1
  %46 = icmp ult i64 %45, %.1.i
  br i1 %46, label %28, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %44, %25
  %i.0.lcssa.i = phi i64 [ 0, %25 ], [ %45, %44 ]
  %47 = getelementptr inbounds %struct.if_nameindex.202* %11, i64 %i.0.lcssa.i, i32 1
  store i8* null, i8** %47, align 8, !tbaa !7
  %48 = getelementptr inbounds %struct.if_nameindex.202* %11, i64 %i.0.lcssa.i, i32 0
  store i32 0, i32* %48, align 4, !tbaa !6
  br label %do_nameindex.exit

do_nameindex.exit:                                ; preds = %._crit_edge.i, %20, %8
  %.0.i = phi i8* [ null, %20 ], [ %10, %._crit_edge.i ], [ null, %8 ]
  call void @llvm.lifetime.end(i64 -1, i8* %3) nounwind
  %49 = icmp eq i8* %.0.i, inttoptr (i64 -1 to i8*)
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %do_nameindex.exit, %do_nameindex.exit.thread
  %51 = add i64 %n.0, 1
  br label %8

; <label>:52                                      ; preds = %do_nameindex.exit
  %53 = sext i32 %1 to i64
  %54 = call i64 (i64, ...)* @__syscall(i64 6, i64 %53, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %phitmp = bitcast i8* %.0.i to %struct.if_nameindex.202*
  br label %55

; <label>:55                                      ; preds = %52, %0
  %p.0 = phi %struct.if_nameindex.202* [ %phitmp, %52 ], [ null, %0 ]
  %56 = call i32* @__errno_location() nounwind readnone optsize
  store i32 105, i32* %56, align 4, !tbaa !6
  ret %struct.if_nameindex.202* %p.0
}

define i32 @if_nametoindex(i8* %name) nounwind uwtable optsize {
  %ifr = alloca %struct.ifreq.207, align 8
  %1 = call i32 @socket(i32 1, i32 2, i32 0) nounwind optsize
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %14, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.ifreq.207* %ifr, i64 0, i32 0, i32 0, i64 0
  %5 = call i8* @strncpy(i8* %4, i8* %name, i64 16) nounwind optsize
  %6 = call i32 (i32, i32, ...)* @ioctl(i32 %1, i32 35123, %struct.ifreq.207* %ifr) nounwind optsize
  %7 = sext i32 %1 to i64
  %8 = call i64 (i64, ...)* @__syscall(i64 6, i64 %7, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %14, label %10

; <label>:10                                      ; preds = %3
  %11 = getelementptr inbounds %struct.ifreq.207* %ifr, i64 0, i32 1
  %12 = bitcast %union.anon.0.209* %11 to i32*
  %13 = load i32* %12, align 8, !tbaa !6
  br label %14

; <label>:14                                      ; preds = %10, %3, %0
  %.0 = phi i32 [ -1, %0 ], [ %13, %10 ], [ %6, %3 ]
  ret i32 %.0
}

define i32 @ilogbf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  switch i32 %3, label %11 [
    i32 0, label %4
    i32 255, label %.loopexit
  ]

; <label>:4                                       ; preds = %0
  %5 = shl i32 %1, 9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %4
  %7 = icmp sgt i32 %5, -1
  br i1 %7, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %e.07 = phi i32 [ %8, %.lr.ph ], [ -127, %.preheader ]
  %u.0.0.in6 = phi i32 [ %9, %.lr.ph ], [ %5, %.preheader ]
  %8 = add nsw i32 %e.07, -1
  %9 = shl i32 %u.0.0.in6, 1
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %.lr.ph, label %.loopexit

; <label>:11                                      ; preds = %0
  %12 = add nsw i32 %3, -127
  br label %.loopexit

.loopexit:                                        ; preds = %11, %.lr.ph, %.preheader, %4, %0
  %.0 = phi i32 [ %12, %11 ], [ -2147483648, %4 ], [ 2147483647, %0 ], [ -127, %.preheader ], [ %8, %.lr.ph ]
  ret i32 %.0
}

define i32 @ilogbl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = trunc i80 %1 to i64
  %3 = lshr i80 %1, 64
  %4 = trunc i80 %3 to i32
  %5 = and i32 %4, 32767
  switch i32 %5, label %12 [
    i32 0, label %6
    i32 32767, label %.loopexit
  ]

; <label>:6                                       ; preds = %0
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %6
  %8 = icmp sgt i64 %2, -1
  br i1 %8, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %e.02 = phi i32 [ %9, %.lr.ph ], [ -16382, %.preheader ]
  %m.01 = phi i64 [ %10, %.lr.ph ], [ %2, %.preheader ]
  %9 = add nsw i32 %e.02, -1
  %10 = shl i64 %m.01, 1
  %11 = icmp sgt i64 %10, -1
  br i1 %11, label %.lr.ph, label %.loopexit

; <label>:12                                      ; preds = %0
  %13 = add nsw i32 %5, -16383
  br label %.loopexit

.loopexit:                                        ; preds = %12, %.lr.ph, %.preheader, %6, %0
  %.0 = phi i32 [ %13, %12 ], [ -2147483648, %6 ], [ 2147483647, %0 ], [ -16382, %.preheader ], [ %9, %.lr.ph ]
  ret i32 %.0
}

define i32 @ilogb(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 52
  %.tr = trunc i64 %2 to i32
  %3 = and i32 %.tr, 2047
  switch i32 %3, label %11 [
    i32 0, label %4
    i32 2047, label %.loopexit
  ]

; <label>:4                                       ; preds = %0
  %5 = shl i64 %1, 12
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %4
  %7 = icmp sgt i64 %5, -1
  br i1 %7, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %e.07 = phi i32 [ %8, %.lr.ph ], [ -1023, %.preheader ]
  %u.0.0.in6 = phi i64 [ %9, %.lr.ph ], [ %5, %.preheader ]
  %8 = add nsw i32 %e.07, -1
  %9 = shl i64 %u.0.0.in6, 1
  %10 = icmp sgt i64 %9, -1
  br i1 %10, label %.lr.ph, label %.loopexit

; <label>:11                                      ; preds = %0
  %12 = add nsw i32 %3, -1023
  br label %.loopexit

.loopexit:                                        ; preds = %11, %.lr.ph, %.preheader, %4, %0
  %.0 = phi i32 [ %12, %11 ], [ -2147483648, %4 ], [ 2147483647, %0 ], [ -1023, %.preheader ], [ %8, %.lr.ph ]
  ret i32 %.0
}

define i64 @imaxabs(i64 %a) nounwind uwtable readnone optsize {
  %1 = icmp sgt i64 %a, 0
  %2 = sub nsw i64 0, %a
  %3 = select i1 %1, i64 %a, i64 %2
  ret i64 %3
}

define { i64, i64 } @imaxdiv(i64 %num, i64 %den) nounwind uwtable readnone optsize {
  %1 = sdiv i64 %num, %den
  %2 = srem i64 %num, %den
  %insert = insertvalue { i64, i64 } undef, i64 %1, 0
  %insert7 = insertvalue { i64, i64 } %insert, i64 %2, 1
  ret { i64, i64 } %insert7
}

define i8* @index(i8* %s, i32 %c) nounwind uwtable optsize {
  %1 = tail call i8* @strchr(i8* %s, i32 %c) nounwind optsize
  ret i8* %1
}

define i32 @inet_addr(i8* %p) nounwind uwtable optsize {
  %sin = alloca %struct.sockaddr_in.211, align 4
  %1 = bitcast %struct.sockaddr_in.211* %sin to i8*
  %2 = call i32 @__ipparse(i8* %1, i32 2, i8* %p) nounwind optsize
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.sockaddr_in.211* %sin, i64 0, i32 2, i32 0
  %6 = load i32* %5, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %4, %0
  %.0 = phi i32 [ %6, %4 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @inet_aton(i8* %cp, %struct.in_addr.213* %inp) nounwind uwtable optsize {
  %1 = bitcast %struct.in_addr.213* %inp to i8*
  %2 = tail call i32 @inet_pton(i32 2, i8* %cp, i8* %1) nounwind optsize
  %3 = icmp sgt i32 %2, 0
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i8* @inet_ntoa(i32 %in.coerce) nounwind uwtable optsize {
  %1 = and i32 %in.coerce, 255
  %2 = lshr i32 %in.coerce, 8
  %3 = and i32 %2, 255
  %4 = lshr i32 %in.coerce, 16
  %5 = and i32 %4, 255
  %6 = lshr i32 %in.coerce, 24
  %7 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* getelementptr inbounds ([16 x i8]* @inet_ntoa.buf, i64 0, i64 0), i64 16, i8* getelementptr inbounds ([12 x i8]* @.str276, i64 0, i64 0), i32 %1, i32 %3, i32 %5, i32 %6) nounwind optsize
  ret i8* getelementptr inbounds ([16 x i8]* @inet_ntoa.buf, i64 0, i64 0)
}

define i8* @inet_ntop(i32 %af, i8* nocapture %a0, i8* %s, i32 %l) nounwind uwtable optsize {
  %buf = alloca [100 x i8], align 16
  switch i32 %af, label %116 [
    i32 2, label %1
    i32 10, label %16
  ]

; <label>:1                                       ; preds = %0
  %2 = zext i32 %l to i64
  %3 = load i8* %a0, align 1, !tbaa !0
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8* %a0, i64 1
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8* %a0, i64 2
  %9 = load i8* %8, align 1, !tbaa !0
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8* %a0, i64 3
  %12 = load i8* %11, align 1, !tbaa !0
  %13 = zext i8 %12 to i32
  %14 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %s, i64 %2, i8* getelementptr inbounds ([12 x i8]* @.str277, i64 0, i64 0), i32 %4, i32 %7, i32 %10, i32 %13) nounwind optsize
  %15 = icmp ult i32 %14, %l
  br i1 %15, label %120, label %118

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 0
  %18 = call i8* @memset(i8* %17, i32 120, i64 100) nounwind optsize
  %19 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 99
  store i8 0, i8* %19, align 1, !tbaa !0
  %20 = load i8* %a0, align 1, !tbaa !0
  %21 = zext i8 %20 to i32
  %22 = shl nuw nsw i32 %21, 8
  %23 = getelementptr inbounds i8* %a0, i64 1
  %24 = load i8* %23, align 1, !tbaa !0
  %25 = zext i8 %24 to i32
  %26 = or i32 %22, %25
  %27 = getelementptr inbounds i8* %a0, i64 2
  %28 = load i8* %27, align 1, !tbaa !0
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = getelementptr inbounds i8* %a0, i64 3
  %32 = load i8* %31, align 1, !tbaa !0
  %33 = zext i8 %32 to i32
  %34 = or i32 %30, %33
  %35 = getelementptr inbounds i8* %a0, i64 4
  %36 = load i8* %35, align 1, !tbaa !0
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 8
  %39 = getelementptr inbounds i8* %a0, i64 5
  %40 = load i8* %39, align 1, !tbaa !0
  %41 = zext i8 %40 to i32
  %42 = or i32 %38, %41
  %43 = getelementptr inbounds i8* %a0, i64 6
  %44 = load i8* %43, align 1, !tbaa !0
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 8
  %47 = getelementptr inbounds i8* %a0, i64 7
  %48 = load i8* %47, align 1, !tbaa !0
  %49 = zext i8 %48 to i32
  %50 = or i32 %46, %49
  %51 = getelementptr inbounds i8* %a0, i64 8
  %52 = load i8* %51, align 1, !tbaa !0
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 8
  %55 = getelementptr inbounds i8* %a0, i64 9
  %56 = load i8* %55, align 1, !tbaa !0
  %57 = zext i8 %56 to i32
  %58 = or i32 %54, %57
  %59 = getelementptr inbounds i8* %a0, i64 10
  %60 = load i8* %59, align 1, !tbaa !0
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, 8
  %63 = getelementptr inbounds i8* %a0, i64 11
  %64 = load i8* %63, align 1, !tbaa !0
  %65 = zext i8 %64 to i32
  %66 = or i32 %62, %65
  %67 = getelementptr inbounds i8* %a0, i64 12
  %68 = load i8* %67, align 1, !tbaa !0
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 8
  %71 = getelementptr inbounds i8* %a0, i64 13
  %72 = load i8* %71, align 1, !tbaa !0
  %73 = zext i8 %72 to i32
  %74 = or i32 %70, %73
  %75 = getelementptr inbounds i8* %a0, i64 14
  %76 = load i8* %75, align 1, !tbaa !0
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 8
  %79 = getelementptr inbounds i8* %a0, i64 15
  %80 = load i8* %79, align 1, !tbaa !0
  %81 = zext i8 %80 to i32
  %82 = or i32 %78, %81
  %83 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %17, i64 100, i8* getelementptr inbounds ([24 x i8]* @.str1278, i64 0, i64 0), i32 %26, i32 %34, i32 %42, i32 %50, i32 %58, i32 %66, i32 %74, i32 %82) nounwind optsize
  %84 = load i8* %17, align 16, !tbaa !0
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %._crit_edge.thread, label %.lr.ph

.lr.ph:                                           ; preds = %96, %16
  %indvars.iv = phi i64 [ %indvars.iv.next, %96 ], [ 0, %16 ]
  %86 = phi i8 [ %98, %96 ], [ %84, %16 ]
  %87 = phi i8* [ %97, %96 ], [ %17, %16 ]
  %best.04 = phi i32 [ %best.1, %96 ], [ 0, %16 ]
  %max.03 = phi i32 [ %max.1, %96 ], [ 2, %16 ]
  %88 = trunc i64 %indvars.iv to i32
  %89 = icmp eq i32 %88, 0
  %90 = icmp eq i8 %86, 58
  %or.cond = or i1 %89, %90
  br i1 %or.cond, label %91, label %96

; <label>:91                                      ; preds = %.lr.ph
  %92 = call i64 @strspn(i8* %87, i8* getelementptr inbounds ([3 x i8]* @.str2279, i64 0, i64 0)) nounwind optsize
  %93 = trunc i64 %92 to i32
  %94 = icmp sgt i32 %93, %max.03
  br i1 %94, label %95, label %96

; <label>:95                                      ; preds = %91
  br label %96

; <label>:96                                      ; preds = %95, %91, %.lr.ph
  %max.1 = phi i32 [ %93, %95 ], [ %max.03, %91 ], [ %max.03, %.lr.ph ]
  %best.1 = phi i32 [ %88, %95 ], [ %best.04, %91 ], [ %best.04, %.lr.ph ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %97 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 %indvars.iv.next
  %98 = load i8* %97, align 1, !tbaa !0
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %96
  %100 = icmp sgt i32 %max.1, 2
  br i1 %100, label %101, label %._crit_edge.thread

; <label>:101                                     ; preds = %._crit_edge
  %102 = add nsw i32 %best.1, 1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 %103
  store i8 58, i8* %104, align 1, !tbaa !0
  %105 = sext i32 %best.1 to i64
  %106 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 %105
  store i8 58, i8* %106, align 1, !tbaa !0
  %.sum = add i64 %105, 2
  %107 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 %.sum
  %108 = sext i32 %max.1 to i64
  %.sum1 = add i64 %105, %108
  %109 = getelementptr inbounds [100 x i8]* %buf, i64 0, i64 %.sum1
  %110 = call i8* @strcpy(i8* %107, i8* %109) nounwind optsize
  br label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %101, %._crit_edge, %16
  %111 = call i64 @strlen(i8* %17) nounwind optsize
  %112 = zext i32 %l to i64
  %113 = icmp ult i64 %111, %112
  br i1 %113, label %114, label %118

; <label>:114                                     ; preds = %._crit_edge.thread
  %115 = call i8* @strcpy(i8* %s, i8* %17) nounwind optsize
  br label %120

; <label>:116                                     ; preds = %0
  %117 = call i32* @__errno_location() nounwind readnone optsize
  store i32 97, i32* %117, align 4, !tbaa !6
  br label %120

; <label>:118                                     ; preds = %._crit_edge.thread, %1
  %119 = call i32* @__errno_location() nounwind readnone optsize
  store i32 28, i32* %119, align 4, !tbaa !6
  br label %120

; <label>:120                                     ; preds = %118, %116, %114, %1
  %.0 = phi i8* [ null, %116 ], [ %s, %114 ], [ null, %118 ], [ %s, %1 ]
  ret i8* %.0
}

define i32 @inet_pton(i32 %af, i8* %s, i8* %a0) nounwind uwtable optsize {
  %ip = alloca [8 x i16], align 16
  %z = alloca i8*, align 8
  switch i32 %af, label %23 [
    i32 2, label %.preheader23
    i32 10, label %25
  ]

.preheader23:                                     ; preds = %21, %0
  %indvars.iv43 = phi i64 [ %indvars.iv.next44, %21 ], [ 0, %0 ]
  %.02 = phi i8* [ %22, %21 ], [ %s, %0 ]
  %1 = trunc i64 %indvars.iv43 to i32
  %2 = icmp slt i32 %1, 4
  br i1 %2, label %3, label %.critedge

; <label>:3                                       ; preds = %.preheader23
  %4 = load i8* %.02, align 1, !tbaa !0
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %.critedge, label %6

; <label>:6                                       ; preds = %3
  %7 = call i64 @strtoul(i8* %.02, i8** %z, i32 10) nounwind optsize
  %8 = trunc i64 %7 to i8
  %9 = getelementptr inbounds i8* %a0, i64 %indvars.iv43
  store i8 %8, i8* %9, align 1, !tbaa !0
  %10 = load i8* %.02, align 1, !tbaa !0
  %11 = sext i8 %10 to i32
  %12 = add i32 %11, -48
  %13 = icmp ult i32 %12, 10
  br i1 %13, label %14, label %.critedge

; <label>:14                                      ; preds = %6
  %15 = load i8** %z, align 8, !tbaa !7
  %16 = icmp eq i8* %15, %.02
  br i1 %16, label %.critedge, label %17

; <label>:17                                      ; preds = %14
  %18 = load i8* %15, align 1, !tbaa !0
  switch i8 %18, label %.critedge [
    i8 0, label %19
    i8 46, label %19
  ]

; <label>:19                                      ; preds = %17, %17
  %20 = icmp ugt i64 %7, 255
  br i1 %20, label %.critedge, label %21

; <label>:21                                      ; preds = %19
  %22 = getelementptr inbounds i8* %15, i64 1
  %indvars.iv.next44 = add i64 %indvars.iv43, 1
  br label %.preheader23

; <label>:23                                      ; preds = %0
  %24 = call i32* @__errno_location() nounwind readnone optsize
  store i32 97, i32* %24, align 4, !tbaa !6
  br label %.critedge

; <label>:25                                      ; preds = %0
  %26 = load i8* %s, align 1, !tbaa !0
  %27 = icmp eq i8 %26, 58
  br i1 %27, label %28, label %.preheader12

; <label>:28                                      ; preds = %25
  %29 = getelementptr inbounds i8* %s, i64 1
  %30 = load i8* %29, align 1, !tbaa !0
  %31 = icmp eq i8 %30, 58
  br i1 %31, label %32, label %.preheader12

; <label>:32                                      ; preds = %28
  br label %.preheader12

.preheader12:                                     ; preds = %92, %32, %28, %25
  %indvars.iv41 = phi i64 [ %indvars.iv.next42, %92 ], [ 0, %32 ], [ 0, %28 ], [ 0, %25 ]
  %i.1 = phi i32 [ %93, %92 ], [ 0, %32 ], [ 0, %28 ], [ 0, %25 ]
  %brk.0 = phi i32 [ %brk.1, %92 ], [ -1, %32 ], [ -1, %28 ], [ -1, %25 ]
  %.2 = phi i8* [ %96, %92 ], [ %29, %32 ], [ %s, %28 ], [ %s, %25 ]
  %33 = load i8* %.2, align 1, !tbaa !0
  %34 = icmp eq i8 %33, 58
  %35 = icmp slt i32 %brk.0, 0
  %or.cond = and i1 %34, %35
  br i1 %or.cond, label %36, label %42

; <label>:36                                      ; preds = %.preheader12
  %37 = getelementptr inbounds [8 x i16]* %ip, i64 0, i64 %indvars.iv41
  store i16 0, i16* %37, align 2, !tbaa !8
  %38 = getelementptr inbounds i8* %.2, i64 1
  %39 = load i8* %38, align 1, !tbaa !0
  %40 = icmp eq i8 %39, 0
  %41 = trunc i64 %indvars.iv41 to i32
  br i1 %40, label %.loopexit, label %92

; <label>:42                                      ; preds = %.preheader12
  %43 = sext i8 %33 to i32
  %44 = add i32 %43, -48
  %45 = icmp ult i32 %44, 10
  br i1 %45, label %hexval.exit.thread, label %hexval.exit

hexval.exit:                                      ; preds = %42
  %46 = or i32 %43, 32
  %47 = add i32 %46, -97
  %48 = add i32 %46, -87
  %49 = icmp slt i32 %48, 0
  %not. = icmp ugt i32 %47, 5
  %50 = or i1 %49, %not.
  br i1 %50, label %.critedge, label %hexval.exit.thread

hexval.exit.thread:                               ; preds = %53, %hexval.exit, %42
  %51 = phi i8 [ 48, %53 ], [ %33, %hexval.exit ], [ %33, %42 ]
  %.3 = phi i8* [ %54, %53 ], [ %.2, %hexval.exit ], [ %.2, %42 ]
  %52 = icmp eq i8 %51, 48
  br i1 %52, label %53, label %.critedge1

; <label>:53                                      ; preds = %hexval.exit.thread
  %54 = getelementptr inbounds i8* %.3, i64 1
  %55 = load i8* %54, align 1, !tbaa !0
  %56 = icmp eq i8 %55, 48
  br i1 %56, label %hexval.exit.thread, label %.critedge1

.critedge1:                                       ; preds = %.thread8, %53, %hexval.exit.thread
  %indvars.iv29 = phi i64 [ %indvars.iv.next30, %.thread8 ], [ 0, %hexval.exit.thread ], [ 0, %53 ]
  %v.0 = phi i32 [ %73, %.thread8 ], [ 0, %hexval.exit.thread ], [ 0, %53 ]
  %j.0 = phi i32 [ %74, %.thread8 ], [ 0, %hexval.exit.thread ], [ 0, %53 ]
  %57 = trunc i64 %indvars.iv29 to i32
  %58 = icmp slt i32 %57, 5
  br i1 %58, label %59, label %.thread

; <label>:59                                      ; preds = %.critedge1
  %60 = getelementptr inbounds i8* %.3, i64 %indvars.iv29
  %61 = load i8* %60, align 1, !tbaa !0
  %62 = sext i8 %61 to i32
  %63 = add i32 %62, -48
  %64 = icmp ult i32 %63, 10
  br i1 %64, label %.thread8, label %65

; <label>:65                                      ; preds = %59
  %66 = or i32 %62, 32
  %67 = add i32 %66, -97
  %68 = add i32 %66, -87
  %69 = icmp ult i32 %67, 6
  %..i5 = select i1 %69, i32 %68, i32 -1
  %70 = icmp sgt i32 %..i5, -1
  br i1 %70, label %.thread8, label %.thread

.thread8:                                         ; preds = %65, %59
  %71 = phi i32 [ %..i5, %65 ], [ %63, %59 ]
  %72 = shl i32 %v.0, 4
  %73 = add nsw i32 %71, %72
  %indvars.iv.next30 = add i64 %indvars.iv29, 1
  %74 = add nsw i32 %j.0, 1
  br label %.critedge1

.thread:                                          ; preds = %65, %.critedge1
  %75 = icmp sgt i32 %v.0, 65535
  br i1 %75, label %.critedge, label %76

; <label>:76                                      ; preds = %.thread
  %77 = trunc i32 %v.0 to i16
  %78 = getelementptr inbounds [8 x i16]* %ip, i64 0, i64 %indvars.iv41
  store i16 %77, i16* %78, align 2, !tbaa !8
  %79 = sext i32 %j.0 to i64
  %80 = getelementptr inbounds i8* %.3, i64 %79
  %81 = load i8* %80, align 1, !tbaa !0
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %86

; <label>:83                                      ; preds = %76
  %84 = icmp sgt i32 %brk.0, -1
  %85 = icmp eq i32 %i.1, 7
  %or.cond4 = or i1 %84, %85
  br i1 %or.cond4, label %.loopexit, label %.critedge

; <label>:86                                      ; preds = %76
  %87 = trunc i64 %indvars.iv41 to i32
  %88 = icmp slt i32 %87, 7
  br i1 %88, label %89, label %.critedge

; <label>:89                                      ; preds = %86
  switch i8 %81, label %.critedge [
    i8 58, label %92
    i8 46, label %90
  ]

; <label>:90                                      ; preds = %89
  %91 = add nsw i32 %i.1, 1
  br label %.loopexit

; <label>:92                                      ; preds = %89, %36
  %j.1 = phi i32 [ 0, %36 ], [ %j.0, %89 ]
  %brk.1 = phi i32 [ %41, %36 ], [ %brk.0, %89 ]
  %.4 = phi i8* [ %.2, %36 ], [ %.3, %89 ]
  %indvars.iv.next42 = add i64 %indvars.iv41, 1
  %93 = add nsw i32 %i.1, 1
  %94 = add nsw i32 %j.1, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8* %.4, i64 %95
  br label %.preheader12

.loopexit:                                        ; preds = %90, %83, %36
  %i.2 = phi i32 [ %91, %90 ], [ %i.1, %83 ], [ %i.1, %36 ]
  %brk.2 = phi i32 [ %brk.0, %90 ], [ %brk.0, %83 ], [ %i.1, %36 ]
  %.5 = phi i8* [ %.3, %90 ], [ %.3, %83 ], [ %.2, %36 ]
  %need_v4.0 = phi i32 [ 1, %90 ], [ 0, %83 ], [ 0, %36 ]
  %97 = icmp sgt i32 %brk.2, -1
  br i1 %97, label %98, label %.preheader

; <label>:98                                      ; preds = %.loopexit
  %99 = sext i32 %brk.2 to i64
  %100 = getelementptr inbounds [8 x i16]* %ip, i64 0, i64 %99
  %101 = sext i32 %i.2 to i64
  %.sum = sub i64 7, %101
  %.sum3 = add i64 %.sum, %99
  %102 = getelementptr inbounds [8 x i16]* %ip, i64 0, i64 %.sum3
  %103 = bitcast i16* %102 to i8*
  %104 = bitcast i16* %100 to i8*
  %105 = add i32 %i.2, 1
  %106 = sub i32 %105, %brk.2
  %107 = shl nsw i32 %106, 1
  %108 = sext i32 %107 to i64
  %109 = call i8* @memmove(i8* %103, i8* %104, i64 %108) nounwind optsize
  %110 = sub nsw i32 7, %i.2
  %111 = icmp sgt i32 %110, 0
  br i1 %111, label %.lr.ph, label %.preheader

.lr.ph:                                           ; preds = %.lr.ph, %98
  %indvars.iv25 = phi i64 [ %indvars.iv.next26, %.lr.ph ], [ 0, %98 ]
  %112 = add nsw i64 %indvars.iv25, %99
  %113 = getelementptr inbounds [8 x i16]* %ip, i64 0, i64 %112
  store i16 0, i16* %113, align 2, !tbaa !8
  %indvars.iv.next26 = add i64 %indvars.iv25, 1
  %lftr.wideiv27 = trunc i64 %indvars.iv.next26 to i32
  %exitcond28 = icmp eq i32 %lftr.wideiv27, %110
  br i1 %exitcond28, label %.preheader, label %.lr.ph

.preheader:                                       ; preds = %.preheader, %.lr.ph, %98, %.loopexit
  %indvars.iv = phi i64 [ %indvars.iv.next, %.preheader ], [ 0, %98 ], [ 0, %.lr.ph ], [ 0, %.loopexit ]
  %a.010 = phi i8* [ %121, %.preheader ], [ %a0, %98 ], [ %a0, %.lr.ph ], [ %a0, %.loopexit ]
  %114 = getelementptr inbounds [8 x i16]* %ip, i64 0, i64 %indvars.iv
  %115 = load i16* %114, align 2, !tbaa !8
  %116 = lshr i16 %115, 8
  %117 = trunc i16 %116 to i8
  %118 = getelementptr inbounds i8* %a.010, i64 1
  store i8 %117, i8* %a.010, align 1, !tbaa !0
  %119 = load i16* %114, align 2, !tbaa !8
  %120 = trunc i16 %119 to i8
  %121 = getelementptr inbounds i8* %a.010, i64 2
  store i8 %120, i8* %118, align 1, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 8
  br i1 %exitcond, label %122, label %.preheader

; <label>:122                                     ; preds = %.preheader
  %123 = icmp eq i32 %need_v4.0, 0
  br i1 %123, label %128, label %124

; <label>:124                                     ; preds = %122
  %125 = getelementptr inbounds i8* %a0, i64 12
  %126 = call i32 @inet_pton(i32 2, i8* %.5, i8* %125) optsize
  %127 = icmp slt i32 %126, 1
  br i1 %127, label %.critedge, label %128

; <label>:128                                     ; preds = %124, %122
  br label %.critedge

.critedge:                                        ; preds = %128, %124, %89, %86, %83, %.thread, %hexval.exit, %23, %19, %17, %14, %6, %3, %.preheader23
  %.0 = phi i32 [ -1, %23 ], [ 1, %128 ], [ -1, %83 ], [ -1, %124 ], [ -1, %hexval.exit ], [ -1, %.thread ], [ -1, %89 ], [ -1, %86 ], [ 1, %.preheader23 ], [ 1, %3 ], [ 0, %6 ], [ 0, %14 ], [ 0, %19 ], [ 0, %17 ]
  ret i32 %.0
}

define i32 @initgroups(i8* %user, i32 %gid) nounwind uwtable optsize {
  %groups = alloca [32 x i32], align 16
  %count = alloca i32, align 4
  store i32 32, i32* %count, align 4, !tbaa !6
  %1 = getelementptr inbounds [32 x i32]* %groups, i64 0, i64 0
  %2 = call i32 @getgrouplist(i8* %user, i32 %gid, i32* %1, i32* %count) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* %count, align 4, !tbaa !6
  %6 = sext i32 %5 to i64
  %7 = call i32 @setgroups(i64 %6, i32* %1) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %4, %0
  %.0 = phi i32 [ %7, %4 ], [ -1, %0 ]
  ret i32 %.0
}

define void @__init_security(i64* nocapture %auxv) nounwind uwtable optsize {
  %aux = alloca [24 x i64], align 16
  %pfd = alloca [3 x %struct.pollfd.214], align 16
  %1 = bitcast [24 x i64]* %aux to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 192, i32 16, i1 false)
  %2 = bitcast [3 x %struct.pollfd.214]* %pfd to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([3 x %struct.pollfd.214]* @__init_security.pfd to i8*), i64 24, i32 16, i1 false)
  %3 = load i64* %auxv, align 8, !tbaa !5
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge5.thread, label %.lr.ph

.lr.ph:                                           ; preds = %11, %0
  %5 = phi i64 [ %13, %11 ], [ %3, %0 ]
  %.02 = phi i64* [ %12, %11 ], [ %auxv, %0 ]
  %6 = icmp ult i64 %5, 24
  br i1 %6, label %7, label %11

; <label>:7                                       ; preds = %.lr.ph
  %8 = getelementptr inbounds i64* %.02, i64 1
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = getelementptr inbounds [24 x i64]* %aux, i64 0, i64 %5
  store i64 %9, i64* %10, align 8, !tbaa !5
  br label %11

; <label>:11                                      ; preds = %7, %.lr.ph
  %12 = getelementptr inbounds i64* %.02, i64 2
  %13 = load i64* %12, align 8, !tbaa !5
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %._crit_edge5, label %.lr.ph

._crit_edge5:                                     ; preds = %11
  %.phi.trans.insert = getelementptr inbounds [24 x i64]* %aux, i64 0, i64 11
  %.pre = load i64* %.phi.trans.insert, align 8, !tbaa !5
  %.phi.trans.insert3 = getelementptr inbounds [24 x i64]* %aux, i64 0, i64 12
  %.pre4 = load i64* %.phi.trans.insert3, align 16, !tbaa !5
  %15 = icmp eq i64 %.pre, %.pre4
  br i1 %15, label %._crit_edge5.thread, label %25

._crit_edge5.thread:                              ; preds = %._crit_edge5, %0
  %16 = getelementptr inbounds [24 x i64]* %aux, i64 0, i64 13
  %17 = load i64* %16, align 8, !tbaa !5
  %18 = getelementptr inbounds [24 x i64]* %aux, i64 0, i64 14
  %19 = load i64* %18, align 16, !tbaa !5
  %20 = icmp eq i64 %17, %19
  br i1 %20, label %21, label %25

; <label>:21                                      ; preds = %._crit_edge5.thread
  %22 = getelementptr inbounds [24 x i64]* %aux, i64 0, i64 23
  %23 = load i64* %22, align 8, !tbaa !5
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %40, label %25

; <label>:25                                      ; preds = %21, %._crit_edge5.thread, %._crit_edge5
  %26 = ptrtoint [3 x %struct.pollfd.214]* %pfd to i64
  %27 = call i64 (i64, ...)* @__syscall(i64 168, i64 %26, i64 3, i64 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %28

; <label>:28                                      ; preds = %37, %25
  %i.01 = phi i64 [ 0, %25 ], [ %38, %37 ]
  %29 = getelementptr inbounds [3 x %struct.pollfd.214]* %pfd, i64 0, i64 %i.01, i32 2
  %30 = load i16* %29, align 2, !tbaa !8
  %31 = and i16 %30, 32
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %37, label %33

; <label>:33                                      ; preds = %28
  %34 = call i64 (i64, ...)* @__syscall(i64 5, i64 ptrtoint ([10 x i8]* @.str284 to i64), i64 2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

; <label>:36                                      ; preds = %33
  store volatile i8 0, i8* null, align 536870912, !tbaa !0
  br label %37

; <label>:37                                      ; preds = %36, %33, %28
  %38 = add i64 %i.01, 1
  %exitcond = icmp eq i64 %38, 3
  br i1 %exitcond, label %39, label %28

; <label>:39                                      ; preds = %37
  store i32 1, i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 2), align 4, !tbaa !6
  br label %40

; <label>:40                                      ; preds = %39, %21
  ret void
}

define i32 @inotify_add_watch(i32 %fd, i8* %pathname, i32 %mask) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %pathname to i64
  %3 = zext i32 %mask to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 317, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @inotify_init1(i32 %flags) nounwind uwtable optsize {
  %1 = sext i32 %flags to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 360, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @inotify_init() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 316, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @inotify_rm_watch(i32 %fd, i32 %wd) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = zext i32 %wd to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 318, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define void @insque(i8* %element, i8* %pred) nounwind uwtable optsize {
  %1 = bitcast i8* %element to %struct.node*
  %2 = icmp eq i8* %pred, null
  br i1 %2, label %3, label %7

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i8* %element, i64 8
  %5 = bitcast i8* %4 to %struct.node**
  store %struct.node* null, %struct.node** %5, align 8, !tbaa !7
  %6 = bitcast i8* %element to %struct.node**
  store %struct.node* null, %struct.node** %6, align 8, !tbaa !7
  br label %18

; <label>:7                                       ; preds = %0
  %8 = bitcast i8* %pred to %struct.node*
  %9 = bitcast i8* %pred to %struct.node**
  %10 = load %struct.node** %9, align 8, !tbaa !7
  %11 = bitcast i8* %element to %struct.node**
  store %struct.node* %10, %struct.node** %11, align 8, !tbaa !7
  %12 = getelementptr inbounds i8* %element, i64 8
  %13 = bitcast i8* %12 to %struct.node**
  store %struct.node* %8, %struct.node** %13, align 8, !tbaa !7
  store %struct.node* %1, %struct.node** %9, align 8, !tbaa !7
  %14 = load %struct.node** %11, align 8, !tbaa !7
  %15 = icmp eq %struct.node* %14, null
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %7
  %17 = getelementptr inbounds %struct.node* %14, i64 0, i32 1
  store %struct.node* %1, %struct.node** %17, align 8, !tbaa !7
  br label %18

; <label>:18                                      ; preds = %16, %7, %3
  ret void
}

define void @remque(i8* nocapture %element) nounwind uwtable optsize {
  %1 = bitcast i8* %element to %struct.node**
  %2 = load %struct.node** %1, align 8, !tbaa !7
  %3 = icmp eq %struct.node* %2, null
  %.pre = getelementptr inbounds i8* %element, i64 8
  %.pre1 = bitcast i8* %.pre to %struct.node**
  br i1 %3, label %._crit_edge, label %4

; <label>:4                                       ; preds = %0
  %5 = load %struct.node** %.pre1, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.node* %2, i64 0, i32 1
  store %struct.node* %5, %struct.node** %6, align 8, !tbaa !7
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %0
  %7 = load %struct.node** %.pre1, align 8, !tbaa !7
  %8 = icmp eq %struct.node* %7, null
  br i1 %8, label %12, label %9

; <label>:9                                       ; preds = %._crit_edge
  %10 = load %struct.node** %1, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.node* %7, i64 0, i32 0
  store %struct.node* %10, %struct.node** %11, align 8, !tbaa !7
  br label %12

; <label>:12                                      ; preds = %9, %._crit_edge
  ret void
}

define i8* @gettext(i8* %msgid) nounwind uwtable readnone optsize {
  ret i8* %msgid
}

define i8* @dgettext(i8* nocapture %domainname, i8* %msgid) nounwind uwtable readnone optsize {
  ret i8* %msgid
}

define i8* @dcgettext(i8* nocapture %domainname, i8* %msgid, i32 %category) nounwind uwtable readnone optsize {
  ret i8* %msgid
}

define i8* @ngettext(i8* %msgid1, i8* %msgid2, i64 %n) nounwind uwtable readnone optsize {
  %1 = icmp eq i64 %n, 1
  %2 = select i1 %1, i8* %msgid1, i8* %msgid2
  ret i8* %2
}

define i8* @dngettext(i8* nocapture %domainname, i8* %msgid1, i8* %msgid2, i64 %n) nounwind uwtable readnone optsize {
  %1 = icmp eq i64 %n, 1
  %2 = select i1 %1, i8* %msgid1, i8* %msgid2
  ret i8* %2
}

define i8* @dcngettext(i8* nocapture %domainname, i8* %msgid1, i8* %msgid2, i64 %n, i32 %category) nounwind uwtable readnone optsize {
  %1 = icmp eq i64 %n, 1
  %2 = select i1 %1, i8* %msgid1, i8* %msgid2
  ret i8* %2
}

define i8* @textdomain(i8* %domainname) nounwind uwtable optsize {
  %1 = icmp eq i8* %domainname, null
  br i1 %1, label %10, label %2

; <label>:2                                       ; preds = %0
  %3 = load i8* %domainname, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i32 @strcmp(i8* %domainname, i8* getelementptr inbounds ([9 x i8]* @textdomain.default_str, i64 0, i64 0)) nounwind optsize
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %5
  %9 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %9, align 4, !tbaa !6
  br label %10

; <label>:10                                      ; preds = %8, %5, %2, %0
  %.0 = phi i8* [ null, %8 ], [ getelementptr inbounds ([9 x i8]* @textdomain.default_str, i64 0, i64 0), %5 ], [ getelementptr inbounds ([9 x i8]* @textdomain.default_str, i64 0, i64 0), %2 ], [ getelementptr inbounds ([9 x i8]* @textdomain.default_str, i64 0, i64 0), %0 ]
  ret i8* %.0
}

define i8* @bindtextdomain(i8* %domainname, i8* %dirname) nounwind uwtable optsize {
  %1 = icmp eq i8* %domainname, null
  br i1 %1, label %14, label %2

; <label>:2                                       ; preds = %0
  %3 = load i8* %domainname, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %14, label %5

; <label>:5                                       ; preds = %2
  %6 = icmp eq i8* %dirname, null
  br i1 %6, label %16, label %7

; <label>:7                                       ; preds = %5
  %8 = load i8* %dirname, align 1, !tbaa !0
  %9 = icmp eq i8 %8, 47
  br i1 %9, label %10, label %14

; <label>:10                                      ; preds = %7
  %11 = getelementptr inbounds i8* %dirname, i64 1
  %12 = load i8* %11, align 1, !tbaa !0
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %16, label %14

; <label>:14                                      ; preds = %10, %7, %2, %0
  %15 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %15, align 4, !tbaa !6
  br label %16

; <label>:16                                      ; preds = %14, %10, %5
  %.0 = phi i8* [ null, %14 ], [ getelementptr inbounds ([2 x i8]* @bindtextdomain.dir, i64 0, i64 0), %10 ], [ getelementptr inbounds ([2 x i8]* @bindtextdomain.dir, i64 0, i64 0), %5 ]
  ret i8* %.0
}

define noalias i8* @bind_textdomain_codeset(i8* %domainname, i8* %codeset) nounwind uwtable optsize {
  %1 = icmp eq i8* %domainname, null
  br i1 %1, label %10, label %2

; <label>:2                                       ; preds = %0
  %3 = load i8* %domainname, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %2
  %6 = icmp eq i8* %codeset, null
  br i1 %6, label %12, label %7

; <label>:7                                       ; preds = %5
  %8 = tail call i32 @strcasecmp(i8* %codeset, i8* getelementptr inbounds ([6 x i8]* @.str285, i64 0, i64 0)) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

; <label>:10                                      ; preds = %7, %2, %0
  %11 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %11, align 4, !tbaa !6
  br label %12

; <label>:12                                      ; preds = %10, %7, %5
  ret i8* null
}

define i32 @__intparse(%struct.intparse* nocapture %v, i8* nocapture %buf, i64 %n) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 4
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = sext i8 %2 to i32
  %4 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 2
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = add i64 %5, %n
  store i64 %6, i64* %4, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 5
  %8 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 6
  %9 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 3
  br label %10

; <label>:10                                      ; preds = %177, %0
  %s.0 = phi i8* [ %buf, %0 ], [ %179, %177 ]
  %.012 = phi i64 [ %n, %0 ], [ %178, %177 ]
  %b.0 = phi i32 [ %3, %0 ], [ %b.7, %177 ]
  %11 = icmp eq i64 %.012, 0
  br i1 %11, label %.critedge9, label %12

; <label>:12                                      ; preds = %10
  %13 = load i8* %7, align 1, !tbaa !0
  %14 = sext i8 %13 to i32
  switch i32 %14, label %177 [
    i32 0, label %15
    i32 1, label %21
    i32 2, label %31
    i32 3, label %.loopexit
    i32 4, label %.loopexit52
    i32 5, label %.preheader38.loopexit
    i32 6, label %.thread
  ]

; <label>:15                                      ; preds = %12
  store i8 22, i8* %8, align 1, !tbaa !0
  %16 = add i8 %13, 1
  store i8 %16, i8* %7, align 1, !tbaa !0
  %17 = load i8* %s.0, align 1, !tbaa !0
  switch i8 %17, label %21 [
    i8 43, label %18
    i8 45, label %18
  ]

; <label>:18                                      ; preds = %15, %15
  %19 = icmp eq i8 %17, 45
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %9, align 1, !tbaa !0
  br label %177

; <label>:21                                      ; preds = %15, %12
  %22 = phi i8 [ %16, %15 ], [ %13, %12 ]
  %23 = add i8 %22, 1
  store i8 %23, i8* %7, align 1, !tbaa !0
  %24 = load i8* %s.0, align 1, !tbaa !0
  %25 = icmp eq i8 %24, 48
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %21
  switch i32 %b.0, label %.loopexit54 [
    i32 16, label %177
    i32 0, label %177
  ]

; <label>:27                                      ; preds = %21
  %28 = icmp eq i32 %b.0, 0
  br i1 %28, label %29, label %.loopexit54

; <label>:29                                      ; preds = %27
  store i8 10, i8* %1, align 1, !tbaa !0
  br label %.loopexit54

.loopexit54:                                      ; preds = %29, %27, %26
  %b.1 = phi i32 [ %b.0, %27 ], [ 10, %29 ], [ %b.0, %26 ]
  %30 = add i8 %22, 2
  store i8 %30, i8* %7, align 1, !tbaa !0
  br label %.loopexit

; <label>:31                                      ; preds = %12
  %32 = add i8 %13, 1
  store i8 %32, i8* %7, align 1, !tbaa !0
  switch i32 %b.0, label %.loopexit53 [
    i32 16, label %33
    i32 0, label %33
  ]

; <label>:33                                      ; preds = %31, %31
  %34 = load i8* %s.0, align 1, !tbaa !0
  %35 = zext i8 %34 to i32
  %36 = or i32 %35, 32
  %37 = icmp eq i32 %36, 120
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %33
  store i8 0, i8* %8, align 1, !tbaa !0
  store i8 16, i8* %1, align 1, !tbaa !0
  br label %177

; <label>:39                                      ; preds = %33
  %40 = icmp eq i32 %b.0, 0
  br i1 %40, label %41, label %.loopexit53

; <label>:41                                      ; preds = %39
  store i8 8, i8* %1, align 1, !tbaa !0
  br label %.loopexit53

.loopexit:                                        ; preds = %.loopexit54, %12
  %42 = phi i8 [ %30, %.loopexit54 ], [ %13, %12 ]
  %b.2 = phi i32 [ %b.1, %.loopexit54 ], [ %b.0, %12 ]
  %43 = load i8* %s.0, align 1, !tbaa !0
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds [256 x i8]* @digits286, i64 0, i64 %44
  %46 = load i8* %45, align 1, !tbaa !0
  %47 = zext i8 %46 to i32
  %48 = icmp slt i32 %47, %b.2
  br i1 %48, label %.loopexit53, label %49

; <label>:49                                      ; preds = %.loopexit
  %50 = add i64 %.012, 1
  br label %.critedge11.thread24

.loopexit53:                                      ; preds = %.loopexit, %41, %39, %31
  %51 = phi i8 [ %42, %.loopexit ], [ %32, %39 ], [ %32, %41 ], [ %32, %31 ]
  %b.3 = phi i32 [ %b.2, %.loopexit ], [ %b.0, %39 ], [ 8, %41 ], [ %b.0, %31 ]
  store i8 0, i8* %8, align 1, !tbaa !0
  %52 = add i8 %51, 1
  store i8 %52, i8* %7, align 1, !tbaa !0
  br label %.loopexit52

.loopexit52:                                      ; preds = %.loopexit53, %12
  %53 = phi i8 [ %52, %.loopexit53 ], [ %13, %12 ]
  %b.4 = phi i32 [ %b.3, %.loopexit53 ], [ %b.0, %12 ]
  %54 = icmp eq i32 %b.4, 10
  br i1 %54, label %.preheader43, label %71

.preheader43:                                     ; preds = %.loopexit52
  %55 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 1
  br label %56

; <label>:56                                      ; preds = %66, %.preheader43
  %s.1 = phi i8* [ %70, %66 ], [ %s.0, %.preheader43 ]
  %.1 = phi i64 [ %69, %66 ], [ %.012, %.preheader43 ]
  %57 = icmp eq i64 %.1, 0
  br i1 %57, label %.critedge9, label %58

; <label>:58                                      ; preds = %56
  %59 = load i8* %s.1, align 1, !tbaa !0
  %60 = zext i8 %59 to i32
  %61 = add nsw i32 %60, -48
  %62 = icmp ult i32 %61, 10
  br i1 %62, label %63, label %.critedge.thread16

; <label>:63                                      ; preds = %58
  %64 = load i32* %55, align 4, !tbaa !6
  %65 = icmp ult i32 %64, 119304647
  br i1 %65, label %66, label %.critedge

; <label>:66                                      ; preds = %63
  %67 = mul i32 %64, 10
  %68 = add i32 %67, %61
  store i32 %68, i32* %55, align 4, !tbaa !6
  %69 = add i64 %.1, -1
  %70 = getelementptr inbounds i8* %s.1, i64 1
  br label %56

; <label>:71                                      ; preds = %.loopexit52
  %72 = sub nsw i32 0, %b.4
  %73 = and i32 %b.4, %72
  %74 = icmp eq i32 %73, %b.4
  br i1 %74, label %76, label %.preheader

.preheader:                                       ; preds = %71
  %75 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 1
  br label %102

; <label>:76                                      ; preds = %71
  %77 = mul nsw i32 %b.4, 23
  %78 = lshr i32 %77, 5
  %79 = and i32 %78, 7
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [9 x i8]* @.str287, i64 0, i64 %80
  %82 = load i8* %81, align 1, !tbaa !0
  %83 = sext i8 %82 to i32
  %84 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 1
  br label %85

; <label>:85                                      ; preds = %97, %76
  %s.2 = phi i8* [ %s.0, %76 ], [ %101, %97 ]
  %.2 = phi i64 [ %.012, %76 ], [ %100, %97 ]
  %86 = icmp eq i64 %.2, 0
  br i1 %86, label %.critedge9, label %87

; <label>:87                                      ; preds = %85
  %88 = load i8* %s.2, align 1, !tbaa !0
  %89 = zext i8 %88 to i64
  %90 = getelementptr inbounds [256 x i8]* @digits286, i64 0, i64 %89
  %91 = load i8* %90, align 1, !tbaa !0
  %92 = zext i8 %91 to i32
  %93 = icmp slt i32 %92, %b.4
  br i1 %93, label %94, label %.critedge.thread16

; <label>:94                                      ; preds = %87
  %95 = load i32* %84, align 4, !tbaa !6
  %96 = icmp ult i32 %95, 119304647
  br i1 %96, label %97, label %.critedge

; <label>:97                                      ; preds = %94
  %98 = shl i32 %95, %83
  %99 = add i32 %98, %92
  store i32 %99, i32* %84, align 4, !tbaa !6
  %100 = add i64 %.2, -1
  %101 = getelementptr inbounds i8* %s.2, i64 1
  br label %85

; <label>:102                                     ; preds = %114, %.preheader
  %s.3 = phi i8* [ %118, %114 ], [ %s.0, %.preheader ]
  %.3 = phi i64 [ %117, %114 ], [ %.012, %.preheader ]
  %103 = icmp eq i64 %.3, 0
  br i1 %103, label %.critedge9, label %104

; <label>:104                                     ; preds = %102
  %105 = load i8* %s.3, align 1, !tbaa !0
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds [256 x i8]* @digits286, i64 0, i64 %106
  %108 = load i8* %107, align 1, !tbaa !0
  %109 = zext i8 %108 to i32
  %110 = icmp slt i32 %109, %b.4
  br i1 %110, label %111, label %.critedge.thread16

; <label>:111                                     ; preds = %104
  %112 = load i32* %75, align 4, !tbaa !6
  %113 = icmp ult i32 %112, 119304647
  br i1 %113, label %114, label %.critedge

; <label>:114                                     ; preds = %111
  %115 = mul i32 %112, %b.4
  %116 = add i32 %115, %109
  store i32 %116, i32* %75, align 4, !tbaa !6
  %117 = add i64 %.3, -1
  %118 = getelementptr inbounds i8* %s.3, i64 1
  br label %102

.critedge:                                        ; preds = %111, %94, %63
  %s.4 = phi i8* [ %s.3, %111 ], [ %s.2, %94 ], [ %s.1, %63 ]
  %.4 = phi i64 [ %.3, %111 ], [ %.2, %94 ], [ %.1, %63 ]
  %119 = icmp eq i64 %.4, 0
  br i1 %119, label %.critedge9, label %.critedge..critedge.thread16_crit_edge

.critedge..critedge.thread16_crit_edge:           ; preds = %.critedge
  %.pre = getelementptr inbounds %struct.intparse* %v, i64 0, i32 1
  br label %.critedge.thread16

.critedge.thread16:                               ; preds = %.critedge..critedge.thread16_crit_edge, %104, %87, %58
  %.pre-phi = phi i32* [ %.pre, %.critedge..critedge.thread16_crit_edge ], [ %75, %104 ], [ %84, %87 ], [ %55, %58 ]
  %.418 = phi i64 [ %.4, %.critedge..critedge.thread16_crit_edge ], [ %.3, %104 ], [ %.2, %87 ], [ %.1, %58 ]
  %s.417 = phi i8* [ %s.4, %.critedge..critedge.thread16_crit_edge ], [ %s.3, %104 ], [ %s.2, %87 ], [ %s.1, %58 ]
  %120 = add i8 %53, 1
  store i8 %120, i8* %7, align 1, !tbaa !0
  %121 = load i32* %.pre-phi, align 4, !tbaa !6
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 0
  store i64 %122, i64* %123, align 8, !tbaa !9
  br label %.preheader38

.preheader38.loopexit:                            ; preds = %12
  %.pre143 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 0
  br label %.preheader38

.preheader38:                                     ; preds = %.preheader38.loopexit, %.critedge.thread16
  %.pre-phi144 = phi i64* [ %.pre143, %.preheader38.loopexit ], [ %123, %.critedge.thread16 ]
  %124 = phi i8 [ %13, %.preheader38.loopexit ], [ %120, %.critedge.thread16 ]
  %s.5.ph = phi i8* [ %s.0, %.preheader38.loopexit ], [ %s.417, %.critedge.thread16 ]
  %.5.ph = phi i64 [ %.012, %.preheader38.loopexit ], [ %.418, %.critedge.thread16 ]
  %b.5.ph = phi i32 [ %b.0, %.preheader38.loopexit ], [ %b.4, %.critedge.thread16 ]
  %125 = sext i32 %b.5.ph to i64
  br label %126

; <label>:126                                     ; preds = %138, %.preheader38
  %s.5 = phi i8* [ %143, %138 ], [ %s.5.ph, %.preheader38 ]
  %.5 = phi i64 [ %142, %138 ], [ %.5.ph, %.preheader38 ]
  %127 = icmp eq i64 %.5, 0
  br i1 %127, label %.critedge9, label %128

; <label>:128                                     ; preds = %126
  %129 = load i8* %s.5, align 1, !tbaa !0
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [256 x i8]* @digits286, i64 0, i64 %130
  %132 = load i8* %131, align 1, !tbaa !0
  %133 = zext i8 %132 to i32
  %134 = icmp slt i32 %133, %b.5.ph
  br i1 %134, label %135, label %.critedge11.thread24

; <label>:135                                     ; preds = %128
  %136 = load i64* %.pre-phi144, align 8, !tbaa !9
  %137 = icmp ult i64 %136, 512409557603043100
  br i1 %137, label %138, label %144

; <label>:138                                     ; preds = %135
  %139 = mul i64 %136, %125
  %140 = zext i8 %132 to i64
  %141 = add i64 %139, %140
  store i64 %141, i64* %.pre-phi144, align 8, !tbaa !9
  %142 = add i64 %.5, -1
  %143 = getelementptr inbounds i8* %s.5, i64 1
  br label %126

; <label>:144                                     ; preds = %135
  %145 = load i64* %.pre-phi144, align 8, !tbaa !9
  %146 = zext i8 %132 to i64
  %147 = xor i64 %146, -1
  %148 = udiv i64 %147, %125
  %149 = icmp ugt i64 %145, %148
  br i1 %149, label %153, label %150

; <label>:150                                     ; preds = %144
  %151 = mul i64 %145, %125
  %152 = add i64 %151, %146
  store i64 %152, i64* %.pre-phi144, align 8, !tbaa !9
  br label %154

; <label>:153                                     ; preds = %144
  store i8 34, i8* %8, align 1, !tbaa !0
  br label %154

; <label>:154                                     ; preds = %153, %150
  %155 = add i8 %124, 1
  store i8 %155, i8* %7, align 1, !tbaa !0
  %156 = add i64 %.5, -1
  %157 = getelementptr inbounds i8* %s.5, i64 1
  %158 = icmp eq i64 %156, 0
  br i1 %158, label %.critedge9, label %.thread

.thread:                                          ; preds = %154, %12
  %b.623 = phi i32 [ %b.5.ph, %154 ], [ %b.0, %12 ]
  %.622 = phi i64 [ %156, %154 ], [ %.012, %12 ]
  %s.621 = phi i8* [ %157, %154 ], [ %s.0, %12 ]
  %159 = load i8* %s.621, align 1, !tbaa !0
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds [256 x i8]* @digits286, i64 0, i64 %160
  %162 = load i8* %161, align 1, !tbaa !0
  %163 = zext i8 %162 to i32
  %164 = icmp slt i32 %163, %b.623
  br i1 %164, label %165, label %.critedge11

; <label>:165                                     ; preds = %.thread
  store i8 34, i8* %8, align 1, !tbaa !0
  %166 = getelementptr inbounds %struct.intparse* %v, i64 0, i32 0
  store i64 -1, i64* %166, align 8, !tbaa !9
  br label %167

; <label>:167                                     ; preds = %169, %165
  %s.6.pn = phi i8* [ %s.621, %165 ], [ %s.7, %169 ]
  %.7.in = phi i64 [ %.622, %165 ], [ %.7, %169 ]
  %s.7 = getelementptr inbounds i8* %s.6.pn, i64 1
  %.7 = add i64 %.7.in, -1
  %168 = icmp eq i64 %.7, 0
  br i1 %168, label %.critedge9, label %169

; <label>:169                                     ; preds = %167
  %170 = load i8* %s.7, align 1, !tbaa !0
  %171 = zext i8 %170 to i64
  %172 = getelementptr inbounds [256 x i8]* @digits286, i64 0, i64 %171
  %173 = load i8* %172, align 1, !tbaa !0
  %174 = zext i8 %173 to i32
  %175 = icmp slt i32 %174, %b.623
  br i1 %175, label %167, label %.critedge11.thread24

.critedge11:                                      ; preds = %.thread
  %176 = icmp eq i64 %.622, 0
  br i1 %176, label %.critedge9, label %.critedge11.thread24

; <label>:177                                     ; preds = %38, %26, %26, %18, %12
  %b.7 = phi i32 [ %b.0, %12 ], [ 16, %38 ], [ %b.0, %26 ], [ %b.0, %18 ], [ %b.0, %26 ]
  %178 = add i64 %.012, -1
  %179 = getelementptr inbounds i8* %s.0, i64 1
  br label %10

.critedge11.thread24:                             ; preds = %.critedge11, %169, %128, %49
  %.9 = phi i64 [ %.622, %.critedge11 ], [ %50, %49 ], [ %.7, %169 ], [ %.5, %128 ]
  %180 = sub i64 %6, %.9
  store i64 %180, i64* %4, align 8, !tbaa !5
  br label %.critedge9

.critedge9:                                       ; preds = %.critedge11.thread24, %.critedge11, %167, %154, %126, %.critedge, %102, %85, %56, %10
  %.0 = phi i32 [ 0, %.critedge11.thread24 ], [ 1, %.critedge ], [ 1, %.critedge11 ], [ 1, %154 ], [ 1, %102 ], [ 1, %85 ], [ 1, %167 ], [ 1, %126 ], [ 1, %56 ], [ 1, %10 ]
  ret i32 %.0
}

define i32 @ioctl(i32 %fd, i32 %req, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.217], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.217]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.217]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag.217]* %ap, i64 0, i64 0, i32 3
  %7 = load i8** %6, align 16
  %8 = sext i32 %3 to i64
  %9 = getelementptr i8* %7, i64 %8
  %10 = add i32 %3, 8
  store i32 %10, i32* %2, align 16
  br label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag.217]* %ap, i64 0, i64 0, i32 2
  %13 = load i8** %12, align 8
  %14 = getelementptr i8* %13, i64 8
  store i8* %14, i8** %12, align 8
  br label %15

; <label>:15                                      ; preds = %11, %5
  %.in = phi i8* [ %9, %5 ], [ %13, %11 ]
  %16 = bitcast i8* %.in to i8**
  %17 = load i8** %16, align 8
  call void @llvm.va_end(i8* %1)
  %18 = sext i32 %fd to i64
  %19 = sext i32 %req to i64
  %20 = ptrtoint i8* %17 to i64
  %21 = call i64 (i64, ...)* @__syscall(i64 54, i64 %18, i64 %19, i64 %20, i32 0, i32 0, i32 0) nounwind optsize
  %22 = call i64 @__syscall_ret(i64 %21) nounwind optsize
  %23 = trunc i64 %22 to i32
  ret i32 %23
}

define i32 @__ipparse(i8* %dest, i32 %family, i8* %s0) nounwind uwtable optsize {
  %a = alloca [16 x i64], align 16
  %z = alloca i8*, align 8
  %1 = bitcast [16 x i64]* %a to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 128, i32 16, i1 false)
  %2 = icmp eq i32 %family, 10
  br i1 %2, label %.loopexit2, label %.preheader

.preheader:                                       ; preds = %12, %0
  %indvars.iv5 = phi i64 [ %indvars.iv.next6, %12 ], [ 0, %0 ]
  %s.0 = phi i8* [ %13, %12 ], [ %s0, %0 ]
  %i.0 = phi i32 [ %14, %12 ], [ 0, %0 ]
  %3 = trunc i64 %indvars.iv5 to i32
  %4 = icmp slt i32 %3, 4
  br i1 %4, label %5, label %15

; <label>:5                                       ; preds = %.preheader
  %6 = call i64 @strtoul(i8* %s.0, i8** %z, i32 0) nounwind optsize
  %7 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 %indvars.iv5
  store i64 %6, i64* %7, align 8, !tbaa !5
  %8 = load i8** %z, align 8, !tbaa !7
  %9 = icmp eq i8* %8, %s.0
  br i1 %9, label %.loopexit2, label %10

; <label>:10                                      ; preds = %5
  %11 = load i8* %8, align 1, !tbaa !0
  switch i8 %11, label %.loopexit2 [
    i8 0, label %15
    i8 46, label %12
  ]

; <label>:12                                      ; preds = %10
  %13 = getelementptr inbounds i8* %8, i64 1
  %indvars.iv.next6 = add i64 %indvars.iv5, 1
  %14 = add nsw i32 %i.0, 1
  br label %.preheader

; <label>:15                                      ; preds = %10, %.preheader
  switch i32 %i.0, label %34 [
    i32 0, label %16
    i32 1, label %._crit_edge7
    i32 2, label %._crit_edge
  ]

._crit_edge7:                                     ; preds = %15
  %.phi.trans.insert = getelementptr inbounds [16 x i64]* %a, i64 0, i64 1
  %.pre = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br label %22

._crit_edge:                                      ; preds = %15
  %.phi.trans.insert9 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 2
  %.pre10 = load i64* %.phi.trans.insert9, align 16, !tbaa !5
  br label %28

; <label>:16                                      ; preds = %15
  %17 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 0
  %18 = load i64* %17, align 16, !tbaa !5
  %19 = and i64 %18, 16777215
  %20 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 1
  store i64 %19, i64* %20, align 8, !tbaa !5
  %21 = lshr i64 %18, 24
  store i64 %21, i64* %17, align 16, !tbaa !5
  br label %22

; <label>:22                                      ; preds = %16, %._crit_edge7
  %23 = phi i64 [ %.pre, %._crit_edge7 ], [ %19, %16 ]
  %24 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 1
  %25 = and i64 %23, 65535
  %26 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 2
  store i64 %25, i64* %26, align 16, !tbaa !5
  %27 = lshr i64 %23, 16
  store i64 %27, i64* %24, align 8, !tbaa !5
  br label %28

; <label>:28                                      ; preds = %22, %._crit_edge
  %29 = phi i64 [ %.pre10, %._crit_edge ], [ %25, %22 ]
  %30 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 2
  %31 = and i64 %29, 255
  %32 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 3
  store i64 %31, i64* %32, align 8, !tbaa !5
  %33 = lshr i64 %29, 8
  store i64 %33, i64* %30, align 16, !tbaa !5
  br label %34

; <label>:34                                      ; preds = %28, %15
  %35 = bitcast i8* %dest to i16*
  store i16 2, i16* %35, align 2, !tbaa !8
  br label %._crit_edge8

._crit_edge8:                                     ; preds = %._crit_edge8, %34
  %indvars.iv = phi i64 [ 0, %34 ], [ %indvars.iv.next, %._crit_edge8 ]
  %36 = getelementptr inbounds [16 x i64]* %a, i64 0, i64 %indvars.iv
  %37 = load i64* %36, align 8, !tbaa !5
  %38 = trunc i64 %37 to i8
  %.sum = add i64 %indvars.iv, 4
  %39 = getelementptr inbounds i8* %dest, i64 %.sum
  store i8 %38, i8* %39, align 1, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond, label %.loopexit, label %._crit_edge8

.loopexit2:                                       ; preds = %10, %5, %0
  %40 = bitcast i8* %dest to i16*
  store i16 10, i16* %40, align 2, !tbaa !8
  %41 = getelementptr inbounds i8* %dest, i64 8
  %42 = call i32 @inet_pton(i32 10, i8* %s0, i8* %41) nounwind optsize
  %43 = icmp slt i32 %42, 1
  %44 = sext i1 %43 to i32
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit2, %._crit_edge8
  %.0 = phi i32 [ %44, %.loopexit2 ], [ 0, %._crit_edge8 ]
  ret i32 %.0
}

define i32 @isalnum_l(i32 %c, %struct.__locale.218* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @isalnum(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @isalnum(i32 %c) nounwind uwtable readnone optsize {
  %1 = or i32 %c, 32
  %2 = add i32 %1, -97
  %3 = icmp ult i32 %2, 26
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = add i32 %c, -48
  %6 = icmp ult i32 %5, 10
  br label %7

; <label>:7                                       ; preds = %4, %0
  %8 = phi i1 [ true, %0 ], [ %6, %4 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

define i32 @isalpha_l(i32 %c, %struct.__locale.219* nocapture %l) nounwind uwtable readnone optsize {
  %1 = or i32 %c, 32
  %2 = add i32 %1, -97
  %3 = icmp ult i32 %2, 26
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i32 @isalpha(i32 %c) nounwind uwtable readnone optsize {
  %1 = or i32 %c, 32
  %2 = add i32 %1, -97
  %3 = icmp ult i32 %2, 26
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i32 @isascii(i32 %c) nounwind uwtable readnone optsize {
  %1 = icmp ult i32 %c, 128
  %2 = zext i1 %1 to i32
  ret i32 %2
}

define i32 @isatty(i32 %fd) nounwind uwtable optsize {
  %t = alloca %struct.termios.162, align 4
  %1 = call i32 @tcgetattr(i32 %fd, %struct.termios.162* %t) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isblank_l(i32 %c, %struct.__locale.221* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @isblank(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @isblank(i32 %c) nounwind uwtable readnone optsize {
  %1 = icmp eq i32 %c, 32
  %2 = icmp eq i32 %c, 9
  %3 = or i1 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i32 @iscntrl_l(i32 %c, %struct.__locale.222* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iscntrl(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iscntrl(i32 %c) nounwind uwtable readnone optsize {
  %1 = icmp ult i32 %c, 32
  %2 = icmp eq i32 %c, 127
  %3 = or i1 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i32 @isdigit_l(i32 %c, %struct.__locale.223* nocapture %l) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -48
  %2 = icmp ult i32 %1, 10
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isdigit(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -48
  %2 = icmp ult i32 %1, 10
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isgraph_l(i32 %c, %struct.__locale.224* nocapture %l) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -33
  %2 = icmp ult i32 %1, 94
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isgraph(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -33
  %2 = icmp ult i32 %1, 94
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @islower_l(i32 %c, %struct.__locale.225* nocapture %l) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -97
  %2 = icmp ult i32 %1, 26
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @islower(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -97
  %2 = icmp ult i32 %1, 26
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isprint_l(i32 %c, %struct.__locale.226* nocapture %l) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -32
  %2 = icmp ult i32 %1, 95
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isprint(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -32
  %2 = icmp ult i32 %1, 95
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @ispunct_l(i32 %c, %struct.__locale.227* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @ispunct(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @ispunct(i32 %c) nounwind uwtable optsize {
  %1 = add i32 %c, -33
  %2 = icmp ult i32 %1, 94
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @isalnum(i32 %c) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = phi i1 [ false, %0 ], [ %5, %3 ]
  %8 = zext i1 %7 to i32
  ret i32 %8
}

define i32 @isspace_l(i32 %c, %struct.__locale.228* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @isspace(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @isspace(i32 %c) nounwind uwtable readnone optsize {
  %1 = icmp eq i32 %c, 32
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = add i32 %c, -9
  %4 = icmp ult i32 %3, 5
  br label %5

; <label>:5                                       ; preds = %2, %0
  %6 = phi i1 [ true, %0 ], [ %4, %2 ]
  %7 = zext i1 %6 to i32
  ret i32 %7
}

define i32 @isupper_l(i32 %c, %struct.__locale.229* nocapture %l) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -65
  %2 = icmp ult i32 %1, 26
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @isupper(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -65
  %2 = icmp ult i32 %1, 26
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @iswalnum_l(i32 %c, %struct.__locale.230* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswalnum(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswalnum(i32 %wc) nounwind uwtable optsize {
  %1 = add i32 %wc, -48
  %2 = icmp ult i32 %1, 10
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @iswalpha(i32 %wc) nounwind optsize
  %5 = icmp ne i32 %4, 0
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = phi i1 [ true, %0 ], [ %5, %3 ]
  %8 = zext i1 %7 to i32
  ret i32 %8
}

define i32 @iswalpha_l(i32 %c, %struct.__locale.231* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswalpha(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswalpha(i32 %wc) nounwind uwtable readnone optsize {
  %1 = or i32 %wc, 32
  %2 = add i32 %1, -97
  %3 = icmp ult i32 %2, 26
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i32 @iswblank_l(i32 %c, %struct.__locale.232* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswblank(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswblank(i32 %wc) nounwind uwtable optsize {
  %1 = tail call i32 @isblank(i32 %wc) nounwind optsize
  ret i32 %1
}

define i32 @iswcntrl_l(i32 %c, %struct.__locale.233* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswcntrl(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswcntrl(i32 %wc) nounwind uwtable readnone optsize {
  %1 = icmp ult i32 %wc, 32
  %2 = add nsw i32 %wc, -127
  %3 = icmp ult i32 %2, 33
  %or.cond = or i1 %1, %3
  %4 = add nsw i32 %wc, -8232
  %5 = icmp ult i32 %4, 2
  %or.cond3 = or i1 %or.cond, %5
  br i1 %or.cond3, label %9, label %6

; <label>:6                                       ; preds = %0
  %7 = add nsw i32 %wc, -65529
  %8 = icmp ult i32 %7, 3
  br label %9

; <label>:9                                       ; preds = %6, %0
  %10 = phi i1 [ true, %0 ], [ %8, %6 ]
  %11 = zext i1 %10 to i32
  ret i32 %11
}

define i32 @iswctype_l(i32 %c, i32 %t, %struct.__locale.234* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswctype(i32 %c, i32 %t) nounwind optsize
  ret i32 %1
}

define i32 @iswctype(i32 %wc, i32 %type) nounwind uwtable optsize {
  switch i32 %type, label %27 [
    i32 1, label %1
    i32 2, label %3
    i32 3, label %5
    i32 4, label %7
    i32 5, label %9
    i32 6, label %13
    i32 7, label %15
    i32 8, label %17
    i32 9, label %19
    i32 10, label %21
    i32 11, label %23
    i32 12, label %25
  ]

; <label>:1                                       ; preds = %0
  %2 = tail call i32 @iswalnum(i32 %wc) nounwind optsize
  br label %27

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @iswalpha(i32 %wc) nounwind optsize
  br label %27

; <label>:5                                       ; preds = %0
  %6 = tail call i32 @iswblank(i32 %wc) nounwind optsize
  br label %27

; <label>:7                                       ; preds = %0
  %8 = tail call i32 @iswcntrl(i32 %wc) nounwind optsize
  br label %27

; <label>:9                                       ; preds = %0
  %10 = add i32 %wc, -48
  %11 = icmp ult i32 %10, 10
  %12 = zext i1 %11 to i32
  br label %27

; <label>:13                                      ; preds = %0
  %14 = tail call i32 @iswgraph(i32 %wc) nounwind optsize
  br label %27

; <label>:15                                      ; preds = %0
  %16 = tail call i32 @iswlower(i32 %wc) nounwind optsize
  br label %27

; <label>:17                                      ; preds = %0
  %18 = tail call i32 @iswprint(i32 %wc) nounwind optsize
  br label %27

; <label>:19                                      ; preds = %0
  %20 = tail call i32 @iswpunct(i32 %wc) nounwind optsize
  br label %27

; <label>:21                                      ; preds = %0
  %22 = tail call i32 @iswspace(i32 %wc) nounwind optsize
  br label %27

; <label>:23                                      ; preds = %0
  %24 = tail call i32 @iswupper(i32 %wc) nounwind optsize
  br label %27

; <label>:25                                      ; preds = %0
  %26 = tail call i32 @iswxdigit(i32 %wc) nounwind optsize
  br label %27

; <label>:27                                      ; preds = %25, %23, %21, %19, %17, %15, %13, %9, %7, %5, %3, %1, %0
  %.0 = phi i32 [ %26, %25 ], [ %24, %23 ], [ %22, %21 ], [ %20, %19 ], [ %18, %17 ], [ %16, %15 ], [ %14, %13 ], [ %12, %9 ], [ %8, %7 ], [ %6, %5 ], [ %4, %3 ], [ %2, %1 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @wctype(i8* %s) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 1, %0 ], [ %11, %10 ]
  %p.0 = phi i8* [ getelementptr inbounds ([73 x i8]* @wctype.names, i64 0, i64 0), %0 ], [ %12, %10 ]
  %2 = load i8* %p.0, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %13, label %4

; <label>:4                                       ; preds = %1
  %5 = load i8* %s, align 1, !tbaa !0
  %6 = icmp eq i8 %5, %2
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %4
  %8 = tail call i32 @strcmp(i8* %s, i8* %p.0) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %4
  %11 = add nsw i32 %i.0, 1
  %12 = getelementptr inbounds i8* %p.0, i64 6
  br label %1

; <label>:13                                      ; preds = %7, %1
  %.0 = phi i32 [ %i.0, %7 ], [ 0, %1 ]
  ret i32 %.0
}

define i32 @iswdigit_l(i32 %c, %struct.__locale.235* nocapture %l) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -48
  %2 = icmp ult i32 %1, 10
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @iswdigit(i32 %wc) nounwind uwtable readnone optsize {
  %1 = add i32 %wc, -48
  %2 = icmp ult i32 %1, 10
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @iswgraph_l(i32 %c, %struct.__locale.236* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswgraph(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswgraph(i32 %wc) nounwind uwtable optsize {
  %1 = tail call i32 @iswspace(i32 %wc) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @iswprint(i32 %wc) nounwind optsize
  %5 = icmp ne i32 %4, 0
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = phi i1 [ false, %0 ], [ %5, %3 ]
  %8 = zext i1 %7 to i32
  ret i32 %8
}

define i32 @iswlower_l(i32 %c, %struct.__locale.237* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswlower(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswlower(i32 %wc) nounwind uwtable optsize {
  %1 = tail call i32 @towupper(i32 %wc) nounwind optsize
  %2 = icmp ne i32 %1, %wc
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @iswprint_l(i32 %c, %struct.__locale.238* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswprint(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswprint(i32 %wc) nounwind uwtable optsize {
  %1 = icmp ugt i32 %wc, 1114111
  %2 = add i32 %wc, -55296
  %3 = icmp ult i32 %2, 2048
  %or.cond = or i1 %1, %3
  %4 = and i32 %wc, 65534
  %5 = icmp eq i32 %4, 65534
  %or.cond3 = or i1 %or.cond, %5
  br i1 %or.cond3, label %10, label %6

; <label>:6                                       ; preds = %0
  %7 = tail call i32 @iswcntrl(i32 %wc) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  br label %10

; <label>:10                                      ; preds = %9, %6, %0
  %.0 = phi i32 [ 1, %9 ], [ 0, %6 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @iswpunct_l(i32 %c, %struct.__locale.239* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswpunct(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswpunct(i32 %wc) nounwind uwtable readnone optsize {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %a.0 = phi i32 [ 0, %0 ], [ %13, %1 ]
  %n.0 = phi i32 [ 114, %0 ], [ %2, %1 ]
  %2 = ashr i32 %n.0, 1
  %3 = add nsw i32 %2, 1
  %4 = add nsw i32 %2, %a.0
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [114 x %struct.range]* bitcast (<{ { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 } }>* @ranges to [114 x %struct.range]*), i64 0, i64 %5
  %7 = bitcast %struct.range* %6 to i32*
  %8 = load i32* %7, align 4
  %9 = and i32 %8, 1048575
  %10 = sub i32 %9, %wc
  %11 = ashr i32 %10, 31
  %12 = and i32 %11, %3
  %13 = add nsw i32 %12, %a.0
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %1

; <label>:15                                      ; preds = %1
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds [114 x %struct.range]* bitcast (<{ { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 } }>* @ranges to [114 x %struct.range]*), i64 0, i64 %16
  %18 = bitcast %struct.range* %17 to i32*
  %19 = load i32* %18, align 4
  %20 = and i32 %19, 1048575
  %21 = sub i32 %20, %wc
  %22 = lshr i32 %19, 20
  %23 = icmp ule i32 %21, %22
  %24 = zext i1 %23 to i32
  ret i32 %24
}

define i32 @iswspace_l(i32 %c, %struct.__locale.240* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswspace(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswspace(i32 %wc) nounwind uwtable optsize {
  %1 = tail call i32* @wcschr(i32* getelementptr inbounds ([22 x i32]* @iswspace.spaces, i64 0, i64 0), i32 %wc) nounwind optsize
  %not. = icmp ne i32* %1, null
  %. = zext i1 %not. to i32
  ret i32 %.
}

define i32 @iswupper_l(i32 %c, %struct.__locale.241* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswupper(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswupper(i32 %wc) nounwind uwtable optsize {
  %1 = tail call i32 @towlower(i32 %wc) nounwind optsize
  %2 = icmp ne i32 %1, %wc
  %3 = zext i1 %2 to i32
  ret i32 %3
}

define i32 @iswxdigit_l(i32 %c, %struct.__locale.242* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @iswxdigit(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @iswxdigit(i32 %wc) nounwind uwtable readnone optsize {
  %1 = add nsw i32 %wc, -48
  %2 = icmp ult i32 %1, 10
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = or i32 %wc, 32
  %5 = add nsw i32 %4, -97
  %6 = icmp ult i32 %5, 6
  br label %7

; <label>:7                                       ; preds = %3, %0
  %8 = phi i1 [ true, %0 ], [ %6, %3 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

define i32 @isxdigit_l(i32 %c, %struct.__locale.243* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @isxdigit(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @isxdigit(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -48
  %2 = icmp ult i32 %1, 10
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = or i32 %c, 32
  %5 = add i32 %4, -97
  %6 = icmp ult i32 %5, 6
  br label %7

; <label>:7                                       ; preds = %3, %0
  %8 = phi i1 [ true, %0 ], [ %6, %3 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

define float @j0f(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = fmul float %x, %x
  %6 = fdiv float 1.000000e+00, %5
  br label %77

; <label>:7                                       ; preds = %0
  %8 = tail call float @fabsf(float %x) nounwind optsize
  %9 = icmp ugt i32 %2, 1073741823
  br i1 %9, label %10, label %35

; <label>:10                                      ; preds = %7
  %11 = tail call float @sinf(float %8) nounwind optsize
  %12 = tail call float @cosf(float %8) nounwind optsize
  %13 = fsub float %11, %12
  %14 = fadd float %11, %12
  %15 = icmp ult i32 %2, 2130706432
  br i1 %15, label %16, label %26

; <label>:16                                      ; preds = %10
  %17 = fadd float %8, %8
  %18 = tail call float @cosf(float %17) nounwind optsize
  %19 = fsub float -0.000000e+00, %18
  %20 = fmul float %11, %12
  %21 = fcmp olt float %20, 0.000000e+00
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %16
  %23 = fdiv float %19, %13
  br label %26

; <label>:24                                      ; preds = %16
  %25 = fdiv float %19, %14
  br label %26

; <label>:26                                      ; preds = %24, %22, %10
  %cc.0 = phi float [ %23, %22 ], [ %14, %24 ], [ %14, %10 ]
  %ss.0 = phi float [ %13, %22 ], [ %25, %24 ], [ %13, %10 ]
  %27 = tail call fastcc float @pzerof(float %8) optsize
  %28 = tail call fastcc float @qzerof(float %8) optsize
  %29 = tail call float @sqrtf(float %8) nounwind optsize
  %30 = fmul float %28, %ss.0
  %31 = fmul float %27, %cc.0
  %32 = fsub float %31, %30
  %33 = fmul float %32, 0x3FE20DD760000000
  %34 = fdiv float %33, %29
  br label %77

; <label>:35                                      ; preds = %7
  %36 = icmp ult i32 %2, 956301312
  br i1 %36, label %37, label %46

; <label>:37                                      ; preds = %35
  %38 = fadd float %8, 0x46293E5940000000
  %39 = fcmp ogt float %38, 1.000000e+00
  br i1 %39, label %40, label %46

; <label>:40                                      ; preds = %37
  %41 = icmp ult i32 %2, 838860800
  br i1 %41, label %77, label %42

; <label>:42                                      ; preds = %40
  %43 = fmul float %8, 2.500000e-01
  %44 = fmul float %43, %8
  %45 = fsub float 1.000000e+00, %44
  br label %77

; <label>:46                                      ; preds = %37, %35
  %47 = fmul float %8, %8
  %48 = fmul float %47, 0xBE33D5E780000000
  %49 = fadd float %48, 0x3EBEB1D100000000
  %50 = fmul float %47, %49
  %51 = fadd float %50, 0xBF28E6A5C0000000
  %52 = fmul float %47, %51
  %53 = fadd float %52, 1.562500e-02
  %54 = fmul float %47, %53
  %55 = fmul float %47, 0x3E1408BD00000000
  %56 = fadd float %55, 0x3EA13B54C0000000
  %57 = fmul float %47, %56
  %58 = fadd float %57, 0x3F1EA6D2E0000000
  %59 = fmul float %47, %58
  %60 = fadd float %59, 0x3F8FFCE880000000
  %61 = fmul float %47, %60
  %62 = fadd float %61, 1.000000e+00
  %63 = icmp ult i32 %2, 1065353216
  br i1 %63, label %64, label %69

; <label>:64                                      ; preds = %46
  %65 = fdiv float %54, %62
  %66 = fadd float %65, -2.500000e-01
  %67 = fmul float %47, %66
  %68 = fadd float %67, 1.000000e+00
  br label %77

; <label>:69                                      ; preds = %46
  %70 = fmul float %8, 5.000000e-01
  %71 = fadd float %70, 1.000000e+00
  %72 = fsub float 1.000000e+00, %70
  %73 = fmul float %71, %72
  %74 = fdiv float %54, %62
  %75 = fmul float %47, %74
  %76 = fadd float %73, %75
  br label %77

; <label>:77                                      ; preds = %69, %64, %42, %40, %26, %4
  %.0 = phi float [ %6, %4 ], [ %34, %26 ], [ %45, %42 ], [ %68, %64 ], [ %76, %69 ], [ 1.000000e+00, %40 ]
  ret float %.0
}

define internal fastcc float @pzerof(float %x) nounwind uwtable readonly optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1090519039
  br i1 %3, label %11, label %4

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 1089936471
  br i1 %5, label %11, label %6

; <label>:6                                       ; preds = %4
  %7 = icmp ugt i32 %2, 1077336935
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %2, 1073741823
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %8
  br label %11

; <label>:11                                      ; preds = %10, %8, %6, %4, %0
  %q.0 = phi float* [ getelementptr inbounds ([5 x float]* @pS2, i64 0, i64 0), %10 ], [ undef, %8 ], [ getelementptr inbounds ([5 x float]* @pS8, i64 0, i64 0), %0 ], [ getelementptr inbounds ([5 x float]* @pS5, i64 0, i64 0), %4 ], [ getelementptr inbounds ([5 x float]* @pS3, i64 0, i64 0), %6 ]
  %p.0 = phi float* [ getelementptr inbounds ([6 x float]* @pR2, i64 0, i64 0), %10 ], [ undef, %8 ], [ getelementptr inbounds ([6 x float]* @pR8, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x float]* @pR5, i64 0, i64 0), %4 ], [ getelementptr inbounds ([6 x float]* @pR3, i64 0, i64 0), %6 ]
  %12 = fmul float %x, %x
  %13 = fdiv float 1.000000e+00, %12
  %14 = load float* %p.0, align 4, !tbaa !2
  %15 = getelementptr inbounds float* %p.0, i64 1
  %16 = load float* %15, align 4, !tbaa !2
  %17 = getelementptr inbounds float* %p.0, i64 2
  %18 = load float* %17, align 4, !tbaa !2
  %19 = getelementptr inbounds float* %p.0, i64 3
  %20 = load float* %19, align 4, !tbaa !2
  %21 = getelementptr inbounds float* %p.0, i64 4
  %22 = load float* %21, align 4, !tbaa !2
  %23 = getelementptr inbounds float* %p.0, i64 5
  %24 = load float* %23, align 4, !tbaa !2
  %25 = fmul float %13, %24
  %26 = fadd float %22, %25
  %27 = fmul float %13, %26
  %28 = fadd float %20, %27
  %29 = fmul float %13, %28
  %30 = fadd float %18, %29
  %31 = fmul float %13, %30
  %32 = fadd float %16, %31
  %33 = fmul float %13, %32
  %34 = fadd float %14, %33
  %35 = load float* %q.0, align 4, !tbaa !2
  %36 = getelementptr inbounds float* %q.0, i64 1
  %37 = load float* %36, align 4, !tbaa !2
  %38 = getelementptr inbounds float* %q.0, i64 2
  %39 = load float* %38, align 4, !tbaa !2
  %40 = getelementptr inbounds float* %q.0, i64 3
  %41 = load float* %40, align 4, !tbaa !2
  %42 = getelementptr inbounds float* %q.0, i64 4
  %43 = load float* %42, align 4, !tbaa !2
  %44 = fmul float %13, %43
  %45 = fadd float %41, %44
  %46 = fmul float %13, %45
  %47 = fadd float %39, %46
  %48 = fmul float %13, %47
  %49 = fadd float %37, %48
  %50 = fmul float %13, %49
  %51 = fadd float %35, %50
  %52 = fmul float %13, %51
  %53 = fadd float %52, 1.000000e+00
  %54 = fdiv float %34, %53
  %55 = fadd float %54, 1.000000e+00
  ret float %55
}

define internal fastcc float @qzerof(float %x) nounwind uwtable readonly optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1090519039
  br i1 %3, label %11, label %4

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 1089936471
  br i1 %5, label %11, label %6

; <label>:6                                       ; preds = %4
  %7 = icmp ugt i32 %2, 1077336935
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %2, 1073741823
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %8
  br label %11

; <label>:11                                      ; preds = %10, %8, %6, %4, %0
  %q.0 = phi float* [ getelementptr inbounds ([6 x float]* @qS2, i64 0, i64 0), %10 ], [ undef, %8 ], [ getelementptr inbounds ([6 x float]* @qS8, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x float]* @qS5, i64 0, i64 0), %4 ], [ getelementptr inbounds ([6 x float]* @qS3, i64 0, i64 0), %6 ]
  %p.0 = phi float* [ getelementptr inbounds ([6 x float]* @qR2, i64 0, i64 0), %10 ], [ undef, %8 ], [ getelementptr inbounds ([6 x float]* @qR8, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x float]* @qR5, i64 0, i64 0), %4 ], [ getelementptr inbounds ([6 x float]* @qR3, i64 0, i64 0), %6 ]
  %12 = fmul float %x, %x
  %13 = fdiv float 1.000000e+00, %12
  %14 = load float* %p.0, align 4, !tbaa !2
  %15 = getelementptr inbounds float* %p.0, i64 1
  %16 = load float* %15, align 4, !tbaa !2
  %17 = getelementptr inbounds float* %p.0, i64 2
  %18 = load float* %17, align 4, !tbaa !2
  %19 = getelementptr inbounds float* %p.0, i64 3
  %20 = load float* %19, align 4, !tbaa !2
  %21 = getelementptr inbounds float* %p.0, i64 4
  %22 = load float* %21, align 4, !tbaa !2
  %23 = getelementptr inbounds float* %p.0, i64 5
  %24 = load float* %23, align 4, !tbaa !2
  %25 = fmul float %13, %24
  %26 = fadd float %22, %25
  %27 = fmul float %13, %26
  %28 = fadd float %20, %27
  %29 = fmul float %13, %28
  %30 = fadd float %18, %29
  %31 = fmul float %13, %30
  %32 = fadd float %16, %31
  %33 = fmul float %13, %32
  %34 = fadd float %14, %33
  %35 = load float* %q.0, align 4, !tbaa !2
  %36 = getelementptr inbounds float* %q.0, i64 1
  %37 = load float* %36, align 4, !tbaa !2
  %38 = getelementptr inbounds float* %q.0, i64 2
  %39 = load float* %38, align 4, !tbaa !2
  %40 = getelementptr inbounds float* %q.0, i64 3
  %41 = load float* %40, align 4, !tbaa !2
  %42 = getelementptr inbounds float* %q.0, i64 4
  %43 = load float* %42, align 4, !tbaa !2
  %44 = getelementptr inbounds float* %q.0, i64 5
  %45 = load float* %44, align 4, !tbaa !2
  %46 = fmul float %13, %45
  %47 = fadd float %43, %46
  %48 = fmul float %13, %47
  %49 = fadd float %41, %48
  %50 = fmul float %13, %49
  %51 = fadd float %39, %50
  %52 = fmul float %13, %51
  %53 = fadd float %37, %52
  %54 = fmul float %13, %53
  %55 = fadd float %35, %54
  %56 = fmul float %13, %55
  %57 = fadd float %56, 1.000000e+00
  %58 = fdiv float %34, %57
  %59 = fadd float %58, -1.250000e-01
  %60 = fdiv float %59, %x
  ret float %60
}

define float @y0f(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %8

; <label>:4                                       ; preds = %0
  %5 = fmul float %x, %x
  %6 = fadd float %5, %x
  %7 = fdiv float 1.000000e+00, %6
  br label %73

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %73, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp slt i32 %1, 0
  br i1 %11, label %73, label %12

; <label>:12                                      ; preds = %10
  %13 = icmp ugt i32 %2, 1073741823
  br i1 %13, label %14, label %39

; <label>:14                                      ; preds = %12
  %15 = tail call float @sinf(float %x) nounwind optsize
  %16 = tail call float @cosf(float %x) nounwind optsize
  %17 = fsub float %15, %16
  %18 = fadd float %15, %16
  %19 = icmp ult i32 %2, 2130706432
  br i1 %19, label %20, label %30

; <label>:20                                      ; preds = %14
  %21 = fadd float %x, %x
  %22 = tail call float @cosf(float %21) nounwind optsize
  %23 = fsub float -0.000000e+00, %22
  %24 = fmul float %15, %16
  %25 = fcmp olt float %24, 0.000000e+00
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %20
  %27 = fdiv float %23, %17
  br label %30

; <label>:28                                      ; preds = %20
  %29 = fdiv float %23, %18
  br label %30

; <label>:30                                      ; preds = %28, %26, %14
  %ss.0 = phi float [ %17, %26 ], [ %29, %28 ], [ %17, %14 ]
  %cc.0 = phi float [ %27, %26 ], [ %18, %28 ], [ %18, %14 ]
  %31 = tail call fastcc float @pzerof(float %x) optsize
  %32 = tail call fastcc float @qzerof(float %x) optsize
  %33 = fmul float %31, %ss.0
  %34 = fmul float %32, %cc.0
  %35 = fadd float %33, %34
  %36 = fmul float %35, 0x3FE20DD760000000
  %37 = tail call float @sqrtf(float %x) nounwind optsize
  %38 = fdiv float %36, %37
  br label %73

; <label>:39                                      ; preds = %12
  %40 = icmp ult i32 %2, 838860801
  br i1 %40, label %41, label %45

; <label>:41                                      ; preds = %39
  %42 = tail call float @logf(float %x) nounwind optsize
  %43 = fmul float %42, 0x3FE45F3060000000
  %44 = fadd float %43, 0xBFB2E4D6A0000000
  br label %73

; <label>:45                                      ; preds = %39
  %46 = fmul float %x, %x
  %47 = fmul float %46, 0xBDC5E43D60000000
  %48 = fadd float %47, 0x3E55005740000000
  %49 = fmul float %46, %48
  %50 = fadd float %49, 0xBECFFEA780000000
  %51 = fmul float %46, %50
  %52 = fadd float %51, 0x3F36C54D20000000
  %53 = fmul float %46, %52
  %54 = fadd float %53, 0xBF8C4CE8C0000000
  %55 = fmul float %46, %54
  %56 = fadd float %55, 0x3FC69D01A0000000
  %57 = fmul float %46, %56
  %58 = fadd float %57, 0xBFB2E4D6A0000000
  %59 = fmul float %46, 0x3DFE501840000000
  %60 = fadd float %59, 0x3E91642D80000000
  %61 = fmul float %46, %60
  %62 = fadd float %61, 0x3F13ECBC00000000
  %63 = fmul float %46, %62
  %64 = fadd float %63, 0x3F8A1270A0000000
  %65 = fmul float %46, %64
  %66 = fadd float %65, 1.000000e+00
  %67 = fdiv float %58, %66
  %68 = tail call float @j0f(float %x) optsize
  %69 = tail call float @logf(float %x) nounwind optsize
  %70 = fmul float %68, %69
  %71 = fmul float %70, 0x3FE45F3060000000
  %72 = fadd float %67, %71
  br label %73

; <label>:73                                      ; preds = %45, %41, %30, %10, %8, %4
  %.0 = phi float [ %7, %4 ], [ %38, %30 ], [ %44, %41 ], [ %72, %45 ], [ 0xFFF0000000000000, %8 ], [ 0x7FF8000000000000, %10 ]
  ret float %.0
}

define double @j0(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %0
  %7 = fmul double %x, %x
  %8 = fdiv double 1.000000e+00, %7
  br label %84

; <label>:9                                       ; preds = %0
  %10 = tail call double @fabs(double %x) nounwind optsize
  %11 = icmp ugt i32 %4, 1073741823
  br i1 %11, label %12, label %42

; <label>:12                                      ; preds = %9
  %13 = tail call double @sin(double %10) nounwind optsize
  %14 = tail call double @cos(double %10) nounwind optsize
  %15 = fsub double %13, %14
  %16 = fadd double %13, %14
  %17 = icmp ult i32 %4, 2145386496
  br i1 %17, label %18, label %.thread

; <label>:18                                      ; preds = %12
  %19 = fadd double %10, %10
  %20 = tail call double @cos(double %19) nounwind optsize
  %21 = fsub double -0.000000e+00, %20
  %22 = fmul double %13, %14
  %23 = fcmp olt double %22, 0.000000e+00
  br i1 %23, label %24, label %26

; <label>:24                                      ; preds = %18
  %25 = fdiv double %21, %15
  br label %28

; <label>:26                                      ; preds = %18
  %27 = fdiv double %21, %16
  br label %28

; <label>:28                                      ; preds = %26, %24
  %cc.0 = phi double [ %25, %24 ], [ %16, %26 ]
  %ss.0 = phi double [ %15, %24 ], [ %27, %26 ]
  %29 = icmp ugt i32 %4, 1207959552
  br i1 %29, label %.thread, label %33

.thread:                                          ; preds = %28, %12
  %cc.01 = phi double [ %cc.0, %28 ], [ %16, %12 ]
  %30 = fmul double %cc.01, 0x3FE20DD750429B6D
  %31 = tail call double @sqrt(double %10) nounwind optsize
  %32 = fdiv double %30, %31
  br label %84

; <label>:33                                      ; preds = %28
  %34 = tail call fastcc double @pzero(double %10) optsize
  %35 = tail call fastcc double @qzero(double %10) optsize
  %36 = fmul double %34, %cc.0
  %37 = fmul double %35, %ss.0
  %38 = fsub double %36, %37
  %39 = fmul double %38, 0x3FE20DD750429B6D
  %40 = tail call double @sqrt(double %10) nounwind optsize
  %41 = fdiv double %39, %40
  br label %84

; <label>:42                                      ; preds = %9
  %43 = icmp ult i32 %4, 1059061760
  br i1 %43, label %44, label %53

; <label>:44                                      ; preds = %42
  %45 = fadd double %10, 1.000000e+300
  %46 = fcmp ogt double %45, 1.000000e+00
  br i1 %46, label %47, label %53

; <label>:47                                      ; preds = %44
  %48 = icmp ult i32 %4, 1044381696
  br i1 %48, label %84, label %49

; <label>:49                                      ; preds = %47
  %50 = fmul double %10, 2.500000e-01
  %51 = fmul double %50, %10
  %52 = fsub double 1.000000e+00, %51
  br label %84

; <label>:53                                      ; preds = %44, %42
  %54 = fmul double %10, %10
  %55 = fmul double %54, 0xBE33D5E773D63FCE
  %56 = fadd double %55, 0x3EBEB1D10C503919
  %57 = fmul double %54, %56
  %58 = fadd double %57, 0xBF28E6A5B61AC6E9
  %59 = fmul double %54, %58
  %60 = fadd double %59, 0x3F8FFFFFFFFFFFFD
  %61 = fmul double %54, %60
  %62 = fmul double %54, 0x3E1408BCF4745D8F
  %63 = fadd double %62, 0x3EA13B54CE84D5A9
  %64 = fmul double %54, %63
  %65 = fadd double %64, 0x3F1EA6D2DD57DBF4
  %66 = fmul double %54, %65
  %67 = fadd double %66, 0x3F8FFCE882C8C2A4
  %68 = fmul double %54, %67
  %69 = fadd double %68, 1.000000e+00
  %70 = icmp ult i32 %4, 1072693248
  br i1 %70, label %71, label %76

; <label>:71                                      ; preds = %53
  %72 = fdiv double %61, %69
  %73 = fadd double %72, -2.500000e-01
  %74 = fmul double %54, %73
  %75 = fadd double %74, 1.000000e+00
  br label %84

; <label>:76                                      ; preds = %53
  %77 = fmul double %10, 5.000000e-01
  %78 = fadd double %77, 1.000000e+00
  %79 = fsub double 1.000000e+00, %77
  %80 = fmul double %78, %79
  %81 = fdiv double %61, %69
  %82 = fmul double %54, %81
  %83 = fadd double %80, %82
  br label %84

; <label>:84                                      ; preds = %76, %71, %49, %47, %33, %.thread, %6
  %.0 = phi double [ %8, %6 ], [ %52, %49 ], [ %75, %71 ], [ %83, %76 ], [ %32, %.thread ], [ %41, %33 ], [ 1.000000e+00, %47 ]
  ret double %.0
}

define internal fastcc double @pzero(double %x) nounwind uwtable readonly optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1075838975
  br i1 %5, label %13, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 1074933386
  br i1 %7, label %13, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %4, 1074191212
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp ugt i32 %4, 1073741823
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %10
  br label %13

; <label>:13                                      ; preds = %12, %10, %8, %6, %0
  %q.0 = phi double* [ getelementptr inbounds ([5 x double]* @pS2379, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([5 x double]* @pS8373, i64 0, i64 0), %0 ], [ getelementptr inbounds ([5 x double]* @pS5375, i64 0, i64 0), %6 ], [ getelementptr inbounds ([5 x double]* @pS3377, i64 0, i64 0), %8 ]
  %p.0 = phi double* [ getelementptr inbounds ([6 x double]* @pR2378, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([6 x double]* @pR8372, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x double]* @pR5374, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x double]* @pR3376, i64 0, i64 0), %8 ]
  %14 = fmul double %x, %x
  %15 = fdiv double 1.000000e+00, %14
  %16 = load double* %p.0, align 8, !tbaa !3
  %17 = getelementptr inbounds double* %p.0, i64 1
  %18 = load double* %17, align 8, !tbaa !3
  %19 = getelementptr inbounds double* %p.0, i64 2
  %20 = load double* %19, align 8, !tbaa !3
  %21 = getelementptr inbounds double* %p.0, i64 3
  %22 = load double* %21, align 8, !tbaa !3
  %23 = getelementptr inbounds double* %p.0, i64 4
  %24 = load double* %23, align 8, !tbaa !3
  %25 = getelementptr inbounds double* %p.0, i64 5
  %26 = load double* %25, align 8, !tbaa !3
  %27 = fmul double %15, %26
  %28 = fadd double %24, %27
  %29 = fmul double %15, %28
  %30 = fadd double %22, %29
  %31 = fmul double %15, %30
  %32 = fadd double %20, %31
  %33 = fmul double %15, %32
  %34 = fadd double %18, %33
  %35 = fmul double %15, %34
  %36 = fadd double %16, %35
  %37 = load double* %q.0, align 8, !tbaa !3
  %38 = getelementptr inbounds double* %q.0, i64 1
  %39 = load double* %38, align 8, !tbaa !3
  %40 = getelementptr inbounds double* %q.0, i64 2
  %41 = load double* %40, align 8, !tbaa !3
  %42 = getelementptr inbounds double* %q.0, i64 3
  %43 = load double* %42, align 8, !tbaa !3
  %44 = getelementptr inbounds double* %q.0, i64 4
  %45 = load double* %44, align 8, !tbaa !3
  %46 = fmul double %15, %45
  %47 = fadd double %43, %46
  %48 = fmul double %15, %47
  %49 = fadd double %41, %48
  %50 = fmul double %15, %49
  %51 = fadd double %39, %50
  %52 = fmul double %15, %51
  %53 = fadd double %37, %52
  %54 = fmul double %15, %53
  %55 = fadd double %54, 1.000000e+00
  %56 = fdiv double %36, %55
  %57 = fadd double %56, 1.000000e+00
  ret double %57
}

define internal fastcc double @qzero(double %x) nounwind uwtable readonly optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1075838975
  br i1 %5, label %13, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 1074933386
  br i1 %7, label %13, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %4, 1074191212
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp ugt i32 %4, 1073741823
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %10
  br label %13

; <label>:13                                      ; preds = %12, %10, %8, %6, %0
  %q.0 = phi double* [ getelementptr inbounds ([6 x double]* @qS2371, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([6 x double]* @qS8365, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x double]* @qS5367, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x double]* @qS3369, i64 0, i64 0), %8 ]
  %p.0 = phi double* [ getelementptr inbounds ([6 x double]* @qR2370, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([6 x double]* @qR8364, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x double]* @qR5366, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x double]* @qR3368, i64 0, i64 0), %8 ]
  %14 = fmul double %x, %x
  %15 = fdiv double 1.000000e+00, %14
  %16 = load double* %p.0, align 8, !tbaa !3
  %17 = getelementptr inbounds double* %p.0, i64 1
  %18 = load double* %17, align 8, !tbaa !3
  %19 = getelementptr inbounds double* %p.0, i64 2
  %20 = load double* %19, align 8, !tbaa !3
  %21 = getelementptr inbounds double* %p.0, i64 3
  %22 = load double* %21, align 8, !tbaa !3
  %23 = getelementptr inbounds double* %p.0, i64 4
  %24 = load double* %23, align 8, !tbaa !3
  %25 = getelementptr inbounds double* %p.0, i64 5
  %26 = load double* %25, align 8, !tbaa !3
  %27 = fmul double %15, %26
  %28 = fadd double %24, %27
  %29 = fmul double %15, %28
  %30 = fadd double %22, %29
  %31 = fmul double %15, %30
  %32 = fadd double %20, %31
  %33 = fmul double %15, %32
  %34 = fadd double %18, %33
  %35 = fmul double %15, %34
  %36 = fadd double %16, %35
  %37 = load double* %q.0, align 8, !tbaa !3
  %38 = getelementptr inbounds double* %q.0, i64 1
  %39 = load double* %38, align 8, !tbaa !3
  %40 = getelementptr inbounds double* %q.0, i64 2
  %41 = load double* %40, align 8, !tbaa !3
  %42 = getelementptr inbounds double* %q.0, i64 3
  %43 = load double* %42, align 8, !tbaa !3
  %44 = getelementptr inbounds double* %q.0, i64 4
  %45 = load double* %44, align 8, !tbaa !3
  %46 = getelementptr inbounds double* %q.0, i64 5
  %47 = load double* %46, align 8, !tbaa !3
  %48 = fmul double %15, %47
  %49 = fadd double %45, %48
  %50 = fmul double %15, %49
  %51 = fadd double %43, %50
  %52 = fmul double %15, %51
  %53 = fadd double %41, %52
  %54 = fmul double %15, %53
  %55 = fadd double %39, %54
  %56 = fmul double %15, %55
  %57 = fadd double %37, %56
  %58 = fmul double %15, %57
  %59 = fadd double %58, 1.000000e+00
  %60 = fdiv double %36, %59
  %61 = fadd double %60, -1.250000e-01
  %62 = fdiv double %61, %x
  ret double %62
}

define double @y0(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %0
  %7 = fmul double %x, %x
  %8 = fadd double %7, %x
  %9 = fdiv double 1.000000e+00, %8
  br label %82

; <label>:10                                      ; preds = %0
  %11 = trunc i64 %1 to i32
  %12 = or i32 %4, %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %82, label %14

; <label>:14                                      ; preds = %10
  %15 = icmp slt i32 %3, 0
  br i1 %15, label %82, label %16

; <label>:16                                      ; preds = %14
  %17 = icmp ugt i32 %4, 1073741823
  br i1 %17, label %18, label %48

; <label>:18                                      ; preds = %16
  %19 = tail call double @sin(double %x) nounwind optsize
  %20 = tail call double @cos(double %x) nounwind optsize
  %21 = fsub double %19, %20
  %22 = fadd double %19, %20
  %23 = icmp ult i32 %4, 2145386496
  br i1 %23, label %24, label %.thread

; <label>:24                                      ; preds = %18
  %25 = fadd double %x, %x
  %26 = tail call double @cos(double %25) nounwind optsize
  %27 = fsub double -0.000000e+00, %26
  %28 = fmul double %19, %20
  %29 = fcmp olt double %28, 0.000000e+00
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %24
  %31 = fdiv double %27, %21
  br label %34

; <label>:32                                      ; preds = %24
  %33 = fdiv double %27, %22
  br label %34

; <label>:34                                      ; preds = %32, %30
  %ss.0 = phi double [ %21, %30 ], [ %33, %32 ]
  %cc.0 = phi double [ %31, %30 ], [ %22, %32 ]
  %35 = icmp ugt i32 %4, 1207959552
  br i1 %35, label %.thread, label %39

.thread:                                          ; preds = %34, %18
  %ss.02 = phi double [ %ss.0, %34 ], [ %21, %18 ]
  %36 = fmul double %ss.02, 0x3FE20DD750429B6D
  %37 = tail call double @sqrt(double %x) nounwind optsize
  %38 = fdiv double %36, %37
  br label %82

; <label>:39                                      ; preds = %34
  %40 = tail call fastcc double @pzero(double %x) optsize
  %41 = tail call fastcc double @qzero(double %x) optsize
  %42 = fmul double %40, %ss.0
  %43 = fmul double %41, %cc.0
  %44 = fadd double %42, %43
  %45 = fmul double %44, 0x3FE20DD750429B6D
  %46 = tail call double @sqrt(double %x) nounwind optsize
  %47 = fdiv double %45, %46
  br label %82

; <label>:48                                      ; preds = %16
  %49 = icmp ult i32 %4, 1044381697
  br i1 %49, label %50, label %54

; <label>:50                                      ; preds = %48
  %51 = tail call double @log(double %x) nounwind optsize
  %52 = fmul double %51, 0x3FE45F306DC9C883
  %53 = fadd double %52, 0xBFB2E4D699CBD01F
  br label %82

; <label>:54                                      ; preds = %48
  %55 = fmul double %x, %x
  %56 = fmul double %55, 0xBDC5E43D693FB3C8
  %57 = fadd double %56, 0x3E5500573B4EABD4
  %58 = fmul double %55, %57
  %59 = fadd double %58, 0xBECFFEA773D25CAD
  %60 = fmul double %55, %59
  %61 = fadd double %60, 0x3F36C54D20B29B6B
  %62 = fmul double %55, %61
  %63 = fadd double %62, 0xBF8C4CE8B16CFA97
  %64 = fmul double %55, %63
  %65 = fadd double %64, 0x3FC69D019DE9E3FC
  %66 = fmul double %55, %65
  %67 = fadd double %66, 0xBFB2E4D699CBD01F
  %68 = fmul double %55, 0x3DFE50183BD6D9EF
  %69 = fadd double %68, 0x3E91642D7FF202FD
  %70 = fmul double %55, %69
  %71 = fadd double %70, 0x3F13ECBBF578C6C1
  %72 = fmul double %55, %71
  %73 = fadd double %72, 0x3F8A127091C9C71A
  %74 = fmul double %55, %73
  %75 = fadd double %74, 1.000000e+00
  %76 = fdiv double %67, %75
  %77 = tail call double @j0(double %x) optsize
  %78 = tail call double @log(double %x) nounwind optsize
  %79 = fmul double %77, %78
  %80 = fmul double %79, 0x3FE45F306DC9C883
  %81 = fadd double %76, %80
  br label %82

; <label>:82                                      ; preds = %54, %50, %39, %.thread, %14, %10, %6
  %.0 = phi double [ %9, %6 ], [ %53, %50 ], [ %81, %54 ], [ 0xFFF0000000000000, %10 ], [ 0x7FF8000000000000, %14 ], [ %38, %.thread ], [ %47, %39 ]
  ret double %.0
}

define float @j1f(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fdiv float 1.000000e+00, %x
  br label %66

; <label>:6                                       ; preds = %0
  %7 = tail call float @fabsf(float %x) nounwind optsize
  %8 = icmp ugt i32 %2, 1073741823
  br i1 %8, label %9, label %37

; <label>:9                                       ; preds = %6
  %10 = tail call float @sinf(float %7) nounwind optsize
  %11 = tail call float @cosf(float %7) nounwind optsize
  %12 = fsub float -0.000000e+00, %10
  %13 = fsub float %12, %11
  %14 = fsub float %10, %11
  %15 = icmp ult i32 %2, 2130706432
  br i1 %15, label %16, label %25

; <label>:16                                      ; preds = %9
  %17 = fadd float %7, %7
  %18 = tail call float @cosf(float %17) nounwind optsize
  %19 = fmul float %10, %11
  %20 = fcmp ogt float %19, 0.000000e+00
  br i1 %20, label %21, label %23

; <label>:21                                      ; preds = %16
  %22 = fdiv float %18, %13
  br label %25

; <label>:23                                      ; preds = %16
  %24 = fdiv float %18, %14
  br label %25

; <label>:25                                      ; preds = %23, %21, %9
  %ss.0 = phi float [ %13, %21 ], [ %24, %23 ], [ %13, %9 ]
  %cc.0 = phi float [ %22, %21 ], [ %14, %23 ], [ %14, %9 ]
  %26 = tail call fastcc float @ponef(float %7) optsize
  %27 = tail call fastcc float @qonef(float %7) optsize
  %28 = fmul float %26, %cc.0
  %29 = fmul float %27, %ss.0
  %30 = fsub float %28, %29
  %31 = fmul float %30, 0x3FE20DD760000000
  %32 = tail call float @sqrtf(float %7) nounwind optsize
  %33 = fdiv float %31, %32
  %34 = icmp slt i32 %1, 0
  br i1 %34, label %35, label %66

; <label>:35                                      ; preds = %25
  %36 = fsub float -0.000000e+00, %33
  br label %66

; <label>:37                                      ; preds = %6
  %38 = icmp ult i32 %2, 838860800
  %39 = fadd float %x, 0x46293E5940000000
  %40 = fcmp ogt float %39, 1.000000e+00
  %or.cond = and i1 %38, %40
  br i1 %or.cond, label %41, label %43

; <label>:41                                      ; preds = %37
  %42 = fmul float %x, 5.000000e-01
  br label %66

; <label>:43                                      ; preds = %37
  %44 = fmul float %x, %x
  %45 = fmul float %44, 0x3E6AAAFA40000000
  %46 = fadd float %45, 0xBEF0C5C6C0000000
  %47 = fmul float %44, %46
  %48 = fadd float %47, 0x3F570D9FA0000000
  %49 = fmul float %44, %48
  %50 = fadd float %49, -6.250000e-02
  %51 = fmul float %44, %50
  %52 = fmul float %44, 0x3DAB2ACFC0000000
  %53 = fadd float %52, 0x3E35AC88C0000000
  %54 = fmul float %44, %53
  %55 = fadd float %54, 0x3EB3BFF840000000
  %56 = fmul float %44, %55
  %57 = fadd float %56, 0x3F285F56C0000000
  %58 = fmul float %44, %57
  %59 = fadd float %58, 0x3F939D0B20000000
  %60 = fmul float %44, %59
  %61 = fadd float %60, 1.000000e+00
  %62 = fmul float %51, %x
  %63 = fmul float %x, 5.000000e-01
  %64 = fdiv float %62, %61
  %65 = fadd float %63, %64
  br label %66

; <label>:66                                      ; preds = %43, %41, %35, %25, %4
  %.0 = phi float [ %5, %4 ], [ %36, %35 ], [ %42, %41 ], [ %65, %43 ], [ %33, %25 ]
  ret float %.0
}

define internal fastcc float @ponef(float %x) nounwind uwtable readonly optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1090519039
  br i1 %3, label %11, label %4

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 1089936471
  br i1 %5, label %11, label %6

; <label>:6                                       ; preds = %4
  %7 = icmp ugt i32 %2, 1077336935
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %2, 1073741823
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %8
  br label %11

; <label>:11                                      ; preds = %10, %8, %6, %4, %0
  %q.0 = phi float* [ getelementptr inbounds ([5 x float]* @ps2, i64 0, i64 0), %10 ], [ undef, %8 ], [ getelementptr inbounds ([5 x float]* @ps8, i64 0, i64 0), %0 ], [ getelementptr inbounds ([5 x float]* @ps5, i64 0, i64 0), %4 ], [ getelementptr inbounds ([5 x float]* @ps3, i64 0, i64 0), %6 ]
  %p.0 = phi float* [ getelementptr inbounds ([6 x float]* @pr2, i64 0, i64 0), %10 ], [ undef, %8 ], [ getelementptr inbounds ([6 x float]* @pr8, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x float]* @pr5, i64 0, i64 0), %4 ], [ getelementptr inbounds ([6 x float]* @pr3, i64 0, i64 0), %6 ]
  %12 = fmul float %x, %x
  %13 = fdiv float 1.000000e+00, %12
  %14 = load float* %p.0, align 4, !tbaa !2
  %15 = getelementptr inbounds float* %p.0, i64 1
  %16 = load float* %15, align 4, !tbaa !2
  %17 = getelementptr inbounds float* %p.0, i64 2
  %18 = load float* %17, align 4, !tbaa !2
  %19 = getelementptr inbounds float* %p.0, i64 3
  %20 = load float* %19, align 4, !tbaa !2
  %21 = getelementptr inbounds float* %p.0, i64 4
  %22 = load float* %21, align 4, !tbaa !2
  %23 = getelementptr inbounds float* %p.0, i64 5
  %24 = load float* %23, align 4, !tbaa !2
  %25 = fmul float %13, %24
  %26 = fadd float %22, %25
  %27 = fmul float %13, %26
  %28 = fadd float %20, %27
  %29 = fmul float %13, %28
  %30 = fadd float %18, %29
  %31 = fmul float %13, %30
  %32 = fadd float %16, %31
  %33 = fmul float %13, %32
  %34 = fadd float %14, %33
  %35 = load float* %q.0, align 4, !tbaa !2
  %36 = getelementptr inbounds float* %q.0, i64 1
  %37 = load float* %36, align 4, !tbaa !2
  %38 = getelementptr inbounds float* %q.0, i64 2
  %39 = load float* %38, align 4, !tbaa !2
  %40 = getelementptr inbounds float* %q.0, i64 3
  %41 = load float* %40, align 4, !tbaa !2
  %42 = getelementptr inbounds float* %q.0, i64 4
  %43 = load float* %42, align 4, !tbaa !2
  %44 = fmul float %13, %43
  %45 = fadd float %41, %44
  %46 = fmul float %13, %45
  %47 = fadd float %39, %46
  %48 = fmul float %13, %47
  %49 = fadd float %37, %48
  %50 = fmul float %13, %49
  %51 = fadd float %35, %50
  %52 = fmul float %13, %51
  %53 = fadd float %52, 1.000000e+00
  %54 = fdiv float %34, %53
  %55 = fadd float %54, 1.000000e+00
  ret float %55
}

define internal fastcc float @qonef(float %x) nounwind uwtable readonly optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 1075838975
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 1073741823
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %4
  br label %7

; <label>:7                                       ; preds = %6, %4, %0
  %q.0 = phi float* [ getelementptr inbounds ([6 x float]* @qs2, i64 0, i64 0), %6 ], [ undef, %4 ], [ getelementptr inbounds ([6 x float]* @qs8, i64 0, i64 0), %0 ]
  %p.0 = phi float* [ getelementptr inbounds ([6 x float]* @qr2, i64 0, i64 0), %6 ], [ undef, %4 ], [ getelementptr inbounds ([6 x float]* @qr8, i64 0, i64 0), %0 ]
  %8 = fmul float %x, %x
  %9 = fdiv float 1.000000e+00, %8
  %10 = load float* %p.0, align 4, !tbaa !2
  %11 = getelementptr inbounds float* %p.0, i64 1
  %12 = load float* %11, align 4, !tbaa !2
  %13 = getelementptr inbounds float* %p.0, i64 2
  %14 = load float* %13, align 4, !tbaa !2
  %15 = getelementptr inbounds float* %p.0, i64 3
  %16 = load float* %15, align 4, !tbaa !2
  %17 = getelementptr inbounds float* %p.0, i64 4
  %18 = load float* %17, align 4, !tbaa !2
  %19 = getelementptr inbounds float* %p.0, i64 5
  %20 = load float* %19, align 4, !tbaa !2
  %21 = fmul float %9, %20
  %22 = fadd float %18, %21
  %23 = fmul float %9, %22
  %24 = fadd float %16, %23
  %25 = fmul float %9, %24
  %26 = fadd float %14, %25
  %27 = fmul float %9, %26
  %28 = fadd float %12, %27
  %29 = fmul float %9, %28
  %30 = fadd float %10, %29
  %31 = load float* %q.0, align 4, !tbaa !2
  %32 = getelementptr inbounds float* %q.0, i64 1
  %33 = load float* %32, align 4, !tbaa !2
  %34 = getelementptr inbounds float* %q.0, i64 2
  %35 = load float* %34, align 4, !tbaa !2
  %36 = getelementptr inbounds float* %q.0, i64 3
  %37 = load float* %36, align 4, !tbaa !2
  %38 = getelementptr inbounds float* %q.0, i64 4
  %39 = load float* %38, align 4, !tbaa !2
  %40 = getelementptr inbounds float* %q.0, i64 5
  %41 = load float* %40, align 4, !tbaa !2
  %42 = fmul float %9, %41
  %43 = fadd float %39, %42
  %44 = fmul float %9, %43
  %45 = fadd float %37, %44
  %46 = fmul float %9, %45
  %47 = fadd float %35, %46
  %48 = fmul float %9, %47
  %49 = fadd float %33, %48
  %50 = fmul float %9, %49
  %51 = fadd float %31, %50
  %52 = fmul float %9, %51
  %53 = fadd float %52, 1.000000e+00
  %54 = fdiv float %30, %53
  %55 = fadd float %54, 3.750000e-01
  %56 = fdiv float %55, %x
  ret float %56
}

define float @y1f(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %8

; <label>:4                                       ; preds = %0
  %5 = fmul float %x, %x
  %6 = fadd float %5, %x
  %7 = fdiv float 1.000000e+00, %6
  br label %77

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %77, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp slt i32 %1, 0
  br i1 %11, label %77, label %12

; <label>:12                                      ; preds = %10
  %13 = icmp ugt i32 %2, 1073741823
  br i1 %13, label %14, label %44

; <label>:14                                      ; preds = %12
  %15 = tail call float @sinf(float %x) nounwind optsize
  %16 = tail call float @cosf(float %x) nounwind optsize
  %17 = fsub float -0.000000e+00, %15
  %18 = fsub float %17, %16
  %19 = fsub float %15, %16
  %20 = icmp ult i32 %2, 2130706432
  br i1 %20, label %21, label %.thread

; <label>:21                                      ; preds = %14
  %22 = fadd float %x, %x
  %23 = tail call float @cosf(float %22) nounwind optsize
  %24 = fmul float %15, %16
  %25 = fcmp ogt float %24, 0.000000e+00
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %21
  %27 = fdiv float %23, %18
  br label %30

; <label>:28                                      ; preds = %21
  %29 = fdiv float %23, %19
  br label %30

; <label>:30                                      ; preds = %28, %26
  %ss.0 = phi float [ %18, %26 ], [ %29, %28 ]
  %cc.0 = phi float [ %27, %26 ], [ %19, %28 ]
  %31 = icmp ugt i32 %2, 1207959552
  br i1 %31, label %.thread, label %35

.thread:                                          ; preds = %30, %14
  %ss.01 = phi float [ %ss.0, %30 ], [ %18, %14 ]
  %32 = fmul float %ss.01, 0x3FE20DD760000000
  %33 = tail call float @sqrtf(float %x) nounwind optsize
  %34 = fdiv float %32, %33
  br label %77

; <label>:35                                      ; preds = %30
  %36 = tail call fastcc float @ponef(float %x) optsize
  %37 = tail call fastcc float @qonef(float %x) optsize
  %38 = fmul float %36, %ss.0
  %39 = fmul float %37, %cc.0
  %40 = fadd float %38, %39
  %41 = fmul float %40, 0x3FE20DD760000000
  %42 = tail call float @sqrtf(float %x) nounwind optsize
  %43 = fdiv float %41, %42
  br label %77

; <label>:44                                      ; preds = %12
  %45 = icmp ult i32 %2, 612368385
  br i1 %45, label %46, label %48

; <label>:46                                      ; preds = %44
  %47 = fdiv float 0xBFE45F3060000000, %x
  br label %77

; <label>:48                                      ; preds = %44
  %49 = fmul float %x, %x
  %50 = fmul float %49, 0xBE78AC0060000000
  %51 = fadd float %50, 0x3EF8AB0380000000
  %52 = fmul float %49, %51
  %53 = fadd float %52, 0xBF5F55E540000000
  %54 = fmul float %49, %53
  %55 = fadd float %54, 0x3FA9D3C780000000
  %56 = fmul float %49, %55
  %57 = fadd float %56, 0xBFC9186620000000
  %58 = fmul float %49, 0x3DB25039E0000000
  %59 = fadd float %58, 0x3E3ABF1D60000000
  %60 = fmul float %49, %59
  %61 = fadd float %60, 0x3EB6C05A80000000
  %62 = fmul float %49, %61
  %63 = fadd float %62, 0x3F2A8C8960000000
  %64 = fmul float %49, %63
  %65 = fadd float %64, 0x3F94650D40000000
  %66 = fmul float %49, %65
  %67 = fadd float %66, 1.000000e+00
  %68 = fdiv float %57, %67
  %69 = fmul float %68, %x
  %70 = tail call float @j1f(float %x) optsize
  %71 = tail call float @logf(float %x) nounwind optsize
  %72 = fmul float %70, %71
  %73 = fdiv float 1.000000e+00, %x
  %74 = fsub float %72, %73
  %75 = fmul float %74, 0x3FE45F3060000000
  %76 = fadd float %69, %75
  br label %77

; <label>:77                                      ; preds = %48, %46, %35, %.thread, %10, %8, %4
  %.0 = phi float [ %7, %4 ], [ %47, %46 ], [ %76, %48 ], [ 0xFFF0000000000000, %8 ], [ 0x7FF8000000000000, %10 ], [ %34, %.thread ], [ %43, %35 ]
  ret float %.0
}

define double @j1(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = fdiv double 1.000000e+00, %x
  br label %75

; <label>:8                                       ; preds = %0
  %9 = tail call double @fabs(double %x) nounwind optsize
  %10 = icmp ugt i32 %4, 1073741823
  br i1 %10, label %11, label %45

; <label>:11                                      ; preds = %8
  %12 = tail call double @sin(double %9) nounwind optsize
  %13 = tail call double @cos(double %9) nounwind optsize
  %14 = fsub double -0.000000e+00, %12
  %15 = fsub double %14, %13
  %16 = fsub double %12, %13
  %17 = icmp ult i32 %4, 2145386496
  br i1 %17, label %18, label %.thread

; <label>:18                                      ; preds = %11
  %19 = fadd double %9, %9
  %20 = tail call double @cos(double %19) nounwind optsize
  %21 = fmul double %12, %13
  %22 = fcmp ogt double %21, 0.000000e+00
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %18
  %24 = fdiv double %20, %15
  br label %27

; <label>:25                                      ; preds = %18
  %26 = fdiv double %20, %16
  br label %27

; <label>:27                                      ; preds = %25, %23
  %ss.0 = phi double [ %15, %23 ], [ %26, %25 ]
  %cc.0 = phi double [ %24, %23 ], [ %16, %25 ]
  %28 = icmp ugt i32 %4, 1207959552
  br i1 %28, label %.thread, label %32

.thread:                                          ; preds = %27, %11
  %cc.01 = phi double [ %cc.0, %27 ], [ %16, %11 ]
  %29 = fmul double %cc.01, 0x3FE20DD750429B6D
  %30 = tail call double @sqrt(double %9) nounwind optsize
  %31 = fdiv double %29, %30
  br label %41

; <label>:32                                      ; preds = %27
  %33 = tail call fastcc double @pone(double %9) optsize
  %34 = tail call fastcc double @qone(double %9) optsize
  %35 = fmul double %33, %cc.0
  %36 = fmul double %34, %ss.0
  %37 = fsub double %35, %36
  %38 = fmul double %37, 0x3FE20DD750429B6D
  %39 = tail call double @sqrt(double %9) nounwind optsize
  %40 = fdiv double %38, %39
  br label %41

; <label>:41                                      ; preds = %32, %.thread
  %z.0 = phi double [ %31, %.thread ], [ %40, %32 ]
  %42 = icmp slt i32 %3, 0
  br i1 %42, label %43, label %75

; <label>:43                                      ; preds = %41
  %44 = fsub double -0.000000e+00, %z.0
  br label %75

; <label>:45                                      ; preds = %8
  %46 = icmp ult i32 %4, 1044381696
  br i1 %46, label %47, label %52

; <label>:47                                      ; preds = %45
  %48 = fadd double %x, 1.000000e+300
  %49 = fcmp ogt double %48, 1.000000e+00
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %47
  %51 = fmul double %x, 5.000000e-01
  br label %75

; <label>:52                                      ; preds = %47, %45
  %53 = fmul double %x, %x
  %54 = fmul double %53, 0x3E6AAAFA46CA0BD9
  %55 = fadd double %54, 0xBEF0C5C6BA169668
  %56 = fmul double %53, %55
  %57 = fadd double %56, 0x3F570D9F98472C61
  %58 = fmul double %53, %57
  %59 = fadd double %58, -6.250000e-02
  %60 = fmul double %53, %59
  %61 = fmul double %53, 0x3DAB2ACFCFB97ED8
  %62 = fadd double %61, 0x3E35AC88C97DFF2C
  %63 = fmul double %53, %62
  %64 = fadd double %63, 0x3EB3BFF8333F8498
  %65 = fmul double %53, %64
  %66 = fadd double %65, 0x3F285F56B9CDF664
  %67 = fmul double %53, %66
  %68 = fadd double %67, 0x3F939D0B12637E53
  %69 = fmul double %53, %68
  %70 = fadd double %69, 1.000000e+00
  %71 = fmul double %60, %x
  %72 = fmul double %x, 5.000000e-01
  %73 = fdiv double %71, %70
  %74 = fadd double %72, %73
  br label %75

; <label>:75                                      ; preds = %52, %50, %43, %41, %6
  %.0 = phi double [ %7, %6 ], [ %44, %43 ], [ %51, %50 ], [ %74, %52 ], [ %z.0, %41 ]
  ret double %.0
}

define internal fastcc double @pone(double %x) nounwind uwtable readonly optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1075838975
  br i1 %5, label %13, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 1074933386
  br i1 %7, label %13, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %4, 1074191212
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp ugt i32 %4, 1073741823
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %10
  br label %13

; <label>:13                                      ; preds = %12, %10, %8, %6, %0
  %q.0 = phi double* [ getelementptr inbounds ([5 x double]* @ps2391, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([5 x double]* @ps8385, i64 0, i64 0), %0 ], [ getelementptr inbounds ([5 x double]* @ps5387, i64 0, i64 0), %6 ], [ getelementptr inbounds ([5 x double]* @ps3389, i64 0, i64 0), %8 ]
  %p.0 = phi double* [ getelementptr inbounds ([6 x double]* @pr2390, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([6 x double]* @pr8384, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x double]* @pr5386, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x double]* @pr3388, i64 0, i64 0), %8 ]
  %14 = fmul double %x, %x
  %15 = fdiv double 1.000000e+00, %14
  %16 = load double* %p.0, align 8, !tbaa !3
  %17 = getelementptr inbounds double* %p.0, i64 1
  %18 = load double* %17, align 8, !tbaa !3
  %19 = getelementptr inbounds double* %p.0, i64 2
  %20 = load double* %19, align 8, !tbaa !3
  %21 = getelementptr inbounds double* %p.0, i64 3
  %22 = load double* %21, align 8, !tbaa !3
  %23 = getelementptr inbounds double* %p.0, i64 4
  %24 = load double* %23, align 8, !tbaa !3
  %25 = getelementptr inbounds double* %p.0, i64 5
  %26 = load double* %25, align 8, !tbaa !3
  %27 = fmul double %15, %26
  %28 = fadd double %24, %27
  %29 = fmul double %15, %28
  %30 = fadd double %22, %29
  %31 = fmul double %15, %30
  %32 = fadd double %20, %31
  %33 = fmul double %15, %32
  %34 = fadd double %18, %33
  %35 = fmul double %15, %34
  %36 = fadd double %16, %35
  %37 = load double* %q.0, align 8, !tbaa !3
  %38 = getelementptr inbounds double* %q.0, i64 1
  %39 = load double* %38, align 8, !tbaa !3
  %40 = getelementptr inbounds double* %q.0, i64 2
  %41 = load double* %40, align 8, !tbaa !3
  %42 = getelementptr inbounds double* %q.0, i64 3
  %43 = load double* %42, align 8, !tbaa !3
  %44 = getelementptr inbounds double* %q.0, i64 4
  %45 = load double* %44, align 8, !tbaa !3
  %46 = fmul double %15, %45
  %47 = fadd double %43, %46
  %48 = fmul double %15, %47
  %49 = fadd double %41, %48
  %50 = fmul double %15, %49
  %51 = fadd double %39, %50
  %52 = fmul double %15, %51
  %53 = fadd double %37, %52
  %54 = fmul double %15, %53
  %55 = fadd double %54, 1.000000e+00
  %56 = fdiv double %36, %55
  %57 = fadd double %56, 1.000000e+00
  ret double %57
}

define internal fastcc double @qone(double %x) nounwind uwtable readonly optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 1075838975
  br i1 %5, label %13, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 1074933386
  br i1 %7, label %13, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ugt i32 %4, 1074191212
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp ugt i32 %4, 1073741823
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %10
  br label %13

; <label>:13                                      ; preds = %12, %10, %8, %6, %0
  %q.0 = phi double* [ getelementptr inbounds ([6 x double]* @qs2383, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([6 x double]* @qs8381, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x double]* @qs5, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x double]* @qs3, i64 0, i64 0), %8 ]
  %p.0 = phi double* [ getelementptr inbounds ([6 x double]* @qr2382, i64 0, i64 0), %12 ], [ undef, %10 ], [ getelementptr inbounds ([6 x double]* @qr8380, i64 0, i64 0), %0 ], [ getelementptr inbounds ([6 x double]* @qr5, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x double]* @qr3, i64 0, i64 0), %8 ]
  %14 = fmul double %x, %x
  %15 = fdiv double 1.000000e+00, %14
  %16 = load double* %p.0, align 8, !tbaa !3
  %17 = getelementptr inbounds double* %p.0, i64 1
  %18 = load double* %17, align 8, !tbaa !3
  %19 = getelementptr inbounds double* %p.0, i64 2
  %20 = load double* %19, align 8, !tbaa !3
  %21 = getelementptr inbounds double* %p.0, i64 3
  %22 = load double* %21, align 8, !tbaa !3
  %23 = getelementptr inbounds double* %p.0, i64 4
  %24 = load double* %23, align 8, !tbaa !3
  %25 = getelementptr inbounds double* %p.0, i64 5
  %26 = load double* %25, align 8, !tbaa !3
  %27 = fmul double %15, %26
  %28 = fadd double %24, %27
  %29 = fmul double %15, %28
  %30 = fadd double %22, %29
  %31 = fmul double %15, %30
  %32 = fadd double %20, %31
  %33 = fmul double %15, %32
  %34 = fadd double %18, %33
  %35 = fmul double %15, %34
  %36 = fadd double %16, %35
  %37 = load double* %q.0, align 8, !tbaa !3
  %38 = getelementptr inbounds double* %q.0, i64 1
  %39 = load double* %38, align 8, !tbaa !3
  %40 = getelementptr inbounds double* %q.0, i64 2
  %41 = load double* %40, align 8, !tbaa !3
  %42 = getelementptr inbounds double* %q.0, i64 3
  %43 = load double* %42, align 8, !tbaa !3
  %44 = getelementptr inbounds double* %q.0, i64 4
  %45 = load double* %44, align 8, !tbaa !3
  %46 = getelementptr inbounds double* %q.0, i64 5
  %47 = load double* %46, align 8, !tbaa !3
  %48 = fmul double %15, %47
  %49 = fadd double %45, %48
  %50 = fmul double %15, %49
  %51 = fadd double %43, %50
  %52 = fmul double %15, %51
  %53 = fadd double %41, %52
  %54 = fmul double %15, %53
  %55 = fadd double %39, %54
  %56 = fmul double %15, %55
  %57 = fadd double %37, %56
  %58 = fmul double %15, %57
  %59 = fadd double %58, 1.000000e+00
  %60 = fdiv double %36, %59
  %61 = fadd double %60, 3.750000e-01
  %62 = fdiv double %61, %x
  ret double %62
}

define double @y1(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %0
  %7 = fmul double %x, %x
  %8 = fadd double %7, %x
  %9 = fdiv double 1.000000e+00, %8
  br label %81

; <label>:10                                      ; preds = %0
  %11 = trunc i64 %1 to i32
  %12 = or i32 %4, %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %81, label %14

; <label>:14                                      ; preds = %10
  %15 = icmp slt i32 %3, 0
  br i1 %15, label %81, label %16

; <label>:16                                      ; preds = %14
  %17 = icmp ugt i32 %4, 1073741823
  br i1 %17, label %18, label %48

; <label>:18                                      ; preds = %16
  %19 = tail call double @sin(double %x) nounwind optsize
  %20 = tail call double @cos(double %x) nounwind optsize
  %21 = fsub double -0.000000e+00, %19
  %22 = fsub double %21, %20
  %23 = fsub double %19, %20
  %24 = icmp ult i32 %4, 2145386496
  br i1 %24, label %25, label %.thread

; <label>:25                                      ; preds = %18
  %26 = fadd double %x, %x
  %27 = tail call double @cos(double %26) nounwind optsize
  %28 = fmul double %19, %20
  %29 = fcmp ogt double %28, 0.000000e+00
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %25
  %31 = fdiv double %27, %22
  br label %34

; <label>:32                                      ; preds = %25
  %33 = fdiv double %27, %23
  br label %34

; <label>:34                                      ; preds = %32, %30
  %ss.0 = phi double [ %22, %30 ], [ %33, %32 ]
  %cc.0 = phi double [ %31, %30 ], [ %23, %32 ]
  %35 = icmp ugt i32 %4, 1207959552
  br i1 %35, label %.thread, label %39

.thread:                                          ; preds = %34, %18
  %ss.02 = phi double [ %ss.0, %34 ], [ %22, %18 ]
  %36 = fmul double %ss.02, 0x3FE20DD750429B6D
  %37 = tail call double @sqrt(double %x) nounwind optsize
  %38 = fdiv double %36, %37
  br label %81

; <label>:39                                      ; preds = %34
  %40 = tail call fastcc double @pone(double %x) optsize
  %41 = tail call fastcc double @qone(double %x) optsize
  %42 = fmul double %40, %ss.0
  %43 = fmul double %41, %cc.0
  %44 = fadd double %42, %43
  %45 = fmul double %44, 0x3FE20DD750429B6D
  %46 = tail call double @sqrt(double %x) nounwind optsize
  %47 = fdiv double %45, %46
  br label %81

; <label>:48                                      ; preds = %16
  %49 = icmp ult i32 %4, 1016070145
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %48
  %51 = fdiv double 0xBFE45F306DC9C883, %x
  br label %81

; <label>:52                                      ; preds = %48
  %53 = fmul double %x, %x
  %54 = fmul double %53, 0xBE78AC00569105B8
  %55 = fadd double %54, 0x3EF8AB038FA6B88E
  %56 = fmul double %53, %55
  %57 = fadd double %56, 0xBF5F55E54844F50F
  %58 = fmul double %53, %57
  %59 = fadd double %58, 0x3FA9D3C776292CD1
  %60 = fmul double %53, %59
  %61 = fadd double %60, 0xBFC91866143CBC8A
  %62 = fmul double %53, 0x3DB25039DACA772A
  %63 = fadd double %62, 0x3E3ABF1D5BA69A86
  %64 = fmul double %53, %63
  %65 = fadd double %64, 0x3EB6C05A894E8CA6
  %66 = fmul double %53, %65
  %67 = fadd double %66, 0x3F2A8C896C257764
  %68 = fmul double %53, %67
  %69 = fadd double %68, 0x3F94650D3F4DA9F0
  %70 = fmul double %53, %69
  %71 = fadd double %70, 1.000000e+00
  %72 = fdiv double %61, %71
  %73 = fmul double %72, %x
  %74 = tail call double @j1(double %x) optsize
  %75 = tail call double @log(double %x) nounwind optsize
  %76 = fmul double %74, %75
  %77 = fdiv double 1.000000e+00, %x
  %78 = fsub double %76, %77
  %79 = fmul double %78, 0x3FE45F306DC9C883
  %80 = fadd double %73, %79
  br label %81

; <label>:81                                      ; preds = %52, %50, %39, %.thread, %14, %10, %6
  %.0 = phi double [ %9, %6 ], [ %51, %50 ], [ %80, %52 ], [ 0xFFF0000000000000, %10 ], [ 0x7FF8000000000000, %14 ], [ %38, %.thread ], [ %47, %39 ]
  ret double %.0
}

define float @jnf(i32 %n, float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095040
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fadd float %x, %x
  br label %113

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %n, 0
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %6
  %9 = sub nsw i32 0, %n
  %10 = fsub float -0.000000e+00, %x
  %11 = xor i32 %1, -2147483648
  br label %12

; <label>:12                                      ; preds = %8, %6
  %hx.0 = phi i32 [ %11, %8 ], [ %1, %6 ]
  %.03 = phi float [ %10, %8 ], [ %x, %6 ]
  %.02 = phi i32 [ %9, %8 ], [ %n, %6 ]
  switch i32 %.02, label %17 [
    i32 0, label %13
    i32 1, label %15
  ]

; <label>:13                                      ; preds = %12
  %14 = tail call float @j0f(float %.03) nounwind optsize
  br label %113

; <label>:15                                      ; preds = %12
  %16 = tail call float @j1f(float %.03) nounwind optsize
  br label %113

; <label>:17                                      ; preds = %12
  %18 = lshr i32 %hx.0, 31
  %19 = and i32 %18, %.02
  %20 = tail call float @fabsf(float %.03) nounwind optsize
  %21 = icmp eq i32 %2, 0
  %22 = icmp ugt i32 %2, 2139095039
  %or.cond = or i1 %21, %22
  br i1 %or.cond, label %.loopexit, label %23

; <label>:23                                      ; preds = %17
  %24 = sitofp i32 %.02 to float
  %25 = fcmp ugt float %24, %20
  br i1 %25, label %36, label %26

; <label>:26                                      ; preds = %23
  %27 = tail call float @j0f(float %20) nounwind optsize
  %28 = tail call float @j1f(float %20) nounwind optsize
  %29 = icmp sgt i32 %.02, 1
  br i1 %29, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %26
  %i.06 = phi i32 [ %35, %.lr.ph ], [ 1, %26 ]
  %a.05 = phi float [ %b.04, %.lr.ph ], [ %27, %26 ]
  %b.04 = phi float [ %34, %.lr.ph ], [ %28, %26 ]
  %30 = shl nsw i32 %i.06, 1
  %31 = sitofp i32 %30 to float
  %32 = fdiv float %31, %20
  %33 = fmul float %b.04, %32
  %34 = fsub float %33, %a.05
  %35 = add nsw i32 %i.06, 1
  %exitcond = icmp eq i32 %35, %.02
  br i1 %exitcond, label %.loopexit, label %.lr.ph

; <label>:36                                      ; preds = %23
  %37 = icmp ult i32 %2, 813694976
  br i1 %37, label %38, label %50

; <label>:38                                      ; preds = %36
  %39 = icmp sgt i32 %.02, 33
  br i1 %39, label %.loopexit, label %40

; <label>:40                                      ; preds = %38
  %41 = fmul float %20, 5.000000e-01
  %42 = icmp slt i32 %.02, 2
  br i1 %42, label %._crit_edge43, label %.lr.ph42

.lr.ph42:                                         ; preds = %40
  %43 = add i32 %.02, 1
  br label %44

; <label>:44                                      ; preds = %44, %.lr.ph42
  %i.140 = phi i32 [ 2, %.lr.ph42 ], [ %48, %44 ]
  %a.139 = phi float [ 1.000000e+00, %.lr.ph42 ], [ %46, %44 ]
  %b.138 = phi float [ %41, %.lr.ph42 ], [ %47, %44 ]
  %45 = sitofp i32 %i.140 to float
  %46 = fmul float %a.139, %45
  %47 = fmul float %b.138, %41
  %48 = add nsw i32 %i.140, 1
  %exitcond51 = icmp eq i32 %48, %43
  br i1 %exitcond51, label %._crit_edge43, label %44

._crit_edge43:                                    ; preds = %44, %40
  %a.1.lcssa = phi float [ 1.000000e+00, %40 ], [ %46, %44 ]
  %b.1.lcssa = phi float [ %41, %40 ], [ %47, %44 ]
  %49 = fdiv float %b.1.lcssa, %a.1.lcssa
  br label %.loopexit

; <label>:50                                      ; preds = %36
  %51 = shl nsw i32 %.02, 1
  %52 = sitofp i32 %51 to float
  %53 = fdiv float %52, %20
  %54 = fdiv float 2.000000e+00, %20
  %55 = fadd float %53, %54
  %56 = fmul float %53, %55
  %57 = fadd float %56, -1.000000e+00
  %58 = fcmp olt float %57, 1.000000e+09
  br i1 %58, label %.lr.ph35, label %._crit_edge36

.lr.ph35:                                         ; preds = %.lr.ph35, %50
  %k.033 = phi i32 [ %59, %.lr.ph35 ], [ 1, %50 ]
  %z.032 = phi float [ %60, %.lr.ph35 ], [ %55, %50 ]
  %q1.031 = phi float [ %62, %.lr.ph35 ], [ %57, %50 ]
  %q0.030 = phi float [ %q1.031, %.lr.ph35 ], [ %53, %50 ]
  %59 = add nsw i32 %k.033, 1
  %60 = fadd float %z.032, %54
  %61 = fmul float %60, %q1.031
  %62 = fsub float %61, %q0.030
  %63 = fcmp olt float %62, 1.000000e+09
  br i1 %63, label %.lr.ph35, label %._crit_edge36

._crit_edge36:                                    ; preds = %.lr.ph35, %50
  %k.0.lcssa = phi i32 [ 1, %50 ], [ %59, %.lr.ph35 ]
  %64 = add nsw i32 %k.0.lcssa, %.02
  %65 = shl nsw i32 %64, 1
  %66 = icmp slt i32 %65, %51
  br i1 %66, label %._crit_edge, label %.lr.ph28

.lr.ph28:                                         ; preds = %.lr.ph28, %._crit_edge36
  %i.227 = phi i32 [ %71, %.lr.ph28 ], [ %65, %._crit_edge36 ]
  %t.026 = phi float [ %70, %.lr.ph28 ], [ 0.000000e+00, %._crit_edge36 ]
  %67 = sitofp i32 %i.227 to float
  %68 = fdiv float %67, %20
  %69 = fsub float %68, %t.026
  %70 = fdiv float 1.000000e+00, %69
  %71 = add nsw i32 %i.227, -2
  %72 = icmp slt i32 %71, %51
  br i1 %72, label %._crit_edge, label %.lr.ph28

._crit_edge:                                      ; preds = %.lr.ph28, %._crit_edge36
  %t.0.lcssa = phi float [ 0.000000e+00, %._crit_edge36 ], [ %70, %.lr.ph28 ]
  %73 = fmul float %54, %24
  %74 = tail call float @fabsf(float %73) nounwind optsize
  %75 = tail call float @logf(float %74) nounwind optsize
  %76 = fmul float %24, %75
  %77 = fcmp olt float %76, 0x40562E3000000000
  %78 = add nsw i32 %.02, -1
  %79 = shl nsw i32 %78, 1
  %80 = sitofp i32 %79 to float
  %81 = icmp sgt i32 %78, 0
  br i1 %77, label %.preheader17, label %.preheader

.preheader17:                                     ; preds = %._crit_edge
  br i1 %81, label %.lr.ph23, label %.loopexit7

.preheader:                                       ; preds = %._crit_edge
  br i1 %81, label %.lr.ph13, label %.loopexit7

.lr.ph23:                                         ; preds = %.lr.ph23, %.preheader17
  %i.322 = phi i32 [ %86, %.lr.ph23 ], [ %78, %.preheader17 ]
  %a.221 = phi float [ %b.220, %.lr.ph23 ], [ %t.0.lcssa, %.preheader17 ]
  %b.220 = phi float [ %84, %.lr.ph23 ], [ 1.000000e+00, %.preheader17 ]
  %di.019 = phi float [ %85, %.lr.ph23 ], [ %80, %.preheader17 ]
  %82 = fmul float %b.220, %di.019
  %83 = fdiv float %82, %20
  %84 = fsub float %83, %a.221
  %85 = fadd float %di.019, -2.000000e+00
  %86 = add nsw i32 %i.322, -1
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %.lr.ph23, label %.loopexit7

.lr.ph13:                                         ; preds = %96, %.preheader
  %i.412 = phi i32 [ %97, %96 ], [ %78, %.preheader ]
  %a.311 = phi float [ %a.4, %96 ], [ %t.0.lcssa, %.preheader ]
  %b.310 = phi float [ %b.4, %96 ], [ 1.000000e+00, %.preheader ]
  %di.19 = phi float [ %91, %96 ], [ %80, %.preheader ]
  %t.18 = phi float [ %t.2, %96 ], [ %t.0.lcssa, %.preheader ]
  %88 = fmul float %b.310, %di.19
  %89 = fdiv float %88, %20
  %90 = fsub float %89, %a.311
  %91 = fadd float %di.19, -2.000000e+00
  %92 = fcmp ogt float %90, 1.000000e+10
  br i1 %92, label %93, label %96

; <label>:93                                      ; preds = %.lr.ph13
  %94 = fdiv float %b.310, %90
  %95 = fdiv float %t.18, %90
  br label %96

; <label>:96                                      ; preds = %93, %.lr.ph13
  %t.2 = phi float [ %95, %93 ], [ %t.18, %.lr.ph13 ]
  %b.4 = phi float [ 1.000000e+00, %93 ], [ %90, %.lr.ph13 ]
  %a.4 = phi float [ %94, %93 ], [ %b.310, %.lr.ph13 ]
  %97 = add nsw i32 %i.412, -1
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %.lr.ph13, label %.loopexit7

.loopexit7:                                       ; preds = %96, %.lr.ph23, %.preheader, %.preheader17
  %t.3 = phi float [ %t.0.lcssa, %.preheader ], [ %t.2, %96 ], [ %t.0.lcssa, %.lr.ph23 ], [ %t.0.lcssa, %.preheader17 ]
  %b.5 = phi float [ 1.000000e+00, %.preheader ], [ %b.4, %96 ], [ %84, %.lr.ph23 ], [ 1.000000e+00, %.preheader17 ]
  %a.5 = phi float [ %t.0.lcssa, %.preheader ], [ %a.4, %96 ], [ %b.220, %.lr.ph23 ], [ %t.0.lcssa, %.preheader17 ]
  %99 = tail call float @j0f(float %20) nounwind optsize
  %100 = tail call float @j1f(float %20) nounwind optsize
  %101 = tail call float @fabsf(float %99) nounwind optsize
  %102 = tail call float @fabsf(float %100) nounwind optsize
  %103 = fcmp ult float %101, %102
  br i1 %103, label %107, label %104

; <label>:104                                     ; preds = %.loopexit7
  %105 = fmul float %t.3, %99
  %106 = fdiv float %105, %b.5
  br label %.loopexit

; <label>:107                                     ; preds = %.loopexit7
  %108 = fmul float %t.3, %100
  %109 = fdiv float %108, %a.5
  br label %.loopexit

.loopexit:                                        ; preds = %107, %104, %._crit_edge43, %38, %.lr.ph, %26, %17
  %b.6 = phi float [ %49, %._crit_edge43 ], [ %106, %104 ], [ %109, %107 ], [ 0.000000e+00, %17 ], [ 0.000000e+00, %38 ], [ %28, %26 ], [ %34, %.lr.ph ]
  %110 = icmp eq i32 %19, 1
  br i1 %110, label %111, label %113

; <label>:111                                     ; preds = %.loopexit
  %112 = fsub float -0.000000e+00, %b.6
  br label %113

; <label>:113                                     ; preds = %111, %.loopexit, %15, %13, %4
  %.0 = phi float [ %5, %4 ], [ %14, %13 ], [ %16, %15 ], [ %112, %111 ], [ %b.6, %.loopexit ]
  ret float %.0
}

define float @ynf(i32 %n, float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095040
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fadd float %x, %x
  br label %43

; <label>:6                                       ; preds = %0
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %43, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp slt i32 %1, 0
  br i1 %9, label %43, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp slt i32 %n, 0
  br i1 %11, label %12, label %17

; <label>:12                                      ; preds = %10
  %13 = sub nsw i32 0, %n
  %14 = shl i32 %13, 1
  %15 = and i32 %14, 2
  %16 = sub nsw i32 1, %15
  br label %17

; <label>:17                                      ; preds = %12, %10
  %sign.0 = phi i32 [ %16, %12 ], [ 1, %10 ]
  %.03 = phi i32 [ %13, %12 ], [ %n, %10 ]
  switch i32 %.03, label %24 [
    i32 0, label %18
    i32 1, label %20
  ]

; <label>:18                                      ; preds = %17
  %19 = tail call float @y0f(float %x) nounwind optsize
  br label %43

; <label>:20                                      ; preds = %17
  %21 = sitofp i32 %sign.0 to float
  %22 = tail call float @y1f(float %x) nounwind optsize
  %23 = fmul float %21, %22
  br label %43

; <label>:24                                      ; preds = %17
  %25 = icmp eq i32 %2, 2139095040
  br i1 %25, label %43, label %26

; <label>:26                                      ; preds = %24
  %27 = tail call float @y0f(float %x) nounwind optsize
  %28 = tail call float @y1f(float %x) nounwind optsize
  br label %29

; <label>:29                                      ; preds = %33, %26
  %ib.0.in = phi float [ %28, %26 ], [ %38, %33 ]
  %a.0 = phi float [ %27, %26 ], [ %ib.0.in, %33 ]
  %i.0 = phi i32 [ 1, %26 ], [ %39, %33 ]
  %30 = icmp slt i32 %i.0, %.03
  br i1 %30, label %31, label %.critedge

; <label>:31                                      ; preds = %29
  %ib.0 = bitcast float %ib.0.in to i32
  %32 = icmp eq i32 %ib.0, -8388608
  br i1 %32, label %.critedge, label %33

; <label>:33                                      ; preds = %31
  %34 = shl nsw i32 %i.0, 1
  %35 = sitofp i32 %34 to float
  %36 = fdiv float %35, %x
  %37 = fmul float %36, %ib.0.in
  %38 = fsub float %37, %a.0
  %39 = add nsw i32 %i.0, 1
  br label %29

.critedge:                                        ; preds = %31, %29
  %40 = icmp sgt i32 %sign.0, 0
  br i1 %40, label %43, label %41

; <label>:41                                      ; preds = %.critedge
  %42 = fsub float -0.000000e+00, %ib.0.in
  br label %43

; <label>:43                                      ; preds = %41, %.critedge, %24, %20, %18, %8, %6, %4
  %.0 = phi float [ %5, %4 ], [ %19, %18 ], [ %23, %20 ], [ %42, %41 ], [ 0xFFF0000000000000, %6 ], [ 0x7FF8000000000000, %8 ], [ 0.000000e+00, %24 ], [ %ib.0.in, %.critedge ]
  ret float %.0
}

define double @jn(i32 %n, double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = sub nsw i32 0, %4
  %7 = or i32 %4, %6
  %8 = lshr i32 %7, 31
  %9 = or i32 %5, %8
  %10 = icmp ugt i32 %9, 2146435072
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = fadd double %x, %x
  br label %146

; <label>:13                                      ; preds = %0
  %14 = icmp slt i32 %n, 0
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %13
  %16 = sub nsw i32 0, %n
  %17 = fsub double -0.000000e+00, %x
  %18 = xor i32 %3, -2147483648
  br label %19

; <label>:19                                      ; preds = %15, %13
  %hx.0 = phi i32 [ %18, %15 ], [ %3, %13 ]
  %.03 = phi double [ %17, %15 ], [ %x, %13 ]
  %.02 = phi i32 [ %16, %15 ], [ %n, %13 ]
  switch i32 %.02, label %24 [
    i32 0, label %20
    i32 1, label %22
  ]

; <label>:20                                      ; preds = %19
  %21 = tail call double @j0(double %.03) nounwind optsize
  br label %146

; <label>:22                                      ; preds = %19
  %23 = tail call double @j1(double %.03) nounwind optsize
  br label %146

; <label>:24                                      ; preds = %19
  %25 = lshr i32 %hx.0, 31
  %26 = and i32 %25, %.02
  %27 = tail call double @fabs(double %.03) nounwind optsize
  %28 = or i32 %5, %4
  %29 = icmp eq i32 %28, 0
  %30 = icmp ugt i32 %5, 2146435071
  %or.cond = or i1 %29, %30
  br i1 %or.cond, label %.loopexit, label %31

; <label>:31                                      ; preds = %24
  %32 = sitofp i32 %.02 to double
  %33 = fcmp ugt double %32, %27
  br i1 %33, label %69, label %34

; <label>:34                                      ; preds = %31
  %35 = icmp ugt i32 %5, 1389363199
  br i1 %35, label %36, label %59

; <label>:36                                      ; preds = %34
  %37 = and i32 %.02, 3
  switch i32 %37, label %55 [
    i32 0, label %38
    i32 1, label %42
    i32 2, label %46
    i32 3, label %51
  ]

; <label>:38                                      ; preds = %36
  %39 = tail call double @cos(double %27) nounwind optsize
  %40 = tail call double @sin(double %27) nounwind optsize
  %41 = fadd double %39, %40
  br label %55

; <label>:42                                      ; preds = %36
  %43 = tail call double @cos(double %27) nounwind optsize
  %44 = tail call double @sin(double %27) nounwind optsize
  %45 = fsub double %44, %43
  br label %55

; <label>:46                                      ; preds = %36
  %47 = tail call double @cos(double %27) nounwind optsize
  %48 = fsub double -0.000000e+00, %47
  %49 = tail call double @sin(double %27) nounwind optsize
  %50 = fsub double %48, %49
  br label %55

; <label>:51                                      ; preds = %36
  %52 = tail call double @cos(double %27) nounwind optsize
  %53 = tail call double @sin(double %27) nounwind optsize
  %54 = fsub double %52, %53
  br label %55

; <label>:55                                      ; preds = %51, %46, %42, %38, %36
  %temp.0 = phi double [ undef, %36 ], [ %54, %51 ], [ %50, %46 ], [ %45, %42 ], [ %41, %38 ]
  %56 = fmul double %temp.0, 0x3FE20DD750429B6D
  %57 = tail call double @sqrt(double %27) nounwind optsize
  %58 = fdiv double %56, %57
  br label %.loopexit

; <label>:59                                      ; preds = %34
  %60 = tail call double @j0(double %27) nounwind optsize
  %61 = tail call double @j1(double %27) nounwind optsize
  %62 = icmp sgt i32 %.02, 1
  br i1 %62, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %59
  %i.07 = phi i32 [ %68, %.lr.ph ], [ 1, %59 ]
  %a.06 = phi double [ %b.05, %.lr.ph ], [ %60, %59 ]
  %b.05 = phi double [ %67, %.lr.ph ], [ %61, %59 ]
  %63 = shl nsw i32 %i.07, 1
  %64 = sitofp i32 %63 to double
  %65 = fdiv double %64, %27
  %66 = fmul double %b.05, %65
  %67 = fsub double %66, %a.06
  %68 = add nsw i32 %i.07, 1
  %exitcond = icmp eq i32 %68, %.02
  br i1 %exitcond, label %.loopexit, label %.lr.ph

; <label>:69                                      ; preds = %31
  %70 = icmp ult i32 %5, 1041235968
  br i1 %70, label %71, label %83

; <label>:71                                      ; preds = %69
  %72 = icmp sgt i32 %.02, 33
  br i1 %72, label %.loopexit, label %73

; <label>:73                                      ; preds = %71
  %74 = fmul double %27, 5.000000e-01
  %75 = icmp slt i32 %.02, 2
  br i1 %75, label %._crit_edge44, label %.lr.ph43

.lr.ph43:                                         ; preds = %73
  %76 = add i32 %.02, 1
  br label %77

; <label>:77                                      ; preds = %77, %.lr.ph43
  %i.141 = phi i32 [ 2, %.lr.ph43 ], [ %81, %77 ]
  %a.140 = phi double [ 1.000000e+00, %.lr.ph43 ], [ %79, %77 ]
  %b.139 = phi double [ %74, %.lr.ph43 ], [ %80, %77 ]
  %78 = sitofp i32 %i.141 to double
  %79 = fmul double %a.140, %78
  %80 = fmul double %b.139, %74
  %81 = add nsw i32 %i.141, 1
  %exitcond52 = icmp eq i32 %81, %76
  br i1 %exitcond52, label %._crit_edge44, label %77

._crit_edge44:                                    ; preds = %77, %73
  %a.1.lcssa = phi double [ 1.000000e+00, %73 ], [ %79, %77 ]
  %b.1.lcssa = phi double [ %74, %73 ], [ %80, %77 ]
  %82 = fdiv double %b.1.lcssa, %a.1.lcssa
  br label %.loopexit

; <label>:83                                      ; preds = %69
  %84 = shl nsw i32 %.02, 1
  %85 = sitofp i32 %84 to double
  %86 = fdiv double %85, %27
  %87 = fdiv double 2.000000e+00, %27
  %88 = fadd double %86, %87
  %89 = fmul double %86, %88
  %90 = fadd double %89, -1.000000e+00
  %91 = fcmp olt double %90, 1.000000e+09
  br i1 %91, label %.lr.ph36, label %._crit_edge37

.lr.ph36:                                         ; preds = %.lr.ph36, %83
  %k.034 = phi i32 [ %92, %.lr.ph36 ], [ 1, %83 ]
  %q1.033 = phi double [ %95, %.lr.ph36 ], [ %90, %83 ]
  %z.032 = phi double [ %93, %.lr.ph36 ], [ %88, %83 ]
  %q0.031 = phi double [ %q1.033, %.lr.ph36 ], [ %86, %83 ]
  %92 = add nsw i32 %k.034, 1
  %93 = fadd double %z.032, %87
  %94 = fmul double %93, %q1.033
  %95 = fsub double %94, %q0.031
  %96 = fcmp olt double %95, 1.000000e+09
  br i1 %96, label %.lr.ph36, label %._crit_edge37

._crit_edge37:                                    ; preds = %.lr.ph36, %83
  %k.0.lcssa = phi i32 [ 1, %83 ], [ %92, %.lr.ph36 ]
  %97 = add nsw i32 %k.0.lcssa, %.02
  %98 = shl nsw i32 %97, 1
  %99 = icmp slt i32 %98, %84
  br i1 %99, label %._crit_edge, label %.lr.ph29

.lr.ph29:                                         ; preds = %.lr.ph29, %._crit_edge37
  %i.228 = phi i32 [ %104, %.lr.ph29 ], [ %98, %._crit_edge37 ]
  %t.027 = phi double [ %103, %.lr.ph29 ], [ 0.000000e+00, %._crit_edge37 ]
  %100 = sitofp i32 %i.228 to double
  %101 = fdiv double %100, %27
  %102 = fsub double %101, %t.027
  %103 = fdiv double 1.000000e+00, %102
  %104 = add nsw i32 %i.228, -2
  %105 = icmp slt i32 %104, %84
  br i1 %105, label %._crit_edge, label %.lr.ph29

._crit_edge:                                      ; preds = %.lr.ph29, %._crit_edge37
  %t.0.lcssa = phi double [ 0.000000e+00, %._crit_edge37 ], [ %103, %.lr.ph29 ]
  %106 = fmul double %87, %32
  %107 = tail call double @fabs(double %106) nounwind optsize
  %108 = tail call double @log(double %107) nounwind optsize
  %109 = fmul double %32, %108
  %110 = fcmp olt double %109, 0x40862E42FEFA39EF
  %111 = add nsw i32 %.02, -1
  %112 = shl nsw i32 %111, 1
  %113 = sitofp i32 %112 to double
  %114 = icmp sgt i32 %111, 0
  br i1 %110, label %.preheader18, label %.preheader

.preheader18:                                     ; preds = %._crit_edge
  br i1 %114, label %.lr.ph24, label %.loopexit8

.preheader:                                       ; preds = %._crit_edge
  br i1 %114, label %.lr.ph14, label %.loopexit8

.lr.ph24:                                         ; preds = %.lr.ph24, %.preheader18
  %i.323 = phi i32 [ %119, %.lr.ph24 ], [ %111, %.preheader18 ]
  %a.222 = phi double [ %b.221, %.lr.ph24 ], [ %t.0.lcssa, %.preheader18 ]
  %b.221 = phi double [ %117, %.lr.ph24 ], [ 1.000000e+00, %.preheader18 ]
  %di.020 = phi double [ %118, %.lr.ph24 ], [ %113, %.preheader18 ]
  %115 = fmul double %b.221, %di.020
  %116 = fdiv double %115, %27
  %117 = fsub double %116, %a.222
  %118 = fadd double %di.020, -2.000000e+00
  %119 = add nsw i32 %i.323, -1
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %.lr.ph24, label %.loopexit8

.lr.ph14:                                         ; preds = %129, %.preheader
  %i.413 = phi i32 [ %130, %129 ], [ %111, %.preheader ]
  %a.312 = phi double [ %a.4, %129 ], [ %t.0.lcssa, %.preheader ]
  %b.311 = phi double [ %b.4, %129 ], [ 1.000000e+00, %.preheader ]
  %di.110 = phi double [ %124, %129 ], [ %113, %.preheader ]
  %t.19 = phi double [ %t.2, %129 ], [ %t.0.lcssa, %.preheader ]
  %121 = fmul double %b.311, %di.110
  %122 = fdiv double %121, %27
  %123 = fsub double %122, %a.312
  %124 = fadd double %di.110, -2.000000e+00
  %125 = fcmp ogt double %123, 1.000000e+100
  br i1 %125, label %126, label %129

; <label>:126                                     ; preds = %.lr.ph14
  %127 = fdiv double %b.311, %123
  %128 = fdiv double %t.19, %123
  br label %129

; <label>:129                                     ; preds = %126, %.lr.ph14
  %t.2 = phi double [ %128, %126 ], [ %t.19, %.lr.ph14 ]
  %b.4 = phi double [ 1.000000e+00, %126 ], [ %123, %.lr.ph14 ]
  %a.4 = phi double [ %127, %126 ], [ %b.311, %.lr.ph14 ]
  %130 = add nsw i32 %i.413, -1
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %.lr.ph14, label %.loopexit8

.loopexit8:                                       ; preds = %129, %.lr.ph24, %.preheader, %.preheader18
  %t.3 = phi double [ %t.0.lcssa, %.preheader ], [ %t.2, %129 ], [ %t.0.lcssa, %.lr.ph24 ], [ %t.0.lcssa, %.preheader18 ]
  %b.5 = phi double [ 1.000000e+00, %.preheader ], [ %b.4, %129 ], [ %117, %.lr.ph24 ], [ 1.000000e+00, %.preheader18 ]
  %a.5 = phi double [ %t.0.lcssa, %.preheader ], [ %a.4, %129 ], [ %b.221, %.lr.ph24 ], [ %t.0.lcssa, %.preheader18 ]
  %132 = tail call double @j0(double %27) nounwind optsize
  %133 = tail call double @j1(double %27) nounwind optsize
  %134 = tail call double @fabs(double %132) nounwind optsize
  %135 = tail call double @fabs(double %133) nounwind optsize
  %136 = fcmp ult double %134, %135
  br i1 %136, label %140, label %137

; <label>:137                                     ; preds = %.loopexit8
  %138 = fmul double %t.3, %132
  %139 = fdiv double %138, %b.5
  br label %.loopexit

; <label>:140                                     ; preds = %.loopexit8
  %141 = fmul double %t.3, %133
  %142 = fdiv double %141, %a.5
  br label %.loopexit

.loopexit:                                        ; preds = %140, %137, %._crit_edge44, %71, %.lr.ph, %59, %55, %24
  %b.6 = phi double [ %58, %55 ], [ %82, %._crit_edge44 ], [ %139, %137 ], [ %142, %140 ], [ 0.000000e+00, %24 ], [ 0.000000e+00, %71 ], [ %61, %59 ], [ %67, %.lr.ph ]
  %143 = icmp eq i32 %26, 1
  br i1 %143, label %144, label %146

; <label>:144                                     ; preds = %.loopexit
  %145 = fsub double -0.000000e+00, %b.6
  br label %146

; <label>:146                                     ; preds = %144, %.loopexit, %22, %20, %11
  %.0 = phi double [ %12, %11 ], [ %21, %20 ], [ %23, %22 ], [ %145, %144 ], [ %b.6, %.loopexit ]
  ret double %.0
}

define double @yn(i32 %n, double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = sub nsw i32 0, %4
  %7 = or i32 %4, %6
  %8 = lshr i32 %7, 31
  %9 = or i32 %5, %8
  %10 = icmp ugt i32 %9, 2146435072
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = fadd double %x, %x
  br label %76

; <label>:13                                      ; preds = %0
  %14 = or i32 %5, %4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %76, label %16

; <label>:16                                      ; preds = %13
  %17 = icmp slt i32 %3, 0
  br i1 %17, label %76, label %18

; <label>:18                                      ; preds = %16
  %19 = icmp slt i32 %n, 0
  br i1 %19, label %20, label %25

; <label>:20                                      ; preds = %18
  %21 = sub nsw i32 0, %n
  %22 = shl i32 %21, 1
  %23 = and i32 %22, 2
  %24 = sub nsw i32 1, %23
  br label %25

; <label>:25                                      ; preds = %20, %18
  %sign.0 = phi i32 [ %24, %20 ], [ 1, %18 ]
  %.03 = phi i32 [ %21, %20 ], [ %n, %18 ]
  switch i32 %.03, label %32 [
    i32 0, label %26
    i32 1, label %28
  ]

; <label>:26                                      ; preds = %25
  %27 = tail call double @y0(double %x) nounwind optsize
  br label %76

; <label>:28                                      ; preds = %25
  %29 = sitofp i32 %sign.0 to double
  %30 = tail call double @y1(double %x) nounwind optsize
  %31 = fmul double %29, %30
  br label %76

; <label>:32                                      ; preds = %25
  %33 = icmp eq i32 %5, 2146435072
  br i1 %33, label %76, label %34

; <label>:34                                      ; preds = %32
  %35 = icmp ugt i32 %5, 1389363199
  br i1 %35, label %36, label %59

; <label>:36                                      ; preds = %34
  %37 = and i32 %.03, 3
  switch i32 %37, label %55 [
    i32 0, label %38
    i32 1, label %42
    i32 2, label %47
    i32 3, label %51
  ]

; <label>:38                                      ; preds = %36
  %39 = tail call double @sin(double %x) nounwind optsize
  %40 = tail call double @cos(double %x) nounwind optsize
  %41 = fsub double %39, %40
  br label %55

; <label>:42                                      ; preds = %36
  %43 = tail call double @sin(double %x) nounwind optsize
  %44 = fsub double -0.000000e+00, %43
  %45 = tail call double @cos(double %x) nounwind optsize
  %46 = fsub double %44, %45
  br label %55

; <label>:47                                      ; preds = %36
  %48 = tail call double @sin(double %x) nounwind optsize
  %49 = tail call double @cos(double %x) nounwind optsize
  %50 = fsub double %49, %48
  br label %55

; <label>:51                                      ; preds = %36
  %52 = tail call double @sin(double %x) nounwind optsize
  %53 = tail call double @cos(double %x) nounwind optsize
  %54 = fadd double %52, %53
  br label %55

; <label>:55                                      ; preds = %51, %47, %42, %38, %36
  %temp.0 = phi double [ undef, %36 ], [ %54, %51 ], [ %50, %47 ], [ %46, %42 ], [ %41, %38 ]
  %56 = fmul double %temp.0, 0x3FE20DD750429B6D
  %57 = tail call double @sqrt(double %x) nounwind optsize
  %58 = fdiv double %56, %57
  br label %.critedge

; <label>:59                                      ; preds = %34
  %60 = tail call double @y0(double %x) nounwind optsize
  %61 = tail call double @y1(double %x) nounwind optsize
  br label %62

; <label>:62                                      ; preds = %66, %59
  %a.0 = phi double [ %60, %59 ], [ %b.0, %66 ]
  %b.0 = phi double [ %61, %59 ], [ %71, %66 ]
  %i.0 = phi i32 [ 1, %59 ], [ %72, %66 ]
  %63 = icmp slt i32 %i.0, %.03
  br i1 %63, label %64, label %.critedge

; <label>:64                                      ; preds = %62
  %high.0.in.in = bitcast double %b.0 to i64
  %high.0.in.mask = and i64 %high.0.in.in, -4294967296
  %65 = icmp eq i64 %high.0.in.mask, -4503599627370496
  br i1 %65, label %.critedge, label %66

; <label>:66                                      ; preds = %64
  %67 = shl nsw i32 %i.0, 1
  %68 = sitofp i32 %67 to double
  %69 = fdiv double %68, %x
  %70 = fmul double %69, %b.0
  %71 = fsub double %70, %a.0
  %72 = add nsw i32 %i.0, 1
  br label %62

.critedge:                                        ; preds = %64, %62, %55
  %b.1 = phi double [ %58, %55 ], [ %b.0, %62 ], [ %b.0, %64 ]
  %73 = icmp sgt i32 %sign.0, 0
  br i1 %73, label %76, label %74

; <label>:74                                      ; preds = %.critedge
  %75 = fsub double -0.000000e+00, %b.1
  br label %76

; <label>:76                                      ; preds = %74, %.critedge, %32, %28, %26, %16, %13, %11
  %.0 = phi double [ %12, %11 ], [ %27, %26 ], [ %31, %28 ], [ %75, %74 ], [ 0xFFF0000000000000, %13 ], [ 0x7FF8000000000000, %16 ], [ 0.000000e+00, %32 ], [ %b.1, %.critedge ]
  ret double %.0
}

define i32 @kill(i32 %pid, i32 %sig) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = sext i32 %sig to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 37, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @killpg(i32 %pgid, i32 %sig) nounwind uwtable optsize {
  %1 = icmp slt i32 %pgid, 0
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %0
  %3 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %3, align 4, !tbaa !6
  br label %7

; <label>:4                                       ; preds = %0
  %5 = sub nsw i32 0, %pgid
  %6 = tail call i32 @kill(i32 %5, i32 %sig) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %4, %2
  %.0 = phi i32 [ -1, %2 ], [ %6, %4 ]
  ret i32 %.0
}

define i32 @klogctl(i32 %type, i8* %buf, i32 %len) nounwind uwtable optsize {
  %1 = sext i32 %type to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = sext i32 %len to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 103, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i64 @labs(i64 %a) nounwind uwtable readnone optsize {
  %1 = icmp sgt i64 %a, 0
  %2 = sub nsw i64 0, %a
  %3 = select i1 %1, i64 %a, i64 %2
  ret i64 %3
}

define i8* @__langinfo(i32 %item) nounwind uwtable readonly optsize {
  %1 = and i32 %item, 65535
  %2 = icmp eq i32 %item, 14
  br i1 %2, label %.loopexit, label %3

; <label>:3                                       ; preds = %0
  %4 = ashr i32 %item, 16
  switch i32 %4, label %.loopexit [
    i32 1, label %5
    i32 2, label %7
    i32 4, label %9
    i32 5, label %11
  ]

; <label>:5                                       ; preds = %3
  %6 = icmp ugt i32 %1, 1
  br i1 %6, label %.loopexit, label %.preheader2

; <label>:7                                       ; preds = %3
  %8 = icmp ugt i32 %1, 49
  br i1 %8, label %.loopexit, label %.preheader2

; <label>:9                                       ; preds = %3
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %.preheader2.thread, label %.loopexit

.preheader2.thread:                               ; preds = %9
  br label %.loopexit

; <label>:11                                      ; preds = %3
  %12 = icmp ugt i32 %1, 1
  br i1 %12, label %.loopexit, label %.preheader2

.preheader2:                                      ; preds = %11, %7, %5
  %str.0.ph = phi i8* [ getelementptr inbounds ([12 x i8]* @c_messages, i64 0, i64 0), %11 ], [ getelementptr inbounds ([314 x i8]* @c_time, i64 0, i64 0), %7 ], [ getelementptr inbounds ([3 x i8]* @c_numeric, i64 0, i64 0), %5 ]
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %._crit_edge, %.preheader2
  %str.04 = phi i8* [ %20, %._crit_edge ], [ %str.0.ph, %.preheader2 ]
  %idx.03 = phi i32 [ %19, %._crit_edge ], [ %1, %.preheader2 ]
  %14 = load i8* %str.04, align 1, !tbaa !0
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %str.11 = phi i8* [ %16, %.lr.ph ], [ %str.04, %.preheader ]
  %16 = getelementptr inbounds i8* %str.11, i64 1
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %str.1.lcssa = phi i8* [ %str.04, %.preheader ], [ %16, %.lr.ph ]
  %19 = add nsw i32 %idx.03, -1
  %20 = getelementptr inbounds i8* %str.1.lcssa, i64 1
  %21 = icmp eq i32 %19, 0
  br i1 %21, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %._crit_edge, %.preheader2, %11, %.preheader2.thread, %9, %7, %5, %3, %0
  %.0 = phi i8* [ getelementptr inbounds ([6 x i8]* @.str392, i64 0, i64 0), %0 ], [ null, %5 ], [ null, %7 ], [ null, %9 ], [ null, %11 ], [ null, %3 ], [ %str.0.ph, %.preheader2 ], [ getelementptr inbounds ([1 x i8]* @.str1393, i64 0, i64 0), %.preheader2.thread ], [ %20, %._crit_edge ]
  ret i8* %.0
}

define i32 @lchmod(i8* %path, i32 %mode) nounwind uwtable optsize {
  %1 = tail call i32 @fchmodat(i32 -100, i8* %path, i32 %mode, i32 256) nounwind optsize
  ret i32 %1
}

define i32 @lchown(i8* %path, i32 %uid, i32 %gid) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = zext i32 %uid to i64
  %3 = zext i32 %gid to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 198, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @lckpwdf() nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @ulckpwdf() nounwind uwtable readnone optsize {
  ret i32 0
}

define void @lcong48(i16* %p) nounwind uwtable optsize {
  %1 = bitcast i16* %p to i8*
  %2 = tail call i8* @memcpy(i8* bitcast ([7 x i16]* @__seed48 to i8*), i8* %1, i64 14) nounwind optsize
  ret void
}

define float @ldexpf(float %x, i32 %n) nounwind uwtable optsize {
  %1 = tail call float @scalbnf(float %x, i32 %n) nounwind optsize
  ret float %1
}

define x86_fp80 @ldexpl(x86_fp80 %x, i32 %n) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @scalbnl(x86_fp80 %x, i32 %n) nounwind optsize
  ret x86_fp80 %1
}

define double @ldexp(double %x, i32 %n) nounwind uwtable optsize {
  %1 = tail call double @scalbn(double %x, i32 %n) nounwind optsize
  ret double %1
}

define { i64, i64 } @ldiv(i64 %num, i64 %den) nounwind uwtable readnone optsize {
  %1 = sdiv i64 %num, %den
  %2 = srem i64 %num, %den
  %insert = insertvalue { i64, i64 } undef, i64 %1, 0
  %insert7 = insertvalue { i64, i64 } %insert, i64 %2, 1
  ret { i64, i64 } %insert7
}

define float @lgammaf(float %x) nounwind uwtable optsize {
  %1 = tail call float @__lgammaf_r(float %x, i32* @__signgam) nounwind optsize
  ret float %1
}

define float @__lgammaf_r(float %x, i32* nocapture %signgamp) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  store i32 1, i32* %signgamp, align 4, !tbaa !6
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fmul float %x, %x
  br label %275

; <label>:6                                       ; preds = %0
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %275, label %8

; <label>:8                                       ; preds = %6
  %9 = icmp ult i32 %2, 889192448
  %10 = icmp slt i32 %1, 0
  br i1 %9, label %11, label %19

; <label>:11                                      ; preds = %8
  br i1 %10, label %12, label %16

; <label>:12                                      ; preds = %11
  store i32 -1, i32* %signgamp, align 4, !tbaa !6
  %13 = fsub float -0.000000e+00, %x
  %14 = tail call float @logf(float %13) nounwind optsize
  %15 = fsub float -0.000000e+00, %14
  br label %275

; <label>:16                                      ; preds = %11
  %17 = tail call float @logf(float %x) nounwind optsize
  %18 = fsub float -0.000000e+00, %17
  br label %275

; <label>:19                                      ; preds = %8
  br i1 %10, label %20, label %87

; <label>:20                                      ; preds = %19
  %21 = icmp ugt i32 %2, 1258291199
  br i1 %21, label %275, label %22

; <label>:22                                      ; preds = %20
  %23 = icmp ult i32 %2, 1048576000
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %22
  %25 = fmul float %x, 0x400921FB60000000
  %26 = fpext float %25 to double
  %27 = tail call float @__sindf(double %26) nounwind optsize
  br label %sin_pif.exit

; <label>:28                                      ; preds = %22
  %29 = fsub float -0.000000e+00, %x
  %30 = tail call float @floorf(float %29) nounwind optsize
  %31 = fcmp une float %30, %29
  br i1 %31, label %32, label %39

; <label>:32                                      ; preds = %28
  %33 = fmul float %x, -5.000000e-01
  %34 = tail call float @floorf(float %33) nounwind optsize
  %35 = fsub float %33, %34
  %36 = fmul float %35, 2.000000e+00
  %37 = fmul float %36, 4.000000e+00
  %38 = fptosi float %37 to i32
  br label %50

; <label>:39                                      ; preds = %28
  %40 = icmp ugt i32 %2, 1266679807
  br i1 %40, label %.thread.i, label %41

; <label>:41                                      ; preds = %39
  %42 = icmp ult i32 %2, 1258291200
  br i1 %42, label %43, label %45

; <label>:43                                      ; preds = %41
  %44 = fsub float 8.388608e+06, %x
  br label %45

; <label>:45                                      ; preds = %43, %41
  %z.0.i = phi float [ %44, %43 ], [ %30, %41 ]
  %46 = bitcast float %z.0.i to i32
  %47 = and i32 %46, 1
  %48 = sitofp i32 %47 to float
  %49 = shl nuw nsw i32 %47, 2
  br label %50

; <label>:50                                      ; preds = %45, %32
  %n.0.i = phi i32 [ %38, %32 ], [ %49, %45 ]
  %y.0.i = phi float [ %36, %32 ], [ %48, %45 ]
  switch i32 %n.0.i, label %70 [
    i32 0, label %.thread.i
    i32 1, label %54
    i32 2, label %54
    i32 3, label %59
    i32 4, label %59
    i32 5, label %64
    i32 6, label %64
  ]

.thread.i:                                        ; preds = %50, %39
  %y.03.i = phi float [ %y.0.i, %50 ], [ 0.000000e+00, %39 ]
  %51 = fmul float %y.03.i, 0x400921FB60000000
  %52 = fpext float %51 to double
  %53 = tail call float @__sindf(double %52) nounwind optsize
  br label %75

; <label>:54                                      ; preds = %50, %50
  %55 = fsub float 5.000000e-01, %y.0.i
  %56 = fmul float %55, 0x400921FB60000000
  %57 = fpext float %56 to double
  %58 = tail call float @__cosdf(double %57) nounwind optsize
  br label %75

; <label>:59                                      ; preds = %50, %50
  %60 = fsub float 1.000000e+00, %y.0.i
  %61 = fmul float %60, 0x400921FB60000000
  %62 = fpext float %61 to double
  %63 = tail call float @__sindf(double %62) nounwind optsize
  br label %75

; <label>:64                                      ; preds = %50, %50
  %65 = fadd float %y.0.i, -1.500000e+00
  %66 = fmul float %65, 0x400921FB60000000
  %67 = fpext float %66 to double
  %68 = tail call float @__cosdf(double %67) nounwind optsize
  %69 = fsub float -0.000000e+00, %68
  br label %75

; <label>:70                                      ; preds = %50
  %71 = fadd float %y.0.i, -2.000000e+00
  %72 = fmul float %71, 0x400921FB60000000
  %73 = fpext float %72 to double
  %74 = tail call float @__sindf(double %73) nounwind optsize
  br label %75

; <label>:75                                      ; preds = %70, %64, %59, %54, %.thread.i
  %y.1.i = phi float [ %74, %70 ], [ %69, %64 ], [ %63, %59 ], [ %58, %54 ], [ %53, %.thread.i ]
  %76 = fsub float -0.000000e+00, %y.1.i
  br label %sin_pif.exit

sin_pif.exit:                                     ; preds = %75, %24
  %.0.i = phi float [ %27, %24 ], [ %76, %75 ]
  %77 = fcmp oeq float %.0.i, 0.000000e+00
  br i1 %77, label %275, label %78

; <label>:78                                      ; preds = %sin_pif.exit
  %79 = fmul float %.0.i, %x
  %80 = tail call float @fabsf(float %79) nounwind optsize
  %81 = fdiv float 0x400921FB60000000, %80
  %82 = tail call float @logf(float %81) nounwind optsize
  %83 = fcmp olt float %.0.i, 0.000000e+00
  br i1 %83, label %84, label %85

; <label>:84                                      ; preds = %78
  store i32 -1, i32* %signgamp, align 4, !tbaa !6
  br label %85

; <label>:85                                      ; preds = %84, %78
  %86 = fsub float -0.000000e+00, %x
  br label %87

; <label>:87                                      ; preds = %85, %19
  %nadj.0 = phi float [ %82, %85 ], [ undef, %19 ]
  %.02 = phi float [ %86, %85 ], [ %x, %19 ]
  switch i32 %2, label %88 [
    i32 1073741824, label %272
    i32 1065353216, label %272
  ]

; <label>:88                                      ; preds = %87
  %89 = icmp ult i32 %2, 1073741824
  br i1 %89, label %90, label %197

; <label>:90                                      ; preds = %88
  %91 = icmp ult i32 %2, 1063675495
  br i1 %91, label %92, label %100

; <label>:92                                      ; preds = %90
  %93 = tail call float @logf(float %.02) nounwind optsize
  %94 = fsub float -0.000000e+00, %93
  %95 = icmp ugt i32 %2, 1060850207
  br i1 %95, label %108, label %96

; <label>:96                                      ; preds = %92
  %97 = icmp ugt i32 %2, 1047343879
  br i1 %97, label %98, label %171

; <label>:98                                      ; preds = %96
  %99 = fadd float %.02, 0xBFDD8B6180000000
  br label %136

; <label>:100                                     ; preds = %90
  %101 = icmp ugt i32 %2, 1071490583
  br i1 %101, label %108, label %102

; <label>:102                                     ; preds = %100
  %103 = icmp ugt i32 %2, 1067296287
  br i1 %103, label %104, label %106

; <label>:104                                     ; preds = %102
  %105 = fadd float %.02, 0xBFF762D860000000
  br label %136

; <label>:106                                     ; preds = %102
  %107 = fadd float %.02, -1.000000e+00
  br label %171

; <label>:108                                     ; preds = %100, %92
  %r.0.ph = phi float [ %94, %92 ], [ 0.000000e+00, %100 ]
  %.pn = phi float [ 1.000000e+00, %92 ], [ 2.000000e+00, %100 ]
  %y.0.ph = fsub float %.pn, %.02
  %109 = fmul float %y.0.ph, %y.0.ph
  %110 = fmul float %109, 0x3EFA707440000000
  %111 = fadd float %110, 0x3F2CF2ECE0000000
  %112 = fmul float %109, %111
  %113 = fadd float %112, 0x3F538A9420000000
  %114 = fmul float %109, %113
  %115 = fadd float %114, 0x3F7E404FC0000000
  %116 = fmul float %109, %115
  %117 = fadd float %116, 0x3FB13E0020000000
  %118 = fmul float %109, %117
  %119 = fadd float %118, 0x3FB3C467E0000000
  %120 = fmul float %109, 0x3F07858EA0000000
  %121 = fadd float %120, 0x3F1C5088A0000000
  %122 = fmul float %109, %121
  %123 = fadd float %122, 0x3F40B6C680000000
  %124 = fmul float %109, %123
  %125 = fadd float %124, 0x3F67ADD8C0000000
  %126 = fmul float %109, %125
  %127 = fadd float %126, 0x3F951322A0000000
  %128 = fmul float %109, %127
  %129 = fadd float %128, 0x3FD4A34CC0000000
  %130 = fmul float %109, %129
  %131 = fmul float %y.0.ph, %119
  %132 = fadd float %131, %130
  %133 = fmul float %y.0.ph, 5.000000e-01
  %134 = fsub float %132, %133
  %135 = fadd float %r.0.ph, %134
  br label %272

; <label>:136                                     ; preds = %104, %98
  %r.0.ph6 = phi float [ %94, %98 ], [ 0.000000e+00, %104 ]
  %y.0.ph7 = phi float [ %99, %98 ], [ %105, %104 ]
  %137 = fmul float %y.0.ph7, %y.0.ph7
  %138 = fmul float %137, %y.0.ph7
  %139 = fmul float %138, 0x3F34AF6D60000000
  %140 = fadd float %139, 0xBF56FE8EC0000000
  %141 = fmul float %138, %140
  %142 = fadd float %141, 0x3F78FCE0E0000000
  %143 = fmul float %138, %142
  %144 = fadd float %143, 0xBFA0C9A8E0000000
  %145 = fmul float %138, %144
  %146 = fadd float %145, 0x3FDEF72BC0000000
  %147 = fmul float %138, 0xBF347F24E0000000
  %148 = fadd float %147, 0x3F4CDF0CE0000000
  %149 = fmul float %138, %148
  %150 = fadd float %149, 0xBF6E2EFFC0000000
  %151 = fmul float %138, %150
  %152 = fadd float %151, 0x3F9266E7A0000000
  %153 = fmul float %138, %152
  %154 = fadd float %153, 0xBFC2E42780000000
  %155 = fmul float %138, 0x3F35FD3EE0000000
  %156 = fadd float %155, 0xBF41A610A0000000
  %157 = fmul float %138, %156
  %158 = fadd float %157, 0x3F6282D320000000
  %159 = fmul float %138, %158
  %160 = fadd float %159, 0xBF851F9FC0000000
  %161 = fmul float %138, %160
  %162 = fadd float %161, 0x3FB08B42A0000000
  %163 = fmul float %137, %146
  %164 = fmul float %y.0.ph7, %162
  %165 = fadd float %154, %164
  %166 = fmul float %138, %165
  %167 = fsub float 0x3E3CC38A40000000, %166
  %168 = fsub float %163, %167
  %169 = fadd float %168, 0xBFBF19B9A0000000
  %170 = fadd float %r.0.ph6, %169
  br label %272

; <label>:171                                     ; preds = %106, %96
  %r.0 = phi float [ 0.000000e+00, %106 ], [ %94, %96 ]
  %y.0 = phi float [ %107, %106 ], [ %.02, %96 ]
  %172 = fmul float %y.0, 0x3F8B678BC0000000
  %173 = fadd float %172, 0x3FCD4EAF00000000
  %174 = fmul float %y.0, %173
  %175 = fadd float %174, 0x3FEF497640000000
  %176 = fmul float %y.0, %175
  %177 = fadd float %176, 0x3FF7475CE0000000
  %178 = fmul float %y.0, %177
  %179 = fadd float %178, 0x3FE4401E80000000
  %180 = fmul float %y.0, %179
  %181 = fadd float %180, 0xBFB3C467E0000000
  %182 = fmul float %y.0, %181
  %183 = fmul float %y.0, 0x3F6A5ABB60000000
  %184 = fadd float %183, 0x3FBAAE55E0000000
  %185 = fmul float %y.0, %184
  %186 = fadd float %185, 0x3FE89DFBE0000000
  %187 = fmul float %y.0, %186
  %188 = fadd float %187, 0x40010725A0000000
  %189 = fmul float %y.0, %188
  %190 = fadd float %189, 0x4003A5D7C0000000
  %191 = fmul float %y.0, %190
  %192 = fadd float %191, 1.000000e+00
  %193 = fmul float %y.0, -5.000000e-01
  %194 = fdiv float %182, %192
  %195 = fadd float %193, %194
  %196 = fadd float %r.0, %195
  br label %272

; <label>:197                                     ; preds = %88
  %198 = icmp ult i32 %2, 1090519040
  br i1 %198, label %199, label %247

; <label>:199                                     ; preds = %197
  %200 = fptosi float %.02 to i32
  %201 = sitofp i32 %200 to float
  %202 = fsub float %.02, %201
  %203 = fmul float %202, 0x3F00BFECE0000000
  %204 = fadd float %203, 0x3F5E26B680000000
  %205 = fmul float %202, %204
  %206 = fadd float %205, 0x3F9B481C80000000
  %207 = fmul float %202, %206
  %208 = fadd float %207, 0x3FC2BB9CC0000000
  %209 = fmul float %202, %208
  %210 = fadd float %209, 0x3FD4D98F40000000
  %211 = fmul float %202, %210
  %212 = fadd float %211, 0x3FCB848B40000000
  %213 = fmul float %202, %212
  %214 = fadd float %213, 0xBFB3C467E0000000
  %215 = fmul float %202, %214
  %216 = fmul float %202, 0x3EDEBAF7A0000000
  %217 = fadd float %216, 0x3F497DDAC0000000
  %218 = fmul float %202, %217
  %219 = fadd float %218, 0x3F9317EA80000000
  %220 = fmul float %202, %219
  %221 = fadd float %220, 0x3FC601EDC0000000
  %222 = fmul float %202, %221
  %223 = fadd float %222, 0x3FE71A18A0000000
  %224 = fmul float %202, %223
  %225 = fadd float %224, 0x3FF645A760000000
  %226 = fmul float %202, %225
  %227 = fadd float %226, 1.000000e+00
  %228 = fmul float %202, 5.000000e-01
  %229 = fdiv float %215, %227
  %230 = fadd float %228, %229
  switch i32 %200, label %272 [
    i32 7, label %231
    i32 6, label %233
    i32 5, label %236
    i32 4, label %239
    i32 3, label %242
  ]

; <label>:231                                     ; preds = %199
  %232 = fadd float %202, 6.000000e+00
  br label %233

; <label>:233                                     ; preds = %231, %199
  %z.0 = phi float [ 1.000000e+00, %199 ], [ %232, %231 ]
  %234 = fadd float %202, 5.000000e+00
  %235 = fmul float %z.0, %234
  br label %236

; <label>:236                                     ; preds = %233, %199
  %z.1 = phi float [ 1.000000e+00, %199 ], [ %235, %233 ]
  %237 = fadd float %202, 4.000000e+00
  %238 = fmul float %z.1, %237
  br label %239

; <label>:239                                     ; preds = %236, %199
  %z.2 = phi float [ 1.000000e+00, %199 ], [ %238, %236 ]
  %240 = fadd float %202, 3.000000e+00
  %241 = fmul float %z.2, %240
  br label %242

; <label>:242                                     ; preds = %239, %199
  %z.3 = phi float [ 1.000000e+00, %199 ], [ %241, %239 ]
  %243 = fadd float %202, 2.000000e+00
  %244 = fmul float %z.3, %243
  %245 = tail call float @logf(float %244) nounwind optsize
  %246 = fadd float %230, %245
  br label %272

; <label>:247                                     ; preds = %197
  %248 = icmp ult i32 %2, 1551892480
  %249 = tail call float @logf(float %.02) nounwind optsize
  br i1 %248, label %250, label %269

; <label>:250                                     ; preds = %247
  %251 = fdiv float 1.000000e+00, %.02
  %252 = fmul float %251, %251
  %253 = fmul float %252, 0xBF5AB89D00000000
  %254 = fadd float %253, 0x3F4B67BA40000000
  %255 = fmul float %252, %254
  %256 = fadd float %255, 0xBF4380CB80000000
  %257 = fmul float %252, %256
  %258 = fadd float %257, 0x3F4A019FA0000000
  %259 = fmul float %252, %258
  %260 = fadd float %259, 0xBF66C16C20000000
  %261 = fmul float %252, %260
  %262 = fadd float %261, 0x3FB5555560000000
  %263 = fmul float %251, %262
  %264 = fadd float %263, 0x3FDACFE3A0000000
  %265 = fadd float %.02, -5.000000e-01
  %266 = fadd float %249, -1.000000e+00
  %267 = fmul float %265, %266
  %268 = fadd float %267, %264
  br label %272

; <label>:269                                     ; preds = %247
  %270 = fadd float %249, -1.000000e+00
  %271 = fmul float %.02, %270
  br label %272

; <label>:272                                     ; preds = %269, %250, %242, %199, %171, %136, %108, %87, %87
  %r.1 = phi float [ %196, %171 ], [ %170, %136 ], [ %135, %108 ], [ %230, %199 ], [ %246, %242 ], [ %268, %250 ], [ %271, %269 ], [ 0.000000e+00, %87 ], [ 0.000000e+00, %87 ]
  br i1 %10, label %273, label %275

; <label>:273                                     ; preds = %272
  %274 = fsub float %nadj.0, %r.1
  br label %275

; <label>:275                                     ; preds = %273, %272, %sin_pif.exit, %20, %16, %12, %6, %4
  %.0 = phi float [ %5, %4 ], [ %15, %12 ], [ %18, %16 ], [ 0x7FF0000000000000, %6 ], [ 0x7FF0000000000000, %20 ], [ 0x7FF0000000000000, %sin_pif.exit ], [ %274, %273 ], [ %r.1, %272 ]
  ret float %.0
}

define x86_fp80 @__lgammal_r(x86_fp80 %x, i32* nocapture %sg) nounwind uwtable optsize {
  store i32 1, i32* %sg, align 4, !tbaa !6
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = lshr i80 %1, 32
  %5 = and i32 %3, 32767
  %6 = or i80 %4, %1
  %7 = trunc i80 %6 to i32
  %8 = or i32 %7, %5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

; <label>:10                                      ; preds = %0
  %11 = and i32 %3, 32768
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

; <label>:13                                      ; preds = %10
  store i32 -1, i32* %sg, align 4, !tbaa !6
  br label %14

; <label>:14                                      ; preds = %13, %10
  %15 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %16 = fdiv x86_fp80 0xK3FFF8000000000000000, %15
  br label %299

; <label>:17                                      ; preds = %0
  %18 = shl nuw nsw i32 %5, 16
  %19 = lshr i80 %1, 48
  %.tr = trunc i80 %19 to i32
  %20 = and i32 %.tr, 65535
  %21 = or i32 %18, %20
  %22 = icmp ugt i32 %21, 2147418111
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %17
  %24 = fmul x86_fp80 %x, %x
  br label %299

; <label>:25                                      ; preds = %17
  %26 = icmp ult i32 %21, 1069580288
  %27 = and i32 %3, 32768
  %28 = icmp ne i32 %27, 0
  br i1 %26, label %29, label %37

; <label>:29                                      ; preds = %25
  br i1 %28, label %30, label %34

; <label>:30                                      ; preds = %29
  store i32 -1, i32* %sg, align 4, !tbaa !6
  %31 = fsub x86_fp80 0xK80000000000000000000, %x
  %32 = tail call x86_fp80 @logl(x86_fp80 %31) nounwind optsize
  %33 = fsub x86_fp80 0xK80000000000000000000, %32
  br label %299

; <label>:34                                      ; preds = %29
  %35 = tail call x86_fp80 @logl(x86_fp80 %x) nounwind optsize
  %36 = fsub x86_fp80 0xK80000000000000000000, %35
  br label %299

; <label>:37                                      ; preds = %25
  br i1 %28, label %38, label %102

; <label>:38                                      ; preds = %37
  %39 = and i32 %.tr, 2147483647
  %40 = icmp ult i32 %39, 1073577984
  br i1 %40, label %41, label %44

; <label>:41                                      ; preds = %38
  %42 = fmul x86_fp80 %x, 0xK4000C90FDAA22168C235
  %43 = tail call x86_fp80 @sinl(x86_fp80 %42) nounwind optsize
  br label %sin_pi.exit

; <label>:44                                      ; preds = %38
  %45 = fsub x86_fp80 0xK80000000000000000000, %x
  %46 = tail call x86_fp80 @floorl(x86_fp80 %45) nounwind optsize
  %47 = fcmp une x86_fp80 %46, %45
  br i1 %47, label %48, label %55

; <label>:48                                      ; preds = %44
  %49 = fmul x86_fp80 %x, 0xKBFFE8000000000000000
  %50 = tail call x86_fp80 @floorl(x86_fp80 %49) nounwind optsize
  %51 = fsub x86_fp80 %49, %50
  %52 = fmul x86_fp80 %51, 0xK40008000000000000000
  %53 = fmul x86_fp80 %52, 0xK40018000000000000000
  %54 = fptosi x86_fp80 %53 to i32
  br label %67

; <label>:55                                      ; preds = %44
  %56 = icmp ugt i32 %39, 1077903359
  br i1 %56, label %.thread.i, label %57

; <label>:57                                      ; preds = %55
  %58 = icmp ult i32 %39, 1077837824
  br i1 %58, label %59, label %61

; <label>:59                                      ; preds = %57
  %60 = fsub x86_fp80 0xK403E8000000000000000, %x
  br label %61

; <label>:61                                      ; preds = %59, %57
  %z.0.i = phi x86_fp80 [ %60, %59 ], [ %46, %57 ]
  %62 = bitcast x86_fp80 %z.0.i to i80
  %63 = trunc i80 %62 to i32
  %64 = and i32 %63, 1
  %65 = sitofp i32 %64 to x86_fp80
  %66 = shl nuw nsw i32 %64, 2
  br label %67

; <label>:67                                      ; preds = %61, %48
  %n.0.i = phi i32 [ %54, %48 ], [ %66, %61 ]
  %y.0.i = phi x86_fp80 [ %52, %48 ], [ %65, %61 ]
  switch i32 %n.0.i, label %83 [
    i32 0, label %.thread.i
    i32 1, label %70
    i32 2, label %70
    i32 3, label %74
    i32 4, label %74
    i32 5, label %78
    i32 6, label %78
  ]

.thread.i:                                        ; preds = %67, %55
  %y.05.i = phi x86_fp80 [ %y.0.i, %67 ], [ 0xK00000000000000000000, %55 ]
  %68 = fmul x86_fp80 %y.05.i, 0xK4000C90FDAA22168C235
  %69 = tail call x86_fp80 @sinl(x86_fp80 %68) nounwind optsize
  br label %87

; <label>:70                                      ; preds = %67, %67
  %71 = fsub x86_fp80 0xK3FFE8000000000000000, %y.0.i
  %72 = fmul x86_fp80 %71, 0xK4000C90FDAA22168C235
  %73 = tail call x86_fp80 @cosl(x86_fp80 %72) nounwind optsize
  br label %87

; <label>:74                                      ; preds = %67, %67
  %75 = fsub x86_fp80 0xK3FFF8000000000000000, %y.0.i
  %76 = fmul x86_fp80 %75, 0xK4000C90FDAA22168C235
  %77 = tail call x86_fp80 @sinl(x86_fp80 %76) nounwind optsize
  br label %87

; <label>:78                                      ; preds = %67, %67
  %79 = fadd x86_fp80 %y.0.i, 0xKBFFFC000000000000000
  %80 = fmul x86_fp80 %79, 0xK4000C90FDAA22168C235
  %81 = tail call x86_fp80 @cosl(x86_fp80 %80) nounwind optsize
  %82 = fsub x86_fp80 0xK80000000000000000000, %81
  br label %87

; <label>:83                                      ; preds = %67
  %84 = fadd x86_fp80 %y.0.i, 0xKC0008000000000000000
  %85 = fmul x86_fp80 %84, 0xK4000C90FDAA22168C235
  %86 = tail call x86_fp80 @sinl(x86_fp80 %85) nounwind optsize
  br label %87

; <label>:87                                      ; preds = %83, %78, %74, %70, %.thread.i
  %y.1.i = phi x86_fp80 [ %86, %83 ], [ %82, %78 ], [ %77, %74 ], [ %73, %70 ], [ %69, %.thread.i ]
  %88 = fsub x86_fp80 0xK80000000000000000000, %y.1.i
  br label %sin_pi.exit

sin_pi.exit:                                      ; preds = %87, %41
  %.0.i = phi x86_fp80 [ %43, %41 ], [ %88, %87 ]
  %89 = fcmp oeq x86_fp80 %.0.i, 0xK00000000000000000000
  br i1 %89, label %90, label %93

; <label>:90                                      ; preds = %sin_pi.exit
  %91 = tail call x86_fp80 @fabsl(x86_fp80 %.0.i) nounwind optsize
  %92 = fdiv x86_fp80 0xK3FFF8000000000000000, %91
  br label %299

; <label>:93                                      ; preds = %sin_pi.exit
  %94 = fmul x86_fp80 %.0.i, %x
  %95 = tail call x86_fp80 @fabsl(x86_fp80 %94) nounwind optsize
  %96 = fdiv x86_fp80 0xK4000C90FDAA22168C235, %95
  %97 = tail call x86_fp80 @logl(x86_fp80 %96) nounwind optsize
  %98 = fcmp olt x86_fp80 %.0.i, 0xK00000000000000000000
  br i1 %98, label %99, label %100

; <label>:99                                      ; preds = %93
  store i32 -1, i32* %sg, align 4, !tbaa !6
  br label %100

; <label>:100                                     ; preds = %99, %93
  %101 = fsub x86_fp80 0xK80000000000000000000, %x
  br label %102

; <label>:102                                     ; preds = %100, %37
  %nadj.0 = phi x86_fp80 [ %97, %100 ], [ undef, %37 ]
  %.01 = phi x86_fp80 [ %101, %100 ], [ %x, %37 ]
  %103 = add nsw i32 %21, -1073709056
  %104 = or i32 %7, %103
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %296, label %106

; <label>:106                                     ; preds = %102
  %107 = add nsw i32 %21, -1073774592
  %108 = or i32 %7, %107
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %296, label %110

; <label>:110                                     ; preds = %106
  %111 = icmp ult i32 %21, 1073774592
  br i1 %111, label %112, label %217

; <label>:112                                     ; preds = %110
  %113 = icmp ult i32 %21, 1073669735
  br i1 %113, label %114, label %124

; <label>:114                                     ; preds = %112
  %115 = tail call x86_fp80 @logl(x86_fp80 %.01) nounwind optsize
  %116 = fsub x86_fp80 0xK80000000000000000000, %115
  %117 = icmp ugt i32 %21, 1073658697
  br i1 %117, label %118, label %120

; <label>:118                                     ; preds = %114
  %119 = fadd x86_fp80 %.01, 0xKBFFF8000000000000000
  br label %134

; <label>:120                                     ; preds = %114
  %121 = icmp ugt i32 %21, 1073540402
  br i1 %121, label %122, label %188

; <label>:122                                     ; preds = %120
  %123 = fadd x86_fp80 %.01, 0xKBFFDEC5B0C6AD7C7EDC4
  br label %159

; <label>:124                                     ; preds = %112
  %125 = icmp ugt i32 %21, 1073733029
  br i1 %125, label %126, label %128

; <label>:126                                     ; preds = %124
  %127 = fadd x86_fp80 %.01, 0xKC0008000000000000000
  br label %134

; <label>:128                                     ; preds = %124
  %129 = icmp ugt i32 %21, 1073716645
  br i1 %129, label %130, label %132

; <label>:130                                     ; preds = %128
  %131 = fadd x86_fp80 %.01, 0xKBFFFBB16C31AB5F1FB71
  br label %159

; <label>:132                                     ; preds = %128
  %133 = fadd x86_fp80 %.01, 0xKBFFF8000000000000000
  br label %188

; <label>:134                                     ; preds = %126, %118
  %r.0.ph = phi x86_fp80 [ %116, %118 ], [ 0xK00000000000000000000, %126 ]
  %y.0.ph = phi x86_fp80 [ %119, %118 ], [ %127, %126 ]
  %135 = fmul x86_fp80 %y.0.ph, 0xK4000F115D0E13AEA5AAC
  %136 = fadd x86_fp80 %135, 0xK4005E31280572629A7F8
  %137 = fmul x86_fp80 %y.0.ph, %136
  %138 = fadd x86_fp80 %137, 0xK4008DC1ACEEC4B3BA538
  %139 = fmul x86_fp80 %y.0.ph, %138
  %140 = fadd x86_fp80 %139, 0xK400A964BBAC9559EAC31
  %141 = fmul x86_fp80 %y.0.ph, %140
  %142 = fadd x86_fp80 %141, 0xK4009E811ED79A7063DDF
  %143 = fmul x86_fp80 %y.0.ph, %142
  %144 = fadd x86_fp80 %143, 0xKC0089E94C7302246C2A8
  %145 = fadd x86_fp80 %y.0.ph, 0xK4004F1B2AA9F4861B5CB
  %146 = fmul x86_fp80 %y.0.ph, %145
  %147 = fadd x86_fp80 %146, 0xK4008D4ACA5204E78D8C0
  %148 = fmul x86_fp80 %y.0.ph, %147
  %149 = fadd x86_fp80 %148, 0xK400B8E4AB3272A55A21D
  %150 = fmul x86_fp80 %y.0.ph, %149
  %151 = fadd x86_fp80 %150, 0xK400CA05DBD87D12E640B
  %152 = fmul x86_fp80 %y.0.ph, %151
  %153 = fadd x86_fp80 %152, 0xK400C805BE51545C76426
  %154 = fmul x86_fp80 %y.0.ph, 0xK3FFE8000000000000000
  %155 = fmul x86_fp80 %y.0.ph, %144
  %156 = fdiv x86_fp80 %155, %153
  %157 = fadd x86_fp80 %154, %156
  %158 = fadd x86_fp80 %r.0.ph, %157
  br label %296

; <label>:159                                     ; preds = %130, %122
  %r.0.ph5 = phi x86_fp80 [ %116, %122 ], [ 0xK00000000000000000000, %130 ]
  %y.0.ph6 = phi x86_fp80 [ %123, %122 ], [ %131, %130 ]
  %160 = fmul x86_fp80 %y.0.ph6, 0xK40018ABC66E1056EBB97
  %161 = fadd x86_fp80 %160, 0xK40069A2C6D7DA4A7143C
  %162 = fmul x86_fp80 %y.0.ph6, %161
  %163 = fadd x86_fp80 %162, 0xK4009B5EDAD4A2B6AF60D
  %164 = fmul x86_fp80 %y.0.ph6, %163
  %165 = fadd x86_fp80 %164, 0xK400BAAC17DCD67444A43
  %166 = fmul x86_fp80 %y.0.ph6, %165
  %167 = fadd x86_fp80 %166, 0xK400C89F26A0FC9F11345
  %168 = fmul x86_fp80 %y.0.ph6, %167
  %169 = fadd x86_fp80 %168, 0xK400BA0353CB55C121785
  %170 = fmul x86_fp80 %y.0.ph6, %169
  %171 = fadd x86_fp80 %170, 0xK3FC5867F0E7C29340760
  %172 = fadd x86_fp80 %y.0.ph6, 0xK400580D986849A094970
  %173 = fmul x86_fp80 %y.0.ph6, %172
  %174 = fadd x86_fp80 %173, 0xK4008F41B2AA4D08C27AA
  %175 = fmul x86_fp80 %y.0.ph6, %174
  %176 = fadd x86_fp80 %175, 0xK400BB7682D0BD0041DB4
  %177 = fmul x86_fp80 %y.0.ph6, %176
  %178 = fadd x86_fp80 %177, 0xK400D805C4B9F648BE3D4
  %179 = fmul x86_fp80 %y.0.ph6, %178
  %180 = fadd x86_fp80 %179, 0xK400DA7CE6EDDA9979471
  %181 = fmul x86_fp80 %y.0.ph6, %180
  %182 = fadd x86_fp80 %181, 0xK400CA58F65AF2D6352AF
  %183 = fmul x86_fp80 %y.0.ph6, %171
  %184 = fdiv x86_fp80 %183, %182
  %185 = fadd x86_fp80 %184, 0xK3FC4F84AE446AD360AC8
  %186 = fadd x86_fp80 %185, 0xKBFFBF8CDCDE61C521000
  %187 = fadd x86_fp80 %r.0.ph5, %186
  br label %296

; <label>:188                                     ; preds = %132, %120
  %r.0 = phi x86_fp80 [ 0xK00000000000000000000, %132 ], [ %116, %120 ]
  %y.0 = phi x86_fp80 [ %133, %132 ], [ %.01, %120 ]
  %189 = fmul x86_fp80 %y.0, 0xK40018F80321770681672
  %190 = fadd x86_fp80 %189, 0xK4005E2738851DB576BEE
  %191 = fmul x86_fp80 %y.0, %190
  %192 = fadd x86_fp80 %191, 0xK4008BA2D37BF660E26EB
  %193 = fmul x86_fp80 %y.0, %192
  %194 = fadd x86_fp80 %193, 0xK4009EEF72A378D76FD0C
  %195 = fmul x86_fp80 %y.0, %194
  %196 = fadd x86_fp80 %195, 0xK4009FF54090C5581BF2A
  %197 = fmul x86_fp80 %y.0, %196
  %198 = fadd x86_fp80 %197, 0xK4008AB00B4302BB3CBF1
  %199 = fmul x86_fp80 %y.0, %198
  %200 = fadd x86_fp80 %199, 0xKC005B1B96F0070C4A41B
  %201 = fmul x86_fp80 %y.0, %200
  %202 = fadd x86_fp80 %y.0, 0xK4004B45C0DD3D2AA7F6A
  %203 = fmul x86_fp80 %y.0, %202
  %204 = fadd x86_fp80 %203, 0xK4007ED116565A2F267A3
  %205 = fmul x86_fp80 %y.0, %204
  %206 = fadd x86_fp80 %205, 0xK4009F5CE67685BED2E20
  %207 = fmul x86_fp80 %y.0, %206
  %208 = fadd x86_fp80 %207, 0xK400AECAA1B7760BA7C84
  %209 = fmul x86_fp80 %y.0, %208
  %210 = fadd x86_fp80 %209, 0xK400AD47B13801C9ABE6B
  %211 = fmul x86_fp80 %y.0, %210
  %212 = fadd x86_fp80 %211, 0xK40098FDA96EE56155B39
  %213 = fmul x86_fp80 %y.0, 0xKBFFE8000000000000000
  %214 = fdiv x86_fp80 %201, %212
  %215 = fadd x86_fp80 %213, %214
  %216 = fadd x86_fp80 %r.0, %215
  br label %296

; <label>:217                                     ; preds = %110
  %218 = icmp ult i32 %21, 1073905664
  br i1 %218, label %219, label %269

; <label>:219                                     ; preds = %217
  %220 = fptosi x86_fp80 %.01 to i32
  %221 = sitofp i32 %220 to double
  %222 = fpext double %221 to x86_fp80
  %223 = fsub x86_fp80 %.01, %222
  %224 = fmul x86_fp80 %223, 0xKC009D29DA60F5DFA05EF
  %225 = fadd x86_fp80 %224, 0xKC00EF4AA443706E810E3
  %226 = fmul x86_fp80 %223, %225
  %227 = fadd x86_fp80 %226, 0xKC012AD371282903EB2E4
  %228 = fmul x86_fp80 %223, %227
  %229 = fadd x86_fp80 %228, 0xKC014CA943F86A403F6BE
  %230 = fmul x86_fp80 %223, %229
  %231 = fadd x86_fp80 %230, 0xKC015C89C01657BB2F73A
  %232 = fmul x86_fp80 %223, %231
  %233 = fadd x86_fp80 %232, 0xKC014EE1FD18F72CBB4CD
  %234 = fmul x86_fp80 %223, %233
  %235 = fadd x86_fp80 %234, 0xK4013B194321B770C93B4
  %236 = fmul x86_fp80 %223, %235
  %237 = fadd x86_fp80 %223, 0xKC007E1198B5AF4A1810D
  %238 = fmul x86_fp80 %223, %237
  %239 = fadd x86_fp80 %238, 0xKC00DEC8AB16E428C6E2C
  %240 = fmul x86_fp80 %223, %239
  %241 = fadd x86_fp80 %240, 0xKC01287D5CC4AA7C1EF90
  %242 = fmul x86_fp80 %223, %241
  %243 = fadd x86_fp80 %242, 0xKC015838BFC9A902FB887
  %244 = fmul x86_fp80 %223, %243
  %245 = fadd x86_fp80 %244, 0xKC016F42D96F3D84BACAE
  %246 = fmul x86_fp80 %223, %245
  %247 = fadd x86_fp80 %246, 0xKC017D6C87E69FFDB436A
  %248 = fmul x86_fp80 %223, %247
  %249 = fadd x86_fp80 %248, 0xKC0178FBC72CDBD6AA4C7
  %250 = fmul x86_fp80 %223, 0xK3FFE8000000000000000
  %251 = fdiv x86_fp80 %236, %249
  %252 = fadd x86_fp80 %250, %251
  switch i32 %220, label %296 [
    i32 7, label %253
    i32 6, label %255
    i32 5, label %258
    i32 4, label %261
    i32 3, label %264
  ]

; <label>:253                                     ; preds = %219
  %254 = fadd x86_fp80 %223, 0xK4001C000000000000000
  br label %255

; <label>:255                                     ; preds = %253, %219
  %z.0 = phi x86_fp80 [ 0xK3FFF8000000000000000, %219 ], [ %254, %253 ]
  %256 = fadd x86_fp80 %223, 0xK4001A000000000000000
  %257 = fmul x86_fp80 %z.0, %256
  br label %258

; <label>:258                                     ; preds = %255, %219
  %z.1 = phi x86_fp80 [ 0xK3FFF8000000000000000, %219 ], [ %257, %255 ]
  %259 = fadd x86_fp80 %223, 0xK40018000000000000000
  %260 = fmul x86_fp80 %z.1, %259
  br label %261

; <label>:261                                     ; preds = %258, %219
  %z.2 = phi x86_fp80 [ 0xK3FFF8000000000000000, %219 ], [ %260, %258 ]
  %262 = fadd x86_fp80 %223, 0xK4000C000000000000000
  %263 = fmul x86_fp80 %z.2, %262
  br label %264

; <label>:264                                     ; preds = %261, %219
  %z.3 = phi x86_fp80 [ 0xK3FFF8000000000000000, %219 ], [ %263, %261 ]
  %265 = fadd x86_fp80 %223, 0xK40008000000000000000
  %266 = fmul x86_fp80 %z.3, %265
  %267 = tail call x86_fp80 @logl(x86_fp80 %266) nounwind optsize
  %268 = fadd x86_fp80 %252, %267
  br label %296

; <label>:269                                     ; preds = %217
  %270 = icmp ult i32 %21, 1078034432
  %271 = tail call x86_fp80 @logl(x86_fp80 %.01) nounwind optsize
  br i1 %270, label %272, label %293

; <label>:272                                     ; preds = %269
  %273 = fdiv x86_fp80 0xK3FFF8000000000000000, %.01
  %274 = fmul x86_fp80 %273, %273
  %275 = fmul x86_fp80 %274, 0xK3FF7A01291C2CC08D984
  %276 = fadd x86_fp80 %275, 0xKBFF5F6853DA103043D91
  %277 = fmul x86_fp80 %274, %276
  %278 = fadd x86_fp80 %277, 0xK3FF4DC88D492AAD13BDC
  %279 = fmul x86_fp80 %274, %278
  %280 = fadd x86_fp80 %279, 0xKBFF49C09844E9FCE8B20
  %281 = fmul x86_fp80 %274, %280
  %282 = fadd x86_fp80 %281, 0xK3FF4D00D009230E5F8F2
  %283 = fmul x86_fp80 %274, %282
  %284 = fadd x86_fp80 %283, 0xKBFF6B60B60B603A84D88
  %285 = fmul x86_fp80 %274, %284
  %286 = fadd x86_fp80 %285, 0xK3FFBAAAAAAAAAAAA9FCC
  %287 = fmul x86_fp80 %273, %286
  %288 = fadd x86_fp80 %287, 0xK3FFDD67F1C864BEB4A69
  %289 = fadd x86_fp80 %.01, 0xKBFFE8000000000000000
  %290 = fadd x86_fp80 %271, 0xKBFFF8000000000000000
  %291 = fmul x86_fp80 %289, %290
  %292 = fadd x86_fp80 %291, %288
  br label %296

; <label>:293                                     ; preds = %269
  %294 = fadd x86_fp80 %271, 0xKBFFF8000000000000000
  %295 = fmul x86_fp80 %.01, %294
  br label %296

; <label>:296                                     ; preds = %293, %272, %264, %219, %188, %159, %134, %106, %102
  %r.1 = phi x86_fp80 [ %216, %188 ], [ %187, %159 ], [ %158, %134 ], [ %252, %219 ], [ %268, %264 ], [ %292, %272 ], [ %295, %293 ], [ 0xK00000000000000000000, %106 ], [ 0xK00000000000000000000, %102 ]
  br i1 %28, label %297, label %299

; <label>:297                                     ; preds = %296
  %298 = fsub x86_fp80 %nadj.0, %r.1
  br label %299

; <label>:299                                     ; preds = %297, %296, %90, %34, %30, %23, %14
  %.0 = phi x86_fp80 [ %16, %14 ], [ %24, %23 ], [ %33, %30 ], [ %36, %34 ], [ %92, %90 ], [ %298, %297 ], [ %r.1, %296 ]
  ret x86_fp80 %.0
}

define x86_fp80 @lgammal(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @__lgammal_r(x86_fp80 %x, i32* @__signgam) optsize
  ret x86_fp80 %1
}

define double @lgamma(double %x) nounwind uwtable optsize {
  %1 = tail call double @__lgamma_r(double %x, i32* @__signgam) nounwind optsize
  ret double %1
}

define double @__lgamma_r(double %x, i32* nocapture %signgamp) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  store i32 1, i32* %signgamp, align 4, !tbaa !6
  %5 = and i32 %3, 2147483647
  %6 = icmp ugt i32 %5, 2146435071
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %0
  %8 = fmul double %x, %x
  br label %281

; <label>:9                                       ; preds = %0
  %10 = or i32 %5, %4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %281, label %12

; <label>:12                                      ; preds = %9
  %13 = icmp ult i32 %5, 999292928
  %14 = icmp slt i32 %3, 0
  br i1 %13, label %15, label %23

; <label>:15                                      ; preds = %12
  br i1 %14, label %16, label %20

; <label>:16                                      ; preds = %15
  store i32 -1, i32* %signgamp, align 4, !tbaa !6
  %17 = fsub double -0.000000e+00, %x
  %18 = tail call double @log(double %17) nounwind optsize
  %19 = fsub double -0.000000e+00, %18
  br label %281

; <label>:20                                      ; preds = %15
  %21 = tail call double @log(double %x) nounwind optsize
  %22 = fsub double -0.000000e+00, %21
  br label %281

; <label>:23                                      ; preds = %12
  br i1 %14, label %24, label %86

; <label>:24                                      ; preds = %23
  %25 = icmp ugt i32 %5, 1127219199
  br i1 %25, label %281, label %26

; <label>:26                                      ; preds = %24
  %27 = icmp ult i32 %5, 1070596096
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %26
  %29 = fmul double %x, 0x400921FB54442D18
  %30 = tail call double @__sin(double %29, double 0.000000e+00, i32 0) nounwind optsize
  br label %sin_pi.exit

; <label>:31                                      ; preds = %26
  %32 = fsub double -0.000000e+00, %x
  %33 = tail call double @floor(double %32) nounwind optsize
  %34 = fcmp une double %33, %32
  br i1 %34, label %35, label %42

; <label>:35                                      ; preds = %31
  %36 = fmul double %x, -5.000000e-01
  %37 = tail call double @floor(double %36) nounwind optsize
  %38 = fsub double %36, %37
  %39 = fmul double %38, 2.000000e+00
  %40 = fmul double %39, 4.000000e+00
  %41 = fptosi double %40 to i32
  br label %54

; <label>:42                                      ; preds = %31
  %43 = icmp ugt i32 %5, 1128267775
  br i1 %43, label %.thread.i, label %44

; <label>:44                                      ; preds = %42
  %45 = icmp ult i32 %5, 1127219200
  br i1 %45, label %46, label %48

; <label>:46                                      ; preds = %44
  %47 = fsub double 0x4330000000000000, %x
  br label %48

; <label>:48                                      ; preds = %46, %44
  %z.0.i = phi double [ %47, %46 ], [ %33, %44 ]
  %49 = bitcast double %z.0.i to i64
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, 1
  %52 = sitofp i32 %51 to double
  %53 = shl nuw nsw i32 %51, 2
  br label %54

; <label>:54                                      ; preds = %48, %35
  %n.0.i = phi i32 [ %41, %35 ], [ %53, %48 ]
  %y.0.i = phi double [ %39, %35 ], [ %52, %48 ]
  switch i32 %n.0.i, label %70 [
    i32 0, label %.thread.i
    i32 1, label %57
    i32 2, label %57
    i32 3, label %61
    i32 4, label %61
    i32 5, label %65
    i32 6, label %65
  ]

.thread.i:                                        ; preds = %54, %42
  %y.03.i = phi double [ %y.0.i, %54 ], [ 0.000000e+00, %42 ]
  %55 = fmul double %y.03.i, 0x400921FB54442D18
  %56 = tail call double @__sin(double %55, double 0.000000e+00, i32 0) nounwind optsize
  br label %74

; <label>:57                                      ; preds = %54, %54
  %58 = fsub double 5.000000e-01, %y.0.i
  %59 = fmul double %58, 0x400921FB54442D18
  %60 = tail call double @__cos(double %59, double 0.000000e+00) nounwind optsize
  br label %74

; <label>:61                                      ; preds = %54, %54
  %62 = fsub double 1.000000e+00, %y.0.i
  %63 = fmul double %62, 0x400921FB54442D18
  %64 = tail call double @__sin(double %63, double 0.000000e+00, i32 0) nounwind optsize
  br label %74

; <label>:65                                      ; preds = %54, %54
  %66 = fadd double %y.0.i, -1.500000e+00
  %67 = fmul double %66, 0x400921FB54442D18
  %68 = tail call double @__cos(double %67, double 0.000000e+00) nounwind optsize
  %69 = fsub double -0.000000e+00, %68
  br label %74

; <label>:70                                      ; preds = %54
  %71 = fadd double %y.0.i, -2.000000e+00
  %72 = fmul double %71, 0x400921FB54442D18
  %73 = tail call double @__sin(double %72, double 0.000000e+00, i32 0) nounwind optsize
  br label %74

; <label>:74                                      ; preds = %70, %65, %61, %57, %.thread.i
  %y.1.i = phi double [ %73, %70 ], [ %69, %65 ], [ %64, %61 ], [ %60, %57 ], [ %56, %.thread.i ]
  %75 = fsub double -0.000000e+00, %y.1.i
  br label %sin_pi.exit

sin_pi.exit:                                      ; preds = %74, %28
  %.0.i = phi double [ %30, %28 ], [ %75, %74 ]
  %76 = fcmp oeq double %.0.i, 0.000000e+00
  br i1 %76, label %281, label %77

; <label>:77                                      ; preds = %sin_pi.exit
  %78 = fmul double %.0.i, %x
  %79 = tail call double @fabs(double %78) nounwind optsize
  %80 = fdiv double 0x400921FB54442D18, %79
  %81 = tail call double @log(double %80) nounwind optsize
  %82 = fcmp olt double %.0.i, 0.000000e+00
  br i1 %82, label %83, label %84

; <label>:83                                      ; preds = %77
  store i32 -1, i32* %signgamp, align 4, !tbaa !6
  br label %84

; <label>:84                                      ; preds = %83, %77
  %85 = fsub double -0.000000e+00, %x
  br label %86

; <label>:86                                      ; preds = %84, %23
  %nadj.0 = phi double [ %81, %84 ], [ undef, %23 ]
  %.01 = phi double [ %85, %84 ], [ %x, %23 ]
  %87 = add nsw i32 %5, -1072693248
  %88 = or i32 %87, %4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %278, label %90

; <label>:90                                      ; preds = %86
  %91 = add nsw i32 %5, -1073741824
  %92 = or i32 %91, %4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %278, label %94

; <label>:94                                      ; preds = %90
  %95 = icmp ult i32 %5, 1073741824
  br i1 %95, label %96, label %203

; <label>:96                                      ; preds = %94
  %97 = icmp ult i32 %5, 1072483533
  br i1 %97, label %98, label %106

; <label>:98                                      ; preds = %96
  %99 = tail call double @log(double %.01) nounwind optsize
  %100 = fsub double -0.000000e+00, %99
  %101 = icmp ugt i32 %5, 1072130371
  br i1 %101, label %114, label %102

; <label>:102                                     ; preds = %98
  %103 = icmp ugt i32 %5, 1070442080
  br i1 %103, label %104, label %177

; <label>:104                                     ; preds = %102
  %105 = fadd double %.01, 0xBFDD8B618D5AF8FC
  br label %142

; <label>:106                                     ; preds = %96
  %107 = icmp ugt i32 %5, 1073460418
  br i1 %107, label %114, label %108

; <label>:108                                     ; preds = %106
  %109 = icmp ugt i32 %5, 1072936131
  br i1 %109, label %110, label %112

; <label>:110                                     ; preds = %108
  %111 = fadd double %.01, 0xBFF762D86356BE3F
  br label %142

; <label>:112                                     ; preds = %108
  %113 = fadd double %.01, -1.000000e+00
  br label %177

; <label>:114                                     ; preds = %106, %98
  %r.0.ph = phi double [ %100, %98 ], [ 0.000000e+00, %106 ]
  %.pn = phi double [ 1.000000e+00, %98 ], [ 2.000000e+00, %106 ]
  %y.0.ph = fsub double %.pn, %.01
  %115 = fmul double %y.0.ph, %y.0.ph
  %116 = fmul double %115, 0x3EFA7074428CFA52
  %117 = fadd double %116, 0x3F2CF2ECED10E54D
  %118 = fmul double %115, %117
  %119 = fadd double %118, 0x3F538A94116F3F5D
  %120 = fmul double %115, %119
  %121 = fadd double %120, 0x3F7E404FB68FEFE8
  %122 = fmul double %115, %121
  %123 = fadd double %122, 0x3FB13E001A5562A7
  %124 = fmul double %115, %123
  %125 = fadd double %124, 0x3FB3C467E37DB0C8
  %126 = fmul double %115, 0x3F07858E90A45837
  %127 = fadd double %126, 0x3F1C5088987DFB07
  %128 = fmul double %115, %127
  %129 = fadd double %128, 0x3F40B6C689B99C00
  %130 = fmul double %115, %129
  %131 = fadd double %130, 0x3F67ADD8CCB7926B
  %132 = fmul double %115, %131
  %133 = fadd double %132, 0x3F951322AC92547B
  %134 = fmul double %115, %133
  %135 = fadd double %134, 0x3FD4A34CC4A60FAD
  %136 = fmul double %115, %135
  %137 = fmul double %y.0.ph, %125
  %138 = fadd double %137, %136
  %139 = fmul double %y.0.ph, 5.000000e-01
  %140 = fsub double %138, %139
  %141 = fadd double %r.0.ph, %140
  br label %278

; <label>:142                                     ; preds = %110, %104
  %r.0.ph6 = phi double [ %100, %104 ], [ 0.000000e+00, %110 ]
  %y.0.ph7 = phi double [ %105, %104 ], [ %111, %110 ]
  %143 = fmul double %y.0.ph7, %y.0.ph7
  %144 = fmul double %143, %y.0.ph7
  %145 = fmul double %144, 0x3F34AF6D6C0EBBF7
  %146 = fadd double %145, 0xBF56FE8EBF2D1AF1
  %147 = fmul double %144, %146
  %148 = fadd double %147, 0x3F78FCE0E370E344
  %149 = fmul double %144, %148
  %150 = fadd double %149, 0xBFA0C9A8DF35B713
  %151 = fmul double %144, %150
  %152 = fadd double %151, 0x3FDEF72BC8EE38A2
  %153 = fmul double %144, 0xBF347F24ECC38C38
  %154 = fadd double %153, 0x3F4CDF0CEF61A8E9
  %155 = fmul double %144, %154
  %156 = fadd double %155, 0xBF6E2EFFB3E914D7
  %157 = fmul double %144, %156
  %158 = fadd double %157, 0x3F9266E7970AF9EC
  %159 = fmul double %144, %158
  %160 = fadd double %159, 0xBFC2E4278DC6C509
  %161 = fmul double %144, 0x3F35FD3EE8C2D3F4
  %162 = fadd double %161, 0xBF41A6109C73E0EC
  %163 = fmul double %144, %162
  %164 = fadd double %163, 0x3F6282D32E15C915
  %165 = fmul double %144, %164
  %166 = fadd double %165, 0xBF851F9FBA91EC6A
  %167 = fmul double %144, %166
  %168 = fadd double %167, 0x3FB08B4294D5419B
  %169 = fmul double %143, %152
  %170 = fmul double %y.0.ph7, %168
  %171 = fadd double %160, %170
  %172 = fmul double %144, %171
  %173 = fsub double 0xBC50C7CAA48A971F, %172
  %174 = fsub double %169, %173
  %175 = fadd double %174, 0xBFBF19B9BCC38A42
  %176 = fadd double %r.0.ph6, %175
  br label %278

; <label>:177                                     ; preds = %112, %102
  %r.0 = phi double [ 0.000000e+00, %112 ], [ %100, %102 ]
  %y.0 = phi double [ %113, %112 ], [ %.01, %102 ]
  %178 = fmul double %y.0, 0x3F8B678BBF2BAB09
  %179 = fadd double %178, 0x3FCD4EAEF6010924
  %180 = fmul double %y.0, %179
  %181 = fadd double %180, 0x3FEF497644EA8450
  %182 = fmul double %y.0, %181
  %183 = fadd double %182, 0x3FF7475CD119BD6F
  %184 = fmul double %y.0, %183
  %185 = fadd double %184, 0x3FE4401E8B005DFF
  %186 = fmul double %y.0, %185
  %187 = fadd double %186, 0xBFB3C467E37DB0C8
  %188 = fmul double %y.0, %187
  %189 = fmul double %y.0, 0x3F6A5ABB57D0CF61
  %190 = fadd double %189, 0x3FBAAE55D6537C88
  %191 = fmul double %y.0, %190
  %192 = fadd double %191, 0x3FE89DFBE45050AF
  %193 = fmul double %y.0, %192
  %194 = fadd double %193, 0x40010725A42B18F5
  %195 = fmul double %y.0, %194
  %196 = fadd double %195, 0x4003A5D7C2BD619C
  %197 = fmul double %y.0, %196
  %198 = fadd double %197, 1.000000e+00
  %199 = fmul double %y.0, -5.000000e-01
  %200 = fdiv double %188, %198
  %201 = fadd double %199, %200
  %202 = fadd double %r.0, %201
  br label %278

; <label>:203                                     ; preds = %94
  %204 = icmp ult i32 %5, 1075838976
  br i1 %204, label %205, label %253

; <label>:205                                     ; preds = %203
  %206 = fptosi double %.01 to i32
  %207 = sitofp i32 %206 to double
  %208 = fsub double %.01, %207
  %209 = fmul double %208, 0x3F00BFECDD17E945
  %210 = fadd double %209, 0x3F5E26B67368F239
  %211 = fmul double %208, %210
  %212 = fadd double %211, 0x3F9B481C7E939961
  %213 = fmul double %208, %212
  %214 = fadd double %213, 0x3FC2BB9CBEE5F2F7
  %215 = fmul double %208, %214
  %216 = fadd double %215, 0x3FD4D98F4F139F59
  %217 = fmul double %208, %216
  %218 = fadd double %217, 0x3FCB848B36E20878
  %219 = fmul double %208, %218
  %220 = fadd double %219, 0xBFB3C467E37DB0C8
  %221 = fmul double %208, %220
  %222 = fmul double %208, 0x3EDEBAF7A5B38140
  %223 = fadd double %222, 0x3F497DDACA41A95B
  %224 = fmul double %208, %223
  %225 = fadd double %224, 0x3F9317EA742ED475
  %226 = fmul double %208, %225
  %227 = fadd double %226, 0x3FC601EDCCFBDF27
  %228 = fmul double %208, %227
  %229 = fadd double %228, 0x3FE71A1893D3DCDC
  %230 = fmul double %208, %229
  %231 = fadd double %230, 0x3FF645A762C4AB74
  %232 = fmul double %208, %231
  %233 = fadd double %232, 1.000000e+00
  %234 = fmul double %208, 5.000000e-01
  %235 = fdiv double %221, %233
  %236 = fadd double %234, %235
  switch i32 %206, label %278 [
    i32 7, label %237
    i32 6, label %239
    i32 5, label %242
    i32 4, label %245
    i32 3, label %248
  ]

; <label>:237                                     ; preds = %205
  %238 = fadd double %208, 6.000000e+00
  br label %239

; <label>:239                                     ; preds = %237, %205
  %z.0 = phi double [ 1.000000e+00, %205 ], [ %238, %237 ]
  %240 = fadd double %208, 5.000000e+00
  %241 = fmul double %z.0, %240
  br label %242

; <label>:242                                     ; preds = %239, %205
  %z.1 = phi double [ 1.000000e+00, %205 ], [ %241, %239 ]
  %243 = fadd double %208, 4.000000e+00
  %244 = fmul double %z.1, %243
  br label %245

; <label>:245                                     ; preds = %242, %205
  %z.2 = phi double [ 1.000000e+00, %205 ], [ %244, %242 ]
  %246 = fadd double %208, 3.000000e+00
  %247 = fmul double %z.2, %246
  br label %248

; <label>:248                                     ; preds = %245, %205
  %z.3 = phi double [ 1.000000e+00, %205 ], [ %247, %245 ]
  %249 = fadd double %208, 2.000000e+00
  %250 = fmul double %z.3, %249
  %251 = tail call double @log(double %250) nounwind optsize
  %252 = fadd double %236, %251
  br label %278

; <label>:253                                     ; preds = %203
  %254 = icmp ult i32 %5, 1133510656
  %255 = tail call double @log(double %.01) nounwind optsize
  br i1 %254, label %256, label %275

; <label>:256                                     ; preds = %253
  %257 = fdiv double 1.000000e+00, %.01
  %258 = fmul double %257, %257
  %259 = fmul double %258, 0xBF5AB89D0B9E43E4
  %260 = fadd double %259, 0x3F4B67BA4CDAD5D1
  %261 = fmul double %258, %260
  %262 = fadd double %261, 0xBF4380CB8C0FE741
  %263 = fmul double %258, %262
  %264 = fadd double %263, 0x3F4A019F98CF38B6
  %265 = fmul double %258, %264
  %266 = fadd double %265, 0xBF66C16C16B02E5C
  %267 = fmul double %258, %266
  %268 = fadd double %267, 0x3FB555555555553B
  %269 = fmul double %257, %268
  %270 = fadd double %269, 0x3FDACFE390C97D69
  %271 = fadd double %.01, -5.000000e-01
  %272 = fadd double %255, -1.000000e+00
  %273 = fmul double %271, %272
  %274 = fadd double %273, %270
  br label %278

; <label>:275                                     ; preds = %253
  %276 = fadd double %255, -1.000000e+00
  %277 = fmul double %.01, %276
  br label %278

; <label>:278                                     ; preds = %275, %256, %248, %205, %177, %142, %114, %90, %86
  %r.1 = phi double [ %202, %177 ], [ %176, %142 ], [ %141, %114 ], [ %236, %205 ], [ %252, %248 ], [ %274, %256 ], [ %277, %275 ], [ 0.000000e+00, %90 ], [ 0.000000e+00, %86 ]
  br i1 %14, label %279, label %281

; <label>:279                                     ; preds = %278
  %280 = fsub double %nadj.0, %r.1
  br label %281

; <label>:281                                     ; preds = %279, %278, %sin_pi.exit, %24, %20, %16, %9, %7
  %.0 = phi double [ %8, %7 ], [ %19, %16 ], [ %22, %20 ], [ 0x7FF0000000000000, %9 ], [ 0x7FF0000000000000, %24 ], [ 0x7FF0000000000000, %sin_pi.exit ], [ %280, %279 ], [ %r.1, %278 ]
  ret double %.0
}

define void @__libc_csu_fini() nounwind uwtable readnone optsize {
  ret void
}

define void @__libc_csu_init(i32 %argc, i8** nocapture %argv, i8** nocapture %envp) nounwind uwtable readnone optsize {
  ret void
}

define i32 @__libc_start_main_0(i32 ()* nocapture %main, i32 %argc, i8** %argv, i32 (i32, i8**, i8**)* %init, void ()* %fini, void ()* %ldso_fini) nounwind uwtable optsize {
  %1 = sext i32 %argc to i64
  %.sum = add i64 %1, 1
  %2 = getelementptr inbounds i8** %argv, i64 %.sum
  store i8** %2, i8*** @__environ, align 8, !tbaa !7
  store void ()* %ldso_fini, void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 6), align 8, !tbaa !7
  store void ()* %fini, void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 5), align 8, !tbaa !7
  %3 = icmp eq i32 (i32, i8**, i8**)* %init, null
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i32 %init(i32 %argc, i8** %argv, i8** %2) nounwind optsize
  br label %6

; <label>:6                                       ; preds = %4, %0
  %7 = tail call i32 %main() nounwind optsize
  tail call void @exit(i32 %7) nounwind optsize
  ret i32 0
}

define i32 @__libc_start_main_2(i32 (i32, i8**)* nocapture %main, i32 %argc, i8** %argv, i32 (i32, i8**, i8**)* %init, void ()* %fini, void ()* %ldso_fini) nounwind uwtable optsize {
  %1 = sext i32 %argc to i64
  %.sum = add i64 %1, 1
  %2 = getelementptr inbounds i8** %argv, i64 %.sum
  store i8** %2, i8*** @__environ, align 8, !tbaa !7
  br label %3

; <label>:3                                       ; preds = %3, %0
  %auxv.0 = phi i8** [ %2, %0 ], [ %4, %3 ]
  %4 = getelementptr inbounds i8** %auxv.0, i64 1
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %3

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds i8** %auxv.0, i64 2
  %9 = bitcast i8** %8 to i64*
  store i64* %9, i64** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 3), align 8, !tbaa !7
  store void ()* %ldso_fini, void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 6), align 8, !tbaa !7
  store void ()* %fini, void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 5), align 8, !tbaa !7
  tail call void @__init_security(i64* %9) nounwind optsize
  %10 = icmp eq i32 (i32, i8**, i8**)* %init, null
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %7
  %12 = tail call i32 %init(i32 %argc, i8** %argv, i8** %2) nounwind optsize
  br label %13

; <label>:13                                      ; preds = %11, %7
  %14 = tail call i32 %main(i32 %argc, i8** %argv) nounwind optsize
  tail call void @exit(i32 %14) nounwind optsize
  ret i32 0
}

define i32 @__libc_start_main_3(i32 (i32, i8**, i8**)* nocapture %main, i32 %argc, i8** %argv, i32 (i32, i8**, i8**)* %init, void ()* %fini, void ()* %ldso_fini) nounwind uwtable optsize {
  %1 = sext i32 %argc to i64
  %.sum = add i64 %1, 1
  %2 = getelementptr inbounds i8** %argv, i64 %.sum
  store i8** %2, i8*** @__environ, align 8, !tbaa !7
  br label %3

; <label>:3                                       ; preds = %3, %0
  %auxv.0 = phi i8** [ %2, %0 ], [ %4, %3 ]
  %4 = getelementptr inbounds i8** %auxv.0, i64 1
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %3

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds i8** %auxv.0, i64 2
  %9 = bitcast i8** %8 to i64*
  store i64* %9, i64** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 3), align 8, !tbaa !7
  store void ()* %ldso_fini, void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 6), align 8, !tbaa !7
  store void ()* %fini, void ()** getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 5), align 8, !tbaa !7
  tail call void @__init_security(i64* %9) nounwind optsize
  %10 = icmp eq i32 (i32, i8**, i8**)* %init, null
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %7
  %12 = tail call i32 %init(i32 %argc, i8** %argv, i8** %2) nounwind optsize
  br label %13

; <label>:13                                      ; preds = %11, %7
  %14 = tail call i32 %main(i32 %argc, i8** %argv, i8** %2) nounwind optsize
  tail call void @exit(i32 %14) nounwind optsize
  ret i32 0
}

define i32 @linkat(i32 %fd1, i8* %existing, i32 %fd2, i8* %new, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %fd1 to i64
  %2 = ptrtoint i8* %existing to i64
  %3 = sext i32 %fd2 to i64
  %4 = ptrtoint i8* %new to i64
  %5 = sext i32 %flag to i64
  %6 = tail call i64 (i64, ...)* @__syscall(i64 330, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i32 0) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define i32 @link(i8* %existing, i8* %new) nounwind uwtable optsize {
  %1 = ptrtoint i8* %existing to i64
  %2 = ptrtoint i8* %new to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 9, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @listen(i32 %fd, i32 %backlog) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = sext i32 %backlog to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 284, i64 %1, i64 %2, i64 0, i64 0, i64 0, i64 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i8* @__simple_malloc(i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i64 %n, 0
  %2 = zext i1 %1 to i64
  %.n = add i64 %2, %n
  %3 = icmp slt i64 %.n, 0
  br i1 %3, label %36, label %.preheader

.preheader:                                       ; preds = %0
  %4 = icmp ugt i64 %.n, 1
  br i1 %4, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %align.03 = phi i64 [ %5, %.lr.ph ], [ 1, %.preheader ]
  %5 = shl i64 %align.03, 1
  %6 = icmp ult i64 %5, %.n
  %7 = icmp ult i64 %5, 16
  %or.cond = and i1 %6, %7
  br i1 %or.cond, label %.lr.ph, label %.critedge

.critedge:                                        ; preds = %.lr.ph, %.preheader
  %align.0.lcssa = phi i64 [ 1, %.preheader ], [ %5, %.lr.ph ]
  %8 = add i64 %.n, -1
  %9 = add i64 %8, %align.0.lcssa
  %10 = sub i64 0, %align.0.lcssa
  %11 = and i64 %9, %10
  %12 = load i64* @__simple_malloc.cur, align 8, !tbaa !5
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %17

; <label>:14                                      ; preds = %.critedge
  %15 = tail call i64 @__brk(i64 0) nounwind optsize
  %16 = add i64 %15, 16
  store i64 %16, i64* @__simple_malloc.brk, align 8, !tbaa !5
  store i64 %16, i64* @__simple_malloc.cur, align 8, !tbaa !5
  br label %17

; <label>:17                                      ; preds = %14, %.critedge
  %18 = phi i64 [ %12, %.critedge ], [ %16, %14 ]
  %19 = add i64 %align.0.lcssa, -1
  %20 = add i64 %19, %18
  %21 = and i64 %20, %10
  %22 = sub i64 -4097, %21
  %23 = icmp ugt i64 %11, %22
  br i1 %23, label %36, label %24

; <label>:24                                      ; preds = %17
  %25 = add i64 %21, %11
  %26 = load i64* @__simple_malloc.brk, align 8, !tbaa !5
  %27 = icmp ugt i64 %25, %26
  br i1 %27, label %28, label %34

; <label>:28                                      ; preds = %24
  %29 = add i64 %25, 4095
  %30 = and i64 %29, -4096
  %31 = tail call i64 @__brk(i64 %30) nounwind optsize
  %32 = icmp eq i64 %31, %30
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %28
  store i64 %30, i64* @__simple_malloc.brk, align 8, !tbaa !5
  br label %34

; <label>:34                                      ; preds = %33, %24
  store i64 %25, i64* @__simple_malloc.cur, align 8, !tbaa !5
  %35 = inttoptr i64 %21 to i8*
  br label %38

; <label>:36                                      ; preds = %28, %17, %0
  %37 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %37, align 4, !tbaa !6
  br label %38

; <label>:38                                      ; preds = %36, %34
  %.0 = phi i8* [ null, %36 ], [ %35, %34 ]
  ret i8* %.0
}

define i64 @llabs(i64 %a) nounwind uwtable readnone optsize {
  %1 = icmp sgt i64 %a, 0
  %2 = sub nsw i64 0, %a
  %3 = select i1 %1, i64 %a, i64 %2
  ret i64 %3
}

define { i64, i64 } @lldiv(i64 %num, i64 %den) nounwind uwtable readnone optsize {
  %1 = sdiv i64 %num, %den
  %2 = srem i64 %num, %den
  %insert = insertvalue { i64, i64 } undef, i64 %1, 0
  %insert7 = insertvalue { i64, i64 } %insert, i64 %2, 1
  ret { i64, i64 } %insert7
}

define i64 @llrintf(float %x) nounwind uwtable optsize {
  %1 = tail call float @rintf(float %x) nounwind optsize
  %2 = fptosi float %1 to i64
  ret i64 %2
}

define i64 @llrintl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call i32 @fetestexcept(i32 32) nounwind optsize
  %2 = tail call x86_fp80 @rintl(x86_fp80 %x) nounwind optsize
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = fcmp ogt x86_fp80 %2, 0xK403DFFFFFFFFFFFFFFFE
  %6 = fcmp olt x86_fp80 %2, 0xKC03E8000000000000000
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %7, label %9

; <label>:7                                       ; preds = %4
  %8 = tail call i32 @feclearexcept(i32 32) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %7, %4, %0
  %10 = fptosi x86_fp80 %2 to i64
  ret i64 %10
}

define i64 @llrint(double %x) nounwind uwtable optsize {
  %1 = tail call double @rint(double %x) nounwind optsize
  %2 = fptosi double %1 to i64
  ret i64 %2
}

define i64 @llroundf(float %x) nounwind uwtable optsize {
  %1 = tail call float @roundf(float %x) nounwind optsize
  %2 = fptosi float %1 to i64
  ret i64 %2
}

define i64 @llroundl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @roundl(x86_fp80 %x) nounwind optsize
  %2 = fptosi x86_fp80 %1 to i64
  ret i64 %2
}

define i64 @llround(double %x) nounwind uwtable optsize {
  %1 = tail call double @round(double %x) nounwind optsize
  %2 = fptosi double %1 to i64
  ret i64 %2
}

define %struct.lconv* @localeconv() nounwind uwtable optsize {
  %1 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %2 = icmp eq %struct.lconv* %1, null
  br i1 %2, label %3, label %28

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @malloc(i64 96) optsize
  %5 = bitcast i8* %4 to %struct.lconv*
  store %struct.lconv* %5, %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %6 = tail call i8* @memset(i8* %4, i32 -1, i64 96) nounwind optsize
  %7 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.lconv* %7, i64 0, i32 0
  store i8* getelementptr inbounds ([2 x i8]* @.str408, i64 0, i64 0), i8** %8, align 8, !tbaa !7
  %9 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.lconv* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %10, align 8, !tbaa !7
  %11 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.lconv* %11, i64 0, i32 2
  store i8* getelementptr inbounds ([2 x i8]* @.str2410, i64 0, i64 0), i8** %12, align 8, !tbaa !7
  %13 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.lconv* %13, i64 0, i32 3
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %14, align 8, !tbaa !7
  %15 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.lconv* %15, i64 0, i32 4
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %16, align 8, !tbaa !7
  %17 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.lconv* %17, i64 0, i32 5
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %18, align 8, !tbaa !7
  %19 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.lconv* %19, i64 0, i32 6
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %20, align 8, !tbaa !7
  %21 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.lconv* %21, i64 0, i32 7
  store i8* getelementptr inbounds ([2 x i8]* @.str2410, i64 0, i64 0), i8** %22, align 8, !tbaa !7
  %23 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.lconv* %23, i64 0, i32 8
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %24, align 8, !tbaa !7
  %25 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.lconv* %25, i64 0, i32 9
  store i8* getelementptr inbounds ([1 x i8]* @.str1409, i64 0, i64 0), i8** %26, align 8, !tbaa !7
  %27 = load %struct.lconv** @localeconv.posix_lconv, align 8, !tbaa !7
  br label %28

; <label>:28                                      ; preds = %3, %0
  %.0 = phi %struct.lconv* [ %27, %3 ], [ %1, %0 ]
  ret %struct.lconv* %.0
}

define %struct.tm* @localtime(i64* nocapture %t) nounwind uwtable optsize {
  tail call void @__tzset() nounwind optsize
  %1 = load i64* %t, align 8, !tbaa !5
  %2 = load i64* @__timezone, align 8, !tbaa !5
  %3 = sub nsw i64 %1, %2
  %4 = tail call %struct.tm* bitcast (%struct.tm.197* (i64, %struct.tm.197*)* @__time_to_tm to %struct.tm* (i64, %struct.tm*)*)(i64 %3, %struct.tm* @localtime.tm) nounwind optsize
  store i32 -1, i32* getelementptr inbounds (%struct.tm* @localtime.tm, i64 0, i32 8), align 8, !tbaa !6
  %5 = tail call %struct.tm* @__dst_adjust(%struct.tm* @localtime.tm) nounwind optsize
  ret %struct.tm* %5
}

define %struct.tm* @localtime_r(i64* nocapture %t, %struct.tm* %result) nounwind uwtable optsize {
  tail call void @__tzset() nounwind optsize
  %1 = load i64* %t, align 8, !tbaa !5
  %2 = load i64* @__timezone, align 8, !tbaa !5
  %3 = sub nsw i64 %1, %2
  %4 = tail call %struct.tm* bitcast (%struct.tm.197* (i64, %struct.tm.197*)* @__time_to_tm to %struct.tm* (i64, %struct.tm*)*)(i64 %3, %struct.tm* %result) nounwind optsize
  %5 = getelementptr inbounds %struct.tm* %result, i64 0, i32 8
  store i32 -1, i32* %5, align 4, !tbaa !6
  %6 = tail call %struct.tm* @__dst_adjust(%struct.tm* %result) nounwind optsize
  ret %struct.tm* %6
}

define i32 @lockf(i32 %fd, i32 %op, i64 %size) nounwind uwtable optsize {
  %l = alloca %struct.flock, align 8
  %1 = getelementptr inbounds %struct.flock* %l, i64 0, i32 0
  store i16 1, i16* %1, align 8, !tbaa !8
  %2 = getelementptr inbounds %struct.flock* %l, i64 0, i32 1
  store i16 1, i16* %2, align 2, !tbaa !8
  %3 = getelementptr inbounds %struct.flock* %l, i64 0, i32 2
  store i64 0, i64* %3, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.flock* %l, i64 0, i32 3
  store i64 %size, i64* %4, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.flock* %l, i64 0, i32 4
  store i32 0, i32* %5, align 8, !tbaa !6
  switch i32 %op, label %23 [
    i32 3, label %6
    i32 0, label %18
    i32 2, label %19
    i32 1, label %21
  ]

; <label>:6                                       ; preds = %0
  store i16 0, i16* %1, align 8, !tbaa !8
  %7 = call i32 (i32, i32, ...)* @fcntl(i32 %fd, i32 5, %struct.flock* %l) nounwind optsize
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %25, label %9

; <label>:9                                       ; preds = %6
  %10 = load i16* %1, align 8, !tbaa !8
  %11 = icmp eq i16 %10, 2
  br i1 %11, label %25, label %12

; <label>:12                                      ; preds = %9
  %13 = load i32* %5, align 8, !tbaa !6
  %14 = call i32 @getpid() nounwind optsize
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %25, label %16

; <label>:16                                      ; preds = %12
  %17 = call i32* @__errno_location() nounwind readnone optsize
  store i32 13, i32* %17, align 4, !tbaa !6
  br label %25

; <label>:18                                      ; preds = %0
  store i16 2, i16* %1, align 8, !tbaa !8
  br label %19

; <label>:19                                      ; preds = %18, %0
  %20 = call i32 (i32, i32, ...)* @fcntl(i32 %fd, i32 6, %struct.flock* %l) nounwind optsize
  br label %25

; <label>:21                                      ; preds = %0
  %22 = call i32 (i32, i32, ...)* @fcntl(i32 %fd, i32 7, %struct.flock* %l) nounwind optsize
  br label %25

; <label>:23                                      ; preds = %0
  %24 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %24, align 4, !tbaa !6
  br label %25

; <label>:25                                      ; preds = %23, %21, %19, %16, %12, %9, %6
  %.0 = phi i32 [ -1, %23 ], [ %22, %21 ], [ %20, %19 ], [ -1, %16 ], [ -1, %6 ], [ 0, %12 ], [ 0, %9 ]
  ret i32 %.0
}

define void @__lock(i32* %l) nounwind uwtable optsize {
  br label %.backedge

.backedge:                                        ; preds = %13, %11, %0
  %spins.0 = phi i32 [ 10000, %0 ], [ %12, %11 ], [ 0, %13 ]
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %5, %.backedge
  %1 = load volatile i32* %l, align 4, !tbaa !6
  br label %2

; <label>:2                                       ; preds = %5, %a_cas.exit.i
  %3 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %1, i32 1, i32* %l) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %a_swap.exit, label %5

; <label>:5                                       ; preds = %2
  %6 = load volatile i32* %l, align 4, !tbaa !6
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %2, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %2
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %15, label %9

; <label>:9                                       ; preds = %a_swap.exit
  %10 = icmp eq i32 %spins.0, 0
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %9
  %12 = add nsw i32 %spins.0, -1
  br label %.backedge

; <label>:13                                      ; preds = %9
  %14 = tail call i64 (i64, ...)* @__syscall(i64 158, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %.backedge

; <label>:15                                      ; preds = %a_swap.exit
  ret void
}

define float @log10f(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = icmp slt i32 %1, 8388608
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %0
  %4 = and i32 %1, 2147483647
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %65, label %6

; <label>:6                                       ; preds = %3
  %7 = icmp slt i32 %1, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fsub float %x, %x
  %10 = fdiv float %9, 0.000000e+00
  br label %65

; <label>:11                                      ; preds = %6
  %12 = fmul float %x, 0x4180000000000000
  %13 = bitcast float %12 to i32
  br label %14

; <label>:14                                      ; preds = %11, %0
  %k.0 = phi i32 [ -152, %11 ], [ -127, %0 ]
  %hx.0 = phi i32 [ %13, %11 ], [ %1, %0 ]
  %.05 = phi float [ %12, %11 ], [ %x, %0 ]
  %15 = icmp sgt i32 %hx.0, 2139095039
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %14
  %17 = fadd float %.05, %.05
  br label %65

; <label>:18                                      ; preds = %14
  %19 = icmp eq i32 %hx.0, 1065353216
  br i1 %19, label %65, label %20

; <label>:20                                      ; preds = %18
  %21 = ashr i32 %hx.0, 23
  %22 = and i32 %hx.0, 8388607
  %23 = add nsw i32 %22, 4913933
  %24 = and i32 %23, 8388608
  %25 = or i32 %24, %22
  %26 = xor i32 %25, 1065353216
  %27 = bitcast i32 %26 to float
  %28 = lshr exact i32 %24, 23
  %29 = add i32 %k.0, %21
  %30 = add i32 %29, %28
  %31 = sitofp i32 %30 to float
  %32 = fadd float %27, -1.000000e+00
  %33 = fmul float %32, 5.000000e-01
  %34 = fmul float %33, %32
  %35 = fadd float %32, 2.000000e+00
  %36 = fdiv float %32, %35
  %37 = fmul float %36, %36
  %38 = fmul float %37, %37
  %39 = fmul float %38, 0x3FCF13C4C0000000
  %40 = fadd float %39, 0x3FD999C260000000
  %41 = fmul float %38, %40
  %42 = fmul float %38, 0x3FD23D3DC0000000
  %43 = fadd float %42, 0x3FE5555540000000
  %44 = fmul float %37, %43
  %45 = fadd float %44, %41
  %46 = fadd float %34, %45
  %47 = fmul float %36, %46
  %48 = fsub float %32, %34
  %49 = bitcast float %48 to i32
  %50 = and i32 %49, -4096
  %51 = bitcast i32 %50 to float
  %52 = fsub float %32, %51
  %53 = fsub float %52, %34
  %54 = fadd float %53, %47
  %55 = fmul float %31, 0x3EAA84FB60000000
  %56 = fadd float %54, %51
  %57 = fmul float %56, 0xBF009D5B20000000
  %58 = fadd float %55, %57
  %59 = fmul float %54, 0x3FDBCC0000000000
  %60 = fadd float %58, %59
  %61 = fmul float %51, 0x3FDBCC0000000000
  %62 = fadd float %60, %61
  %63 = fmul float %31, 0x3FD3441000000000
  %64 = fadd float %62, %63
  br label %65

; <label>:65                                      ; preds = %20, %18, %16, %8, %3
  %.0 = phi float [ %10, %8 ], [ %17, %16 ], [ %64, %20 ], [ 0xFFF0000000000000, %3 ], [ 0.000000e+00, %18 ]
  ret float %.0
}

define x86_fp80 @log10l(x86_fp80 %x) nounwind uwtable optsize {
  %z = alloca x86_fp80, align 16
  %e = alloca i32, align 4
  %1 = call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %77, label %3

; <label>:3                                       ; preds = %0
  %4 = fcmp ugt x86_fp80 %x, 0xK00000000000000000000
  br i1 %4, label %12, label %5

; <label>:5                                       ; preds = %3
  %6 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  %7 = fsub x86_fp80 %x, %x
  br i1 %6, label %8, label %10

; <label>:8                                       ; preds = %5
  %9 = fdiv x86_fp80 0xKBFFF8000000000000000, %7
  br label %77

; <label>:10                                      ; preds = %5
  %11 = fdiv x86_fp80 %7, %7
  br label %77

; <label>:12                                      ; preds = %3
  %13 = fcmp oeq x86_fp80 %x, 0xK7FFF8000000000000000
  br i1 %13, label %77, label %14

; <label>:14                                      ; preds = %12
  %15 = call x86_fp80 @frexpl(x86_fp80 %x, i32* %e) nounwind optsize
  %16 = load i32* %e, align 4, !tbaa !6
  %.off = add i32 %16, 2
  %17 = icmp ugt i32 %.off, 4
  %18 = fcmp olt x86_fp80 %15, 0xK3FFEB504F333F9DE6484
  br i1 %17, label %19, label %40

; <label>:19                                      ; preds = %14
  br i1 %18, label %20, label %24

; <label>:20                                      ; preds = %19
  %21 = add nsw i32 %16, -1
  store i32 %21, i32* %e, align 4, !tbaa !6
  %22 = fadd x86_fp80 %15, 0xKBFFE8000000000000000
  store volatile x86_fp80 %22, x86_fp80* %z, align 16, !tbaa !4
  %23 = load volatile x86_fp80* %z, align 16, !tbaa !4
  br label %28

; <label>:24                                      ; preds = %19
  %25 = fadd x86_fp80 %15, 0xKBFFE8000000000000000
  store volatile x86_fp80 %25, x86_fp80* %z, align 16, !tbaa !4
  %26 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %27 = fadd x86_fp80 %26, 0xKBFFE8000000000000000
  store volatile x86_fp80 %27, x86_fp80* %z, align 16, !tbaa !4
  br label %28

; <label>:28                                      ; preds = %24, %20
  %y.0.in.in = phi x86_fp80 [ %23, %20 ], [ %15, %24 ]
  %y.0.in = fmul x86_fp80 %y.0.in.in, 0xK3FFE8000000000000000
  %y.0 = fadd x86_fp80 %y.0.in, 0xK3FFE8000000000000000
  %29 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %30 = fdiv x86_fp80 %29, %y.0
  %31 = fmul x86_fp80 %30, %30
  store volatile x86_fp80 %31, x86_fp80* %z, align 16, !tbaa !4
  %32 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %33 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %34 = call x86_fp80 @__polevll(x86_fp80 %33, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @R, i64 0, i64 0), i32 3) nounwind optsize
  %35 = fmul x86_fp80 %32, %34
  %36 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %37 = call x86_fp80 @__p1evll(x86_fp80 %36, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @S, i64 0, i64 0), i32 3) nounwind optsize
  %38 = fdiv x86_fp80 %35, %37
  %39 = fmul x86_fp80 %30, %38
  br label %55

; <label>:40                                      ; preds = %14
  br i1 %18, label %41, label %44

; <label>:41                                      ; preds = %40
  %42 = add nsw i32 %16, -1
  store i32 %42, i32* %e, align 4, !tbaa !6
  %43 = call x86_fp80 @ldexpl(x86_fp80 %15, i32 1) nounwind optsize
  br label %44

; <label>:44                                      ; preds = %41, %40
  %.02.in = phi x86_fp80 [ %43, %41 ], [ %15, %40 ]
  %.02 = fadd x86_fp80 %.02.in, 0xKBFFF8000000000000000
  %45 = fmul x86_fp80 %.02, %.02
  store volatile x86_fp80 %45, x86_fp80* %z, align 16, !tbaa !4
  %46 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %47 = call x86_fp80 @__polevll(x86_fp80 %.02, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @P415, i64 0, i64 0), i32 6) nounwind optsize
  %48 = fmul x86_fp80 %46, %47
  %49 = call x86_fp80 @__p1evll(x86_fp80 %.02, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @Q416, i64 0, i64 0), i32 7) nounwind optsize
  %50 = fdiv x86_fp80 %48, %49
  %51 = fmul x86_fp80 %.02, %50
  %52 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %53 = call x86_fp80 @ldexpl(x86_fp80 %52, i32 -1) nounwind optsize
  %54 = fsub x86_fp80 %51, %53
  br label %55

; <label>:55                                      ; preds = %44, %28
  %y.1 = phi x86_fp80 [ %39, %28 ], [ %54, %44 ]
  %.1 = phi x86_fp80 [ %30, %28 ], [ %.02, %44 ]
  %56 = fmul x86_fp80 %y.1, 0xKBFFB86909D5B235E39AB
  store volatile x86_fp80 %56, x86_fp80* %z, align 16, !tbaa !4
  %57 = fmul x86_fp80 %.1, 0xKBFFB86909D5B235E39AB
  %58 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %59 = fadd x86_fp80 %58, %57
  store volatile x86_fp80 %59, x86_fp80* %z, align 16, !tbaa !4
  %60 = load i32* %e, align 4, !tbaa !6
  %61 = sitofp i32 %60 to x86_fp80
  %62 = fmul x86_fp80 %61, 0xKBFF8BBECAF6086010CEE
  %63 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %64 = fadd x86_fp80 %63, %62
  store volatile x86_fp80 %64, x86_fp80* %z, align 16, !tbaa !4
  %65 = fmul x86_fp80 %y.1, 0xK3FFE8000000000000000
  %66 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %67 = fadd x86_fp80 %66, %65
  store volatile x86_fp80 %67, x86_fp80* %z, align 16, !tbaa !4
  %68 = fmul x86_fp80 %.1, 0xK3FFE8000000000000000
  %69 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %70 = fadd x86_fp80 %69, %68
  store volatile x86_fp80 %70, x86_fp80* %z, align 16, !tbaa !4
  %71 = load i32* %e, align 4, !tbaa !6
  %72 = sitofp i32 %71 to x86_fp80
  %73 = fmul x86_fp80 %72, 0xK3FFDA000000000000000
  %74 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %75 = fadd x86_fp80 %74, %73
  store volatile x86_fp80 %75, x86_fp80* %z, align 16, !tbaa !4
  %76 = load volatile x86_fp80* %z, align 16, !tbaa !4
  br label %77

; <label>:77                                      ; preds = %55, %12, %10, %8, %0
  %.0 = phi x86_fp80 [ %9, %8 ], [ %11, %10 ], [ %76, %55 ], [ %x, %0 ], [ 0xK7FFF8000000000000000, %12 ]
  ret x86_fp80 %.0
}

define double @log10(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = icmp slt i32 %3, 1048576
  br i1 %5, label %6, label %20

; <label>:6                                       ; preds = %0
  %7 = and i32 %3, 2147483647
  %8 = or i32 %7, %4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %86, label %10

; <label>:10                                      ; preds = %6
  %11 = icmp slt i32 %3, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %10
  %13 = fsub double %x, %x
  %14 = fdiv double %13, 0.000000e+00
  br label %86

; <label>:15                                      ; preds = %10
  %16 = fmul double %x, 0x4350000000000000
  %17 = bitcast double %16 to i64
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  br label %20

; <label>:20                                      ; preds = %15, %0
  %k.0 = phi i32 [ -1077, %15 ], [ -1023, %0 ]
  %hx.0 = phi i32 [ %19, %15 ], [ %3, %0 ]
  %.04 = phi double [ %16, %15 ], [ %x, %0 ]
  %21 = icmp sgt i32 %hx.0, 2146435071
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %20
  %23 = fadd double %.04, %.04
  br label %86

; <label>:24                                      ; preds = %20
  %25 = icmp eq i32 %hx.0, 1072693248
  %26 = icmp eq i32 %4, 0
  %or.cond = and i1 %25, %26
  br i1 %or.cond, label %86, label %27

; <label>:27                                      ; preds = %24
  %28 = ashr i32 %hx.0, 20
  %29 = and i32 %hx.0, 1048575
  %30 = add nsw i32 %29, 614244
  %31 = and i32 %30, 1048576
  %32 = bitcast double %.04 to i64
  %33 = and i64 %32, 4294967295
  %34 = or i32 %31, %29
  %35 = xor i32 %34, 1072693248
  %36 = zext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 32
  %38 = or i64 %37, %33
  %39 = bitcast i64 %38 to double
  %40 = lshr exact i32 %31, 20
  %41 = add i32 %k.0, %28
  %42 = add i32 %41, %40
  %43 = sitofp i32 %42 to double
  %44 = fadd double %39, -1.000000e+00
  %45 = fmul double %44, 5.000000e-01
  %46 = fmul double %45, %44
  %47 = fadd double %44, 2.000000e+00
  %48 = fdiv double %44, %47
  %49 = fmul double %48, %48
  %50 = fmul double %49, %49
  %51 = fmul double %50, 0x3FC39A09D078C69F
  %52 = fadd double %51, 0x3FCC71C51D8E78AF
  %53 = fmul double %50, %52
  %54 = fadd double %53, 0x3FD999999997FA04
  %55 = fmul double %50, %54
  %56 = fmul double %50, 0x3FC2F112DF3E5244
  %57 = fadd double %56, 0x3FC7466496CB03DE
  %58 = fmul double %50, %57
  %59 = fadd double %58, 0x3FD2492494229359
  %60 = fmul double %50, %59
  %61 = fadd double %60, 0x3FE5555555555593
  %62 = fmul double %49, %61
  %63 = fadd double %62, %55
  %64 = fadd double %46, %63
  %65 = fmul double %48, %64
  %66 = fsub double %44, %46
  %67 = bitcast double %66 to i64
  %68 = and i64 %67, -4294967296
  %69 = bitcast i64 %68 to double
  %70 = fsub double %44, %69
  %71 = fsub double %70, %46
  %72 = fadd double %71, %65
  %73 = fmul double %69, 0x3FDBCB7B15200000
  %74 = fmul double %43, 0x3FD34413509F6000
  %75 = fmul double %43, 0x3D59FEF311F12B36
  %76 = fadd double %72, %69
  %77 = fmul double %76, 0x3DBB9438CA9AADD5
  %78 = fadd double %75, %77
  %79 = fmul double %72, 0x3FDBCB7B15200000
  %80 = fadd double %78, %79
  %81 = fadd double %74, %73
  %82 = fsub double %74, %81
  %83 = fadd double %82, %73
  %84 = fadd double %80, %83
  %85 = fadd double %84, %81
  br label %86

; <label>:86                                      ; preds = %27, %24, %22, %12, %6
  %.0 = phi double [ %14, %12 ], [ %23, %22 ], [ %85, %27 ], [ 0xFFF0000000000000, %6 ], [ 0.000000e+00, %24 ]
  ret double %.0
}

define float @log1pf(float %x) nounwind uwtable optsize {
  %__v = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp slt i32 %1, 1054086096
  br i1 %3, label %4, label %24

; <label>:4                                       ; preds = %0
  %5 = icmp ugt i32 %2, 1065353215
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %4
  %7 = fcmp oeq float %x, -1.000000e+00
  br i1 %7, label %128, label %8

; <label>:8                                       ; preds = %6
  %9 = fsub float %x, %x
  %10 = fdiv float %9, %9
  br label %128

; <label>:11                                      ; preds = %4
  %12 = icmp ult i32 %2, 939524096
  br i1 %12, label %13, label %21

; <label>:13                                      ; preds = %11
  %14 = fadd float %x, 0x4180000000000000
  %15 = fcmp ogt float %14, 0.000000e+00
  %16 = icmp ult i32 %2, 864026624
  %or.cond = and i1 %15, %16
  br i1 %or.cond, label %128, label %17

; <label>:17                                      ; preds = %13
  %18 = fmul float %x, %x
  %19 = fmul float %18, 5.000000e-01
  %20 = fsub float %x, %19
  br label %128

; <label>:21                                      ; preds = %11
  %.off = add i32 %1, 1097468390
  %22 = icmp ugt i32 %.off, 1097468390
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %21
  br label %24

; <label>:24                                      ; preds = %23, %21, %0
  %k.0 = phi i32 [ 0, %23 ], [ 1, %21 ], [ 1, %0 ]
  %25 = icmp sgt i32 %1, 2139095039
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %24
  %27 = fadd float %x, %x
  br label %128

; <label>:28                                      ; preds = %24
  %29 = icmp eq i32 %k.0, 0
  br i1 %29, label %.thread, label %32

.thread:                                          ; preds = %28
  %30 = fmul float %x, 5.000000e-01
  %31 = fmul float %30, %x
  br label %93

; <label>:32                                      ; preds = %28
  %33 = icmp slt i32 %1, 1509949440
  br i1 %33, label %34, label %50

; <label>:34                                      ; preds = %32
  %35 = fadd float %x, 1.000000e+00
  store volatile float %35, float* %__v, align 4, !tbaa !2
  %36 = load volatile float* %__v, align 4, !tbaa !2
  %37 = bitcast float %36 to i32
  %38 = ashr i32 %37, 23
  %39 = add nsw i32 %38, -127
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %44

; <label>:41                                      ; preds = %34
  %42 = fsub float %36, %x
  %43 = fsub float 1.000000e+00, %42
  br label %47

; <label>:44                                      ; preds = %34
  %45 = fadd float %36, -1.000000e+00
  %46 = fsub float %x, %45
  br label %47

; <label>:47                                      ; preds = %44, %41
  %48 = phi float [ %43, %41 ], [ %46, %44 ]
  %49 = fdiv float %48, %36
  br label %53

; <label>:50                                      ; preds = %32
  %51 = ashr i32 %1, 23
  %52 = add nsw i32 %51, -127
  br label %53

; <label>:53                                      ; preds = %50, %47
  %c.0 = phi float [ %49, %47 ], [ 0.000000e+00, %50 ]
  %k.1 = phi i32 [ %39, %47 ], [ %52, %50 ]
  %hu.1 = phi i32 [ %37, %47 ], [ %1, %50 ]
  %54 = and i32 %hu.1, 8388607
  %55 = icmp ult i32 %54, 3474676
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %53
  %57 = or i32 %54, 1065353216
  br label %63

; <label>:58                                      ; preds = %53
  %59 = add nsw i32 %k.1, 1
  %60 = or i32 %54, 1056964608
  %61 = sub nsw i32 8388608, %54
  %62 = lshr i32 %61, 2
  br label %63

; <label>:63                                      ; preds = %58, %56
  %u.0.in = phi i32 [ %57, %56 ], [ %60, %58 ]
  %k.2 = phi i32 [ %k.1, %56 ], [ %59, %58 ]
  %hu.2 = phi i32 [ %54, %56 ], [ %62, %58 ]
  %u.0 = bitcast i32 %u.0.in to float
  %64 = fadd float %u.0, -1.000000e+00
  %65 = fmul float %64, 5.000000e-01
  %66 = fmul float %65, %64
  %67 = icmp eq i32 %hu.2, 0
  br i1 %67, label %68, label %93

; <label>:68                                      ; preds = %63
  %69 = fcmp oeq float %64, 0.000000e+00
  br i1 %69, label %70, label %78

; <label>:70                                      ; preds = %68
  %71 = icmp eq i32 %k.2, 0
  br i1 %71, label %128, label %72

; <label>:72                                      ; preds = %70
  %73 = sitofp i32 %k.2 to float
  %74 = fmul float %73, 0x3EE2FEFA20000000
  %75 = fadd float %c.0, %74
  %76 = fmul float %73, 0x3FE62E3000000000
  %77 = fadd float %76, %75
  br label %128

; <label>:78                                      ; preds = %68
  %79 = fmul float %64, 0x3FE5555560000000
  %80 = fsub float 1.000000e+00, %79
  %81 = fmul float %66, %80
  %82 = icmp eq i32 %k.2, 0
  br i1 %82, label %83, label %85

; <label>:83                                      ; preds = %78
  %84 = fsub float %64, %81
  br label %128

; <label>:85                                      ; preds = %78
  %86 = sitofp i32 %k.2 to float
  %87 = fmul float %86, 0x3FE62E3000000000
  %88 = fmul float %86, 0x3EE2FEFA20000000
  %89 = fadd float %88, %c.0
  %90 = fsub float %81, %89
  %91 = fsub float %90, %64
  %92 = fsub float %87, %91
  br label %128

; <label>:93                                      ; preds = %63, %.thread
  %94 = phi float [ %31, %.thread ], [ %66, %63 ]
  %k.310 = phi i32 [ 0, %.thread ], [ %k.2, %63 ]
  %f.19 = phi float [ %x, %.thread ], [ %64, %63 ]
  %c.18 = phi float [ undef, %.thread ], [ %c.0, %63 ]
  %95 = fadd float %f.19, 2.000000e+00
  %96 = fdiv float %f.19, %95
  %97 = fmul float %96, %96
  %98 = fmul float %97, 0x3FC2F112E0000000
  %99 = fadd float %98, 0x3FC39A09E0000000
  %100 = fmul float %97, %99
  %101 = fadd float %100, 0x3FC74664A0000000
  %102 = fmul float %97, %101
  %103 = fadd float %102, 0x3FCC71C520000000
  %104 = fmul float %97, %103
  %105 = fadd float %104, 0x3FD24924A0000000
  %106 = fmul float %97, %105
  %107 = fadd float %106, 0x3FD99999A0000000
  %108 = fmul float %97, %107
  %109 = fadd float %108, 0x3FE5555560000000
  %110 = fmul float %97, %109
  %111 = icmp eq i32 %k.310, 0
  br i1 %111, label %112, label %117

; <label>:112                                     ; preds = %93
  %113 = fadd float %94, %110
  %114 = fmul float %96, %113
  %115 = fsub float %94, %114
  %116 = fsub float %f.19, %115
  br label %128

; <label>:117                                     ; preds = %93
  %118 = sitofp i32 %k.310 to float
  %119 = fmul float %118, 0x3FE62E3000000000
  %120 = fadd float %94, %110
  %121 = fmul float %96, %120
  %122 = fmul float %118, 0x3EE2FEFA20000000
  %123 = fadd float %122, %c.18
  %124 = fadd float %121, %123
  %125 = fsub float %94, %124
  %126 = fsub float %125, %f.19
  %127 = fsub float %119, %126
  br label %128

; <label>:128                                     ; preds = %117, %112, %85, %83, %72, %70, %26, %17, %13, %8, %6
  %.0 = phi float [ %10, %8 ], [ %20, %17 ], [ %27, %26 ], [ %77, %72 ], [ %84, %83 ], [ %92, %85 ], [ %116, %112 ], [ %127, %117 ], [ 0xFFF0000000000000, %6 ], [ %x, %13 ], [ 0.000000e+00, %70 ]
  ret float %.0
}

define x86_fp80 @log1pl(x86_fp80 %xm1) nounwind uwtable optsize {
  %e = alloca i32, align 4
  %1 = call i32 @__fpclassifyl(x86_fp80 %xm1) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %3 = fcmp oeq x86_fp80 %xm1, 0xK7FFF8000000000000000
  %or.cond = or i1 %2, %3
  %4 = fcmp oeq x86_fp80 %xm1, 0xK00000000000000000000
  %or.cond2 = or i1 %or.cond, %4
  br i1 %or.cond2, label %64, label %5

; <label>:5                                       ; preds = %0
  %6 = fadd x86_fp80 %xm1, 0xK3FFF8000000000000000
  %7 = fcmp ugt x86_fp80 %6, 0xK00000000000000000000
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %5
  %9 = fcmp oeq x86_fp80 %6, 0xK00000000000000000000
  %. = select i1 %9, x86_fp80 0xKFFFF8000000000000000, x86_fp80 0xK7FFF4000000000000000
  br label %64

; <label>:10                                      ; preds = %5
  %11 = call x86_fp80 @frexpl(x86_fp80 %6, i32* %e) nounwind optsize
  %12 = load i32* %e, align 4, !tbaa !6
  %.off = add i32 %12, 2
  %13 = icmp ugt i32 %.off, 4
  %14 = fcmp olt x86_fp80 %11, 0xK3FFEB504F333F9DE6484
  br i1 %13, label %15, label %37

; <label>:15                                      ; preds = %10
  br i1 %14, label %16, label %19

; <label>:16                                      ; preds = %15
  %17 = add nsw i32 %12, -1
  store i32 %17, i32* %e, align 4, !tbaa !6
  %18 = fadd x86_fp80 %11, 0xKBFFE8000000000000000
  br label %22

; <label>:19                                      ; preds = %15
  %20 = fadd x86_fp80 %11, 0xKBFFE8000000000000000
  %21 = fadd x86_fp80 %20, 0xKBFFE8000000000000000
  br label %22

; <label>:22                                      ; preds = %19, %16
  %y.0.in.in = phi x86_fp80 [ %18, %16 ], [ %11, %19 ]
  %z.0 = phi x86_fp80 [ %18, %16 ], [ %21, %19 ]
  %y.0.in = fmul x86_fp80 %y.0.in.in, 0xK3FFE8000000000000000
  %y.0 = fadd x86_fp80 %y.0.in, 0xK3FFE8000000000000000
  %23 = fdiv x86_fp80 %z.0, %y.0
  %24 = fmul x86_fp80 %23, %23
  %25 = call x86_fp80 @__polevll(x86_fp80 %24, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @R420, i64 0, i64 0), i32 3) nounwind optsize
  %26 = fmul x86_fp80 %24, %25
  %27 = call x86_fp80 @__p1evll(x86_fp80 %24, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @S419, i64 0, i64 0), i32 3) nounwind optsize
  %28 = fdiv x86_fp80 %26, %27
  %29 = fmul x86_fp80 %23, %28
  %30 = load i32* %e, align 4, !tbaa !6
  %31 = sitofp i32 %30 to x86_fp80
  %32 = fmul x86_fp80 %31, 0xK3FEBBFBE8E7BCD5E4F1E
  %33 = fadd x86_fp80 %29, %32
  %34 = fadd x86_fp80 %33, %23
  %35 = fmul x86_fp80 %31, 0xK3FFEB172000000000000
  %36 = fadd x86_fp80 %34, %35
  br label %64

; <label>:37                                      ; preds = %10
  br i1 %14, label %38, label %44

; <label>:38                                      ; preds = %37
  %39 = add nsw i32 %12, -1
  store i32 %39, i32* %e, align 4, !tbaa !6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %48, label %41

; <label>:41                                      ; preds = %38
  %42 = fmul x86_fp80 %11, 0xK40008000000000000000
  %43 = fadd x86_fp80 %42, 0xKBFFF8000000000000000
  br label %48

; <label>:44                                      ; preds = %37
  %45 = icmp eq i32 %12, 0
  br i1 %45, label %48, label %46

; <label>:46                                      ; preds = %44
  %47 = fadd x86_fp80 %11, 0xKBFFF8000000000000000
  br label %48

; <label>:48                                      ; preds = %46, %44, %41, %38
  %x.0 = phi x86_fp80 [ %43, %41 ], [ %47, %46 ], [ %xm1, %38 ], [ %xm1, %44 ]
  %49 = fmul x86_fp80 %x.0, %x.0
  %50 = call x86_fp80 @__polevll(x86_fp80 %x.0, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @P421, i64 0, i64 0), i32 6) nounwind optsize
  %51 = fmul x86_fp80 %49, %50
  %52 = call x86_fp80 @__p1evll(x86_fp80 %x.0, x86_fp80* getelementptr inbounds ([6 x x86_fp80]* @Q422, i64 0, i64 0), i32 6) nounwind optsize
  %53 = fdiv x86_fp80 %51, %52
  %54 = fmul x86_fp80 %x.0, %53
  %55 = load i32* %e, align 4, !tbaa !6
  %56 = sitofp i32 %55 to x86_fp80
  %57 = fmul x86_fp80 %56, 0xK3FEBBFBE8E7BCD5E4F1E
  %58 = fadd x86_fp80 %54, %57
  %59 = fmul x86_fp80 %49, 0xK3FFE8000000000000000
  %60 = fsub x86_fp80 %58, %59
  %61 = fadd x86_fp80 %60, %x.0
  %62 = fmul x86_fp80 %56, 0xK3FFEB172000000000000
  %63 = fadd x86_fp80 %61, %62
  br label %64

; <label>:64                                      ; preds = %48, %22, %8, %0
  %.0 = phi x86_fp80 [ %36, %22 ], [ %63, %48 ], [ %xm1, %0 ], [ %., %8 ]
  ret x86_fp80 %.0
}

define double @log1p(double %x) nounwind uwtable optsize {
  %__v = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp slt i32 %3, 1071284858
  br i1 %5, label %6, label %26

; <label>:6                                       ; preds = %0
  %7 = icmp ugt i32 %4, 1072693247
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %6
  %9 = fcmp oeq double %x, -1.000000e+00
  br i1 %9, label %142, label %10

; <label>:10                                      ; preds = %8
  %11 = fsub double %x, %x
  %12 = fdiv double %11, %11
  br label %142

; <label>:13                                      ; preds = %6
  %14 = icmp ult i32 %4, 1042284544
  br i1 %14, label %15, label %23

; <label>:15                                      ; preds = %13
  %16 = fadd double %x, 0x4350000000000000
  %17 = fcmp ogt double %16, 0.000000e+00
  %18 = icmp ult i32 %4, 1016070144
  %or.cond = and i1 %17, %18
  br i1 %or.cond, label %142, label %19

; <label>:19                                      ; preds = %15
  %20 = fmul double %x, %x
  %21 = fmul double %20, 5.000000e-01
  %22 = fsub double %x, %21
  br label %142

; <label>:23                                      ; preds = %13
  %.off = add i32 %3, 1076707643
  %24 = icmp ugt i32 %.off, 1076707643
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %23
  br label %26

; <label>:26                                      ; preds = %25, %23, %0
  %k.0 = phi i32 [ 0, %25 ], [ 1, %23 ], [ 1, %0 ]
  %27 = icmp sgt i32 %3, 2146435071
  br i1 %27, label %28, label %30

; <label>:28                                      ; preds = %26
  %29 = fadd double %x, %x
  br label %142

; <label>:30                                      ; preds = %26
  %31 = icmp eq i32 %k.0, 0
  br i1 %31, label %.thread, label %34

.thread:                                          ; preds = %30
  %32 = fmul double %x, 5.000000e-01
  %33 = fmul double %32, %x
  br label %107

; <label>:34                                      ; preds = %30
  %35 = icmp slt i32 %3, 1128267776
  br i1 %35, label %36, label %54

; <label>:36                                      ; preds = %34
  %37 = fadd double %x, 1.000000e+00
  store volatile double %37, double* %__v, align 8, !tbaa !3
  %38 = load volatile double* %__v, align 8, !tbaa !3
  %39 = bitcast double %38 to i64
  %40 = lshr i64 %39, 32
  %41 = trunc i64 %40 to i32
  %42 = ashr i32 %41, 20
  %43 = add nsw i32 %42, -1023
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %48

; <label>:45                                      ; preds = %36
  %46 = fsub double %38, %x
  %47 = fsub double 1.000000e+00, %46
  br label %51

; <label>:48                                      ; preds = %36
  %49 = fadd double %38, -1.000000e+00
  %50 = fsub double %x, %49
  br label %51

; <label>:51                                      ; preds = %48, %45
  %52 = phi double [ %47, %45 ], [ %50, %48 ]
  %53 = fdiv double %52, %38
  br label %57

; <label>:54                                      ; preds = %34
  %55 = ashr i32 %3, 20
  %56 = add nsw i32 %55, -1023
  br label %57

; <label>:57                                      ; preds = %54, %51
  %u.0 = phi double [ %38, %51 ], [ %x, %54 ]
  %c.0 = phi double [ %53, %51 ], [ 0.000000e+00, %54 ]
  %k.1 = phi i32 [ %43, %51 ], [ %56, %54 ]
  %hu.1 = phi i32 [ %41, %51 ], [ %3, %54 ]
  %58 = and i32 %hu.1, 1048575
  %59 = icmp ult i32 %58, 434334
  br i1 %59, label %60, label %67

; <label>:60                                      ; preds = %57
  %61 = bitcast double %u.0 to i64
  %62 = and i64 %61, 4294967295
  %63 = or i32 %58, 1072693248
  %64 = zext i32 %63 to i64
  %65 = shl nuw nsw i64 %64, 32
  %66 = or i64 %65, %62
  br label %77

; <label>:67                                      ; preds = %57
  %68 = add nsw i32 %k.1, 1
  %69 = bitcast double %u.0 to i64
  %70 = and i64 %69, 4294967295
  %71 = or i32 %58, 1071644672
  %72 = zext i32 %71 to i64
  %73 = shl nuw nsw i64 %72, 32
  %74 = or i64 %73, %70
  %75 = sub nsw i32 1048576, %58
  %76 = lshr i32 %75, 2
  br label %77

; <label>:77                                      ; preds = %67, %60
  %u.1.in = phi i64 [ %66, %60 ], [ %74, %67 ]
  %k.2 = phi i32 [ %k.1, %60 ], [ %68, %67 ]
  %hu.2 = phi i32 [ %58, %60 ], [ %76, %67 ]
  %u.1 = bitcast i64 %u.1.in to double
  %78 = fadd double %u.1, -1.000000e+00
  %79 = fmul double %78, 5.000000e-01
  %80 = fmul double %79, %78
  %81 = icmp eq i32 %hu.2, 0
  br i1 %81, label %82, label %107

; <label>:82                                      ; preds = %77
  %83 = fcmp oeq double %78, 0.000000e+00
  br i1 %83, label %84, label %92

; <label>:84                                      ; preds = %82
  %85 = icmp eq i32 %k.2, 0
  br i1 %85, label %142, label %86

; <label>:86                                      ; preds = %84
  %87 = sitofp i32 %k.2 to double
  %88 = fmul double %87, 0x3DEA39EF35793C76
  %89 = fadd double %c.0, %88
  %90 = fmul double %87, 0x3FE62E42FEE00000
  %91 = fadd double %90, %89
  br label %142

; <label>:92                                      ; preds = %82
  %93 = fmul double %78, 0x3FE5555555555555
  %94 = fsub double 1.000000e+00, %93
  %95 = fmul double %80, %94
  %96 = icmp eq i32 %k.2, 0
  br i1 %96, label %97, label %99

; <label>:97                                      ; preds = %92
  %98 = fsub double %78, %95
  br label %142

; <label>:99                                      ; preds = %92
  %100 = sitofp i32 %k.2 to double
  %101 = fmul double %100, 0x3FE62E42FEE00000
  %102 = fmul double %100, 0x3DEA39EF35793C76
  %103 = fadd double %102, %c.0
  %104 = fsub double %95, %103
  %105 = fsub double %104, %78
  %106 = fsub double %101, %105
  br label %142

; <label>:107                                     ; preds = %77, %.thread
  %108 = phi double [ %33, %.thread ], [ %80, %77 ]
  %k.314 = phi i32 [ 0, %.thread ], [ %k.2, %77 ]
  %f.113 = phi double [ %x, %.thread ], [ %78, %77 ]
  %c.112 = phi double [ undef, %.thread ], [ %c.0, %77 ]
  %109 = fadd double %f.113, 2.000000e+00
  %110 = fdiv double %f.113, %109
  %111 = fmul double %110, %110
  %112 = fmul double %111, 0x3FC2F112DF3E5244
  %113 = fadd double %112, 0x3FC39A09D078C69F
  %114 = fmul double %111, %113
  %115 = fadd double %114, 0x3FC7466496CB03DE
  %116 = fmul double %111, %115
  %117 = fadd double %116, 0x3FCC71C51D8E78AF
  %118 = fmul double %111, %117
  %119 = fadd double %118, 0x3FD2492494229359
  %120 = fmul double %111, %119
  %121 = fadd double %120, 0x3FD999999997FA04
  %122 = fmul double %111, %121
  %123 = fadd double %122, 0x3FE5555555555593
  %124 = fmul double %111, %123
  %125 = icmp eq i32 %k.314, 0
  br i1 %125, label %126, label %131

; <label>:126                                     ; preds = %107
  %127 = fadd double %108, %124
  %128 = fmul double %110, %127
  %129 = fsub double %108, %128
  %130 = fsub double %f.113, %129
  br label %142

; <label>:131                                     ; preds = %107
  %132 = sitofp i32 %k.314 to double
  %133 = fmul double %132, 0x3FE62E42FEE00000
  %134 = fadd double %108, %124
  %135 = fmul double %110, %134
  %136 = fmul double %132, 0x3DEA39EF35793C76
  %137 = fadd double %136, %c.112
  %138 = fadd double %135, %137
  %139 = fsub double %108, %138
  %140 = fsub double %139, %f.113
  %141 = fsub double %133, %140
  br label %142

; <label>:142                                     ; preds = %131, %126, %99, %97, %86, %84, %28, %19, %15, %10, %8
  %.0 = phi double [ %12, %10 ], [ %22, %19 ], [ %29, %28 ], [ %91, %86 ], [ %98, %97 ], [ %106, %99 ], [ %130, %126 ], [ %141, %131 ], [ 0xFFF0000000000000, %8 ], [ %x, %15 ], [ 0.000000e+00, %84 ]
  ret double %.0
}

define float @log2f(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = icmp slt i32 %1, 8388608
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %0
  %4 = and i32 %1, 2147483647
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %62, label %6

; <label>:6                                       ; preds = %3
  %7 = icmp slt i32 %1, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fsub float %x, %x
  %10 = fdiv float %9, 0.000000e+00
  br label %62

; <label>:11                                      ; preds = %6
  %12 = fmul float %x, 0x4180000000000000
  %13 = bitcast float %12 to i32
  br label %14

; <label>:14                                      ; preds = %11, %0
  %k.0 = phi i32 [ -152, %11 ], [ -127, %0 ]
  %hx.0 = phi i32 [ %13, %11 ], [ %1, %0 ]
  %.05 = phi float [ %12, %11 ], [ %x, %0 ]
  %15 = icmp sgt i32 %hx.0, 2139095039
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %14
  %17 = fadd float %.05, %.05
  br label %62

; <label>:18                                      ; preds = %14
  %19 = icmp eq i32 %hx.0, 1065353216
  br i1 %19, label %62, label %20

; <label>:20                                      ; preds = %18
  %21 = ashr i32 %hx.0, 23
  %22 = and i32 %hx.0, 8388607
  %23 = add nsw i32 %22, 4913933
  %24 = and i32 %23, 8388608
  %25 = or i32 %24, %22
  %26 = xor i32 %25, 1065353216
  %27 = bitcast i32 %26 to float
  %28 = lshr exact i32 %24, 23
  %29 = add i32 %k.0, %21
  %30 = add i32 %29, %28
  %31 = sitofp i32 %30 to float
  %32 = fadd float %27, -1.000000e+00
  %33 = fmul float %32, 5.000000e-01
  %34 = fmul float %33, %32
  %35 = fadd float %32, 2.000000e+00
  %36 = fdiv float %32, %35
  %37 = fmul float %36, %36
  %38 = fmul float %37, %37
  %39 = fmul float %38, 0x3FCF13C4C0000000
  %40 = fadd float %39, 0x3FD999C260000000
  %41 = fmul float %38, %40
  %42 = fmul float %38, 0x3FD23D3DC0000000
  %43 = fadd float %42, 0x3FE5555540000000
  %44 = fmul float %37, %43
  %45 = fadd float %44, %41
  %46 = fadd float %34, %45
  %47 = fmul float %36, %46
  %48 = fsub float %32, %34
  %49 = bitcast float %48 to i32
  %50 = and i32 %49, -4096
  %51 = bitcast i32 %50 to float
  %52 = fsub float %32, %51
  %53 = fsub float %52, %34
  %54 = fadd float %53, %47
  %55 = fadd float %54, %51
  %56 = fmul float %55, 0xBF27135A80000000
  %57 = fmul float %54, 0x3FF7160000000000
  %58 = fadd float %56, %57
  %59 = fmul float %51, 0x3FF7160000000000
  %60 = fadd float %58, %59
  %61 = fadd float %60, %31
  br label %62

; <label>:62                                      ; preds = %20, %18, %16, %8, %3
  %.0 = phi float [ %10, %8 ], [ %17, %16 ], [ %61, %20 ], [ 0xFFF0000000000000, %3 ], [ 0.000000e+00, %18 ]
  ret float %.0
}

define x86_fp80 @log2l(x86_fp80 %x) nounwind uwtable optsize {
  %z = alloca x86_fp80, align 16
  %e = alloca i32, align 4
  %1 = call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %3 = fcmp oeq x86_fp80 %x, 0xK7FFF8000000000000000
  %or.cond = or i1 %2, %3
  br i1 %or.cond, label %63, label %4

; <label>:4                                       ; preds = %0
  %5 = fcmp ugt x86_fp80 %x, 0xK00000000000000000000
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %4
  %7 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  %. = select i1 %7, x86_fp80 0xKFFFF8000000000000000, x86_fp80 0xK7FFF4000000000000000
  br label %63

; <label>:8                                       ; preds = %4
  %9 = call x86_fp80 @frexpl(x86_fp80 %x, i32* %e) nounwind optsize
  %10 = load i32* %e, align 4, !tbaa !6
  %.off = add i32 %10, 2
  %11 = icmp ugt i32 %.off, 4
  %12 = fcmp olt x86_fp80 %9, 0xK3FFEB504F333F9DE6484
  br i1 %11, label %13, label %34

; <label>:13                                      ; preds = %8
  br i1 %12, label %14, label %18

; <label>:14                                      ; preds = %13
  %15 = add nsw i32 %10, -1
  store i32 %15, i32* %e, align 4, !tbaa !6
  %16 = fadd x86_fp80 %9, 0xKBFFE8000000000000000
  store volatile x86_fp80 %16, x86_fp80* %z, align 16, !tbaa !4
  %17 = load volatile x86_fp80* %z, align 16, !tbaa !4
  br label %22

; <label>:18                                      ; preds = %13
  %19 = fadd x86_fp80 %9, 0xKBFFE8000000000000000
  store volatile x86_fp80 %19, x86_fp80* %z, align 16, !tbaa !4
  %20 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %21 = fadd x86_fp80 %20, 0xKBFFE8000000000000000
  store volatile x86_fp80 %21, x86_fp80* %z, align 16, !tbaa !4
  br label %22

; <label>:22                                      ; preds = %18, %14
  %y.0.in.in = phi x86_fp80 [ %17, %14 ], [ %9, %18 ]
  %y.0.in = fmul x86_fp80 %y.0.in.in, 0xK3FFE8000000000000000
  %y.0 = fadd x86_fp80 %y.0.in, 0xK3FFE8000000000000000
  %23 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %24 = fdiv x86_fp80 %23, %y.0
  %25 = fmul x86_fp80 %24, %24
  store volatile x86_fp80 %25, x86_fp80* %z, align 16, !tbaa !4
  %26 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %27 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %28 = call x86_fp80 @__polevll(x86_fp80 %27, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @R428, i64 0, i64 0), i32 3) nounwind optsize
  %29 = fmul x86_fp80 %26, %28
  %30 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %31 = call x86_fp80 @__p1evll(x86_fp80 %30, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @S427, i64 0, i64 0), i32 3) nounwind optsize
  %32 = fdiv x86_fp80 %29, %31
  %33 = fmul x86_fp80 %24, %32
  br label %49

; <label>:34                                      ; preds = %8
  br i1 %12, label %35, label %38

; <label>:35                                      ; preds = %34
  %36 = add nsw i32 %10, -1
  store i32 %36, i32* %e, align 4, !tbaa !6
  %37 = call x86_fp80 @ldexpl(x86_fp80 %9, i32 1) nounwind optsize
  br label %38

; <label>:38                                      ; preds = %35, %34
  %.02.in = phi x86_fp80 [ %37, %35 ], [ %9, %34 ]
  %.02 = fadd x86_fp80 %.02.in, 0xKBFFF8000000000000000
  %39 = fmul x86_fp80 %.02, %.02
  store volatile x86_fp80 %39, x86_fp80* %z, align 16, !tbaa !4
  %40 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %41 = call x86_fp80 @__polevll(x86_fp80 %.02, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @P429, i64 0, i64 0), i32 6) nounwind optsize
  %42 = fmul x86_fp80 %40, %41
  %43 = call x86_fp80 @__p1evll(x86_fp80 %.02, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @Q430, i64 0, i64 0), i32 7) nounwind optsize
  %44 = fdiv x86_fp80 %42, %43
  %45 = fmul x86_fp80 %.02, %44
  %46 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %47 = call x86_fp80 @ldexpl(x86_fp80 %46, i32 -1) nounwind optsize
  %48 = fsub x86_fp80 %45, %47
  br label %49

; <label>:49                                      ; preds = %38, %22
  %y.1 = phi x86_fp80 [ %33, %22 ], [ %48, %38 ]
  %.1 = phi x86_fp80 [ %24, %22 ], [ %.02, %38 ]
  %50 = fmul x86_fp80 %y.1, 0xK3FFDE2A8ECA5705FC2EF
  store volatile x86_fp80 %50, x86_fp80* %z, align 16, !tbaa !4
  %51 = fmul x86_fp80 %.1, 0xK3FFDE2A8ECA5705FC2EF
  %52 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %53 = fadd x86_fp80 %52, %51
  store volatile x86_fp80 %53, x86_fp80* %z, align 16, !tbaa !4
  %54 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %55 = fadd x86_fp80 %54, %y.1
  store volatile x86_fp80 %55, x86_fp80* %z, align 16, !tbaa !4
  %56 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %57 = fadd x86_fp80 %56, %.1
  store volatile x86_fp80 %57, x86_fp80* %z, align 16, !tbaa !4
  %58 = load i32* %e, align 4, !tbaa !6
  %59 = sitofp i32 %58 to x86_fp80
  %60 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %61 = fadd x86_fp80 %60, %59
  store volatile x86_fp80 %61, x86_fp80* %z, align 16, !tbaa !4
  %62 = load volatile x86_fp80* %z, align 16, !tbaa !4
  br label %63

; <label>:63                                      ; preds = %49, %6, %0
  %.0 = phi x86_fp80 [ %62, %49 ], [ %x, %0 ], [ %., %6 ]
  ret x86_fp80 %.0
}

define double @log2(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = icmp slt i32 %3, 1048576
  br i1 %5, label %6, label %20

; <label>:6                                       ; preds = %0
  %7 = and i32 %3, 2147483647
  %8 = or i32 %7, %4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %83, label %10

; <label>:10                                      ; preds = %6
  %11 = icmp slt i32 %3, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %10
  %13 = fsub double %x, %x
  %14 = fdiv double %13, 0.000000e+00
  br label %83

; <label>:15                                      ; preds = %10
  %16 = fmul double %x, 0x4350000000000000
  %17 = bitcast double %16 to i64
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  br label %20

; <label>:20                                      ; preds = %15, %0
  %k.0 = phi i32 [ -1077, %15 ], [ -1023, %0 ]
  %hx.0 = phi i32 [ %19, %15 ], [ %3, %0 ]
  %.04 = phi double [ %16, %15 ], [ %x, %0 ]
  %21 = icmp sgt i32 %hx.0, 2146435071
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %20
  %23 = fadd double %.04, %.04
  br label %83

; <label>:24                                      ; preds = %20
  %25 = icmp eq i32 %hx.0, 1072693248
  %26 = icmp eq i32 %4, 0
  %or.cond = and i1 %25, %26
  br i1 %or.cond, label %83, label %27

; <label>:27                                      ; preds = %24
  %28 = ashr i32 %hx.0, 20
  %29 = and i32 %hx.0, 1048575
  %30 = add nsw i32 %29, 614244
  %31 = and i32 %30, 1048576
  %32 = bitcast double %.04 to i64
  %33 = and i64 %32, 4294967295
  %34 = or i32 %31, %29
  %35 = xor i32 %34, 1072693248
  %36 = zext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 32
  %38 = or i64 %37, %33
  %39 = bitcast i64 %38 to double
  %40 = lshr exact i32 %31, 20
  %41 = add i32 %k.0, %28
  %42 = add i32 %41, %40
  %43 = sitofp i32 %42 to double
  %44 = fadd double %39, -1.000000e+00
  %45 = fmul double %44, 5.000000e-01
  %46 = fmul double %45, %44
  %47 = fadd double %44, 2.000000e+00
  %48 = fdiv double %44, %47
  %49 = fmul double %48, %48
  %50 = fmul double %49, %49
  %51 = fmul double %50, 0x3FC39A09D078C69F
  %52 = fadd double %51, 0x3FCC71C51D8E78AF
  %53 = fmul double %50, %52
  %54 = fadd double %53, 0x3FD999999997FA04
  %55 = fmul double %50, %54
  %56 = fmul double %50, 0x3FC2F112DF3E5244
  %57 = fadd double %56, 0x3FC7466496CB03DE
  %58 = fmul double %50, %57
  %59 = fadd double %58, 0x3FD2492494229359
  %60 = fmul double %50, %59
  %61 = fadd double %60, 0x3FE5555555555593
  %62 = fmul double %49, %61
  %63 = fadd double %62, %55
  %64 = fadd double %46, %63
  %65 = fmul double %48, %64
  %66 = fsub double %44, %46
  %67 = bitcast double %66 to i64
  %68 = and i64 %67, -4294967296
  %69 = bitcast i64 %68 to double
  %70 = fsub double %44, %69
  %71 = fsub double %70, %46
  %72 = fadd double %71, %65
  %73 = fmul double %69, 0x3FF7154765200000
  %74 = fadd double %72, %69
  %75 = fmul double %74, 0x3DE705FC2EEFA200
  %76 = fmul double %72, 0x3FF7154765200000
  %77 = fadd double %75, %76
  %78 = fadd double %43, %73
  %79 = fsub double %43, %78
  %80 = fadd double %79, %73
  %81 = fadd double %77, %80
  %82 = fadd double %81, %78
  br label %83

; <label>:83                                      ; preds = %27, %24, %22, %12, %6
  %.0 = phi double [ %14, %12 ], [ %23, %22 ], [ %82, %27 ], [ 0xFFF0000000000000, %6 ], [ 0.000000e+00, %24 ]
  ret double %.0
}

define float @logbf(float %x) nounwind uwtable optsize {
  %1 = tail call i32 @ilogbf(float %x) nounwind optsize
  switch i32 %1, label %7 [
    i32 -2147483648, label %2
    i32 2147483647, label %5
  ]

; <label>:2                                       ; preds = %0
  %3 = tail call float @fabsf(float %x) nounwind optsize
  %4 = fdiv float -1.000000e+00, %3
  br label %9

; <label>:5                                       ; preds = %0
  %6 = fmul float %x, %x
  br label %9

; <label>:7                                       ; preds = %0
  %8 = sitofp i32 %1 to float
  br label %9

; <label>:9                                       ; preds = %7, %5, %2
  %.0 = phi float [ %4, %2 ], [ %6, %5 ], [ %8, %7 ]
  ret float %.0
}

define x86_fp80 @logbl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call i32 @ilogbl(x86_fp80 %x) nounwind optsize
  switch i32 %1, label %7 [
    i32 -2147483648, label %2
    i32 2147483647, label %5
  ]

; <label>:2                                       ; preds = %0
  %3 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %4 = fdiv x86_fp80 0xKBFFF8000000000000000, %3
  br label %9

; <label>:5                                       ; preds = %0
  %6 = fmul x86_fp80 %x, %x
  br label %9

; <label>:7                                       ; preds = %0
  %8 = sitofp i32 %1 to x86_fp80
  br label %9

; <label>:9                                       ; preds = %7, %5, %2
  %.0 = phi x86_fp80 [ %4, %2 ], [ %6, %5 ], [ %8, %7 ]
  ret x86_fp80 %.0
}

define double @logb(double %x) nounwind uwtable optsize {
  %1 = tail call i32 @ilogb(double %x) nounwind optsize
  switch i32 %1, label %7 [
    i32 -2147483648, label %2
    i32 2147483647, label %5
  ]

; <label>:2                                       ; preds = %0
  %3 = tail call double @fabs(double %x) nounwind optsize
  %4 = fdiv double -1.000000e+00, %3
  br label %9

; <label>:5                                       ; preds = %0
  %6 = fmul double %x, %x
  br label %9

; <label>:7                                       ; preds = %0
  %8 = sitofp i32 %1 to double
  br label %9

; <label>:9                                       ; preds = %7, %5, %2
  %.0 = phi double [ %4, %2 ], [ %6, %5 ], [ %8, %7 ]
  ret double %.0
}

define float @logf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = icmp slt i32 %1, 8388608
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %0
  %4 = and i32 %1, 2147483647
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %106, label %6

; <label>:6                                       ; preds = %3
  %7 = icmp slt i32 %1, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fsub float %x, %x
  %10 = fdiv float %9, 0.000000e+00
  br label %106

; <label>:11                                      ; preds = %6
  %12 = fmul float %x, 0x4180000000000000
  %13 = bitcast float %12 to i32
  br label %14

; <label>:14                                      ; preds = %11, %0
  %k.0 = phi i32 [ -152, %11 ], [ -127, %0 ]
  %ix.0 = phi i32 [ %13, %11 ], [ %1, %0 ]
  %.03 = phi float [ %12, %11 ], [ %x, %0 ]
  %15 = icmp sgt i32 %ix.0, 2139095039
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %14
  %17 = fadd float %.03, %.03
  br label %106

; <label>:18                                      ; preds = %14
  %19 = ashr i32 %ix.0, 23
  %20 = and i32 %ix.0, 8388607
  %21 = add nsw i32 %20, 4913952
  %22 = and i32 %21, 8388608
  %23 = or i32 %22, %20
  %24 = xor i32 %23, 1065353216
  %25 = bitcast i32 %24 to float
  %26 = lshr exact i32 %22, 23
  %27 = add i32 %k.0, %19
  %28 = add i32 %27, %26
  %29 = fadd float %25, -1.000000e+00
  %30 = add nsw i32 %ix.0, 32768
  %31 = and i32 %30, 8372224
  %32 = icmp ult i32 %31, 49152
  br i1 %32, label %33, label %57

; <label>:33                                      ; preds = %18
  %34 = fcmp oeq float %29, 0.000000e+00
  br i1 %34, label %35, label %42

; <label>:35                                      ; preds = %33
  %36 = icmp eq i32 %28, 0
  br i1 %36, label %106, label %37

; <label>:37                                      ; preds = %35
  %38 = sitofp i32 %28 to float
  %39 = fmul float %38, 0x3FE62E3000000000
  %40 = fmul float %38, 0x3EE2FEFA20000000
  %41 = fadd float %39, %40
  br label %106

; <label>:42                                      ; preds = %33
  %43 = fmul float %29, %29
  %44 = fmul float %29, 0x3FD5555560000000
  %45 = fsub float 5.000000e-01, %44
  %46 = fmul float %43, %45
  %47 = icmp eq i32 %28, 0
  br i1 %47, label %48, label %50

; <label>:48                                      ; preds = %42
  %49 = fsub float %29, %46
  br label %106

; <label>:50                                      ; preds = %42
  %51 = sitofp i32 %28 to float
  %52 = fmul float %51, 0x3FE62E3000000000
  %53 = fmul float %51, 0x3EE2FEFA20000000
  %54 = fsub float %46, %53
  %55 = fsub float %54, %29
  %56 = fsub float %52, %55
  br label %106

; <label>:57                                      ; preds = %18
  %58 = fadd float %29, 2.000000e+00
  %59 = fdiv float %29, %58
  %60 = sitofp i32 %28 to float
  %61 = fmul float %59, %59
  %62 = add nsw i32 %20, -3187664
  %63 = fmul float %61, %61
  %64 = sub nsw i32 3523208, %20
  %65 = fmul float %63, 0x3FCF13C4C0000000
  %66 = fadd float %65, 0x3FD999C260000000
  %67 = fmul float %63, %66
  %68 = fmul float %63, 0x3FD23D3DC0000000
  %69 = fadd float %68, 0x3FE5555540000000
  %70 = fmul float %61, %69
  %71 = or i32 %62, %64
  %72 = fadd float %70, %67
  %73 = icmp sgt i32 %71, 0
  br i1 %73, label %74, label %92

; <label>:74                                      ; preds = %57
  %75 = fmul float %29, 5.000000e-01
  %76 = fmul float %75, %29
  %77 = icmp eq i32 %28, 0
  br i1 %77, label %78, label %83

; <label>:78                                      ; preds = %74
  %79 = fadd float %76, %72
  %80 = fmul float %59, %79
  %81 = fsub float %76, %80
  %82 = fsub float %29, %81
  br label %106

; <label>:83                                      ; preds = %74
  %84 = fmul float %60, 0x3FE62E3000000000
  %85 = fadd float %76, %72
  %86 = fmul float %59, %85
  %87 = fmul float %60, 0x3EE2FEFA20000000
  %88 = fadd float %86, %87
  %89 = fsub float %76, %88
  %90 = fsub float %89, %29
  %91 = fsub float %84, %90
  br label %106

; <label>:92                                      ; preds = %57
  %93 = icmp eq i32 %28, 0
  br i1 %93, label %94, label %98

; <label>:94                                      ; preds = %92
  %95 = fsub float %29, %72
  %96 = fmul float %59, %95
  %97 = fsub float %29, %96
  br label %106

; <label>:98                                      ; preds = %92
  %99 = fmul float %60, 0x3FE62E3000000000
  %100 = fsub float %29, %72
  %101 = fmul float %59, %100
  %102 = fmul float %60, 0x3EE2FEFA20000000
  %103 = fsub float %101, %102
  %104 = fsub float %103, %29
  %105 = fsub float %99, %104
  br label %106

; <label>:106                                     ; preds = %98, %94, %83, %78, %50, %48, %37, %35, %16, %8, %3
  %.0 = phi float [ %10, %8 ], [ %17, %16 ], [ %41, %37 ], [ %49, %48 ], [ %56, %50 ], [ %82, %78 ], [ %91, %83 ], [ %97, %94 ], [ %105, %98 ], [ 0xFFF0000000000000, %3 ], [ 0.000000e+00, %35 ]
  ret float %.0
}

define x86_fp80 @logl(x86_fp80 %x) nounwind uwtable optsize {
  %e = alloca i32, align 4
  %1 = call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  %3 = fcmp oeq x86_fp80 %x, 0xK7FFF8000000000000000
  %or.cond = or i1 %2, %3
  br i1 %or.cond, label %57, label %4

; <label>:4                                       ; preds = %0
  %5 = fcmp ugt x86_fp80 %x, 0xK00000000000000000000
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %4
  %7 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  %. = select i1 %7, x86_fp80 0xKFFFF8000000000000000, x86_fp80 0xK7FFF4000000000000000
  br label %57

; <label>:8                                       ; preds = %4
  %9 = call x86_fp80 @frexpl(x86_fp80 %x, i32* %e) nounwind optsize
  %10 = load i32* %e, align 4, !tbaa !6
  %.off = add i32 %10, 2
  %11 = icmp ugt i32 %.off, 4
  %12 = fcmp olt x86_fp80 %9, 0xK3FFEB504F333F9DE6484
  br i1 %11, label %13, label %35

; <label>:13                                      ; preds = %8
  br i1 %12, label %14, label %17

; <label>:14                                      ; preds = %13
  %15 = add nsw i32 %10, -1
  store i32 %15, i32* %e, align 4, !tbaa !6
  %16 = fadd x86_fp80 %9, 0xKBFFE8000000000000000
  br label %20

; <label>:17                                      ; preds = %13
  %18 = fadd x86_fp80 %9, 0xKBFFE8000000000000000
  %19 = fadd x86_fp80 %18, 0xKBFFE8000000000000000
  br label %20

; <label>:20                                      ; preds = %17, %14
  %z.0 = phi x86_fp80 [ %16, %14 ], [ %19, %17 ]
  %y.0.in.in = phi x86_fp80 [ %16, %14 ], [ %9, %17 ]
  %y.0.in = fmul x86_fp80 %y.0.in.in, 0xK3FFE8000000000000000
  %y.0 = fadd x86_fp80 %y.0.in, 0xK3FFE8000000000000000
  %21 = fdiv x86_fp80 %z.0, %y.0
  %22 = fmul x86_fp80 %21, %21
  %23 = call x86_fp80 @__polevll(x86_fp80 %22, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @R434, i64 0, i64 0), i32 3) nounwind optsize
  %24 = fmul x86_fp80 %22, %23
  %25 = call x86_fp80 @__p1evll(x86_fp80 %22, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @S433, i64 0, i64 0), i32 3) nounwind optsize
  %26 = fdiv x86_fp80 %24, %25
  %27 = fmul x86_fp80 %21, %26
  %28 = load i32* %e, align 4, !tbaa !6
  %29 = sitofp i32 %28 to x86_fp80
  %30 = fmul x86_fp80 %29, 0xK3FEBBFBE8E7BCD5E4F1E
  %31 = fadd x86_fp80 %27, %30
  %32 = fadd x86_fp80 %31, %21
  %33 = fmul x86_fp80 %29, 0xK3FFEB172000000000000
  %34 = fadd x86_fp80 %32, %33
  br label %57

; <label>:35                                      ; preds = %8
  br i1 %12, label %36, label %39

; <label>:36                                      ; preds = %35
  %37 = add nsw i32 %10, -1
  store i32 %37, i32* %e, align 4, !tbaa !6
  %38 = call x86_fp80 @ldexpl(x86_fp80 %9, i32 1) nounwind optsize
  br label %39

; <label>:39                                      ; preds = %36, %35
  %.02.in = phi x86_fp80 [ %38, %36 ], [ %9, %35 ]
  %.02 = fadd x86_fp80 %.02.in, 0xKBFFF8000000000000000
  %40 = fmul x86_fp80 %.02, %.02
  %41 = call x86_fp80 @__polevll(x86_fp80 %.02, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @P435, i64 0, i64 0), i32 6) nounwind optsize
  %42 = fmul x86_fp80 %40, %41
  %43 = call x86_fp80 @__p1evll(x86_fp80 %.02, x86_fp80* getelementptr inbounds ([6 x x86_fp80]* @Q436, i64 0, i64 0), i32 6) nounwind optsize
  %44 = fdiv x86_fp80 %42, %43
  %45 = fmul x86_fp80 %.02, %44
  %46 = load i32* %e, align 4, !tbaa !6
  %47 = sitofp i32 %46 to x86_fp80
  %48 = fmul x86_fp80 %47, 0xK3FEBBFBE8E7BCD5E4F1E
  %49 = fadd x86_fp80 %45, %48
  %50 = call x86_fp80 @ldexpl(x86_fp80 %40, i32 -1) nounwind optsize
  %51 = fsub x86_fp80 %49, %50
  %52 = fadd x86_fp80 %51, %.02
  %53 = load i32* %e, align 4, !tbaa !6
  %54 = sitofp i32 %53 to x86_fp80
  %55 = fmul x86_fp80 %54, 0xK3FFEB172000000000000
  %56 = fadd x86_fp80 %52, %55
  br label %57

; <label>:57                                      ; preds = %39, %20, %6, %0
  %.0 = phi x86_fp80 [ %34, %20 ], [ %56, %39 ], [ %x, %0 ], [ %., %6 ]
  ret x86_fp80 %.0
}

define double @log(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = icmp slt i32 %3, 1048576
  br i1 %4, label %5, label %20

; <label>:5                                       ; preds = %0
  %6 = trunc i64 %1 to i32
  %7 = and i32 %3, 2147483647
  %8 = or i32 %7, %6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %123, label %10

; <label>:10                                      ; preds = %5
  %11 = icmp slt i32 %3, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %10
  %13 = fsub double %x, %x
  %14 = fdiv double %13, 0.000000e+00
  br label %123

; <label>:15                                      ; preds = %10
  %16 = fmul double %x, 0x4350000000000000
  %17 = bitcast double %16 to i64
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  br label %20

; <label>:20                                      ; preds = %15, %0
  %k.0 = phi i32 [ -1077, %15 ], [ -1023, %0 ]
  %hx.0 = phi i32 [ %19, %15 ], [ %3, %0 ]
  %.03 = phi double [ %16, %15 ], [ %x, %0 ]
  %21 = icmp sgt i32 %hx.0, 2146435071
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %20
  %23 = fadd double %.03, %.03
  br label %123

; <label>:24                                      ; preds = %20
  %25 = ashr i32 %hx.0, 20
  %26 = and i32 %hx.0, 1048575
  %27 = add nsw i32 %26, 614244
  %28 = and i32 %27, 1048576
  %29 = bitcast double %.03 to i64
  %30 = and i64 %29, 4294967295
  %31 = or i32 %28, %26
  %32 = xor i32 %31, 1072693248
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 32
  %35 = or i64 %34, %30
  %36 = bitcast i64 %35 to double
  %37 = lshr exact i32 %28, 20
  %38 = add i32 %k.0, %25
  %39 = add i32 %38, %37
  %40 = fadd double %36, -1.000000e+00
  %41 = add nsw i32 %hx.0, 2
  %42 = and i32 %41, 1048575
  %43 = icmp ult i32 %42, 3
  br i1 %43, label %44, label %68

; <label>:44                                      ; preds = %24
  %45 = fcmp oeq double %40, 0.000000e+00
  br i1 %45, label %46, label %53

; <label>:46                                      ; preds = %44
  %47 = icmp eq i32 %39, 0
  br i1 %47, label %123, label %48

; <label>:48                                      ; preds = %46
  %49 = sitofp i32 %39 to double
  %50 = fmul double %49, 0x3FE62E42FEE00000
  %51 = fmul double %49, 0x3DEA39EF35793C76
  %52 = fadd double %50, %51
  br label %123

; <label>:53                                      ; preds = %44
  %54 = fmul double %40, %40
  %55 = fmul double %40, 0x3FD5555555555555
  %56 = fsub double 5.000000e-01, %55
  %57 = fmul double %54, %56
  %58 = icmp eq i32 %39, 0
  br i1 %58, label %59, label %61

; <label>:59                                      ; preds = %53
  %60 = fsub double %40, %57
  br label %123

; <label>:61                                      ; preds = %53
  %62 = sitofp i32 %39 to double
  %63 = fmul double %62, 0x3FE62E42FEE00000
  %64 = fmul double %62, 0x3DEA39EF35793C76
  %65 = fsub double %57, %64
  %66 = fsub double %65, %40
  %67 = fsub double %63, %66
  br label %123

; <label>:68                                      ; preds = %24
  %69 = fadd double %40, 2.000000e+00
  %70 = fdiv double %40, %69
  %71 = sitofp i32 %39 to double
  %72 = fmul double %70, %70
  %73 = add nsw i32 %26, -398458
  %74 = fmul double %72, %72
  %75 = sub nsw i32 440401, %26
  %76 = fmul double %74, 0x3FC39A09D078C69F
  %77 = fadd double %76, 0x3FCC71C51D8E78AF
  %78 = fmul double %74, %77
  %79 = fadd double %78, 0x3FD999999997FA04
  %80 = fmul double %74, %79
  %81 = fmul double %74, 0x3FC2F112DF3E5244
  %82 = fadd double %81, 0x3FC7466496CB03DE
  %83 = fmul double %74, %82
  %84 = fadd double %83, 0x3FD2492494229359
  %85 = fmul double %74, %84
  %86 = fadd double %85, 0x3FE5555555555593
  %87 = fmul double %72, %86
  %88 = or i32 %73, %75
  %89 = fadd double %87, %80
  %90 = icmp sgt i32 %88, 0
  br i1 %90, label %91, label %109

; <label>:91                                      ; preds = %68
  %92 = fmul double %40, 5.000000e-01
  %93 = fmul double %92, %40
  %94 = icmp eq i32 %39, 0
  br i1 %94, label %95, label %100

; <label>:95                                      ; preds = %91
  %96 = fadd double %93, %89
  %97 = fmul double %70, %96
  %98 = fsub double %93, %97
  %99 = fsub double %40, %98
  br label %123

; <label>:100                                     ; preds = %91
  %101 = fmul double %71, 0x3FE62E42FEE00000
  %102 = fadd double %93, %89
  %103 = fmul double %70, %102
  %104 = fmul double %71, 0x3DEA39EF35793C76
  %105 = fadd double %103, %104
  %106 = fsub double %93, %105
  %107 = fsub double %106, %40
  %108 = fsub double %101, %107
  br label %123

; <label>:109                                     ; preds = %68
  %110 = icmp eq i32 %39, 0
  br i1 %110, label %111, label %115

; <label>:111                                     ; preds = %109
  %112 = fsub double %40, %89
  %113 = fmul double %70, %112
  %114 = fsub double %40, %113
  br label %123

; <label>:115                                     ; preds = %109
  %116 = fmul double %71, 0x3FE62E42FEE00000
  %117 = fsub double %40, %89
  %118 = fmul double %70, %117
  %119 = fmul double %71, 0x3DEA39EF35793C76
  %120 = fsub double %118, %119
  %121 = fsub double %120, %40
  %122 = fsub double %116, %121
  br label %123

; <label>:123                                     ; preds = %115, %111, %100, %95, %61, %59, %48, %46, %22, %12, %5
  %.0 = phi double [ %14, %12 ], [ %23, %22 ], [ %52, %48 ], [ %60, %59 ], [ %67, %61 ], [ %99, %95 ], [ %108, %100 ], [ %114, %111 ], [ %122, %115 ], [ 0xFFF0000000000000, %5 ], [ 0.000000e+00, %46 ]
  ret double %.0
}

define i64 @nrand48(i16* %s) nounwind uwtable optsize {
  %1 = tail call i64 @__rand48_step(i16* %s, i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 3)) nounwind optsize
  %2 = lshr i64 %1, 17
  ret i64 %2
}

define i64 @lrand48() nounwind uwtable optsize {
  %1 = tail call i64 @__rand48_step(i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 0), i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 3)) nounwind optsize
  %2 = lshr i64 %1, 17
  ret i64 %2
}

define i64 @lrintf(float %x) nounwind uwtable optsize {
  %1 = tail call float @rintf(float %x) nounwind optsize
  %2 = fptosi float %1 to i64
  ret i64 %2
}

define i64 @lrintl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call i32 @fetestexcept(i32 32) nounwind optsize
  %2 = tail call x86_fp80 @rintl(x86_fp80 %x) nounwind optsize
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = fcmp ogt x86_fp80 %2, 0xK403DFFFFFFFFFFFFFFFE
  %6 = fcmp olt x86_fp80 %2, 0xKC03E8000000000000000
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %7, label %9

; <label>:7                                       ; preds = %4
  %8 = tail call i32 @feclearexcept(i32 32) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %7, %4, %0
  %10 = fptosi x86_fp80 %2 to i64
  ret i64 %10
}

define i64 @lrint(double %x) nounwind uwtable optsize {
  %1 = tail call double @rint(double %x) nounwind optsize
  %2 = fptosi double %1 to i64
  ret i64 %2
}

define i64 @lroundf(float %x) nounwind uwtable optsize {
  %1 = tail call float @roundf(float %x) nounwind optsize
  %2 = fptosi float %1 to i64
  ret i64 %2
}

define i64 @lroundl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @roundl(x86_fp80 %x) nounwind optsize
  %2 = fptosi x86_fp80 %1 to i64
  ret i64 %2
}

define i64 @lround(double %x) nounwind uwtable optsize {
  %1 = tail call double @round(double %x) nounwind optsize
  %2 = fptosi double %1 to i64
  ret i64 %2
}

define i8* @lsearch(i8* %key, i8* %base, i64* nocapture %nelp, i64 %width, i32 (i8*, i8*)* nocapture %compar) nounwind uwtable optsize {
  %1 = load i64* %nelp, align 8, !tbaa !5
  br label %2

; <label>:2                                       ; preds = %9, %0
  %i.0 = phi i64 [ 0, %0 ], [ %10, %9 ]
  %3 = icmp ult i64 %i.0, %1
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %2
  %5 = mul nsw i64 %i.0, %width
  %6 = getelementptr inbounds i8* %base, i64 %5
  %7 = tail call i32 %compar(i8* %6, i8* %key) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %.loopexit, label %9

; <label>:9                                       ; preds = %4
  %10 = add i64 %i.0, 1
  br label %2

; <label>:11                                      ; preds = %2
  %12 = add i64 %1, 1
  store i64 %12, i64* %nelp, align 8, !tbaa !5
  %13 = mul nsw i64 %1, %width
  %14 = getelementptr inbounds i8* %base, i64 %13
  %15 = tail call i8* @memcpy(i8* %14, i8* %key, i64 %width) nounwind optsize
  br label %.loopexit

.loopexit:                                        ; preds = %11, %4
  %.0 = phi i8* [ %15, %11 ], [ %6, %4 ]
  ret i8* %.0
}

define i8* @lfind(i8* %key, i8* %base, i64* nocapture %nelp, i64 %width, i32 (i8*, i8*)* nocapture %compar) nounwind uwtable optsize {
  %1 = load i64* %nelp, align 8, !tbaa !5
  br label %2

; <label>:2                                       ; preds = %9, %0
  %i.0 = phi i64 [ 0, %0 ], [ %10, %9 ]
  %3 = icmp ult i64 %i.0, %1
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %2
  %5 = mul nsw i64 %i.0, %width
  %6 = getelementptr inbounds i8* %base, i64 %5
  %7 = tail call i32 %compar(i8* %6, i8* %key) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

; <label>:9                                       ; preds = %4
  %10 = add i64 %i.0, 1
  br label %2

; <label>:11                                      ; preds = %4, %2
  %.0 = phi i8* [ %6, %4 ], [ null, %2 ]
  ret i8* %.0
}

define i64 @lseek(i32 %fd, i64 %offset, i32 %whence) nounwind uwtable optsize {
  %result = alloca i64, align 8
  %1 = sext i32 %fd to i64
  %2 = ashr i64 %offset, 32
  %3 = ptrtoint i64* %result to i64
  %4 = sext i32 %whence to i64
  %5 = call i64 (i64, ...)* @__syscall(i64 140, i64 %1, i64 %2, i64 %offset, i64 %3, i64 %4, i32 0) nounwind optsize
  %6 = call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = icmp ne i64 %6, 0
  %8 = load i64* %result, align 8, !tbaa !5
  %9 = select i1 %7, i64 -1, i64 %8
  ret i64 %9
}

define i32 @lstat(i8* %path, %struct.stat.250* %buf) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint %struct.stat.250* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 196, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @lutimes(i8* %filename, %struct.timeval.252* nocapture %tv) nounwind uwtable optsize {
  %times = alloca [2 x %struct.timespec.114], align 16
  %1 = getelementptr inbounds %struct.timeval.252* %tv, i64 0, i32 0
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 0, i32 0
  store i64 %2, i64* %3, align 16, !tbaa !5
  %4 = getelementptr inbounds %struct.timeval.252* %tv, i64 0, i32 1
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = mul nsw i64 %5, 1000
  %7 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 0, i32 1
  store i64 %6, i64* %7, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.timeval.252* %tv, i64 1, i32 0
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 1, i32 0
  store i64 %9, i64* %10, align 16, !tbaa !5
  %11 = getelementptr inbounds %struct.timeval.252* %tv, i64 1, i32 1
  %12 = load i64* %11, align 8, !tbaa !5
  %13 = mul nsw i64 %12, 1000
  %14 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 1, i32 1
  store i64 %13, i64* %14, align 8, !tbaa !5
  %15 = getelementptr inbounds [2 x %struct.timespec.114]* %times, i64 0, i64 0
  %16 = call i32 @utimensat(i32 -100, i8* %filename, %struct.timespec.114* %15, i32 256) nounwind optsize
  ret i32 %16
}

define i32 @__madvise(i8* %addr, i64 %len, i32 %advice) nounwind uwtable optsize {
  %1 = ptrtoint i8* %addr to i64
  %2 = sext i32 %advice to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 220, i64 %1, i64 %len, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i8* @malloc(i64 %n) nounwind uwtable optsize {
  %1 = alloca i64, align 8
  store i64 %n, i64* %1, align 8, !tbaa !5
  %2 = call fastcc i32 @adjust_size(i64* %1) optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %199, label %4

; <label>:4                                       ; preds = %0
  %5 = load i64* %1, align 8, !tbaa !5
  %6 = icmp ugt i64 %5, 229376
  br i1 %6, label %7, label %19

; <label>:7                                       ; preds = %4
  %8 = add i64 %5, 4111
  %9 = and i64 %8, -4096
  %10 = call i8* @__mmap(i8* null, i64 %9, i32 3, i32 34, i32 -1, i64 0) nounwind optsize
  %11 = icmp eq i8* %10, inttoptr (i64 -1 to i8*)
  br i1 %11, label %199, label %12

; <label>:12                                      ; preds = %7
  %13 = getelementptr inbounds i8* %10, i64 16
  %14 = add i64 %9, -16
  %15 = getelementptr inbounds i8* %10, i64 24
  %16 = bitcast i8* %15 to i64*
  store i64 %14, i64* %16, align 8, !tbaa !5
  %17 = bitcast i8* %13 to i64*
  store i64 16, i64* %17, align 8, !tbaa !5
  %18 = getelementptr inbounds i8* %10, i64 32
  br label %199

; <label>:19                                      ; preds = %4
  %20 = lshr i64 %5, 5
  %21 = add i64 %20, -1
  %22 = icmp ult i64 %21, 33
  %23 = trunc i64 %21 to i32
  br i1 %22, label %bin_index_up.exit, label %24

; <label>:24                                      ; preds = %19
  %25 = sitofp i32 %23 to float
  %26 = bitcast float %25 to i32
  %27 = add i32 %26, 2097151
  %28 = lshr i32 %27, 21
  %29 = add i32 %28, -496
  br label %bin_index_up.exit

bin_index_up.exit:                                ; preds = %24, %19
  %.0.i = phi i32 [ %29, %24 ], [ %23, %19 ]
  %30 = zext i32 %.0.i to i64
  %31 = shl i64 -1, %30
  br label %unlock_bin.exit5

unlock_bin.exit5:                                 ; preds = %194, %191, %63, %57, %bin_index_up.exit
  %32 = load i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2), align 8, !tbaa !5
  %33 = and i64 %32, %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %89

; <label>:35                                      ; preds = %unlock_bin.exit5
  %36 = load i32* @init_malloc.init, align 4, !tbaa !6
  %37 = icmp eq i32 %36, 2
  br i1 %37, label %._crit_edge, label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %45, %42, %35
  %38 = load volatile i32* @init_malloc.init, align 4, !tbaa !6
  br label %39

; <label>:39                                      ; preds = %42, %a_cas.exit.i.i
  %40 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %38, i32 1, i32* @init_malloc.init) nounwind optsize
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %a_swap.exit.i, label %42

; <label>:42                                      ; preds = %39
  %43 = load volatile i32* @init_malloc.init, align 4, !tbaa !6
  %44 = icmp eq i32 %43, %38
  br i1 %44, label %39, label %a_cas.exit.i.i

a_swap.exit.i:                                    ; preds = %39
  switch i32 %38, label %46 [
    i32 1, label %45
    i32 0, label %47
  ]

; <label>:45                                      ; preds = %a_swap.exit.i
  call void @__wait(i32* @init_malloc.init, i32* @init_malloc.waiters, i32 1, i32 1) nounwind optsize
  br label %a_cas.exit.i.i

; <label>:46                                      ; preds = %a_swap.exit.i
  store volatile i32 2, i32* @init_malloc.init, align 4, !tbaa !6
  br label %._crit_edge

; <label>:47                                      ; preds = %a_swap.exit.i
  %48 = call i64 @__brk(i64 0) nounwind optsize
  %49 = add i64 %48, 63
  %50 = and i64 %49, -32
  store i64 %50, i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 0), align 8, !tbaa !5
  %51 = call fastcc %struct.chunk* @expand_heap(i64 %5) nounwind optsize
  %52 = icmp eq %struct.chunk* %51, null
  br i1 %52, label %53, label %57

; <label>:53                                      ; preds = %47
  store volatile i32 0, i32* @init_malloc.init, align 4, !tbaa !6
  %54 = load i32* @init_malloc.waiters, align 4, !tbaa !6
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %._crit_edge, label %56

; <label>:56                                      ; preds = %53
  call void @__wake(i32* @init_malloc.init, i32 1, i32 1) nounwind optsize
  br label %._crit_edge

; <label>:57                                      ; preds = %47
  %58 = getelementptr inbounds %struct.chunk* %51, i64 0, i32 0
  store i64* %58, i64** getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 1), align 8, !tbaa !7
  store i64 1, i64* %58, align 8, !tbaa !5
  %59 = getelementptr inbounds %struct.chunk* %51, i64 0, i32 2
  %60 = bitcast %struct.chunk** %59 to i8*
  call void @free(i8* %60) nounwind optsize
  store volatile i32 2, i32* @init_malloc.init, align 4, !tbaa !6
  %61 = load i32* @init_malloc.waiters, align 4, !tbaa !6
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %unlock_bin.exit5, label %63

; <label>:63                                      ; preds = %57
  call void @__wake(i32* @init_malloc.init, i32 -1, i32 1) nounwind optsize
  br label %unlock_bin.exit5

._crit_edge:                                      ; preds = %56, %53, %46, %35
  %64 = load i64* %1, align 8, !tbaa !5
  %65 = call fastcc %struct.chunk* @expand_heap(i64 %64) optsize
  %66 = icmp eq %struct.chunk* %65, null
  br i1 %66, label %199, label %67

; <label>:67                                      ; preds = %._crit_edge
  %68 = call fastcc i32 @alloc_rev(%struct.chunk* %65) optsize
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %unlock_bin.exit, label %70

; <label>:70                                      ; preds = %67
  %71 = bitcast %struct.chunk* %65 to i8*
  %72 = getelementptr inbounds %struct.chunk* %65, i64 0, i32 0
  %73 = load i64* %72, align 8, !tbaa !5
  %74 = and i64 %73, -2
  %75 = sub i64 0, %74
  %76 = getelementptr inbounds i8* %71, i64 %75
  %77 = bitcast i8* %76 to %struct.chunk*
  %78 = getelementptr inbounds %struct.chunk* %65, i64 0, i32 1
  %79 = load i64* %78, align 8, !tbaa !5
  %.sum = sub i64 8, %74
  %80 = getelementptr inbounds i8* %71, i64 %.sum
  %81 = bitcast i8* %80 to i64*
  %82 = load i64* %81, align 8, !tbaa !5
  %83 = and i64 %82, -2
  %84 = add i64 %83, %79
  store i64 %84, i64* %81, align 8, !tbaa !5
  %85 = load i64* %78, align 8, !tbaa !5
  %86 = and i64 %85, -2
  %87 = getelementptr inbounds i8* %71, i64 %86
  %88 = bitcast i8* %87 to i64*
  store i64 %84, i64* %88, align 8, !tbaa !5
  br label %unlock_bin.exit

; <label>:89                                      ; preds = %unlock_bin.exit5
  %90 = trunc i64 %33 to i32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %89
  %93 = lshr i64 %33, 32
  %94 = sub i64 0, %93
  %95 = and i64 %93, %94
  %96 = mul i64 %95, 124511785
  %97 = lshr i64 %96, 27
  %98 = getelementptr inbounds [32 x i8]* @a_ctz_l.debruijn32, i64 0, i64 %97
  %99 = load i8* %98, align 1, !tbaa !0
  %100 = sext i8 %99 to i32
  %101 = add nsw i32 %100, 32
  br label %first_set.exit

; <label>:102                                     ; preds = %89
  %103 = and i64 %33, 4294967295
  %104 = sub i64 0, %103
  %105 = and i64 %103, %104
  %106 = mul i64 %105, 124511785
  %107 = lshr i64 %106, 27
  %108 = getelementptr inbounds [32 x i8]* @a_ctz_l.debruijn32, i64 0, i64 %107
  %109 = load i8* %108, align 1, !tbaa !0
  %110 = sext i8 %109 to i32
  br label %first_set.exit

first_set.exit:                                   ; preds = %102, %92
  %.0.i.i = phi i32 [ %110, %102 ], [ %101, %92 ]
  call fastcc void @lock_bin(i32 %.0.i.i) optsize
  %111 = sext i32 %.0.i.i to i64
  %112 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %111, i32 1
  %113 = load %struct.chunk** %112, align 8, !tbaa !7
  %114 = getelementptr inbounds %struct.chunk** %112, i64 -2
  %115 = bitcast %struct.chunk** %114 to %struct.chunk*
  %116 = icmp eq %struct.chunk* %113, %115
  br i1 %116, label %191, label %117

; <label>:117                                     ; preds = %first_set.exit
  %118 = getelementptr inbounds %struct.chunk* %113, i64 0, i32 1
  %119 = load i64* %118, align 8, !tbaa !5
  %120 = lshr i64 %119, 5
  %121 = add i64 %120, -1
  %122 = icmp ult i64 %121, 33
  br i1 %122, label %123, label %125

; <label>:123                                     ; preds = %117
  %124 = trunc i64 %121 to i32
  br label %bin_index.exit

; <label>:125                                     ; preds = %117
  %126 = icmp ugt i64 %121, 7168
  br i1 %126, label %bin_index.exit, label %127

; <label>:127                                     ; preds = %125
  %128 = trunc i64 %121 to i32
  %129 = sitofp i32 %128 to float
  %130 = bitcast float %129 to i32
  %131 = lshr i32 %130, 21
  %132 = add i32 %131, -496
  br label %bin_index.exit

bin_index.exit:                                   ; preds = %127, %125, %123
  %.0.i2 = phi i32 [ %124, %123 ], [ %132, %127 ], [ 63, %125 ]
  %133 = icmp eq i32 %.0.i.i, %.0.i2
  br i1 %133, label %134, label %191

; <label>:134                                     ; preds = %bin_index.exit
  %135 = load i64* %1, align 8, !tbaa !5
  %136 = icmp slt i32 %.0.i.i, 40
  br i1 %136, label %185, label %137

; <label>:137                                     ; preds = %134
  %138 = add nsw i32 %.0.i, 3
  %139 = icmp sgt i32 %138, %.0.i.i
  br i1 %139, label %140, label %146

; <label>:140                                     ; preds = %137
  %141 = icmp eq i32 %.0.i.i, 63
  br i1 %141, label %142, label %185

; <label>:142                                     ; preds = %140
  %143 = and i64 %119, -2
  %144 = sub i64 %143, %135
  %145 = icmp ult i64 %144, 229377
  br i1 %145, label %185, label %148

; <label>:146                                     ; preds = %137
  %147 = and i64 %119, -2
  br label %148

; <label>:148                                     ; preds = %146, %142
  %n1.0.i = phi i64 [ %143, %142 ], [ %147, %146 ]
  %149 = sub i64 %n1.0.i, %135
  %150 = lshr i64 %149, 5
  %151 = add i64 %150, -1
  %152 = icmp ult i64 %151, 33
  br i1 %152, label %153, label %155

; <label>:153                                     ; preds = %148
  %154 = trunc i64 %151 to i32
  br label %bin_index.exit.i

; <label>:155                                     ; preds = %148
  %156 = icmp ugt i64 %151, 7168
  br i1 %156, label %bin_index.exit.i, label %157

; <label>:157                                     ; preds = %155
  %158 = trunc i64 %151 to i32
  %159 = sitofp i32 %158 to float
  %160 = bitcast float %159 to i32
  %161 = lshr i32 %160, 21
  %162 = add i32 %161, -496
  br label %bin_index.exit.i

bin_index.exit.i:                                 ; preds = %157, %155, %153
  %.0.i.i3 = phi i32 [ %154, %153 ], [ %162, %157 ], [ 63, %155 ]
  %163 = icmp eq i32 %.0.i.i3, %.0.i.i
  br i1 %163, label %pretrim.exit, label %185

pretrim.exit:                                     ; preds = %bin_index.exit.i
  %164 = bitcast %struct.chunk* %113 to i8*
  %165 = and i64 %119, -2
  %166 = getelementptr inbounds i8* %164, i64 %165
  %167 = getelementptr inbounds i8* %164, i64 %135
  %168 = bitcast i8* %167 to %struct.chunk*
  %169 = getelementptr inbounds %struct.chunk* %113, i64 0, i32 3
  %170 = load %struct.chunk** %169, align 8, !tbaa !7
  %.sum.i = add i64 %135, 24
  %171 = getelementptr inbounds i8* %164, i64 %.sum.i
  %172 = bitcast i8* %171 to %struct.chunk**
  store %struct.chunk* %170, %struct.chunk** %172, align 8, !tbaa !7
  %173 = getelementptr inbounds %struct.chunk* %113, i64 0, i32 2
  %174 = load %struct.chunk** %173, align 8, !tbaa !7
  %.sum1.i = add i64 %135, 16
  %175 = getelementptr inbounds i8* %164, i64 %.sum1.i
  %176 = bitcast i8* %175 to %struct.chunk**
  store %struct.chunk* %174, %struct.chunk** %176, align 8, !tbaa !7
  %177 = getelementptr inbounds %struct.chunk* %170, i64 0, i32 2
  store %struct.chunk* %168, %struct.chunk** %177, align 8, !tbaa !7
  %178 = load %struct.chunk** %176, align 8, !tbaa !7
  %179 = getelementptr inbounds %struct.chunk* %178, i64 0, i32 3
  store %struct.chunk* %168, %struct.chunk** %179, align 8, !tbaa !7
  %180 = or i64 %135, 1
  %181 = bitcast i8* %167 to i64*
  store i64 %180, i64* %181, align 8, !tbaa !5
  %.sum2.i = add i64 %135, 8
  %182 = getelementptr inbounds i8* %164, i64 %.sum2.i
  %183 = bitcast i8* %182 to i64*
  store i64 %149, i64* %183, align 8, !tbaa !5
  %184 = bitcast i8* %166 to i64*
  store i64 %149, i64* %184, align 8, !tbaa !5
  store i64 %180, i64* %118, align 8, !tbaa !5
  br label %186

; <label>:185                                     ; preds = %bin_index.exit.i, %142, %140, %134
  call fastcc void @unbin(%struct.chunk* %113, i32 %.0.i.i) optsize
  br label %186

; <label>:186                                     ; preds = %185, %pretrim.exit
  %187 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %unlock_bin.exit, label %189

; <label>:189                                     ; preds = %186
  %190 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %111, i32 0, i64 0
  call fastcc void @unlock(i32* %190) nounwind optsize
  br label %unlock_bin.exit

; <label>:191                                     ; preds = %bin_index.exit, %first_set.exit
  %192 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %unlock_bin.exit5, label %194

; <label>:194                                     ; preds = %191
  %195 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %111, i32 0, i64 0
  call fastcc void @unlock(i32* %195) nounwind optsize
  br label %unlock_bin.exit5

unlock_bin.exit:                                  ; preds = %189, %186, %70, %67
  %c.0 = phi %struct.chunk* [ %77, %70 ], [ %65, %67 ], [ %113, %189 ], [ %113, %186 ]
  %196 = load i64* %1, align 8, !tbaa !5
  call fastcc void @trim(%struct.chunk* %c.0, i64 %196) optsize
  %197 = getelementptr inbounds %struct.chunk* %c.0, i64 0, i32 2
  %198 = bitcast %struct.chunk** %197 to i8*
  br label %199

; <label>:199                                     ; preds = %unlock_bin.exit, %._crit_edge, %12, %7, %0
  %.0 = phi i8* [ %18, %12 ], [ %198, %unlock_bin.exit ], [ null, %0 ], [ null, %7 ], [ null, %._crit_edge ]
  ret i8* %.0
}

define internal fastcc i32 @adjust_size(i64* nocapture %n) nounwind uwtable optsize {
  %1 = load i64* %n, align 8, !tbaa !5
  %2 = add i64 %1, -1
  %3 = icmp ugt i64 %2, 9223372036854771679
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %4
  %7 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %7, align 4, !tbaa !6
  br label %12

; <label>:8                                       ; preds = %4
  store i64 32, i64* %n, align 8, !tbaa !5
  br label %12

; <label>:9                                       ; preds = %0
  %10 = add i64 %1, 47
  %11 = and i64 %10, -32
  store i64 %11, i64* %n, align 8, !tbaa !5
  br label %12

; <label>:12                                      ; preds = %9, %8, %6
  %.0 = phi i32 [ -1, %6 ], [ 0, %8 ], [ 0, %9 ]
  ret i32 %.0
}

define internal fastcc %struct.chunk* @expand_heap(i64 %n) nounwind uwtable optsize {
  tail call fastcc void @lock(i32* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 4, i64 0)) optsize
  %1 = load i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 0), align 8, !tbaa !5
  %2 = sub i64 -8193, %1
  %3 = icmp ult i64 %2, %n
  br i1 %3, label %24, label %4

; <label>:4                                       ; preds = %0
  %5 = add i64 %n, 4127
  %6 = add i64 %5, %1
  %7 = and i64 %6, -4096
  %8 = tail call i64 @__brk(i64 %7) nounwind optsize
  %9 = icmp eq i64 %8, %7
  br i1 %9, label %10, label %24

; <label>:10                                      ; preds = %4
  %11 = sub i64 %7, %1
  %12 = inttoptr i64 %7 to i8*
  %13 = getelementptr inbounds i8* %12, i64 -16
  %14 = or i64 %11, 1
  %15 = bitcast i8* %13 to i64*
  store i64 %14, i64* %15, align 16, !tbaa !5
  %16 = getelementptr inbounds i8* %12, i64 -8
  %17 = bitcast i8* %16 to i64*
  store i64 1, i64* %17, align 8, !tbaa !5
  %18 = load i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 0), align 8, !tbaa !5
  %19 = inttoptr i64 %18 to i8*
  %20 = getelementptr inbounds i8* %19, i64 -16
  %21 = bitcast i8* %20 to %struct.chunk*
  %22 = getelementptr inbounds i8* %19, i64 -8
  %23 = bitcast i8* %22 to i64*
  store i64 %14, i64* %23, align 8, !tbaa !5
  store i64 %7, i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 0), align 8, !tbaa !5
  tail call fastcc void @unlock(i32* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 4, i64 0)) optsize
  br label %25

; <label>:24                                      ; preds = %4, %0
  tail call fastcc void @unlock(i32* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 4, i64 0)) optsize
  br label %25

; <label>:25                                      ; preds = %24, %10
  %.0 = phi %struct.chunk* [ null, %24 ], [ %21, %10 ]
  ret %struct.chunk* %.0
}

define internal fastcc i32 @alloc_rev(%struct.chunk* nocapture %c) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.chunk* %c, i64 0, i32 0
  br label %unlock_bin.exit

unlock_bin.exit:                                  ; preds = %35, %32, %0
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = and i64 %2, 1
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %unlock_bin.exit1

; <label>:5                                       ; preds = %unlock_bin.exit
  %6 = lshr i64 %2, 5
  %7 = add i64 %6, -1
  %8 = icmp ult i64 %7, 33
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %5
  %10 = trunc i64 %7 to i32
  br label %bin_index.exit

; <label>:11                                      ; preds = %5
  %12 = icmp ugt i64 %7, 7168
  br i1 %12, label %bin_index.exit, label %13

; <label>:13                                      ; preds = %11
  %14 = trunc i64 %7 to i32
  %15 = sitofp i32 %14 to float
  %16 = bitcast float %15 to i32
  %17 = lshr i32 %16, 21
  %18 = add i32 %17, -496
  br label %bin_index.exit

bin_index.exit:                                   ; preds = %13, %11, %9
  %.0.i = phi i32 [ %10, %9 ], [ %18, %13 ], [ 63, %11 ]
  tail call fastcc void @lock_bin(i32 %.0.i) optsize
  %19 = load i64* %1, align 8, !tbaa !5
  %20 = icmp eq i64 %19, %2
  br i1 %20, label %21, label %32

; <label>:21                                      ; preds = %bin_index.exit
  %22 = bitcast %struct.chunk* %c to i8*
  %23 = and i64 %19, -2
  %24 = sub i64 0, %23
  %25 = getelementptr inbounds i8* %22, i64 %24
  %26 = bitcast i8* %25 to %struct.chunk*
  tail call fastcc void @unbin(%struct.chunk* %26, i32 %.0.i) optsize
  %27 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %unlock_bin.exit1, label %29

; <label>:29                                      ; preds = %21
  %30 = sext i32 %.0.i to i64
  %31 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %30, i32 0, i64 0
  tail call fastcc void @unlock(i32* %31) nounwind optsize
  br label %unlock_bin.exit1

; <label>:32                                      ; preds = %bin_index.exit
  %33 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %unlock_bin.exit, label %35

; <label>:35                                      ; preds = %32
  %36 = sext i32 %.0.i to i64
  %37 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %36, i32 0, i64 0
  tail call fastcc void @unlock(i32* %37) nounwind optsize
  br label %unlock_bin.exit

unlock_bin.exit1:                                 ; preds = %29, %21, %unlock_bin.exit
  %.0 = phi i32 [ 1, %21 ], [ 1, %29 ], [ 0, %unlock_bin.exit ]
  ret i32 %.0
}

define internal fastcc void @lock_bin(i32 %i) nounwind uwtable optsize {
  %1 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %2 = icmp eq i32 %1, 0
  %.pre = sext i32 %i to i64
  br i1 %2, label %._crit_edge, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %.pre, i32 0, i64 0
  tail call fastcc void @lock(i32* %4) optsize
  br label %._crit_edge

._crit_edge:                                      ; preds = %3, %0
  %5 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %.pre, i32 1
  %6 = load %struct.chunk** %5, align 8, !tbaa !7
  %7 = icmp eq %struct.chunk* %6, null
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %._crit_edge
  %9 = getelementptr inbounds %struct.chunk** %5, i64 -2
  %10 = bitcast %struct.chunk** %9 to %struct.chunk*
  %11 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %.pre, i32 2
  store %struct.chunk* %10, %struct.chunk** %11, align 8, !tbaa !7
  store %struct.chunk* %10, %struct.chunk** %5, align 8, !tbaa !7
  br label %12

; <label>:12                                      ; preds = %8, %._crit_edge
  ret void
}

define internal fastcc void @unbin(%struct.chunk* nocapture %c, i32 %i) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.chunk* %c, i64 0, i32 3
  %2 = load %struct.chunk** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.chunk* %c, i64 0, i32 2
  %4 = load %struct.chunk** %3, align 8, !tbaa !7
  %5 = icmp eq %struct.chunk* %2, %4
  br i1 %5, label %6, label %a_and_64.exit

; <label>:6                                       ; preds = %0
  %7 = zext i32 %i to i64
  %8 = shl i64 1, %7
  %9 = xor i64 %8, -1
  %10 = trunc i64 %9 to i32
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %16, %6
  %11 = load volatile i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), align 8, !tbaa !6
  %12 = and i32 %11, %10
  br label %13

; <label>:13                                      ; preds = %16, %a_cas.exit.i.i
  %14 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %11, i32 %12, i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*)) nounwind optsize
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %a_and.exit.i, label %16

; <label>:16                                      ; preds = %13
  %17 = load volatile i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), align 8, !tbaa !6
  %18 = icmp eq i32 %17, %11
  br i1 %18, label %13, label %a_cas.exit.i.i

a_and.exit.i:                                     ; preds = %13
  %19 = lshr i64 %9, 32
  %20 = trunc i64 %19 to i32
  br label %a_cas.exit.i1.i

a_cas.exit.i1.i:                                  ; preds = %26, %a_and.exit.i
  %21 = load volatile i32* getelementptr (i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), i64 1), align 4, !tbaa !6
  %22 = and i32 %21, %20
  br label %23

; <label>:23                                      ; preds = %26, %a_cas.exit.i1.i
  %24 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %21, i32 %22, i32* getelementptr (i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), i64 1)) nounwind optsize
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %a_and_64.exit.loopexit, label %26

; <label>:26                                      ; preds = %23
  %27 = load volatile i32* getelementptr (i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), i64 1), align 4, !tbaa !6
  %28 = icmp eq i32 %27, %21
  br i1 %28, label %23, label %a_cas.exit.i1.i

a_and_64.exit.loopexit:                           ; preds = %23
  %.pre = load %struct.chunk** %3, align 8, !tbaa !7
  %.pre1 = load %struct.chunk** %1, align 8, !tbaa !7
  br label %a_and_64.exit

a_and_64.exit:                                    ; preds = %a_and_64.exit.loopexit, %0
  %29 = phi %struct.chunk* [ %.pre1, %a_and_64.exit.loopexit ], [ %2, %0 ]
  %30 = phi %struct.chunk* [ %.pre, %a_and_64.exit.loopexit ], [ %4, %0 ]
  %31 = getelementptr inbounds %struct.chunk* %29, i64 0, i32 2
  store %struct.chunk* %30, %struct.chunk** %31, align 8, !tbaa !7
  %32 = load %struct.chunk** %1, align 8, !tbaa !7
  %33 = load %struct.chunk** %3, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.chunk* %33, i64 0, i32 3
  store %struct.chunk* %32, %struct.chunk** %34, align 8, !tbaa !7
  %35 = getelementptr inbounds %struct.chunk* %c, i64 0, i32 1
  %36 = load i64* %35, align 8, !tbaa !5
  %37 = or i64 %36, 1
  store i64 %37, i64* %35, align 8, !tbaa !5
  %38 = bitcast %struct.chunk* %c to i8*
  %39 = and i64 %36, -2
  %40 = getelementptr inbounds i8* %38, i64 %39
  %41 = bitcast i8* %40 to i64*
  %42 = load i64* %41, align 8, !tbaa !5
  %43 = or i64 %42, 1
  store i64 %43, i64* %41, align 8, !tbaa !5
  ret void
}

define internal fastcc void @trim(%struct.chunk* %self, i64 %n) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.chunk* %self, i64 0, i32 1
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = and i64 %2, -2
  %4 = add i64 %3, -16
  %5 = icmp ugt i64 %4, %n
  br i1 %5, label %6, label %18

; <label>:6                                       ; preds = %0
  %7 = bitcast %struct.chunk* %self to i8*
  %8 = getelementptr inbounds i8* %7, i64 %3
  %9 = getelementptr inbounds i8* %7, i64 %n
  %10 = or i64 %n, 1
  %11 = bitcast i8* %9 to i64*
  store i64 %10, i64* %11, align 8, !tbaa !5
  %12 = sub i64 %3, %n
  %13 = or i64 %12, 1
  %.sum = add i64 %n, 8
  %14 = getelementptr inbounds i8* %7, i64 %.sum
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8, !tbaa !5
  %16 = bitcast i8* %8 to i64*
  store i64 %13, i64* %16, align 8, !tbaa !5
  store i64 %10, i64* %1, align 8, !tbaa !5
  %.sum1 = add i64 %n, 16
  %17 = getelementptr inbounds i8* %7, i64 %.sum1
  tail call void @free(i8* %17) optsize
  br label %18

; <label>:18                                      ; preds = %6, %0
  ret void
}

define i8* @realloc(i8* %p, i64 %n) nounwind uwtable optsize {
  %1 = alloca i64, align 8
  store i64 %n, i64* %1, align 8, !tbaa !5
  %2 = icmp eq i8* %p, null
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = call i8* @malloc(i64 %n) optsize
  br label %78

; <label>:5                                       ; preds = %0
  %6 = call fastcc i32 @adjust_size(i64* %1) optsize
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %78, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds i8* %p, i64 -16
  %10 = bitcast i8* %9 to %struct.chunk*
  %11 = getelementptr inbounds i8* %p, i64 -8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %12, align 8, !tbaa !5
  %14 = and i64 %13, -2
  %15 = and i64 %13, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %51

; <label>:17                                      ; preds = %8
  %18 = bitcast i8* %9 to i64*
  %19 = load i64* %18, align 8, !tbaa !5
  %.sum = sub i64 -16, %19
  %20 = getelementptr inbounds i8* %p, i64 %.sum
  %21 = add i64 %19, %14
  %22 = load i64* %1, align 8, !tbaa !5
  %23 = add i64 %22, %19
  %24 = and i64 %19, 1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

; <label>:26                                      ; preds = %17
  store volatile i8 0, i8* null, align 536870912, !tbaa !0
  br label %27

; <label>:27                                      ; preds = %26, %17
  %28 = icmp ult i64 %23, 4096
  br i1 %28, label %29, label %36

; <label>:29                                      ; preds = %27
  %30 = load i64* %1, align 8, !tbaa !5
  %31 = call i8* @malloc(i64 %30) optsize
  %32 = icmp eq i8* %31, null
  br i1 %32, label %36, label %33

; <label>:33                                      ; preds = %29
  %34 = add i64 %30, -16
  %35 = call i8* @memcpy(i8* %31, i8* %p, i64 %34) nounwind optsize
  call void @free(i8* %p) optsize
  br label %78

; <label>:36                                      ; preds = %29, %27
  %37 = add i64 %23, 4095
  %38 = and i64 %37, -4096
  %39 = icmp eq i64 %21, %38
  br i1 %39, label %78, label %40

; <label>:40                                      ; preds = %36
  %41 = call i8* (i8*, i64, i64, i32, ...)* @__mremap(i8* %20, i64 %21, i64 %38, i32 1) nounwind optsize
  %42 = icmp eq i8* %41, inttoptr (i64 -1 to i8*)
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %40
  %44 = icmp ult i64 %38, %21
  %45 = select i1 %44, i8* %p, i8* null
  br label %78

; <label>:46                                      ; preds = %40
  %47 = sub i64 %38, %19
  %.sum1 = add i64 %19, 8
  %48 = getelementptr inbounds i8* %41, i64 %.sum1
  %49 = bitcast i8* %48 to i64*
  store i64 %47, i64* %49, align 8, !tbaa !5
  %.sum2 = add i64 %19, 16
  %50 = getelementptr inbounds i8* %41, i64 %.sum2
  br label %78

; <label>:51                                      ; preds = %8
  %.sum3 = add i64 %14, -16
  %52 = getelementptr inbounds i8* %p, i64 %.sum3
  %53 = bitcast i8* %52 to %struct.chunk*
  %54 = load i64* %1, align 8, !tbaa !5
  %55 = icmp ugt i64 %54, %14
  br i1 %55, label %56, label %67

; <label>:56                                      ; preds = %51
  %57 = call fastcc i32 @alloc_fwd(%struct.chunk* %53) optsize
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %67, label %59

; <label>:59                                      ; preds = %56
  %.sum4 = add i64 %14, -8
  %60 = getelementptr inbounds i8* %p, i64 %.sum4
  %61 = bitcast i8* %60 to i64*
  %62 = load i64* %61, align 8, !tbaa !5
  %63 = and i64 %62, -2
  %64 = add i64 %63, %14
  %.sum5 = add i64 %63, %.sum3
  %65 = getelementptr inbounds i8* %p, i64 %.sum5
  %66 = bitcast i8* %65 to %struct.chunk*
  br label %67

; <label>:67                                      ; preds = %59, %56, %51
  %n1.0 = phi i64 [ %64, %59 ], [ %14, %56 ], [ %14, %51 ]
  %next.0 = phi %struct.chunk* [ %66, %59 ], [ %53, %56 ], [ %53, %51 ]
  %68 = or i64 %n1.0, 1
  store i64 %68, i64* %12, align 8, !tbaa !5
  %69 = getelementptr inbounds %struct.chunk* %next.0, i64 0, i32 0
  store i64 %68, i64* %69, align 8, !tbaa !5
  %70 = icmp ugt i64 %54, %n1.0
  br i1 %70, label %72, label %71

; <label>:71                                      ; preds = %67
  call fastcc void @trim(%struct.chunk* %10, i64 %54) optsize
  br label %78

; <label>:72                                      ; preds = %67
  %73 = add i64 %54, -16
  %74 = call i8* @malloc(i64 %73) optsize
  %75 = icmp eq i8* %74, null
  br i1 %75, label %78, label %76

; <label>:76                                      ; preds = %72
  %77 = call i8* @memcpy(i8* %74, i8* %p, i64 %.sum3) nounwind optsize
  call void @free(i8* %p) optsize
  br label %78

; <label>:78                                      ; preds = %76, %72, %71, %46, %43, %36, %33, %5, %3
  %.0 = phi i8* [ %p, %71 ], [ %74, %76 ], [ %31, %33 ], [ %45, %43 ], [ %50, %46 ], [ %4, %3 ], [ null, %5 ], [ %p, %36 ], [ null, %72 ]
  ret i8* %.0
}

define void @free(i8* %p) nounwind uwtable optsize {
  %1 = getelementptr inbounds i8* %p, i64 -16
  %2 = bitcast i8* %1 to %struct.chunk*
  %3 = icmp eq i8* %p, null
  br i1 %3, label %unlock_bin.exit, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %p, i64 -8
  %6 = bitcast i8* %5 to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %21

; <label>:10                                      ; preds = %4
  %11 = bitcast i8* %1 to i64*
  %12 = load i64* %11, align 8, !tbaa !5
  %.sum = sub i64 -16, %12
  %13 = getelementptr inbounds i8* %p, i64 %.sum
  %14 = and i64 %7, -2
  %15 = add i64 %12, %14
  %16 = and i64 %12, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %19, label %18

; <label>:18                                      ; preds = %10
  store volatile i8 0, i8* null, align 536870912, !tbaa !0
  br label %19

; <label>:19                                      ; preds = %18, %10
  %20 = tail call i32 @__munmap(i8* %13, i64 %15) nounwind optsize
  br label %unlock_bin.exit

; <label>:21                                      ; preds = %4
  %22 = and i64 %7, -2
  %.sum1 = add i64 %22, -16
  %23 = getelementptr inbounds i8* %p, i64 %.sum1
  br label %.outer

.outer:                                           ; preds = %99, %21
  %final_size.0.ph = phi i64 [ %22, %21 ], [ %102, %99 ]
  %next.0.ph.in = phi i8* [ %23, %21 ], [ %107, %99 ]
  %self.0.ph = phi %struct.chunk* [ %2, %21 ], [ %self.1, %99 ]
  %reclaim.0.ph = phi i32 [ 0, %21 ], [ %reclaim.2, %99 ]
  %next.0.ph = bitcast i8* %next.0.ph.in to %struct.chunk*
  %24 = getelementptr inbounds i8* %next.0.ph.in, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = bitcast i8* %next.0.ph.in to i64*
  %27 = ptrtoint i8* %next.0.ph.in to i64
  %28 = add i64 %27, -32
  %29 = and i64 %28, -4096
  br label %30

; <label>:30                                      ; preds = %96, %.outer
  %final_size.0 = phi i64 [ %final_size.1, %96 ], [ %final_size.0.ph, %.outer ]
  %self.0 = phi %struct.chunk* [ %self.1, %96 ], [ %self.0.ph, %.outer ]
  %reclaim.0 = phi i32 [ %reclaim.1, %96 ], [ %reclaim.0.ph, %.outer ]
  %31 = icmp eq i32 %reclaim.0, 0
  %.pre = getelementptr inbounds %struct.chunk* %self.0, i64 0, i32 0
  br i1 %31, label %._crit_edge, label %32

; <label>:32                                      ; preds = %30
  %33 = load i64* %.pre, align 8, !tbaa !5
  %34 = load i64* %25, align 8, !tbaa !5
  %35 = and i64 %33, 1
  %36 = and i64 %35, %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %._crit_edge, label %38

; <label>:38                                      ; preds = %32
  %39 = ptrtoint %struct.chunk* %self.0 to i64
  %40 = add i64 %39, 4127
  %41 = and i64 %40, -4096
  %42 = inttoptr i64 %41 to i8*
  %43 = sub i64 %29, %41
  %44 = tail call i32 @__madvise(i8* %42, i64 %43, i32 4) nounwind optsize
  br label %._crit_edge

._crit_edge:                                      ; preds = %38, %32, %30
  %45 = load i64* %.pre, align 8, !tbaa !5
  %46 = load i64* %25, align 8, !tbaa !5
  %47 = and i64 %45, 1
  %48 = and i64 %47, %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %unlock_bin.exit6, label %50

; <label>:50                                      ; preds = %._crit_edge
  %51 = or i64 %final_size.0, 1
  %52 = getelementptr inbounds %struct.chunk* %self.0, i64 0, i32 1
  store i64 %51, i64* %52, align 8, !tbaa !5
  store i64 %51, i64* %26, align 8, !tbaa !5
  %53 = lshr i64 %final_size.0, 5
  %54 = add i64 %53, -1
  %55 = icmp ult i64 %54, 33
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %50
  %57 = trunc i64 %54 to i32
  br label %bin_index.exit

; <label>:58                                      ; preds = %50
  %59 = icmp ugt i64 %54, 7168
  br i1 %59, label %bin_index.exit, label %60

; <label>:60                                      ; preds = %58
  %61 = trunc i64 %54 to i32
  %62 = sitofp i32 %61 to float
  %63 = bitcast float %62 to i32
  %64 = lshr i32 %63, 21
  %65 = add i32 %64, -496
  br label %bin_index.exit

bin_index.exit:                                   ; preds = %60, %58, %56
  %.0.i = phi i32 [ %57, %56 ], [ %65, %60 ], [ 63, %58 ]
  tail call fastcc void @lock_bin(i32 %.0.i) optsize
  tail call fastcc void @lock(i32* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 5, i64 0)) optsize
  %66 = load i64* %.pre, align 8, !tbaa !5
  %67 = load i64* %25, align 8, !tbaa !5
  %68 = and i64 %66, 1
  %69 = and i64 %68, %67
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %108

; <label>:71                                      ; preds = %bin_index.exit
  tail call fastcc void @unlock(i32* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 5, i64 0)) optsize
  %72 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %unlock_bin.exit6, label %74

; <label>:74                                      ; preds = %71
  %75 = sext i32 %.0.i to i64
  %76 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %75, i32 0, i64 0
  tail call fastcc void @unlock(i32* %76) nounwind optsize
  br label %unlock_bin.exit6

unlock_bin.exit6:                                 ; preds = %74, %71, %._crit_edge
  %77 = tail call fastcc i32 @alloc_rev(%struct.chunk* %self.0) optsize
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %96, label %79

; <label>:79                                      ; preds = %unlock_bin.exit6
  %80 = bitcast %struct.chunk* %self.0 to i8*
  %81 = load i64* %.pre, align 8, !tbaa !5
  %82 = and i64 %81, -2
  %83 = sub i64 0, %82
  %84 = getelementptr inbounds i8* %80, i64 %83
  %85 = bitcast i8* %84 to %struct.chunk*
  %.sum2 = sub i64 8, %82
  %86 = getelementptr inbounds i8* %80, i64 %.sum2
  %87 = bitcast i8* %86 to i64*
  %88 = load i64* %87, align 8, !tbaa !5
  %89 = and i64 %88, -2
  %90 = add i64 %89, %final_size.0
  %91 = add i64 %89, %22
  %92 = icmp ugt i64 %91, 163840
  %93 = xor i64 %91, %89
  %94 = icmp ugt i64 %93, %89
  %or.cond = and i1 %92, %94
  br i1 %or.cond, label %95, label %96

; <label>:95                                      ; preds = %79
  br label %96

; <label>:96                                      ; preds = %95, %79, %unlock_bin.exit6
  %final_size.1 = phi i64 [ %90, %95 ], [ %90, %79 ], [ %final_size.0, %unlock_bin.exit6 ]
  %self.1 = phi %struct.chunk* [ %85, %95 ], [ %85, %79 ], [ %self.0, %unlock_bin.exit6 ]
  %reclaim.1 = phi i32 [ 1, %95 ], [ %reclaim.0, %79 ], [ %reclaim.0, %unlock_bin.exit6 ]
  %97 = tail call fastcc i32 @alloc_fwd(%struct.chunk* %next.0.ph) optsize
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %30, label %99

; <label>:99                                      ; preds = %96
  %100 = load i64* %25, align 8, !tbaa !5
  %101 = and i64 %100, -2
  %102 = add i64 %101, %final_size.1
  %103 = add i64 %101, %22
  %104 = icmp ugt i64 %103, 163840
  %105 = xor i64 %103, %101
  %106 = icmp ugt i64 %105, %101
  %or.cond5 = and i1 %104, %106
  %reclaim.2 = select i1 %or.cond5, i32 1, i32 %reclaim.1
  %107 = getelementptr inbounds i8* %next.0.ph.in, i64 %101
  br label %.outer

; <label>:108                                     ; preds = %bin_index.exit
  store i64 %final_size.0, i64* %52, align 8, !tbaa !5
  store i64 %final_size.0, i64* %26, align 8, !tbaa !5
  tail call fastcc void @unlock(i32* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 5, i64 0)) optsize
  %109 = sext i32 %.0.i to i64
  %110 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %109, i32 1
  %111 = getelementptr inbounds %struct.chunk** %110, i64 -2
  %112 = bitcast %struct.chunk** %111 to %struct.chunk*
  %113 = getelementptr inbounds %struct.chunk* %self.0, i64 0, i32 2
  store %struct.chunk* %112, %struct.chunk** %113, align 8, !tbaa !7
  %114 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %109, i32 2
  %115 = load %struct.chunk** %114, align 8, !tbaa !7
  %116 = getelementptr inbounds %struct.chunk* %self.0, i64 0, i32 3
  store %struct.chunk* %115, %struct.chunk** %116, align 8, !tbaa !7
  %117 = getelementptr inbounds %struct.chunk** %110, i64 1
  store %struct.chunk* %self.0, %struct.chunk** %117, align 8, !tbaa !7
  %118 = load %struct.chunk** %116, align 8, !tbaa !7
  %119 = getelementptr inbounds %struct.chunk* %118, i64 0, i32 2
  store %struct.chunk* %self.0, %struct.chunk** %119, align 8, !tbaa !7
  %120 = load i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2), align 8, !tbaa !5
  %121 = zext i32 %.0.i to i64
  %122 = shl i64 1, %121
  %123 = and i64 %120, %122
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %a_or_64.exit

; <label>:125                                     ; preds = %108
  %126 = trunc i64 %122 to i32
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %132, %125
  %127 = load volatile i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), align 8, !tbaa !6
  %128 = or i32 %127, %126
  br label %129

; <label>:129                                     ; preds = %132, %a_cas.exit.i.i
  %130 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %127, i32 %128, i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*)) nounwind optsize
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %a_or.exit.i, label %132

; <label>:132                                     ; preds = %129
  %133 = load volatile i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), align 8, !tbaa !6
  %134 = icmp eq i32 %133, %127
  br i1 %134, label %129, label %a_cas.exit.i.i

a_or.exit.i:                                      ; preds = %129
  %135 = lshr i64 %122, 32
  %136 = trunc i64 %135 to i32
  br label %a_cas.exit.i1.i

a_cas.exit.i1.i:                                  ; preds = %142, %a_or.exit.i
  %137 = load volatile i32* getelementptr (i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), i64 1), align 4, !tbaa !6
  %138 = or i32 %137, %136
  br label %139

; <label>:139                                     ; preds = %142, %a_cas.exit.i1.i
  %140 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %137, i32 %138, i32* getelementptr (i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), i64 1)) nounwind optsize
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %a_or_64.exit, label %142

; <label>:142                                     ; preds = %139
  %143 = load volatile i32* getelementptr (i32* bitcast (i64* getelementptr inbounds (%struct.anon.254* @mal, i64 0, i32 2) to i32*), i64 1), align 4, !tbaa !6
  %144 = icmp eq i32 %143, %137
  br i1 %144, label %139, label %a_cas.exit.i1.i

a_or_64.exit:                                     ; preds = %139, %108
  %145 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %unlock_bin.exit, label %147

; <label>:147                                     ; preds = %a_or_64.exit
  %148 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %109, i32 0, i64 0
  tail call fastcc void @unlock(i32* %148) nounwind optsize
  br label %unlock_bin.exit

unlock_bin.exit:                                  ; preds = %147, %a_or_64.exit, %19, %0
  ret void
}

define internal fastcc i32 @alloc_fwd(%struct.chunk* nocapture %c) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.chunk* %c, i64 0, i32 1
  br label %unlock_bin.exit

unlock_bin.exit:                                  ; preds = %30, %27, %0
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = and i64 %2, 1
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %unlock_bin.exit1

; <label>:5                                       ; preds = %unlock_bin.exit
  %6 = lshr i64 %2, 5
  %7 = add i64 %6, -1
  %8 = icmp ult i64 %7, 33
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %5
  %10 = trunc i64 %7 to i32
  br label %bin_index.exit

; <label>:11                                      ; preds = %5
  %12 = icmp ugt i64 %7, 7168
  br i1 %12, label %bin_index.exit, label %13

; <label>:13                                      ; preds = %11
  %14 = trunc i64 %7 to i32
  %15 = sitofp i32 %14 to float
  %16 = bitcast float %15 to i32
  %17 = lshr i32 %16, 21
  %18 = add i32 %17, -496
  br label %bin_index.exit

bin_index.exit:                                   ; preds = %13, %11, %9
  %.0.i = phi i32 [ %10, %9 ], [ %18, %13 ], [ 63, %11 ]
  tail call fastcc void @lock_bin(i32 %.0.i) optsize
  %19 = load i64* %1, align 8, !tbaa !5
  %20 = icmp eq i64 %19, %2
  br i1 %20, label %21, label %27

; <label>:21                                      ; preds = %bin_index.exit
  tail call fastcc void @unbin(%struct.chunk* %c, i32 %.0.i) optsize
  %22 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %unlock_bin.exit1, label %24

; <label>:24                                      ; preds = %21
  %25 = sext i32 %.0.i to i64
  %26 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %25, i32 0, i64 0
  tail call fastcc void @unlock(i32* %26) nounwind optsize
  br label %unlock_bin.exit1

; <label>:27                                      ; preds = %bin_index.exit
  %28 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %unlock_bin.exit, label %30

; <label>:30                                      ; preds = %27
  %31 = sext i32 %.0.i to i64
  %32 = getelementptr inbounds %struct.anon.254* @mal, i64 0, i32 3, i64 %31, i32 0, i64 0
  tail call fastcc void @unlock(i32* %32) nounwind optsize
  br label %unlock_bin.exit

unlock_bin.exit1:                                 ; preds = %24, %21, %unlock_bin.exit
  %.0 = phi i32 [ 1, %21 ], [ 1, %24 ], [ 0, %unlock_bin.exit ]
  ret i32 %.0
}

define internal fastcc void @lock(i32* %lk) nounwind uwtable optsize {
  %1 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %.loopexit, label %a_cas.exit.i.preheader

a_cas.exit.i.preheader:                           ; preds = %0
  %3 = getelementptr inbounds i32* %lk, i64 1
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %12, %8, %a_cas.exit.i.preheader
  %4 = load volatile i32* %lk, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %8, %a_cas.exit.i
  %6 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %4, i32 1, i32* %lk) nounwind optsize
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %a_swap.exit, label %8

; <label>:8                                       ; preds = %5
  %9 = load volatile i32* %lk, align 4, !tbaa !6
  %10 = icmp eq i32 %9, %4
  br i1 %10, label %5, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %5
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %.loopexit, label %12

; <label>:12                                      ; preds = %a_swap.exit
  tail call void @__wait(i32* %lk, i32* %3, i32 1, i32 1) nounwind optsize
  br label %a_cas.exit.i

.loopexit:                                        ; preds = %a_swap.exit, %0
  ret void
}

define internal fastcc void @unlock(i32* %lk) nounwind uwtable optsize {
  %1 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  store volatile i32 0, i32* %lk, align 4, !tbaa !6
  %4 = getelementptr inbounds i32* %lk, i64 1
  %5 = load volatile i32* %4, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

; <label>:7                                       ; preds = %3
  tail call void @__wake(i32* %lk, i32 1, i32 1) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %7, %3, %0
  ret void
}

define i32 @mblen(i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i32 @mbtowc(i32* null, i8* %s, i64 %n) nounwind optsize
  ret i32 %1
}

define i64 @mbrlen(i8* %s, i64 %n, %struct.mbstate_t* %st) nounwind uwtable optsize {
  %1 = icmp ne %struct.mbstate_t* %st, null
  %2 = select i1 %1, %struct.mbstate_t* %st, %struct.mbstate_t* bitcast (i32* @mbrlen.internal to %struct.mbstate_t*)
  %3 = tail call i64 @mbrtowc(i32* null, i8* %s, i64 %n, %struct.mbstate_t* %2) nounwind optsize
  ret i64 %3
}

define i64 @mbrtowc(i32* %wc, i8* %src, i64 %n, %struct.mbstate_t* %st) nounwind uwtable optsize {
  %1 = alloca i32*, align 8
  store i32* %wc, i32** %1, align 8, !tbaa !7
  %2 = icmp eq %struct.mbstate_t* %st, null
  %.02 = select i1 %2, %struct.mbstate_t* bitcast (i32* @mbrtowc.internal_state to %struct.mbstate_t*), %struct.mbstate_t* %st
  %3 = getelementptr inbounds %struct.mbstate_t* %.02, i64 0, i32 0
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp eq i8* %src, null
  br i1 %5, label %.thread, label %7

.thread:                                          ; preds = %0
  %6 = bitcast i32** %1 to i32*
  store i32* %6, i32** %1, align 8, !tbaa !7
  br label %14

; <label>:7                                       ; preds = %0
  %8 = icmp eq i32* %wc, null
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %7
  %10 = bitcast i32** %1 to i32*
  store i32* %10, i32** %1, align 8, !tbaa !7
  br label %11

; <label>:11                                      ; preds = %9, %7
  %12 = phi i32* [ %wc, %7 ], [ %10, %9 ]
  %13 = icmp eq i64 %n, 0
  br i1 %13, label %61, label %14

; <label>:14                                      ; preds = %11, %.thread
  %15 = phi i32* [ %6, %.thread ], [ %12, %11 ]
  %s.04 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str447, i64 0, i64 0), %.thread ], [ %src, %11 ]
  %.013 = phi i64 [ 1, %.thread ], [ %n, %11 ]
  %16 = icmp eq i32 %4, 0
  br i1 %16, label %17, label %.thread5

; <label>:17                                      ; preds = %14
  %18 = load i8* %s.04, align 1, !tbaa !0
  %19 = zext i8 %18 to i32
  %20 = icmp sgt i8 %18, -1
  br i1 %20, label %21, label %24

; <label>:21                                      ; preds = %17
  store i32 %19, i32* %15, align 4, !tbaa !6
  %22 = icmp ne i8 %18, 0
  %23 = zext i1 %22 to i64
  br label %61

; <label>:24                                      ; preds = %17
  %25 = add i32 %19, -194
  %26 = icmp ugt i32 %25, 51
  br i1 %26, label %.loopexit, label %27

; <label>:27                                      ; preds = %24
  %28 = getelementptr inbounds i8* %s.04, i64 1
  %29 = zext i32 %25 to i64
  %30 = getelementptr inbounds [0 x i32]* bitcast ([51 x i32]* @__fsmu8 to [0 x i32]*), i64 0, i64 %29
  %31 = load i32* %30, align 4, !tbaa !6
  %32 = add i64 %.013, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %.loopexit9, label %.thread5

.thread5:                                         ; preds = %27, %14
  %s.18 = phi i8* [ %28, %27 ], [ %s.04, %14 ]
  %.17 = phi i64 [ %32, %27 ], [ %.013, %14 ]
  %c.06 = phi i32 [ %31, %27 ], [ %4, %14 ]
  %34 = load i8* %s.18, align 1, !tbaa !0
  %35 = zext i8 %34 to i32
  %36 = lshr i32 %35, 3
  %37 = add nsw i32 %36, -16
  %38 = ashr i32 %c.06, 26
  %39 = add nsw i32 %36, %38
  %40 = or i32 %37, %39
  %41 = icmp ugt i32 %40, 7
  br i1 %41, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %55, %.thread5
  %42 = phi i8 [ %56, %55 ], [ %34, %.thread5 ]
  %c.1 = phi i32 [ %47, %55 ], [ %c.06, %.thread5 ]
  %.2 = phi i64 [ %48, %55 ], [ %.17, %.thread5 ]
  %s.2 = phi i8* [ %44, %55 ], [ %s.18, %.thread5 ]
  %43 = shl i32 %c.1, 6
  %44 = getelementptr inbounds i8* %s.2, i64 1
  %45 = zext i8 %42 to i32
  %46 = add nsw i32 %45, -128
  %47 = or i32 %46, %43
  %48 = add i64 %.2, -1
  %49 = icmp slt i32 %47, 0
  br i1 %49, label %53, label %50

; <label>:50                                      ; preds = %.preheader
  store i32 0, i32* %3, align 4, !tbaa !6
  store i32 %47, i32* %15, align 4, !tbaa !6
  %51 = and i64 %n, 4294967295
  %52 = sub i64 %51, %48
  br label %61

; <label>:53                                      ; preds = %.preheader
  %54 = icmp eq i64 %48, 0
  br i1 %54, label %.loopexit9, label %55

; <label>:55                                      ; preds = %53
  %56 = load i8* %44, align 1, !tbaa !0
  %57 = zext i8 %56 to i32
  %58 = add i32 %57, -128
  %59 = icmp ugt i32 %58, 63
  br i1 %59, label %.loopexit, label %.preheader

.loopexit9:                                       ; preds = %53, %27
  %c.2 = phi i32 [ %31, %27 ], [ %47, %53 ]
  store i32 %c.2, i32* %3, align 4, !tbaa !6
  br label %61

.loopexit:                                        ; preds = %55, %.thread5, %24
  store i32 -536870912, i32* %3, align 4, !tbaa !6
  %60 = call i32* @__errno_location() nounwind readnone optsize
  store i32 84, i32* %60, align 4, !tbaa !6
  br label %61

; <label>:61                                      ; preds = %.loopexit, %.loopexit9, %50, %21, %11
  %.0 = phi i64 [ -1, %.loopexit ], [ -2, %.loopexit9 ], [ %52, %50 ], [ %23, %21 ], [ -2, %11 ]
  ret i64 %.0
}

define i32 @mbsinit(%struct.mbstate_t* nocapture %st) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.mbstate_t* %st, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i64 @mbsnrtowcs(i32* %wcs, i8** nocapture %src, i64 %n, i64 %wn, %struct.mbstate_t* %st) nounwind uwtable optsize {
.preheader10:
  %wbuf = alloca [256 x i32], align 16
  %s = alloca i8*, align 8
  %0 = load i8** %src, align 8, !tbaa !7
  store i8* %0, i8** %s, align 8, !tbaa !7
  %1 = icmp ne i32* %wcs, null
  %.pre27 = getelementptr inbounds [256 x i32]* %wbuf, i64 0, i64 0
  %wn. = select i1 %1, i64 %wn, i64 256
  %wcs..pre27 = select i1 %1, i32* %wcs, i32* %.pre27
  br label %2

; <label>:2                                       ; preds = %18, %.preheader10
  %3 = phi i8* [ %.pre, %18 ], [ %0, %.preheader10 ]
  %cnt.0 = phi i64 [ %19, %18 ], [ 0, %.preheader10 ]
  %.04 = phi i64 [ %.15, %18 ], [ %wn., %.preheader10 ]
  %.0 = phi i64 [ %10, %18 ], [ %n, %.preheader10 ]
  %ws.0 = phi i32* [ %ws.1, %18 ], [ %wcs..pre27, %.preheader10 ]
  %4 = icmp eq i8* %3, null
  %5 = icmp eq i64 %.04, 0
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %.critedge, label %6

; <label>:6                                       ; preds = %2
  %7 = lshr i64 %.0, 2
  %8 = icmp uge i64 %7, %.04
  %9 = icmp ugt i64 %.0, 131
  %or.cond7 = or i1 %8, %9
  br i1 %or.cond7, label %.critedge2, label %.critedge

.critedge2:                                       ; preds = %6
  %n2.0 = select i1 %8, i64 %.04, i64 %7
  %10 = sub i64 %.0, %n2.0
  %11 = call i64 @mbsrtowcs(i32* %ws.0, i8** %s, i64 %n2.0, %struct.mbstate_t* %st) nounwind optsize
  %12 = icmp eq i64 %11, -1
  br i1 %12, label %.critedge2..critedgethread-pre-split_crit_edge, label %13

.critedge2..critedgethread-pre-split_crit_edge:   ; preds = %.critedge2
  %.pr.pre = load i8** %s, align 8
  br label %.critedge

; <label>:13                                      ; preds = %.critedge2
  %14 = icmp eq i32* %ws.0, %.pre27
  br i1 %14, label %18, label %15

; <label>:15                                      ; preds = %13
  %16 = getelementptr inbounds i32* %ws.0, i64 %11
  %17 = sub i64 %.04, %11
  br label %18

; <label>:18                                      ; preds = %15, %13
  %.15 = phi i64 [ %17, %15 ], [ %.04, %13 ]
  %ws.1 = phi i32* [ %16, %15 ], [ %ws.0, %13 ]
  %19 = add i64 %11, %cnt.0
  %.pre = load i8** %s, align 8, !tbaa !7
  br label %2

.critedge:                                        ; preds = %.critedge2..critedgethread-pre-split_crit_edge, %6, %2
  %20 = phi i8* [ %.pr.pre, %.critedge2..critedgethread-pre-split_crit_edge ], [ %3, %6 ], [ %3, %2 ]
  %cnt.1 = phi i64 [ -1, %.critedge2..critedgethread-pre-split_crit_edge ], [ %cnt.0, %6 ], [ %cnt.0, %2 ]
  %.26 = phi i64 [ 0, %.critedge2..critedgethread-pre-split_crit_edge ], [ %.04, %6 ], [ %.04, %2 ]
  %.1 = phi i64 [ %10, %.critedge2..critedgethread-pre-split_crit_edge ], [ %.0, %6 ], [ %.0, %2 ]
  %21 = icmp eq i8* %20, null
  br i1 %21, label %.critedge3, label %.preheader

.preheader:                                       ; preds = %33, %.critedge
  %22 = phi i8* [ %35, %33 ], [ %20, %.critedge ]
  %cnt.2 = phi i64 [ %39, %33 ], [ %cnt.1, %.critedge ]
  %.3 = phi i64 [ %38, %33 ], [ %.26, %.critedge ]
  %.2 = phi i64 [ %36, %33 ], [ %.1, %.critedge ]
  %ws.2 = phi i32* [ %37, %33 ], [ %ws.0, %.critedge ]
  %23 = icmp eq i64 %.3, 0
  %24 = icmp eq i64 %.2, 0
  %or.cond8 = or i1 %23, %24
  br i1 %or.cond8, label %.critedge3, label %25

; <label>:25                                      ; preds = %.preheader
  %26 = call i64 @mbrtowc(i32* %ws.2, i8* %22, i64 %.2, %struct.mbstate_t* %st) nounwind optsize
  %27 = add i64 %26, 2
  %28 = icmp ult i64 %27, 3
  br i1 %28, label %29, label %33

; <label>:29                                      ; preds = %25
  %30 = icmp eq i64 %26, -1
  br i1 %30, label %.critedge3, label %31

; <label>:31                                      ; preds = %29
  %32 = getelementptr inbounds %struct.mbstate_t* %st, i64 0, i32 0
  store i32 0, i32* %32, align 4, !tbaa !6
  br label %.critedge3

; <label>:33                                      ; preds = %25
  %34 = load i8** %s, align 8, !tbaa !7
  %35 = getelementptr inbounds i8* %34, i64 %26
  store i8* %35, i8** %s, align 8, !tbaa !7
  %36 = sub i64 %.2, %26
  %37 = getelementptr inbounds i32* %ws.2, i64 1
  %38 = add i64 %.3, -1
  %39 = add i64 %cnt.2, 1
  br label %.preheader

.critedge3:                                       ; preds = %31, %29, %.preheader, %.critedge
  %cnt.3 = phi i64 [ %cnt.2, %31 ], [ %cnt.1, %.critedge ], [ -1, %29 ], [ %cnt.2, %.preheader ]
  br i1 %1, label %40, label %42

; <label>:40                                      ; preds = %.critedge3
  %41 = load i8** %s, align 8, !tbaa !7
  store i8* %41, i8** %src, align 8, !tbaa !7
  br label %42

; <label>:42                                      ; preds = %40, %.critedge3
  ret i64 %cnt.3
}

define i64 @mbsrtowcs(i32* %ws, i8** nocapture %src, i64 %wn, %struct.mbstate_t* %st) nounwind uwtable optsize {
  %c = alloca i32, align 4
  %1 = load i8** %src, align 8, !tbaa !7
  %2 = icmp eq %struct.mbstate_t* %st, null
  br i1 %2, label %.thread, label %4

.thread:                                          ; preds = %0
  %3 = bitcast i32* %c to %struct.mbstate_t*
  store i32 0, i32* %c, align 4
  br label %10

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.mbstate_t* %st, i64 0, i32 0
  %6 = load i32* %5, align 4, !tbaa !6
  store i32 %6, i32* %c, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %4
  store i32 0, i32* %5, align 4, !tbaa !6
  %9 = icmp eq i32* %ws, null
  br i1 %9, label %65, label %169

; <label>:10                                      ; preds = %4, %.thread
  %.01220 = phi %struct.mbstate_t* [ %3, %.thread ], [ %st, %4 ]
  %11 = icmp eq i32* %ws, null
  br i1 %11, label %12, label %96

; <label>:12                                      ; preds = %94, %10
  %.01219 = phi %struct.mbstate_t* [ %.01218, %94 ], [ %.01220, %10 ]
  %.05 = phi i64 [ %95, %94 ], [ 0, %10 ]
  %s.0 = phi i8* [ %s.6, %94 ], [ %1, %10 ]
  %13 = load i8* %s.0, align 1, !tbaa !0
  %14 = zext i8 %13 to i32
  %15 = add i32 %14, -194
  %16 = icmp ugt i32 %15, 50
  br i1 %16, label %.preheader38, label %57

.preheader38:                                     ; preds = %31, %12
  %.16 = phi i64 [ %33, %31 ], [ %.05, %12 ]
  %s.1 = phi i8* [ %32, %31 ], [ %s.0, %12 ]
  %17 = ptrtoint i8* %s.1 to i64
  %18 = and i64 %17, 3
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %.critedge.preheader, label %26

.critedge.preheader:                              ; preds = %26, %.preheader38
  %20 = bitcast i8* %s.1 to i32*
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = add i32 %21, -16843009
  %23 = or i32 %22, %21
  %24 = and i32 %23, -2139062144
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %.critedge, label %.preheader25

; <label>:26                                      ; preds = %.preheader38
  %27 = load i8* %s.1, align 1, !tbaa !0
  %28 = zext i8 %27 to i32
  %29 = add i32 %28, -1
  %30 = icmp ult i32 %29, 127
  br i1 %30, label %31, label %.critedge.preheader

; <label>:31                                      ; preds = %26
  %32 = getelementptr inbounds i8* %s.1, i64 1
  %33 = add i64 %.16, 1
  br label %.preheader38

.preheader25:                                     ; preds = %.critedge, %.critedge.preheader
  %.in = phi i32 [ %21, %.critedge.preheader ], [ %41, %.critedge ]
  %s.2.lcssa = phi i8* [ %s.1, %.critedge.preheader ], [ %38, %.critedge ]
  %.27.lcssa = phi i64 [ %.16, %.critedge.preheader ], [ %39, %.critedge ]
  %34 = trunc i32 %.in to i8
  %35 = and i32 %.in, 255
  %36 = add i32 %35, -1
  %37 = icmp ult i32 %36, 127
  br i1 %37, label %.lr.ph, label %._crit_edge

.critedge:                                        ; preds = %.critedge, %.critedge.preheader
  %s.234 = phi i8* [ %38, %.critedge ], [ %s.1, %.critedge.preheader ]
  %.2733 = phi i64 [ %39, %.critedge ], [ %.16, %.critedge.preheader ]
  %38 = getelementptr inbounds i8* %s.234, i64 4
  %39 = add i64 %.2733, 4
  %40 = bitcast i8* %38 to i32*
  %41 = load i32* %40, align 4, !tbaa !6
  %42 = add i32 %41, -16843009
  %43 = or i32 %42, %41
  %44 = and i32 %43, -2139062144
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %.critedge, label %.preheader25

.lr.ph:                                           ; preds = %.lr.ph, %.preheader25
  %s.329 = phi i8* [ %46, %.lr.ph ], [ %s.2.lcssa, %.preheader25 ]
  %.3828 = phi i64 [ %47, %.lr.ph ], [ %.27.lcssa, %.preheader25 ]
  %46 = getelementptr inbounds i8* %s.329, i64 1
  %47 = add i64 %.3828, 1
  %48 = load i8* %46, align 1, !tbaa !0
  %49 = zext i8 %48 to i32
  %50 = add i32 %49, -1
  %51 = icmp ult i32 %50, 127
  br i1 %51, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader25
  %52 = phi i8 [ %34, %.preheader25 ], [ %48, %.lr.ph ]
  %.lcssa27 = phi i32 [ %35, %.preheader25 ], [ %49, %.lr.ph ]
  %s.3.lcssa = phi i8* [ %s.2.lcssa, %.preheader25 ], [ %46, %.lr.ph ]
  %.38.lcssa = phi i64 [ %.27.lcssa, %.preheader25 ], [ %47, %.lr.ph ]
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %216, label %54

; <label>:54                                      ; preds = %._crit_edge
  %55 = add i32 %.lcssa27, -194
  %56 = icmp ugt i32 %55, 50
  br i1 %56, label %213, label %57

; <label>:57                                      ; preds = %54, %12
  %58 = phi i8 [ %52, %54 ], [ %13, %12 ]
  %.49 = phi i64 [ %.38.lcssa, %54 ], [ %.05, %12 ]
  %s.4 = phi i8* [ %s.3.lcssa, %54 ], [ %s.0, %12 ]
  %59 = getelementptr inbounds i8* %s.4, i64 1
  %60 = zext i8 %58 to i64
  %61 = add i64 %60, 4294967102
  %62 = and i64 %61, 4294967295
  %63 = getelementptr inbounds [0 x i32]* bitcast ([51 x i32]* @__fsmu8 to [0 x i32]*), i64 0, i64 %62
  %64 = load i32* %63, align 4, !tbaa !6
  store i32 %64, i32* %c, align 4, !tbaa !6
  br label %65

; <label>:65                                      ; preds = %57, %8
  %66 = phi i32 [ %64, %57 ], [ %6, %8 ]
  %.01218 = phi %struct.mbstate_t* [ %.01219, %57 ], [ %st, %8 ]
  %.510 = phi i64 [ %.49, %57 ], [ 0, %8 ]
  %s.5 = phi i8* [ %59, %57 ], [ %1, %8 ]
  %67 = load i8* %s.5, align 1, !tbaa !0
  %68 = zext i8 %67 to i32
  %69 = lshr i32 %68, 3
  %70 = add nsw i32 %69, -16
  %71 = ashr i32 %66, 26
  %72 = add nsw i32 %69, %71
  %73 = or i32 %70, %72
  %74 = icmp ugt i32 %73, 7
  br i1 %74, label %213, label %75

; <label>:75                                      ; preds = %65
  %76 = getelementptr inbounds i8* %s.5, i64 1
  %77 = shl i32 %66, 6
  store i32 %77, i32* %c, align 4, !tbaa !6
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %94

; <label>:79                                      ; preds = %75
  %80 = getelementptr inbounds i8* %s.5, i64 2
  %81 = load i8* %76, align 1, !tbaa !0
  %82 = zext i8 %81 to i32
  %83 = add i32 %82, -128
  %84 = icmp ugt i32 %83, 63
  br i1 %84, label %213, label %85

; <label>:85                                      ; preds = %79
  %86 = shl i32 %66, 12
  store i32 %86, i32* %c, align 4, !tbaa !6
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %94

; <label>:88                                      ; preds = %85
  %89 = getelementptr inbounds i8* %s.5, i64 3
  %90 = load i8* %80, align 1, !tbaa !0
  %91 = zext i8 %90 to i32
  %92 = add i32 %91, -128
  %93 = icmp ugt i32 %92, 63
  br i1 %93, label %213, label %94

; <label>:94                                      ; preds = %88, %85, %75
  %s.6 = phi i8* [ %89, %88 ], [ %80, %85 ], [ %76, %75 ]
  %95 = add i64 %.510, 1
  store i32 0, i32* %c, align 4, !tbaa !6
  br label %12

; <label>:96                                      ; preds = %204, %10
  %.01217 = phi %struct.mbstate_t* [ %.01216, %204 ], [ %.01220, %10 ]
  %.611 = phi i64 [ %207, %204 ], [ %wn, %10 ]
  %s.7 = phi i8* [ %s.13, %204 ], [ %1, %10 ]
  %.04 = phi i32* [ %206, %204 ], [ %ws, %10 ]
  %97 = icmp eq i64 %.611, 0
  br i1 %97, label %.critedge13, label %98

; <label>:98                                      ; preds = %96
  %99 = load i8* %s.7, align 1, !tbaa !0
  %100 = zext i8 %99 to i32
  %101 = add i32 %100, -194
  %102 = icmp ugt i32 %101, 50
  br i1 %102, label %103, label %161

; <label>:103                                     ; preds = %98
  %104 = icmp ugt i64 %.611, 6
  br i1 %104, label %.preheader, label %.critedge2

.preheader:                                       ; preds = %113, %103
  %.7 = phi i64 [ %116, %113 ], [ %.611, %103 ]
  %s.8 = phi i8* [ %114, %113 ], [ %s.7, %103 ]
  %.1 = phi i32* [ %115, %113 ], [ %.04, %103 ]
  %105 = ptrtoint i8* %s.8 to i64
  %106 = and i64 %105, 3
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %.critedge1, label %108

; <label>:108                                     ; preds = %.preheader
  %109 = load i8* %s.8, align 1, !tbaa !0
  %110 = zext i8 %109 to i32
  %111 = add i32 %110, -1
  %112 = icmp ult i32 %111, 127
  br i1 %112, label %113, label %.critedge1

; <label>:113                                     ; preds = %108
  %114 = getelementptr inbounds i8* %s.8, i64 1
  %115 = getelementptr inbounds i32* %.1, i64 1
  store i32 %110, i32* %.1, align 4, !tbaa !6
  %116 = add i64 %.7, -1
  br label %.preheader

.critedge1:                                       ; preds = %125, %108, %.preheader
  %.8 = phi i64 [ %141, %125 ], [ %.7, %108 ], [ %.7, %.preheader ]
  %s.9 = phi i8* [ %137, %125 ], [ %s.8, %108 ], [ %s.8, %.preheader ]
  %.2 = phi i32* [ %140, %125 ], [ %.1, %108 ], [ %.1, %.preheader ]
  %117 = icmp ugt i64 %.8, 3
  br i1 %117, label %118, label %.critedge2

; <label>:118                                     ; preds = %.critedge1
  %119 = bitcast i8* %s.9 to i32*
  %120 = load i32* %119, align 4, !tbaa !6
  %121 = add i32 %120, -16843009
  %122 = or i32 %121, %120
  %123 = and i32 %122, -2139062144
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %.critedge2

; <label>:125                                     ; preds = %118
  %126 = getelementptr inbounds i8* %s.9, i64 1
  %127 = and i32 %120, 255
  %128 = getelementptr inbounds i32* %.2, i64 1
  store i32 %127, i32* %.2, align 4, !tbaa !6
  %129 = getelementptr inbounds i8* %s.9, i64 2
  %130 = load i8* %126, align 1, !tbaa !0
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds i32* %.2, i64 2
  store i32 %131, i32* %128, align 4, !tbaa !6
  %133 = getelementptr inbounds i8* %s.9, i64 3
  %134 = load i8* %129, align 1, !tbaa !0
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds i32* %.2, i64 3
  store i32 %135, i32* %132, align 4, !tbaa !6
  %137 = getelementptr inbounds i8* %s.9, i64 4
  %138 = load i8* %133, align 1, !tbaa !0
  %139 = zext i8 %138 to i32
  %140 = getelementptr inbounds i32* %.2, i64 4
  store i32 %139, i32* %136, align 4, !tbaa !6
  %141 = add i64 %.8, -4
  br label %.critedge1

.critedge2:                                       ; preds = %148, %118, %.critedge1, %103
  %.9 = phi i64 [ %151, %148 ], [ %.611, %103 ], [ %.8, %.critedge1 ], [ %.8, %118 ]
  %s.10 = phi i8* [ %149, %148 ], [ %s.7, %103 ], [ %s.9, %.critedge1 ], [ %s.9, %118 ]
  %.3 = phi i32* [ %150, %148 ], [ %.04, %103 ], [ %.2, %.critedge1 ], [ %.2, %118 ]
  %142 = icmp eq i64 %.9, 0
  br i1 %142, label %.critedge13, label %143

; <label>:143                                     ; preds = %.critedge2
  %144 = load i8* %s.10, align 1, !tbaa !0
  %145 = zext i8 %144 to i32
  %146 = add i32 %145, -1
  %147 = icmp ult i32 %146, 127
  br i1 %147, label %148, label %.critedge3

; <label>:148                                     ; preds = %143
  %149 = getelementptr inbounds i8* %s.10, i64 1
  %150 = getelementptr inbounds i32* %.3, i64 1
  store i32 %145, i32* %.3, align 4, !tbaa !6
  %151 = add i64 %.9, -1
  br label %.critedge2

.critedge3:                                       ; preds = %143
  %152 = icmp eq i8 %144, 0
  br i1 %152, label %153, label %158

; <label>:153                                     ; preds = %.critedge3
  store i32 0, i32* %.3, align 4, !tbaa !6
  store i8* null, i8** %src, align 8, !tbaa !7
  %154 = ptrtoint i32* %.3 to i64
  %155 = ptrtoint i32* %ws to i64
  %156 = sub i64 %154, %155
  %157 = ashr exact i64 %156, 2
  br label %216

; <label>:158                                     ; preds = %.critedge3
  %159 = add i32 %145, -194
  %160 = icmp ugt i32 %159, 50
  br i1 %160, label %212, label %161

; <label>:161                                     ; preds = %158, %98
  %162 = phi i8 [ %144, %158 ], [ %99, %98 ]
  %.10 = phi i64 [ %.9, %158 ], [ %.611, %98 ]
  %s.11 = phi i8* [ %s.10, %158 ], [ %s.7, %98 ]
  %.4 = phi i32* [ %.3, %158 ], [ %.04, %98 ]
  %163 = getelementptr inbounds i8* %s.11, i64 1
  %164 = zext i8 %162 to i64
  %165 = add i64 %164, 4294967102
  %166 = and i64 %165, 4294967295
  %167 = getelementptr inbounds [0 x i32]* bitcast ([51 x i32]* @__fsmu8 to [0 x i32]*), i64 0, i64 %166
  %168 = load i32* %167, align 4, !tbaa !6
  store i32 %168, i32* %c, align 4, !tbaa !6
  br label %169

; <label>:169                                     ; preds = %161, %8
  %170 = phi i32 [ %6, %8 ], [ %168, %161 ]
  %.01216 = phi %struct.mbstate_t* [ %st, %8 ], [ %.01217, %161 ]
  %.11 = phi i64 [ %wn, %8 ], [ %.10, %161 ]
  %s.12 = phi i8* [ %1, %8 ], [ %163, %161 ]
  %.5 = phi i32* [ %ws, %8 ], [ %.4, %161 ]
  %171 = load i8* %s.12, align 1, !tbaa !0
  %172 = zext i8 %171 to i32
  %173 = lshr i32 %172, 3
  %174 = add nsw i32 %173, -16
  %175 = ashr i32 %170, 26
  %176 = add nsw i32 %173, %175
  %177 = or i32 %174, %176
  %178 = icmp ugt i32 %177, 7
  br i1 %178, label %212, label %179

; <label>:179                                     ; preds = %169
  %180 = shl i32 %170, 6
  %181 = getelementptr inbounds i8* %s.12, i64 1
  %182 = add nsw i32 %172, -128
  %183 = or i32 %180, %182
  store i32 %183, i32* %c, align 4, !tbaa !6
  %184 = icmp slt i32 %183, 0
  br i1 %184, label %185, label %204

; <label>:185                                     ; preds = %179
  %186 = load i8* %181, align 1, !tbaa !0
  %187 = zext i8 %186 to i32
  %188 = add i32 %187, -128
  %189 = icmp ugt i32 %188, 63
  br i1 %189, label %212, label %190

; <label>:190                                     ; preds = %185
  %191 = shl i32 %183, 6
  %192 = getelementptr inbounds i8* %s.12, i64 2
  %193 = or i32 %188, %191
  store i32 %193, i32* %c, align 4, !tbaa !6
  %194 = icmp slt i32 %193, 0
  br i1 %194, label %195, label %204

; <label>:195                                     ; preds = %190
  %196 = load i8* %192, align 1, !tbaa !0
  %197 = zext i8 %196 to i32
  %198 = add i32 %197, -128
  %199 = icmp ugt i32 %198, 63
  br i1 %199, label %212, label %200

; <label>:200                                     ; preds = %195
  %201 = shl i32 %193, 6
  %202 = getelementptr inbounds i8* %s.12, i64 3
  %203 = or i32 %198, %201
  store i32 %203, i32* %c, align 4, !tbaa !6
  br label %204

; <label>:204                                     ; preds = %200, %190, %179
  %205 = phi i32 [ %203, %200 ], [ %193, %190 ], [ %183, %179 ]
  %s.13 = phi i8* [ %202, %200 ], [ %192, %190 ], [ %181, %179 ]
  %206 = getelementptr inbounds i32* %.5, i64 1
  store i32 %205, i32* %.5, align 4, !tbaa !6
  %207 = add i64 %.11, -1
  store i32 0, i32* %c, align 4, !tbaa !6
  br label %96

.critedge13:                                      ; preds = %.critedge2, %96
  %s.14 = phi i8* [ %s.7, %96 ], [ %s.10, %.critedge2 ]
  %.6 = phi i32* [ %.04, %96 ], [ %.3, %.critedge2 ]
  store i8* %s.14, i8** %src, align 8, !tbaa !7
  %208 = ptrtoint i32* %.6 to i64
  %209 = ptrtoint i32* %ws to i64
  %210 = sub i64 %208, %209
  %211 = ashr exact i64 %210, 2
  br label %216

; <label>:212                                     ; preds = %195, %185, %169, %158
  %.01215 = phi %struct.mbstate_t* [ %.01216, %169 ], [ %.01216, %185 ], [ %.01216, %195 ], [ %.01217, %158 ]
  %s.15 = phi i8* [ %s.12, %169 ], [ %181, %185 ], [ %192, %195 ], [ %s.10, %158 ]
  store i8* %s.15, i8** %src, align 8, !tbaa !7
  br label %213

; <label>:213                                     ; preds = %212, %88, %79, %65, %54
  %.01214 = phi %struct.mbstate_t* [ %.01218, %88 ], [ %.01218, %79 ], [ %.01218, %65 ], [ %.01219, %54 ], [ %.01215, %212 ]
  %214 = getelementptr inbounds %struct.mbstate_t* %.01214, i64 0, i32 0
  store i32 -536870912, i32* %214, align 4, !tbaa !6
  %215 = call i32* @__errno_location() nounwind readnone optsize
  store i32 84, i32* %215, align 4, !tbaa !6
  br label %216

; <label>:216                                     ; preds = %213, %.critedge13, %153, %._crit_edge
  %.0 = phi i64 [ -1, %213 ], [ %157, %153 ], [ %211, %.critedge13 ], [ %.38.lcssa, %._crit_edge ]
  ret i64 %.0
}

define i64 @mbstowcs(i32* %ws, i8* %s, i64 %wn) nounwind uwtable optsize {
  %1 = alloca i8*, align 8
  %st = alloca i64, align 8
  %tmpcast = bitcast i64* %st to %struct.mbstate_t*
  store i8* %s, i8** %1, align 8, !tbaa !7
  store i64 0, i64* %st, align 8
  %2 = call i64 @mbsrtowcs(i32* %ws, i8** %1, i64 %wn, %struct.mbstate_t* %tmpcast) nounwind optsize
  ret i64 %2
}

define i32 @mbtowc(i32* %wc, i8* %s, i64 %n) nounwind uwtable optsize {
  %st = alloca i64, align 8
  %tmpcast = bitcast i64* %st to %struct.mbstate_t*
  store i64 0, i64* %st, align 8
  %1 = call i64 @mbrtowc(i32* %wc, i8* %s, i64 %n, %struct.mbstate_t* %tmpcast) nounwind optsize
  %2 = icmp ne i64 %1, -2
  %3 = trunc i64 %1 to i32
  %4 = select i1 %2, i32 %3, i32 -1
  ret i32 %4
}

define i8* @memalign(i64 %align, i64 %len) nounwind uwtable optsize {
  %mem = alloca i8*, align 8
  %1 = call i32 @posix_memalign(i8** %mem, i64 %align, i64 %len) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %1, i32* %4, align 4, !tbaa !6
  br label %7

; <label>:5                                       ; preds = %0
  %6 = load i8** %mem, align 8, !tbaa !7
  br label %7

; <label>:7                                       ; preds = %5, %3
  %.0 = phi i8* [ null, %3 ], [ %6, %5 ]
  ret i8* %.0
}

define i8* @memccpy(i8* %dest, i8* %src, i32 %c, i64 %n) nounwind uwtable optsize {
  %1 = and i32 %c, 255
  %2 = ptrtoint i8* %src to i64
  %3 = ptrtoint i8* %dest to i64
  %4 = xor i64 %2, %3
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %.preheader5, label %.preheader

.preheader5:                                      ; preds = %15, %0
  %s.0 = phi i8* [ %17, %15 ], [ %src, %0 ]
  %d.0 = phi i8* [ %18, %15 ], [ %dest, %0 ]
  %.04 = phi i64 [ %16, %15 ], [ %n, %0 ]
  %7 = ptrtoint i8* %s.0 to i64
  %8 = and i64 %7, 7
  %9 = icmp ne i64 %8, 0
  %.not = xor i1 %9, true
  %10 = icmp eq i64 %.04, 0
  %or.cond = or i1 %10, %.not
  br i1 %or.cond, label %.critedge, label %11

; <label>:11                                      ; preds = %.preheader5
  %12 = load i8* %s.0, align 1, !tbaa !0
  store i8 %12, i8* %d.0, align 1, !tbaa !0
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, %1
  br i1 %14, label %.critedge, label %15

; <label>:15                                      ; preds = %11
  %16 = add i64 %.04, -1
  %17 = getelementptr inbounds i8* %s.0, i64 1
  %18 = getelementptr inbounds i8* %d.0, i64 1
  br label %.preheader5

.critedge:                                        ; preds = %11, %.preheader5
  br i1 %9, label %.critedge3, label %19

; <label>:19                                      ; preds = %.critedge
  %20 = zext i32 %1 to i64
  %21 = mul i64 %20, 72340172838076673
  %22 = bitcast i8* %d.0 to i64*
  %23 = bitcast i8* %s.0 to i64*
  br label %24

; <label>:24                                      ; preds = %34, %19
  %.1 = phi i64 [ %.04, %19 ], [ %35, %34 ]
  %wd.0 = phi i64* [ %22, %19 ], [ %37, %34 ]
  %ws.0 = phi i64* [ %23, %19 ], [ %36, %34 ]
  %25 = icmp ugt i64 %.1, 7
  br i1 %25, label %26, label %.critedge2

; <label>:26                                      ; preds = %24
  %27 = load i64* %ws.0, align 8, !tbaa !5
  %28 = xor i64 %27, %21
  %29 = add i64 %28, -72340172838076673
  %30 = and i64 %28, -9187201950435737472
  %31 = xor i64 %30, -9187201950435737472
  %32 = and i64 %31, %29
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %.critedge2

; <label>:34                                      ; preds = %26
  store i64 %27, i64* %wd.0, align 8, !tbaa !5
  %35 = add i64 %.1, -8
  %36 = getelementptr inbounds i64* %ws.0, i64 1
  %37 = getelementptr inbounds i64* %wd.0, i64 1
  br label %24

.critedge2:                                       ; preds = %26, %24
  %38 = bitcast i64* %wd.0 to i8*
  %39 = bitcast i64* %ws.0 to i8*
  br label %.preheader

.preheader:                                       ; preds = %45, %.critedge2, %0
  %s.1 = phi i8* [ %47, %45 ], [ %src, %0 ], [ %39, %.critedge2 ]
  %d.1 = phi i8* [ %48, %45 ], [ %dest, %0 ], [ %38, %.critedge2 ]
  %.2 = phi i64 [ %46, %45 ], [ %n, %0 ], [ %.1, %.critedge2 ]
  %40 = icmp eq i64 %.2, 0
  br i1 %40, label %.critedge3, label %41

; <label>:41                                      ; preds = %.preheader
  %42 = load i8* %s.1, align 1, !tbaa !0
  store i8 %42, i8* %d.1, align 1, !tbaa !0
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %43, %1
  br i1 %44, label %.critedge3, label %45

; <label>:45                                      ; preds = %41
  %46 = add i64 %.2, -1
  %47 = getelementptr inbounds i8* %s.1, i64 1
  %48 = getelementptr inbounds i8* %d.1, i64 1
  br label %.preheader

.critedge3:                                       ; preds = %41, %.preheader, %.critedge
  %s.2 = phi i8* [ %s.0, %.critedge ], [ %s.1, %.preheader ], [ %s.1, %41 ]
  %d.2 = phi i8* [ %d.0, %.critedge ], [ %d.1, %.preheader ], [ %d.1, %41 ]
  %49 = load i8* %s.2, align 1, !tbaa !0
  %50 = zext i8 %49 to i32
  %51 = icmp eq i32 %50, %1
  %52 = getelementptr inbounds i8* %d.2, i64 1
  %.0 = select i1 %51, i8* %52, i8* null
  ret i8* %.0
}

define i8* @memchr(i8* %src, i32 %c, i64 %n) nounwind uwtable readonly optsize {
  %1 = and i32 %c, 255
  br label %2

; <label>:2                                       ; preds = %11, %0
  %s.0 = phi i8* [ %src, %0 ], [ %12, %11 ]
  %.0 = phi i64 [ %n, %0 ], [ %13, %11 ]
  %3 = ptrtoint i8* %s.0 to i64
  %4 = and i64 %3, 7
  %5 = icmp eq i64 %4, 0
  %6 = icmp eq i64 %.0, 0
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %.critedge, label %7

; <label>:7                                       ; preds = %2
  %8 = load i8* %s.0, align 1, !tbaa !0
  %9 = zext i8 %8 to i32
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %.critedge, label %11

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds i8* %s.0, i64 1
  %13 = add i64 %.0, -1
  br label %2

.critedge:                                        ; preds = %7, %2
  br i1 %6, label %.critedge3, label %14

; <label>:14                                      ; preds = %.critedge
  %15 = load i8* %s.0, align 1, !tbaa !0
  %16 = zext i8 %15 to i32
  %17 = icmp eq i32 %16, %1
  br i1 %17, label %.critedge3, label %18

; <label>:18                                      ; preds = %14
  %19 = zext i32 %1 to i64
  %20 = mul i64 %19, 72340172838076673
  %21 = bitcast i8* %s.0 to i64*
  br label %22

; <label>:22                                      ; preds = %32, %18
  %.1 = phi i64 [ %.0, %18 ], [ %34, %32 ]
  %w.0 = phi i64* [ %21, %18 ], [ %33, %32 ]
  %23 = icmp ugt i64 %.1, 7
  br i1 %23, label %24, label %.critedge2

; <label>:24                                      ; preds = %22
  %25 = load i64* %w.0, align 8, !tbaa !5
  %26 = xor i64 %25, %20
  %27 = add i64 %26, -72340172838076673
  %28 = and i64 %26, -9187201950435737472
  %29 = xor i64 %28, -9187201950435737472
  %30 = and i64 %29, %27
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %.critedge2

; <label>:32                                      ; preds = %24
  %33 = getelementptr inbounds i64* %w.0, i64 1
  %34 = add i64 %.1, -8
  br label %22

.critedge2:                                       ; preds = %24, %22
  %35 = bitcast i64* %w.0 to i8*
  br label %36

; <label>:36                                      ; preds = %42, %.critedge2
  %s.1 = phi i8* [ %35, %.critedge2 ], [ %43, %42 ]
  %.2 = phi i64 [ %.1, %.critedge2 ], [ %44, %42 ]
  %37 = icmp eq i64 %.2, 0
  br i1 %37, label %.critedge3, label %38

; <label>:38                                      ; preds = %36
  %39 = load i8* %s.1, align 1, !tbaa !0
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %40, %1
  br i1 %41, label %.critedge3, label %42

; <label>:42                                      ; preds = %38
  %43 = getelementptr inbounds i8* %s.1, i64 1
  %44 = add i64 %.2, -1
  br label %36

.critedge3:                                       ; preds = %38, %36, %14, %.critedge
  %s.2 = phi i8* [ %s.0, %14 ], [ %s.0, %.critedge ], [ %s.1, %36 ], [ %s.1, %38 ]
  %.3 = phi i64 [ %.0, %14 ], [ 0, %.critedge ], [ 0, %36 ], [ %.2, %38 ]
  %45 = icmp ne i64 %.3, 0
  %46 = select i1 %45, i8* %s.2, i8* null
  ret i8* %46
}

define i32 @memcmp(i8* nocapture %vl, i8* nocapture %vr, i64 %n) nounwind uwtable readonly optsize {
  br label %1

; <label>:1                                       ; preds = %7, %0
  %.0 = phi i64 [ %n, %0 ], [ %8, %7 ]
  %l.0 = phi i8* [ %vl, %0 ], [ %9, %7 ]
  %r.0 = phi i8* [ %vr, %0 ], [ %10, %7 ]
  %2 = icmp eq i64 %.0, 0
  br i1 %2, label %.critedge1, label %3

; <label>:3                                       ; preds = %1
  %4 = load i8* %l.0, align 1, !tbaa !0
  %5 = load i8* %r.0, align 1, !tbaa !0
  %6 = icmp eq i8 %4, %5
  br i1 %6, label %7, label %.critedge

; <label>:7                                       ; preds = %3
  %8 = add i64 %.0, -1
  %9 = getelementptr inbounds i8* %l.0, i64 1
  %10 = getelementptr inbounds i8* %r.0, i64 1
  br label %1

.critedge:                                        ; preds = %3
  %11 = zext i8 %4 to i32
  %12 = zext i8 %5 to i32
  %13 = sub nsw i32 %11, %12
  br label %.critedge1

.critedge1:                                       ; preds = %.critedge, %1
  %14 = phi i32 [ %13, %.critedge ], [ 0, %1 ]
  ret i32 %14
}

define i8* @memcpy(i8* %dest, i8* %src, i64 %n) nounwind uwtable optsize {
  %1 = ptrtoint i8* %dest to i64
  %2 = ptrtoint i8* %src to i64
  %3 = xor i64 %2, %1
  %4 = and i64 %3, 7
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %.preheader10, label %.preheader

.preheader10:                                     ; preds = %0
  %6 = and i64 %1, 7
  %7 = icmp eq i64 %6, 0
  %8 = icmp eq i64 %n, 0
  %or.cond11 = or i1 %7, %8
  br i1 %or.cond11, label %.critedge, label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15, %.preheader10
  %.014 = phi i64 [ %12, %.lr.ph15 ], [ %n, %.preheader10 ]
  %d.013 = phi i8* [ %11, %.lr.ph15 ], [ %dest, %.preheader10 ]
  %s.012 = phi i8* [ %9, %.lr.ph15 ], [ %src, %.preheader10 ]
  %9 = getelementptr inbounds i8* %s.012, i64 1
  %10 = load i8* %s.012, align 1, !tbaa !0
  %11 = getelementptr inbounds i8* %d.013, i64 1
  store i8 %10, i8* %d.013, align 1, !tbaa !0
  %12 = add i64 %.014, -1
  %13 = ptrtoint i8* %11 to i64
  %14 = and i64 %13, 7
  %15 = icmp eq i64 %14, 0
  %16 = icmp eq i64 %12, 0
  %or.cond = or i1 %15, %16
  br i1 %or.cond, label %.critedge, label %.lr.ph15

.critedge:                                        ; preds = %.lr.ph15, %.preheader10
  %.lcssa = phi i1 [ %8, %.preheader10 ], [ %16, %.lr.ph15 ]
  %.0.lcssa = phi i64 [ %n, %.preheader10 ], [ %12, %.lr.ph15 ]
  %d.0.lcssa = phi i8* [ %dest, %.preheader10 ], [ %11, %.lr.ph15 ]
  %s.0.lcssa = phi i8* [ %src, %.preheader10 ], [ %9, %.lr.ph15 ]
  br i1 %.lcssa, label %.loopexit, label %17

; <label>:17                                      ; preds = %.critedge
  %18 = bitcast i8* %d.0.lcssa to i64*
  %19 = bitcast i8* %s.0.lcssa to i64*
  %20 = icmp ugt i64 %.0.lcssa, 7
  br i1 %20, label %.lr.ph7, label %._crit_edge

.lr.ph7:                                          ; preds = %.lr.ph7, %17
  %ws.06 = phi i64* [ %21, %.lr.ph7 ], [ %19, %17 ]
  %wd.05 = phi i64* [ %23, %.lr.ph7 ], [ %18, %17 ]
  %.14 = phi i64 [ %24, %.lr.ph7 ], [ %.0.lcssa, %17 ]
  %21 = getelementptr inbounds i64* %ws.06, i64 1
  %22 = load i64* %ws.06, align 8, !tbaa !5
  %23 = getelementptr inbounds i64* %wd.05, i64 1
  store i64 %22, i64* %wd.05, align 8, !tbaa !5
  %24 = add i64 %.14, -8
  %25 = icmp ugt i64 %24, 7
  br i1 %25, label %.lr.ph7, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph7, %17
  %ws.0.lcssa = phi i64* [ %19, %17 ], [ %21, %.lr.ph7 ]
  %wd.0.lcssa = phi i64* [ %18, %17 ], [ %23, %.lr.ph7 ]
  %.1.lcssa = phi i64 [ %.0.lcssa, %17 ], [ %24, %.lr.ph7 ]
  %26 = bitcast i64* %wd.0.lcssa to i8*
  %27 = bitcast i64* %ws.0.lcssa to i8*
  br label %.preheader

.preheader:                                       ; preds = %._crit_edge, %0
  %s.1.ph = phi i8* [ %src, %0 ], [ %27, %._crit_edge ]
  %d.1.ph = phi i8* [ %dest, %0 ], [ %26, %._crit_edge ]
  %.2.ph = phi i64 [ %n, %0 ], [ %.1.lcssa, %._crit_edge ]
  %28 = icmp eq i64 %.2.ph, 0
  br i1 %28, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.23 = phi i64 [ %32, %.lr.ph ], [ %.2.ph, %.preheader ]
  %d.12 = phi i8* [ %31, %.lr.ph ], [ %d.1.ph, %.preheader ]
  %s.11 = phi i8* [ %29, %.lr.ph ], [ %s.1.ph, %.preheader ]
  %29 = getelementptr inbounds i8* %s.11, i64 1
  %30 = load i8* %s.11, align 1, !tbaa !0
  %31 = getelementptr inbounds i8* %d.12, i64 1
  store i8 %30, i8* %d.12, align 1, !tbaa !0
  %32 = add i64 %.23, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %.loopexit, label %.lr.ph

.loopexit:                                        ; preds = %.lr.ph, %.preheader, %.critedge
  ret i8* %dest
}

define i8* @memmove(i8* %dest, i8* %src, i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i8* %dest, %src
  br i1 %1, label %.loopexit, label %2

; <label>:2                                       ; preds = %0
  %3 = ptrtoint i8* %dest to i64
  %4 = ptrtoint i8* %src to i64
  %5 = sub i64 %3, %4
  %6 = icmp ult i64 %5, %n
  br i1 %6, label %.preheader, label %13

.preheader:                                       ; preds = %2
  %7 = icmp eq i64 %n, 0
  br i1 %7, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.in = phi i64 [ %8, %.lr.ph ], [ %n, %.preheader ]
  %8 = add i64 %.in, -1
  %9 = getelementptr inbounds i8* %src, i64 %8
  %10 = load i8* %9, align 1, !tbaa !0
  %11 = getelementptr inbounds i8* %dest, i64 %8
  store i8 %10, i8* %11, align 1, !tbaa !0
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %.loopexit, label %.lr.ph

; <label>:13                                      ; preds = %2
  %14 = tail call i8* @memcpy(i8* %dest, i8* %src, i64 %n) nounwind optsize
  br label %.loopexit

.loopexit:                                        ; preds = %13, %.lr.ph, %.preheader, %0
  %.0 = phi i8* [ %14, %13 ], [ %dest, %0 ], [ %dest, %.lr.ph ], [ %dest, %.preheader ]
  ret i8* %.0
}

define i8* @mempcpy(i8* %dest, i8* %src, i64 %n) nounwind uwtable optsize {
  %1 = tail call i8* @memcpy(i8* %dest, i8* %src, i64 %n) nounwind optsize
  %2 = getelementptr inbounds i8* %dest, i64 %n
  ret i8* %2
}

define i8* @__memrchr(i8* %m, i32 %c, i64 %n) nounwind uwtable readonly optsize {
  %1 = and i32 %c, 255
  br label %2

; <label>:2                                       ; preds = %5, %0
  %.01 = phi i64 [ %n, %0 ], [ %3, %5 ]
  %3 = add i64 %.01, -1
  %4 = icmp eq i64 %.01, 0
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %2
  %6 = getelementptr inbounds i8* %m, i64 %3
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = zext i8 %7 to i32
  %9 = icmp eq i32 %8, %1
  br i1 %9, label %10, label %2

; <label>:10                                      ; preds = %5, %2
  %.0 = phi i8* [ %6, %5 ], [ null, %2 ]
  ret i8* %.0
}

define i8* @memset(i8* %dest, i32 %c, i64 %n) nounwind uwtable optsize {
  %1 = and i32 %c, 255
  %2 = ptrtoint i8* %dest to i64
  %3 = and i64 %2, 7
  %4 = icmp eq i64 %3, 0
  %5 = icmp eq i64 %n, 0
  %or.cond7 = or i1 %4, %5
  br i1 %or.cond7, label %.critedge, label %.lr.ph11

.lr.ph11:                                         ; preds = %0
  %6 = trunc i32 %c to i8
  br label %7

; <label>:7                                       ; preds = %7, %.lr.ph11
  %.09 = phi i64 [ %n, %.lr.ph11 ], [ %9, %7 ]
  %s.08 = phi i8* [ %dest, %.lr.ph11 ], [ %8, %7 ]
  %8 = getelementptr inbounds i8* %s.08, i64 1
  store i8 %6, i8* %s.08, align 1, !tbaa !0
  %9 = add i64 %.09, -1
  %10 = ptrtoint i8* %8 to i64
  %11 = and i64 %10, 7
  %12 = icmp eq i64 %11, 0
  %13 = icmp eq i64 %9, 0
  %or.cond = or i1 %12, %13
  br i1 %or.cond, label %.critedge, label %7

.critedge:                                        ; preds = %7, %0
  %.lcssa = phi i1 [ %5, %0 ], [ %13, %7 ]
  %.0.lcssa = phi i64 [ %n, %0 ], [ %9, %7 ]
  %s.0.lcssa = phi i8* [ %dest, %0 ], [ %8, %7 ]
  br i1 %.lcssa, label %.loopexit, label %14

; <label>:14                                      ; preds = %.critedge
  %15 = zext i32 %1 to i64
  %16 = mul i64 %15, 72340172838076673
  %17 = bitcast i8* %s.0.lcssa to i64*
  %18 = icmp ugt i64 %.0.lcssa, 7
  br i1 %18, label %.lr.ph5, label %._crit_edge

.lr.ph5:                                          ; preds = %.lr.ph5, %14
  %w.04 = phi i64* [ %20, %.lr.ph5 ], [ %17, %14 ]
  %.13 = phi i64 [ %19, %.lr.ph5 ], [ %.0.lcssa, %14 ]
  store i64 %16, i64* %w.04, align 8, !tbaa !5
  %19 = add i64 %.13, -8
  %20 = getelementptr inbounds i64* %w.04, i64 1
  %21 = icmp ugt i64 %19, 7
  br i1 %21, label %.lr.ph5, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph5, %14
  %w.0.lcssa = phi i64* [ %17, %14 ], [ %20, %.lr.ph5 ]
  %.1.lcssa = phi i64 [ %.0.lcssa, %14 ], [ %19, %.lr.ph5 ]
  %22 = icmp eq i64 %.1.lcssa, 0
  br i1 %22, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %._crit_edge
  %23 = bitcast i64* %w.0.lcssa to i8*
  %24 = trunc i32 %c to i8
  br label %25

; <label>:25                                      ; preds = %25, %.lr.ph
  %.22 = phi i64 [ %.1.lcssa, %.lr.ph ], [ %26, %25 ]
  %s.11 = phi i8* [ %23, %.lr.ph ], [ %27, %25 ]
  store i8 %24, i8* %s.11, align 1, !tbaa !0
  %26 = add i64 %.22, -1
  %27 = getelementptr inbounds i8* %s.11, i64 1
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %.loopexit, label %25

.loopexit:                                        ; preds = %25, %._crit_edge, %.critedge
  ret i8* %dest
}

define i32 @mkdirat(i32 %fd, i8* %path, i32 %mode) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = zext i32 %mode to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 323, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @mkdir(i8* %path, i32 %mode) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = zext i32 %mode to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 39, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i8* @mkdtemp(i8* %template) nounwind uwtable optsize {
  %1 = load i8* %template, align 1, !tbaa !0
  br label %2

; <label>:2                                       ; preds = %16, %0
  %retries.0 = phi i32 [ 100, %0 ], [ %3, %16 ]
  %3 = add nsw i32 %retries.0, -1
  %4 = icmp eq i32 %retries.0, 0
  br i1 %4, label %20, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i8* @__mktemp(i8* %template) nounwind optsize
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %20, label %9

; <label>:9                                       ; preds = %5
  %10 = tail call i32 @mkdir(i8* %template, i32 448) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %20, label %12

; <label>:12                                      ; preds = %9
  %13 = tail call i32* @__errno_location() nounwind readnone optsize
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = icmp eq i32 %14, 17
  br i1 %15, label %16, label %20

; <label>:16                                      ; preds = %12
  store i8 %1, i8* %template, align 1, !tbaa !0
  %17 = tail call i64 @strlen(i8* %template) nounwind optsize
  %.sum = add i64 %17, -6
  %18 = getelementptr inbounds i8* %template, i64 %.sum
  %19 = tail call i8* @strcpy(i8* %18, i8* getelementptr inbounds ([7 x i8]* @.str468, i64 0, i64 0)) nounwind optsize
  br label %2

; <label>:20                                      ; preds = %12, %9, %5, %2
  %.0 = phi i8* [ null, %5 ], [ %template, %9 ], [ null, %12 ], [ null, %2 ]
  ret i8* %.0
}

define i32 @mkfifoat(i32 %fd, i8* %path, i32 %mode) nounwind uwtable optsize {
  %1 = or i32 %mode, 4096
  %2 = tail call i32 @mknodat(i32 %fd, i8* %path, i32 %1, i64 0) nounwind optsize
  ret i32 %2
}

define i32 @mkfifo(i8* %path, i32 %mode) nounwind uwtable optsize {
  %1 = or i32 %mode, 4096
  %2 = tail call i32 @mknod(i8* %path, i32 %1, i64 0) nounwind optsize
  ret i32 %2
}

define i32 @mknodat(i32 %fd, i8* %path, i32 %mode, i64 %dev) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = zext i32 %mode to i64
  %4 = and i64 %dev, 65535
  %5 = tail call i64 (i64, ...)* @__syscall(i64 324, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @mknod(i8* %path, i32 %mode, i64 %dev) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = zext i32 %mode to i64
  %3 = and i64 %dev, 65535
  %4 = tail call i64 (i64, ...)* @__syscall(i64 14, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @mkstemp(i8* %template) nounwind uwtable optsize {
  %1 = load i8* %template, align 1, !tbaa !0
  br label %2

; <label>:2                                       ; preds = %16, %0
  %retries.0 = phi i32 [ 100, %0 ], [ %3, %16 ]
  %3 = add nsw i32 %retries.0, -1
  %4 = icmp eq i32 %retries.0, 0
  br i1 %4, label %20, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i8* @__mktemp(i8* %template) nounwind optsize
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %20, label %9

; <label>:9                                       ; preds = %5
  %10 = tail call i32 (i8*, i32, ...)* @open(i8* %template, i32 194, i32 384) nounwind optsize
  %11 = icmp sgt i32 %10, -1
  br i1 %11, label %20, label %12

; <label>:12                                      ; preds = %9
  %13 = tail call i32* @__errno_location() nounwind readnone optsize
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = icmp eq i32 %14, 17
  br i1 %15, label %16, label %20

; <label>:16                                      ; preds = %12
  store i8 %1, i8* %template, align 1, !tbaa !0
  %17 = tail call i64 @strlen(i8* %template) nounwind optsize
  %.sum = add i64 %17, -6
  %18 = getelementptr inbounds i8* %template, i64 %.sum
  %19 = tail call i8* @strcpy(i8* %18, i8* getelementptr inbounds ([7 x i8]* @.str473, i64 0, i64 0)) nounwind optsize
  br label %2

; <label>:20                                      ; preds = %12, %9, %5, %2
  %.0 = phi i32 [ -1, %5 ], [ %10, %9 ], [ -1, %12 ], [ -1, %2 ]
  ret i32 %.0
}

define i8* @__mktemp(i8* %template) nounwind uwtable optsize {
  %ts = alloca %struct.timespec.29, align 8
  %1 = call i64 @strlen(i8* %template) nounwind optsize
  %2 = icmp ult i64 %1, 6
  br i1 %2, label %12, label %3

; <label>:3                                       ; preds = %0
  %.sum = add i64 %1, -6
  %4 = getelementptr inbounds i8* %template, i64 %.sum
  %5 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([7 x i8]* @.str474, i64 0, i64 0)) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.preheader, label %12

.preheader:                                       ; preds = %3
  %7 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %8 = ptrtoint %struct.timespec.29* %ts to i64
  %9 = lshr i64 %8, 4
  %10 = ptrtoint i8* %template to i64
  %11 = add i64 %9, %10
  br label %14

; <label>:12                                      ; preds = %3, %0
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %13, align 4, !tbaa !6
  store i8 0, i8* %template, align 1, !tbaa !0
  br label %.loopexit

; <label>:14                                      ; preds = %29, %.preheader
  %retries.0 = phi i32 [ %15, %29 ], [ 10000, %.preheader ]
  %15 = add nsw i32 %retries.0, -1
  %16 = icmp eq i32 %retries.0, 0
  br i1 %16, label %32, label %17

; <label>:17                                      ; preds = %14
  %18 = call i32 @clock_gettime(i32 0, %struct.timespec.29* %ts) nounwind optsize
  %19 = load i64* %7, align 8, !tbaa !5
  %20 = add i64 %11, %19
  br label %21

; <label>:21                                      ; preds = %21, %17
  %r.02 = phi i64 [ %20, %17 ], [ %28, %21 ]
  %i.01 = phi i64 [ 1, %17 ], [ %27, %21 ]
  %22 = and i64 %r.02, 15
  %23 = add i64 %22, 65
  %24 = trunc i64 %23 to i8
  %25 = sub i64 %1, %i.01
  %26 = getelementptr inbounds i8* %template, i64 %25
  store i8 %24, i8* %26, align 1, !tbaa !0
  %27 = add i64 %i.01, 1
  %28 = lshr i64 %r.02, 4
  %exitcond = icmp eq i64 %27, 7
  br i1 %exitcond, label %29, label %21

; <label>:29                                      ; preds = %21
  %30 = call i32 @access(i8* %template, i32 0) nounwind optsize
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %.loopexit, label %14

; <label>:32                                      ; preds = %14
  store i8 0, i8* %template, align 1, !tbaa !0
  %33 = call i32* @__errno_location() nounwind readnone optsize
  store i32 17, i32* %33, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %32, %29, %12
  ret i8* %template
}

define i64 @mktime(%struct.tm.197* %tm) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 8
  %2 = load i32* %1, align 4, !tbaa !6
  tail call void @__tzset() nounwind optsize
  %3 = load i64* @__timezone, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 0
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = zext i32 %5 to i64
  %7 = add nsw i64 %6, %3
  %8 = trunc i64 %7 to i32
  store i32 %8, i32* %4, align 4, !tbaa !6
  %9 = icmp sgt i32 %2, 0
  br i1 %9, label %14, label %10

; <label>:10                                      ; preds = %0
  %11 = tail call i64 @__tm_to_time(%struct.tm.197* %tm) nounwind optsize
  %12 = load i64* @__timezone, align 8, !tbaa !5
  %13 = sub nsw i64 %11, %12
  br label %23

; <label>:14                                      ; preds = %0
  %15 = load i32* @__dst_offset, align 4, !tbaa !6
  %16 = add nsw i32 %15, %8
  store i32 %16, i32* %4, align 4, !tbaa !6
  %17 = tail call i64 @__tm_to_time(%struct.tm.197* %tm) nounwind optsize
  %18 = load i64* @__timezone, align 8, !tbaa !5
  %19 = load i32* @__dst_offset, align 4, !tbaa !6
  %20 = sext i32 %19 to i64
  %21 = sub i64 %17, %18
  %22 = sub i64 %21, %20
  br label %23

; <label>:23                                      ; preds = %14, %10
  %24 = phi i64 [ %17, %14 ], [ %11, %10 ]
  %lt.0 = phi i64 [ %22, %14 ], [ %13, %10 ]
  %25 = tail call %struct.tm.197* @__time_to_tm(i64 %lt.0, %struct.tm.197* %tm) nounwind optsize
  %26 = tail call %struct.tm.197* bitcast (%struct.tm* (%struct.tm*)* @__dst_adjust to %struct.tm.197* (%struct.tm.197*)*)(%struct.tm.197* %tm) nounwind optsize
  ret i64 %24
}

define i32 @mlockall(i32 %flags) nounwind uwtable optsize {
  %1 = sext i32 %flags to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 152, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @mlock(i8* %addr, i64 %len) nounwind uwtable optsize {
  %1 = ptrtoint i8* %addr to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 150, i64 %1, i64 %len, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define internal void @dummy1(i32 %x) nounwind uwtable readnone {
  ret void
}

define internal void @dummy0() nounwind uwtable readnone {
  ret void
}

define i8* @__mmap(i8* %start, i64 %len, i32 %prot, i32 %flags, i32 %fd, i64 %off) nounwind uwtable optsize {
  %1 = and i32 %flags, 16
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  tail call void @__vm_lock(i32 -1) nounwind optsize
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = ptrtoint i8* %start to i64
  %6 = sext i32 %prot to i64
  %7 = sext i32 %flags to i64
  %8 = sext i32 %fd to i64
  %9 = ashr i64 %off, 12
  %10 = tail call i64 (i64, ...)* @__syscall(i64 192, i64 %5, i64 %len, i64 %6, i64 %7, i64 %8, i64 %9) nounwind optsize
  %11 = tail call i64 @__syscall_ret(i64 %10) nounwind optsize
  %12 = inttoptr i64 %11 to i8*
  br i1 %2, label %13, label %14

; <label>:13                                      ; preds = %4
  tail call void @__vm_unlock() nounwind optsize
  br label %14

; <label>:14                                      ; preds = %13, %4
  ret i8* %12
}

define %struct.__FILE_s.61* @setmntent(i8* %name, i8* %mode) nounwind uwtable optsize {
  %1 = tail call %struct.__FILE_s.61* @fopen(i8* %name, i8* %mode) nounwind optsize
  ret %struct.__FILE_s.61* %1
}

define i32 @endmntent(%struct.__FILE_s.61* %f) nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %f) nounwind optsize
  ret i32 1
}

define %struct.mntent* @getmntent_r(%struct.__FILE_s.61* %f, %struct.mntent* %mnt, i8* %linebuf, i32 %buflen) nounwind uwtable optsize {
  %n8 = alloca [4 x i64], align 16
  %n8.sub = getelementptr inbounds [4 x i64]* %n8, i64 0, i64 0
  %tmpcast = bitcast [4 x i64]* %n8 to [8 x i32]*
  %1 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 4
  store i32 0, i32* %1, align 4, !tbaa !6
  %2 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 5
  store i32 0, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds [8 x i32]* %tmpcast, i64 0, i64 1
  %4 = getelementptr inbounds [4 x i64]* %n8, i64 0, i64 1
  %5 = bitcast i64* %4 to i32*
  %6 = getelementptr inbounds [8 x i32]* %tmpcast, i64 0, i64 3
  %7 = getelementptr inbounds [4 x i64]* %n8, i64 0, i64 2
  %8 = bitcast i64* %7 to i32*
  %9 = getelementptr inbounds [8 x i32]* %tmpcast, i64 0, i64 5
  %10 = getelementptr inbounds [4 x i64]* %n8, i64 0, i64 3
  %11 = bitcast i64* %10 to i32*
  %12 = getelementptr inbounds [8 x i32]* %tmpcast, i64 0, i64 7
  br label %.critedge

.critedge:                                        ; preds = %28, %25, %0
  %13 = call i8* bitcast (i8* (i8*, i32, %struct.__FILE_s.37*)* @fgets to i8* (i8*, i32, %struct.__FILE_s.61*)*)(i8* %linebuf, i32 %buflen, %struct.__FILE_s.61* %f) nounwind optsize
  %14 = call i32 bitcast (i32 (%struct.__FILE_s.64*)* @feof to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %f) nounwind optsize
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %.loopexit

; <label>:16                                      ; preds = %.critedge
  %17 = call i32 bitcast (i32 (%struct.__FILE_s.65*)* @ferror to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %f) nounwind optsize
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %.loopexit

; <label>:19                                      ; preds = %16
  %20 = call i8* @strchr(i8* %linebuf, i32 10) nounwind optsize
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %19
  %23 = call i32 (%struct.__FILE_s.61*, i8*, ...)* bitcast (i32 (%struct.__FILE_s.94*, i8*, ...)* @fscanf to i32 (%struct.__FILE_s.61*, i8*, ...)*)(%struct.__FILE_s.61* %f, i8* getelementptr inbounds ([12 x i8]* @.str479, i64 0, i64 0)) nounwind optsize
  %24 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %24, align 4, !tbaa !6
  br label %.loopexit

; <label>:25                                      ; preds = %19
  %26 = call i32 (i8*, i8*, ...)* @sscanf(i8* %linebuf, i8* getelementptr inbounds ([39 x i8]* @.str1480, i64 0, i64 0), [4 x i64]* %n8, i32* %3, i64* %4, i32* %6, i64* %7, i32* %9, i64* %10, i32* %12, i32* %1, i32* %2) nounwind optsize
  %27 = icmp slt i32 %26, 2
  br i1 %27, label %.critedge, label %28

; <label>:28                                      ; preds = %25
  %29 = load i64* %n8.sub, align 16
  %sext = shl i64 %29, 32
  %30 = ashr exact i64 %sext, 32
  %31 = getelementptr inbounds i8* %linebuf, i64 %30
  %32 = load i8* %31, align 1, !tbaa !0
  %33 = icmp eq i8 %32, 35
  br i1 %33, label %.critedge, label %34

; <label>:34                                      ; preds = %28
  %35 = ashr i64 %29, 32
  %36 = getelementptr inbounds i8* %linebuf, i64 %35
  store i8 0, i8* %36, align 1, !tbaa !0
  %37 = load i32* %6, align 4, !tbaa !6
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8* %linebuf, i64 %38
  store i8 0, i8* %39, align 1, !tbaa !0
  %40 = load i32* %9, align 4, !tbaa !6
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8* %linebuf, i64 %41
  store i8 0, i8* %42, align 1, !tbaa !0
  %43 = load i32* %12, align 4, !tbaa !6
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8* %linebuf, i64 %44
  store i8 0, i8* %45, align 1, !tbaa !0
  %46 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 0
  store i8* %31, i8** %46, align 8, !tbaa !7
  %47 = load i32* %5, align 8, !tbaa !6
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8* %linebuf, i64 %48
  %50 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 1
  store i8* %49, i8** %50, align 8, !tbaa !7
  %51 = load i32* %8, align 16, !tbaa !6
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8* %linebuf, i64 %52
  %54 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 2
  store i8* %53, i8** %54, align 8, !tbaa !7
  %55 = load i32* %11, align 8, !tbaa !6
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8* %linebuf, i64 %56
  %58 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 3
  store i8* %57, i8** %58, align 8, !tbaa !7
  br label %.loopexit

.loopexit:                                        ; preds = %34, %22, %16, %.critedge
  %.0 = phi %struct.mntent* [ %mnt, %34 ], [ null, %22 ], [ null, %16 ], [ null, %.critedge ]
  ret %struct.mntent* %.0
}

define %struct.mntent* @getmntent(%struct.__FILE_s.61* %f) nounwind uwtable optsize {
  %1 = tail call %struct.mntent* @getmntent_r(%struct.__FILE_s.61* %f, %struct.mntent* @getmntent.mnt, i8* getelementptr inbounds ([256 x i8]* @getmntent.linebuf, i64 0, i64 0), i32 256) optsize
  ret %struct.mntent* %1
}

define i32 @addmntent(%struct.__FILE_s.61* %f, %struct.mntent* nocapture %mnt) nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (%struct.__FILE_s.96*, i64, i32)* @fseek to i32 (%struct.__FILE_s.61*, i64, i32)*)(%struct.__FILE_s.61* %f, i64 0, i32 2) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %17

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 0
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 1
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 2
  %9 = load i8** %8, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 3
  %11 = load i8** %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 4
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 5
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = tail call i32 (%struct.__FILE_s.61*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.61*, i8*, ...)*)(%struct.__FILE_s.61* %f, i8* getelementptr inbounds ([19 x i8]* @.str2481, i64 0, i64 0), i8* %5, i8* %7, i8* %9, i8* %11, i32 %13, i32 %15) nounwind optsize
  %.lobit = lshr i32 %16, 31
  br label %17

; <label>:17                                      ; preds = %3, %0
  %.0 = phi i32 [ %.lobit, %3 ], [ 1, %0 ]
  ret i32 %.0
}

define i8* @hasmntopt(%struct.mntent* nocapture %mnt, i8* %opt) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.mntent* %mnt, i64 0, i32 3
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = tail call i8* @strstr(i8* %2, i8* %opt) nounwind optsize
  ret i8* %3
}

define float @modff(float %x, float* nocapture %iptr) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  %4 = add nsw i32 %3, -127
  %5 = icmp slt i32 %4, 23
  br i1 %5, label %6, label %23

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %4, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = and i32 %1, -2147483648
  %10 = bitcast i32 %9 to float
  store float %10, float* %iptr, align 4, !tbaa !2
  br label %28

; <label>:11                                      ; preds = %6
  %12 = lshr i32 8388607, %4
  %13 = and i32 %12, %1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

; <label>:15                                      ; preds = %11
  store float %x, float* %iptr, align 4, !tbaa !2
  %16 = and i32 %1, -2147483648
  %17 = bitcast i32 %16 to float
  br label %28

; <label>:18                                      ; preds = %11
  %19 = xor i32 %12, -1
  %20 = and i32 %1, %19
  %21 = bitcast i32 %20 to float
  store float %21, float* %iptr, align 4, !tbaa !2
  %22 = fsub float %x, %21
  br label %28

; <label>:23                                      ; preds = %0
  store float %x, float* %iptr, align 4, !tbaa !2
  %24 = fcmp uno float %x, 0.000000e+00
  br i1 %24, label %28, label %25

; <label>:25                                      ; preds = %23
  %26 = and i32 %1, -2147483648
  %27 = bitcast i32 %26 to float
  br label %28

; <label>:28                                      ; preds = %25, %23, %18, %15, %8
  %.0 = phi float [ %x, %8 ], [ %17, %15 ], [ %22, %18 ], [ %27, %25 ], [ %x, %23 ]
  ret float %.0
}

define x86_fp80 @modfl(x86_fp80 %x, x86_fp80* nocapture %iptr) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = add nsw i32 %4, -16383
  %6 = icmp slt i32 %5, 32
  br i1 %6, label %7, label %36

; <label>:7                                       ; preds = %0
  %8 = icmp slt i32 %5, 0
  br i1 %8, label %9, label %14

; <label>:9                                       ; preds = %7
  %10 = lshr i80 %1, 79
  %11 = trunc i80 %10 to i64
  %12 = getelementptr inbounds [2 x x86_fp80]* @zero, i64 0, i64 %11
  %13 = load x86_fp80* %12, align 16, !tbaa !4
  store x86_fp80 %13, x86_fp80* %iptr, align 16, !tbaa !4
  br label %63

; <label>:14                                      ; preds = %7
  %15 = lshr i80 %1, 32
  %16 = trunc i80 %15 to i32
  %17 = sub i32 16414, %4
  %18 = shl i32 -1, %17
  %19 = xor i32 %18, -1
  %20 = and i32 %16, %19
  %21 = trunc i80 %1 to i32
  %22 = or i32 %20, %21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %14
  store x86_fp80 %x, x86_fp80* %iptr, align 16, !tbaa !4
  %25 = lshr i80 %1, 79
  %26 = trunc i80 %25 to i64
  %27 = getelementptr inbounds [2 x x86_fp80]* @zero, i64 0, i64 %26
  %28 = load x86_fp80* %27, align 16, !tbaa !4
  br label %63

; <label>:29                                      ; preds = %14
  %30 = lshr i32 %16, %17
  %31 = shl i32 %30, %17
  %32 = zext i32 %31 to i80
  %33 = shl nuw nsw i80 %32, 32
  %mask7 = and i80 %1, -18446744073709551616
  %mask5 = or i80 %33, %mask7
  %34 = bitcast i80 %mask5 to x86_fp80
  store x86_fp80 %34, x86_fp80* %iptr, align 16, !tbaa !4
  %35 = fsub x86_fp80 %x, %34
  br label %63

; <label>:36                                      ; preds = %0
  %37 = icmp sgt i32 %5, 62
  br i1 %37, label %38, label %45

; <label>:38                                      ; preds = %36
  store x86_fp80 %x, x86_fp80* %iptr, align 16, !tbaa !4
  %39 = fcmp uno x86_fp80 %x, 0xK00000000000000000000
  br i1 %39, label %63, label %40

; <label>:40                                      ; preds = %38
  %41 = lshr i80 %1, 79
  %42 = trunc i80 %41 to i64
  %43 = getelementptr inbounds [2 x x86_fp80]* @zero, i64 0, i64 %42
  %44 = load x86_fp80* %43, align 16, !tbaa !4
  br label %63

; <label>:45                                      ; preds = %36
  %46 = trunc i80 %1 to i32
  %47 = sub i32 16446, %4
  %48 = shl i32 -1, %47
  %49 = xor i32 %48, -1
  %50 = and i32 %46, %49
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %57

; <label>:52                                      ; preds = %45
  store x86_fp80 %x, x86_fp80* %iptr, align 16, !tbaa !4
  %53 = lshr i80 %1, 79
  %54 = trunc i80 %53 to i64
  %55 = getelementptr inbounds [2 x x86_fp80]* @zero, i64 0, i64 %54
  %56 = load x86_fp80* %55, align 16, !tbaa !4
  br label %63

; <label>:57                                      ; preds = %45
  %58 = lshr i32 %46, %47
  %mask2 = and i80 %1, -4294967296
  %59 = shl i32 %58, %47
  %60 = zext i32 %59 to i80
  %ins = or i80 %60, %mask2
  %61 = bitcast i80 %ins to x86_fp80
  store x86_fp80 %61, x86_fp80* %iptr, align 16, !tbaa !4
  %62 = fsub x86_fp80 %x, %61
  br label %63

; <label>:63                                      ; preds = %57, %52, %40, %38, %29, %24, %9
  %.0 = phi x86_fp80 [ %x, %9 ], [ %28, %24 ], [ %35, %29 ], [ %44, %40 ], [ %56, %52 ], [ %62, %57 ], [ %x, %38 ]
  ret x86_fp80 %.0
}

define double @modf(double %x, double* nocapture %iptr) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = lshr i64 %1, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = add nsw i32 %7, -1023
  %9 = icmp slt i32 %8, 20
  br i1 %9, label %10, label %30

; <label>:10                                      ; preds = %0
  %11 = icmp slt i32 %8, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %10
  %13 = and i64 %1, -9223372036854775808
  %14 = bitcast i64 %13 to double
  store double %14, double* %iptr, align 8, !tbaa !3
  br label %55

; <label>:15                                      ; preds = %10
  %16 = lshr i32 1048575, %8
  %17 = and i32 %16, %3
  %18 = or i32 %17, %4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

; <label>:20                                      ; preds = %15
  store double %x, double* %iptr, align 8, !tbaa !3
  %21 = and i64 %1, -9223372036854775808
  %22 = bitcast i64 %21 to double
  br label %55

; <label>:23                                      ; preds = %15
  %24 = xor i32 %16, -1
  %25 = and i32 %3, %24
  %26 = zext i32 %25 to i64
  %27 = shl nuw i64 %26, 32
  %28 = bitcast i64 %27 to double
  store double %28, double* %iptr, align 8, !tbaa !3
  %29 = fsub double %x, %28
  br label %55

; <label>:30                                      ; preds = %0
  %31 = icmp sgt i32 %8, 51
  br i1 %31, label %32, label %39

; <label>:32                                      ; preds = %30
  %33 = icmp eq i32 %8, 1024
  store double %x, double* %iptr, align 8, !tbaa !3
  br i1 %33, label %34, label %36

; <label>:34                                      ; preds = %32
  %35 = fdiv double 0.000000e+00, %x
  br label %55

; <label>:36                                      ; preds = %32
  %37 = and i64 %1, -9223372036854775808
  %38 = bitcast i64 %37 to double
  br label %55

; <label>:39                                      ; preds = %30
  %40 = add nsw i32 %7, -1043
  %41 = lshr i32 -1, %40
  %42 = and i32 %41, %4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %47

; <label>:44                                      ; preds = %39
  store double %x, double* %iptr, align 8, !tbaa !3
  %45 = and i64 %1, -9223372036854775808
  %46 = bitcast i64 %45 to double
  br label %55

; <label>:47                                      ; preds = %39
  %48 = and i64 %1, -4294967296
  %49 = xor i32 %41, -1
  %50 = and i32 %4, %49
  %51 = zext i32 %50 to i64
  %52 = or i64 %51, %48
  %53 = bitcast i64 %52 to double
  store double %53, double* %iptr, align 8, !tbaa !3
  %54 = fsub double %x, %53
  br label %55

; <label>:55                                      ; preds = %47, %44, %36, %34, %23, %20, %12
  %.0 = phi double [ %x, %12 ], [ %22, %20 ], [ %29, %23 ], [ %35, %34 ], [ %38, %36 ], [ %46, %44 ], [ %54, %47 ]
  ret double %.0
}

define i32 @mount(i8* %special, i8* %dir, i8* %fstype, i64 %flags, i8* %data) nounwind uwtable optsize {
  %1 = ptrtoint i8* %special to i64
  %2 = ptrtoint i8* %dir to i64
  %3 = ptrtoint i8* %fstype to i64
  %4 = ptrtoint i8* %data to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 21, i64 %1, i64 %2, i64 %3, i64 %flags, i64 %4, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @mprotect(i8* %addr, i64 %len, i32 %prot) nounwind uwtable optsize {
  %1 = ptrtoint i8* %addr to i64
  %2 = and i64 %1, -4096
  %.sum1 = add i64 %len, 4095
  %3 = getelementptr inbounds i8* %addr, i64 %.sum1
  %4 = ptrtoint i8* %3 to i64
  %5 = and i64 %4, -4096
  %6 = sub i64 %5, %2
  %7 = sext i32 %prot to i64
  %8 = tail call i64 (i64, ...)* @__syscall(i64 125, i64 %2, i64 %6, i64 %7, i32 0, i32 0, i32 0) nounwind optsize
  %9 = tail call i64 @__syscall_ret(i64 %8) nounwind optsize
  %10 = trunc i64 %9 to i32
  ret i32 %10
}

define i32 @mq_close(i32 %mqd) nounwind uwtable optsize {
  %1 = sext i32 %mqd to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 6, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @mq_getattr(i32 %mqd, %struct.mq_attr* %attr) nounwind uwtable optsize {
  %1 = tail call i32 @mq_setattr(i32 %mqd, %struct.mq_attr* null, %struct.mq_attr* %attr) nounwind optsize
  ret i32 %1
}

define noalias i8* @start(i8* %p) nounwind uwtable optsize {
  %buf = alloca [32 x i8], align 16
  %1 = getelementptr inbounds i8* %p, i64 32
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = getelementptr inbounds i8* %p, i64 40
  %5 = bitcast i8* %4 to %struct.sigevent.267**
  %6 = load %struct.sigevent.267** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.sigevent.267* %6, i64 0, i32 3
  %8 = load void (i8*)** %7, align 8, !tbaa !7
  %.0 = getelementptr inbounds %struct.sigevent.267* %6, i64 0, i32 0, i32 0
  %tmp = load i8** %.0, align 8
  %9 = bitcast i8* %p to %struct.pthread_barrier_t*
  %10 = call i32 @pthread_barrier_wait(%struct.pthread_barrier_t* %9) nounwind optsize
  %11 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 0
  %12 = call i64 @recv(i32 %3, i8* %11, i64 32, i32 16640) nounwind optsize
  %13 = call i32 @close(i32 %3) nounwind optsize
  %14 = icmp eq i64 %12, 32
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 31
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = icmp eq i8 %17, 1
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %15
  call void %8(i8* %tmp) nounwind optsize
  br label %20

; <label>:20                                      ; preds = %19, %15, %0
  ret i8* null
}

define i32 @mq_notify(i32 %mqd, %struct.sigevent.267* %sev) nounwind uwtable optsize {
  %args = alloca %struct.args, align 8
  %attr = alloca %struct.pthread_attr_t.269, align 8
  %td = alloca %struct.__pthread.272*, align 8
  %sev2 = alloca %struct.sigevent.267, align 8
  %1 = bitcast %struct.args* %args to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 48, i32 8, i1 false)
  %2 = getelementptr inbounds %struct.args* %args, i64 0, i32 2
  store %struct.sigevent.267* %sev, %struct.sigevent.267** %2, align 8, !tbaa !7
  %3 = icmp eq %struct.sigevent.267* %sev, null
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.sigevent.267* %sev, i64 0, i32 2
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %14, label %8

; <label>:8                                       ; preds = %4, %0
  %9 = sext i32 %mqd to i64
  %10 = ptrtoint %struct.sigevent.267* %sev to i64
  %11 = call i64 (i64, ...)* @__syscall(i64 278, i64 %9, i64 %10, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %12 = call i64 @__syscall_ret(i64 %11) nounwind optsize
  %13 = trunc i64 %12 to i32
  br label %53

; <label>:14                                      ; preds = %4
  %15 = call i32 @socket(i32 16, i32 524291, i32 0) nounwind optsize
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %53, label %17

; <label>:17                                      ; preds = %14
  %18 = getelementptr inbounds %struct.args* %args, i64 0, i32 1
  store i32 %15, i32* %18, align 8, !tbaa !6
  %19 = getelementptr inbounds %struct.sigevent.267* %sev, i64 0, i32 4
  %20 = load %struct.pthread_attr_t.269** %19, align 8, !tbaa !7
  %21 = icmp eq %struct.pthread_attr_t.269* %20, null
  br i1 %21, label %25, label %22

; <label>:22                                      ; preds = %17
  %23 = bitcast %struct.pthread_attr_t.269* %attr to i8*
  %24 = bitcast %struct.pthread_attr_t.269* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 56, i32 8, i1 false)
  br label %27

; <label>:25                                      ; preds = %17
  %26 = call i32 @pthread_attr_init(%struct.pthread_attr_t.269* %attr) nounwind optsize
  br label %27

; <label>:27                                      ; preds = %25, %22
  %28 = call i32 @pthread_attr_setdetachstate(%struct.pthread_attr_t.269* %attr, i32 1) nounwind optsize
  %29 = getelementptr inbounds %struct.args* %args, i64 0, i32 0
  %30 = call i32 @pthread_barrier_init(%struct.pthread_barrier_t* %29, i32* null, i32 2) nounwind optsize
  %31 = call i32 @pthread_create(%struct.__pthread.272** %td, %struct.pthread_attr_t.269* %attr, i8* (i8*)* @start, i8* %1) nounwind optsize
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %37, label %33

; <label>:33                                      ; preds = %27
  %34 = sext i32 %15 to i64
  %35 = call i64 (i64, ...)* @__syscall(i64 6, i64 %34, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %36 = call i32* @__errno_location() nounwind readnone optsize
  store i32 11, i32* %36, align 4, !tbaa !6
  br label %53

; <label>:37                                      ; preds = %27
  %38 = call i32 @pthread_barrier_wait(%struct.pthread_barrier_t* %29) nounwind optsize
  %39 = call i32 @pthread_barrier_destroy(%struct.pthread_barrier_t* %29) nounwind optsize
  %40 = getelementptr inbounds %struct.sigevent.267* %sev2, i64 0, i32 2
  store i32 2, i32* %40, align 4, !tbaa !6
  %41 = getelementptr inbounds %struct.sigevent.267* %sev2, i64 0, i32 1
  store i32 %15, i32* %41, align 8, !tbaa !6
  %42 = getelementptr inbounds %struct.sigevent.267* %sev2, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([32 x i8]* @mq_notify.zeros, i64 0, i64 0), i8** %42, align 8, !tbaa !7
  %43 = sext i32 %mqd to i64
  %44 = ptrtoint %struct.sigevent.267* %sev2 to i64
  %45 = call i64 (i64, ...)* @__syscall(i64 278, i64 %43, i64 %44, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %46 = call i64 @__syscall_ret(i64 %45) nounwind optsize
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %37
  %49 = load %struct.__pthread.272** %td, align 8, !tbaa !7
  %50 = call i32 @pthread_cancel(%struct.__pthread.272* %49) nounwind optsize
  %51 = sext i32 %15 to i64
  %52 = call i64 (i64, ...)* @__syscall(i64 6, i64 %51, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %53

; <label>:53                                      ; preds = %48, %37, %33, %14, %8
  %.0 = phi i32 [ %13, %8 ], [ -1, %33 ], [ -1, %48 ], [ -1, %14 ], [ 0, %37 ]
  ret i32 %.0
}

declare i32 @pthread_create(%struct.__pthread.272**, %struct.pthread_attr_t.269*, i8* (i8*)*, i8*) optsize

declare i32 @pthread_cancel(%struct.__pthread.272*) optsize

define i32 @mq_open(i8* %name, i32 %flags, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.273], align 16
  %1 = load i8* %name, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 47
  %3 = getelementptr inbounds i8* %name, i64 1
  %.0 = select i1 %2, i8* %3, i8* %name
  %4 = and i32 %flags, 64
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %40, label %6

; <label>:6                                       ; preds = %0
  %7 = bitcast [1 x %struct.__va_list_tag.273]* %ap to i8*
  call void @llvm.va_start(i8* %7)
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag.273]* %ap, i64 0, i64 0, i32 0
  %9 = load i32* %8, align 16
  %10 = icmp ult i32 %9, 41
  br i1 %10, label %16, label %.thread

.thread:                                          ; preds = %6
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag.273]* %ap, i64 0, i64 0, i32 2
  %12 = load i8** %11, align 8
  %13 = getelementptr i8* %12, i64 8
  store i8* %13, i8** %11, align 8
  %14 = bitcast i8* %12 to i32*
  %15 = load i32* %14, align 4
  br label %31

; <label>:16                                      ; preds = %6
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag.273]* %ap, i64 0, i64 0, i32 3
  %18 = load i8** %17, align 16
  %19 = sext i32 %9 to i64
  %20 = getelementptr i8* %18, i64 %19
  %21 = add i32 %9, 8
  store i32 %21, i32* %8, align 16
  %22 = bitcast i8* %20 to i32*
  %23 = load i32* %22, align 4
  %24 = icmp ult i32 %21, 41
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %16
  %26 = getelementptr inbounds [1 x %struct.__va_list_tag.273]* %ap, i64 0, i64 0, i32 3
  %27 = load i8** %26, align 16
  %28 = sext i32 %21 to i64
  %29 = getelementptr i8* %27, i64 %28
  %30 = add i32 %9, 16
  store i32 %30, i32* %8, align 16
  br label %36

; <label>:31                                      ; preds = %16, %.thread
  %32 = phi i32 [ %15, %.thread ], [ %23, %16 ]
  %33 = getelementptr inbounds [1 x %struct.__va_list_tag.273]* %ap, i64 0, i64 0, i32 2
  %34 = load i8** %33, align 8
  %35 = getelementptr i8* %34, i64 8
  store i8* %35, i8** %33, align 8
  br label %36

; <label>:36                                      ; preds = %31, %25
  %37 = phi i32 [ %23, %25 ], [ %32, %31 ]
  %.in2 = phi i8* [ %29, %25 ], [ %34, %31 ]
  %38 = bitcast i8* %.in2 to %struct.mq_attr.274**
  %39 = load %struct.mq_attr.274** %38, align 8
  call void @llvm.va_end(i8* %7)
  %phitmp = zext i32 %37 to i64
  %phitmp1 = ptrtoint %struct.mq_attr.274* %39 to i64
  br label %40

; <label>:40                                      ; preds = %36, %0
  %mode.0 = phi i64 [ %phitmp, %36 ], [ 0, %0 ]
  %attr.0 = phi i64 [ %phitmp1, %36 ], [ 0, %0 ]
  %41 = ptrtoint i8* %.0 to i64
  %42 = sext i32 %flags to i64
  %43 = call i64 (i64, ...)* @__syscall(i64 274, i64 %41, i64 %42, i64 %mode.0, i64 %attr.0, i32 0, i32 0) nounwind optsize
  %44 = call i64 @__syscall_ret(i64 %43) nounwind optsize
  %45 = trunc i64 %44 to i32
  ret i32 %45
}

define i64 @mq_receive(i32 %mqd, i8* %msg, i64 %len, i32* %prio) nounwind uwtable optsize {
  %1 = tail call i64 @mq_timedreceive(i32 %mqd, i8* %msg, i64 %len, i32* %prio, %struct.timespec.275* null) nounwind optsize
  ret i64 %1
}

define i32 @mq_send(i32 %mqd, i8* %msg, i64 %len, i32 %prio) nounwind uwtable optsize {
  %1 = tail call i32 @mq_timedsend(i32 %mqd, i8* %msg, i64 %len, i32 %prio, %struct.timespec.276* null) nounwind optsize
  ret i32 %1
}

define i32 @mq_setattr(i32 %mqd, %struct.mq_attr* %new, %struct.mq_attr* %old) nounwind uwtable optsize {
  %1 = sext i32 %mqd to i64
  %2 = ptrtoint %struct.mq_attr* %new to i64
  %3 = ptrtoint %struct.mq_attr* %old to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 279, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i64 @mq_timedreceive(i32 %mqd, i8* %msg, i64 %len, i32* %prio, %struct.timespec.275* %at) nounwind uwtable optsize {
  %1 = sext i32 %mqd to i64
  %2 = ptrtoint i8* %msg to i64
  %3 = ptrtoint i32* %prio to i64
  %4 = ptrtoint %struct.timespec.275* %at to i64
  %5 = tail call i64 @__syscall_cp(i64 277, i64 %1, i64 %2, i64 %len, i64 %3, i64 %4, i64 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  ret i64 %6
}

define i32 @mq_timedsend(i32 %mqd, i8* %msg, i64 %len, i32 %prio, %struct.timespec.276* %at) nounwind uwtable optsize {
  %1 = sext i32 %mqd to i64
  %2 = ptrtoint i8* %msg to i64
  %3 = zext i32 %prio to i64
  %4 = ptrtoint %struct.timespec.276* %at to i64
  %5 = tail call i64 @__syscall_cp(i64 276, i64 %1, i64 %2, i64 %len, i64 %3, i64 %4, i64 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @mq_unlink(i8* %name) nounwind uwtable optsize {
  %1 = load i8* %name, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 47
  %3 = getelementptr inbounds i8* %name, i64 1
  %.01 = select i1 %2, i8* %3, i8* %name
  %4 = ptrtoint i8* %.01 to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 275, i64 %4, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %6, -1
  %.op = sub i32 0, %6
  %10 = select i1 %9, i32 13, i32 %.op
  %11 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 %10, i32* %11, align 4, !tbaa !6
  br label %12

; <label>:12                                      ; preds = %8, %0
  %.0 = phi i32 [ -1, %8 ], [ %6, %0 ]
  ret i32 %.0
}

define i64 @jrand48(i16* %s) nounwind uwtable optsize {
  %1 = tail call i64 @__rand48_step(i16* %s, i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 3)) nounwind optsize
  %2 = lshr i64 %1, 16
  ret i64 %2
}

define i64 @mrand48() nounwind uwtable optsize {
  %1 = tail call i64 @__rand48_step(i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 0), i16* getelementptr inbounds ([7 x i16]* @__seed48, i64 0, i64 3)) nounwind optsize
  %2 = lshr i64 %1, 16
  ret i64 %2
}

define i8* @__mremap(i8* %old_addr, i64 %old_len, i64 %new_len, i32 %flags, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.280], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.280]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.280]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag.280]* %ap, i64 0, i64 0, i32 3
  %7 = load i8** %6, align 16
  %8 = sext i32 %3 to i64
  %9 = getelementptr i8* %7, i64 %8
  %10 = add i32 %3, 8
  store i32 %10, i32* %2, align 16
  br label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag.280]* %ap, i64 0, i64 0, i32 2
  %13 = load i8** %12, align 8
  %14 = getelementptr i8* %13, i64 8
  store i8* %14, i8** %12, align 8
  br label %15

; <label>:15                                      ; preds = %11, %5
  %.in = phi i8* [ %9, %5 ], [ %13, %11 ]
  %16 = bitcast i8* %.in to i8**
  %17 = load i8** %16, align 8
  call void @llvm.va_end(i8* %1)
  %18 = ptrtoint i8* %old_addr to i64
  %19 = sext i32 %flags to i64
  %20 = ptrtoint i8* %17 to i64
  %21 = call i64 (i64, ...)* @__syscall(i64 163, i64 %18, i64 %old_len, i64 %new_len, i64 %19, i64 %20, i32 0) nounwind optsize
  %22 = call i64 @__syscall_ret(i64 %21) nounwind optsize
  %23 = inttoptr i64 %22 to i8*
  ret i8* %23
}

define i32 @msgctl(i32 %q, i32 %cmd, %struct.msqid_ds* %buf) nounwind uwtable optsize {
  %1 = sext i32 %q to i64
  %2 = or i32 %cmd, 256
  %3 = sext i32 %2 to i64
  %4 = ptrtoint %struct.msqid_ds* %buf to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 304, i64 %1, i64 %3, i64 %4, i32 0, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @msgget(i32 %k, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %k to i64
  %2 = sext i32 %flag to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 303, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i64 @msgrcv(i32 %q, i8* %m, i64 %len, i64 %type, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %q to i64
  %2 = ptrtoint i8* %m to i64
  %3 = sext i32 %flag to i64
  %4 = tail call i64 @__syscall_cp(i64 302, i64 %1, i64 %2, i64 %len, i64 %type, i64 %3, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  ret i64 %5
}

define i32 @msgsnd(i32 %q, i8* %m, i64 %len, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %q to i64
  %2 = ptrtoint i8* %m to i64
  %3 = sext i32 %flag to i64
  %4 = tail call i64 @__syscall_cp(i64 301, i64 %1, i64 %2, i64 %len, i64 %3, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @msync(i8* %start, i64 %len, i32 %flags) nounwind uwtable optsize {
  %1 = ptrtoint i8* %start to i64
  %2 = sext i32 %flags to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 144, i64 %1, i64 %len, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @munlockall() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 153, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @munlock(i8* %addr, i64 %len) nounwind uwtable optsize {
  %1 = ptrtoint i8* %addr to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 151, i64 %1, i64 %len, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define internal void @dummy1490(i32 %x) nounwind uwtable readnone {
  ret void
}

define internal void @dummy0491() nounwind uwtable readnone {
  ret void
}

define i32 @__munmap(i8* %start, i64 %len) nounwind uwtable optsize {
  tail call void @__vm_lock(i32 -1) nounwind optsize
  %1 = ptrtoint i8* %start to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 91, i64 %1, i64 %len, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  tail call void @__vm_unlock() nounwind optsize
  ret i32 %4
}

define float @nanf(i8* nocapture %s) nounwind uwtable readnone optsize {
  ret float 0x7FF8000000000000
}

define x86_fp80 @nanl(i8* nocapture %s) nounwind uwtable readnone optsize {
  ret x86_fp80 0xK7FFF4000000000000000
}

define double @nan(i8* nocapture %s) nounwind uwtable readnone optsize {
  ret double 0x7FF8000000000000
}

define i32 @nanosleep(%struct.timespec.281* %req, %struct.timespec.281* %rem) nounwind uwtable optsize {
  %1 = ptrtoint %struct.timespec.281* %req to i64
  %2 = ptrtoint %struct.timespec.281* %rem to i64
  %3 = tail call i64 @__syscall_cp(i64 162, i64 %1, i64 %2, i64 0, i64 0, i64 0, i64 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define float @nearbyintf(float %x) nounwind uwtable optsize {
  %e = alloca %struct.fenv_t, align 4
  %1 = call i32 @fegetenv(%struct.fenv_t* %e) nounwind optsize
  %2 = call float @rintf(float %x) nounwind optsize
  %3 = call i32 @fesetenv(%struct.fenv_t* %e) nounwind optsize
  ret float %2
}

define x86_fp80 @nearbyintl(x86_fp80 %x) nounwind uwtable optsize {
  %e = alloca %struct.fenv_t, align 4
  %1 = call i32 @fegetenv(%struct.fenv_t* %e) nounwind optsize
  %2 = call x86_fp80 @rintl(x86_fp80 %x) nounwind optsize
  %3 = call i32 @fesetenv(%struct.fenv_t* %e) nounwind optsize
  ret x86_fp80 %2
}

define double @nearbyint(double %x) nounwind uwtable optsize {
  %e = alloca %struct.fenv_t, align 4
  %1 = call i32 @fegetenv(%struct.fenv_t* %e) nounwind optsize
  %2 = call double @rint(double %x) nounwind optsize
  %3 = call i32 @fesetenv(%struct.fenv_t* %e) nounwind optsize
  ret double %2
}

define noalias %struct.netent* @getnetbyaddr(i32 %net, i32 %type) nounwind uwtable readnone optsize {
  ret %struct.netent* null
}

define noalias %struct.netent* @getnetbyname(i8* nocapture %name) nounwind uwtable readnone optsize {
  ret %struct.netent* null
}

define %struct.__locale.285* @newlocale(i32 %mask, i8* %name, %struct.__locale.285* %base) nounwind uwtable optsize {
  %1 = load i8* %name, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %9, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([2 x i8]* @.str494, i64 0, i64 0)) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %3
  %7 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([6 x i8]* @.str1495, i64 0, i64 0)) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %14

; <label>:9                                       ; preds = %6, %3, %0
  %10 = icmp eq %struct.__locale.285* %base, null
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %9
  %12 = tail call i8* @calloc(i64 1, i64 4) nounwind optsize
  %13 = bitcast i8* %12 to %struct.__locale.285*
  br label %14

; <label>:14                                      ; preds = %11, %9, %6
  %.0 = phi %struct.__locale.285* [ null, %6 ], [ %base, %9 ], [ %13, %11 ]
  ret %struct.__locale.285* %.0
}

define float @nextafterf(float %x, float %y) nounwind uwtable optsize {
  %t = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = bitcast float %y to i32
  %3 = and i32 %1, 2147483647
  %4 = icmp ugt i32 %3, 2139095040
  br i1 %4, label %8, label %5

; <label>:5                                       ; preds = %0
  %6 = and i32 %2, 2147483647
  %7 = icmp ugt i32 %6, 2139095040
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %5, %0
  %9 = fadd float %x, %y
  br label %53

; <label>:10                                      ; preds = %5
  %11 = fcmp oeq float %x, %y
  br i1 %11, label %53, label %12

; <label>:12                                      ; preds = %10
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %12
  %15 = and i32 %2, -2147483648
  %16 = or i32 %15, 1
  %17 = bitcast i32 %16 to float
  %18 = fmul float %17, %17
  store volatile float %18, float* %t, align 4, !tbaa !2
  %19 = load volatile float* %t, align 4, !tbaa !2
  %20 = fcmp oeq float %19, %17
  br i1 %20, label %21, label %53

; <label>:21                                      ; preds = %14
  %22 = load volatile float* %t, align 4, !tbaa !2
  br label %53

; <label>:23                                      ; preds = %12
  %24 = icmp sgt i32 %1, -1
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %23
  %26 = icmp sgt i32 %1, %2
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %25
  %28 = add nsw i32 %1, -1
  br label %38

; <label>:29                                      ; preds = %25
  %30 = add nsw i32 %1, 1
  br label %38

; <label>:31                                      ; preds = %23
  %32 = icmp sgt i32 %2, -1
  %33 = icmp sgt i32 %1, %2
  %or.cond = or i1 %32, %33
  br i1 %or.cond, label %34, label %36

; <label>:34                                      ; preds = %31
  %35 = add nsw i32 %1, -1
  br label %38

; <label>:36                                      ; preds = %31
  %37 = add nsw i32 %1, 1
  br label %38

; <label>:38                                      ; preds = %36, %34, %29, %27
  %hx.0 = phi i32 [ %28, %27 ], [ %30, %29 ], [ %35, %34 ], [ %37, %36 ]
  %39 = and i32 %hx.0, 2139095040
  %40 = icmp eq i32 %39, 2139095040
  br i1 %40, label %41, label %43

; <label>:41                                      ; preds = %38
  %42 = fadd float %x, %x
  br label %53

; <label>:43                                      ; preds = %38
  %44 = icmp ult i32 %39, 8388608
  br i1 %44, label %45, label %51

; <label>:45                                      ; preds = %43
  %46 = fmul float %x, %x
  store volatile float %46, float* %t, align 4, !tbaa !2
  %47 = load volatile float* %t, align 4, !tbaa !2
  %48 = fcmp une float %47, %x
  br i1 %48, label %49, label %51

; <label>:49                                      ; preds = %45
  %50 = bitcast i32 %hx.0 to float
  br label %53

; <label>:51                                      ; preds = %45, %43
  %52 = bitcast i32 %hx.0 to float
  br label %53

; <label>:53                                      ; preds = %51, %49, %41, %21, %14, %10, %8
  %.0 = phi float [ %9, %8 ], [ %22, %21 ], [ %42, %41 ], [ %50, %49 ], [ %52, %51 ], [ %y, %10 ], [ %17, %14 ]
  ret float %.0
}

define x86_fp80 @nextafterl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %t = alloca x86_fp80, align 16
  %1 = bitcast x86_fp80 %x to i80
  %2 = zext i80 %1 to i128
  %3 = bitcast x86_fp80 %y to i80
  %4 = lshr i80 %1, 64
  %5 = trunc i80 %4 to i32
  %6 = and i32 %5, 32767
  %7 = icmp eq i32 %6, 32767
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %0
  %9 = lshr i80 %1, 32
  %10 = trunc i80 %9 to i64
  %11 = and i64 %10, 2147483647
  %12 = trunc i80 %1 to i64
  %13 = and i64 %12, 4294967295
  %14 = or i64 %11, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %27

; <label>:16                                      ; preds = %8, %0
  %17 = and i80 %3, 604444463063240877801472
  %18 = icmp eq i80 %17, 604444463063240877801472
  br i1 %18, label %19, label %29

; <label>:19                                      ; preds = %16
  %20 = lshr i80 %3, 32
  %21 = trunc i80 %20 to i64
  %22 = and i64 %21, 2147483647
  %23 = trunc i80 %3 to i64
  %24 = and i64 %23, 4294967295
  %25 = or i64 %22, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %29, label %27

; <label>:27                                      ; preds = %19, %8
  %28 = fadd x86_fp80 %x, %y
  br label %105

; <label>:29                                      ; preds = %19, %16
  %30 = fcmp oeq x86_fp80 %x, %y
  br i1 %30, label %105, label %31

; <label>:31                                      ; preds = %29
  %32 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  br i1 %32, label %33, label %45

; <label>:33                                      ; preds = %31
  %34 = lshr i80 %3, 64
  %.tr = trunc i80 %34 to i32
  %35 = and i32 %.tr, 32768
  %36 = or i32 %35, %6
  %37 = zext i32 %36 to i80
  %38 = shl nuw i80 %37, 64
  %ins24 = or i80 %38, 1
  %39 = bitcast i80 %ins24 to x86_fp80
  %40 = fmul x86_fp80 %39, %39
  store volatile x86_fp80 %40, x86_fp80* %t, align 16, !tbaa !4
  %41 = load volatile x86_fp80* %t, align 16, !tbaa !4
  %42 = fcmp oeq x86_fp80 %41, %39
  br i1 %42, label %43, label %105

; <label>:43                                      ; preds = %33
  %44 = load volatile x86_fp80* %t, align 16, !tbaa !4
  br label %105

; <label>:45                                      ; preds = %31
  %46 = fcmp ogt x86_fp80 %x, 0xK00000000000000000000
  %47 = fcmp olt x86_fp80 %x, %y
  %48 = xor i1 %46, %47
  %49 = trunc i80 %1 to i32
  br i1 %48, label %50, label %73

; <label>:50                                      ; preds = %45
  %51 = icmp eq i32 %49, 0
  br i1 %51, label %52, label %69

; <label>:52                                      ; preds = %50
  %53 = and i80 %1, 9223372032559808512
  %54 = icmp eq i80 %53, 0
  br i1 %54, label %55, label %62

; <label>:55                                      ; preds = %52
  %56 = add i32 %5, 32767
  %57 = and i32 %56, 32767
  %58 = and i32 %5, 32768
  %59 = or i32 %57, %58
  %60 = zext i32 %59 to i128
  %61 = shl nuw nsw i128 %60, 64
  %mask17 = and i128 %2, 18446744073709551615
  %ins18 = or i128 %61, %mask17
  br label %62

; <label>:62                                      ; preds = %55, %52
  %ux.0 = phi i128 [ %ins18, %55 ], [ %2, %52 ]
  %63 = lshr i128 %ux.0, 32
  %64 = trunc i128 %63 to i64
  %65 = add i64 %64, 4294967295
  %66 = and i64 %65, 4294967295
  %.masked35 = and i64 %64, 2147483648
  %.mask34 = or i64 %66, %.masked35
  %67 = zext i64 %.mask34 to i128
  %68 = shl nuw nsw i128 %67, 32
  %mask14 = and i128 %ux.0, -18446744069414584321
  %ins15 = or i128 %68, %mask14
  br label %69

; <label>:69                                      ; preds = %62, %50
  %ux.1 = phi i128 [ %ins15, %62 ], [ %2, %50 ]
  %70 = trunc i128 %ux.1 to i32
  %71 = add i32 %70, -1
  %72 = zext i32 %71 to i128
  %mask11 = and i128 %ux.1, 1208925819614624879738880
  %ins12 = or i128 %72, %mask11
  %extract.t = trunc i128 %ins12 to i80
  %extract = lshr i128 %ux.1, 64
  %extract.t39 = trunc i128 %extract to i32
  br label %93

; <label>:73                                      ; preds = %45
  %74 = add i32 %49, 1
  %75 = zext i32 %74 to i128
  %mask20 = and i128 %2, 1208925819614624879738880
  %ins21 = or i128 %75, %mask20
  %76 = icmp eq i32 %74, 0
  %extract.t38 = trunc i128 %ins21 to i80
  br i1 %76, label %77, label %93

; <label>:77                                      ; preds = %73
  %78 = lshr i80 %1, 32
  %79 = trunc i80 %78 to i64
  %80 = add i64 %79, 1
  %81 = and i64 %80, 4294967295
  %.masked = and i64 %79, 2147483648
  %.mask = or i64 %81, %.masked
  %82 = zext i64 %.mask to i128
  %83 = shl nuw nsw i128 %82, 32
  %mask8 = and i128 %ins21, 1208907372870559760121855
  %ins9 = or i128 %83, %mask8
  %84 = and i64 %80, 2147483647
  %85 = icmp eq i64 %84, 0
  %extract.t37 = trunc i128 %ins9 to i80
  br i1 %85, label %86, label %93

; <label>:86                                      ; preds = %77
  %87 = add i32 %5, 1
  %88 = and i32 %87, 32767
  %89 = and i32 %5, 32768
  %90 = or i32 %88, %89
  %91 = zext i32 %90 to i128
  %92 = shl nuw nsw i128 %91, 64
  %mask5 = and i128 %ins9, 18446744073709551615
  %ins6 = or i128 %mask5, %92
  %extract.t36 = trunc i128 %ins6 to i80
  br label %93

; <label>:93                                      ; preds = %86, %77, %73, %69
  %ux.2.off0 = phi i80 [ %extract.t, %69 ], [ %extract.t36, %86 ], [ %extract.t37, %77 ], [ %extract.t38, %73 ]
  %ux.2.off64 = phi i32 [ %extract.t39, %69 ], [ %90, %86 ], [ %5, %77 ], [ %5, %73 ]
  %94 = and i32 %ux.2.off64, 32767
  switch i32 %94, label %103 [
    i32 32767, label %95
    i32 0, label %97
  ]

; <label>:95                                      ; preds = %93
  %96 = fadd x86_fp80 %x, %x
  br label %105

; <label>:97                                      ; preds = %93
  %98 = and i80 %ux.2.off0, -9223372036854775809
  %99 = bitcast i80 %98 to x86_fp80
  %100 = fmul x86_fp80 %99, %99
  store volatile x86_fp80 %100, x86_fp80* %t, align 16, !tbaa !4
  %101 = load volatile x86_fp80* %t, align 16, !tbaa !4
  %102 = fcmp une x86_fp80 %101, %99
  br i1 %102, label %105, label %103

; <label>:103                                     ; preds = %97, %93
  %ux.3.off0 = phi i80 [ %98, %97 ], [ %ux.2.off0, %93 ]
  %104 = bitcast i80 %ux.3.off0 to x86_fp80
  br label %105

; <label>:105                                     ; preds = %103, %97, %95, %43, %33, %29, %27
  %.0 = phi x86_fp80 [ %28, %27 ], [ %44, %43 ], [ %96, %95 ], [ %104, %103 ], [ %y, %29 ], [ %39, %33 ], [ %99, %97 ]
  ret x86_fp80 %.0
}

define double @nextafter(double %x, double %y) nounwind uwtable optsize {
  %t = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %y to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = and i32 %3, 2147483647
  %10 = and i32 %7, 2147483647
  %11 = icmp ugt i32 %9, 2146435071
  br i1 %11, label %12, label %.critedge

; <label>:12                                      ; preds = %0
  %13 = add nsw i32 %9, -2146435072
  %14 = or i32 %13, %4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %.critedge, label %21

.critedge:                                        ; preds = %12, %0
  %16 = icmp ugt i32 %10, 2146435071
  br i1 %16, label %17, label %.critedge8

; <label>:17                                      ; preds = %.critedge
  %18 = add nsw i32 %10, -2146435072
  %19 = or i32 %18, %8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.critedge8, label %21

; <label>:21                                      ; preds = %17, %12
  %22 = fadd double %x, %y
  br label %88

.critedge8:                                       ; preds = %17, %.critedge
  %23 = fcmp oeq double %x, %y
  br i1 %23, label %88, label %24

; <label>:24                                      ; preds = %.critedge8
  %25 = or i32 %9, %4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %36

; <label>:27                                      ; preds = %24
  %28 = and i64 %5, -9223372036854775808
  %29 = or i64 %28, 1
  %30 = bitcast i64 %29 to double
  %31 = fmul double %30, %30
  store volatile double %31, double* %t, align 8, !tbaa !3
  %32 = load volatile double* %t, align 8, !tbaa !3
  %33 = fcmp oeq double %32, %30
  br i1 %33, label %34, label %88

; <label>:34                                      ; preds = %27
  %35 = load volatile double* %t, align 8, !tbaa !3
  br label %88

; <label>:36                                      ; preds = %24
  %37 = icmp sgt i32 %3, -1
  br i1 %37, label %38, label %51

; <label>:38                                      ; preds = %36
  %39 = icmp sgt i32 %3, %7
  br i1 %39, label %43, label %40

; <label>:40                                      ; preds = %38
  %41 = icmp eq i32 %3, %7
  %42 = icmp ugt i32 %4, %8
  %or.cond = and i1 %41, %42
  br i1 %or.cond, label %43, label %47

; <label>:43                                      ; preds = %40, %38
  %44 = icmp eq i32 %4, 0
  %45 = sext i1 %44 to i32
  %46 = add i32 %4, -1
  br label %65

; <label>:47                                      ; preds = %40
  %48 = add i32 %4, 1
  %49 = icmp eq i32 %48, 0
  %50 = zext i1 %49 to i32
  br label %65

; <label>:51                                      ; preds = %36
  %52 = icmp sgt i32 %7, -1
  %53 = icmp sgt i32 %3, %7
  %or.cond10 = or i1 %52, %53
  br i1 %or.cond10, label %57, label %54

; <label>:54                                      ; preds = %51
  %55 = icmp eq i32 %3, %7
  %56 = icmp ugt i32 %4, %8
  %or.cond11 = and i1 %55, %56
  br i1 %or.cond11, label %57, label %61

; <label>:57                                      ; preds = %54, %51
  %58 = icmp eq i32 %4, 0
  %59 = sext i1 %58 to i32
  %60 = add i32 %4, -1
  br label %65

; <label>:61                                      ; preds = %54
  %62 = add i32 %4, 1
  %63 = icmp eq i32 %62, 0
  %64 = zext i1 %63 to i32
  br label %65

; <label>:65                                      ; preds = %61, %57, %47, %43
  %lx.0 = phi i32 [ %46, %43 ], [ %60, %57 ], [ %48, %47 ], [ %62, %61 ]
  %.pn = phi i32 [ %45, %43 ], [ %59, %57 ], [ %50, %47 ], [ %64, %61 ]
  %hx.2 = add nsw i32 %.pn, %3
  %66 = and i32 %hx.2, 2146435072
  %67 = icmp eq i32 %66, 2146435072
  br i1 %67, label %68, label %70

; <label>:68                                      ; preds = %65
  %69 = fadd double %x, %x
  br label %88

; <label>:70                                      ; preds = %65
  %71 = icmp ult i32 %66, 1048576
  br i1 %71, label %72, label %82

; <label>:72                                      ; preds = %70
  %73 = fmul double %x, %x
  store volatile double %73, double* %t, align 8, !tbaa !3
  %74 = load volatile double* %t, align 8, !tbaa !3
  %75 = fcmp une double %74, %x
  br i1 %75, label %76, label %82

; <label>:76                                      ; preds = %72
  %77 = zext i32 %hx.2 to i64
  %78 = shl nuw i64 %77, 32
  %79 = zext i32 %lx.0 to i64
  %80 = or i64 %78, %79
  %81 = bitcast i64 %80 to double
  br label %88

; <label>:82                                      ; preds = %72, %70
  %83 = zext i32 %hx.2 to i64
  %84 = shl nuw i64 %83, 32
  %85 = zext i32 %lx.0 to i64
  %86 = or i64 %84, %85
  %87 = bitcast i64 %86 to double
  br label %88

; <label>:88                                      ; preds = %82, %76, %68, %34, %27, %.critedge8, %21
  %.0 = phi double [ %22, %21 ], [ %35, %34 ], [ %69, %68 ], [ %81, %76 ], [ %87, %82 ], [ %y, %.critedge8 ], [ %30, %27 ]
  ret double %.0
}

define float @nexttowardf(float %x, x86_fp80 %y) nounwind uwtable optsize {
  %t = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = bitcast x86_fp80 %y to i80
  %4 = icmp ugt i32 %2, 2139095040
  br i1 %4, label %16, label %5

; <label>:5                                       ; preds = %0
  %6 = and i80 %3, 604444463063240877801472
  %7 = icmp eq i80 %6, 604444463063240877801472
  br i1 %7, label %8, label %20

; <label>:8                                       ; preds = %5
  %9 = lshr i80 %3, 32
  %10 = trunc i80 %9 to i64
  %11 = and i64 %10, 2147483647
  %12 = trunc i80 %3 to i64
  %13 = and i64 %12, 4294967295
  %14 = or i64 %11, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %20, label %16

; <label>:16                                      ; preds = %8, %0
  %17 = fpext float %x to x86_fp80
  %18 = fadd x86_fp80 %17, %y
  %19 = fptrunc x86_fp80 %18 to float
  br label %55

; <label>:20                                      ; preds = %8, %5
  %21 = fpext float %x to x86_fp80
  %22 = fcmp oeq x86_fp80 %21, %y
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %20
  %24 = fptrunc x86_fp80 %y to float
  br label %55

; <label>:25                                      ; preds = %20
  %26 = icmp eq i32 %2, 0
  br i1 %26, label %27, label %37

; <label>:27                                      ; preds = %25
  %28 = lshr i80 %3, 48
  %.tr = trunc i80 %28 to i32
  %29 = and i32 %.tr, -2147483648
  %30 = or i32 %29, 1
  %31 = bitcast i32 %30 to float
  %32 = fmul float %31, %31
  store volatile float %32, float* %t, align 4, !tbaa !2
  %33 = load volatile float* %t, align 4, !tbaa !2
  %34 = fcmp oeq float %33, %31
  br i1 %34, label %35, label %55

; <label>:35                                      ; preds = %27
  %36 = load volatile float* %t, align 4, !tbaa !2
  br label %55

; <label>:37                                      ; preds = %25
  %.lobit = lshr i32 %1, 31
  %.lobit.not = xor i32 %.lobit, 1
  %38 = fcmp olt x86_fp80 %21, %y
  %39 = zext i1 %38 to i32
  %40 = icmp eq i32 %.lobit.not, %39
  %hx.0.v = select i1 %40, i32 1, i32 -1
  %hx.0 = add i32 %hx.0.v, %1
  %41 = and i32 %hx.0, 2139095040
  %42 = icmp eq i32 %41, 2139095040
  br i1 %42, label %43, label %45

; <label>:43                                      ; preds = %37
  %44 = fadd float %x, %x
  br label %55

; <label>:45                                      ; preds = %37
  %46 = icmp ult i32 %41, 8388608
  br i1 %46, label %47, label %53

; <label>:47                                      ; preds = %45
  %48 = fmul float %x, %x
  store volatile float %48, float* %t, align 4, !tbaa !2
  %49 = load volatile float* %t, align 4, !tbaa !2
  %50 = fcmp une float %49, %x
  br i1 %50, label %51, label %53

; <label>:51                                      ; preds = %47
  %52 = bitcast i32 %hx.0 to float
  br label %55

; <label>:53                                      ; preds = %47, %45
  %54 = bitcast i32 %hx.0 to float
  br label %55

; <label>:55                                      ; preds = %53, %51, %43, %35, %27, %23, %16
  %.0 = phi float [ %19, %16 ], [ %24, %23 ], [ %36, %35 ], [ %44, %43 ], [ %52, %51 ], [ %54, %53 ], [ %31, %27 ]
  ret float %.0
}

define x86_fp80 @nexttowardl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @nextafterl(x86_fp80 %x, x86_fp80 %y) nounwind optsize
  ret x86_fp80 %1
}

define double @nexttoward(double %x, x86_fp80 %y) nounwind uwtable optsize {
  %t = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2147483647
  %6 = bitcast x86_fp80 %y to i80
  %7 = icmp ugt i32 %5, 2146435071
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %0
  %9 = add nsw i32 %5, -2146435072
  %10 = or i32 %9, %4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %23

; <label>:12                                      ; preds = %8, %0
  %13 = and i80 %6, 604444463063240877801472
  %14 = icmp eq i80 %13, 604444463063240877801472
  br i1 %14, label %15, label %27

; <label>:15                                      ; preds = %12
  %16 = lshr i80 %6, 32
  %17 = trunc i80 %16 to i64
  %18 = and i64 %17, 2147483647
  %19 = trunc i80 %6 to i64
  %20 = and i64 %19, 4294967295
  %21 = or i64 %18, %20
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %27, label %23

; <label>:23                                      ; preds = %15, %8
  %24 = fpext double %x to x86_fp80
  %25 = fadd x86_fp80 %24, %y
  %26 = fptrunc x86_fp80 %25 to double
  br label %79

; <label>:27                                      ; preds = %15, %12
  %28 = fpext double %x to x86_fp80
  %29 = fcmp oeq x86_fp80 %28, %y
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %27
  %31 = fptrunc x86_fp80 %y to double
  br label %79

; <label>:32                                      ; preds = %27
  %33 = fcmp oeq double %x, 0.000000e+00
  br i1 %33, label %34, label %44

; <label>:34                                      ; preds = %32
  %35 = lshr i80 %6, 16
  %.tr6 = trunc i80 %35 to i64
  %36 = and i64 %.tr6, -9223372036854775808
  %37 = or i64 %36, 1
  %38 = bitcast i64 %37 to double
  %39 = fmul double %38, %38
  store volatile double %39, double* %t, align 8, !tbaa !3
  %40 = load volatile double* %t, align 8, !tbaa !3
  %41 = fcmp oeq double %40, %38
  br i1 %41, label %42, label %79

; <label>:42                                      ; preds = %34
  %43 = load volatile double* %t, align 8, !tbaa !3
  br label %79

; <label>:44                                      ; preds = %32
  %45 = icmp sgt i32 %3, 0
  %46 = fcmp olt x86_fp80 %28, %y
  %47 = xor i1 %45, %46
  br i1 %47, label %48, label %52

; <label>:48                                      ; preds = %44
  %49 = icmp eq i32 %4, 0
  %50 = sext i1 %49 to i32
  %51 = add i32 %4, -1
  br label %56

; <label>:52                                      ; preds = %44
  %53 = add i32 %4, 1
  %54 = icmp eq i32 %53, 0
  %55 = zext i1 %54 to i32
  br label %56

; <label>:56                                      ; preds = %52, %48
  %.pn = phi i32 [ %50, %48 ], [ %55, %52 ]
  %lx.0 = phi i32 [ %51, %48 ], [ %53, %52 ]
  %hx.1 = add nsw i32 %.pn, %3
  %57 = and i32 %hx.1, 2146435072
  %58 = icmp eq i32 %57, 2146435072
  br i1 %58, label %59, label %61

; <label>:59                                      ; preds = %56
  %60 = fadd double %x, %x
  br label %79

; <label>:61                                      ; preds = %56
  %62 = icmp ult i32 %57, 1048576
  br i1 %62, label %63, label %73

; <label>:63                                      ; preds = %61
  %64 = fmul double %x, %x
  store volatile double %64, double* %t, align 8, !tbaa !3
  %65 = load volatile double* %t, align 8, !tbaa !3
  %66 = fcmp une double %65, %x
  br i1 %66, label %67, label %73

; <label>:67                                      ; preds = %63
  %68 = zext i32 %hx.1 to i64
  %69 = shl nuw i64 %68, 32
  %70 = zext i32 %lx.0 to i64
  %71 = or i64 %69, %70
  %72 = bitcast i64 %71 to double
  br label %79

; <label>:73                                      ; preds = %63, %61
  %74 = zext i32 %hx.1 to i64
  %75 = shl nuw i64 %74, 32
  %76 = zext i32 %lx.0 to i64
  %77 = or i64 %75, %76
  %78 = bitcast i64 %77 to double
  br label %79

; <label>:79                                      ; preds = %73, %67, %59, %42, %34, %30, %23
  %.0 = phi double [ %26, %23 ], [ %31, %30 ], [ %43, %42 ], [ %60, %59 ], [ %72, %67 ], [ %78, %73 ], [ %38, %34 ]
  ret double %.0
}

define i32 @nftw(i8* %path, i32 (i8*, %struct.stat.111*, i32, %struct.FTW*)* %fn, i32 %fd_limit, i32 %flags) nounwind uwtable optsize {
  %cs = alloca i32, align 4
  %pathbuf = alloca [4097 x i8], align 16
  %1 = icmp slt i32 %fd_limit, 1
  br i1 %1, label %15, label %2

; <label>:2                                       ; preds = %0
  %3 = call i64 @strlen(i8* %path) nounwind optsize
  %4 = icmp ugt i64 %3, 4096
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %2
  %6 = call i32* @__errno_location() nounwind readnone optsize
  store i32 36, i32* %6, align 4, !tbaa !6
  br label %15

; <label>:7                                       ; preds = %2
  %8 = getelementptr inbounds [4097 x i8]* %pathbuf, i64 0, i64 0
  %9 = add i64 %3, 1
  %10 = call i8* @memcpy(i8* %8, i8* %path, i64 %9) nounwind optsize
  %11 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %12 = call fastcc i32 @do_nftw(i8* %8, i32 (i8*, %struct.stat.111*, i32, %struct.FTW*)* %fn, i32 %fd_limit, i32 %flags, %struct.history* null) optsize
  %13 = load i32* %cs, align 4, !tbaa !6
  %14 = call i32 @pthread_setcancelstate(i32 %13, i32* null) nounwind optsize
  br label %15

; <label>:15                                      ; preds = %7, %5, %0
  %.0 = phi i32 [ -1, %5 ], [ %12, %7 ], [ 0, %0 ]
  ret i32 %.0
}

define internal fastcc i32 @do_nftw(i8* %path, i32 (i8*, %struct.stat.111*, i32, %struct.FTW*)* %fn, i32 %fd_limit, i32 %flags, %struct.history* %h) nounwind uwtable optsize {
  %st = alloca %struct.stat.111, align 8
  %new = alloca %struct.history, align 8
  %lev = alloca %struct.FTW, align 4
  %1 = call i64 @strlen(i8* %path) nounwind optsize
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  %4 = add i64 %1, -1
  %5 = getelementptr inbounds i8* %path, i64 %4
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 47
  br i1 %7, label %9, label %8

; <label>:8                                       ; preds = %3, %0
  br label %9

; <label>:9                                       ; preds = %8, %3
  %10 = phi i64 [ %1, %8 ], [ %4, %3 ]
  %11 = and i32 %flags, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %9
  %14 = call i32 bitcast (i32 (i8*, %struct.stat.250*)* @lstat to i32 (i8*, %struct.stat.111*)*)(i8* %path, %struct.stat.111* %st) nounwind optsize
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %..thread_crit_edge

..thread_crit_edge:                               ; preds = %13
  %.pre9 = call i32* @__errno_location() nounwind readnone optsize
  br label %.thread

; <label>:16                                      ; preds = %9
  %17 = call i32 bitcast (i32 (i8*, %struct.stat.104*)* @stat to i32 (i8*, %struct.stat.111*)*)(i8* %path, %struct.stat.111* %st) nounwind optsize
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %28

; <label>:19                                      ; preds = %16
  %20 = call i32* @__errno_location() nounwind readnone optsize
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %.thread

; <label>:23                                      ; preds = %19
  %24 = call i32 bitcast (i32 (i8*, %struct.stat.250*)* @lstat to i32 (i8*, %struct.stat.111*)*)(i8* %path, %struct.stat.111* %st) nounwind optsize
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %.thread

.thread:                                          ; preds = %23, %19, %..thread_crit_edge
  %.pre-phi = phi i32* [ %.pre9, %..thread_crit_edge ], [ %20, %23 ], [ %20, %19 ]
  %26 = load i32* %.pre-phi, align 4, !tbaa !6
  %27 = icmp eq i32 %26, 13
  br i1 %27, label %42, label %.loopexit

; <label>:28                                      ; preds = %16, %13
  %29 = getelementptr inbounds %struct.stat.111* %st, i64 0, i32 3
  %30 = load i32* %29, align 8, !tbaa !6
  %31 = and i32 %30, 61440
  switch i32 %31, label %42 [
    i32 16384, label %32
    i32 40960, label %39
  ]

; <label>:32                                      ; preds = %28
  %33 = call i32 @access(i8* %path, i32 4) nounwind optsize
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %42, label %35

; <label>:35                                      ; preds = %32
  %36 = lshr i32 %flags, 1
  %37 = and i32 %36, 4
  %38 = or i32 %37, 2
  br label %42

; <label>:39                                      ; preds = %28
  %40 = shl nuw nsw i32 %11, 1
  %41 = xor i32 %40, 7
  br label %42

; <label>:42                                      ; preds = %39, %35, %32, %28, %.thread, %23
  %type.0 = phi i32 [ 7, %23 ], [ 4, %.thread ], [ 3, %32 ], [ %38, %35 ], [ %41, %39 ], [ 1, %28 ]
  %43 = and i32 %flags, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp eq %struct.history* %h, null
  %or.cond4 = or i1 %44, %45
  %.phi.trans.insert = getelementptr inbounds %struct.stat.111* %st, i64 0, i32 0
  %.pre = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br i1 %or.cond4, label %._crit_edge, label %46

._crit_edge:                                      ; preds = %42
  %.phi.trans.insert7 = getelementptr inbounds %struct.stat.111* %st, i64 0, i32 1
  %.pre8 = load i64* %.phi.trans.insert7, align 8, !tbaa !9
  br label %56

; <label>:46                                      ; preds = %42
  %47 = getelementptr inbounds %struct.history* %h, i64 0, i32 1
  %48 = load i64* %47, align 8, !tbaa !5
  %49 = icmp eq i64 %.pre, %48
  br i1 %49, label %50, label %.loopexit

; <label>:50                                      ; preds = %46
  %51 = getelementptr inbounds %struct.stat.111* %st, i64 0, i32 1
  %52 = load i64* %51, align 8, !tbaa !9
  %53 = getelementptr inbounds %struct.history* %h, i64 0, i32 2
  %54 = load i64* %53, align 8, !tbaa !9
  %55 = icmp eq i64 %52, %54
  br i1 %55, label %56, label %.loopexit

; <label>:56                                      ; preds = %50, %._crit_edge
  %57 = phi i64 [ %.pre8, %._crit_edge ], [ %52, %50 ]
  %58 = getelementptr inbounds %struct.history* %new, i64 0, i32 0
  store %struct.history* %h, %struct.history** %58, align 8, !tbaa !7
  %59 = getelementptr inbounds %struct.stat.111* %st, i64 0, i32 0
  %60 = getelementptr inbounds %struct.history* %new, i64 0, i32 1
  store i64 %.pre, i64* %60, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.stat.111* %st, i64 0, i32 1
  %62 = getelementptr inbounds %struct.history* %new, i64 0, i32 2
  store i64 %57, i64* %62, align 8, !tbaa !9
  br i1 %45, label %.critedge, label %63

; <label>:63                                      ; preds = %56
  %64 = getelementptr inbounds %struct.history* %h, i64 0, i32 3
  %65 = load i32* %64, align 4, !tbaa !6
  %66 = add nsw i32 %65, 1
  %67 = getelementptr inbounds %struct.history* %new, i64 0, i32 3
  store i32 %66, i32* %67, align 8, !tbaa !6
  %68 = add i64 %1, 1
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds %struct.history* %new, i64 0, i32 4
  store i32 %69, i32* %70, align 4, !tbaa !6
  %71 = getelementptr inbounds %struct.FTW* %lev, i64 0, i32 1
  store i32 %66, i32* %71, align 4, !tbaa !6
  %72 = getelementptr inbounds %struct.history* %h, i64 0, i32 4
  %73 = load i32* %72, align 4, !tbaa !6
  %74 = sext i32 %73 to i64
  br label %86

.critedge:                                        ; preds = %56
  %75 = getelementptr inbounds %struct.history* %new, i64 0, i32 3
  store i32 0, i32* %75, align 8, !tbaa !6
  %76 = add i64 %1, 1
  %77 = trunc i64 %76 to i32
  %78 = getelementptr inbounds %struct.history* %new, i64 0, i32 4
  store i32 %77, i32* %78, align 4, !tbaa !6
  %79 = getelementptr inbounds %struct.FTW* %lev, i64 0, i32 1
  store i32 0, i32* %79, align 4, !tbaa !6
  %80 = call i8* @strrchr(i8* %path, i32 47) nounwind optsize
  %81 = icmp eq i8* %80, null
  br i1 %81, label %86, label %82

; <label>:82                                      ; preds = %.critedge
  %83 = ptrtoint i8* %80 to i64
  %84 = ptrtoint i8* %path to i64
  %85 = sub i64 %83, %84
  br label %86

; <label>:86                                      ; preds = %82, %.critedge, %63
  %87 = phi i64 [ %74, %63 ], [ %85, %82 ], [ 0, %.critedge ]
  %88 = trunc i64 %87 to i32
  %89 = getelementptr inbounds %struct.FTW* %lev, i64 0, i32 0
  store i32 %88, i32* %89, align 4, !tbaa !6
  %90 = and i32 %flags, 8
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %.preheader5, label %92

; <label>:92                                      ; preds = %86
  %93 = call i32 %fn(i8* %path, %struct.stat.111* %st, i32 %type.0, %struct.FTW* %lev) nounwind optsize
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %.preheader5, label %.loopexit

.preheader5:                                      ; preds = %92, %86
  %95 = load i64* %59, align 8, !tbaa !5
  %96 = load i64* %61, align 8, !tbaa !9
  br label %97

; <label>:97                                      ; preds = %107, %.preheader5
  %.02 = phi %struct.history* [ %109, %107 ], [ %h, %.preheader5 ]
  %98 = icmp eq %struct.history* %.02, null
  br i1 %98, label %110, label %99

; <label>:99                                      ; preds = %97
  %100 = getelementptr inbounds %struct.history* %.02, i64 0, i32 1
  %101 = load i64* %100, align 8, !tbaa !5
  %102 = icmp eq i64 %101, %95
  br i1 %102, label %103, label %107

; <label>:103                                     ; preds = %99
  %104 = getelementptr inbounds %struct.history* %.02, i64 0, i32 2
  %105 = load i64* %104, align 8, !tbaa !9
  %106 = icmp eq i64 %105, %96
  br i1 %106, label %.loopexit, label %107

; <label>:107                                     ; preds = %103, %99
  %108 = getelementptr inbounds %struct.history* %.02, i64 0, i32 0
  %109 = load %struct.history** %108, align 8, !tbaa !7
  br label %97

; <label>:110                                     ; preds = %97
  switch i32 %type.0, label %151 [
    i32 6, label %111
    i32 2, label %111
  ]

; <label>:111                                     ; preds = %110, %110
  %112 = icmp eq i32 %fd_limit, 0
  br i1 %112, label %151, label %113

; <label>:113                                     ; preds = %111
  %114 = call %struct.__DIR_s* @opendir(i8* %path) nounwind optsize
  %115 = icmp eq %struct.__DIR_s* %114, null
  br i1 %115, label %147, label %.preheader

.preheader:                                       ; preds = %113
  %116 = sub i64 4096, %1
  %117 = getelementptr inbounds i8* %path, i64 %10
  %.sum = add i64 %10, 1
  %118 = getelementptr inbounds i8* %path, i64 %.sum
  %119 = add nsw i32 %fd_limit, -1
  br label %.backedge

.backedge:                                        ; preds = %139, %129, %126, %.preheader
  %120 = call %struct.dirent.290* @readdir(%struct.__DIR_s* %114) nounwind optsize
  %121 = icmp eq %struct.dirent.290* %120, null
  br i1 %121, label %145, label %122

; <label>:122                                     ; preds = %.backedge
  %123 = getelementptr inbounds %struct.dirent.290* %120, i64 0, i32 4, i64 0
  %124 = load i8* %123, align 1, !tbaa !0
  %125 = icmp eq i8 %124, 46
  br i1 %125, label %126, label %133

; <label>:126                                     ; preds = %122
  %127 = getelementptr inbounds %struct.dirent.290* %120, i64 0, i32 4, i64 1
  %128 = load i8* %127, align 1, !tbaa !0
  switch i8 %128, label %133 [
    i8 0, label %.backedge
    i8 46, label %129
  ]

; <label>:129                                     ; preds = %126
  %130 = getelementptr inbounds %struct.dirent.290* %120, i64 0, i32 4, i64 2
  %131 = load i8* %130, align 1, !tbaa !0
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %.backedge, label %133

; <label>:133                                     ; preds = %129, %126, %122
  %134 = call i64 @strlen(i8* %123) nounwind optsize
  %135 = icmp ult i64 %134, %116
  br i1 %135, label %139, label %136

; <label>:136                                     ; preds = %133
  %137 = call i32* @__errno_location() nounwind readnone optsize
  store i32 36, i32* %137, align 4, !tbaa !6
  %138 = call i32 @closedir(%struct.__DIR_s* %114) nounwind optsize
  br label %.loopexit

; <label>:139                                     ; preds = %133
  store i8 47, i8* %117, align 1, !tbaa !0
  %140 = call i8* @strcpy(i8* %118, i8* %123) nounwind optsize
  %141 = call fastcc i32 @do_nftw(i8* %path, i32 (i8*, %struct.stat.111*, i32, %struct.FTW*)* %fn, i32 %119, i32 %flags, %struct.history* %new) optsize
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %.backedge, label %143

; <label>:143                                     ; preds = %139
  %144 = call i32 @closedir(%struct.__DIR_s* %114) nounwind optsize
  br label %.loopexit

; <label>:145                                     ; preds = %.backedge
  %146 = call i32 @closedir(%struct.__DIR_s* %114) nounwind optsize
  br label %151

; <label>:147                                     ; preds = %113
  %148 = call i32* @__errno_location() nounwind readnone optsize
  %149 = load i32* %148, align 4, !tbaa !6
  %150 = icmp eq i32 %149, 13
  br i1 %150, label %151, label %.loopexit

; <label>:151                                     ; preds = %147, %145, %111, %110
  %152 = getelementptr inbounds i8* %path, i64 %1
  store i8 0, i8* %152, align 1, !tbaa !0
  br i1 %91, label %153, label %156

; <label>:153                                     ; preds = %151
  %154 = call i32 %fn(i8* %path, %struct.stat.111* %st, i32 %type.0, %struct.FTW* %lev) nounwind optsize
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %.loopexit

; <label>:156                                     ; preds = %153, %151
  br label %.loopexit

.loopexit:                                        ; preds = %156, %153, %147, %143, %136, %103, %92, %50, %46, %.thread
  %.0 = phi i32 [ -1, %136 ], [ %141, %143 ], [ 0, %156 ], [ -1, %.thread ], [ 0, %50 ], [ 0, %46 ], [ %93, %92 ], [ -1, %147 ], [ %154, %153 ], [ 0, %103 ]
  ret i32 %.0
}

define i32 @nice(i32 %inc) nounwind uwtable optsize {
  %1 = sext i32 %inc to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 34, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i8* @nl_langinfo_l(i32 %item, %struct.__locale.291* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i8* @nl_langinfo(i32 %item) nounwind optsize
  ret i8* %1
}

define i32 @ntohl(i32 %n) nounwind uwtable readnone optsize {
  %1 = tail call i32 @llvm.bswap.i32(i32 %n) nounwind
  ret i32 %1
}

define zeroext i16 @ntohs(i16 zeroext %n) nounwind uwtable readnone optsize {
  %1 = tail call i16 @llvm.bswap.i16(i16 %n) nounwind
  ret i16 %1
}

define i32 @openat(i32 %fd, i8* %filename, i32 %flags, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.292], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.292]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.292]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag.292]* %ap, i64 0, i64 0, i32 3
  %7 = load i8** %6, align 16
  %8 = sext i32 %3 to i64
  %9 = getelementptr i8* %7, i64 %8
  %10 = add i32 %3, 8
  store i32 %10, i32* %2, align 16
  br label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag.292]* %ap, i64 0, i64 0, i32 2
  %13 = load i8** %12, align 8
  %14 = getelementptr i8* %13, i64 8
  store i8* %14, i8** %12, align 8
  br label %15

; <label>:15                                      ; preds = %11, %5
  %.in = phi i8* [ %9, %5 ], [ %13, %11 ]
  %16 = bitcast i8* %.in to i32*
  %17 = load i32* %16, align 4
  call void @llvm.va_end(i8* %1)
  %18 = sext i32 %fd to i64
  %19 = ptrtoint i8* %filename to i64
  %20 = sext i32 %flags to i64
  %21 = zext i32 %17 to i64
  %22 = call i64 @__syscall_cp(i64 322, i64 %18, i64 %19, i64 %20, i64 %21, i64 0, i64 0) nounwind optsize
  %23 = call i64 @__syscall_ret(i64 %22) nounwind optsize
  %24 = trunc i64 %23 to i32
  ret i32 %24
}

define %struct.__DIR_s* @opendir(i8* %name) nounwind uwtable optsize {
  %1 = tail call i32 (i8*, i32, ...)* @open(i8* %name, i32 589824) nounwind optsize
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %13, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @calloc(i64 1, i64 2072) nounwind optsize
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %3
  %7 = sext i32 %1 to i64
  %8 = tail call i64 (i64, ...)* @__syscall(i64 6, i64 %7, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %13

; <label>:9                                       ; preds = %3
  %10 = bitcast i8* %4 to %struct.__DIR_s*
  %11 = getelementptr inbounds i8* %4, i64 4
  %12 = bitcast i8* %11 to i32*
  store i32 %1, i32* %12, align 4, !tbaa !6
  br label %13

; <label>:13                                      ; preds = %9, %6, %0
  %.0 = phi %struct.__DIR_s* [ %10, %9 ], [ null, %6 ], [ null, %0 ]
  ret %struct.__DIR_s* %.0
}

define %struct.__FILE_s.295* @open_memstream(i8** %bufp, i64* %sizep) nounwind uwtable optsize {
  %1 = tail call i8* @malloc(i64 1256) optsize
  %2 = bitcast i8* %1 to %struct.__FILE_s.295*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %48, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i8* @memset(i8* %1, i32 0, i64 232) nounwind optsize
  %6 = getelementptr inbounds i8* %1, i64 184
  %7 = getelementptr inbounds i8* %1, i64 152
  %8 = bitcast i8* %7 to i8**
  store i8* %6, i8** %8, align 8, !tbaa !7
  %9 = bitcast i8* %6 to i8***
  store i8** %bufp, i8*** %9, align 8, !tbaa !7
  %10 = getelementptr inbounds i8* %1, i64 192
  %11 = bitcast i8* %10 to i64**
  store i64* %sizep, i64** %11, align 8, !tbaa !7
  %12 = getelementptr inbounds i8* %1, i64 224
  %13 = bitcast i8* %12 to i64*
  store i64 0, i64* %13, align 8, !tbaa !5
  %14 = getelementptr inbounds i8* %1, i64 216
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15, align 8, !tbaa !5
  %16 = getelementptr inbounds i8* %1, i64 200
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 8, !tbaa !5
  %18 = getelementptr inbounds i8* %1, i64 208
  %19 = bitcast i8* %18 to i8**
  store i8* null, i8** %19, align 8, !tbaa !7
  %20 = bitcast i8* %1 to i32*
  store i32 4, i32* %20, align 4, !tbaa !6
  %21 = getelementptr inbounds i8* %1, i64 120
  %22 = bitcast i8* %21 to i32*
  store i32 -1, i32* %22, align 4, !tbaa !6
  %23 = getelementptr inbounds i8* %1, i64 232
  %24 = getelementptr inbounds i8* %1, i64 88
  %25 = bitcast i8* %24 to i8**
  store i8* %23, i8** %25, align 8, !tbaa !7
  %26 = getelementptr inbounds i8* %1, i64 96
  %27 = bitcast i8* %26 to i64*
  store i64 1024, i64* %27, align 8, !tbaa !5
  %28 = getelementptr inbounds i8* %1, i64 139
  store i8 -1, i8* %28, align 1, !tbaa !0
  %29 = getelementptr inbounds i8* %1, i64 72
  %30 = bitcast i8* %29 to i64 (%struct.__FILE_s.295*, i8*, i64)**
  store i64 (%struct.__FILE_s.295*, i8*, i64)* @ms_write, i64 (%struct.__FILE_s.295*, i8*, i64)** %30, align 8, !tbaa !7
  %31 = getelementptr inbounds i8* %1, i64 80
  %32 = bitcast i8* %31 to i64 (%struct.__FILE_s.295*, i64, i32)**
  store i64 (%struct.__FILE_s.295*, i64, i32)* @ms_seek, i64 (%struct.__FILE_s.295*, i64, i32)** %32, align 8, !tbaa !7
  %33 = getelementptr inbounds i8* %1, i64 24
  %34 = bitcast i8* %33 to i32 (%struct.__FILE_s.295*)**
  store i32 (%struct.__FILE_s.295*)* @ms_close, i32 (%struct.__FILE_s.295*)** %34, align 8, !tbaa !7
  %35 = load i32* getelementptr inbounds (%struct.__libc.294* bitcast (%struct.__libc* @__libc to %struct.__libc.294*), i64 0, i32 1), align 8, !tbaa !6
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %48

; <label>:37                                      ; preds = %4
  %38 = getelementptr inbounds i8* %1, i64 140
  %39 = bitcast i8* %38 to i32*
  store i32 -1, i32* %39, align 4, !tbaa !6
  %40 = load %struct.__FILE_s.295** getelementptr inbounds (%struct.__libc.294* bitcast (%struct.__libc* @__libc to %struct.__libc.294*), i64 0, i32 9), align 8, !tbaa !7
  %41 = getelementptr inbounds i8* %1, i64 112
  %42 = bitcast i8* %41 to %struct.__FILE_s.295**
  store %struct.__FILE_s.295* %40, %struct.__FILE_s.295** %42, align 8, !tbaa !7
  %43 = load %struct.__FILE_s.295** getelementptr inbounds (%struct.__libc.294* bitcast (%struct.__libc* @__libc to %struct.__libc.294*), i64 0, i32 9), align 8, !tbaa !7
  %44 = icmp eq %struct.__FILE_s.295* %43, null
  br i1 %44, label %47, label %45

; <label>:45                                      ; preds = %37
  %46 = getelementptr inbounds %struct.__FILE_s.295* %43, i64 0, i32 13
  store %struct.__FILE_s.295* %2, %struct.__FILE_s.295** %46, align 8, !tbaa !7
  br label %47

; <label>:47                                      ; preds = %45, %37
  store %struct.__FILE_s.295* %2, %struct.__FILE_s.295** getelementptr inbounds (%struct.__libc.294* bitcast (%struct.__libc* @__libc to %struct.__libc.294*), i64 0, i32 9), align 8, !tbaa !7
  br label %48

; <label>:48                                      ; preds = %47, %4, %0
  %.0 = phi %struct.__FILE_s.295* [ null, %0 ], [ %2, %4 ], [ %2, %47 ]
  ret %struct.__FILE_s.295* %.0
}

define internal i64 @ms_write(%struct.__FILE_s.295* %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.295* %f, i64 0, i32 23
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.295* %f, i64 0, i32 5
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.__FILE_s.295* %f, i64 0, i32 7
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = ptrtoint i8* %4 to i64
  %8 = ptrtoint i8* %6 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i8* %4, %6
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %0
  store i8* %6, i8** %3, align 8, !tbaa !7
  %12 = tail call i64 @ms_write(%struct.__FILE_s.295* %f, i8* %6, i64 %9) optsize
  %13 = icmp ult i64 %12, %9
  br i1 %13, label %57, label %14

; <label>:14                                      ; preds = %11, %0
  %15 = getelementptr inbounds i8* %2, i64 16
  %16 = bitcast i8* %15 to i64*
  %17 = load i64* %16, align 8, !tbaa !5
  %18 = add i64 %17, %len
  %19 = getelementptr inbounds i8* %2, i64 40
  %20 = bitcast i8* %19 to i64*
  %21 = load i64* %20, align 8, !tbaa !5
  %22 = icmp ult i64 %18, %21
  br i1 %22, label %._crit_edge, label %23

._crit_edge:                                      ; preds = %14
  %.pre1 = getelementptr inbounds i8* %2, i64 24
  %.pre2 = bitcast i8* %.pre1 to i8**
  br label %41

; <label>:23                                      ; preds = %14
  %24 = shl i64 %21, 1
  %25 = add i64 %18, 1
  %26 = or i64 %25, %24
  %27 = or i64 %26, 1
  %28 = getelementptr inbounds i8* %2, i64 24
  %29 = bitcast i8* %28 to i8**
  %30 = load i8** %29, align 8, !tbaa !7
  %31 = tail call i8* @realloc(i8* %30, i64 %27) nounwind optsize
  %32 = icmp eq i8* %31, null
  br i1 %32, label %57, label %33

; <label>:33                                      ; preds = %23
  store i8* %31, i8** %29, align 8, !tbaa !7
  %34 = bitcast i8* %2 to i8***
  %35 = load i8*** %34, align 8, !tbaa !7
  store i8* %31, i8** %35, align 8, !tbaa !7
  %36 = load i8** %29, align 8, !tbaa !7
  %37 = load i64* %20, align 8, !tbaa !5
  %38 = getelementptr inbounds i8* %36, i64 %37
  %39 = sub i64 %27, %37
  %40 = tail call i8* @memset(i8* %38, i32 0, i64 %39) nounwind optsize
  store i64 %27, i64* %20, align 8, !tbaa !5
  %.pre = load i64* %16, align 8, !tbaa !5
  br label %41

; <label>:41                                      ; preds = %33, %._crit_edge
  %.pre-phi3 = phi i8** [ %.pre2, %._crit_edge ], [ %29, %33 ]
  %42 = phi i64 [ %17, %._crit_edge ], [ %.pre, %33 ]
  %43 = load i8** %.pre-phi3, align 8, !tbaa !7
  %44 = getelementptr inbounds i8* %43, i64 %42
  %45 = tail call i8* @memcpy(i8* %44, i8* %buf, i64 %len) nounwind optsize
  %46 = load i64* %16, align 8, !tbaa !5
  %47 = add i64 %46, %len
  store i64 %47, i64* %16, align 8, !tbaa !5
  %48 = getelementptr inbounds i8* %2, i64 32
  %49 = bitcast i8* %48 to i64*
  %50 = load i64* %49, align 8, !tbaa !5
  %51 = icmp ult i64 %47, %50
  br i1 %51, label %53, label %52

; <label>:52                                      ; preds = %41
  store i64 %47, i64* %49, align 8, !tbaa !5
  br label %53

; <label>:53                                      ; preds = %52, %41
  %54 = getelementptr inbounds i8* %2, i64 8
  %55 = bitcast i8* %54 to i64**
  %56 = load i64** %55, align 8, !tbaa !7
  store i64 %47, i64* %56, align 8, !tbaa !5
  br label %57

; <label>:57                                      ; preds = %53, %23, %11
  %.0 = phi i64 [ %len, %53 ], [ 0, %11 ], [ 0, %23 ]
  ret i64 %.0
}

define internal i64 @ms_seek(%struct.__FILE_s.295* nocapture %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %1 = alloca [3 x i64], align 8
  %2 = getelementptr inbounds %struct.__FILE_s.295* %f, i64 0, i32 23
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = icmp ugt i32 %whence, 2
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %7, %0
  %6 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %26

; <label>:7                                       ; preds = %0
  %8 = sext i32 %whence to i64
  %9 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 0
  store i64 0, i64* %9, align 8, !tbaa !5
  %10 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 1
  %11 = getelementptr inbounds i8* %3, i64 16
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %12, align 8, !tbaa !5
  store i64 %13, i64* %10, align 8, !tbaa !5
  %14 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 2
  %15 = getelementptr inbounds i8* %3, i64 32
  %16 = bitcast i8* %15 to i64*
  %17 = load i64* %16, align 8, !tbaa !5
  store i64 %17, i64* %14, align 8, !tbaa !5
  %18 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 %8
  %19 = load i64* %18, align 8, !tbaa !5
  %20 = sub nsw i64 0, %19
  %21 = icmp slt i64 %off, %20
  %22 = sub nsw i64 9223372036854775807, %19
  %23 = icmp slt i64 %22, %off
  %or.cond = or i1 %21, %23
  br i1 %or.cond, label %5, label %24

; <label>:24                                      ; preds = %7
  %25 = add nsw i64 %19, %off
  store i64 %25, i64* %12, align 8, !tbaa !5
  br label %26

; <label>:26                                      ; preds = %24, %5
  %.0 = phi i64 [ -1, %5 ], [ %25, %24 ]
  ret i64 %.0
}

define internal i32 @ms_close(%struct.__FILE_s.295* nocapture %f) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @open(i8* %filename, i32 %flags, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.296], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.296]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.296]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag.296]* %ap, i64 0, i64 0, i32 3
  %7 = load i8** %6, align 16
  %8 = sext i32 %3 to i64
  %9 = getelementptr i8* %7, i64 %8
  %10 = add i32 %3, 8
  store i32 %10, i32* %2, align 16
  br label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag.296]* %ap, i64 0, i64 0, i32 2
  %13 = load i8** %12, align 8
  %14 = getelementptr i8* %13, i64 8
  store i8* %14, i8** %12, align 8
  br label %15

; <label>:15                                      ; preds = %11, %5
  %.in = phi i8* [ %9, %5 ], [ %13, %11 ]
  %16 = bitcast i8* %.in to i32*
  %17 = load i32* %16, align 4
  call void @llvm.va_end(i8* %1)
  %18 = ptrtoint i8* %filename to i64
  %19 = sext i32 %flags to i64
  %20 = zext i32 %17 to i64
  %21 = call i64 @__syscall_cp(i64 5, i64 %18, i64 %19, i64 %20, i64 0, i64 0, i64 0) nounwind optsize
  %22 = call i64 @__syscall_ret(i64 %21) nounwind optsize
  %23 = trunc i64 %22 to i32
  ret i32 %23
}

define i32 @openpty(i32* nocapture %m, i32* nocapture %s, i8* %name, %struct.termios.82* %tio, %struct.winsize* %ws) nounwind uwtable optsize {
  %n = alloca i32, align 4
  %buf = alloca [20 x i8], align 16
  store i32 0, i32* %n, align 4, !tbaa !6
  %1 = call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([10 x i8]* @.str508, i64 0, i64 0), i32 258) nounwind optsize
  store i32 %1, i32* %m, align 4, !tbaa !6
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %32, label %3

; <label>:3                                       ; preds = %0
  %4 = call i32 (i32, i32, ...)* @ioctl(i32 %1, i32 1074025521, i32* %n) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %3
  %7 = load i32* %m, align 4, !tbaa !6
  %8 = call i32 (i32, i32, ...)* @ioctl(i32 %7, i32 -2147199952, i32* %n) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %6, %3
  %11 = load i32* %m, align 4, !tbaa !6
  %12 = call i32 @close(i32 %11) nounwind optsize
  br label %32

; <label>:13                                      ; preds = %6
  %14 = icmp eq i8* %name, null
  %15 = getelementptr inbounds [20 x i8]* %buf, i64 0, i64 0
  %.01 = select i1 %14, i8* %15, i8* %name
  %16 = load i32* %n, align 4, !tbaa !6
  %17 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %.01, i64 20, i8* getelementptr inbounds ([12 x i8]* @.str1509, i64 0, i64 0), i32 %16) nounwind optsize
  %18 = call i32 (i8*, i32, ...)* @open(i8* %.01, i32 258) nounwind optsize
  store i32 %18, i32* %s, align 4, !tbaa !6
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %23

; <label>:20                                      ; preds = %13
  %21 = load i32* %m, align 4, !tbaa !6
  %22 = call i32 @close(i32 %21) nounwind optsize
  br label %32

; <label>:23                                      ; preds = %13
  %24 = icmp eq %struct.termios.82* %tio, null
  br i1 %24, label %27, label %25

; <label>:25                                      ; preds = %23
  %26 = call i32 bitcast (i32 (i32, i32, %struct.termios.162*)* @tcsetattr to i32 (i32, i32, %struct.termios.82*)*)(i32 %18, i32 0, %struct.termios.82* %tio) nounwind optsize
  br label %27

; <label>:27                                      ; preds = %25, %23
  %28 = icmp eq %struct.winsize* %ws, null
  br i1 %28, label %32, label %29

; <label>:29                                      ; preds = %27
  %30 = load i32* %s, align 4, !tbaa !6
  %31 = call i32 (i32, i32, ...)* @ioctl(i32 %30, i32 21524, %struct.winsize* %ws) nounwind optsize
  br label %32

; <label>:32                                      ; preds = %29, %27, %20, %10, %0
  %.0 = phi i32 [ -1, %10 ], [ -1, %20 ], [ -1, %0 ], [ 0, %27 ], [ 0, %29 ]
  ret i32 %.0
}

define %struct.__FILE_s.300* @open_wmemstream(i32** %bufp, i64* %sizep) nounwind uwtable optsize {
  %1 = tail call i8* @malloc(i64 240) optsize
  %2 = bitcast i8* %1 to %struct.__FILE_s.300*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %48, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i8* @memset(i8* %1, i32 0, i64 240) nounwind optsize
  %6 = getelementptr inbounds i8* %1, i64 184
  %7 = getelementptr inbounds i8* %1, i64 152
  %8 = bitcast i8* %7 to i8**
  store i8* %6, i8** %8, align 8, !tbaa !7
  %9 = bitcast i8* %6 to i32***
  store i32** %bufp, i32*** %9, align 8, !tbaa !7
  %10 = getelementptr inbounds i8* %1, i64 192
  %11 = bitcast i8* %10 to i64**
  store i64* %sizep, i64** %11, align 8, !tbaa !7
  %12 = getelementptr inbounds i8* %1, i64 224
  %13 = bitcast i8* %12 to i64*
  store i64 0, i64* %13, align 8, !tbaa !5
  %14 = getelementptr inbounds i8* %1, i64 216
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15, align 8, !tbaa !5
  %16 = getelementptr inbounds i8* %1, i64 200
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 8, !tbaa !5
  %18 = getelementptr inbounds i8* %1, i64 208
  %19 = bitcast i8* %18 to i32**
  store i32* null, i32** %19, align 8, !tbaa !7
  %20 = bitcast i8* %1 to i32*
  store i32 4, i32* %20, align 4, !tbaa !6
  %21 = getelementptr inbounds i8* %1, i64 120
  %22 = bitcast i8* %21 to i32*
  store i32 -1, i32* %22, align 4, !tbaa !6
  %23 = getelementptr inbounds i8* %1, i64 240
  %24 = getelementptr inbounds i8* %1, i64 88
  %25 = bitcast i8* %24 to i8**
  store i8* %23, i8** %25, align 8, !tbaa !7
  %26 = getelementptr inbounds i8* %1, i64 96
  %27 = bitcast i8* %26 to i64*
  store i64 0, i64* %27, align 8, !tbaa !5
  %28 = getelementptr inbounds i8* %1, i64 139
  store i8 -1, i8* %28, align 1, !tbaa !0
  %29 = getelementptr inbounds i8* %1, i64 72
  %30 = bitcast i8* %29 to i64 (%struct.__FILE_s.300*, i8*, i64)**
  store i64 (%struct.__FILE_s.300*, i8*, i64)* @wms_write, i64 (%struct.__FILE_s.300*, i8*, i64)** %30, align 8, !tbaa !7
  %31 = getelementptr inbounds i8* %1, i64 80
  %32 = bitcast i8* %31 to i64 (%struct.__FILE_s.300*, i64, i32)**
  store i64 (%struct.__FILE_s.300*, i64, i32)* @wms_seek, i64 (%struct.__FILE_s.300*, i64, i32)** %32, align 8, !tbaa !7
  %33 = getelementptr inbounds i8* %1, i64 24
  %34 = bitcast i8* %33 to i32 (%struct.__FILE_s.300*)**
  store i32 (%struct.__FILE_s.300*)* @wms_close, i32 (%struct.__FILE_s.300*)** %34, align 8, !tbaa !7
  %35 = load i32* getelementptr inbounds (%struct.__libc.299* bitcast (%struct.__libc* @__libc to %struct.__libc.299*), i64 0, i32 1), align 8, !tbaa !6
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %48

; <label>:37                                      ; preds = %4
  %38 = getelementptr inbounds i8* %1, i64 140
  %39 = bitcast i8* %38 to i32*
  store i32 -1, i32* %39, align 4, !tbaa !6
  %40 = load %struct.__FILE_s.300** getelementptr inbounds (%struct.__libc.299* bitcast (%struct.__libc* @__libc to %struct.__libc.299*), i64 0, i32 9), align 8, !tbaa !7
  %41 = getelementptr inbounds i8* %1, i64 112
  %42 = bitcast i8* %41 to %struct.__FILE_s.300**
  store %struct.__FILE_s.300* %40, %struct.__FILE_s.300** %42, align 8, !tbaa !7
  %43 = load %struct.__FILE_s.300** getelementptr inbounds (%struct.__libc.299* bitcast (%struct.__libc* @__libc to %struct.__libc.299*), i64 0, i32 9), align 8, !tbaa !7
  %44 = icmp eq %struct.__FILE_s.300* %43, null
  br i1 %44, label %47, label %45

; <label>:45                                      ; preds = %37
  %46 = getelementptr inbounds %struct.__FILE_s.300* %43, i64 0, i32 13
  store %struct.__FILE_s.300* %2, %struct.__FILE_s.300** %46, align 8, !tbaa !7
  br label %47

; <label>:47                                      ; preds = %45, %37
  store %struct.__FILE_s.300* %2, %struct.__FILE_s.300** getelementptr inbounds (%struct.__libc.299* bitcast (%struct.__libc* @__libc to %struct.__libc.299*), i64 0, i32 9), align 8, !tbaa !7
  br label %48

; <label>:48                                      ; preds = %47, %4, %0
  %.0 = phi %struct.__FILE_s.300* [ null, %0 ], [ %2, %4 ], [ %2, %47 ]
  ret %struct.__FILE_s.300* %.0
}

define internal i64 @wms_write(%struct.__FILE_s.300* nocapture %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = alloca i8*, align 8
  store i8* %buf, i8** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__FILE_s.300* %f, i64 0, i32 23
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = getelementptr inbounds i8* %3, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = load i64* %5, align 8, !tbaa !5
  %7 = add i64 %6, %len
  %8 = getelementptr inbounds i8* %3, i64 40
  %9 = bitcast i8* %8 to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %11 = icmp ult i64 %7, %10
  br i1 %11, label %._crit_edge, label %12

._crit_edge:                                      ; preds = %0
  %.pre1 = getelementptr inbounds i8* %3, i64 24
  %.pre2 = bitcast i8* %.pre1 to i32**
  br label %37

; <label>:12                                      ; preds = %0
  %13 = shl i64 %10, 1
  %14 = add i64 %7, 1
  %15 = or i64 %14, %13
  %16 = or i64 %15, 1
  %17 = icmp ugt i64 %16, 2305843009213693951
  br i1 %17, label %59, label %18

; <label>:18                                      ; preds = %12
  %19 = getelementptr inbounds i8* %3, i64 24
  %20 = bitcast i8* %19 to i32**
  %21 = load i32** %20, align 8, !tbaa !7
  %22 = bitcast i32* %21 to i8*
  %23 = shl i64 %16, 2
  %24 = call i8* @realloc(i8* %22, i64 %23) nounwind optsize
  %25 = bitcast i8* %24 to i32*
  %26 = icmp eq i8* %24, null
  br i1 %26, label %59, label %27

; <label>:27                                      ; preds = %18
  store i32* %25, i32** %20, align 8, !tbaa !7
  %28 = bitcast i8* %3 to i32***
  %29 = load i32*** %28, align 8, !tbaa !7
  store i32* %25, i32** %29, align 8, !tbaa !7
  %30 = load i32** %20, align 8, !tbaa !7
  %31 = load i64* %9, align 8, !tbaa !5
  %32 = getelementptr inbounds i32* %30, i64 %31
  %33 = bitcast i32* %32 to i8*
  %34 = sub i64 %16, %31
  %35 = shl i64 %34, 2
  %36 = call i8* @memset(i8* %33, i32 0, i64 %35) nounwind optsize
  store i64 %16, i64* %9, align 8, !tbaa !5
  %.pre = load i64* %5, align 8, !tbaa !5
  br label %37

; <label>:37                                      ; preds = %27, %._crit_edge
  %.pre-phi3 = phi i32** [ %.pre2, %._crit_edge ], [ %20, %27 ]
  %38 = phi i64 [ %10, %._crit_edge ], [ %16, %27 ]
  %39 = phi i64 [ %6, %._crit_edge ], [ %.pre, %27 ]
  %40 = load i32** %.pre-phi3, align 8, !tbaa !7
  %41 = getelementptr inbounds i32* %40, i64 %39
  %42 = sub i64 %38, %39
  %43 = getelementptr inbounds i8* %3, i64 48
  %44 = bitcast i8* %43 to %struct.mbstate_t*
  %45 = call i64 @mbsnrtowcs(i32* %41, i8** %1, i64 %len, i64 %42, %struct.mbstate_t* %44) nounwind optsize
  %46 = icmp eq i64 %45, -1
  br i1 %46, label %59, label %47

; <label>:47                                      ; preds = %37
  %48 = load i64* %5, align 8, !tbaa !5
  %49 = add i64 %48, %45
  store i64 %49, i64* %5, align 8, !tbaa !5
  %50 = getelementptr inbounds i8* %3, i64 32
  %51 = bitcast i8* %50 to i64*
  %52 = load i64* %51, align 8, !tbaa !5
  %53 = icmp ult i64 %49, %52
  br i1 %53, label %55, label %54

; <label>:54                                      ; preds = %47
  store i64 %49, i64* %51, align 8, !tbaa !5
  br label %55

; <label>:55                                      ; preds = %54, %47
  %56 = getelementptr inbounds i8* %3, i64 8
  %57 = bitcast i8* %56 to i64**
  %58 = load i64** %57, align 8, !tbaa !7
  store i64 %49, i64* %58, align 8, !tbaa !5
  br label %59

; <label>:59                                      ; preds = %55, %37, %18, %12
  %.0 = phi i64 [ %len, %55 ], [ 0, %12 ], [ 0, %18 ], [ 0, %37 ]
  ret i64 %.0
}

define internal i64 @wms_seek(%struct.__FILE_s.300* nocapture %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %1 = alloca [3 x i64], align 8
  %2 = getelementptr inbounds %struct.__FILE_s.300* %f, i64 0, i32 23
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = icmp ugt i32 %whence, 2
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %7, %0
  %6 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %28

; <label>:7                                       ; preds = %0
  %8 = sext i32 %whence to i64
  %9 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 0
  store i64 0, i64* %9, align 8, !tbaa !5
  %10 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 1
  %11 = getelementptr inbounds i8* %3, i64 16
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %12, align 8, !tbaa !5
  store i64 %13, i64* %10, align 8, !tbaa !5
  %14 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 2
  %15 = getelementptr inbounds i8* %3, i64 32
  %16 = bitcast i8* %15 to i64*
  %17 = load i64* %16, align 8, !tbaa !5
  store i64 %17, i64* %14, align 8, !tbaa !5
  %18 = getelementptr inbounds [3 x i64]* %1, i64 0, i64 %8
  %19 = load i64* %18, align 8, !tbaa !5
  %20 = sub nsw i64 0, %19
  %21 = icmp slt i64 %off, %20
  %22 = sub nsw i64 2305843009213693951, %19
  %23 = icmp slt i64 %22, %off
  %or.cond = or i1 %21, %23
  br i1 %or.cond, label %5, label %24

; <label>:24                                      ; preds = %7
  %25 = getelementptr inbounds i8* %3, i64 48
  %26 = call i8* @memset(i8* %25, i32 0, i64 8) nounwind optsize
  %27 = add nsw i64 %19, %off
  store i64 %27, i64* %12, align 8, !tbaa !5
  br label %28

; <label>:28                                      ; preds = %24, %5
  %.0 = phi i64 [ -1, %5 ], [ %27, %24 ]
  ret i64 %.0
}

define internal i32 @wms_close(%struct.__FILE_s.300* nocapture %f) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @__overflow(%struct.__FILE_s.85* %f, i32 %_c) nounwind uwtable optsize {
  %c = alloca i8, align 1
  %1 = trunc i32 %_c to i8
  store i8 %1, i8* %c, align 1, !tbaa !0
  %2 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = call i32 bitcast (i32 (%struct.__FILE_s.694*)* @__towrite to i32 (%struct.__FILE_s.85*)*)(%struct.__FILE_s.85* %f) nounwind optsize
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %._crit_edge, label %30

._crit_edge:                                      ; preds = %5
  %.pre = load i8** %2, align 8, !tbaa !7
  br label %8

; <label>:8                                       ; preds = %._crit_edge, %0
  %9 = phi i8* [ %.pre, %._crit_edge ], [ %3, %0 ]
  %10 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %11 = load i8** %10, align 8, !tbaa !7
  %12 = icmp ult i8* %11, %9
  br i1 %12, label %13, label %22

; <label>:13                                      ; preds = %8
  %14 = load i8* %c, align 1, !tbaa !0
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 20
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = sext i8 %17 to i32
  %19 = icmp eq i32 %15, %18
  br i1 %19, label %22, label %20

; <label>:20                                      ; preds = %13
  %21 = getelementptr inbounds i8* %11, i64 1
  store i8* %21, i8** %10, align 8, !tbaa !7
  store i8 %14, i8* %11, align 1, !tbaa !0
  br label %30

; <label>:22                                      ; preds = %13, %8
  %23 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 9
  %24 = load i64 (%struct.__FILE_s.85*, i8*, i64)** %23, align 8, !tbaa !7
  %25 = call i64 %24(%struct.__FILE_s.85* %f, i8* %c, i64 1) nounwind optsize
  %26 = icmp eq i64 %25, 1
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %22
  %28 = load i8* %c, align 1, !tbaa !0
  %29 = zext i8 %28 to i32
  br label %30

; <label>:30                                      ; preds = %27, %22, %20, %5
  %.0 = phi i32 [ %15, %20 ], [ %29, %27 ], [ -1, %5 ], [ -1, %22 ]
  ret i32 %.0
}

define i64 @pathconf(i8* nocapture %path, i32 %name) nounwind uwtable optsize {
  %1 = tail call i64 @fpathconf(i32 -1, i32 %name) nounwind optsize
  ret i64 %1
}

define i32 @pause() nounwind uwtable optsize {
  %1 = tail call i64 @__syscall_cp(i64 29, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @pclose(%struct.__FILE_s.52* %f) nounwind uwtable optsize {
  %status = alloca i32, align 4
  %1 = call i32 @fclose(%struct.__FILE_s.52* %f) nounwind optsize
  %2 = getelementptr inbounds %struct.__FILE_s.52* %f, i64 0, i32 16
  br label %3

; <label>:3                                       ; preds = %7, %0
  %4 = load i32* %2, align 4, !tbaa !6
  %5 = call i32 @waitpid(i32 %4, i32* %status, i32 0) nounwind optsize
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %7, label %11

; <label>:7                                       ; preds = %3
  %8 = call i32* @__errno_location() nounwind readnone optsize
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %3, label %.loopexit

; <label>:11                                      ; preds = %3
  %12 = load i32* %status, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %11, %7
  %.0 = phi i32 [ %12, %11 ], [ -1, %7 ]
  ret i32 %.0
}

define void @perror(i8* %msg) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.85** bitcast (%struct.__FILE_s** @stderr to %struct.__FILE_s.85**), align 8, !tbaa !7
  %2 = tail call i32* @__errno_location() nounwind readnone optsize
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = tail call i8* @strerror(i32 %3) nounwind optsize
  %5 = icmp eq i8* %msg, null
  br i1 %5, label %11, label %6

; <label>:6                                       ; preds = %0
  %7 = tail call i64 @strlen(i8* %msg) nounwind optsize
  %8 = tail call i64 @fwrite(i8* %msg, i64 %7, i64 1, %struct.__FILE_s.85* %1) nounwind optsize
  %9 = tail call i32 @fputc(i32 58, %struct.__FILE_s.85* %1) nounwind optsize
  %10 = tail call i32 @fputc(i32 32, %struct.__FILE_s.85* %1) nounwind optsize
  br label %11

; <label>:11                                      ; preds = %6, %0
  %12 = tail call i64 @strlen(i8* %4) nounwind optsize
  %13 = tail call i64 @fwrite(i8* %4, i64 %12, i64 1, %struct.__FILE_s.85* %1) nounwind optsize
  %14 = tail call i32 @fputc(i32 10, %struct.__FILE_s.85* %1) nounwind optsize
  ret void
}

define i32 @pipe(i32* %fd) nounwind uwtable optsize {
  %1 = ptrtoint i32* %fd to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 42, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @pivot_root(i8* %new, i8* %old) nounwind uwtable optsize {
  %1 = ptrtoint i8* %new to i64
  %2 = ptrtoint i8* %old to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 218, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define x86_fp80 @__polevll(x86_fp80 %x, x86_fp80* nocapture %P, i32 %n) nounwind uwtable readonly optsize {
  %1 = load x86_fp80* %P, align 16, !tbaa !4
  br label %2

; <label>:2                                       ; preds = %2, %0
  %.01 = phi i32 [ %n, %0 ], [ %6, %2 ]
  %P.pn = phi x86_fp80* [ %P, %0 ], [ %.0, %2 ]
  %y.0 = phi x86_fp80 [ %1, %0 ], [ %5, %2 ]
  %.0 = getelementptr inbounds x86_fp80* %P.pn, i64 1
  %3 = fmul x86_fp80 %y.0, %x
  %4 = load x86_fp80* %.0, align 16, !tbaa !4
  %5 = fadd x86_fp80 %3, %4
  %6 = add nsw i32 %.01, -1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %2

; <label>:8                                       ; preds = %2
  ret x86_fp80 %5
}

define x86_fp80 @__p1evll(x86_fp80 %x, x86_fp80* nocapture %P, i32 %n) nounwind uwtable readonly optsize {
  %1 = add nsw i32 %n, -1
  %2 = load x86_fp80* %P, align 16, !tbaa !4
  %3 = fadd x86_fp80 %2, %x
  br label %4

; <label>:4                                       ; preds = %4, %0
  %.01 = phi i32 [ %1, %0 ], [ %8, %4 ]
  %P.pn = phi x86_fp80* [ %P, %0 ], [ %.0, %4 ]
  %y.0 = phi x86_fp80 [ %3, %0 ], [ %7, %4 ]
  %.0 = getelementptr inbounds x86_fp80* %P.pn, i64 1
  %5 = fmul x86_fp80 %y.0, %x
  %6 = load x86_fp80* %.0, align 16, !tbaa !4
  %7 = fadd x86_fp80 %5, %6
  %8 = add nsw i32 %.01, -1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %4

; <label>:10                                      ; preds = %4
  ret x86_fp80 %7
}

define i32 @poll(%struct.pollfd* %fds, i32 %n, i32 %timeout) nounwind uwtable optsize {
  %1 = ptrtoint %struct.pollfd* %fds to i64
  %2 = zext i32 %n to i64
  %3 = sext i32 %timeout to i64
  %4 = tail call i64 @__syscall_cp(i64 168, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define %struct.__FILE_s.61* @popen(i8* %cmd, i8* %mode) nounwind uwtable optsize {
  %p = alloca [2 x i32], align 4
  %1 = load i8* %mode, align 1, !tbaa !0
  %2 = sext i8 %1 to i32
  %3 = call i8* @strchr(i8* getelementptr inbounds ([3 x i8]* @.str522, i64 0, i64 0), i32 %2) nounwind optsize
  %4 = icmp eq i8* %3, null
  br i1 %4, label %12, label %5

; <label>:5                                       ; preds = %0
  %6 = ptrtoint i8* %3 to i64
  %7 = sub i64 %6, ptrtoint ([3 x i8]* @.str522 to i64)
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 0
  %10 = call i32 @pipe(i32* %9) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %51

; <label>:12                                      ; preds = %0
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %13, align 4, !tbaa !6
  br label %51

; <label>:14                                      ; preds = %5
  %15 = sext i32 %8 to i64
  %16 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 %15
  %17 = load i32* %16, align 4, !tbaa !6
  %18 = call %struct.__FILE_s.61* @fdopen(i32 %17, i8* %mode) nounwind optsize
  %19 = icmp eq %struct.__FILE_s.61* %18, null
  br i1 %19, label %20, label %26

; <label>:20                                      ; preds = %14
  %21 = load i32* %9, align 4, !tbaa !6
  %22 = call i32 @close(i32 %21) nounwind optsize
  %23 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 1
  %24 = load i32* %23, align 4, !tbaa !6
  %25 = call i32 @close(i32 %24) nounwind optsize
  br label %51

; <label>:26                                      ; preds = %14
  %27 = call i32 @fork() nounwind optsize
  switch i32 %27, label %._crit_edge [
    i32 -1, label %28
    i32 0, label %35
  ]

._crit_edge:                                      ; preds = %26
  %.pre = sub nsw i32 1, %8
  %.pre1 = sext i32 %.pre to i64
  %.pre3 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 %.pre1
  br label %47

; <label>:28                                      ; preds = %26
  %29 = call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %18) nounwind optsize
  %30 = load i32* %9, align 4, !tbaa !6
  %31 = call i32 @close(i32 %30) nounwind optsize
  %32 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 1
  %33 = load i32* %32, align 4, !tbaa !6
  %34 = call i32 @close(i32 %33) nounwind optsize
  br label %51

; <label>:35                                      ; preds = %26
  %36 = sub nsw i32 1, %8
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 %37
  %39 = load i32* %38, align 4, !tbaa !6
  %40 = call i32 @dup2(i32 %39, i32 %36) nounwind optsize
  %41 = load i32* %9, align 4, !tbaa !6
  %42 = call i32 @close(i32 %41) nounwind optsize
  %43 = getelementptr inbounds [2 x i32]* %p, i64 0, i64 1
  %44 = load i32* %43, align 4, !tbaa !6
  %45 = call i32 @close(i32 %44) nounwind optsize
  %46 = call i32 (i8*, i8*, ...)* @execl(i8* getelementptr inbounds ([8 x i8]* @.str1523, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str2524, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str3525, i64 0, i64 0), i8* %cmd, i8* null) nounwind optsize
  call void @_exit(i32 127) nounwind optsize
  br label %47

; <label>:47                                      ; preds = %35, %._crit_edge
  %.pre-phi4 = phi i32* [ %.pre3, %._crit_edge ], [ %38, %35 ]
  %48 = load i32* %.pre-phi4, align 4, !tbaa !6
  %49 = call i32 @close(i32 %48) nounwind optsize
  %50 = getelementptr inbounds %struct.__FILE_s.61* %18, i64 0, i32 16
  store i32 %27, i32* %50, align 4, !tbaa !6
  br label %51

; <label>:51                                      ; preds = %47, %28, %20, %12, %5
  %.0 = phi %struct.__FILE_s.61* [ %18, %47 ], [ null, %28 ], [ null, %20 ], [ null, %12 ], [ null, %5 ]
  ret %struct.__FILE_s.61* %.0
}

define i32 @posix_fadvise(i32 %fd, i64 %base, i64 %len, i32 %advice) nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 270, i32 %fd, i32 0, i64 %base, i64 undef, i64 %len, i64 undef, i32 %advice) nounwind optsize
  %2 = sub nsw i64 0, %1
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @posix_fallocate(i32 %fd, i64 %base, i64 %len) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 352, i64 %1, i64 0, i64 %base, i64 undef, i64 %len, i64 undef) nounwind optsize
  %3 = sub nsw i64 0, %2
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @posix_madvise(i8* %addr, i64 %len, i32 %advice) nounwind uwtable optsize {
  %1 = icmp eq i32 %advice, 4
  br i1 %1, label %8, label %2

; <label>:2                                       ; preds = %0
  %3 = ptrtoint i8* %addr to i64
  %4 = sext i32 %advice to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 220, i64 %3, i64 %len, i64 %4, i32 0, i32 0, i32 0) nounwind optsize
  %6 = sub nsw i64 0, %5
  %7 = trunc i64 %6 to i32
  br label %8

; <label>:8                                       ; preds = %2, %0
  %.0 = phi i32 [ %7, %2 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @posix_memalign(i8** nocapture %res, i64 %align, i64 %len) nounwind uwtable optsize {
  %1 = sub i64 0, %align
  %2 = and i64 %1, -8
  %3 = and i64 %2, %align
  %4 = icmp eq i64 %3, %align
  br i1 %4, label %5, label %37

; <label>:5                                       ; preds = %0
  %6 = xor i64 %align, -1
  %7 = icmp ugt i64 %len, %6
  br i1 %7, label %37, label %8

; <label>:8                                       ; preds = %5
  %9 = icmp ult i64 %align, 33
  br i1 %9, label %10, label %17

; <label>:10                                      ; preds = %8
  %11 = tail call i8* @malloc(i64 %len) optsize
  %12 = icmp eq i8* %11, null
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %10
  %14 = tail call i32* @__errno_location() nounwind readnone optsize
  %15 = load i32* %14, align 4, !tbaa !6
  br label %37

; <label>:16                                      ; preds = %10
  store i8* %11, i8** %res, align 8, !tbaa !7
  br label %37

; <label>:17                                      ; preds = %8
  %18 = add i64 %align, -1
  %19 = add i64 %18, %len
  %20 = tail call i8* @malloc(i64 %19) optsize
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %17
  %23 = tail call i32* @__errno_location() nounwind readnone optsize
  %24 = load i32* %23, align 4, !tbaa !6
  br label %37

; <label>:25                                      ; preds = %17
  %26 = ptrtoint i8* %20 to i64
  %27 = add i64 %18, %26
  %28 = and i64 %27, %1
  %29 = getelementptr inbounds i8* %20, i64 -8
  %30 = inttoptr i64 %28 to i8*
  %31 = bitcast i8* %29 to i64*
  %32 = inttoptr i64 %28 to i64*
  %33 = load i64* %31, align 8, !tbaa !5
  %34 = sub i64 %26, %28
  %35 = add i64 %33, %34
  %36 = getelementptr inbounds i64* %32, i64 -1
  store i64 %35, i64* %36, align 8, !tbaa !5
  store i8* %30, i8** %res, align 8, !tbaa !7
  br label %37

; <label>:37                                      ; preds = %25, %22, %16, %13, %5, %0
  %.0 = phi i32 [ 0, %16 ], [ %15, %13 ], [ 0, %25 ], [ %24, %22 ], [ 22, %0 ], [ 12, %5 ]
  ret i32 %.0
}

define i32 @posix_spawnattr_destroy(%struct.posix_spawnattr_t* nocapture %attr) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @posix_spawnattr_getflags(%struct.posix_spawnattr_t.308* nocapture %attr, i16* nocapture %flags) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.308* %attr, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = trunc i32 %2 to i16
  store i16 %3, i16* %flags, align 2, !tbaa !8
  ret i32 0
}

define i32 @posix_spawnattr_getpgroup(%struct.posix_spawnattr_t.310* nocapture %attr, i32* nocapture %pgrp) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.310* %attr, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !6
  store i32 %2, i32* %pgrp, align 4, !tbaa !6
  ret i32 0
}

define i32 @posix_spawnattr_getsigdefault(%struct.posix_spawnattr_t.312* nocapture %attr, %struct.sigset_t.313* nocapture %def) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.312* %attr, i64 0, i32 2
  %2 = bitcast %struct.sigset_t.313* %def to i8*
  %3 = bitcast %struct.sigset_t.313* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 128, i32 8, i1 false)
  ret i32 0
}

define i32 @posix_spawnattr_getsigmask(%struct.posix_spawnattr_t.314* nocapture %attr, %struct.sigset_t.315* nocapture %mask) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.314* %attr, i64 0, i32 3
  %2 = bitcast %struct.sigset_t.315* %mask to i8*
  %3 = bitcast %struct.sigset_t.315* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 128, i32 8, i1 false)
  ret i32 0
}

define i32 @posix_spawnattr_init(%struct.posix_spawnattr_t.316* nocapture %attr) nounwind uwtable optsize {
  %1 = alloca %struct.posix_spawnattr_t.316, align 8
  %2 = bitcast %struct.posix_spawnattr_t.316* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 336, i32 8, i1 false)
  %3 = bitcast %struct.posix_spawnattr_t.316* %attr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %2, i64 336, i32 8, i1 false)
  ret i32 0
}

define i32 @posix_spawnattr_setflags(%struct.posix_spawnattr_t.318* nocapture %attr, i16 signext %flags) nounwind uwtable optsize {
  %1 = sext i16 %flags to i32
  %2 = getelementptr inbounds %struct.posix_spawnattr_t.318* %attr, i64 0, i32 0
  store i32 %1, i32* %2, align 4, !tbaa !6
  ret i32 0
}

define i32 @posix_spawnattr_setpgroup(%struct.posix_spawnattr_t.320* nocapture %attr, i32 %pgrp) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.320* %attr, i64 0, i32 1
  store i32 %pgrp, i32* %1, align 4, !tbaa !6
  ret i32 0
}

define i32 @posix_spawnattr_setsigdefault(%struct.posix_spawnattr_t.322* nocapture %attr, %struct.sigset_t.323* nocapture %def) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.322* %attr, i64 0, i32 2
  %2 = bitcast %struct.sigset_t.323* %1 to i8*
  %3 = bitcast %struct.sigset_t.323* %def to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 128, i32 8, i1 false)
  ret i32 0
}

define i32 @posix_spawnattr_setsigmask(%struct.posix_spawnattr_t.324* nocapture %attr, %struct.sigset_t.325* nocapture %mask) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawnattr_t.324* %attr, i64 0, i32 3
  %2 = bitcast %struct.sigset_t.325* %1 to i8*
  %3 = bitcast %struct.sigset_t.325* %mask to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 128, i32 8, i1 false)
  ret i32 0
}

define i32 @posix_spawn_file_actions_addclose(%struct.posix_spawn_file_actions_t* nocapture %fa, i32 %fd) nounwind uwtable optsize {
  %1 = tail call i8* @malloc(i64 40) optsize
  %2 = bitcast i8* %1 to %struct.fdop*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %20, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %1, i64 16
  %6 = bitcast i8* %5 to i32*
  store i32 1, i32* %6, align 4, !tbaa !6
  %7 = getelementptr inbounds i8* %1, i64 20
  %8 = bitcast i8* %7 to i32*
  store i32 %fd, i32* %8, align 4, !tbaa !6
  %9 = getelementptr inbounds %struct.posix_spawn_file_actions_t* %fa, i64 0, i32 1
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = bitcast i8* %10 to %struct.fdop*
  %12 = bitcast i8* %1 to %struct.fdop**
  store %struct.fdop* %11, %struct.fdop** %12, align 8, !tbaa !7
  %13 = icmp eq i8* %10, null
  br i1 %13, label %17, label %14

; <label>:14                                      ; preds = %4
  %15 = getelementptr inbounds i8* %10, i64 8
  %16 = bitcast i8* %15 to %struct.fdop**
  store %struct.fdop* %2, %struct.fdop** %16, align 8, !tbaa !7
  br label %17

; <label>:17                                      ; preds = %14, %4
  %18 = getelementptr inbounds i8* %1, i64 8
  %19 = bitcast i8* %18 to %struct.fdop**
  store %struct.fdop* null, %struct.fdop** %19, align 8, !tbaa !7
  store i8* %1, i8** %9, align 8, !tbaa !7
  br label %20

; <label>:20                                      ; preds = %17, %0
  %.0 = phi i32 [ 0, %17 ], [ 12, %0 ]
  ret i32 %.0
}

define i32 @posix_spawn_file_actions_adddup2(%struct.posix_spawn_file_actions_t.326* nocapture %fa, i32 %fd, i32 %newfd) nounwind uwtable optsize {
  %1 = tail call i8* @malloc(i64 40) optsize
  %2 = bitcast i8* %1 to %struct.fdop.327*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %22, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %1, i64 16
  %6 = bitcast i8* %5 to i32*
  store i32 2, i32* %6, align 4, !tbaa !6
  %7 = getelementptr inbounds i8* %1, i64 20
  %8 = bitcast i8* %7 to i32*
  store i32 %fd, i32* %8, align 4, !tbaa !6
  %9 = getelementptr inbounds i8* %1, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 %newfd, i32* %10, align 4, !tbaa !6
  %11 = getelementptr inbounds %struct.posix_spawn_file_actions_t.326* %fa, i64 0, i32 1
  %12 = load i8** %11, align 8, !tbaa !7
  %13 = bitcast i8* %12 to %struct.fdop.327*
  %14 = bitcast i8* %1 to %struct.fdop.327**
  store %struct.fdop.327* %13, %struct.fdop.327** %14, align 8, !tbaa !7
  %15 = icmp eq i8* %12, null
  br i1 %15, label %19, label %16

; <label>:16                                      ; preds = %4
  %17 = getelementptr inbounds i8* %12, i64 8
  %18 = bitcast i8* %17 to %struct.fdop.327**
  store %struct.fdop.327* %2, %struct.fdop.327** %18, align 8, !tbaa !7
  br label %19

; <label>:19                                      ; preds = %16, %4
  %20 = getelementptr inbounds i8* %1, i64 8
  %21 = bitcast i8* %20 to %struct.fdop.327**
  store %struct.fdop.327* null, %struct.fdop.327** %21, align 8, !tbaa !7
  store i8* %1, i8** %11, align 8, !tbaa !7
  br label %22

; <label>:22                                      ; preds = %19, %0
  %.0 = phi i32 [ 0, %19 ], [ 12, %0 ]
  ret i32 %.0
}

define i32 @posix_spawn_file_actions_addopen(%struct.posix_spawn_file_actions_t.328* nocapture %fa, i32 %fd, i8* %path, i32 %flags, i32 %mode) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %path) nounwind optsize
  %2 = add i64 %1, 41
  %3 = tail call i8* @malloc(i64 %2) optsize
  %4 = bitcast i8* %3 to %struct.fdop.329*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %28, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds i8* %3, i64 16
  %8 = bitcast i8* %7 to i32*
  store i32 3, i32* %8, align 4, !tbaa !6
  %9 = getelementptr inbounds i8* %3, i64 20
  %10 = bitcast i8* %9 to i32*
  store i32 %fd, i32* %10, align 4, !tbaa !6
  %11 = getelementptr inbounds i8* %3, i64 28
  %12 = bitcast i8* %11 to i32*
  store i32 %flags, i32* %12, align 4, !tbaa !6
  %13 = getelementptr inbounds i8* %3, i64 32
  %14 = bitcast i8* %13 to i32*
  store i32 %mode, i32* %14, align 4, !tbaa !6
  %15 = getelementptr inbounds i8* %3, i64 36
  %16 = tail call i8* @strcpy(i8* %15, i8* %path) nounwind optsize
  %17 = getelementptr inbounds %struct.posix_spawn_file_actions_t.328* %fa, i64 0, i32 1
  %18 = load i8** %17, align 8, !tbaa !7
  %19 = bitcast i8* %18 to %struct.fdop.329*
  %20 = bitcast i8* %3 to %struct.fdop.329**
  store %struct.fdop.329* %19, %struct.fdop.329** %20, align 8, !tbaa !7
  %21 = icmp eq i8* %18, null
  br i1 %21, label %25, label %22

; <label>:22                                      ; preds = %6
  %23 = getelementptr inbounds i8* %18, i64 8
  %24 = bitcast i8* %23 to %struct.fdop.329**
  store %struct.fdop.329* %4, %struct.fdop.329** %24, align 8, !tbaa !7
  br label %25

; <label>:25                                      ; preds = %22, %6
  %26 = getelementptr inbounds i8* %3, i64 8
  %27 = bitcast i8* %26 to %struct.fdop.329**
  store %struct.fdop.329* null, %struct.fdop.329** %27, align 8, !tbaa !7
  store i8* %3, i8** %17, align 8, !tbaa !7
  br label %28

; <label>:28                                      ; preds = %25, %0
  %.0 = phi i32 [ 0, %25 ], [ 12, %0 ]
  ret i32 %.0
}

define i32 @posix_spawn_file_actions_destroy(%struct.posix_spawn_file_actions_t.330* nocapture %fa) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawn_file_actions_t.330* %fa, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %4 = bitcast i8* %2 to %struct.fdop.331*
  br label %5

; <label>:5                                       ; preds = %5, %.lr.ph
  %op.01 = phi %struct.fdop.331* [ %4, %.lr.ph ], [ %7, %5 ]
  %6 = getelementptr inbounds %struct.fdop.331* %op.01, i64 0, i32 0
  %7 = load %struct.fdop.331** %6, align 8, !tbaa !7
  %8 = bitcast %struct.fdop.331* %op.01 to i8*
  tail call void @free(i8* %8) optsize
  %9 = icmp eq %struct.fdop.331* %7, null
  br i1 %9, label %._crit_edge, label %5

._crit_edge:                                      ; preds = %5, %0
  ret i32 0
}

define i32 @posix_spawn_file_actions_init(%struct.posix_spawn_file_actions_t.332* nocapture %fa) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.posix_spawn_file_actions_t.332* %fa, i64 0, i32 1
  store i8* null, i8** %1, align 8, !tbaa !7
  ret i32 0
}

define i32 @__posix_spawnx(i32* nocapture %res, i8* %path, i32 (i8*, i8**)* nocapture %exec, %struct.posix_spawn_file_actions_t.333* %fa, %struct.posix_spawnattr_t.334* %attr, i8** %argv, i8** %envp) nounwind uwtable optsize {
  %oldmask = alloca %struct.sigset_t.335, align 8
  %dummy_attr = alloca %struct.posix_spawnattr_t.334, align 8
  %1 = alloca [1 x i64], align 8
  %sa = alloca %struct.sigaction, align 8
  %2 = bitcast %struct.posix_spawnattr_t.334* %dummy_attr to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 336, i32 8, i1 false)
  %3 = icmp eq %struct.posix_spawnattr_t.334* %attr, null
  %.01 = select i1 %3, %struct.posix_spawnattr_t.334* %dummy_attr, %struct.posix_spawnattr_t.334* %attr
  %4 = getelementptr inbounds [1 x i64]* %1, i64 0, i64 0
  store i64 -1, i64* %4, align 8, !tbaa !5
  %5 = bitcast [1 x i64]* %1 to %struct.sigset_t.335*
  %6 = call i32 @sigprocmask(i32 0, %struct.sigset_t.335* %5, %struct.sigset_t.335* %oldmask) nounwind optsize
  %7 = call i64 (i64, ...)* @__syscall(i64 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %8 = trunc i64 %7 to i32
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %.preheader6, label %13

.preheader6:                                      ; preds = %0
  %10 = getelementptr inbounds %struct.sigaction* %sa, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %struct.posix_spawnattr_t.334* %.01, i64 0, i32 0
  %12 = getelementptr inbounds %struct.posix_spawnattr_t.334* %.01, i64 0, i32 2
  br label %19

; <label>:13                                      ; preds = %0
  %14 = call i32 @sigprocmask(i32 2, %struct.sigset_t.335* %oldmask, %struct.sigset_t.335* null) nounwind optsize
  %15 = icmp slt i32 %8, 0
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %13
  %17 = sub nsw i32 0, %8
  br label %122

; <label>:18                                      ; preds = %13
  store i32 %8, i32* %res, align 4, !tbaa !6
  br label %122

; <label>:19                                      ; preds = %32, %.preheader6
  %i.07 = phi i32 [ 1, %.preheader6 ], [ %33, %32 ]
  %20 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction*, %struct.sigaction*)*)(i32 %i.07, %struct.sigaction* null, %struct.sigaction* %sa) nounwind optsize
  %21 = load void (i32)** %10, align 8, !tbaa !7
  %22 = icmp eq void (i32)* %21, inttoptr (i64 1 to void (i32)*)
  br i1 %22, label %23, label %30

; <label>:23                                      ; preds = %19
  %24 = load i32* %11, align 4, !tbaa !6
  %25 = and i32 %24, 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %32, label %27

; <label>:27                                      ; preds = %23
  %28 = call i32 @sigismember(%struct.sigset_t.335* %12, i32 %i.07) nounwind optsize
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %32, label %30

; <label>:30                                      ; preds = %27, %19
  store void (i32)* null, void (i32)** %10, align 8, !tbaa !7
  %31 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction*, %struct.sigaction*)*)(i32 %i.07, %struct.sigaction* %sa, %struct.sigaction* null) nounwind optsize
  br label %32

; <label>:32                                      ; preds = %30, %27, %23
  %33 = add nsw i32 %i.07, 1
  %exitcond = icmp eq i32 %33, 65
  br i1 %exitcond, label %34, label %19

; <label>:34                                      ; preds = %32
  %35 = load i32* %11, align 4, !tbaa !6
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %._crit_edge9, label %38

; <label>:38                                      ; preds = %34
  %39 = getelementptr inbounds %struct.posix_spawnattr_t.334* %.01, i64 0, i32 1
  %40 = load i32* %39, align 4, !tbaa !6
  %41 = call i32 @setpgid(i32 0, i32 %40) nounwind optsize
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %._crit_edge9, label %43

; <label>:43                                      ; preds = %38
  call void @_exit(i32 127) nounwind optsize
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %43, %38, %34
  %44 = load i32* %11, align 4, !tbaa !6
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %56, label %47

; <label>:47                                      ; preds = %._crit_edge9
  %48 = call i64 (i64, ...)* @__syscall(i64 200, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %49 = call i64 (i64, ...)* @__syscall(i64 214, i64 %48, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %55

; <label>:51                                      ; preds = %47
  %52 = call i64 (i64, ...)* @__syscall(i64 199, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %53 = call i64 (i64, ...)* @__syscall(i64 213, i64 %52, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %56, label %55

; <label>:55                                      ; preds = %51, %47
  call void @_exit(i32 127) nounwind optsize
  br label %56

; <label>:56                                      ; preds = %55, %51, %._crit_edge9
  %57 = icmp eq %struct.posix_spawn_file_actions_t.333* %fa, null
  br i1 %57, label %._crit_edge, label %58

; <label>:58                                      ; preds = %56
  %59 = getelementptr inbounds %struct.posix_spawn_file_actions_t.333* %fa, i64 0, i32 1
  %60 = load i8** %59, align 8, !tbaa !7
  %61 = icmp eq i8* %60, null
  br i1 %61, label %._crit_edge, label %62

; <label>:62                                      ; preds = %58
  %63 = bitcast i8* %60 to %struct.fdop.337*
  br label %64

; <label>:64                                      ; preds = %64, %62
  %op.0 = phi %struct.fdop.337* [ %63, %62 ], [ %66, %64 ]
  %65 = getelementptr inbounds %struct.fdop.337* %op.0, i64 0, i32 0
  %66 = load %struct.fdop.337** %65, align 8, !tbaa !7
  %67 = icmp eq %struct.fdop.337* %66, null
  br i1 %67, label %.preheader, label %64

.preheader:                                       ; preds = %64
  %68 = icmp eq %struct.fdop.337* %op.0, null
  br i1 %68, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.thread, %.preheader
  %ret.05 = phi i32 [ %ret.13, %.thread ], [ undef, %.preheader ]
  %op.14 = phi %struct.fdop.337* [ %110, %.thread ], [ %op.0, %.preheader ]
  %69 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 2
  %70 = load i32* %69, align 4, !tbaa !6
  switch i32 %70, label %106 [
    i32 1, label %71
    i32 2, label %77
    i32 3, label %86
  ]

; <label>:71                                      ; preds = %.lr.ph
  %72 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 3
  %73 = load i32* %72, align 4, !tbaa !6
  %74 = sext i32 %73 to i64
  %75 = call i64 (i64, ...)* @__syscall(i64 6, i64 %74, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %76 = trunc i64 %75 to i32
  br label %106

; <label>:77                                      ; preds = %.lr.ph
  %78 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 3
  %79 = load i32* %78, align 4, !tbaa !6
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 4
  %82 = load i32* %81, align 4, !tbaa !6
  %83 = sext i32 %82 to i64
  %84 = call i64 (i64, ...)* @__syscall(i64 63, i64 %80, i64 %83, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %.lobit2 = lshr i64 %84, 63
  %85 = trunc i64 %.lobit2 to i32
  br label %106

; <label>:86                                      ; preds = %.lr.ph
  %87 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 7, i64 0
  %88 = ptrtoint i8* %87 to i64
  %89 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 5
  %90 = load i32* %89, align 4, !tbaa !6
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 6
  %93 = load i32* %92, align 4, !tbaa !6
  %94 = zext i32 %93 to i64
  %95 = call i64 (i64, ...)* @__syscall(i64 5, i64 %88, i64 %91, i64 %94, i32 0, i32 0, i32 0) nounwind optsize
  %96 = trunc i64 %95 to i32
  %97 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 3
  %98 = load i32* %97, align 4, !tbaa !6
  %99 = icmp eq i32 %96, %98
  br i1 %99, label %.thread, label %100

; <label>:100                                     ; preds = %86
  %101 = sext i32 %96 to i64
  %102 = sext i32 %98 to i64
  %103 = call i64 (i64, ...)* @__syscall(i64 63, i64 %101, i64 %102, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %.lobit = lshr i64 %103, 63
  %104 = trunc i64 %.lobit to i32
  %105 = call i64 (i64, ...)* @__syscall(i64 6, i64 %101, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %106

; <label>:106                                     ; preds = %100, %77, %71, %.lr.ph
  %ret.1 = phi i32 [ %ret.05, %.lr.ph ], [ %104, %100 ], [ %85, %77 ], [ %76, %71 ]
  %107 = icmp eq i32 %ret.1, 0
  br i1 %107, label %.thread, label %108

; <label>:108                                     ; preds = %106
  call void @_exit(i32 127) nounwind optsize
  br label %.thread

.thread:                                          ; preds = %108, %106, %86
  %ret.13 = phi i32 [ 0, %106 ], [ %ret.1, %108 ], [ 0, %86 ]
  %109 = getelementptr inbounds %struct.fdop.337* %op.14, i64 0, i32 1
  %110 = load %struct.fdop.337** %109, align 8, !tbaa !7
  %111 = icmp eq %struct.fdop.337* %110, null
  br i1 %111, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.thread, %.preheader, %58, %56
  %112 = load i32* %11, align 4, !tbaa !6
  %113 = and i32 %112, 8
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %struct.posix_spawnattr_t.334* %.01, i64 0, i32 3
  %116 = select i1 %114, %struct.sigset_t.335* %oldmask, %struct.sigset_t.335* %115
  %117 = call i32 @sigprocmask(i32 2, %struct.sigset_t.335* %116, %struct.sigset_t.335* null) nounwind optsize
  %118 = icmp eq i8** %envp, null
  br i1 %118, label %120, label %119

; <label>:119                                     ; preds = %._crit_edge
  store i8** %envp, i8*** @environ, align 8, !tbaa !7
  br label %120

; <label>:120                                     ; preds = %119, %._crit_edge
  %121 = call i32 %exec(i8* %path, i8** %argv) nounwind optsize
  call void @_exit(i32 127) nounwind optsize
  br label %122

; <label>:122                                     ; preds = %120, %18, %16
  %.0 = phi i32 [ %17, %16 ], [ 0, %18 ], [ 0, %120 ]
  ret i32 %.0
}

define i32 @posix_spawn(i32* nocapture %res, i8* %path, %struct.posix_spawn_file_actions_t.333* %fa, %struct.posix_spawnattr_t.334* %attr, i8** %argv, i8** %envp) nounwind uwtable optsize {
  %1 = tail call i32 @__posix_spawnx(i32* %res, i8* %path, i32 (i8*, i8**)* @execv, %struct.posix_spawn_file_actions_t.333* %fa, %struct.posix_spawnattr_t.334* %attr, i8** %argv, i8** %envp) optsize
  ret i32 %1
}

define i32 @posix_spawnp(i32* %res, i8* %file, %struct.posix_spawn_file_actions_t.333* %fa, %struct.posix_spawnattr_t.334* %attr, i8** %argv, i8** %envp) nounwind uwtable optsize {
  %1 = tail call i32 @__posix_spawnx(i32* %res, i8* %file, i32 (i8*, i8**)* @execvp, %struct.posix_spawn_file_actions_t.333* %fa, %struct.posix_spawnattr_t.334* %attr, i8** %argv, i8** %envp) nounwind optsize
  ret i32 %1
}

define float @powf(float %x, float %y) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = bitcast float %y to i32
  %3 = and i32 %1, 2147483647
  %4 = and i32 %2, 2147483647
  %5 = icmp eq i32 %4, 0
  %6 = icmp eq i32 %1, 1065353216
  %or.cond39 = or i1 %5, %6
  br i1 %or.cond39, label %319, label %7

; <label>:7                                       ; preds = %0
  %8 = icmp ugt i32 %3, 2139095040
  %9 = icmp ugt i32 %4, 2139095040
  %or.cond37 = or i1 %8, %9
  br i1 %or.cond37, label %10, label %14

; <label>:10                                      ; preds = %7
  %11 = fadd float %x, 0.000000e+00
  %12 = fadd float %y, 0.000000e+00
  %13 = fadd float %11, %12
  br label %319

; <label>:14                                      ; preds = %7
  %15 = icmp slt i32 %1, 0
  br i1 %15, label %16, label %29

; <label>:16                                      ; preds = %14
  %17 = icmp ugt i32 %4, 1266679807
  br i1 %17, label %29, label %18

; <label>:18                                      ; preds = %16
  %19 = icmp ugt i32 %4, 1065353215
  br i1 %19, label %20, label %29

; <label>:20                                      ; preds = %18
  %21 = lshr i32 %4, 23
  %22 = sub i32 150, %21
  %23 = lshr i32 %4, %22
  %24 = shl i32 %23, %22
  %25 = icmp eq i32 %24, %4
  br i1 %25, label %26, label %29

; <label>:26                                      ; preds = %20
  %27 = and i32 %23, 1
  %28 = sub nsw i32 2, %27
  br label %29

; <label>:29                                      ; preds = %26, %20, %18, %16, %14
  %yisint.0 = phi i32 [ %28, %26 ], [ 0, %20 ], [ 0, %18 ], [ 0, %14 ], [ 2, %16 ]
  switch i32 %4, label %45 [
    i32 2139095040, label %30
    i32 1065353216, label %41
  ]

; <label>:30                                      ; preds = %29
  %31 = icmp eq i32 %3, 1065353216
  br i1 %31, label %319, label %32

; <label>:32                                      ; preds = %30
  %33 = icmp ugt i32 %3, 1065353216
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %32
  %35 = icmp sgt i32 %2, -1
  %36 = select i1 %35, float %y, float 0.000000e+00
  br label %319

; <label>:37                                      ; preds = %32
  %38 = icmp slt i32 %2, 0
  br i1 %38, label %39, label %319

; <label>:39                                      ; preds = %37
  %40 = fsub float -0.000000e+00, %y
  br label %319

; <label>:41                                      ; preds = %29
  %42 = icmp slt i32 %2, 0
  br i1 %42, label %43, label %319

; <label>:43                                      ; preds = %41
  %44 = fdiv float 1.000000e+00, %x
  br label %319

; <label>:45                                      ; preds = %29
  switch i32 %2, label %52 [
    i32 1073741824, label %46
    i32 1056964608, label %48
  ]

; <label>:46                                      ; preds = %45
  %47 = fmul float %x, %x
  br label %319

; <label>:48                                      ; preds = %45
  %49 = icmp sgt i32 %1, -1
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %48
  %51 = tail call float @sqrtf(float %x) nounwind optsize
  br label %319

; <label>:52                                      ; preds = %48, %45
  %53 = tail call float @fabsf(float %x) nounwind optsize
  switch i32 %3, label %70 [
    i32 2139095040, label %54
    i32 1065353216, label %54
    i32 0, label %54
  ]

; <label>:54                                      ; preds = %52, %52, %52
  %55 = icmp slt i32 %2, 0
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %54
  %57 = fdiv float 1.000000e+00, %53
  br label %58

; <label>:58                                      ; preds = %56, %54
  %z.0 = phi float [ %57, %56 ], [ %53, %54 ]
  br i1 %15, label %59, label %319

; <label>:59                                      ; preds = %58
  %60 = add nsw i32 %3, -1065353216
  %61 = or i32 %yisint.0, %60
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %66

; <label>:63                                      ; preds = %59
  %64 = fsub float %z.0, %z.0
  %65 = fdiv float %64, %64
  br label %319

; <label>:66                                      ; preds = %59
  %67 = icmp eq i32 %yisint.0, 1
  br i1 %67, label %68, label %319

; <label>:68                                      ; preds = %66
  %69 = fsub float -0.000000e+00, %z.0
  br label %319

; <label>:70                                      ; preds = %52
  %71 = lshr i32 %1, 31
  %72 = add i32 %71, -1
  %73 = or i32 %yisint.0, %72
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

; <label>:75                                      ; preds = %70
  %76 = fsub float %x, %x
  %77 = fdiv float %76, %76
  br label %319

; <label>:78                                      ; preds = %70
  %79 = add nsw i32 %yisint.0, -1
  %80 = or i32 %79, %72
  %81 = icmp eq i32 %80, 0
  %sn.0 = select i1 %81, float -1.000000e+00, float 1.000000e+00
  %82 = icmp ugt i32 %4, 1291845632
  br i1 %82, label %83, label %121

; <label>:83                                      ; preds = %78
  %84 = icmp ult i32 %3, 1065353208
  br i1 %84, label %85, label %93

; <label>:85                                      ; preds = %83
  %86 = icmp slt i32 %2, 0
  br i1 %86, label %87, label %90

; <label>:87                                      ; preds = %85
  %88 = fmul float %sn.0, 0x46293E5940000000
  %89 = fmul float %88, 0x46293E5940000000
  br label %319

; <label>:90                                      ; preds = %85
  %91 = fmul float %sn.0, 0x39B4484C00000000
  %92 = fmul float %91, 0x39B4484C00000000
  br label %319

; <label>:93                                      ; preds = %83
  %94 = icmp ugt i32 %3, 1065353223
  br i1 %94, label %95, label %103

; <label>:95                                      ; preds = %93
  %96 = icmp sgt i32 %2, 0
  br i1 %96, label %97, label %100

; <label>:97                                      ; preds = %95
  %98 = fmul float %sn.0, 0x46293E5940000000
  %99 = fmul float %98, 0x46293E5940000000
  br label %319

; <label>:100                                     ; preds = %95
  %101 = fmul float %sn.0, 0x39B4484C00000000
  %102 = fmul float %101, 0x39B4484C00000000
  br label %319

; <label>:103                                     ; preds = %93
  %104 = fadd float %53, -1.000000e+00
  %105 = fmul float %104, %104
  %106 = fmul float %104, 2.500000e-01
  %107 = fsub float 0x3FD5555560000000, %106
  %108 = fmul float %104, %107
  %109 = fsub float 5.000000e-01, %108
  %110 = fmul float %105, %109
  %111 = fmul float %104, 0x3FF7154000000000
  %112 = fmul float %104, 0x3EDD94AE00000000
  %113 = fmul float %110, 0x3FF7154760000000
  %114 = fsub float %112, %113
  %115 = fadd float %111, %114
  %116 = bitcast float %115 to i32
  %117 = and i32 %116, -4096
  %118 = bitcast i32 %117 to float
  %119 = fsub float %118, %111
  %120 = fsub float %114, %119
  br label %218

; <label>:121                                     ; preds = %78
  %122 = icmp ult i32 %3, 8388608
  br i1 %122, label %123, label %126

; <label>:123                                     ; preds = %121
  %124 = fmul float %53, 0x4170000000000000
  %125 = bitcast float %124 to i32
  br label %126

; <label>:126                                     ; preds = %123, %121
  %n.0 = phi i32 [ -151, %123 ], [ -127, %121 ]
  %ix.0 = phi i32 [ %125, %123 ], [ %3, %121 ]
  %127 = ashr i32 %ix.0, 23
  %128 = add i32 %n.0, %127
  %129 = and i32 %ix.0, 8388607
  %130 = or i32 %129, 1065353216
  %131 = icmp ult i32 %129, 1885298
  br i1 %131, label %137, label %132

; <label>:132                                     ; preds = %126
  %133 = icmp ult i32 %129, 6140887
  br i1 %133, label %137, label %134

; <label>:134                                     ; preds = %132
  %135 = add nsw i32 %128, 1
  %136 = add nsw i32 %130, -8388608
  br label %137

; <label>:137                                     ; preds = %134, %132, %126
  %k.0 = phi i32 [ 0, %134 ], [ 0, %126 ], [ 1, %132 ]
  %n.1 = phi i32 [ %135, %134 ], [ %128, %126 ], [ %128, %132 ]
  %ix.1 = phi i32 [ %136, %134 ], [ %130, %126 ], [ %130, %132 ]
  %138 = bitcast i32 %ix.1 to float
  %139 = zext i32 %k.0 to i64
  %140 = getelementptr inbounds [2 x float]* @bp, i64 0, i64 %139
  %141 = load float* %140, align 4, !tbaa !2
  %142 = fsub float %138, %141
  %143 = fadd float %138, %141
  %144 = fdiv float 1.000000e+00, %143
  %145 = fmul float %142, %144
  %146 = bitcast float %145 to i32
  %147 = and i32 %146, -4096
  %148 = bitcast i32 %147 to float
  %149 = ashr i32 %ix.1, 1
  %150 = and i32 %149, -536875008
  %151 = or i32 %150, 536870912
  %152 = shl nuw nsw i32 %k.0, 21
  %153 = or i32 %152, 4194304
  %154 = add i32 %153, %151
  %155 = bitcast i32 %154 to float
  %156 = fsub float %155, %141
  %157 = fsub float %138, %156
  %158 = fmul float %148, %155
  %159 = fsub float %142, %158
  %160 = fmul float %148, %157
  %161 = fsub float %159, %160
  %162 = fmul float %144, %161
  %163 = fmul float %145, %145
  %164 = fmul float %163, %163
  %165 = fmul float %163, 0x3FCA7E2840000000
  %166 = fadd float %165, 0x3FCD864AA0000000
  %167 = fmul float %163, %166
  %168 = fadd float %167, 0x3FD17460A0000000
  %169 = fmul float %163, %168
  %170 = fadd float %169, 0x3FD5555560000000
  %171 = fmul float %163, %170
  %172 = fadd float %171, 0x3FDB6DB6E0000000
  %173 = fmul float %163, %172
  %174 = fadd float %173, 0x3FE3333340000000
  %175 = fmul float %164, %174
  %176 = fadd float %148, %145
  %177 = fmul float %162, %176
  %178 = fadd float %175, %177
  %179 = fmul float %148, %148
  %180 = fadd float %179, 3.000000e+00
  %181 = fadd float %180, %178
  %182 = bitcast float %181 to i32
  %183 = and i32 %182, -4096
  %184 = bitcast i32 %183 to float
  %185 = fadd float %184, -3.000000e+00
  %186 = fsub float %185, %179
  %187 = fsub float %178, %186
  %188 = fmul float %148, %184
  %189 = fmul float %162, %184
  %190 = fmul float %187, %145
  %191 = fadd float %189, %190
  %192 = fadd float %188, %191
  %193 = bitcast float %192 to i32
  %194 = and i32 %193, -4096
  %195 = bitcast i32 %194 to float
  %196 = fsub float %195, %188
  %197 = fsub float %191, %196
  %198 = fmul float %195, 0x3FEEC80000000000
  %199 = fmul float %195, 0xBF1EC478C0000000
  %200 = fmul float %197, 0x3FEEC709E0000000
  %201 = fadd float %199, %200
  %202 = getelementptr inbounds [2 x float]* @dp_l, i64 0, i64 %139
  %203 = load float* %202, align 4, !tbaa !2
  %204 = fadd float %201, %203
  %205 = sitofp i32 %n.1 to float
  %206 = fadd float %198, %204
  %207 = getelementptr inbounds [2 x float]* @dp_h, i64 0, i64 %139
  %208 = load float* %207, align 4, !tbaa !2
  %209 = fadd float %206, %208
  %210 = fadd float %209, %205
  %211 = bitcast float %210 to i32
  %212 = and i32 %211, -4096
  %213 = bitcast i32 %212 to float
  %214 = fsub float %213, %205
  %215 = fsub float %214, %208
  %216 = fsub float %215, %198
  %217 = fsub float %204, %216
  br label %218

; <label>:218                                     ; preds = %137, %103
  %t2.0 = phi float [ %120, %103 ], [ %217, %137 ]
  %t1.0 = phi float [ %118, %103 ], [ %213, %137 ]
  %219 = and i32 %2, -4096
  %220 = bitcast i32 %219 to float
  %221 = fsub float %y, %220
  %222 = fmul float %221, %t1.0
  %223 = fmul float %t2.0, %y
  %224 = fadd float %222, %223
  %225 = fmul float %220, %t1.0
  %226 = fadd float %224, %225
  %227 = bitcast float %226 to i32
  %228 = icmp sgt i32 %227, 1124073472
  br i1 %228, label %229, label %232

; <label>:229                                     ; preds = %218
  %230 = fmul float %sn.0, 0x46293E5940000000
  %231 = fmul float %230, 0x46293E5940000000
  br label %319

; <label>:232                                     ; preds = %218
  %233 = icmp eq i32 %227, 1124073472
  br i1 %233, label %234, label %241

; <label>:234                                     ; preds = %232
  %235 = fadd float %224, 0x3E67154780000000
  %236 = fsub float %226, %225
  %237 = fcmp ogt float %235, %236
  br i1 %237, label %238, label %.thread

; <label>:238                                     ; preds = %234
  %239 = fmul float %sn.0, 0x46293E5940000000
  %240 = fmul float %239, 0x46293E5940000000
  br label %319

; <label>:241                                     ; preds = %232
  %242 = and i32 %227, 2147483647
  %243 = icmp ugt i32 %242, 1125515264
  br i1 %243, label %244, label %247

; <label>:244                                     ; preds = %241
  %245 = fmul float %sn.0, 0x39B4484C00000000
  %246 = fmul float %245, 0x39B4484C00000000
  br label %319

; <label>:247                                     ; preds = %241
  %248 = icmp ne i32 %227, -1021968384
  %249 = fsub float %226, %225
  %250 = fcmp ugt float %224, %249
  %or.cond = or i1 %248, %250
  br i1 %or.cond, label %254, label %251

; <label>:251                                     ; preds = %247
  %252 = fmul float %sn.0, 0x39B4484C00000000
  %253 = fmul float %252, 0x39B4484C00000000
  br label %319

; <label>:254                                     ; preds = %247
  %255 = icmp ugt i32 %242, 1056964608
  br i1 %255, label %.thread, label %275

.thread:                                          ; preds = %254, %234
  %256 = phi i32 [ %242, %254 ], [ 1124073472, %234 ]
  %257 = lshr i32 %256, 23
  %258 = add nsw i32 %257, -126
  %259 = lshr i32 8388608, %258
  %260 = add nsw i32 %259, %227
  %261 = lshr i32 %260, 23
  %262 = and i32 %261, 255
  %263 = add nsw i32 %262, -127
  %264 = lshr i32 8388607, %263
  %265 = xor i32 %264, -1
  %266 = and i32 %260, %265
  %267 = bitcast i32 %266 to float
  %268 = and i32 %260, 8388607
  %269 = or i32 %268, 8388608
  %270 = sub i32 150, %262
  %271 = lshr i32 %269, %270
  %272 = icmp slt i32 %227, 0
  %273 = sub nsw i32 0, %271
  %n.2 = select i1 %272, i32 %273, i32 %271
  %274 = fsub float %225, %267
  br label %275

; <label>:275                                     ; preds = %.thread, %254
  %p_h.0 = phi float [ %274, %.thread ], [ %225, %254 ]
  %n.3 = phi i32 [ %n.2, %.thread ], [ 0, %254 ]
  %276 = fadd float %224, %p_h.0
  %277 = bitcast float %276 to i32
  %278 = and i32 %277, -32768
  %279 = bitcast i32 %278 to float
  %280 = fmul float %279, 0x3FE62E4000000000
  %281 = fsub float %279, %p_h.0
  %282 = fsub float %224, %281
  %283 = fmul float %282, 0x3FE62E4300000000
  %284 = fmul float %279, 0x3EB7F7D180000000
  %285 = fadd float %283, %284
  %286 = fadd float %280, %285
  %287 = fsub float %286, %280
  %288 = fsub float %285, %287
  %289 = fmul float %286, %286
  %290 = fmul float %289, 0x3E66376980000000
  %291 = fadd float %290, 0xBEBBBD41C0000000
  %292 = fmul float %289, %291
  %293 = fadd float %292, 0x3F11566AA0000000
  %294 = fmul float %289, %293
  %295 = fadd float %294, 0xBF66C16C20000000
  %296 = fmul float %289, %295
  %297 = fadd float %296, 0x3FC5555560000000
  %298 = fmul float %289, %297
  %299 = fsub float %286, %298
  %300 = fmul float %286, %299
  %301 = fadd float %299, -2.000000e+00
  %302 = fdiv float %300, %301
  %303 = fmul float %286, %288
  %304 = fadd float %288, %303
  %305 = fsub float %302, %304
  %306 = fsub float %305, %286
  %307 = fsub float 1.000000e+00, %306
  %308 = bitcast float %307 to i32
  %309 = shl i32 %n.3, 23
  %310 = add nsw i32 %308, %309
  %311 = ashr i32 %310, 23
  %312 = icmp slt i32 %311, 1
  br i1 %312, label %313, label %315

; <label>:313                                     ; preds = %275
  %314 = tail call float @scalbnf(float %307, i32 %n.3) nounwind optsize
  br label %317

; <label>:315                                     ; preds = %275
  %316 = bitcast i32 %310 to float
  br label %317

; <label>:317                                     ; preds = %315, %313
  %z.2 = phi float [ %314, %313 ], [ %316, %315 ]
  %318 = fmul float %sn.0, %z.2
  br label %319

; <label>:319                                     ; preds = %317, %251, %244, %238, %229, %100, %97, %90, %87, %75, %68, %66, %63, %58, %50, %46, %43, %41, %39, %37, %34, %30, %10, %0
  %.0 = phi float [ %13, %10 ], [ %36, %34 ], [ %44, %43 ], [ %47, %46 ], [ %51, %50 ], [ %77, %75 ], [ %231, %229 ], [ %240, %238 ], [ %318, %317 ], [ %246, %244 ], [ %253, %251 ], [ 1.000000e+00, %0 ], [ 1.000000e+00, %30 ], [ %40, %39 ], [ 0.000000e+00, %37 ], [ %x, %41 ], [ %65, %63 ], [ %69, %68 ], [ %z.0, %66 ], [ %z.0, %58 ], [ %89, %87 ], [ %92, %90 ], [ %99, %97 ], [ %102, %100 ]
  ret float %.0
}

define x86_fp80 @powl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %lx.i = alloca i32, align 4
  %i = alloca i32, align 4
  %z = alloca x86_fp80, align 16
  store volatile x86_fp80 0xK00000000000000000000, x86_fp80* %z, align 16, !tbaa !4
  %1 = fcmp oeq x86_fp80 %y, 0xK00000000000000000000
  br i1 %1, label %powil.exit, label %2

; <label>:2                                       ; preds = %0
  %3 = call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %powil.exit, label %5

; <label>:5                                       ; preds = %2
  %6 = call i32 @__fpclassifyl(x86_fp80 %y) nounwind optsize
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %powil.exit, label %8

; <label>:8                                       ; preds = %5
  %9 = fcmp oeq x86_fp80 %y, 0xK3FFF8000000000000000
  br i1 %9, label %powil.exit, label %10

; <label>:10                                      ; preds = %8
  %11 = call i32 @__fpclassifyl(x86_fp80 %y) nounwind optsize
  %12 = icmp sgt i32 %11, 1
  br i1 %12, label %._crit_edge, label %13

._crit_edge:                                      ; preds = %10
  %.pre = fcmp oeq x86_fp80 %x, 0xK3FFF8000000000000000
  br i1 %.pre, label %powil.exit, label %19

; <label>:13                                      ; preds = %10
  %14 = fcmp oeq x86_fp80 %x, 0xKBFFF8000000000000000
  %15 = fcmp oeq x86_fp80 %x, 0xK3FFF8000000000000000
  %or.cond = or i1 %14, %15
  br i1 %or.cond, label %16, label %18

; <label>:16                                      ; preds = %13
  %17 = fsub x86_fp80 %y, %y
  br label %powil.exit

; <label>:18                                      ; preds = %13
  br i1 %15, label %powil.exit, label %19

; <label>:19                                      ; preds = %18, %._crit_edge
  %20 = fcmp ult x86_fp80 %y, 0xK7FFEFFFFFFFFFFFFFFFF
  br i1 %20, label %31, label %21

; <label>:21                                      ; preds = %19
  %22 = fcmp ogt x86_fp80 %x, 0xK3FFF8000000000000000
  br i1 %22, label %powil.exit, label %23

; <label>:23                                      ; preds = %21
  %24 = fcmp ogt x86_fp80 %x, 0xK00000000000000000000
  %25 = fcmp olt x86_fp80 %x, 0xK3FFF8000000000000000
  %or.cond3 = and i1 %24, %25
  br i1 %or.cond3, label %powil.exit, label %26

; <label>:26                                      ; preds = %23
  %27 = fcmp olt x86_fp80 %x, 0xKBFFF8000000000000000
  br i1 %27, label %powil.exit, label %28

; <label>:28                                      ; preds = %26
  %29 = fcmp ogt x86_fp80 %x, 0xKBFFF8000000000000000
  %30 = fcmp olt x86_fp80 %x, 0xK00000000000000000000
  %or.cond5 = and i1 %29, %30
  br i1 %or.cond5, label %powil.exit, label %31

; <label>:31                                      ; preds = %28, %19
  %32 = fcmp ugt x86_fp80 %y, 0xKFFFEFFFFFFFFFFFFFFFF
  br i1 %32, label %43, label %33

; <label>:33                                      ; preds = %31
  %34 = fcmp ogt x86_fp80 %x, 0xK3FFF8000000000000000
  br i1 %34, label %powil.exit, label %35

; <label>:35                                      ; preds = %33
  %36 = fcmp ogt x86_fp80 %x, 0xK00000000000000000000
  %37 = fcmp olt x86_fp80 %x, 0xK3FFF8000000000000000
  %or.cond7 = and i1 %36, %37
  br i1 %or.cond7, label %powil.exit, label %38

; <label>:38                                      ; preds = %35
  %39 = fcmp olt x86_fp80 %x, 0xKBFFF8000000000000000
  br i1 %39, label %powil.exit, label %40

; <label>:40                                      ; preds = %38
  %41 = fcmp ogt x86_fp80 %x, 0xKBFFF8000000000000000
  %42 = fcmp olt x86_fp80 %x, 0xK00000000000000000000
  %or.cond9 = and i1 %41, %42
  br i1 %or.cond9, label %powil.exit, label %43

; <label>:43                                      ; preds = %40, %31
  %44 = fcmp ult x86_fp80 %x, 0xK7FFEFFFFFFFFFFFFFFFF
  br i1 %44, label %47, label %45

; <label>:45                                      ; preds = %43
  %46 = fcmp ogt x86_fp80 %y, 0xK00000000000000000000
  %. = select i1 %46, x86_fp80 0xK7FFF8000000000000000, x86_fp80 0xK00000000000000000000
  br label %powil.exit

; <label>:47                                      ; preds = %43
  %48 = call x86_fp80 @floorl(x86_fp80 %y) nounwind optsize
  %49 = fcmp oeq x86_fp80 %48, %y
  br i1 %49, label %50, label %58

; <label>:50                                      ; preds = %47
  %51 = call x86_fp80 @fabsl(x86_fp80 %y) nounwind optsize
  %52 = fmul x86_fp80 %51, 0xK3FFE8000000000000000
  %53 = call x86_fp80 @floorl(x86_fp80 %52) nounwind optsize
  %54 = call x86_fp80 @fabsl(x86_fp80 %48) nounwind optsize
  %55 = fmul x86_fp80 %54, 0xK3FFE8000000000000000
  %56 = fcmp une x86_fp80 %53, %55
  br i1 %56, label %57, label %58

; <label>:57                                      ; preds = %50
  br label %58

; <label>:58                                      ; preds = %57, %50, %47
  %yoddint.0 = phi i32 [ 1, %57 ], [ 0, %50 ], [ 0, %47 ]
  %59 = fcmp ugt x86_fp80 %x, 0xKFFFEFFFFFFFFFFFFFFFF
  br i1 %59, label %68, label %60

; <label>:60                                      ; preds = %58
  %61 = fcmp ogt x86_fp80 %y, 0xK00000000000000000000
  br i1 %61, label %62, label %64

; <label>:62                                      ; preds = %60
  %63 = icmp eq i32 %yoddint.0, 0
  %.12 = select i1 %63, x86_fp80 0xK7FFF8000000000000000, x86_fp80 0xKFFFF8000000000000000
  br label %powil.exit

; <label>:64                                      ; preds = %60
  %65 = fcmp olt x86_fp80 %y, 0xK00000000000000000000
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %64
  %67 = icmp eq i32 %yoddint.0, 0
  %.13 = select i1 %67, x86_fp80 0xK00000000000000000000, x86_fp80 0xK80000000000000000000
  br label %powil.exit

; <label>:68                                      ; preds = %64, %58
  %69 = fcmp ugt x86_fp80 %x, 0xK00000000000000000000
  br i1 %69, label %90, label %70

; <label>:70                                      ; preds = %68
  %71 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  br i1 %71, label %72, label %86

; <label>:72                                      ; preds = %70
  %73 = fcmp olt x86_fp80 %y, 0xK00000000000000000000
  br i1 %73, label %74, label %79

; <label>:74                                      ; preds = %72
  %75 = call i32 @__signbitl(x86_fp80 %x) nounwind optsize
  %76 = icmp eq i32 %75, 0
  %77 = icmp eq i32 %yoddint.0, 0
  %or.cond14 = or i1 %76, %77
  br i1 %or.cond14, label %78, label %powil.exit

; <label>:78                                      ; preds = %74
  br label %powil.exit

; <label>:79                                      ; preds = %72
  %80 = fcmp ogt x86_fp80 %y, 0xK00000000000000000000
  br i1 %80, label %81, label %powil.exit

; <label>:81                                      ; preds = %79
  %82 = call i32 @__signbitl(x86_fp80 %x) nounwind optsize
  %83 = icmp eq i32 %82, 0
  %84 = icmp eq i32 %yoddint.0, 0
  %or.cond15 = or i1 %83, %84
  br i1 %or.cond15, label %85, label %powil.exit

; <label>:85                                      ; preds = %81
  br label %powil.exit

; <label>:86                                      ; preds = %70
  br i1 %49, label %.thread, label %87

; <label>:87                                      ; preds = %86
  %88 = fsub x86_fp80 %x, %x
  %89 = fdiv x86_fp80 %88, %88
  br label %powil.exit

; <label>:90                                      ; preds = %68
  br i1 %49, label %.thread, label %.thread22

.thread:                                          ; preds = %90, %86
  %nflg.021 = phi i32 [ 0, %90 ], [ 1, %86 ]
  %91 = fptosi x86_fp80 %48 to i32
  store i32 %91, i32* %i, align 4, !tbaa !6
  %92 = call x86_fp80 @floorl(x86_fp80 %x) nounwind optsize
  %93 = fcmp oeq x86_fp80 %92, %x
  br i1 %93, label %94, label %167

; <label>:94                                      ; preds = %.thread
  %95 = call x86_fp80 @fabsl(x86_fp80 %y) nounwind optsize
  %96 = fcmp olt x86_fp80 %95, 0xK400E8000000000000000
  br i1 %96, label %97, label %167

; <label>:97                                      ; preds = %94
  %98 = fptosi x86_fp80 %y to i32
  %99 = bitcast i32* %lx.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %99) nounwind
  %100 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  %101 = icmp eq i32 %98, 0
  br i1 %100, label %102, label %105

; <label>:102                                     ; preds = %97
  br i1 %101, label %powil.exit, label %103

; <label>:103                                     ; preds = %102
  %104 = icmp slt i32 %98, 0
  %..i = select i1 %104, x86_fp80 0xK7FFEFFFFFFFFFFFFFFFF, x86_fp80 0xK00000000000000000000
  br label %powil.exit

; <label>:105                                     ; preds = %97
  br i1 %101, label %powil.exit, label %106

; <label>:106                                     ; preds = %105
  %107 = fcmp olt x86_fp80 %x, 0xK00000000000000000000
  br i1 %107, label %108, label %110

; <label>:108                                     ; preds = %106
  %109 = fsub x86_fp80 0xK80000000000000000000, %x
  br label %110

; <label>:110                                     ; preds = %108, %106
  %asign.0.i = phi i32 [ -1, %108 ], [ 0, %106 ]
  %.04.i = phi x86_fp80 [ %109, %108 ], [ %x, %106 ]
  %111 = icmp slt i32 %98, 0
  %112 = sub nsw i32 0, %98
  %113 = ashr i32 %98, 31
  %114 = or i32 %113, 1
  %n.0.i = select i1 %111, i32 %112, i32 %98
  %115 = call x86_fp80 @frexpl(x86_fp80 %.04.i, i32* %lx.i) nounwind optsize
  %116 = load i32* %lx.i, align 4, !tbaa !6
  %117 = add nsw i32 %116, -1
  %118 = mul nsw i32 %117, %n.0.i
  %119 = icmp eq i32 %118, 0
  %120 = icmp sgt i32 %118, 64
  %or.cond.i = or i1 %119, %120
  %121 = icmp slt i32 %118, -64
  %or.cond3.i = or i1 %or.cond.i, %121
  br i1 %or.cond3.i, label %122, label %132

; <label>:122                                     ; preds = %110
  %123 = fadd x86_fp80 %115, 0xKBFFEB504F333F9DE6433
  %124 = fadd x86_fp80 %115, 0xK3FFEB504F333F9DE6433
  %125 = fdiv x86_fp80 %123, %124
  %126 = fmul x86_fp80 %125, 0xK4000BA827999FCEF3161
  %127 = fadd x86_fp80 %126, 0xKBFFE8000000000000000
  %128 = sitofp i32 %116 to x86_fp80
  %129 = fadd x86_fp80 %127, %128
  %130 = sitofp i32 %98 to x86_fp80
  %131 = fmul x86_fp80 %129, %130
  br label %134

; <label>:132                                     ; preds = %110
  %133 = sitofp i32 %118 to x86_fp80
  br label %134

; <label>:134                                     ; preds = %132, %122
  %s.0.in.i = phi x86_fp80 [ %131, %122 ], [ %133, %132 ]
  %s.0.i = fmul x86_fp80 %s.0.in.i, 0xK3FFEB17217F7D1CF79AC
  %135 = fcmp ogt x86_fp80 %s.0.i, 0xK400CB17217F7D1CF79AC
  br i1 %135, label %powil.exit, label %136

; <label>:136                                     ; preds = %134
  %137 = fcmp olt x86_fp80 %s.0.i, 0xKC00CB21DFE7F09E2BAAA
  br i1 %137, label %138, label %142

; <label>:138                                     ; preds = %136
  %139 = load volatile x86_fp80* @twom10000530, align 16, !tbaa !4
  %140 = load volatile x86_fp80* @twom10000530, align 16, !tbaa !4
  %141 = fmul x86_fp80 %139, %140
  br label %powil.exit

; <label>:142                                     ; preds = %136
  %143 = fcmp olt x86_fp80 %s.0.i, 0xKC00CB16A17F7D1CF79AC
  br i1 %143, label %144, label %147

; <label>:144                                     ; preds = %142
  %145 = fdiv x86_fp80 0xK3FFF8000000000000000, %.04.i
  %146 = sub nsw i32 0, %114
  br label %147

; <label>:147                                     ; preds = %144, %142
  %sign.1.i = phi i32 [ %146, %144 ], [ %114, %142 ]
  %.1.i = phi x86_fp80 [ %145, %144 ], [ %.04.i, %142 ]
  %148 = and i32 %n.0.i, 1
  %149 = icmp eq i32 %148, 0
  %..1.i = select i1 %149, x86_fp80 0xK3FFF8000000000000000, x86_fp80 %.1.i
  br label %.outer.i

.outer.i:                                         ; preds = %156, %147
  %n.1.in.ph.i = phi i32 [ %n.0.i, %147 ], [ %n.1.i, %156 ]
  %y.1.ph.i = phi x86_fp80 [ %..1.i, %147 ], [ %157, %156 ]
  %ww.0.ph.i = phi x86_fp80 [ %.1.i, %147 ], [ %153, %156 ]
  br label %150

; <label>:150                                     ; preds = %152, %.outer.i
  %n.1.in.i = phi i32 [ %n.1.i, %152 ], [ %n.1.in.ph.i, %.outer.i ]
  %ww.0.i = phi x86_fp80 [ %153, %152 ], [ %ww.0.ph.i, %.outer.i ]
  %n.1.i = ashr i32 %n.1.in.i, 1
  %151 = icmp eq i32 %n.1.i, 0
  br i1 %151, label %158, label %152

; <label>:152                                     ; preds = %150
  %153 = fmul x86_fp80 %ww.0.i, %ww.0.i
  %154 = and i32 %n.1.i, 1
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %150, label %156

; <label>:156                                     ; preds = %152
  %157 = fmul x86_fp80 %y.1.ph.i, %153
  br label %.outer.i

; <label>:158                                     ; preds = %150
  %159 = icmp eq i32 %asign.0.i, 0
  %160 = or i1 %149, %159
  br i1 %160, label %163, label %161

; <label>:161                                     ; preds = %158
  %162 = fsub x86_fp80 0xK80000000000000000000, %y.1.ph.i
  br label %163

; <label>:163                                     ; preds = %161, %158
  %y.3.i = phi x86_fp80 [ %162, %161 ], [ %y.1.ph.i, %158 ]
  %164 = icmp slt i32 %sign.1.i, 0
  br i1 %164, label %165, label %powil.exit

; <label>:165                                     ; preds = %163
  %166 = fdiv x86_fp80 0xK3FFF8000000000000000, %y.3.i
  br label %powil.exit

; <label>:167                                     ; preds = %94, %.thread
  %168 = icmp eq i32 %nflg.021, 0
  br i1 %168, label %.thread22, label %169

; <label>:169                                     ; preds = %167
  %170 = call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  br label %.thread22

.thread22:                                        ; preds = %169, %167, %90
  %171 = phi i1 [ true, %169 ], [ false, %167 ], [ false, %90 ]
  %.010 = phi x86_fp80 [ %170, %169 ], [ %x, %167 ], [ %x, %90 ]
  %172 = call x86_fp80 @frexpl(x86_fp80 %.010, i32* %i) nounwind optsize
  %173 = load i32* %i, align 4, !tbaa !6
  %174 = fcmp ugt x86_fp80 %172, 0xK3FFEB123F581D2AC2590
  %storemerge11 = select i1 %174, i32 1, i32 17
  store i32 %storemerge11, i32* %i, align 4
  %175 = or i32 %storemerge11, 8
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds [33 x x86_fp80]* @A, i64 0, i64 %176
  %178 = load x86_fp80* %177, align 16, !tbaa !4
  %179 = fcmp ugt x86_fp80 %172, %178
  br i1 %179, label %181, label %180

; <label>:180                                     ; preds = %.thread22
  store i32 %175, i32* %i, align 4, !tbaa !6
  br label %181

; <label>:181                                     ; preds = %180, %.thread22
  %182 = phi i32 [ %storemerge11, %.thread22 ], [ %175, %180 ]
  %183 = add nsw i32 %182, 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [33 x x86_fp80]* @A, i64 0, i64 %184
  %186 = load x86_fp80* %185, align 16, !tbaa !4
  %187 = fcmp ugt x86_fp80 %172, %186
  br i1 %187, label %189, label %188

; <label>:188                                     ; preds = %181
  store i32 %183, i32* %i, align 4, !tbaa !6
  br label %189

; <label>:189                                     ; preds = %188, %181
  %190 = phi i32 [ %182, %181 ], [ %183, %188 ]
  %191 = add nsw i32 %190, 2
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [33 x x86_fp80]* @A, i64 0, i64 %192
  %194 = load x86_fp80* %193, align 16, !tbaa !4
  %195 = fcmp ugt x86_fp80 %172, %194
  br i1 %195, label %197, label %196

; <label>:196                                     ; preds = %189
  store i32 %191, i32* %i, align 4, !tbaa !6
  br label %197

; <label>:197                                     ; preds = %196, %189
  %198 = phi i32 [ %190, %189 ], [ %191, %196 ]
  %199 = fcmp ult x86_fp80 %172, 0xK3FFEFA83B2DB722A033A
  br i1 %199, label %201, label %200

; <label>:200                                     ; preds = %197
  store i32 -1, i32* %i, align 4, !tbaa !6
  br label %201

; <label>:201                                     ; preds = %200, %197
  %202 = phi i32 [ %198, %197 ], [ -1, %200 ]
  %203 = add nsw i32 %202, 1
  store i32 %203, i32* %i, align 4, !tbaa !6
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [33 x x86_fp80]* @A, i64 0, i64 %204
  %206 = load x86_fp80* %205, align 16, !tbaa !4
  %207 = fsub x86_fp80 %172, %206
  %208 = sdiv i32 %203, 2
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [17 x x86_fp80]* @B, i64 0, i64 %209
  %211 = load x86_fp80* %210, align 16, !tbaa !4
  %212 = fsub x86_fp80 %207, %211
  %213 = fdiv x86_fp80 %212, %206
  %214 = fmul x86_fp80 %213, %213
  store volatile x86_fp80 %214, x86_fp80* %z, align 16, !tbaa !4
  %215 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %216 = call x86_fp80 @__polevll(x86_fp80 %213, x86_fp80* getelementptr inbounds ([4 x x86_fp80]* @P528, i64 0, i64 0), i32 3) nounwind optsize
  %217 = fmul x86_fp80 %215, %216
  %218 = call x86_fp80 @__p1evll(x86_fp80 %213, x86_fp80* getelementptr inbounds ([3 x x86_fp80]* @Q529, i64 0, i64 0), i32 3) nounwind optsize
  %219 = fdiv x86_fp80 %217, %218
  %220 = fmul x86_fp80 %213, %219
  %221 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %222 = call x86_fp80 @ldexpl(x86_fp80 %221, i32 -1) nounwind optsize
  %223 = fsub x86_fp80 %220, %222
  %224 = fmul x86_fp80 %223, 0xK3FFDE2A8ECA5705FC2EF
  store volatile x86_fp80 %224, x86_fp80* %z, align 16, !tbaa !4
  %225 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %226 = fadd x86_fp80 %225, %223
  store volatile x86_fp80 %226, x86_fp80* %z, align 16, !tbaa !4
  %227 = fmul x86_fp80 %213, 0xK3FFDE2A8ECA5705FC2EF
  %228 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %229 = fadd x86_fp80 %228, %227
  store volatile x86_fp80 %229, x86_fp80* %z, align 16, !tbaa !4
  %230 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %231 = fadd x86_fp80 %230, %213
  store volatile x86_fp80 %231, x86_fp80* %z, align 16, !tbaa !4
  %232 = load i32* %i, align 4, !tbaa !6
  %233 = sub nsw i32 0, %232
  %234 = sitofp i32 %233 to x86_fp80
  %235 = call x86_fp80 @ldexpl(x86_fp80 %234, i32 -5) nounwind optsize
  %236 = sitofp i32 %173 to x86_fp80
  %237 = fadd x86_fp80 %235, %236
  %238 = call x86_fp80 @ldexpl(x86_fp80 %y, i32 5) nounwind optsize
  %239 = call x86_fp80 @floorl(x86_fp80 %238) nounwind optsize
  %240 = call x86_fp80 @ldexpl(x86_fp80 %239, i32 -5) nounwind optsize
  %241 = fsub x86_fp80 %y, %240
  %242 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %243 = fmul x86_fp80 %242, %y
  %244 = fmul x86_fp80 %237, %241
  %245 = fadd x86_fp80 %243, %244
  %246 = call x86_fp80 @ldexpl(x86_fp80 %245, i32 5) nounwind optsize
  %247 = call x86_fp80 @floorl(x86_fp80 %246) nounwind optsize
  %248 = call x86_fp80 @ldexpl(x86_fp80 %247, i32 -5) nounwind optsize
  %249 = fsub x86_fp80 %245, %248
  %250 = fmul x86_fp80 %237, %240
  %251 = fadd x86_fp80 %248, %250
  %252 = call x86_fp80 @ldexpl(x86_fp80 %251, i32 5) nounwind optsize
  %253 = call x86_fp80 @floorl(x86_fp80 %252) nounwind optsize
  %254 = call x86_fp80 @ldexpl(x86_fp80 %253, i32 -5) nounwind optsize
  %255 = fsub x86_fp80 %251, %254
  %256 = fadd x86_fp80 %249, %255
  %257 = call x86_fp80 @ldexpl(x86_fp80 %256, i32 5) nounwind optsize
  %258 = call x86_fp80 @floorl(x86_fp80 %257) nounwind optsize
  %259 = call x86_fp80 @ldexpl(x86_fp80 %258, i32 -5) nounwind optsize
  %260 = fadd x86_fp80 %254, %259
  %261 = call x86_fp80 @ldexpl(x86_fp80 %260, i32 5) nounwind optsize
  %262 = fcmp ogt x86_fp80 %261, 0xK40128000000000000000
  br i1 %262, label %powil.exit, label %263

; <label>:263                                     ; preds = %201
  %264 = fcmp olt x86_fp80 %261, 0xKC0128080000000000000
  br i1 %264, label %265, label %269

; <label>:265                                     ; preds = %263
  %266 = load volatile x86_fp80* @twom10000530, align 16, !tbaa !4
  %267 = load volatile x86_fp80* @twom10000530, align 16, !tbaa !4
  %268 = fmul x86_fp80 %266, %267
  br label %powil.exit

; <label>:269                                     ; preds = %263
  %270 = fptosi x86_fp80 %261 to i64
  %271 = fsub x86_fp80 %256, %259
  %272 = fcmp ogt x86_fp80 %271, 0xK00000000000000000000
  br i1 %272, label %273, label %276

; <label>:273                                     ; preds = %269
  %274 = add nsw i64 %270, 1
  %275 = fadd x86_fp80 %271, 0xKBFFA8000000000000000
  br label %276

; <label>:276                                     ; preds = %273, %269
  %Wb.0 = phi x86_fp80 [ %275, %273 ], [ %271, %269 ]
  %e.0 = phi i64 [ %274, %273 ], [ %270, %269 ]
  %277 = call x86_fp80 @__polevll(x86_fp80 %Wb.0, x86_fp80* getelementptr inbounds ([7 x x86_fp80]* @R531, i64 0, i64 0), i32 6) nounwind optsize
  %278 = fmul x86_fp80 %Wb.0, %277
  store volatile x86_fp80 %278, x86_fp80* %z, align 16, !tbaa !4
  %e.0.lobit = lshr i64 %e.0, 63
  %e.0.lobit.not = xor i64 %e.0.lobit, 1
  %279 = sdiv i64 %e.0, 32
  %280 = add nsw i64 %279, %e.0.lobit.not
  %281 = trunc i64 %280 to i32
  store i32 %281, i32* %i, align 4, !tbaa !6
  %282 = shl nsw i32 %281, 5
  %283 = sext i32 %282 to i64
  %284 = sub nsw i64 %283, %e.0
  %285 = getelementptr inbounds [33 x x86_fp80]* @A, i64 0, i64 %284
  %286 = load x86_fp80* %285, align 16, !tbaa !4
  %287 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %288 = fmul x86_fp80 %286, %287
  store volatile x86_fp80 %288, x86_fp80* %z, align 16, !tbaa !4
  %289 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %290 = fadd x86_fp80 %289, %286
  store volatile x86_fp80 %290, x86_fp80* %z, align 16, !tbaa !4
  %291 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %292 = load i32* %i, align 4, !tbaa !6
  %293 = call x86_fp80 @ldexpl(x86_fp80 %291, i32 %292) nounwind optsize
  store volatile x86_fp80 %293, x86_fp80* %z, align 16, !tbaa !4
  br i1 %171, label %294, label %302

; <label>:294                                     ; preds = %276
  %295 = call x86_fp80 @ldexpl(x86_fp80 %y, i32 -1) nounwind optsize
  %296 = call x86_fp80 @floorl(x86_fp80 %295) nounwind optsize
  %297 = call x86_fp80 @ldexpl(x86_fp80 %296, i32 1) nounwind optsize
  %298 = fcmp une x86_fp80 %297, %y
  br i1 %298, label %299, label %302

; <label>:299                                     ; preds = %294
  %300 = load volatile x86_fp80* %z, align 16, !tbaa !4
  %301 = fsub x86_fp80 0xK80000000000000000000, %300
  store volatile x86_fp80 %301, x86_fp80* %z, align 16, !tbaa !4
  br label %302

; <label>:302                                     ; preds = %299, %294, %276
  %303 = load volatile x86_fp80* %z, align 16, !tbaa !4
  br label %powil.exit

powil.exit:                                       ; preds = %302, %265, %201, %165, %163, %138, %134, %105, %103, %102, %87, %85, %81, %79, %78, %74, %66, %62, %45, %40, %38, %35, %33, %28, %26, %23, %21, %18, %16, %._crit_edge, %8, %5, %2, %0
  %.0 = phi x86_fp80 [ 0xK7FFF8000000000000000, %78 ], [ 0xK00000000000000000000, %85 ], [ %89, %87 ], [ %268, %265 ], [ %303, %302 ], [ %17, %16 ], [ 0xK3FFF8000000000000000, %0 ], [ %x, %2 ], [ %y, %5 ], [ %x, %8 ], [ 0xK3FFF8000000000000000, %18 ], [ 0xK7FFF8000000000000000, %21 ], [ 0xK00000000000000000000, %23 ], [ 0xK7FFF8000000000000000, %26 ], [ 0xK00000000000000000000, %28 ], [ 0xK00000000000000000000, %33 ], [ 0xK7FFF8000000000000000, %35 ], [ 0xK00000000000000000000, %38 ], [ 0xK7FFF8000000000000000, %40 ], [ %., %45 ], [ %.12, %62 ], [ %.13, %66 ], [ 0xKFFFF8000000000000000, %74 ], [ 0xK80000000000000000000, %81 ], [ 0xK7FFF8000000000000000, %201 ], [ %141, %138 ], [ 0xK3FFF8000000000000000, %102 ], [ %..i, %103 ], [ 0xK3FFF8000000000000000, %105 ], [ 0xK7FFF8000000000000000, %134 ], [ %166, %165 ], [ %y.3.i, %163 ], [ 0xK3FFF8000000000000000, %._crit_edge ], [ 0xK00000000000000000000, %79 ]
  ret x86_fp80 %.0
}

define double @pow(double %x, double %y) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %y to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = and i32 %3, 2147483647
  %10 = and i32 %7, 2147483647
  %11 = or i32 %10, %8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %384, label %13

; <label>:13                                      ; preds = %0
  %14 = icmp eq i32 %3, 1072693248
  %15 = icmp eq i32 %4, 0
  %or.cond48 = and i1 %14, %15
  br i1 %or.cond48, label %384, label %16

; <label>:16                                      ; preds = %13
  %17 = icmp ugt i32 %9, 2146435072
  br i1 %17, label %23, label %18

; <label>:18                                      ; preds = %16
  %.not = icmp ne i32 %9, 2146435072
  %or.cond49 = or i1 %.not, %15
  %or.cond49.not = xor i1 %or.cond49, true
  %19 = icmp ugt i32 %10, 2146435072
  %or.cond50 = or i1 %19, %or.cond49.not
  br i1 %or.cond50, label %23, label %20

; <label>:20                                      ; preds = %18
  %21 = icmp eq i32 %10, 2146435072
  %.not51 = xor i1 %21, true
  %22 = icmp eq i32 %8, 0
  %or.cond52 = or i1 %22, %.not51
  br i1 %or.cond52, label %27, label %23

; <label>:23                                      ; preds = %20, %18, %16
  %24 = fadd double %x, 0.000000e+00
  %25 = fadd double %y, 0.000000e+00
  %26 = fadd double %24, %25
  br label %384

; <label>:27                                      ; preds = %20
  %28 = icmp slt i32 %3, 0
  br i1 %28, label %29, label %54

; <label>:29                                      ; preds = %27
  %30 = icmp ugt i32 %10, 1128267775
  br i1 %30, label %54, label %31

; <label>:31                                      ; preds = %29
  %32 = icmp ugt i32 %10, 1072693247
  br i1 %32, label %33, label %54

; <label>:33                                      ; preds = %31
  %34 = lshr i32 %10, 20
  %35 = add nsw i32 %34, -1023
  %36 = icmp sgt i32 %35, 20
  br i1 %36, label %37, label %45

; <label>:37                                      ; preds = %33
  %38 = sub i32 1075, %34
  %39 = lshr i32 %8, %38
  %40 = shl i32 %39, %38
  %41 = icmp eq i32 %40, %8
  br i1 %41, label %42, label %54

; <label>:42                                      ; preds = %37
  %43 = and i32 %39, 1
  %44 = sub nsw i32 2, %43
  br label %54

; <label>:45                                      ; preds = %33
  br i1 %22, label %46, label %.thread55

; <label>:46                                      ; preds = %45
  %47 = sub i32 1043, %34
  %48 = lshr i32 %10, %47
  %49 = shl i32 %48, %47
  %50 = icmp eq i32 %49, %10
  br i1 %50, label %51, label %.thread

; <label>:51                                      ; preds = %46
  %52 = and i32 %48, 1
  %53 = sub nsw i32 2, %52
  br label %.thread

; <label>:54                                      ; preds = %42, %37, %31, %29, %27
  %yisint.0 = phi i32 [ %44, %42 ], [ 0, %37 ], [ 0, %31 ], [ 0, %27 ], [ 2, %29 ]
  br i1 %22, label %.thread, label %.thread55

.thread:                                          ; preds = %54, %51, %46
  %yisint.054 = phi i32 [ %yisint.0, %54 ], [ 0, %46 ], [ %53, %51 ]
  br i1 %21, label %55, label %68

; <label>:55                                      ; preds = %.thread
  %56 = add nsw i32 %9, -1072693248
  %57 = or i32 %56, %4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %384, label %59

; <label>:59                                      ; preds = %55
  %60 = icmp ugt i32 %9, 1072693247
  br i1 %60, label %61, label %64

; <label>:61                                      ; preds = %59
  %62 = icmp sgt i32 %7, -1
  %63 = select i1 %62, double %y, double 0.000000e+00
  br label %384

; <label>:64                                      ; preds = %59
  %65 = icmp slt i32 %7, 0
  br i1 %65, label %66, label %384

; <label>:66                                      ; preds = %64
  %67 = fsub double -0.000000e+00, %y
  br label %384

; <label>:68                                      ; preds = %.thread
  %69 = icmp eq i32 %10, 1072693248
  br i1 %69, label %70, label %74

; <label>:70                                      ; preds = %68
  %71 = icmp slt i32 %7, 0
  br i1 %71, label %72, label %384

; <label>:72                                      ; preds = %70
  %73 = fdiv double 1.000000e+00, %x
  br label %384

; <label>:74                                      ; preds = %68
  switch i32 %7, label %.thread55 [
    i32 1073741824, label %75
    i32 1071644672, label %77
  ]

; <label>:75                                      ; preds = %74
  %76 = fmul double %x, %x
  br label %384

; <label>:77                                      ; preds = %74
  %78 = icmp sgt i32 %3, -1
  br i1 %78, label %79, label %.thread55

; <label>:79                                      ; preds = %77
  %80 = tail call double @sqrt(double %x) nounwind optsize
  br label %384

.thread55:                                        ; preds = %77, %74, %54, %45
  %yisint.053 = phi i32 [ %yisint.054, %74 ], [ %yisint.054, %77 ], [ %yisint.0, %54 ], [ 0, %45 ]
  %81 = tail call double @fabs(double %x) nounwind optsize
  br i1 %15, label %82, label %99

; <label>:82                                      ; preds = %.thread55
  switch i32 %9, label %99 [
    i32 2146435072, label %83
    i32 1072693248, label %83
    i32 0, label %83
  ]

; <label>:83                                      ; preds = %82, %82, %82
  %84 = icmp slt i32 %7, 0
  br i1 %84, label %85, label %87

; <label>:85                                      ; preds = %83
  %86 = fdiv double 1.000000e+00, %81
  br label %87

; <label>:87                                      ; preds = %85, %83
  %z.0 = phi double [ %86, %85 ], [ %81, %83 ]
  br i1 %28, label %88, label %384

; <label>:88                                      ; preds = %87
  %89 = add nsw i32 %9, -1072693248
  %90 = or i32 %yisint.053, %89
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %95

; <label>:92                                      ; preds = %88
  %93 = fsub double %z.0, %z.0
  %94 = fdiv double %93, %93
  br label %384

; <label>:95                                      ; preds = %88
  %96 = icmp eq i32 %yisint.053, 1
  br i1 %96, label %97, label %384

; <label>:97                                      ; preds = %95
  %98 = fsub double -0.000000e+00, %z.0
  br label %384

; <label>:99                                      ; preds = %82, %.thread55
  %100 = lshr i64 %1, 63
  %101 = trunc i64 %100 to i32
  %102 = add i32 %101, -1
  %103 = or i32 %yisint.053, %102
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %108

; <label>:105                                     ; preds = %99
  %106 = fsub double %x, %x
  %107 = fdiv double %106, %106
  br label %384

; <label>:108                                     ; preds = %99
  %109 = add nsw i32 %yisint.053, -1
  %110 = or i32 %109, %102
  %111 = icmp eq i32 %110, 0
  %s.0 = select i1 %111, double -1.000000e+00, double 1.000000e+00
  %112 = icmp ugt i32 %10, 1105199104
  br i1 %112, label %113, label %161

; <label>:113                                     ; preds = %108
  %114 = icmp ugt i32 %10, 1139802112
  br i1 %114, label %115, label %123

; <label>:115                                     ; preds = %113
  %116 = icmp ult i32 %9, 1072693248
  br i1 %116, label %117, label %120

; <label>:117                                     ; preds = %115
  %118 = icmp slt i32 %7, 0
  %119 = select i1 %118, double 0x7FF0000000000000, double 0.000000e+00
  br label %384

; <label>:120                                     ; preds = %115
  %121 = icmp sgt i32 %7, 0
  %122 = select i1 %121, double 0x7FF0000000000000, double 0.000000e+00
  br label %384

; <label>:123                                     ; preds = %113
  %124 = icmp ult i32 %9, 1072693247
  br i1 %124, label %125, label %133

; <label>:125                                     ; preds = %123
  %126 = icmp slt i32 %7, 0
  br i1 %126, label %127, label %130

; <label>:127                                     ; preds = %125
  %128 = fmul double %s.0, 1.000000e+300
  %129 = fmul double %128, 1.000000e+300
  br label %384

; <label>:130                                     ; preds = %125
  %131 = fmul double %s.0, 1.000000e-300
  %132 = fmul double %131, 1.000000e-300
  br label %384

; <label>:133                                     ; preds = %123
  %134 = icmp ugt i32 %9, 1072693248
  br i1 %134, label %135, label %143

; <label>:135                                     ; preds = %133
  %136 = icmp sgt i32 %7, 0
  br i1 %136, label %137, label %140

; <label>:137                                     ; preds = %135
  %138 = fmul double %s.0, 1.000000e+300
  %139 = fmul double %138, 1.000000e+300
  br label %384

; <label>:140                                     ; preds = %135
  %141 = fmul double %s.0, 1.000000e-300
  %142 = fmul double %141, 1.000000e-300
  br label %384

; <label>:143                                     ; preds = %133
  %144 = fadd double %81, -1.000000e+00
  %145 = fmul double %144, %144
  %146 = fmul double %144, 2.500000e-01
  %147 = fsub double 0x3FD5555555555555, %146
  %148 = fmul double %144, %147
  %149 = fsub double 5.000000e-01, %148
  %150 = fmul double %145, %149
  %151 = fmul double %144, 0x3FF7154760000000
  %152 = fmul double %144, 0x3E54AE0BF85DDF44
  %153 = fmul double %150, 0x3FF71547652B82FE
  %154 = fsub double %152, %153
  %155 = fadd double %151, %154
  %156 = bitcast double %155 to i64
  %157 = and i64 %156, -4294967296
  %158 = bitcast i64 %157 to double
  %159 = fsub double %158, %151
  %160 = fsub double %154, %159
  br label %266

; <label>:161                                     ; preds = %108
  %162 = icmp ult i32 %9, 1048576
  br i1 %162, label %163, label %168

; <label>:163                                     ; preds = %161
  %164 = fmul double %81, 0x4340000000000000
  %165 = bitcast double %164 to i64
  %166 = lshr i64 %165, 32
  %167 = trunc i64 %166 to i32
  br label %168

; <label>:168                                     ; preds = %163, %161
  %ax.0 = phi double [ %164, %163 ], [ %81, %161 ]
  %n.0 = phi i32 [ -1076, %163 ], [ -1023, %161 ]
  %ix.0 = phi i32 [ %167, %163 ], [ %9, %161 ]
  %169 = ashr i32 %ix.0, 20
  %170 = add i32 %n.0, %169
  %171 = and i32 %ix.0, 1048575
  %172 = or i32 %171, 1072693248
  %173 = icmp ult i32 %171, 235663
  br i1 %173, label %179, label %174

; <label>:174                                     ; preds = %168
  %175 = icmp ult i32 %171, 767610
  br i1 %175, label %179, label %176

; <label>:176                                     ; preds = %174
  %177 = add nsw i32 %170, 1
  %178 = add nsw i32 %172, -1048576
  br label %179

; <label>:179                                     ; preds = %176, %174, %168
  %k.0 = phi i32 [ 0, %176 ], [ 0, %168 ], [ 1, %174 ]
  %n.1 = phi i32 [ %177, %176 ], [ %170, %168 ], [ %170, %174 ]
  %ix.1 = phi i32 [ %178, %176 ], [ %172, %168 ], [ %172, %174 ]
  %180 = bitcast double %ax.0 to i64
  %181 = and i64 %180, 4294967295
  %182 = zext i32 %ix.1 to i64
  %183 = shl nuw i64 %182, 32
  %184 = or i64 %183, %181
  %185 = bitcast i64 %184 to double
  %186 = zext i32 %k.0 to i64
  %187 = getelementptr inbounds [2 x double]* @bp532, i64 0, i64 %186
  %188 = load double* %187, align 8, !tbaa !3
  %189 = fsub double %185, %188
  %190 = fadd double %185, %188
  %191 = fdiv double 1.000000e+00, %190
  %192 = fmul double %189, %191
  %193 = bitcast double %192 to i64
  %194 = and i64 %193, -4294967296
  %195 = bitcast i64 %194 to double
  %196 = ashr i32 %ix.1, 1
  %197 = or i32 %196, 536870912
  %198 = shl nuw nsw i32 %k.0, 18
  %199 = or i32 %198, 524288
  %200 = add i32 %199, %197
  %201 = zext i32 %200 to i64
  %202 = shl nuw i64 %201, 32
  %203 = bitcast i64 %202 to double
  %204 = fsub double %203, %188
  %205 = fsub double %185, %204
  %206 = fmul double %195, %203
  %207 = fsub double %189, %206
  %208 = fmul double %195, %205
  %209 = fsub double %207, %208
  %210 = fmul double %191, %209
  %211 = fmul double %192, %192
  %212 = fmul double %211, %211
  %213 = fmul double %211, 0x3FCA7E284A454EEF
  %214 = fadd double %213, 0x3FCD864A93C9DB65
  %215 = fmul double %211, %214
  %216 = fadd double %215, 0x3FD17460A91D4101
  %217 = fmul double %211, %216
  %218 = fadd double %217, 0x3FD55555518F264D
  %219 = fmul double %211, %218
  %220 = fadd double %219, 0x3FDB6DB6DB6FABFF
  %221 = fmul double %211, %220
  %222 = fadd double %221, 0x3FE3333333333303
  %223 = fmul double %212, %222
  %224 = fadd double %195, %192
  %225 = fmul double %210, %224
  %226 = fadd double %223, %225
  %227 = fmul double %195, %195
  %228 = fadd double %227, 3.000000e+00
  %229 = fadd double %228, %226
  %230 = bitcast double %229 to i64
  %231 = and i64 %230, -4294967296
  %232 = bitcast i64 %231 to double
  %233 = fadd double %232, -3.000000e+00
  %234 = fsub double %233, %227
  %235 = fsub double %226, %234
  %236 = fmul double %195, %232
  %237 = fmul double %210, %232
  %238 = fmul double %235, %192
  %239 = fadd double %237, %238
  %240 = fadd double %236, %239
  %241 = bitcast double %240 to i64
  %242 = and i64 %241, -4294967296
  %243 = bitcast i64 %242 to double
  %244 = fsub double %243, %236
  %245 = fsub double %239, %244
  %246 = fmul double %243, 0x3FEEC709E0000000
  %247 = fmul double %243, 0xBE3E2FE0145B01F5
  %248 = fmul double %245, 0x3FEEC709DC3A03FD
  %249 = fadd double %247, %248
  %250 = getelementptr inbounds [2 x double]* @dp_l533, i64 0, i64 %186
  %251 = load double* %250, align 8, !tbaa !3
  %252 = fadd double %249, %251
  %253 = sitofp i32 %n.1 to double
  %254 = fadd double %246, %252
  %255 = getelementptr inbounds [2 x double]* @dp_h534, i64 0, i64 %186
  %256 = load double* %255, align 8, !tbaa !3
  %257 = fadd double %254, %256
  %258 = fadd double %257, %253
  %259 = bitcast double %258 to i64
  %260 = and i64 %259, -4294967296
  %261 = bitcast i64 %260 to double
  %262 = fsub double %261, %253
  %263 = fsub double %262, %256
  %264 = fsub double %263, %246
  %265 = fsub double %252, %264
  br label %266

; <label>:266                                     ; preds = %179, %143
  %t2.0 = phi double [ %160, %143 ], [ %265, %179 ]
  %t1.0 = phi double [ %158, %143 ], [ %261, %179 ]
  %267 = and i64 %5, -4294967296
  %268 = bitcast i64 %267 to double
  %269 = fsub double %y, %268
  %270 = fmul double %269, %t1.0
  %271 = fmul double %t2.0, %y
  %272 = fadd double %270, %271
  %273 = fmul double %268, %t1.0
  %274 = fadd double %272, %273
  %275 = bitcast double %274 to i64
  %276 = lshr i64 %275, 32
  %277 = trunc i64 %276 to i32
  %278 = trunc i64 %275 to i32
  %279 = icmp sgt i32 %277, 1083179007
  br i1 %279, label %280, label %294

; <label>:280                                     ; preds = %266
  %281 = add nsw i32 %277, -1083179008
  %282 = or i32 %281, %278
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %287, label %284

; <label>:284                                     ; preds = %280
  %285 = fmul double %s.0, 1.000000e+300
  %286 = fmul double %285, 1.000000e+300
  br label %384

; <label>:287                                     ; preds = %280
  %288 = fadd double %272, 0x3C971547652B82FE
  %289 = fsub double %274, %273
  %290 = fcmp ogt double %288, %289
  br i1 %290, label %291, label %310

; <label>:291                                     ; preds = %287
  %292 = fmul double %s.0, 1.000000e+300
  %293 = fmul double %292, 1.000000e+300
  br label %384

; <label>:294                                     ; preds = %266
  %295 = and i32 %277, 2147482624
  %296 = icmp ugt i32 %295, 1083231231
  br i1 %296, label %297, label %310

; <label>:297                                     ; preds = %294
  %298 = add i32 %277, 1064252416
  %299 = or i32 %298, %278
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %304, label %301

; <label>:301                                     ; preds = %297
  %302 = fmul double %s.0, 1.000000e-300
  %303 = fmul double %302, 1.000000e-300
  br label %384

; <label>:304                                     ; preds = %297
  %305 = fsub double %274, %273
  %306 = fcmp ugt double %272, %305
  br i1 %306, label %310, label %307

; <label>:307                                     ; preds = %304
  %308 = fmul double %s.0, 1.000000e-300
  %309 = fmul double %308, 1.000000e-300
  br label %384

; <label>:310                                     ; preds = %304, %294, %287
  %311 = and i32 %277, 2147483647
  %312 = icmp ugt i32 %311, 1071644672
  br i1 %312, label %313, label %334

; <label>:313                                     ; preds = %310
  %314 = lshr i32 %311, 20
  %315 = add nsw i32 %314, -1022
  %316 = lshr i32 1048576, %315
  %317 = add nsw i32 %316, %277
  %318 = lshr i32 %317, 20
  %319 = and i32 %318, 2047
  %320 = add nsw i32 %319, -1023
  %321 = lshr i32 1048575, %320
  %322 = xor i32 %321, -1
  %323 = and i32 %317, %322
  %324 = zext i32 %323 to i64
  %325 = shl nuw i64 %324, 32
  %326 = bitcast i64 %325 to double
  %327 = and i32 %317, 1048575
  %328 = or i32 %327, 1048576
  %329 = sub i32 1043, %319
  %330 = lshr i32 %328, %329
  %331 = icmp slt i32 %277, 0
  %332 = sub nsw i32 0, %330
  %n.2 = select i1 %331, i32 %332, i32 %330
  %333 = fsub double %273, %326
  br label %334

; <label>:334                                     ; preds = %313, %310
  %p_h.0 = phi double [ %333, %313 ], [ %273, %310 ]
  %n.3 = phi i32 [ %n.2, %313 ], [ 0, %310 ]
  %335 = fadd double %272, %p_h.0
  %336 = bitcast double %335 to i64
  %337 = and i64 %336, -4294967296
  %338 = bitcast i64 %337 to double
  %339 = fmul double %338, 0x3FE62E4300000000
  %340 = fsub double %338, %p_h.0
  %341 = fsub double %272, %340
  %342 = fmul double %341, 0x3FE62E42FEFA39EF
  %343 = fmul double %338, 0xBE205C610CA86C39
  %344 = fadd double %342, %343
  %345 = fadd double %339, %344
  %346 = fsub double %345, %339
  %347 = fsub double %344, %346
  %348 = fmul double %345, %345
  %349 = fmul double %348, 0x3E66376972BEA4D0
  %350 = fadd double %349, 0xBEBBBD41C5D26BF1
  %351 = fmul double %348, %350
  %352 = fadd double %351, 0x3F11566AAF25DE2C
  %353 = fmul double %348, %352
  %354 = fadd double %353, 0xBF66C16C16BEBD93
  %355 = fmul double %348, %354
  %356 = fadd double %355, 0x3FC555555555553E
  %357 = fmul double %348, %356
  %358 = fsub double %345, %357
  %359 = fmul double %345, %358
  %360 = fadd double %358, -2.000000e+00
  %361 = fdiv double %359, %360
  %362 = fmul double %345, %347
  %363 = fadd double %347, %362
  %364 = fsub double %361, %363
  %365 = fsub double %364, %345
  %366 = fsub double 1.000000e+00, %365
  %367 = bitcast double %366 to i64
  %368 = lshr i64 %367, 32
  %369 = trunc i64 %368 to i32
  %370 = shl i32 %n.3, 20
  %371 = add nsw i32 %369, %370
  %372 = ashr i32 %371, 20
  %373 = icmp slt i32 %372, 1
  br i1 %373, label %374, label %376

; <label>:374                                     ; preds = %334
  %375 = tail call double @scalbn(double %366, i32 %n.3) nounwind optsize
  br label %382

; <label>:376                                     ; preds = %334
  %377 = and i64 %367, 4294967295
  %378 = zext i32 %371 to i64
  %379 = shl nuw i64 %378, 32
  %380 = or i64 %379, %377
  %381 = bitcast i64 %380 to double
  br label %382

; <label>:382                                     ; preds = %376, %374
  %z.2 = phi double [ %375, %374 ], [ %381, %376 ]
  %383 = fmul double %s.0, %z.2
  br label %384

; <label>:384                                     ; preds = %382, %307, %301, %291, %284, %140, %137, %130, %127, %120, %117, %105, %97, %95, %92, %87, %79, %75, %72, %70, %66, %64, %61, %55, %23, %13, %0
  %.0 = phi double [ %26, %23 ], [ %63, %61 ], [ %73, %72 ], [ %76, %75 ], [ %80, %79 ], [ %107, %105 ], [ %119, %117 ], [ %122, %120 ], [ %286, %284 ], [ %293, %291 ], [ %383, %382 ], [ %303, %301 ], [ %309, %307 ], [ 1.000000e+00, %0 ], [ 1.000000e+00, %13 ], [ 1.000000e+00, %55 ], [ %67, %66 ], [ 0.000000e+00, %64 ], [ %x, %70 ], [ %94, %92 ], [ %98, %97 ], [ %z.0, %95 ], [ %z.0, %87 ], [ %129, %127 ], [ %132, %130 ], [ %139, %137 ], [ %142, %140 ]
  ret double %.0
}

define i32 @prctl(i32 %op, ...) nounwind uwtable optsize {
  %x = alloca [4 x i64], align 16
  %ap = alloca [1 x %struct.__va_list_tag.341], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.341]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.341]* %ap, i64 0, i64 0, i32 0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag.341]* %ap, i64 0, i64 0, i32 3
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.341]* %ap, i64 0, i64 0, i32 2
  %.pre = load i32* %2, align 16
  br label %5

; <label>:5                                       ; preds = %16, %0
  %6 = phi i32 [ %.pre, %0 ], [ %17, %16 ]
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %16 ]
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %5
  %9 = load i8** %3, align 16
  %10 = sext i32 %6 to i64
  %11 = getelementptr i8* %9, i64 %10
  %12 = add i32 %6, 8
  store i32 %12, i32* %2, align 16
  br label %16

; <label>:13                                      ; preds = %5
  %14 = load i8** %4, align 8
  %15 = getelementptr i8* %14, i64 8
  store i8* %15, i8** %4, align 8
  br label %16

; <label>:16                                      ; preds = %13, %8
  %17 = phi i32 [ %12, %8 ], [ %6, %13 ]
  %.in = phi i8* [ %11, %8 ], [ %14, %13 ]
  %18 = bitcast i8* %.in to i64*
  %19 = load i64* %18, align 8
  %20 = getelementptr inbounds [4 x i64]* %x, i64 0, i64 %indvars.iv
  store i64 %19, i64* %20, align 8, !tbaa !5
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond, label %21, label %5

; <label>:21                                      ; preds = %16
  call void @llvm.va_end(i8* %1)
  %22 = sext i32 %op to i64
  %23 = getelementptr inbounds [4 x i64]* %x, i64 0, i64 0
  %24 = load i64* %23, align 16, !tbaa !5
  %25 = getelementptr inbounds [4 x i64]* %x, i64 0, i64 1
  %26 = load i64* %25, align 8, !tbaa !5
  %27 = getelementptr inbounds [4 x i64]* %x, i64 0, i64 2
  %28 = load i64* %27, align 16, !tbaa !5
  %29 = getelementptr inbounds [4 x i64]* %x, i64 0, i64 3
  %30 = load i64* %29, align 8, !tbaa !5
  %31 = call i64 (i64, ...)* @__syscall(i64 172, i64 %22, i64 %24, i64 %26, i64 %28, i64 %30, i32 0) nounwind optsize
  %32 = call i64 @__syscall_ret(i64 %31) nounwind optsize
  %33 = trunc i64 %32 to i32
  ret i32 %33
}

define i64 @pread(i32 %fd, i8* %buf, i64 %size, i64 %ofs) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = tail call i64 @__syscall_cp(i64 180, i64 %1, i64 %2, i64 %size, i64 0, i64 %ofs, i64 undef) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  ret i64 %4
}

define i32 @printf(i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.342], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.342]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.342]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vprintf(i8* %fmt, %struct.__va_list_tag.342* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @prlimit(i32 %pid, i32 %resource, %struct.rlimit.343* %new_limit, %struct.rlimit.343* %old_limit) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = sext i32 %resource to i64
  %3 = ptrtoint %struct.rlimit.343* %new_limit to i64
  %4 = ptrtoint %struct.rlimit.343* %old_limit to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 369, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define void @endprotoent() nounwind uwtable optsize {
  store i32 0, i32* @idx, align 4, !tbaa !6
  ret void
}

define void @setprotoent(i32 %stayopen) nounwind uwtable optsize {
  store i32 0, i32* @idx, align 4, !tbaa !6
  ret void
}

define %struct.protoent* @getprotoent() nounwind uwtable optsize {
  %1 = load i32* @idx, align 4, !tbaa !6
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [9 x [6 x i8]]* @protos, i64 0, i64 %2, i64 0
  %4 = load i8* %3, align 2, !tbaa !0
  %5 = zext i8 %4 to i32
  store i32 %5, i32* getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 2), align 8, !tbaa !6
  %6 = add nsw i32 %1, 1
  store i32 %6, i32* @idx, align 4, !tbaa !6
  %7 = getelementptr inbounds [9 x [6 x i8]]* @protos, i64 0, i64 %2, i64 1
  store i8* %7, i8** getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 0), align 8, !tbaa !7
  store i8** @getprotoent.aliases, i8*** getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 1), align 8, !tbaa !7
  ret %struct.protoent* @getprotoent.p
}

define %struct.protoent* @getprotobyname(i8* %name) nounwind uwtable optsize {
  store i32 0, i32* @idx, align 4, !tbaa !6
  br label %1

; <label>:1                                       ; preds = %._crit_edge, %0
  %2 = phi i32 [ %.pre, %._crit_edge ], [ 0, %0 ]
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds [9 x [6 x i8]]* @protos, i64 0, i64 %3, i64 0
  %5 = load i8* %4, align 2, !tbaa !0
  %6 = zext i8 %5 to i32
  store i32 %6, i32* getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 2), align 8, !tbaa !6
  %7 = add nsw i32 %2, 1
  store i32 %7, i32* @idx, align 4, !tbaa !6
  %8 = getelementptr inbounds [9 x [6 x i8]]* @protos, i64 0, i64 %3, i64 1
  store i8* %8, i8** getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 0), align 8, !tbaa !7
  store i8** @getprotoent.aliases, i8*** getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 1), align 8, !tbaa !7
  %9 = tail call i32 @strcmp(i8* %name, i8* %8) nounwind optsize
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %.critedge, label %._crit_edge

._crit_edge:                                      ; preds = %1
  %.pre = load i32* @idx, align 4, !tbaa !6
  br label %1

.critedge:                                        ; preds = %1
  ret %struct.protoent* @getprotoent.p
}

define %struct.protoent* @getprotobynumber(i32 %num) nounwind uwtable optsize {
  store i32 0, i32* @idx, align 4, !tbaa !6
  br label %1

; <label>:1                                       ; preds = %1, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %1 ]
  %2 = phi i32 [ 0, %0 ], [ %6, %1 ]
  %3 = getelementptr inbounds [9 x [6 x i8]]* @protos, i64 0, i64 %indvars.iv, i64 0
  %4 = load i8* %3, align 2, !tbaa !0
  %5 = zext i8 %4 to i32
  %indvars.iv.next = add i64 %indvars.iv, 1
  %6 = add nsw i32 %2, 1
  %7 = icmp eq i32 %5, %num
  br i1 %7, label %.critedge, label %1

.critedge:                                        ; preds = %1
  %8 = getelementptr inbounds [9 x [6 x i8]]* @protos, i64 0, i64 %indvars.iv, i64 1
  store i8** @getprotoent.aliases, i8*** getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 1), align 8
  store i8* %8, i8** getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 0), align 8
  store i32 %5, i32* getelementptr inbounds (%struct.protoent* @getprotoent.p, i64 0, i32 2), align 8
  store i32 %6, i32* @idx, align 4
  ret %struct.protoent* @getprotoent.p
}

define i32 @pselect(i32 %n, %struct.fd_set* %rfds, %struct.fd_set* %wfds, %struct.fd_set* %efds, %struct.timespec.344* %ts, %struct.sigset_t.345* %mask) nounwind uwtable optsize {
  %data = alloca [2 x i64], align 16
  %ts_tmp = alloca %struct.timespec.344, align 8
  %1 = getelementptr inbounds [2 x i64]* %data, i64 0, i64 0
  %2 = ptrtoint %struct.sigset_t.345* %mask to i64
  store i64 %2, i64* %1, align 16, !tbaa !5
  %3 = getelementptr inbounds [2 x i64]* %data, i64 0, i64 1
  store i64 8, i64* %3, align 8, !tbaa !5
  %4 = icmp ne %struct.timespec.344* %ts, null
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = bitcast %struct.timespec.344* %ts_tmp to i8*
  %7 = bitcast %struct.timespec.344* %ts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 16, i32 8, i1 false)
  br label %8

; <label>:8                                       ; preds = %5, %0
  %9 = sext i32 %n to i64
  %10 = ptrtoint %struct.fd_set* %rfds to i64
  %11 = ptrtoint %struct.fd_set* %wfds to i64
  %12 = ptrtoint %struct.fd_set* %efds to i64
  %13 = ptrtoint %struct.timespec.344* %ts_tmp to i64
  %14 = select i1 %4, i64 %13, i64 0
  %15 = ptrtoint [2 x i64]* %data to i64
  %16 = call i64 @__syscall_cp(i64 335, i64 %9, i64 %10, i64 %11, i64 %12, i64 %14, i64 %15) nounwind optsize
  %17 = call i64 @__syscall_ret(i64 %16) nounwind optsize
  %18 = trunc i64 %17 to i32
  ret i32 %18
}

define void @psiginfo(%struct.__siginfo* nocapture %si, i8* %msg) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__siginfo* %si, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = tail call i8* @strsignal(i32 %2) nounwind optsize
  %4 = icmp eq i8* %msg, null
  %5 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  br i1 %4, label %8, label %6

; <label>:6                                       ; preds = %0
  %7 = tail call i32 (%struct.__FILE_s*, i8*, ...)* @fprintf(%struct.__FILE_s* %5, i8* getelementptr inbounds ([8 x i8]* @.str541, i64 0, i64 0), i8* %msg, i8* %3) nounwind optsize
  br label %10

; <label>:8                                       ; preds = %0
  %9 = tail call i32 (%struct.__FILE_s*, i8*, ...)* @fprintf(%struct.__FILE_s* %5, i8* getelementptr inbounds ([4 x i8]* @.str1542, i64 0, i64 0), i8* %3) nounwind optsize
  br label %10

; <label>:10                                      ; preds = %8, %6
  ret void
}

define void @psignal(i32 %sig, i8* %msg) nounwind uwtable optsize {
  %1 = tail call i8* @strsignal(i32 %sig) nounwind optsize
  %2 = icmp eq i8* %msg, null
  %3 = load %struct.__FILE_s** @stderr, align 8, !tbaa !7
  br i1 %2, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i32 (%struct.__FILE_s*, i8*, ...)* @fprintf(%struct.__FILE_s* %3, i8* getelementptr inbounds ([8 x i8]* @.str543, i64 0, i64 0), i8* %msg, i8* %1) nounwind optsize
  br label %8

; <label>:6                                       ; preds = %0
  %7 = tail call i32 (%struct.__FILE_s*, i8*, ...)* @fprintf(%struct.__FILE_s* %3, i8* getelementptr inbounds ([4 x i8]* @.str1544, i64 0, i64 0), i8* %1) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %6, %4
  ret void
}

define void @__fork_handler(i32 %who) nounwind uwtable optsize {
  %1 = load %struct.atfork_funcs** @funcs, align 8, !tbaa !7
  %2 = icmp eq %struct.atfork_funcs* %1, null
  br i1 %2, label %.loopexit, label %3

; <label>:3                                       ; preds = %0
  %4 = icmp slt i32 %who, 0
  br i1 %4, label %.lr.ph5, label %.lr.ph

.lr.ph:                                           ; preds = %3
  %5 = icmp eq i32 %who, 0
  br label %14

.lr.ph5:                                          ; preds = %10, %3
  %p.04 = phi %struct.atfork_funcs* [ %12, %10 ], [ %1, %3 ]
  %6 = getelementptr inbounds %struct.atfork_funcs* %p.04, i64 0, i32 0
  %7 = load void ()** %6, align 8, !tbaa !7
  %8 = icmp eq void ()* %7, null
  br i1 %8, label %10, label %9

; <label>:9                                       ; preds = %.lr.ph5
  tail call void %7() nounwind optsize
  br label %10

; <label>:10                                      ; preds = %9, %.lr.ph5
  store %struct.atfork_funcs* %p.04, %struct.atfork_funcs** @funcs, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.atfork_funcs* %p.04, i64 0, i32 4
  %12 = load %struct.atfork_funcs** %11, align 8, !tbaa !7
  %13 = icmp eq %struct.atfork_funcs* %12, null
  br i1 %13, label %.loopexit, label %.lr.ph5

; <label>:14                                      ; preds = %24, %.lr.ph
  %p.11 = phi %struct.atfork_funcs* [ %1, %.lr.ph ], [ %26, %24 ]
  br i1 %5, label %15, label %.critedge

; <label>:15                                      ; preds = %14
  %16 = getelementptr inbounds %struct.atfork_funcs* %p.11, i64 0, i32 1
  %17 = load void ()** %16, align 8, !tbaa !7
  %18 = icmp eq void ()* %17, null
  br i1 %18, label %24, label %19

; <label>:19                                      ; preds = %15
  tail call void %17() nounwind optsize
  br label %24

.critedge:                                        ; preds = %14
  %20 = getelementptr inbounds %struct.atfork_funcs* %p.11, i64 0, i32 2
  %21 = load void ()** %20, align 8, !tbaa !7
  %22 = icmp eq void ()* %21, null
  br i1 %22, label %24, label %23

; <label>:23                                      ; preds = %.critedge
  tail call void %21() nounwind optsize
  br label %24

; <label>:24                                      ; preds = %23, %.critedge, %19, %15
  store %struct.atfork_funcs* %p.11, %struct.atfork_funcs** @funcs, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.atfork_funcs* %p.11, i64 0, i32 3
  %26 = load %struct.atfork_funcs** %25, align 8, !tbaa !7
  %27 = icmp eq %struct.atfork_funcs* %26, null
  br i1 %27, label %.loopexit, label %14

.loopexit:                                        ; preds = %24, %10, %0
  ret void
}

define i32 @pthread_atfork(void ()* %prepare, void ()* %parent, void ()* %child) nounwind uwtable optsize {
  %1 = tail call i8* @malloc(i64 40) optsize
  %2 = bitcast i8* %1 to %struct.atfork_funcs*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %20, label %4

; <label>:4                                       ; preds = %0
  %5 = load %struct.atfork_funcs** @funcs, align 8, !tbaa !7
  %6 = getelementptr inbounds i8* %1, i64 32
  %7 = bitcast i8* %6 to %struct.atfork_funcs**
  store %struct.atfork_funcs* %5, %struct.atfork_funcs** %7, align 8, !tbaa !7
  %8 = getelementptr inbounds i8* %1, i64 24
  %9 = bitcast i8* %8 to %struct.atfork_funcs**
  store %struct.atfork_funcs* null, %struct.atfork_funcs** %9, align 8, !tbaa !7
  %10 = bitcast i8* %1 to void ()**
  store void ()* %prepare, void ()** %10, align 8, !tbaa !7
  %11 = getelementptr inbounds i8* %1, i64 8
  %12 = bitcast i8* %11 to void ()**
  store void ()* %parent, void ()** %12, align 8, !tbaa !7
  %13 = getelementptr inbounds i8* %1, i64 16
  %14 = bitcast i8* %13 to void ()**
  store void ()* %child, void ()** %14, align 8, !tbaa !7
  %15 = load %struct.atfork_funcs** @funcs, align 8, !tbaa !7
  %16 = icmp eq %struct.atfork_funcs* %15, null
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %4
  %18 = getelementptr inbounds %struct.atfork_funcs* %15, i64 0, i32 3
  store %struct.atfork_funcs* %2, %struct.atfork_funcs** %18, align 8, !tbaa !7
  br label %19

; <label>:19                                      ; preds = %17, %4
  store %struct.atfork_funcs* %2, %struct.atfork_funcs** @funcs, align 8, !tbaa !7
  br label %20

; <label>:20                                      ; preds = %19, %0
  %.0 = phi i32 [ 0, %19 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @pthread_attr_destroy(%struct.pthread_attr_t.349* nocapture %a) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_attr_getdetachstate(%struct.pthread_attr_t.351* nocapture %a, i32* nocapture %state) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_attr_t.351* %a, i64 0, i32 0, i32 0, i64 2
  %2 = bitcast i64* %1 to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  store i32 %3, i32* %state, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_attr_getguardsize(%struct.pthread_attr_t.353* nocapture %a, i64* nocapture %size) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_attr_t.353* %a, i64 0, i32 0, i32 0, i64 1
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = add i64 %2, 4096
  store i64 %3, i64* %size, align 8, !tbaa !5
  ret i32 0
}

define i32 @pthread_attr_getschedparam(%struct.pthread_attr_t.355* nocapture %a, %struct.sched_param* nocapture %param) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sched_param* %param, i64 0, i32 0
  store i32 0, i32* %1, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_attr_getscope(%struct.pthread_attr_t.358* nocapture %a, i32* nocapture %scope) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_attr_getstacksize(%struct.pthread_attr_t.360* nocapture %a, i64* nocapture %size) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_attr_t.360* %a, i64 0, i32 0, i32 0, i64 0
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = add i64 %2, 12288
  store i64 %3, i64* %size, align 8, !tbaa !5
  ret i32 0
}

define i32 @pthread_attr_init(%struct.pthread_attr_t.269* %a) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_attr_t.269* %a to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 56) nounwind optsize
  ret i32 0
}

define i32 @pthread_attr_setdetachstate(%struct.pthread_attr_t.269* nocapture %a, i32 %state) nounwind uwtable optsize {
  %1 = icmp ugt i32 %state, 1
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.pthread_attr_t.269* %a, i64 0, i32 0, i32 0, i64 2
  %4 = bitcast i64* %3 to i32*
  store i32 %state, i32* %4, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_attr_setguardsize(%struct.pthread_attr_t.366* nocapture %a, i64 %size) nounwind uwtable optsize {
  %1 = icmp ugt i64 %size, 2305843009213693951
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = add i64 %size, -4096
  %4 = getelementptr inbounds %struct.pthread_attr_t.366* %a, i64 0, i32 0, i32 0, i64 1
  store i64 %3, i64* %4, align 8, !tbaa !5
  br label %5

; <label>:5                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_attr_setschedparam(%struct.pthread_attr_t.368* nocapture %a, %struct.sched_param.370* nocapture %param) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.sched_param.370* %param, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  %. = select i1 %3, i32 0, i32 95
  ret i32 %.
}

define i32 @pthread_attr_setscope(%struct.pthread_attr_t.372* nocapture %a, i32 %scope) nounwind uwtable readnone optsize {
  %1 = icmp ugt i32 %scope, 1
  %. = select i1 %1, i32 22, i32 0
  ret i32 %.
}

define i32 @pthread_attr_setstacksize(%struct.pthread_attr_t.374* nocapture %a, i64 %size) nounwind uwtable optsize {
  %1 = add i64 %size, -4096
  %2 = icmp ugt i64 %1, 4611686018427387903
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = add i64 %size, -12288
  %5 = getelementptr inbounds %struct.pthread_attr_t.374* %a, i64 0, i32 0, i32 0, i64 0
  store i64 %4, i64* %5, align 8, !tbaa !5
  br label %6

; <label>:6                                       ; preds = %3, %0
  %.0 = phi i32 [ 0, %3 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_barrierattr_destroy(i32* nocapture %a) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_barrierattr_getpshared(i32* nocapture %a, i32* nocapture %pshared) nounwind uwtable optsize {
  %1 = load i32* %a, align 4, !tbaa !6
  %2 = icmp ne i32 %1, 0
  %3 = zext i1 %2 to i32
  store i32 %3, i32* %pshared, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_barrierattr_init(i32* %a) nounwind uwtable optsize {
  %1 = bitcast i32* %a to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 4) nounwind optsize
  ret i32 0
}

define i32 @pthread_barrierattr_setpshared(i32* nocapture %a, i32 %pshared) nounwind uwtable optsize {
  %1 = icmp ne i32 %pshared, 0
  %2 = select i1 %1, i32 -2147483648, i32 0
  store i32 %2, i32* %a, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_barrier_destroy(%struct.pthread_barrier_t* %b) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 1
  %2 = bitcast i8** %1 to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %5, label %24

; <label>:5                                       ; preds = %0
  %6 = bitcast %struct.pthread_barrier_t* %b to i32*
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %.loopexit, label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %17, %5
  %9 = load volatile i32* %6, align 4, !tbaa !6
  %10 = or i32 %9, -2147483648
  br label %11

; <label>:11                                      ; preds = %17, %a_cas.exit.i
  %12 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %9, i32 %10, i32* %6) nounwind optsize
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %a_or.exit.preheader, label %17

a_or.exit.preheader:                              ; preds = %11
  %14 = load i32* %6, align 4, !tbaa !6
  %15 = and i32 %14, 2147483647
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %.loopexit, label %a_or.exit

; <label>:17                                      ; preds = %11
  %18 = load volatile i32* %6, align 4, !tbaa !6
  %19 = icmp eq i32 %18, %9
  br i1 %19, label %11, label %a_cas.exit.i

a_or.exit:                                        ; preds = %a_or.exit, %a_or.exit.preheader
  %20 = phi i32 [ %21, %a_or.exit ], [ %14, %a_or.exit.preheader ]
  tail call void @__wait(i32* %6, i32* null, i32 %20, i32 0) nounwind optsize
  %21 = load i32* %6, align 4, !tbaa !6
  %22 = and i32 %21, 2147483647
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %.loopexit, label %a_or.exit

.loopexit:                                        ; preds = %a_or.exit, %a_or.exit.preheader, %5
  tail call void @__vm_lock(i32 -1) nounwind optsize
  tail call void @__vm_unlock() nounwind optsize
  br label %24

; <label>:24                                      ; preds = %.loopexit, %0
  ret i32 0
}

define i32 @pthread_barrier_init(%struct.pthread_barrier_t* nocapture %b, i32* %a, i32 %count) nounwind uwtable optsize {
  %1 = add i32 %count, -1
  %2 = icmp ugt i32 %1, 2147483646
  br i1 %2, label %13, label %3

; <label>:3                                       ; preds = %0
  %4 = icmp eq i32* %a, null
  br i1 %4, label %7, label %5

; <label>:5                                       ; preds = %3
  %6 = load i32* %a, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %5, %3
  %8 = phi i32 [ %6, %5 ], [ 0, %3 ]
  %9 = or i32 %8, %1
  %10 = zext i32 %9 to i256
  %11 = shl nuw nsw i256 %10, 64
  %12 = bitcast %struct.pthread_barrier_t* %b to i256*
  store i256 %11, i256* %12, align 8
  br label %13

; <label>:13                                      ; preds = %7, %0
  %.0 = phi i32 [ 0, %7 ], [ 22, %0 ]
  ret i32 %.0
}

define void @__vm_lock(i32 %inc) nounwind uwtable optsize {
  br label %.backedge

.backedge:                                        ; preds = %10, %4, %0
  %1 = load i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), align 4, !tbaa !6
  %2 = mul nsw i32 %1, %inc
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %.backedge
  tail call void @__wait(i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 1), i32 %1, i32 1) nounwind optsize
  br label %.backedge

; <label>:5                                       ; preds = %.backedge
  %6 = add nsw i32 %1, %inc
  br label %7

; <label>:7                                       ; preds = %10, %5
  %8 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %1, i32 %6, i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0)) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %a_cas.exit.thread, label %10

; <label>:10                                      ; preds = %7
  %11 = load volatile i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), align 4, !tbaa !6
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %7, label %.backedge

a_cas.exit.thread:                                ; preds = %7
  ret void
}

define void @__vm_unlock() nounwind uwtable optsize {
  %1 = load i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), align 4, !tbaa !6
  %2 = icmp sgt i32 %1, 0
  %3 = select i1 %2, i32 -1, i32 1
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %9, %0
  %4 = load volatile i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), align 4, !tbaa !6
  %5 = add nsw i32 %4, %3
  br label %6

; <label>:6                                       ; preds = %9, %a_cas.exit.i
  %7 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %4, i32 %5, i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0)) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %a_fetch_add.exit, label %9

; <label>:9                                       ; preds = %6
  %10 = load volatile i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), align 4, !tbaa !6
  %11 = icmp eq i32 %10, %4
  br i1 %11, label %6, label %a_cas.exit.i

a_fetch_add.exit:                                 ; preds = %6
  %12 = sub nsw i32 0, %3
  %13 = icmp eq i32 %4, %12
  %14 = load i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 1), align 4, !tbaa !6
  %15 = icmp ne i32 %14, 0
  %or.cond = and i1 %13, %15
  br i1 %or.cond, label %16, label %17

; <label>:16                                      ; preds = %a_fetch_add.exit
  tail call void @__wake(i32* getelementptr inbounds ([2 x i32]* @vmlock, i64 0, i64 0), i32 -1, i32 1) nounwind optsize
  br label %17

; <label>:17                                      ; preds = %16, %a_fetch_add.exit
  ret void
}

define i32 @pthread_barrier_wait(%struct.pthread_barrier_t* %b) nounwind uwtable optsize {
  %new_inst = alloca %struct.instance, align 4
  %1 = bitcast %struct.pthread_barrier_t* %b to [8 x i32]*
  %2 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 1
  %3 = bitcast i8** %2 to i32*
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %pshared_barrier_wait.exit, label %6

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %4, 0
  br i1 %7, label %10, label %.preheader8

.preheader8:                                      ; preds = %6
  %8 = bitcast %struct.pthread_barrier_t* %b to i32*
  %9 = getelementptr inbounds [8 x i32]* %1, i64 0, i64 1
  br label %a_cas.exit.i

; <label>:10                                      ; preds = %6
  %11 = and i32 %4, 2147483647
  %12 = add nsw i32 %11, 1
  %13 = icmp eq i32 %11, 0
  br i1 %13, label %pshared_barrier_wait.exit, label %.preheader18.i

.preheader18.i:                                   ; preds = %10
  %14 = bitcast %struct.pthread_barrier_t* %b to i32*
  %15 = getelementptr inbounds [8 x i32]* %1, i64 0, i64 1
  %16 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 %12, i32* %14) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %._crit_edge, label %.lr.ph15

.lr.ph15:                                         ; preds = %.backedge, %.preheader18.i
  %18 = load volatile i32* %14, align 4, !tbaa !6
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %.backedge, label %22

.backedge:                                        ; preds = %22, %.lr.ph15
  %20 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 %12, i32* %14) nounwind optsize
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %._crit_edge, label %.lr.ph15

; <label>:22                                      ; preds = %.lr.ph15
  call void @__wait(i32* %14, i32* %15, i32 %18, i32 0) nounwind optsize
  br label %.backedge

._crit_edge:                                      ; preds = %.backedge, %.preheader18.i
  %23 = getelementptr inbounds [8 x i32]* %1, i64 0, i64 3
  %24 = load i32* %23, align 4, !tbaa !6
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %23, align 4, !tbaa !6
  %26 = icmp eq i32 %25, %12
  br i1 %26, label %27, label %33

; <label>:27                                      ; preds = %._crit_edge
  store volatile i32 0, i32* %23, align 4, !tbaa !6
  %28 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 2
  %29 = bitcast i8** %28 to i32*
  %30 = load i32* %29, align 4, !tbaa !6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %.loopexit.i, label %32

; <label>:32                                      ; preds = %27
  call void @__wake(i32* %23, i32 -1, i32 0) nounwind optsize
  br label %.loopexit.i

; <label>:33                                      ; preds = %._crit_edge
  store volatile i32 0, i32* %14, align 4, !tbaa !6
  %34 = load i32* %15, align 4, !tbaa !6
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %.preheader.i, label %36

; <label>:36                                      ; preds = %33
  call void @__wake(i32* %14, i32 1, i32 0) nounwind optsize
  br label %.preheader.i

.preheader.i:                                     ; preds = %36, %33
  %37 = load i32* %23, align 4, !tbaa !6
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %.lr.ph.i, label %.loopexit.i

.lr.ph.i:                                         ; preds = %.preheader.i
  %39 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 2
  %40 = bitcast i8** %39 to i32*
  br label %41

; <label>:41                                      ; preds = %41, %.lr.ph.i
  %42 = phi i32 [ %37, %.lr.ph.i ], [ %43, %41 ]
  call void @__wait(i32* %23, i32* %40, i32 %42, i32 0) nounwind optsize
  %43 = load i32* %23, align 4, !tbaa !6
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %41, label %.loopexit.i

.loopexit.i:                                      ; preds = %41, %.preheader.i, %32, %27
  %ret.0.i = phi i32 [ -1, %32 ], [ -1, %27 ], [ 0, %.preheader.i ], [ 0, %41 ]
  call void @__vm_lock(i32 1) nounwind optsize
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %50, %.loopexit.i
  %45 = load volatile i32* %23, align 4, !tbaa !6
  %46 = add nsw i32 %45, -1
  br label %47

; <label>:47                                      ; preds = %50, %a_cas.exit.i.i
  %48 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %45, i32 %46, i32* %23) nounwind optsize
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %a_fetch_add.exit.i, label %50

; <label>:50                                      ; preds = %47
  %51 = load volatile i32* %23, align 4, !tbaa !6
  %52 = icmp eq i32 %51, %45
  br i1 %52, label %47, label %a_cas.exit.i.i

a_fetch_add.exit.i:                               ; preds = %47
  %53 = sub i32 0, %11
  %54 = icmp eq i32 %45, %53
  br i1 %54, label %59, label %.preheader5.i

.preheader5.i:                                    ; preds = %a_fetch_add.exit.i
  %55 = load i32* %23, align 4, !tbaa !6
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %.preheader8.i, label %.lr.ph7.i

.lr.ph7.i:                                        ; preds = %.preheader5.i
  %57 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 2
  %58 = bitcast i8** %57 to i32*
  br label %65

; <label>:59                                      ; preds = %a_fetch_add.exit.i
  store volatile i32 0, i32* %23, align 4, !tbaa !6
  %60 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 2
  %61 = bitcast i8** %60 to i32*
  %62 = load i32* %61, align 4, !tbaa !6
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %.preheader8.i, label %64

; <label>:64                                      ; preds = %59
  call void @__wake(i32* %23, i32 -1, i32 0) nounwind optsize
  br label %.preheader8.i

; <label>:65                                      ; preds = %65, %.lr.ph7.i
  %66 = phi i32 [ %55, %.lr.ph7.i ], [ %67, %65 ]
  call void @__wait(i32* %23, i32* %58, i32 %66, i32 0) nounwind optsize
  %67 = load i32* %23, align 4, !tbaa !6
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %.preheader8.i, label %65

.preheader8.i:                                    ; preds = %65, %64, %59, %.preheader5.i
  %.pre.i = load i32* %14, align 4, !tbaa !6
  br label %a_cas.exit2.i

a_cas.exit2.i:                                    ; preds = %76, %.preheader8.i
  %69 = phi i32 [ %.pre.i, %.preheader8.i ], [ %77, %76 ]
  %70 = load i32* %15, align 4, !tbaa !6
  %71 = add nsw i32 %69, -1
  %72 = icmp eq i32 %69, -2147483647
  %..i = select i1 %72, i32 0, i32 %71
  br label %73

; <label>:73                                      ; preds = %76, %a_cas.exit2.i
  %74 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %69, i32 %..i, i32* %14) nounwind optsize
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %a_cas.exit2.thread.i, label %76

; <label>:76                                      ; preds = %73
  %77 = load volatile i32* %14, align 4, !tbaa !6
  %78 = icmp eq i32 %77, %69
  br i1 %78, label %73, label %a_cas.exit2.i

a_cas.exit2.thread.i:                             ; preds = %73
  br i1 %72, label %82, label %79

; <label>:79                                      ; preds = %a_cas.exit2.thread.i
  %80 = icmp ne i32 %69, 1
  %81 = icmp eq i32 %70, 0
  %or.cond.i = or i1 %80, %81
  br i1 %or.cond.i, label %83, label %82

; <label>:82                                      ; preds = %79, %a_cas.exit2.thread.i
  call void @__wake(i32* %14, i32 1, i32 0) nounwind optsize
  br label %83

; <label>:83                                      ; preds = %82, %79
  call void @__vm_unlock() nounwind optsize
  br label %pshared_barrier_wait.exit

a_cas.exit.i:                                     ; preds = %92, %88, %.preheader8
  %84 = load volatile i32* %8, align 4, !tbaa !6
  br label %85

; <label>:85                                      ; preds = %88, %a_cas.exit.i
  %86 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %84, i32 1, i32* %8) nounwind optsize
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %a_swap.exit, label %88

; <label>:88                                      ; preds = %85
  %89 = load volatile i32* %8, align 4, !tbaa !6
  %90 = icmp eq i32 %89, %84
  br i1 %90, label %85, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %85
  %91 = icmp eq i32 %84, 0
  br i1 %91, label %93, label %92

; <label>:92                                      ; preds = %a_swap.exit
  call void @__wait(i32* %8, i32* %9, i32 1, i32 1) nounwind optsize
  br label %a_cas.exit.i

; <label>:93                                      ; preds = %a_swap.exit
  %94 = getelementptr inbounds %struct.pthread_barrier_t* %b, i64 0, i32 0, i32 0, i64 4
  %95 = load i8** %94, align 8, !tbaa !7
  %96 = icmp eq i8* %95, null
  br i1 %96, label %97, label %117

; <label>:97                                      ; preds = %93
  %98 = bitcast %struct.instance* %new_inst to i8*
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 16, i32 4, i1 false)
  store i8* %98, i8** %94, align 8, !tbaa !7
  store volatile i32 0, i32* %8, align 4, !tbaa !6
  %99 = load i32* %9, align 4, !tbaa !6
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %.preheader, label %101

; <label>:101                                     ; preds = %97
  call void @__wake(i32* %8, i32 1, i32 1) nounwind optsize
  br label %.preheader

.preheader:                                       ; preds = %101, %97
  %102 = getelementptr inbounds %struct.instance* %new_inst, i64 0, i32 3
  br label %a_cas.exit.i.i1

a_cas.exit.i.i1:                                  ; preds = %111, %.preheader
  %103 = load volatile i32* %102, align 4, !tbaa !6
  %104 = add nsw i32 %103, 1
  br label %105

; <label>:105                                     ; preds = %111, %a_cas.exit.i.i1
  %106 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %103, i32 %104, i32* %102) nounwind optsize
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %a_inc.exit.preheader, label %111

a_inc.exit.preheader:                             ; preds = %105
  %108 = load i32* %102, align 4, !tbaa !6
  %109 = icmp eq i32 %108, 1
  br i1 %109, label %.lr.ph, label %pshared_barrier_wait.exit

.lr.ph:                                           ; preds = %a_inc.exit.preheader
  %110 = ptrtoint i32* %102 to i64
  br label %a_inc.exit

; <label>:111                                     ; preds = %105
  %112 = load volatile i32* %102, align 4, !tbaa !6
  %113 = icmp eq i32 %112, %103
  br i1 %113, label %105, label %a_cas.exit.i.i1

a_inc.exit:                                       ; preds = %a_inc.exit, %.lr.ph
  %114 = call i64 (i64, ...)* @__syscall(i64 240, i64 %110, i64 0, i64 1, i64 0, i32 0, i32 0) nounwind optsize
  %115 = load i32* %102, align 4, !tbaa !6
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %a_inc.exit, label %pshared_barrier_wait.exit

; <label>:117                                     ; preds = %93
  %118 = bitcast i8* %95 to i32*
  %119 = load i32* %118, align 4, !tbaa !6
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %118, align 4, !tbaa !6
  %121 = icmp eq i32 %120, %4
  br i1 %121, label %122, label %134

; <label>:122                                     ; preds = %117
  store i8* null, i8** %94, align 8, !tbaa !7
  store volatile i32 0, i32* %8, align 4, !tbaa !6
  %123 = load i32* %9, align 4, !tbaa !6
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %126, label %125

; <label>:125                                     ; preds = %122
  call void @__wake(i32* %8, i32 1, i32 1) nounwind optsize
  br label %126

; <label>:126                                     ; preds = %125, %122
  %127 = getelementptr inbounds i8* %95, i64 4
  %128 = bitcast i8* %127 to i32*
  store volatile i32 1, i32* %128, align 4, !tbaa !6
  %129 = getelementptr inbounds i8* %95, i64 8
  %130 = bitcast i8* %129 to i32*
  %131 = load i32* %130, align 4, !tbaa !6
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %a_cas.exit.i3, label %133

; <label>:133                                     ; preds = %126
  call void @__wake(i32* %128, i32 -1, i32 1) nounwind optsize
  br label %a_cas.exit.i3

; <label>:134                                     ; preds = %117
  store volatile i32 0, i32* %8, align 4, !tbaa !6
  %135 = load i32* %9, align 4, !tbaa !6
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %138, label %137

; <label>:137                                     ; preds = %134
  call void @__wake(i32* %8, i32 1, i32 1) nounwind optsize
  br label %138

; <label>:138                                     ; preds = %137, %134
  %139 = getelementptr inbounds i8* %95, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds i8* %95, i64 8
  %142 = bitcast i8* %141 to i32*
  call void @__wait(i32* %140, i32* %142, i32 0, i32 1) nounwind optsize
  br label %a_cas.exit.i3

a_cas.exit.i3:                                    ; preds = %148, %138, %133, %126
  %143 = load volatile i32* %118, align 4, !tbaa !6
  %144 = add nsw i32 %143, -1
  br label %145

; <label>:145                                     ; preds = %148, %a_cas.exit.i3
  %146 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %143, i32 %144, i32* %118) nounwind optsize
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %a_fetch_add.exit, label %148

; <label>:148                                     ; preds = %145
  %149 = load volatile i32* %118, align 4, !tbaa !6
  %150 = icmp eq i32 %149, %143
  br i1 %150, label %145, label %a_cas.exit.i3

a_fetch_add.exit:                                 ; preds = %145
  %151 = icmp eq i32 %143, 1
  br i1 %151, label %152, label %pshared_barrier_wait.exit

; <label>:152                                     ; preds = %a_fetch_add.exit
  %153 = getelementptr inbounds i8* %95, i64 12
  %154 = bitcast i8* %153 to i32*
  br label %a_cas.exit.i4

a_cas.exit.i4:                                    ; preds = %160, %152
  %155 = load volatile i32* %154, align 4, !tbaa !6
  %156 = add nsw i32 %155, 1
  br label %157

; <label>:157                                     ; preds = %160, %a_cas.exit.i4
  %158 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %155, i32 %156, i32* %154) nounwind optsize
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %a_fetch_add.exit5, label %160

; <label>:160                                     ; preds = %157
  %161 = load volatile i32* %154, align 4, !tbaa !6
  %162 = icmp eq i32 %161, %155
  br i1 %162, label %157, label %a_cas.exit.i4

a_fetch_add.exit5:                                ; preds = %157
  %163 = icmp eq i32 %155, 0
  br i1 %163, label %pshared_barrier_wait.exit, label %164

; <label>:164                                     ; preds = %a_fetch_add.exit5
  call void @__wake(i32* %154, i32 1, i32 1) nounwind optsize
  br label %pshared_barrier_wait.exit

pshared_barrier_wait.exit:                        ; preds = %164, %a_fetch_add.exit5, %a_fetch_add.exit, %a_inc.exit, %a_inc.exit.preheader, %83, %10, %0
  %.0 = phi i32 [ -1, %0 ], [ 0, %a_fetch_add.exit5 ], [ 0, %164 ], [ 0, %a_fetch_add.exit ], [ %ret.0.i, %83 ], [ -1, %10 ], [ -1, %a_inc.exit ], [ -1, %a_inc.exit.preheader ]
  ret i32 %.0
}

define i32 @pthread_condattr_destroy(i32* nocapture %a) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_condattr_getclock(i32* nocapture %a, i32* nocapture %clk) nounwind uwtable optsize {
  %1 = load i32* %a, align 4, !tbaa !6
  %2 = and i32 %1, 2147483647
  store i32 %2, i32* %clk, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_condattr_getpshared(i32* nocapture %a, i32* nocapture %pshared) nounwind uwtable optsize {
  %1 = load i32* %a, align 4, !tbaa !6
  %2 = lshr i32 %1, 31
  store i32 %2, i32* %pshared, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_condattr_init(i32* %a) nounwind uwtable optsize {
  %1 = bitcast i32* %a to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 4) nounwind optsize
  ret i32 0
}

define i32 @pthread_condattr_setclock(i32* nocapture %a, i32 %clk) nounwind uwtable optsize {
  %1 = icmp slt i32 %clk, 0
  %2 = add i32 %clk, -2
  %3 = icmp ult i32 %2, 2
  %or.cond = or i1 %1, %3
  br i1 %or.cond, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* %a, align 4, !tbaa !6
  %6 = and i32 %5, -2147483648
  %7 = or i32 %6, %clk
  store i32 %7, i32* %a, align 4, !tbaa !6
  br label %8

; <label>:8                                       ; preds = %4, %0
  %.0 = phi i32 [ 0, %4 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_condattr_setpshared(i32* nocapture %a, i32 %pshared) nounwind uwtable optsize {
  %1 = icmp ugt i32 %pshared, 1
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = load i32* %a, align 4, !tbaa !6
  %4 = and i32 %3, 2147483647
  %5 = shl i32 %pshared, 31
  %6 = or i32 %4, %5
  store i32 %6, i32* %a, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_cond_broadcast(%struct.pthread_cond_t* %c) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_cond_t* %c to [12 x i32]*
  %2 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 3
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %69, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.pthread_cond_t* %c, i64 0, i32 0, i32 0, i64 1
  %7 = bitcast i8** %6 to i32*
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %13, %5
  %8 = load volatile i32* %7, align 4, !tbaa !6
  %9 = add nsw i32 %8, 1
  br label %10

; <label>:10                                      ; preds = %13, %a_cas.exit.i.i
  %11 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %8, i32 %9, i32* %7) nounwind optsize
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %a_inc.exit, label %13

; <label>:13                                      ; preds = %10
  %14 = load volatile i32* %7, align 4, !tbaa !6
  %15 = icmp eq i32 %14, %8
  br i1 %15, label %10, label %a_cas.exit.i.i

a_inc.exit:                                       ; preds = %10
  %16 = getelementptr inbounds %struct.pthread_cond_t* %c, i64 0, i32 0, i32 0, i64 0
  %17 = load i8** %16, align 8, !tbaa !7
  %18 = icmp eq i8* %17, inttoptr (i64 -1 to i8*)
  br i1 %18, label %22, label %.preheader

.preheader:                                       ; preds = %a_inc.exit
  %19 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 5
  %20 = getelementptr inbounds %struct.pthread_cond_t* %c, i64 0, i32 0, i32 0, i64 3
  %21 = bitcast i8** %20 to i32*
  br label %a_cas.exit.i

; <label>:22                                      ; preds = %a_inc.exit
  tail call void @__wake(i32* %7, i32 -1, i32 0) nounwind optsize
  br label %69

a_cas.exit.i:                                     ; preds = %31, %27, %.preheader
  %23 = load volatile i32* %19, align 4, !tbaa !6
  br label %24

; <label>:24                                      ; preds = %27, %a_cas.exit.i
  %25 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %23, i32 1, i32* %19) nounwind optsize
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %a_swap.exit, label %27

; <label>:27                                      ; preds = %24
  %28 = load volatile i32* %19, align 4, !tbaa !6
  %29 = icmp eq i32 %28, %23
  br i1 %29, label %24, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %24
  %30 = icmp eq i32 %23, 0
  br i1 %30, label %32, label %31

; <label>:31                                      ; preds = %a_swap.exit
  tail call void @__wait(i32* %19, i32* %21, i32 1, i32 1) nounwind optsize
  br label %a_cas.exit.i

; <label>:32                                      ; preds = %a_swap.exit
  %33 = load i32* %2, align 4, !tbaa !6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %65, label %35

; <label>:35                                      ; preds = %32
  %36 = load i8** %16, align 8, !tbaa !7
  %37 = getelementptr inbounds i8* %36, i64 8
  %38 = bitcast i8* %37 to i32*
  %39 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 7
  %40 = load i32* %39, align 4, !tbaa !6
  br label %a_cas.exit.i1

a_cas.exit.i1:                                    ; preds = %46, %35
  %41 = load volatile i32* %38, align 4, !tbaa !6
  %42 = add nsw i32 %41, %40
  br label %43

; <label>:43                                      ; preds = %46, %a_cas.exit.i1
  %44 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %41, i32 %42, i32* %38) nounwind optsize
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %a_fetch_add.exit, label %46

; <label>:46                                      ; preds = %43
  %47 = load volatile i32* %38, align 4, !tbaa !6
  %48 = icmp eq i32 %47, %41
  br i1 %48, label %43, label %a_cas.exit.i1

a_fetch_add.exit:                                 ; preds = %43
  store i32 0, i32* %39, align 4, !tbaa !6
  %49 = ptrtoint i8** %6 to i64
  %50 = bitcast i8* %36 to i32*
  %51 = load i32* %50, align 4, !tbaa !6
  %52 = icmp eq i32 %51, 0
  %.pre = getelementptr inbounds i8* %36, i64 4
  br i1 %52, label %a_fetch_add.exit._crit_edge, label %53

; <label>:53                                      ; preds = %a_fetch_add.exit
  %54 = bitcast i8* %.pre to i32*
  %55 = load i32* %54, align 4, !tbaa !6
  %56 = and i32 %55, 2147483647
  %57 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %58 = getelementptr inbounds %struct.__pthread* %57, i64 0, i32 1
  %59 = load i32* %58, align 4, !tbaa !6
  %60 = icmp ne i32 %56, %59
  br label %a_fetch_add.exit._crit_edge

a_fetch_add.exit._crit_edge:                      ; preds = %53, %a_fetch_add.exit
  %61 = phi i1 [ %60, %53 ], [ true, %a_fetch_add.exit ]
  %62 = zext i1 %61 to i64
  %63 = ptrtoint i8* %.pre to i64
  %64 = tail call i64 (i64, ...)* @__syscall(i64 240, i64 %49, i64 3, i64 %62, i64 2147483647, i64 %63, i32 0) nounwind optsize
  br label %65

; <label>:65                                      ; preds = %a_fetch_add.exit._crit_edge, %32
  store volatile i32 0, i32* %19, align 4, !tbaa !6
  %66 = load i32* %21, align 4, !tbaa !6
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %69, label %68

; <label>:68                                      ; preds = %65
  tail call void @__wake(i32* %19, i32 1, i32 0) nounwind optsize
  br label %69

; <label>:69                                      ; preds = %68, %65, %22, %0
  ret i32 0
}

define i32 @pthread_cond_destroy(%struct.pthread_cond_t.389* %c) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_cond_t.389* %c, i64 0, i32 0, i32 0, i64 0
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp ne i8* %2, inttoptr (i64 -1 to i8*)
  %4 = zext i1 %3 to i32
  %5 = bitcast %struct.pthread_cond_t.389* %c to [12 x i32]*
  %6 = getelementptr inbounds %struct.pthread_cond_t.389* %c, i64 0, i32 0, i32 0, i64 4
  %7 = bitcast i8** %6 to i32*
  store i32 1, i32* %7, align 4, !tbaa !6
  %8 = getelementptr inbounds [12 x i32]* %5, i64 0, i64 3
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds %struct.pthread_cond_t.389* %c, i64 0, i32 0, i32 0, i64 1
  %13 = bitcast i8** %12 to i32*
  tail call void @__wake(i32* %13, i32 -1, i32 %4) nounwind optsize
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %17, %11
  %.pr = load i32* %8, align 4
  br label %14

; <label>:14                                      ; preds = %thread-pre-split, %0
  %15 = phi i32 [ %.pr, %thread-pre-split ], [ 0, %0 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

; <label>:17                                      ; preds = %14
  tail call void @__wait(i32* %8, i32* null, i32 %15, i32 %4) nounwind optsize
  br label %thread-pre-split

; <label>:18                                      ; preds = %14
  ret i32 0
}

define i32 @pthread_cond_init(%struct.pthread_cond_t.391* %c, i32* %a) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_cond_t.391* %c to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 48) nounwind optsize
  %3 = icmp eq i32* %a, null
  br i1 %3, label %13, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* %a, align 4, !tbaa !6
  %6 = and i32 %5, 2147483647
  %7 = getelementptr inbounds %struct.pthread_cond_t.391* %c, i64 0, i32 0, i32 0, i64 2
  %8 = bitcast i8** %7 to i32*
  store i32 %6, i32* %8, align 4, !tbaa !6
  %9 = load i32* %a, align 4, !tbaa !6
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %4
  %12 = getelementptr inbounds %struct.pthread_cond_t.391* %c, i64 0, i32 0, i32 0, i64 0
  store i8* inttoptr (i64 -1 to i8*), i8** %12, align 8, !tbaa !7
  br label %13

; <label>:13                                      ; preds = %11, %4, %0
  ret i32 0
}

define i32 @pthread_cond_signal(%struct.pthread_cond_t.393* %c) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_cond_t.393* %c to [12 x i32]*
  %2 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 3
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %19, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.pthread_cond_t.393* %c, i64 0, i32 0, i32 0, i64 1
  %7 = bitcast i8** %6 to i32*
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %13, %5
  %8 = load volatile i32* %7, align 4, !tbaa !6
  %9 = add nsw i32 %8, 1
  br label %10

; <label>:10                                      ; preds = %13, %a_cas.exit.i.i
  %11 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %8, i32 %9, i32* %7) nounwind optsize
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %a_inc.exit, label %13

; <label>:13                                      ; preds = %10
  %14 = load volatile i32* %7, align 4, !tbaa !6
  %15 = icmp eq i32 %14, %8
  br i1 %15, label %10, label %a_cas.exit.i.i

a_inc.exit:                                       ; preds = %10
  %16 = load i32* %2, align 4, !tbaa !6
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %19, label %18

; <label>:18                                      ; preds = %a_inc.exit
  tail call void @__wake(i32* %7, i32 1, i32 0) nounwind optsize
  br label %19

; <label>:19                                      ; preds = %18, %a_inc.exit, %0
  ret i32 0
}

define i32 @pthread_cond_timedwait(%struct.pthread_cond_t.395* %c, %struct.pthread_mutex_t* %m, %struct.timespec* %ts) nounwind uwtable optsize {
  %cm = alloca %struct.cm, align 8
  %1 = getelementptr inbounds %struct.cm* %cm, i64 0, i32 0
  store %struct.pthread_cond_t.395* %c, %struct.pthread_cond_t.395** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.cm* %cm, i64 0, i32 1
  store %struct.pthread_mutex_t* %m, %struct.pthread_mutex_t** %2, align 8, !tbaa !7
  %3 = bitcast %struct.pthread_mutex_t* %m to i32*
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %15, label %6

; <label>:6                                       ; preds = %0
  %7 = bitcast %struct.pthread_mutex_t* %m to [10 x i32]*
  %8 = getelementptr inbounds [10 x i32]* %7, i64 0, i64 1
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = and i32 %9, 2147483647
  %11 = call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %12 = getelementptr inbounds %struct.__pthread* %11, i64 0, i32 1
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = icmp eq i32 %10, %13
  br i1 %14, label %15, label %73

; <label>:15                                      ; preds = %6, %0
  %16 = icmp eq %struct.timespec* %ts, null
  br i1 %16, label %21, label %17

; <label>:17                                      ; preds = %15
  %18 = getelementptr inbounds %struct.timespec* %ts, i64 0, i32 1
  %19 = load i64* %18, align 8, !tbaa !5
  %20 = icmp ugt i64 %19, 999999999
  br i1 %20, label %73, label %21

; <label>:21                                      ; preds = %17, %15
  call void @pthread_testcancel() nounwind optsize
  %22 = bitcast %struct.pthread_cond_t.395* %c to [12 x i32]*
  %23 = getelementptr inbounds [12 x i32]* %22, i64 0, i64 3
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %29, %21
  %24 = load volatile i32* %23, align 4, !tbaa !6
  %25 = add nsw i32 %24, 1
  br label %26

; <label>:26                                      ; preds = %29, %a_cas.exit.i.i
  %27 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %24, i32 %25, i32* %23) nounwind optsize
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %a_inc.exit, label %29

; <label>:29                                      ; preds = %26
  %30 = load volatile i32* %23, align 4, !tbaa !6
  %31 = icmp eq i32 %30, %24
  br i1 %31, label %26, label %a_cas.exit.i.i

a_inc.exit:                                       ; preds = %26
  %32 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 0
  %33 = load i8** %32, align 8, !tbaa !7
  %34 = icmp eq i8* %33, inttoptr (i64 -1 to i8*)
  br i1 %34, label %56, label %35

; <label>:35                                      ; preds = %a_inc.exit
  %36 = bitcast %struct.pthread_mutex_t* %m to i8*
  store i8* %36, i8** %32, align 8, !tbaa !7
  %37 = getelementptr inbounds [12 x i32]* %22, i64 0, i64 5
  %38 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 3
  %39 = bitcast i8** %38 to i32*
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %48, %44, %35
  %40 = load volatile i32* %37, align 4, !tbaa !6
  br label %41

; <label>:41                                      ; preds = %44, %a_cas.exit.i
  %42 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %40, i32 1, i32* %37) nounwind optsize
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %a_swap.exit, label %44

; <label>:44                                      ; preds = %41
  %45 = load volatile i32* %37, align 4, !tbaa !6
  %46 = icmp eq i32 %45, %40
  br i1 %46, label %41, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %41
  %47 = icmp eq i32 %40, 0
  br i1 %47, label %49, label %48

; <label>:48                                      ; preds = %a_swap.exit
  call void @__wait(i32* %37, i32* %39, i32 1, i32 1) nounwind optsize
  br label %a_cas.exit.i

; <label>:49                                      ; preds = %a_swap.exit
  %50 = getelementptr inbounds [12 x i32]* %22, i64 0, i64 7
  %51 = load i32* %50, align 4, !tbaa !6
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %50, align 4, !tbaa !6
  store volatile i32 0, i32* %37, align 4, !tbaa !6
  %53 = load i32* %39, align 4, !tbaa !6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %55

; <label>:55                                      ; preds = %49
  call void @__wake(i32* %37, i32 1, i32 1) nounwind optsize
  br label %56

; <label>:56                                      ; preds = %55, %49, %a_inc.exit
  %57 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 1
  %58 = bitcast i8** %57 to i32*
  %59 = load i32* %58, align 4, !tbaa !6
  %60 = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* %m) nounwind optsize
  %61 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 2
  %62 = bitcast i8** %61 to i32*
  %63 = bitcast %struct.cm* %cm to i8*
  br label %.critedge1

.critedge1:                                       ; preds = %68, %68, %56
  %64 = load i32* %62, align 4, !tbaa !6
  %65 = call i32 @__timedwait(i32* %58, i32 %59, i32 %64, %struct.timespec* %ts, void (i8*)* @cleanup559, i8* %63, i32 0) nounwind optsize
  %66 = load i32* %58, align 4, !tbaa !6
  %67 = icmp eq i32 %66, %59
  br i1 %67, label %68, label %.critedge

; <label>:68                                      ; preds = %.critedge1
  switch i32 %65, label %.loopexit [
    i32 4, label %.critedge1
    i32 0, label %.critedge1
  ]

.critedge:                                        ; preds = %.critedge1
  %69 = icmp eq i32 %65, 4
  br i1 %69, label %70, label %.loopexit

; <label>:70                                      ; preds = %.critedge
  br label %.loopexit

.loopexit:                                        ; preds = %70, %.critedge, %68
  %e.0 = phi i32 [ 0, %70 ], [ %65, %.critedge ], [ %65, %68 ]
  call fastcc void @unwait(%struct.pthread_cond_t.395* %c, %struct.pthread_mutex_t* %m) optsize
  %71 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* %m) nounwind optsize
  %72 = icmp eq i32 %71, 0
  %e.0. = select i1 %72, i32 %e.0, i32 %71
  br label %73

; <label>:73                                      ; preds = %.loopexit, %17, %6
  %.0 = phi i32 [ 1, %6 ], [ 22, %17 ], [ %e.0., %.loopexit ]
  ret i32 %.0
}

define internal void @cleanup559(i8* nocapture %p) nounwind uwtable optsize {
  %1 = bitcast i8* %p to %struct.pthread_cond_t.395**
  %2 = load %struct.pthread_cond_t.395** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds i8* %p, i64 8
  %4 = bitcast i8* %3 to %struct.pthread_mutex_t**
  %5 = load %struct.pthread_mutex_t** %4, align 8, !tbaa !7
  tail call fastcc void @unwait(%struct.pthread_cond_t.395* %2, %struct.pthread_mutex_t* %5) optsize
  %6 = load %struct.pthread_mutex_t** %4, align 8, !tbaa !7
  %7 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* %6) nounwind optsize
  ret void
}

define internal fastcc void @unwait(%struct.pthread_cond_t.395* %c, %struct.pthread_mutex_t* %m) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 0
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, inttoptr (i64 -1 to i8*)
  %4 = bitcast %struct.pthread_cond_t.395* %c to [12 x i32]*
  br i1 %3, label %8, label %.preheader

.preheader:                                       ; preds = %0
  %5 = getelementptr inbounds [12 x i32]* %4, i64 0, i64 5
  %6 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 3
  %7 = bitcast i8** %6 to i32*
  br label %a_cas.exit.i

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds [12 x i32]* %4, i64 0, i64 3
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %15, %8
  %10 = load volatile i32* %9, align 4, !tbaa !6
  %11 = add nsw i32 %10, -1
  br label %12

; <label>:12                                      ; preds = %15, %a_cas.exit.i.i
  %13 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %10, i32 %11, i32* %9) nounwind optsize
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %a_dec.exit, label %15

; <label>:15                                      ; preds = %12
  %16 = load volatile i32* %9, align 4, !tbaa !6
  %17 = icmp eq i32 %16, %10
  br i1 %17, label %12, label %a_cas.exit.i.i

a_dec.exit:                                       ; preds = %12
  %18 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 4
  %19 = bitcast i8** %18 to i32*
  %20 = load i32* %19, align 4, !tbaa !6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %67, label %22

; <label>:22                                      ; preds = %a_dec.exit
  tail call void @__wake(i32* %9, i32 1, i32 0) nounwind optsize
  br label %67

a_cas.exit.i:                                     ; preds = %31, %27, %.preheader
  %23 = load volatile i32* %5, align 4, !tbaa !6
  br label %24

; <label>:24                                      ; preds = %27, %a_cas.exit.i
  %25 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %23, i32 1, i32* %5) nounwind optsize
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %a_swap.exit, label %27

; <label>:27                                      ; preds = %24
  %28 = load volatile i32* %5, align 4, !tbaa !6
  %29 = icmp eq i32 %28, %23
  br i1 %29, label %24, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %24
  %30 = icmp eq i32 %23, 0
  br i1 %30, label %32, label %31

; <label>:31                                      ; preds = %a_swap.exit
  tail call void @__wait(i32* %5, i32* %7, i32 1, i32 1) nounwind optsize
  br label %a_cas.exit.i

; <label>:32                                      ; preds = %a_swap.exit
  %33 = getelementptr inbounds [12 x i32]* %4, i64 0, i64 7
  %34 = load i32* %33, align 4, !tbaa !6
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

; <label>:36                                      ; preds = %32
  %37 = add nsw i32 %34, -1
  store i32 %37, i32* %33, align 4, !tbaa !6
  br label %a_dec.exit2

; <label>:38                                      ; preds = %32
  %39 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 1
  %40 = bitcast i8** %39 to i32*
  br label %a_cas.exit.i.i1

a_cas.exit.i.i1:                                  ; preds = %46, %38
  %41 = load volatile i32* %40, align 4, !tbaa !6
  %42 = add nsw i32 %41, -1
  br label %43

; <label>:43                                      ; preds = %46, %a_cas.exit.i.i1
  %44 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %41, i32 %42, i32* %40) nounwind optsize
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %a_dec.exit2, label %46

; <label>:46                                      ; preds = %43
  %47 = load volatile i32* %40, align 4, !tbaa !6
  %48 = icmp eq i32 %47, %41
  br i1 %48, label %43, label %a_cas.exit.i.i1

a_dec.exit2:                                      ; preds = %43, %36
  store volatile i32 0, i32* %5, align 4, !tbaa !6
  %49 = load i32* %7, align 4, !tbaa !6
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %52, label %51

; <label>:51                                      ; preds = %a_dec.exit2
  tail call void @__wake(i32* %5, i32 1, i32 1) nounwind optsize
  br label %52

; <label>:52                                      ; preds = %51, %a_dec.exit2
  %53 = getelementptr inbounds [12 x i32]* %4, i64 0, i64 3
  br label %a_cas.exit.i.i3

a_cas.exit.i.i3:                                  ; preds = %59, %52
  %54 = load volatile i32* %53, align 4, !tbaa !6
  %55 = add nsw i32 %54, -1
  br label %56

; <label>:56                                      ; preds = %59, %a_cas.exit.i.i3
  %57 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %54, i32 %55, i32* %53) nounwind optsize
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %a_dec.exit4, label %59

; <label>:59                                      ; preds = %56
  %60 = load volatile i32* %53, align 4, !tbaa !6
  %61 = icmp eq i32 %60, %54
  br i1 %61, label %56, label %a_cas.exit.i.i3

a_dec.exit4:                                      ; preds = %56
  %62 = getelementptr inbounds %struct.pthread_cond_t.395* %c, i64 0, i32 0, i32 0, i64 4
  %63 = bitcast i8** %62 to i32*
  %64 = load i32* %63, align 4, !tbaa !6
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %67, label %66

; <label>:66                                      ; preds = %a_dec.exit4
  tail call void @__wake(i32* %53, i32 1, i32 1) nounwind optsize
  br label %67

; <label>:67                                      ; preds = %66, %a_dec.exit4, %22, %a_dec.exit
  ret void
}

define i32 @pthread_cond_wait(%struct.pthread_cond_t.395* %c, %struct.pthread_mutex_t* %m) nounwind uwtable optsize {
  %1 = tail call i32 @pthread_cond_timedwait(%struct.pthread_cond_t.395* %c, %struct.pthread_mutex_t* %m, %struct.timespec* null) nounwind optsize
  ret i32 %1
}

define i32 @pthread_detach(%struct.__pthread.410* %t) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__pthread.410* %t, i64 0, i32 17
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %6, %0
  %2 = load volatile i32* %1, align 4, !tbaa !6
  br label %3

; <label>:3                                       ; preds = %6, %a_cas.exit.i
  %4 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %2, i32 1, i32* %1) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %a_swap.exit, label %6

; <label>:6                                       ; preds = %3
  %7 = load volatile i32* %1, align 4, !tbaa !6
  %8 = icmp eq i32 %7, %2
  br i1 %8, label %3, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %3
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %12, label %10

; <label>:10                                      ; preds = %a_swap.exit
  %11 = tail call i32 @pthread_join(%struct.__pthread.410* %t, i8** null) nounwind optsize
  br label %14

; <label>:12                                      ; preds = %a_swap.exit
  %13 = getelementptr inbounds %struct.__pthread.410* %t, i64 0, i32 16
  store i32 1, i32* %13, align 4, !tbaa !6
  store i32 0, i32* %1, align 4, !tbaa !6
  br label %14

; <label>:14                                      ; preds = %12, %10
  %.0 = phi i32 [ %11, %10 ], [ 0, %12 ]
  ret i32 %.0
}

define i32 @pthread_equal(%struct.__pthread.416* %a, %struct.__pthread.416* %b) nounwind uwtable readnone optsize {
  %1 = icmp eq %struct.__pthread.416* %a, %b
  %2 = zext i1 %1 to i32
  ret i32 %2
}

define i32 @pthread_getconcurrency() nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_join(%struct.__pthread.410* %t, i8** %res) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__pthread.410* %t, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %4 = phi i32 [ %6, %.lr.ph ], [ %2, %0 ]
  %5 = tail call i32 @__timedwait(i32* %1, i32 %4, i32 0, %struct.timespec* null, void (i8*)* @dummy562, i8* null, i32 0) nounwind optsize
  %6 = load i32* %1, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  %8 = icmp eq i8** %res, null
  br i1 %8, label %12, label %9

; <label>:9                                       ; preds = %._crit_edge
  %10 = getelementptr inbounds %struct.__pthread.410* %t, i64 0, i32 15
  %11 = load i8** %10, align 8, !tbaa !7
  store i8* %11, i8** %res, align 8, !tbaa !7
  br label %12

; <label>:12                                      ; preds = %9, %._crit_edge
  %13 = getelementptr inbounds %struct.__pthread.410* %t, i64 0, i32 11
  %14 = load i8** %13, align 8, !tbaa !7
  %15 = icmp eq i8* %14, null
  br i1 %15, label %20, label %16

; <label>:16                                      ; preds = %12
  %17 = getelementptr inbounds %struct.__pthread.410* %t, i64 0, i32 12
  %18 = load i64* %17, align 8, !tbaa !5
  %19 = tail call i32 @munmap(i8* %14, i64 %18) nounwind optsize
  br label %20

; <label>:20                                      ; preds = %16, %12
  ret i32 0
}

define internal void @dummy562(i8* nocapture %p) nounwind uwtable readnone optsize {
  ret void
}

define i32 @pthread_kill(%struct.__pthread.424* %t, i32 %sig) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__pthread.424* %t, i64 0, i32 26
  tail call void @__lock(i32* %1) nounwind optsize
  %2 = getelementptr inbounds %struct.__pthread.424* %t, i64 0, i32 21
  %3 = load volatile i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %15

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.__pthread.424* %t, i64 0, i32 2
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.__pthread.424* %t, i64 0, i32 1
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = sext i32 %10 to i64
  %12 = sext i32 %sig to i64
  %13 = tail call i64 (i64, ...)* @__syscall(i64 268, i64 %8, i64 %11, i64 %12, i32 0, i32 0, i32 0) nounwind optsize
  %14 = sub nsw i64 0, %13
  %phitmp = trunc i64 %14 to i32
  br label %15

; <label>:15                                      ; preds = %5, %0
  %16 = phi i32 [ %phitmp, %5 ], [ 3, %0 ]
  store volatile i32 0, i32* %1, align 4, !tbaa !6
  ret i32 %16
}

define i32 @pthread_mutexattr_destroy(i32* nocapture %a) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_mutexattr_getpshared(i32* nocapture %a, i32* nocapture %pshared) nounwind uwtable optsize {
  %1 = load i32* %a, align 4, !tbaa !6
  %2 = lshr i32 %1, 31
  store i32 %2, i32* %pshared, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_mutexattr_getrobust(i32* nocapture %a, i32* nocapture %robust) nounwind uwtable optsize {
  %1 = load i32* %a, align 4, !tbaa !6
  %2 = lshr i32 %1, 2
  %3 = and i32 %2, 1
  store i32 %3, i32* %robust, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_mutexattr_gettype(i32* nocapture %a, i32* nocapture %type) nounwind uwtable optsize {
  %1 = load i32* %a, align 4, !tbaa !6
  %2 = and i32 %1, 3
  store i32 %2, i32* %type, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_mutexattr_init(i32* %a) nounwind uwtable optsize {
  %1 = bitcast i32* %a to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 4) nounwind optsize
  ret i32 0
}

define i32 @pthread_mutexattr_setpshared(i32* nocapture %a, i32 %pshared) nounwind uwtable optsize {
  %1 = icmp ugt i32 %pshared, 1
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = load i32* %a, align 4, !tbaa !6
  %4 = and i32 %3, 2147483647
  %5 = shl i32 %pshared, 31
  %6 = or i32 %4, %5
  store i32 %6, i32* %a, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_mutexattr_setrobust(i32* nocapture %a, i32 %robust) nounwind uwtable optsize {
  %1 = icmp ugt i32 %robust, 1
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = load i32* %a, align 4, !tbaa !6
  %4 = and i32 %3, -5
  %5 = shl nsw i32 %robust, 2
  %6 = or i32 %4, %5
  store i32 %6, i32* %a, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_mutexattr_settype(i32* nocapture %a, i32 %type) nounwind uwtable optsize {
  %1 = icmp ugt i32 %type, 2
  br i1 %1, label %6, label %2

; <label>:2                                       ; preds = %0
  %3 = load i32* %a, align 4, !tbaa !6
  %4 = and i32 %3, -4
  %5 = or i32 %4, %type
  store i32 %5, i32* %a, align 4, !tbaa !6
  br label %6

; <label>:6                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_mutex_consistent(%struct.pthread_mutex_t.430* nocapture %m) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_mutex_t.430* %m to i32*
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp slt i32 %2, 8
  br i1 %3, label %15, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast %struct.pthread_mutex_t.430* %m to [10 x i32]*
  %6 = getelementptr inbounds [10 x i32]* %5, i64 0, i64 1
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = and i32 %7, 1073741823
  %9 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %10 = getelementptr inbounds %struct.__pthread* %9, i64 0, i32 1
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = icmp eq i32 %8, %11
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %4
  %14 = add nsw i32 %2, -8
  store i32 %14, i32* %1, align 4, !tbaa !6
  br label %15

; <label>:15                                      ; preds = %13, %4, %0
  %.0 = phi i32 [ 0, %13 ], [ 22, %0 ], [ 1, %4 ]
  ret i32 %.0
}

define i32 @pthread_mutex_destroy(%struct.pthread_mutex_t.438* nocapture %mutex) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_mutex_init(%struct.pthread_mutex_t.440* %m, i32* %a) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_mutex_t.440* %m to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 40) nounwind optsize
  %3 = icmp eq i32* %a, null
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* %a, align 4, !tbaa !6
  %6 = and i32 %5, 7
  %7 = bitcast %struct.pthread_mutex_t.440* %m to i32*
  store i32 %6, i32* %7, align 4, !tbaa !6
  br label %8

; <label>:8                                       ; preds = %4, %0
  ret i32 0
}

define i32 @pthread_mutex_lock(%struct.pthread_mutex_t* %m) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_mutex_t* %m to i32*
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %a_cas.exit.thread1

; <label>:4                                       ; preds = %0
  %5 = bitcast %struct.pthread_mutex_t* %m to [10 x i32]*
  %6 = getelementptr inbounds [10 x i32]* %5, i64 0, i64 1
  br label %7

; <label>:7                                       ; preds = %10, %4
  %8 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 16, i32* %6) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %a_cas.exit.thread, label %10

; <label>:10                                      ; preds = %7
  %11 = load volatile i32* %6, align 4, !tbaa !6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %7, label %a_cas.exit.thread1

a_cas.exit.thread1:                               ; preds = %10, %0
  %13 = tail call i32 @pthread_mutex_timedlock(%struct.pthread_mutex_t* %m, %struct.timespec.444* null) nounwind optsize
  br label %a_cas.exit.thread

a_cas.exit.thread:                                ; preds = %a_cas.exit.thread1, %7
  %.0 = phi i32 [ %13, %a_cas.exit.thread1 ], [ 0, %7 ]
  ret i32 %.0
}

define i32 @pthread_mutex_timedlock(%struct.pthread_mutex_t* %m, %struct.timespec.444* %at) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_mutex_t* %m to [10 x i32]*
  %2 = bitcast %struct.pthread_mutex_t* %m to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds [10 x i32]* %1, i64 0, i64 1
  br i1 %4, label %6, label %a_cas.exit.thread7.preheader

; <label>:6                                       ; preds = %9, %0
  %7 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 16, i32* %5) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %a_cas.exit.thread, label %9

; <label>:9                                       ; preds = %6
  %10 = load volatile i32* %5, align 4, !tbaa !6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %6, label %a_cas.exit.thread7.preheader

a_cas.exit.thread7.preheader:                     ; preds = %9, %0
  %12 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 1
  %13 = bitcast i8** %12 to i32*
  br label %a_cas.exit.thread7

a_cas.exit.thread7:                               ; preds = %a_dec.exit, %a_dec.exit, %16, %a_cas.exit.thread7.preheader
  %14 = tail call i32 @pthread_mutex_trylock(%struct.pthread_mutex_t* %m) nounwind optsize
  %15 = icmp eq i32 %14, 16
  br i1 %15, label %16, label %a_cas.exit.thread

; <label>:16                                      ; preds = %a_cas.exit.thread7
  %17 = load i32* %5, align 4, !tbaa !6
  %18 = icmp ne i32 %17, 0
  %19 = and i32 %17, 1073741824
  %20 = icmp eq i32 %19, 0
  %or.cond3 = and i1 %18, %20
  br i1 %or.cond3, label %21, label %a_cas.exit.thread7

; <label>:21                                      ; preds = %16
  %22 = load i32* %2, align 4, !tbaa !6
  %23 = and i32 %22, 3
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %a_cas.exit.i.i

; <label>:25                                      ; preds = %21
  %26 = and i32 %17, 536870911
  %27 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %28 = getelementptr inbounds %struct.__pthread* %27, i64 0, i32 1
  %29 = load i32* %28, align 4, !tbaa !6
  %30 = icmp eq i32 %26, %29
  br i1 %30, label %a_cas.exit.thread, label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %36, %25, %21
  %31 = load volatile i32* %13, align 4, !tbaa !6
  %32 = add nsw i32 %31, 1
  br label %33

; <label>:33                                      ; preds = %36, %a_cas.exit.i.i
  %34 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %31, i32 %32, i32* %13) nounwind optsize
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %a_inc.exit, label %36

; <label>:36                                      ; preds = %33
  %37 = load volatile i32* %13, align 4, !tbaa !6
  %38 = icmp eq i32 %37, %31
  br i1 %38, label %33, label %a_cas.exit.i.i

a_inc.exit:                                       ; preds = %33
  %39 = or i32 %17, -2147483648
  br label %40

; <label>:40                                      ; preds = %43, %a_inc.exit
  %41 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %17, i32 %39, i32* %5) nounwind optsize
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %a_cas.exit5, label %43

; <label>:43                                      ; preds = %40
  %44 = load volatile i32* %5, align 4, !tbaa !6
  %45 = icmp eq i32 %44, %17
  br i1 %45, label %40, label %a_cas.exit5

a_cas.exit5:                                      ; preds = %43, %40
  %46 = tail call i32 bitcast (i32 (i32*, i32, i32, %struct.timespec*, void (i8*)*, i8*, i32)* @__timedwait to i32 (i32*, i32, i32, %struct.timespec.444*, void (i8*)*, i8*, i32)*)(i32* %5, i32 %39, i32 0, %struct.timespec.444* %at, void (i8*)* null, i8* null, i32 0) nounwind optsize
  br label %a_cas.exit.i.i6

a_cas.exit.i.i6:                                  ; preds = %52, %a_cas.exit5
  %47 = load volatile i32* %13, align 4, !tbaa !6
  %48 = add nsw i32 %47, -1
  br label %49

; <label>:49                                      ; preds = %52, %a_cas.exit.i.i6
  %50 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %47, i32 %48, i32* %13) nounwind optsize
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %a_dec.exit, label %52

; <label>:52                                      ; preds = %49
  %53 = load volatile i32* %13, align 4, !tbaa !6
  %54 = icmp eq i32 %53, %47
  br i1 %54, label %49, label %a_cas.exit.i.i6

a_dec.exit:                                       ; preds = %49
  switch i32 %46, label %a_cas.exit.thread [
    i32 4, label %a_cas.exit.thread7
    i32 0, label %a_cas.exit.thread7
  ]

a_cas.exit.thread:                                ; preds = %a_dec.exit, %25, %a_cas.exit.thread7, %6
  %.0 = phi i32 [ %14, %a_cas.exit.thread7 ], [ %46, %a_dec.exit ], [ 35, %25 ], [ 0, %6 ]
  ret i32 %.0
}

define i32 @pthread_mutex_trylock(%struct.pthread_mutex_t* %m) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_mutex_t* %m to [10 x i32]*
  %2 = bitcast %struct.pthread_mutex_t* %m to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %14

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [10 x i32]* %1, i64 0, i64 1
  br label %7

; <label>:7                                       ; preds = %10, %5
  %8 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 16, i32* %6) nounwind optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %a_cas.exit, label %10

; <label>:10                                      ; preds = %7
  %11 = load volatile i32* %6, align 4, !tbaa !6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %7, label %a_cas.exit

a_cas.exit:                                       ; preds = %10, %7
  %.0.i = phi i32 [ 0, %7 ], [ %11, %10 ]
  %13 = and i32 %.0.i, 16
  br label %a_cas.exit3

; <label>:14                                      ; preds = %0
  %15 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %16 = getelementptr inbounds %struct.__pthread* %15, i64 0, i32 1
  %17 = load i32* %16, align 4, !tbaa !6
  %18 = icmp sgt i32 %3, 3
  br i1 %18, label %19, label %._crit_edge

._crit_edge:                                      ; preds = %14
  %.pre = getelementptr inbounds [10 x i32]* %1, i64 0, i64 1
  br label %35

; <label>:19                                      ; preds = %14
  %20 = getelementptr inbounds %struct.__pthread* %15, i64 0, i32 22, i32 1
  %21 = load i64* %20, align 8, !tbaa !5
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %27

; <label>:23                                      ; preds = %19
  %24 = getelementptr inbounds %struct.__pthread* %15, i64 0, i32 22
  %25 = ptrtoint %struct.anon* %24 to i64
  %26 = tail call i64 (i64, ...)* @__syscall(i64 338, i64 %25, i64 24, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %27

; <label>:27                                      ; preds = %23, %19
  %28 = getelementptr inbounds [10 x i32]* %1, i64 0, i64 1
  %29 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 4
  %30 = bitcast i8** %29 to i8*
  %31 = ptrtoint i32* %28 to i64
  %32 = ptrtoint i8** %29 to i64
  %33 = sub i64 %31, %32
  store i64 %33, i64* %20, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.__pthread* %15, i64 0, i32 22, i32 2
  store i8* %30, i8** %34, align 8, !tbaa !7
  br label %35

; <label>:35                                      ; preds = %27, %._crit_edge
  %.pre-phi = phi i32* [ %.pre, %._crit_edge ], [ %28, %27 ]
  %36 = load i32* %.pre-phi, align 4, !tbaa !6
  %37 = and i32 %36, 2147483647
  %38 = icmp eq i32 %37, %17
  br i1 %38, label %39, label %49

; <label>:39                                      ; preds = %35
  %40 = load i32* %2, align 4, !tbaa !6
  %41 = and i32 %40, 3
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %49

; <label>:43                                      ; preds = %39
  %44 = getelementptr inbounds [10 x i32]* %1, i64 0, i64 5
  %45 = load i32* %44, align 4, !tbaa !6
  %46 = icmp ugt i32 %45, 2147483646
  br i1 %46, label %a_cas.exit3, label %47

; <label>:47                                      ; preds = %43
  %48 = add nsw i32 %45, 1
  store i32 %48, i32* %44, align 4, !tbaa !6
  br label %a_cas.exit3

; <label>:49                                      ; preds = %39, %35
  %50 = icmp ne i32 %37, 0
  %51 = and i32 %36, 1073741824
  %52 = icmp eq i32 %51, 0
  %or.cond = and i1 %50, %52
  br i1 %or.cond, label %a_cas.exit3, label %.preheader

.preheader:                                       ; preds = %55, %49
  %53 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %36, i32 %17, i32* %.pre-phi) nounwind optsize
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %a_cas.exit3.thread, label %55

; <label>:55                                      ; preds = %.preheader
  %56 = load volatile i32* %.pre-phi, align 4, !tbaa !6
  %57 = icmp eq i32 %56, %36
  br i1 %57, label %.preheader, label %a_cas.exit3

a_cas.exit3.thread:                               ; preds = %.preheader
  %58 = load i32* %2, align 4, !tbaa !6
  %59 = icmp slt i32 %58, 4
  br i1 %59, label %a_cas.exit3, label %60

; <label>:60                                      ; preds = %a_cas.exit3.thread
  %61 = icmp sgt i32 %58, 7
  br i1 %61, label %62, label %63

; <label>:62                                      ; preds = %60
  store i32 0, i32* %.pre-phi, align 4, !tbaa !6
  br label %a_cas.exit3

; <label>:63                                      ; preds = %60
  %64 = getelementptr inbounds %struct.__pthread* %15, i64 0, i32 22
  %65 = getelementptr inbounds %struct.anon* %64, i64 0, i32 0
  %66 = load i8*** %65, align 8, !tbaa !7
  %67 = bitcast i8** %66 to i8*
  %68 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 4
  store i8* %67, i8** %68, align 8, !tbaa !7
  %69 = bitcast %struct.anon* %64 to i8*
  %70 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 3
  store i8* %69, i8** %70, align 8, !tbaa !7
  %71 = load i8*** %65, align 8, !tbaa !7
  %72 = icmp eq i8** %71, null
  br i1 %72, label %76, label %73

; <label>:73                                      ; preds = %63
  %74 = bitcast i8** %68 to i8*
  %75 = getelementptr inbounds i8** %71, i64 -1
  store i8* %74, i8** %75, align 8, !tbaa !7
  br label %76

; <label>:76                                      ; preds = %73, %63
  store i8** %68, i8*** %65, align 8, !tbaa !7
  %77 = getelementptr inbounds %struct.__pthread* %15, i64 0, i32 22, i32 2
  store i8* null, i8** %77, align 8, !tbaa !7
  br i1 %50, label %78, label %a_cas.exit3

; <label>:78                                      ; preds = %76
  %79 = getelementptr inbounds [10 x i32]* %1, i64 0, i64 5
  store i32 0, i32* %79, align 4, !tbaa !6
  %80 = add nsw i32 %58, 8
  store i32 %80, i32* %2, align 4, !tbaa !6
  br label %a_cas.exit3

a_cas.exit3:                                      ; preds = %78, %76, %62, %a_cas.exit3.thread, %55, %49, %47, %43, %a_cas.exit
  %.0 = phi i32 [ %13, %a_cas.exit ], [ 0, %47 ], [ 131, %62 ], [ 130, %78 ], [ 11, %43 ], [ 16, %49 ], [ 0, %a_cas.exit3.thread ], [ 0, %76 ], [ 16, %55 ]
  ret i32 %.0
}

define i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* %m) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_mutex_t* %m to [10 x i32]*
  %2 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 1
  %3 = bitcast i8** %2 to i32*
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = bitcast %struct.pthread_mutex_t* %m to i32*
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  %.pre = getelementptr inbounds [10 x i32]* %1, i64 0, i64 1
  br i1 %7, label %._crit_edge, label %8

; <label>:8                                       ; preds = %0
  %9 = load i32* %.pre, align 4, !tbaa !6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %55, label %11

; <label>:11                                      ; preds = %8
  %12 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %13 = and i32 %9, 536870911
  %14 = getelementptr inbounds %struct.__pthread* %12, i64 0, i32 1
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %55

; <label>:17                                      ; preds = %11
  %18 = and i32 %6, 3
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %26

; <label>:20                                      ; preds = %17
  %21 = getelementptr inbounds [10 x i32]* %1, i64 0, i64 5
  %22 = load i32* %21, align 4, !tbaa !6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

; <label>:24                                      ; preds = %20
  %25 = add nsw i32 %22, -1
  store i32 %25, i32* %21, align 4, !tbaa !6
  br label %55

; <label>:26                                      ; preds = %20, %17
  %27 = icmp sgt i32 %6, 3
  br i1 %27, label %28, label %._crit_edge

; <label>:28                                      ; preds = %26
  %29 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 4
  %30 = bitcast i8** %29 to i8*
  %31 = getelementptr inbounds %struct.__pthread* %12, i64 0, i32 22, i32 2
  store i8* %30, i8** %31, align 8, !tbaa !7
  %32 = load i8** %29, align 8, !tbaa !7
  %33 = getelementptr inbounds %struct.pthread_mutex_t* %m, i64 0, i32 0, i32 0, i64 3
  %34 = load i8** %33, align 8, !tbaa !7
  %35 = bitcast i8* %34 to i8**
  store i8* %32, i8** %35, align 8, !tbaa !7
  %36 = load i8** %29, align 8, !tbaa !7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %._crit_edge, label %38

; <label>:38                                      ; preds = %28
  %39 = load i8** %33, align 8, !tbaa !7
  %40 = getelementptr inbounds i8* %36, i64 -8
  %41 = bitcast i8* %40 to i8**
  store i8* %39, i8** %41, align 8, !tbaa !7
  br label %._crit_edge

._crit_edge:                                      ; preds = %38, %28, %26, %0
  %self.0 = phi %struct.__pthread* [ %12, %28 ], [ %12, %26 ], [ %12, %38 ], [ undef, %0 ]
  %robust.0 = phi i1 [ true, %28 ], [ false, %26 ], [ true, %38 ], [ false, %0 ]
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %46, %._crit_edge
  %42 = load volatile i32* %.pre, align 4, !tbaa !6
  br label %43

; <label>:43                                      ; preds = %46, %a_cas.exit.i
  %44 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %42, i32 0, i32* %.pre) nounwind optsize
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %a_swap.exit, label %46

; <label>:46                                      ; preds = %43
  %47 = load volatile i32* %.pre, align 4, !tbaa !6
  %48 = icmp eq i32 %47, %42
  br i1 %48, label %43, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %43
  br i1 %robust.0, label %49, label %51

; <label>:49                                      ; preds = %a_swap.exit
  %50 = getelementptr inbounds %struct.__pthread* %self.0, i64 0, i32 22, i32 2
  store i8* null, i8** %50, align 8, !tbaa !7
  br label %51

; <label>:51                                      ; preds = %49, %a_swap.exit
  %52 = icmp ne i32 %4, 0
  %53 = icmp slt i32 %42, 0
  %or.cond = or i1 %52, %53
  br i1 %or.cond, label %54, label %55

; <label>:54                                      ; preds = %51
  tail call void @__wake(i32* %.pre, i32 1, i32 0) nounwind optsize
  br label %55

; <label>:55                                      ; preds = %54, %51, %24, %11, %8
  %.0 = phi i32 [ 0, %24 ], [ 1, %8 ], [ 1, %11 ], [ 0, %51 ], [ 0, %54 ]
  ret i32 %.0
}

define i32 @pthread_once(i32* %control, void ()* nocapture %init) nounwind uwtable optsize {
  %__cb = alloca %struct.__ptcb, align 8
  %1 = load i32* %control, align 4, !tbaa !6
  %2 = icmp eq i32 %1, 2
  br i1 %2, label %17, label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %15, %a_swap.exit, %7, %0
  %3 = load volatile i32* %control, align 4, !tbaa !6
  br label %4

; <label>:4                                       ; preds = %7, %a_cas.exit.i
  %5 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %3, i32 1, i32* %control) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %a_swap.exit, label %7

; <label>:7                                       ; preds = %4
  %8 = load volatile i32* %control, align 4, !tbaa !6
  %9 = icmp eq i32 %8, %3
  br i1 %9, label %4, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %4
  switch i32 %3, label %a_cas.exit.i [
    i32 0, label %10
    i32 1, label %15
    i32 2, label %16
  ]

; <label>:10                                      ; preds = %a_swap.exit
  %11 = bitcast i32* %control to i8*
  call void @_pthread_cleanup_push(%struct.__ptcb* %__cb, void (i8*)* @undo, i8* %11) nounwind optsize
  call void %init() nounwind optsize
  call void @_pthread_cleanup_pop(%struct.__ptcb* %__cb, i32 0) nounwind optsize
  store volatile i32 2, i32* %control, align 4, !tbaa !6
  %12 = load i32* @pthread_once.waiters, align 4, !tbaa !6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

; <label>:14                                      ; preds = %10
  call void @__wake(i32* %control, i32 -1, i32 0) nounwind optsize
  br label %17

; <label>:15                                      ; preds = %a_swap.exit
  call void @__wait(i32* %control, i32* @pthread_once.waiters, i32 1, i32 0) nounwind optsize
  br label %a_cas.exit.i

; <label>:16                                      ; preds = %a_swap.exit
  store volatile i32 2, i32* %control, align 4, !tbaa !6
  br label %17

; <label>:17                                      ; preds = %16, %14, %10, %0
  ret i32 0
}

define internal void @undo(i8* %control) nounwind uwtable optsize {
  %1 = bitcast i8* %control to i32*
  store volatile i32 0, i32* %1, align 4, !tbaa !6
  tail call void @__wake(i32* %1, i32 1, i32 0) nounwind optsize
  ret void
}

define i32 @pthread_rwlockattr_destroy(%struct.pthread_rwlockattr_t* nocapture %a) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_rwlockattr_getpshared(%struct.pthread_rwlockattr_t.471* nocapture %a, i32* nocapture %pshared) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.pthread_rwlockattr_t.471* %a, i64 0, i32 0, i64 0
  %2 = load i32* %1, align 4, !tbaa !6
  store i32 %2, i32* %pshared, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_rwlockattr_init(%struct.pthread_rwlockattr_t.472* %a) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlockattr_t.472* %a to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 8) nounwind optsize
  ret i32 0
}

define i32 @pthread_rwlockattr_setpshared(%struct.pthread_rwlockattr_t.473* nocapture %a, i32 %pshared) nounwind uwtable optsize {
  %1 = icmp ugt i32 %pshared, 1
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.pthread_rwlockattr_t.473* %a, i64 0, i32 0, i64 0
  store i32 %pshared, i32* %3, align 4, !tbaa !6
  br label %4

; <label>:4                                       ; preds = %2, %0
  %.0 = phi i32 [ 0, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_rwlock_destroy(%struct.pthread_rwlock_t* nocapture %rw) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_rwlock_init(%struct.pthread_rwlock_t.475* %rw, %struct.pthread_rwlockattr_t.477* nocapture %a) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlock_t.475* %rw to i8*
  %2 = tail call i8* @memset(i8* %1, i32 0, i64 56) nounwind optsize
  ret i32 0
}

define i32 @pthread_rwlock_rdlock(%struct.pthread_rwlock_t.478* %rw) nounwind uwtable optsize {
  %1 = tail call i32 @pthread_rwlock_timedrdlock(%struct.pthread_rwlock_t.478* %rw, %struct.timespec.480* null) nounwind optsize
  ret i32 %1
}

define i32 @pthread_rwlock_timedrdlock(%struct.pthread_rwlock_t.478* %rw, %struct.timespec.480* %at) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlock_t.478* %rw to i32*
  %2 = bitcast %struct.pthread_rwlock_t.478* %rw to [14 x i32]*
  %3 = getelementptr inbounds [14 x i32]* %2, i64 0, i64 1
  br label %.backedge

.backedge:                                        ; preds = %a_dec.exit, %a_dec.exit, %6, %0
  %4 = tail call i32 @pthread_rwlock_tryrdlock(%struct.pthread_rwlock_t.478* %rw) nounwind optsize
  %5 = icmp eq i32 %4, 16
  br i1 %5, label %6, label %34

; <label>:6                                       ; preds = %.backedge
  %7 = load i32* %1, align 4, !tbaa !6
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %7, 2147483647
  %10 = icmp eq i32 %9, 2147483647
  %or.cond3 = and i1 %8, %10
  br i1 %or.cond3, label %a_cas.exit.i.i, label %.backedge

a_cas.exit.i.i:                                   ; preds = %16, %6
  %11 = load volatile i32* %3, align 4, !tbaa !6
  %12 = add nsw i32 %11, 1
  br label %13

; <label>:13                                      ; preds = %16, %a_cas.exit.i.i
  %14 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %11, i32 %12, i32* %3) nounwind optsize
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %a_inc.exit.loopexit, label %16

; <label>:16                                      ; preds = %13
  %17 = load volatile i32* %3, align 4, !tbaa !6
  %18 = icmp eq i32 %17, %11
  br i1 %18, label %13, label %a_cas.exit.i.i

a_inc.exit.loopexit:                              ; preds = %13
  %19 = or i32 %7, -2147483648
  br label %a_inc.exit

a_inc.exit:                                       ; preds = %22, %a_inc.exit.loopexit
  %20 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %7, i32 %19, i32* %1) nounwind optsize
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %a_cas.exit, label %22

; <label>:22                                      ; preds = %a_inc.exit
  %23 = load volatile i32* %1, align 4, !tbaa !6
  %24 = icmp eq i32 %23, %7
  br i1 %24, label %a_inc.exit, label %a_cas.exit

a_cas.exit:                                       ; preds = %22, %a_inc.exit
  %25 = tail call i32 bitcast (i32 (i32*, i32, i32, %struct.timespec*, void (i8*)*, i8*, i32)* @__timedwait to i32 (i32*, i32, i32, %struct.timespec.480*, void (i8*)*, i8*, i32)*)(i32* %1, i32 %19, i32 0, %struct.timespec.480* %at, void (i8*)* null, i8* null, i32 0) nounwind optsize
  br label %a_cas.exit.i.i4

a_cas.exit.i.i4:                                  ; preds = %31, %a_cas.exit
  %26 = load volatile i32* %3, align 4, !tbaa !6
  %27 = add nsw i32 %26, -1
  br label %28

; <label>:28                                      ; preds = %31, %a_cas.exit.i.i4
  %29 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %26, i32 %27, i32* %3) nounwind optsize
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %a_dec.exit, label %31

; <label>:31                                      ; preds = %28
  %32 = load volatile i32* %3, align 4, !tbaa !6
  %33 = icmp eq i32 %32, %26
  br i1 %33, label %28, label %a_cas.exit.i.i4

a_dec.exit:                                       ; preds = %28
  switch i32 %25, label %34 [
    i32 4, label %.backedge
    i32 0, label %.backedge
  ]

; <label>:34                                      ; preds = %a_dec.exit, %.backedge
  %.0 = phi i32 [ %25, %a_dec.exit ], [ %4, %.backedge ]
  ret i32 %.0
}

define i32 @pthread_rwlock_timedwrlock(%struct.pthread_rwlock_t.484* %rw, %struct.timespec* %at) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlock_t.484* %rw to i32*
  %2 = bitcast %struct.pthread_rwlock_t.484* %rw to [14 x i32]*
  %3 = getelementptr inbounds [14 x i32]* %2, i64 0, i64 1
  br label %.backedge

.backedge:                                        ; preds = %a_dec.exit, %a_dec.exit, %6, %0
  %4 = tail call i32 @pthread_rwlock_trywrlock(%struct.pthread_rwlock_t.484* %rw) nounwind optsize
  %5 = icmp eq i32 %4, 16
  br i1 %5, label %6, label %32

; <label>:6                                       ; preds = %.backedge
  %7 = load i32* %1, align 4, !tbaa !6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %.backedge, label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %14, %6
  %9 = load volatile i32* %3, align 4, !tbaa !6
  %10 = add nsw i32 %9, 1
  br label %11

; <label>:11                                      ; preds = %14, %a_cas.exit.i.i
  %12 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %9, i32 %10, i32* %3) nounwind optsize
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %a_inc.exit.loopexit, label %14

; <label>:14                                      ; preds = %11
  %15 = load volatile i32* %3, align 4, !tbaa !6
  %16 = icmp eq i32 %15, %9
  br i1 %16, label %11, label %a_cas.exit.i.i

a_inc.exit.loopexit:                              ; preds = %11
  %17 = or i32 %7, -2147483648
  br label %a_inc.exit

a_inc.exit:                                       ; preds = %20, %a_inc.exit.loopexit
  %18 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %7, i32 %17, i32* %1) nounwind optsize
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %a_cas.exit, label %20

; <label>:20                                      ; preds = %a_inc.exit
  %21 = load volatile i32* %1, align 4, !tbaa !6
  %22 = icmp eq i32 %21, %7
  br i1 %22, label %a_inc.exit, label %a_cas.exit

a_cas.exit:                                       ; preds = %20, %a_inc.exit
  %23 = tail call i32 @__timedwait(i32* %1, i32 %17, i32 0, %struct.timespec* %at, void (i8*)* null, i8* null, i32 0) nounwind optsize
  br label %a_cas.exit.i.i2

a_cas.exit.i.i2:                                  ; preds = %29, %a_cas.exit
  %24 = load volatile i32* %3, align 4, !tbaa !6
  %25 = add nsw i32 %24, -1
  br label %26

; <label>:26                                      ; preds = %29, %a_cas.exit.i.i2
  %27 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %24, i32 %25, i32* %3) nounwind optsize
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %a_dec.exit, label %29

; <label>:29                                      ; preds = %26
  %30 = load volatile i32* %3, align 4, !tbaa !6
  %31 = icmp eq i32 %30, %24
  br i1 %31, label %26, label %a_cas.exit.i.i2

a_dec.exit:                                       ; preds = %26
  switch i32 %23, label %32 [
    i32 4, label %.backedge
    i32 0, label %.backedge
  ]

; <label>:32                                      ; preds = %a_dec.exit, %.backedge
  %.0 = phi i32 [ %23, %a_dec.exit ], [ %4, %.backedge ]
  ret i32 %.0
}

define i32 @pthread_rwlock_tryrdlock(%struct.pthread_rwlock_t.478* %rw) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlock_t.478* %rw to i32*
  %.pre = load i32* %1, align 4, !tbaa !6
  br label %a_cas.exit

a_cas.exit:                                       ; preds = %9, %0
  %2 = phi i32 [ %.pre, %0 ], [ %10, %9 ]
  %3 = and i32 %2, 2147483647
  switch i32 %3, label %4 [
    i32 2147483647, label %a_cas.exit.thread.loopexit1
    i32 2147483646, label %a_cas.exit.thread
  ]

; <label>:4                                       ; preds = %a_cas.exit
  %5 = add nsw i32 %2, 1
  br label %6

; <label>:6                                       ; preds = %9, %4
  %7 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %2, i32 %5, i32* %1) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %a_cas.exit.thread, label %9

; <label>:9                                       ; preds = %6
  %10 = load volatile i32* %1, align 4, !tbaa !6
  %11 = icmp eq i32 %10, %2
  br i1 %11, label %6, label %a_cas.exit

a_cas.exit.thread.loopexit1:                      ; preds = %a_cas.exit
  br label %a_cas.exit.thread

a_cas.exit.thread:                                ; preds = %a_cas.exit.thread.loopexit1, %6, %a_cas.exit
  %.0 = phi i32 [ 16, %a_cas.exit.thread.loopexit1 ], [ 11, %a_cas.exit ], [ 0, %6 ]
  ret i32 %.0
}

define i32 @pthread_rwlock_trywrlock(%struct.pthread_rwlock_t.484* %rw) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlock_t.484* %rw to i32*
  br label %2

; <label>:2                                       ; preds = %5, %0
  %3 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 2147483647, i32* %1) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %a_cas.exit, label %5

; <label>:5                                       ; preds = %2
  %6 = load volatile i32* %1, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %2, label %a_cas.exit

a_cas.exit:                                       ; preds = %5, %2
  %.0.i = phi i32 [ 0, %2 ], [ %6, %5 ]
  %8 = icmp eq i32 %.0.i, 0
  %. = select i1 %8, i32 0, i32 16
  ret i32 %.
}

define i32 @pthread_rwlock_unlock(%struct.pthread_rwlock_t.491* %rw) nounwind uwtable optsize {
  %1 = bitcast %struct.pthread_rwlock_t.491* %rw to [14 x i32]*
  %2 = bitcast %struct.pthread_rwlock_t.491* %rw to i32*
  %3 = getelementptr inbounds [14 x i32]* %1, i64 0, i64 1
  %.pre = load i32* %2, align 4, !tbaa !6
  br label %a_cas.exit

a_cas.exit:                                       ; preds = %14, %0
  %4 = phi i32 [ %.pre, %0 ], [ %15, %14 ]
  %5 = and i32 %4, 2147483647
  %6 = load i32* %3, align 4, !tbaa !6
  switch i32 %5, label %7 [
    i32 2147483647, label %9
    i32 1, label %9
  ]

; <label>:7                                       ; preds = %a_cas.exit
  %8 = add nsw i32 %4, -1
  br label %9

; <label>:9                                       ; preds = %7, %a_cas.exit, %a_cas.exit
  %10 = phi i32 [ %8, %7 ], [ 0, %a_cas.exit ], [ 0, %a_cas.exit ]
  br label %11

; <label>:11                                      ; preds = %14, %9
  %12 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %4, i32 %10, i32* %2) nounwind optsize
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %a_cas.exit.thread, label %14

; <label>:14                                      ; preds = %11
  %15 = load volatile i32* %2, align 4, !tbaa !6
  %16 = icmp eq i32 %15, %4
  br i1 %16, label %11, label %a_cas.exit

a_cas.exit.thread:                                ; preds = %11
  %17 = icmp eq i32 %10, 0
  br i1 %17, label %18, label %22

; <label>:18                                      ; preds = %a_cas.exit.thread
  %19 = icmp ne i32 %6, 0
  %20 = icmp slt i32 %4, 0
  %or.cond = or i1 %19, %20
  br i1 %or.cond, label %21, label %22

; <label>:21                                      ; preds = %18
  tail call void @__wake(i32* %2, i32 %5, i32 0) nounwind optsize
  br label %22

; <label>:22                                      ; preds = %21, %18, %a_cas.exit.thread
  ret i32 0
}

define i32 @pthread_rwlock_wrlock(%struct.pthread_rwlock_t.484* %rw) nounwind uwtable optsize {
  %1 = tail call i32 @pthread_rwlock_timedwrlock(%struct.pthread_rwlock_t.484* %rw, %struct.timespec* null) nounwind optsize
  ret i32 %1
}

define i32 @pthread_setcanceltype(i32 %new, i32* %old) nounwind uwtable optsize {
  %1 = icmp ugt i32 %new, 1
  br i1 %1, label %9, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %4 = icmp eq i32* %old, null
  %.pre = getelementptr inbounds %struct.__pthread* %3, i64 0, i32 10
  br i1 %4, label %._crit_edge, label %5

; <label>:5                                       ; preds = %2
  %6 = load volatile i32* %.pre, align 4, !tbaa !6
  store i32 %6, i32* %old, align 4, !tbaa !6
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %2
  store volatile i32 %new, i32* %.pre, align 4, !tbaa !6
  %7 = icmp eq i32 %new, 0
  br i1 %7, label %9, label %8

; <label>:8                                       ; preds = %._crit_edge
  tail call void @pthread_testcancel() nounwind optsize
  br label %9

; <label>:9                                       ; preds = %8, %._crit_edge, %0
  %.0 = phi i32 [ 22, %0 ], [ 0, %._crit_edge ], [ 0, %8 ]
  ret i32 %.0
}

define i32 @pthread_setconcurrency(i32 %val) nounwind uwtable readnone optsize {
  %1 = icmp slt i32 %val, 0
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = icmp sgt i32 %val, 0
  %. = select i1 %3, i32 11, i32 0
  br label %4

; <label>:4                                       ; preds = %2, %0
  %.0 = phi i32 [ 22, %0 ], [ %., %2 ]
  ret i32 %.0
}

define i32 @pthread_sigmask(i32 %how, %struct.sigset_t.502* %set, %struct.sigset_t.502* %old) nounwind uwtable optsize {
  %1 = icmp ugt i32 %how, 2
  br i1 %1, label %9, label %2

; <label>:2                                       ; preds = %0
  %3 = sext i32 %how to i64
  %4 = ptrtoint %struct.sigset_t.502* %set to i64
  %5 = ptrtoint %struct.sigset_t.502* %old to i64
  %6 = tail call i64 (i64, ...)* @__syscall(i64 175, i64 %3, i64 %4, i64 %5, i64 8, i32 0, i32 0) nounwind optsize
  %7 = sub nsw i64 0, %6
  %8 = trunc i64 %7 to i32
  br label %9

; <label>:9                                       ; preds = %2, %0
  %.0 = phi i32 [ %8, %2 ], [ 22, %0 ]
  ret i32 %.0
}

define i32 @pthread_spin_destroy(i32* nocapture %s) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @pthread_spin_init(i32* nocapture %s, i32 %shared) nounwind uwtable optsize {
  store i32 0, i32* %s, align 4, !tbaa !6
  ret i32 0
}

define i32 @pthread_spin_lock(i32* %s) nounwind uwtable optsize {
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %a_swap.exit, %5, %0
  %1 = load volatile i32* %s, align 4, !tbaa !6
  br label %2

; <label>:2                                       ; preds = %5, %a_cas.exit.i
  %3 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %1, i32 1, i32* %s) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %a_swap.exit, label %5

; <label>:5                                       ; preds = %2
  %6 = load volatile i32* %s, align 4, !tbaa !6
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %2, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %2
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %9, label %a_cas.exit.i

; <label>:9                                       ; preds = %a_swap.exit
  ret i32 0
}

define i32 @pthread_spin_trylock(i32* %s) nounwind uwtable optsize {
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %5, %0
  %1 = load volatile i32* %s, align 4, !tbaa !6
  br label %2

; <label>:2                                       ; preds = %5, %a_cas.exit.i
  %3 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %1, i32 1, i32* %s) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %a_swap.exit, label %5

; <label>:5                                       ; preds = %2
  %6 = load volatile i32* %s, align 4, !tbaa !6
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %2, label %a_cas.exit.i

a_swap.exit:                                      ; preds = %2
  %8 = sub nsw i32 0, %1
  %9 = and i32 %8, 16
  ret i32 %9
}

define i32 @pthread_spin_unlock(i32* nocapture %s) nounwind uwtable optsize {
  store volatile i32 0, i32* %s, align 4, !tbaa !6
  ret i32 0
}

define void @pthread_testcancel() nounwind uwtable optsize {
  tail call void bitcast (void (...)* @__testcancel to void ()*)() nounwind optsize
  ret void
}

define i64 @ptrace(i32 %req, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.503], align 16
  %result = alloca i64, align 8
  %1 = bitcast [1 x %struct.__va_list_tag.503]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %10, label %.thread

.thread:                                          ; preds = %0
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 2
  %6 = load i8** %5, align 8
  %7 = getelementptr i8* %6, i64 8
  store i8* %7, i8** %5, align 8
  %8 = bitcast i8* %6 to i32*
  %9 = load i32* %8, align 4
  br label %25

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 3
  %12 = load i8** %11, align 16
  %13 = sext i32 %3 to i64
  %14 = getelementptr i8* %12, i64 %13
  %15 = add i32 %3, 8
  store i32 %15, i32* %2, align 16
  %16 = bitcast i8* %14 to i32*
  %17 = load i32* %16, align 4
  %18 = icmp ult i32 %15, 41
  br i1 %18, label %19, label %25

; <label>:19                                      ; preds = %10
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 3
  %21 = load i8** %20, align 16
  %22 = sext i32 %15 to i64
  %23 = getelementptr i8* %21, i64 %22
  %24 = add i32 %3, 16
  store i32 %24, i32* %2, align 16
  br label %30

; <label>:25                                      ; preds = %10, %.thread
  %26 = phi i32 [ %9, %.thread ], [ %17, %10 ]
  %.pr46 = phi i32 [ %3, %.thread ], [ %15, %10 ]
  %27 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 2
  %28 = load i8** %27, align 8
  %29 = getelementptr i8* %28, i64 8
  store i8* %29, i8** %27, align 8
  br label %30

; <label>:30                                      ; preds = %25, %19
  %31 = phi i32 [ %26, %25 ], [ %17, %19 ]
  %.pr5 = phi i32 [ %.pr46, %25 ], [ %24, %19 ]
  %.in1 = phi i8* [ %28, %25 ], [ %23, %19 ]
  %32 = bitcast i8* %.in1 to i8**
  %33 = load i8** %32, align 8
  %34 = icmp ult i32 %.pr5, 41
  br i1 %34, label %35, label %41

; <label>:35                                      ; preds = %30
  %36 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 3
  %37 = load i8** %36, align 16
  %38 = sext i32 %.pr5 to i64
  %39 = getelementptr i8* %37, i64 %38
  %40 = add i32 %.pr5, 8
  store i32 %40, i32* %2, align 16
  br label %45

; <label>:41                                      ; preds = %30
  %42 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 2
  %43 = load i8** %42, align 8
  %44 = getelementptr i8* %43, i64 8
  store i8* %44, i8** %42, align 8
  br label %45

; <label>:45                                      ; preds = %41, %35
  %46 = phi i32 [ %.pr5, %41 ], [ %40, %35 ]
  %.in2 = phi i8* [ %43, %41 ], [ %39, %35 ]
  %47 = bitcast i8* %.in2 to i8**
  %48 = load i8** %47, align 8
  %49 = icmp ult i32 %46, 41
  br i1 %49, label %50, label %56

; <label>:50                                      ; preds = %45
  %51 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 3
  %52 = load i8** %51, align 16
  %53 = sext i32 %46 to i64
  %54 = getelementptr i8* %52, i64 %53
  %55 = add i32 %46, 8
  store i32 %55, i32* %2, align 16
  br label %60

; <label>:56                                      ; preds = %45
  %57 = getelementptr inbounds [1 x %struct.__va_list_tag.503]* %ap, i64 0, i64 0, i32 2
  %58 = load i8** %57, align 8
  %59 = getelementptr i8* %58, i64 8
  store i8* %59, i8** %57, align 8
  br label %60

; <label>:60                                      ; preds = %56, %50
  %.in3 = phi i8* [ %54, %50 ], [ %58, %56 ]
  %61 = bitcast i8* %.in3 to i8**
  %62 = load i8** %61, align 8
  call void @llvm.va_end(i8* %1)
  %63 = add i32 %req, -1
  %64 = icmp ult i32 %63, 3
  br i1 %64, label %65, label %67

; <label>:65                                      ; preds = %60
  %66 = bitcast i64* %result to i8*
  br label %67

; <label>:67                                      ; preds = %65, %60
  %data.0 = phi i8* [ %66, %65 ], [ %48, %60 ]
  %68 = sext i32 %req to i64
  %69 = sext i32 %31 to i64
  %70 = ptrtoint i8* %33 to i64
  %71 = ptrtoint i8* %data.0 to i64
  %72 = ptrtoint i8* %62 to i64
  %73 = call i64 (i64, ...)* @__syscall(i64 26, i64 %68, i64 %69, i64 %70, i64 %71, i64 %72, i32 0) nounwind optsize
  %74 = call i64 @__syscall_ret(i64 %73) nounwind optsize
  %75 = icmp slt i64 %74, 0
  %76 = icmp ugt i32 %63, 2
  %or.cond = or i1 %75, %76
  %77 = load i64* %result, align 8, !tbaa !5
  %.0 = select i1 %or.cond, i64 %74, i64 %77
  ret i64 %.0
}

define i8* @ptsname(i32 %fd) nounwind uwtable optsize {
  %1 = tail call i32 @__ptsname_r(i32 %fd, i8* getelementptr inbounds ([22 x i8]* @ptsname.buf, i64 0, i64 0), i64 22) nounwind optsize
  %2 = icmp slt i32 %1, 0
  %3 = select i1 %2, i8* null, i8* getelementptr inbounds ([22 x i8]* @ptsname.buf, i64 0, i64 0)
  ret i8* %3
}

define i32 @posix_openpt(i32 %flags) nounwind uwtable optsize {
  %1 = tail call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([10 x i8]* @.str579, i64 0, i64 0), i32 %flags) nounwind optsize
  ret i32 %1
}

define i32 @grantpt(i32 %fd) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @unlockpt(i32 %fd) nounwind uwtable optsize {
  %unlock = alloca i32, align 4
  store i32 0, i32* %unlock, align 4, !tbaa !6
  %1 = call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 1074025521, i32* %unlock) nounwind optsize
  ret i32 %1
}

define i32 @__ptsname_r(i32 %fd, i8* %buf, i64 %len) nounwind uwtable optsize {
  %pty = alloca i32, align 4
  %1 = icmp eq i8* %buf, null
  %.0 = select i1 %1, i64 0, i64 %len
  %2 = call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 -2147199952, i32* %pty) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %9, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* %pty, align 4, !tbaa !6
  %6 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %buf, i64 %.0, i8* getelementptr inbounds ([12 x i8]* @.str1580, i64 0, i64 0), i32 %5) nounwind optsize
  %7 = sext i32 %6 to i64
  %8 = icmp uge i64 %7, %.0
  br label %9

; <label>:9                                       ; preds = %4, %0
  %10 = phi i1 [ true, %0 ], [ %8, %4 ]
  %11 = sext i1 %10 to i32
  ret i32 %11
}

define i32 @putchar(i32 %c) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.85** bitcast (%struct.__FILE_s.642** @stdout to %struct.__FILE_s.85**), align 8, !tbaa !7
  %2 = tail call i32 @fputc(i32 %c, %struct.__FILE_s.85* %1) nounwind optsize
  ret i32 %2
}

define i32 @putchar_unlocked(i32 %c) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.85** bitcast (%struct.__FILE_s.642** @stdout to %struct.__FILE_s.85**), align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__FILE_s.85* %1, i64 0, i32 20
  %3 = load i8* %2, align 1, !tbaa !0
  %4 = sext i8 %3 to i32
  %5 = icmp eq i32 %4, %c
  br i1 %5, label %16, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.__FILE_s.85* %1, i64 0, i32 5
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.__FILE_s.85* %1, i64 0, i32 4
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = icmp ult i8* %8, %10
  br i1 %11, label %12, label %16

; <label>:12                                      ; preds = %6
  %13 = trunc i32 %c to i8
  %14 = getelementptr inbounds i8* %8, i64 1
  store i8* %14, i8** %7, align 8, !tbaa !7
  store i8 %13, i8* %8, align 1, !tbaa !0
  %15 = and i32 %c, 255
  br label %18

; <label>:16                                      ; preds = %6, %0
  %17 = tail call i32 @__overflow(%struct.__FILE_s.85* %1, i32 %c) nounwind optsize
  br label %18

; <label>:18                                      ; preds = %16, %12
  %19 = phi i32 [ %15, %12 ], [ %17, %16 ]
  ret i32 %19
}

define i32 @putc_unlocked(i32 %c, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 20
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = sext i8 %2 to i32
  %4 = icmp eq i32 %3, %c
  br i1 %4, label %15, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %7 = load i8** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  %9 = load i8** %8, align 8, !tbaa !7
  %10 = icmp ult i8* %7, %9
  br i1 %10, label %11, label %15

; <label>:11                                      ; preds = %5
  %12 = trunc i32 %c to i8
  %13 = getelementptr inbounds i8* %7, i64 1
  store i8* %13, i8** %6, align 8, !tbaa !7
  store i8 %12, i8* %7, align 1, !tbaa !0
  %14 = and i32 %c, 255
  br label %17

; <label>:15                                      ; preds = %5, %0
  %16 = tail call i32 @__overflow(%struct.__FILE_s.85* %f, i32 %c) nounwind optsize
  br label %17

; <label>:17                                      ; preds = %15, %11
  %18 = phi i32 [ %14, %11 ], [ %16, %15 ]
  ret i32 %18
}

define i32 @__putenv(i8* %s, i32 %a) nounwind uwtable optsize {
  %1 = tail call i8* @strchr(i8* %s, i32 61) nounwind optsize
  %2 = ptrtoint i8* %1 to i64
  %3 = ptrtoint i8* %s to i64
  %4 = sub i64 1, %3
  %5 = add i64 %4, %2
  %6 = icmp eq i8* %1, null
  %7 = icmp eq i8* %1, %s
  %or.cond3 = or i1 %6, %7
  br i1 %or.cond3, label %82, label %.preheader4

.preheader4:                                      ; preds = %15, %0
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %15 ], [ 0, %0 ]
  %i.0 = phi i32 [ %16, %15 ], [ 0, %0 ]
  %8 = load i8*** @__environ, align 8, !tbaa !7
  %9 = getelementptr inbounds i8** %8, i64 %indvars.iv7
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = icmp eq i8* %10, null
  br i1 %11, label %.critedge, label %12

; <label>:12                                      ; preds = %.preheader4
  %13 = tail call i32 @memcmp(i8* %s, i8* %10, i64 %5) nounwind optsize
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %.critedge, label %15

; <label>:15                                      ; preds = %12
  %indvars.iv.next8 = add i64 %indvars.iv7, 1
  %16 = add nsw i32 %i.0, 1
  br label %.preheader4

.critedge:                                        ; preds = %12, %.preheader4
  %17 = icmp ne i32 %a, 0
  br i1 %17, label %18, label %.critedge._crit_edge

; <label>:18                                      ; preds = %.critedge
  %19 = load i8*** @__env_map, align 8, !tbaa !7
  %20 = icmp eq i8** %19, null
  br i1 %20, label %23, label %.preheader

.preheader:                                       ; preds = %18
  %21 = load i8*** @__environ, align 8, !tbaa !7
  %22 = getelementptr inbounds i8** %21, i64 %indvars.iv7
  br label %28

; <label>:23                                      ; preds = %18
  %24 = tail call i8* @calloc(i64 2, i64 8) nounwind optsize
  %25 = bitcast i8* %24 to i8**
  store i8** %25, i8*** @__env_map, align 8, !tbaa !7
  %26 = icmp eq i8* %24, null
  br i1 %26, label %.critedge._crit_edge, label %27

; <label>:27                                      ; preds = %23
  store i8* %s, i8** %25, align 8, !tbaa !7
  br label %.critedge._crit_edge

; <label>:28                                      ; preds = %35, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %35 ]
  %j.0 = phi i32 [ 0, %.preheader ], [ %36, %35 ]
  %29 = getelementptr inbounds i8** %19, i64 %indvars.iv
  %30 = load i8** %29, align 8, !tbaa !7
  %31 = icmp eq i8* %30, null
  br i1 %31, label %37, label %32

; <label>:32                                      ; preds = %28
  %33 = load i8** %22, align 8, !tbaa !7
  %34 = icmp eq i8* %30, %33
  br i1 %34, label %.critedge1, label %35

; <label>:35                                      ; preds = %32
  %indvars.iv.next = add i64 %indvars.iv, 1
  %36 = add nsw i32 %j.0, 1
  br label %28

; <label>:37                                      ; preds = %28
  %38 = bitcast i8** %19 to i8*
  %39 = add nsw i32 %j.0, 2
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = tail call i8* @realloc(i8* %38, i64 %41) nounwind optsize
  %43 = bitcast i8* %42 to i8**
  %44 = icmp eq i8* %42, null
  br i1 %44, label %.critedge._crit_edge, label %45

; <label>:45                                      ; preds = %37
  store i8** %43, i8*** @__env_map, align 8, !tbaa !7
  %46 = getelementptr inbounds i8** %43, i64 %indvars.iv
  store i8* %s, i8** %46, align 8, !tbaa !7
  %47 = add nsw i32 %j.0, 1
  %48 = sext i32 %47 to i64
  %49 = load i8*** @__env_map, align 8, !tbaa !7
  %50 = getelementptr inbounds i8** %49, i64 %48
  store i8* null, i8** %50, align 8, !tbaa !7
  br label %.critedge._crit_edge

.critedge1:                                       ; preds = %32
  tail call void @free(i8* %30) optsize
  br label %.critedge._crit_edge

.critedge._crit_edge:                             ; preds = %.critedge1, %45, %37, %27, %23, %.critedge
  %j.1 = phi i32 [ %j.0, %.critedge1 ], [ %j.0, %45 ], [ 0, %27 ], [ 0, %.critedge ], [ 0, %23 ], [ %j.0, %37 ]
  %51 = load i8*** @__environ, align 8, !tbaa !7
  %52 = getelementptr inbounds i8** %51, i64 %indvars.iv7
  %53 = load i8** %52, align 8, !tbaa !7
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %79

; <label>:55                                      ; preds = %.critedge._crit_edge
  %56 = add nsw i32 %i.0, 2
  %57 = sext i32 %56 to i64
  %58 = shl nsw i64 %57, 3
  %59 = tail call i8* @malloc(i64 %58) optsize
  %60 = bitcast i8* %59 to i8**
  %61 = icmp eq i8* %59, null
  br i1 %61, label %62, label %68

; <label>:62                                      ; preds = %55
  %63 = load i8*** @__env_map, align 8, !tbaa !7
  %64 = icmp ne i8** %63, null
  %or.cond = and i1 %17, %64
  br i1 %or.cond, label %65, label %82

; <label>:65                                      ; preds = %62
  %66 = sext i32 %j.1 to i64
  %67 = getelementptr inbounds i8** %63, i64 %66
  store i8* null, i8** %67, align 8, !tbaa !7
  br label %82

; <label>:68                                      ; preds = %55
  %69 = bitcast i8** %51 to i8*
  %70 = shl nsw i64 %indvars.iv7, 3
  %71 = tail call i8* @memcpy(i8* %59, i8* %69, i64 %70) nounwind optsize
  %72 = getelementptr inbounds i8** %60, i64 %indvars.iv7
  store i8* %s, i8** %72, align 8, !tbaa !7
  %73 = add nsw i32 %i.0, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8** %60, i64 %74
  store i8* null, i8** %75, align 8, !tbaa !7
  store i8** %60, i8*** @__environ, align 8, !tbaa !7
  %76 = load i8*** @__putenv.oldenv, align 8, !tbaa !7
  %77 = bitcast i8** %76 to i8*
  tail call void @free(i8* %77) optsize
  %78 = load i8*** @__environ, align 8, !tbaa !7
  store i8** %78, i8*** @__putenv.oldenv, align 8, !tbaa !7
  br label %79

; <label>:79                                      ; preds = %68, %.critedge._crit_edge
  %80 = phi i8** [ %51, %.critedge._crit_edge ], [ %78, %68 ]
  %81 = getelementptr inbounds i8** %80, i64 %indvars.iv7
  store i8* %s, i8** %81, align 8, !tbaa !7
  br label %82

; <label>:82                                      ; preds = %79, %65, %62, %0
  %.0 = phi i32 [ 0, %79 ], [ -1, %0 ], [ -1, %65 ], [ -1, %62 ]
  ret i32 %.0
}

define i32 @putenv(i8* %s) nounwind uwtable optsize {
  %1 = tail call i32 @__putenv(i8* %s, i32 0) optsize
  ret i32 %1
}

define i32 @puts(i8* %s) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.85** bitcast (%struct.__FILE_s.642** @stdout to %struct.__FILE_s.85**), align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (i8*, %struct.__FILE_s.86*)* @fputs to i32 (i8*, %struct.__FILE_s.85*)*)(i8* %s, %struct.__FILE_s.85* %1) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %18, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.__FILE_s.85* %1, i64 0, i32 20
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 10
  br i1 %7, label %16, label %8

; <label>:8                                       ; preds = %4
  %9 = getelementptr inbounds %struct.__FILE_s.85* %1, i64 0, i32 5
  %10 = load i8** %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.__FILE_s.85* %1, i64 0, i32 4
  %12 = load i8** %11, align 8, !tbaa !7
  %13 = icmp ult i8* %10, %12
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %8
  %15 = getelementptr inbounds i8* %10, i64 1
  store i8* %15, i8** %9, align 8, !tbaa !7
  store i8 10, i8* %10, align 1, !tbaa !0
  br label %18

; <label>:16                                      ; preds = %8, %4
  %17 = tail call i32 @__overflow(%struct.__FILE_s.85* %1, i32 10) nounwind optsize
  %phitmp = icmp slt i32 %17, 0
  br label %18

; <label>:18                                      ; preds = %16, %14, %0
  %19 = phi i1 [ true, %0 ], [ false, %14 ], [ %phitmp, %16 ]
  %20 = sext i1 %19 to i32
  ret i32 %20
}

define i32 @putwchar(i32 %c) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.85** bitcast (%struct.__FILE_s.642** @stdout to %struct.__FILE_s.85**), align 8, !tbaa !7
  %2 = tail call i32 @fputwc(i32 %c, %struct.__FILE_s.85* %1) nounwind optsize
  ret i32 %2
}

define i32 @putwc(i32 %c, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = tail call i32 @fputwc(i32 %c, %struct.__FILE_s.85* %f) nounwind optsize
  ret i32 %1
}

define i32 @putw(i32 %x, %struct.__FILE_s.85* %f) nounwind uwtable optsize {
  %1 = alloca i32, align 4
  store i32 %x, i32* %1, align 4, !tbaa !6
  %2 = bitcast i32* %1 to i8*
  %3 = call i64 @fwrite(i8* %2, i64 4, i64 1, %struct.__FILE_s.85* %f) nounwind optsize
  %4 = icmp ne i64 %3, 0
  %5 = load i32* %1, align 4, !tbaa !6
  %6 = select i1 %4, i32 %5, i32 -1
  ret i32 %6
}

define i64 @pwrite(i32 %fd, i8* %buf, i64 %size, i64 %ofs) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = tail call i64 @__syscall_cp(i64 181, i64 %1, i64 %2, i64 %size, i64 0, i64 %ofs, i64 undef) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  ret i64 %4
}

define void @qsort(i8* %base, i64 %nel, i64 %width, i32 (i8*, i8*)* nocapture %cmp) nounwind uwtable optsize {
  %lp = alloca [96 x i64], align 16
  %p = alloca [2 x i64], align 16
  %1 = mul i64 %width, %nel
  %2 = bitcast [2 x i64]* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([2 x i64]* @qsort.p to i8*), i64 16, i32 16, i1 false)
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %.loopexit, label %4

; <label>:4                                       ; preds = %0
  %5 = sub i64 0, %width
  %.sum = sub i64 %1, %width
  %6 = getelementptr inbounds i8* %base, i64 %.sum
  %7 = getelementptr inbounds [96 x i64]* %lp, i64 0, i64 1
  store i64 %width, i64* %7, align 8, !tbaa !5
  %8 = getelementptr inbounds [96 x i64]* %lp, i64 0, i64 0
  store i64 %width, i64* %8, align 16, !tbaa !5
  %9 = mul i64 %width, 3
  %10 = getelementptr inbounds [96 x i64]* %lp, i64 0, i64 2
  store i64 %9, i64* %10, align 16, !tbaa !5
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %.lr.ph44, label %.preheader

.preheader:                                       ; preds = %.lr.ph44, %4
  %12 = icmp sgt i64 %.sum, 0
  %13 = getelementptr inbounds [2 x i64]* %p, i64 0, i64 0
  %.phi.trans.insert.i = getelementptr inbounds [2 x i64]* %p, i64 0, i64 1
  br i1 %12, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %14 = ptrtoint i8* %6 to i64
  br label %22

.lr.ph44:                                         ; preds = %.lr.ph44, %4
  %15 = phi i64 [ %19, %.lr.ph44 ], [ %9, %4 ]
  %16 = phi i64 [ %15, %.lr.ph44 ], [ %width, %4 ]
  %i.042 = phi i64 [ %17, %.lr.ph44 ], [ 2, %4 ]
  %17 = add i64 %i.042, 1
  %18 = add i64 %16, %width
  %19 = add i64 %18, %15
  %20 = getelementptr inbounds [96 x i64]* %lp, i64 0, i64 %17
  store i64 %19, i64* %20, align 8, !tbaa !5
  %21 = icmp ult i64 %19, %1
  br i1 %21, label %.lr.ph44, label %.preheader

; <label>:22                                      ; preds = %60, %.lr.ph
  %.pre1.i = phi i64 [ 0, %.lr.ph ], [ %.pre1.i46, %60 ]
  %.pre.i = phi i64 [ 1, %.lr.ph ], [ %62, %60 ]
  %pshift.039 = phi i32 [ 1, %.lr.ph ], [ %pshift.1, %60 ]
  %head.038 = phi i8* [ %base, %.lr.ph ], [ %63, %60 ]
  %23 = and i64 %.pre.i, 3
  %24 = icmp eq i64 %23, 3
  br i1 %24, label %shr.exit, label %30

shr.exit:                                         ; preds = %22
  call fastcc void @sift(i8* %head.038, i64 %width, i32 (i8*, i8*)* %cmp, i32 %pshift.039, i64* %8) optsize
  %25 = lshr i64 %.pre.i, 2
  %26 = shl i64 %.pre1.i, 62
  %27 = or i64 %26, %25
  store i64 %27, i64* %13, align 16, !tbaa !5
  %28 = lshr i64 %.pre1.i, 2
  store i64 %28, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %29 = add nsw i32 %pshift.039, 2
  br label %60

; <label>:30                                      ; preds = %22
  %31 = add nsw i32 %pshift.039, -1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [96 x i64]* %lp, i64 0, i64 %32
  %34 = load i64* %33, align 8, !tbaa !5
  %35 = ptrtoint i8* %head.038 to i64
  %36 = sub i64 %14, %35
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %39, label %38

; <label>:38                                      ; preds = %30
  call fastcc void @trinkle(i8* %head.038, i64 %width, i32 (i8*, i8*)* %cmp, i64* %13, i32 %pshift.039, i32 0, i64* %8) optsize
  br label %40

; <label>:39                                      ; preds = %30
  call fastcc void @sift(i8* %head.038, i64 %width, i32 (i8*, i8*)* %cmp, i32 %pshift.039, i64* %8) optsize
  br label %40

; <label>:40                                      ; preds = %39, %38
  %41 = icmp eq i32 %pshift.039, 1
  br i1 %41, label %shl.exit, label %46

shl.exit:                                         ; preds = %40
  %.pre.i4 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %.pre1.i5 = load i64* %13, align 16, !tbaa !5
  %42 = shl i64 %.pre.i4, 1
  %43 = lshr i64 %.pre1.i5, 63
  %44 = or i64 %43, %42
  store i64 %44, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %45 = shl i64 %.pre1.i5, 1
  store i64 %45, i64* %13, align 16, !tbaa !5
  br label %60

; <label>:46                                      ; preds = %40
  %47 = icmp ugt i32 %31, 63
  br i1 %47, label %48, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %46
  %.pre.i13 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %.pre1.i14 = load i64* %13, align 16, !tbaa !5
  br label %shl.exit16

; <label>:48                                      ; preds = %46
  %49 = add i32 %pshift.039, -65
  %50 = load i64* %13, align 16, !tbaa !5
  store i64 %50, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  store i64 0, i64* %13, align 16, !tbaa !5
  br label %shl.exit16

shl.exit16:                                       ; preds = %48, %._crit_edge.i
  %51 = phi i64 [ 0, %48 ], [ %.pre1.i14, %._crit_edge.i ]
  %52 = phi i64 [ %50, %48 ], [ %.pre.i13, %._crit_edge.i ]
  %.0.i15 = phi i32 [ %49, %48 ], [ %31, %._crit_edge.i ]
  %53 = zext i32 %.0.i15 to i64
  %54 = shl i64 %52, %53
  %55 = sext i32 %.0.i15 to i64
  %56 = sub i64 64, %55
  %57 = lshr i64 %51, %56
  %58 = or i64 %57, %54
  store i64 %58, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %59 = shl i64 %51, %53
  store i64 %59, i64* %13, align 16, !tbaa !5
  br label %60

; <label>:60                                      ; preds = %shl.exit16, %shl.exit, %shr.exit
  %61 = phi i64 [ %27, %shr.exit ], [ %45, %shl.exit ], [ %59, %shl.exit16 ]
  %.pre1.i46 = phi i64 [ %28, %shr.exit ], [ %44, %shl.exit ], [ %58, %shl.exit16 ]
  %pshift.1 = phi i32 [ %29, %shr.exit ], [ 0, %shl.exit ], [ 1, %shl.exit16 ]
  %62 = or i64 %61, 1
  store i64 %62, i64* %13, align 16, !tbaa !5
  %63 = getelementptr inbounds i8* %head.038, i64 %width
  %64 = icmp ult i8* %63, %6
  br i1 %64, label %22, label %._crit_edge

._crit_edge:                                      ; preds = %60, %.preheader
  %pshift.0.lcssa = phi i32 [ %pshift.1, %60 ], [ 1, %.preheader ]
  %head.0.lcssa = phi i8* [ %63, %60 ], [ %base, %.preheader ]
  call fastcc void @trinkle(i8* %head.0.lcssa, i64 %width, i32 (i8*, i8*)* %cmp, i64* %13, i32 %pshift.0.lcssa, i32 0, i64* %8) optsize
  br label %65

; <label>:65                                      ; preds = %shl.exit11, %shr.exit34, %._crit_edge
  %head.1 = phi i8* [ %head.0.lcssa, %._crit_edge ], [ %130, %shl.exit11 ], [ %.pre48, %shr.exit34 ]
  %pshift.2 = phi i32 [ %pshift.0.lcssa, %._crit_edge ], [ %112, %shl.exit11 ], [ %108, %shr.exit34 ]
  %66 = icmp eq i32 %pshift.2, 1
  br i1 %66, label %67, label %.critedge

; <label>:67                                      ; preds = %65
  %68 = load i64* %13, align 16, !tbaa !5
  %69 = icmp eq i64 %68, 1
  br i1 %69, label %70, label %.critedge.thread

; <label>:70                                      ; preds = %67
  %71 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %.loopexit, label %.critedge

.critedge:                                        ; preds = %70, %65
  %73 = icmp slt i32 %pshift.2, 2
  br i1 %73, label %.critedge..critedge.thread_crit_edge, label %shl.exit11

.critedge..critedge.thread_crit_edge:             ; preds = %.critedge
  %.pre = load i64* %13, align 16, !tbaa !5
  br label %.critedge.thread

.critedge.thread:                                 ; preds = %.critedge..critedge.thread_crit_edge, %67
  %74 = phi i64 [ %.pre, %.critedge..critedge.thread_crit_edge ], [ %68, %67 ]
  %75 = add i64 %74, -1
  %76 = sub i64 1, %74
  %77 = and i64 %75, %76
  %78 = mul i64 %77, 124511785
  %79 = lshr i64 %78, 27
  %80 = getelementptr inbounds [32 x i8]* @a_ctz_l.debruijn32583, i64 0, i64 %79
  %81 = load i8* %80, align 1, !tbaa !0
  %82 = sext i8 %81 to i32
  %83 = icmp eq i64 %79, 0
  br i1 %83, label %84, label %pntz.exit

; <label>:84                                      ; preds = %.critedge.thread
  %85 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %86 = sub i64 0, %85
  %87 = and i64 %85, %86
  %88 = mul i64 %87, 124511785
  %89 = lshr i64 %88, 27
  %90 = getelementptr inbounds [32 x i8]* @a_ctz_l.debruijn32583, i64 0, i64 %89
  %91 = load i8* %90, align 1, !tbaa !0
  %92 = sext i8 %91 to i32
  %93 = add i32 %92, 64
  %94 = icmp eq i64 %89, 0
  br i1 %94, label %shr.exit34, label %pntz.exit

pntz.exit:                                        ; preds = %84, %.critedge.thread
  %.0.i35 = phi i32 [ %82, %.critedge.thread ], [ %93, %84 ]
  %95 = icmp ugt i32 %.0.i35, 63
  br i1 %95, label %96, label %pntz.exit.._crit_edge.i32_crit_edge

pntz.exit.._crit_edge.i32_crit_edge:              ; preds = %pntz.exit
  %.pre1.i31.pre = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  br label %shr.exit34

; <label>:96                                      ; preds = %pntz.exit
  %97 = add i32 %.0.i35, -64
  %98 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  store i64 %98, i64* %13, align 16, !tbaa !5
  store i64 0, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  br label %shr.exit34

shr.exit34:                                       ; preds = %96, %pntz.exit.._crit_edge.i32_crit_edge, %84
  %.0.i3537 = phi i32 [ %.0.i35, %96 ], [ %.0.i35, %pntz.exit.._crit_edge.i32_crit_edge ], [ 0, %84 ]
  %99 = phi i64 [ 0, %96 ], [ %.pre1.i31.pre, %pntz.exit.._crit_edge.i32_crit_edge ], [ %85, %84 ]
  %100 = phi i64 [ %98, %96 ], [ %74, %pntz.exit.._crit_edge.i32_crit_edge ], [ %74, %84 ]
  %.0.i33 = phi i32 [ %97, %96 ], [ %.0.i35, %pntz.exit.._crit_edge.i32_crit_edge ], [ 0, %84 ]
  %101 = zext i32 %.0.i33 to i64
  %102 = lshr i64 %100, %101
  %103 = sext i32 %.0.i33 to i64
  %104 = sub i64 64, %103
  %105 = shl i64 %99, %104
  %106 = or i64 %105, %102
  store i64 %106, i64* %13, align 16, !tbaa !5
  %107 = lshr i64 %99, %101
  store i64 %107, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %108 = add nsw i32 %.0.i3537, %pshift.2
  %.pre48 = getelementptr inbounds i8* %head.1, i64 %5
  br label %65

shl.exit11:                                       ; preds = %.critedge
  %.pre.i24 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %.pre1.i25 = load i64* %13, align 16, !tbaa !5
  %109 = shl i64 %.pre.i24, 2
  %110 = lshr i64 %.pre1.i25, 62
  %111 = or i64 %110, %109
  %112 = add nsw i32 %pshift.2, -2
  %113 = shl i64 %.pre1.i25, 1
  %114 = and i64 %113, 9223372036854775806
  %115 = shl i64 %.pre1.i25, 1
  %116 = and i64 %115, -9223372036854775808
  %117 = or i64 %114, %116
  %118 = xor i64 %117, 3
  store i64 %118, i64* %13, align 16, !tbaa !5
  %119 = lshr i64 %111, 1
  store i64 %119, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %120 = sext i32 %112 to i64
  %121 = getelementptr inbounds [96 x i64]* %lp, i64 0, i64 %120
  %122 = load i64* %121, align 8, !tbaa !5
  %sum = add i64 %122, %width
  %.sum2 = sub i64 0, %sum
  %123 = getelementptr inbounds i8* %head.1, i64 %.sum2
  %124 = add nsw i32 %pshift.2, -1
  call fastcc void @trinkle(i8* %123, i64 %width, i32 (i8*, i8*)* %cmp, i64* %13, i32 %124, i32 1, i64* %8) optsize
  %.pre.i8 = load i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %.pre1.i9 = load i64* %13, align 16, !tbaa !5
  %125 = shl i64 %.pre.i8, 1
  %126 = lshr i64 %.pre1.i9, 63
  %127 = or i64 %126, %125
  store i64 %127, i64* %.phi.trans.insert.i, align 8, !tbaa !5
  %128 = shl i64 %.pre1.i9, 1
  %129 = or i64 %128, 1
  store i64 %129, i64* %13, align 16, !tbaa !5
  %130 = getelementptr inbounds i8* %head.1, i64 %5
  call fastcc void @trinkle(i8* %130, i64 %width, i32 (i8*, i8*)* %cmp, i64* %13, i32 %112, i32 1, i64* %8) optsize
  br label %65

.loopexit:                                        ; preds = %70, %0
  ret void
}

define internal fastcc void @sift(i8* %head, i64 %width, i32 (i8*, i8*)* nocapture %cmp, i32 %pshift, i64* nocapture %lp) nounwind uwtable optsize {
  %ar = alloca [113 x i8*], align 16
  %1 = getelementptr inbounds [113 x i8*]* %ar, i64 0, i64 0
  store i8* %head, i8** %1, align 16, !tbaa !7
  %2 = sub i64 0, %width
  br label %.backedge

.backedge:                                        ; preds = %24, %22, %0
  %indvars.iv = phi i64 [ 1, %0 ], [ %indvars.iv.next, %24 ], [ %indvars.iv.next, %22 ]
  %.01 = phi i32 [ %pshift, %0 ], [ %6, %24 ], [ %23, %22 ]
  %i.0 = phi i32 [ 1, %0 ], [ %20, %24 ], [ %20, %22 ]
  %.0 = phi i8* [ %head, %0 ], [ %5, %24 ], [ %10, %22 ]
  %3 = icmp sgt i32 %.01, 1
  br i1 %3, label %4, label %25

; <label>:4                                       ; preds = %.backedge
  %5 = getelementptr inbounds i8* %.0, i64 %2
  %6 = add nsw i32 %.01, -2
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i64* %lp, i64 %7
  %9 = load i64* %8, align 8, !tbaa !5
  %sum = add i64 %9, %width
  %.sum = sub i64 0, %sum
  %10 = getelementptr inbounds i8* %.0, i64 %.sum
  %11 = load i8** %1, align 16, !tbaa !7
  %12 = call i32 %cmp(i8* %11, i8* %10) nounwind optsize
  %13 = icmp sgt i32 %12, -1
  br i1 %13, label %14, label %17

; <label>:14                                      ; preds = %4
  %15 = call i32 %cmp(i8* %11, i8* %5) nounwind optsize
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %25, label %17

; <label>:17                                      ; preds = %14, %4
  %18 = call i32 %cmp(i8* %10, i8* %5) nounwind optsize
  %19 = icmp sgt i32 %18, -1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %20 = add nsw i32 %i.0, 1
  %21 = getelementptr inbounds [113 x i8*]* %ar, i64 0, i64 %indvars.iv
  br i1 %19, label %22, label %24

; <label>:22                                      ; preds = %17
  store i8* %10, i8** %21, align 8, !tbaa !7
  %23 = add nsw i32 %.01, -1
  br label %.backedge

; <label>:24                                      ; preds = %17
  store i8* %5, i8** %21, align 8, !tbaa !7
  br label %.backedge

; <label>:25                                      ; preds = %14, %.backedge
  call fastcc void @cycle(i64 %width, i8** %1, i32 %i.0) optsize
  ret void
}

define internal fastcc void @trinkle(i8* %head, i64 %width, i32 (i8*, i8*)* nocapture %cmp, i64* nocapture %pp, i32 %pshift, i32 %trusty, i64* nocapture %lp) nounwind uwtable optsize {
  %ar = alloca [113 x i8*], align 16
  %1 = load i64* %pp, align 8, !tbaa !5
  %2 = getelementptr inbounds i64* %pp, i64 1
  %3 = load i64* %2, align 8, !tbaa !5
  %4 = getelementptr inbounds [113 x i8*]* %ar, i64 0, i64 0
  store i8* %head, i8** %4, align 16, !tbaa !7
  %5 = sub i64 0, %width
  br label %6

; <label>:6                                       ; preds = %shr.exit, %0
  %indvars.iv = phi i64 [ %indvars.iv.next, %shr.exit ], [ 1, %0 ]
  %7 = phi i64 [ %67, %shr.exit ], [ %3, %0 ]
  %8 = phi i64 [ %66, %shr.exit ], [ %1, %0 ]
  %.02 = phi i32 [ %68, %shr.exit ], [ %pshift, %0 ]
  %.01 = phi i32 [ 0, %shr.exit ], [ %trusty, %0 ]
  %i.0 = phi i32 [ %35, %shr.exit ], [ 1, %0 ]
  %.0 = phi i8* [ %15, %shr.exit ], [ %head, %0 ]
  %9 = icmp eq i64 %8, 1
  %10 = icmp eq i64 %7, 0
  %or.cond6 = and i1 %9, %10
  br i1 %or.cond6, label %69, label %.critedge

.critedge:                                        ; preds = %6
  %11 = sext i32 %.02 to i64
  %12 = getelementptr inbounds i64* %lp, i64 %11
  %13 = load i64* %12, align 8, !tbaa !5
  %14 = sub i64 0, %13
  %15 = getelementptr inbounds i8* %.0, i64 %14
  %16 = load i8** %4, align 16, !tbaa !7
  %17 = call i32 %cmp(i8* %15, i8* %16) nounwind optsize
  %18 = icmp slt i32 %17, 1
  br i1 %18, label %69, label %19

; <label>:19                                      ; preds = %.critedge
  %20 = icmp eq i32 %.01, 0
  %21 = icmp sgt i32 %.02, 1
  %or.cond = and i1 %20, %21
  br i1 %or.cond, label %22, label %34

; <label>:22                                      ; preds = %19
  %23 = getelementptr inbounds i8* %.0, i64 %5
  %24 = add nsw i32 %.02, -2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i64* %lp, i64 %25
  %27 = load i64* %26, align 8, !tbaa !5
  %28 = call i32 %cmp(i8* %23, i8* %15) nounwind optsize
  %29 = icmp sgt i32 %28, -1
  br i1 %29, label %69, label %30

; <label>:30                                      ; preds = %22
  %sum = add i64 %27, %width
  %.sum = sub i64 0, %sum
  %31 = getelementptr inbounds i8* %.0, i64 %.sum
  %32 = call i32 %cmp(i8* %31, i8* %15) nounwind optsize
  %33 = icmp sgt i32 %32, -1
  br i1 %33, label %69, label %34

; <label>:34                                      ; preds = %30, %19
  %indvars.iv.next = add i64 %indvars.iv, 1
  %35 = add nsw i32 %i.0, 1
  %36 = getelementptr inbounds [113 x i8*]* %ar, i64 0, i64 %indvars.iv
  store i8* %15, i8** %36, align 8, !tbaa !7
  %37 = add i64 %8, -1
  %38 = sub i64 1, %8
  %39 = and i64 %37, %38
  %40 = mul i64 %39, 124511785
  %41 = lshr i64 %40, 27
  %42 = getelementptr inbounds [32 x i8]* @a_ctz_l.debruijn32583, i64 0, i64 %41
  %43 = load i8* %42, align 1, !tbaa !0
  %44 = sext i8 %43 to i32
  %45 = icmp eq i64 %41, 0
  br i1 %45, label %46, label %pntz.exit

; <label>:46                                      ; preds = %34
  %47 = sub i64 0, %7
  %48 = and i64 %7, %47
  %49 = mul i64 %48, 124511785
  %50 = lshr i64 %49, 27
  %51 = getelementptr inbounds [32 x i8]* @a_ctz_l.debruijn32583, i64 0, i64 %50
  %52 = load i8* %51, align 1, !tbaa !0
  %53 = sext i8 %52 to i32
  %54 = add i32 %53, 64
  %55 = icmp eq i64 %50, 0
  br i1 %55, label %shr.exit, label %pntz.exit

pntz.exit:                                        ; preds = %46, %34
  %.0.i = phi i32 [ %44, %34 ], [ %54, %46 ]
  %56 = add i32 %.0.i, -64
  %57 = icmp ugt i32 %.0.i, 63
  %..0.i = select i1 %57, i32 %56, i32 %.0.i
  br i1 %57, label %58, label %shr.exit

; <label>:58                                      ; preds = %pntz.exit
  br label %shr.exit

shr.exit:                                         ; preds = %58, %pntz.exit, %46
  %.0.i4 = phi i32 [ %.0.i, %58 ], [ %.0.i, %pntz.exit ], [ 0, %46 ]
  %59 = phi i64 [ 0, %58 ], [ %7, %pntz.exit ], [ %7, %46 ]
  %60 = phi i64 [ %7, %58 ], [ %8, %pntz.exit ], [ %8, %46 ]
  %.0.i3 = phi i32 [ %..0.i, %58 ], [ %..0.i, %pntz.exit ], [ 0, %46 ]
  %61 = zext i32 %.0.i3 to i64
  %62 = lshr i64 %60, %61
  %63 = sext i32 %.0.i3 to i64
  %64 = sub i64 64, %63
  %65 = shl i64 %59, %64
  %66 = or i64 %65, %62
  %67 = lshr i64 %59, %61
  %68 = add nsw i32 %.0.i4, %.02
  br label %6

; <label>:69                                      ; preds = %30, %22, %.critedge, %6
  %70 = icmp eq i32 %.01, 0
  br i1 %70, label %71, label %72

; <label>:71                                      ; preds = %69
  call fastcc void @cycle(i64 %width, i8** %4, i32 %i.0) optsize
  call fastcc void @sift(i8* %.0, i64 %width, i32 (i8*, i8*)* %cmp, i32 %.02, i64* %lp) optsize
  br label %72

; <label>:72                                      ; preds = %71, %69
  ret void
}

define internal fastcc void @cycle(i64 %width, i8** nocapture %ar, i32 %n) nounwind uwtable optsize {
  %tmp = alloca [256 x i8], align 16
  %1 = icmp slt i32 %n, 2
  br i1 %1, label %.loopexit, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds [256 x i8]* %tmp, i64 0, i64 0
  %4 = sext i32 %n to i64
  %5 = getelementptr inbounds i8** %ar, i64 %4
  store i8* %3, i8** %5, align 8, !tbaa !7
  %6 = icmp eq i64 %width, 0
  br i1 %6, label %.loopexit, label %.lr.ph4

.lr.ph4:                                          ; preds = %2
  %7 = icmp sgt i32 %n, 0
  br label %8

; <label>:8                                       ; preds = %._crit_edge5, %.lr.ph4
  %9 = phi i8* [ %3, %.lr.ph4 ], [ %.pre, %._crit_edge5 ]
  %.02 = phi i64 [ %width, %.lr.ph4 ], [ %22, %._crit_edge5 ]
  %10 = icmp ugt i64 %.02, 256
  %11 = select i1 %10, i64 256, i64 %.02
  %12 = load i8** %ar, align 8, !tbaa !7
  %13 = call i8* @memcpy(i8* %9, i8* %12, i64 %11) nounwind optsize
  br i1 %7, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %8
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %8 ]
  %14 = getelementptr inbounds i8** %ar, i64 %indvars.iv
  %15 = load i8** %14, align 8, !tbaa !7
  %indvars.iv.next = add i64 %indvars.iv, 1
  %16 = getelementptr inbounds i8** %ar, i64 %indvars.iv.next
  %17 = load i8** %16, align 8, !tbaa !7
  %18 = call i8* @memcpy(i8* %15, i8* %17, i64 %11) nounwind optsize
  %19 = load i8** %14, align 8, !tbaa !7
  %20 = getelementptr inbounds i8* %19, i64 %11
  store i8* %20, i8** %14, align 8, !tbaa !7
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %8
  %21 = icmp eq i64 %.02, %11
  br i1 %21, label %.loopexit, label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge
  %22 = sub i64 %.02, %11
  %.pre = load i8** %5, align 8, !tbaa !7
  br label %8

.loopexit:                                        ; preds = %._crit_edge, %2, %0
  ret void
}

define i32 @raise(i32 %sig) nounwind uwtable optsize {
  %set = alloca %struct.sigset_t.511, align 8
  %1 = alloca [1 x i64], align 8
  %2 = getelementptr inbounds [1 x i64]* %1, i64 0, i64 0
  store i64 -1, i64* %2, align 8, !tbaa !5
  %3 = ptrtoint [1 x i64]* %1 to i64
  %4 = ptrtoint %struct.sigset_t.511* %set to i64
  %5 = call i64 (i64, ...)* @__syscall(i64 175, i64 0, i64 %3, i64 %4, i64 8, i32 0, i32 0) nounwind optsize
  %6 = call i64 (i64, ...)* @__syscall(i64 224, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %7 = call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = call i64 (i64, ...)* @__syscall(i64 20, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %9 = call i64 @__syscall_ret(i64 %8) nounwind optsize
  %sext = shl i64 %9, 32
  %10 = ashr exact i64 %sext, 32
  %sext1 = shl i64 %7, 32
  %11 = ashr exact i64 %sext1, 32
  %12 = sext i32 %sig to i64
  %13 = call i64 (i64, ...)* @__syscall(i64 268, i64 %10, i64 %11, i64 %12, i32 0, i32 0, i32 0) nounwind optsize
  %14 = call i64 @__syscall_ret(i64 %13) nounwind optsize
  %15 = trunc i64 %14 to i32
  %16 = call i64 (i64, ...)* @__syscall(i64 175, i64 2, i64 %4, i64 0, i64 8, i32 0, i32 0) nounwind optsize
  ret i32 %15
}

define i64 @__rand48_step(i16* nocapture %xi, i16* nocapture %lc) nounwind uwtable optsize {
  %1 = load i16* %xi, align 2, !tbaa !8
  %2 = zext i16 %1 to i32
  %3 = getelementptr inbounds i16* %xi, i64 1
  %4 = load i16* %3, align 2, !tbaa !8
  %5 = zext i16 %4 to i32
  %6 = shl nuw i32 %5, 16
  %7 = or i32 %6, %2
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i16* %xi, i64 2
  %10 = load i16* %9, align 2, !tbaa !8
  %11 = zext i16 %10 to i64
  %12 = shl nuw nsw i64 %11, 32
  %13 = or i64 %8, %12
  %14 = load i16* %lc, align 2, !tbaa !8
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds i16* %lc, i64 1
  %17 = load i16* %16, align 2, !tbaa !8
  %18 = zext i16 %17 to i32
  %19 = shl nuw i32 %18, 16
  %20 = or i32 %19, %15
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16* %lc, i64 2
  %23 = load i16* %22, align 2, !tbaa !8
  %24 = zext i16 %23 to i64
  %25 = shl nuw nsw i64 %24, 32
  %26 = or i64 %21, %25
  %27 = mul i64 %26, %13
  %28 = getelementptr inbounds i16* %lc, i64 3
  %29 = load i16* %28, align 2, !tbaa !8
  %30 = zext i16 %29 to i64
  %31 = add i64 %27, %30
  %32 = trunc i64 %31 to i16
  store i16 %32, i16* %xi, align 2, !tbaa !8
  %33 = lshr i64 %31, 16
  %34 = trunc i64 %33 to i16
  store i16 %34, i16* %3, align 2, !tbaa !8
  %35 = lshr i64 %31, 32
  %36 = trunc i64 %35 to i16
  store i16 %36, i16* %9, align 2, !tbaa !8
  %37 = and i64 %31, 281474976710655
  ret i64 %37
}

define void @srand(i32 %s) nounwind uwtable optsize {
  %1 = add i32 %s, -1
  store i32 %1, i32* @seed, align 4, !tbaa !6
  ret void
}

define i32 @rand() nounwind uwtable optsize {
  %1 = load i32* @seed, align 4, !tbaa !6
  %2 = mul i32 %1, 1103515245
  %3 = add i32 %2, 1103527590
  %4 = add i32 %2, 1103527589
  store i32 %4, i32* @seed, align 4, !tbaa !6
  %5 = and i32 %3, 2147483647
  ret i32 %5
}

define void @srandom(i32 %seed) nounwind uwtable optsize {
  tail call fastcc void @__srandom(i32 %seed) optsize
  ret void
}

define internal fastcc void @__srandom(i32 %seed) nounwind uwtable optsize {
  %1 = zext i32 %seed to i64
  %2 = load i32* @n, align 4, !tbaa !6
  switch i32 %2, label %5 [
    i32 0, label %3
    i32 31, label %.thread
  ]

.thread:                                          ; preds = %0
  store i32 3, i32* @i, align 4, !tbaa !6
  store i32 0, i32* @j, align 4, !tbaa !6
  br label %.lr.ph

; <label>:3                                       ; preds = %0
  %4 = load i32** @x, align 8, !tbaa !7
  store i32 %seed, i32* %4, align 4, !tbaa !6
  br label %21

; <label>:5                                       ; preds = %0
  %6 = icmp eq i32 %2, 7
  %phitmp = select i1 %6, i32 3, i32 1
  store i32 %phitmp, i32* @i, align 4, !tbaa !6
  store i32 0, i32* @j, align 4, !tbaa !6
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %.lr.ph, label %._crit_edge3

._crit_edge3:                                     ; preds = %5
  %.pre = load i32** @x, align 8, !tbaa !7
  br label %._crit_edge

.lr.ph:                                           ; preds = %5, %.thread
  %8 = load i32** @x, align 8, !tbaa !7
  br label %9

; <label>:9                                       ; preds = %9, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %9 ]
  %s.02 = phi i64 [ %1, %.lr.ph ], [ %11, %9 ]
  %10 = mul i64 %s.02, 6364136223846793005
  %11 = add i64 %10, 1
  %12 = lshr i64 %11, 32
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds i32* %8, i64 %indvars.iv
  store i32 %13, i32* %14, align 4, !tbaa !6
  %indvars.iv.next = add i64 %indvars.iv, 1
  %15 = load i32* @n, align 4, !tbaa !6
  %16 = trunc i64 %indvars.iv.next to i32
  %17 = icmp slt i32 %16, %15
  br i1 %17, label %9, label %._crit_edge

._crit_edge:                                      ; preds = %9, %._crit_edge3
  %18 = phi i32* [ %.pre, %._crit_edge3 ], [ %8, %9 ]
  %19 = load i32* %18, align 4, !tbaa !6
  %20 = or i32 %19, 1
  store i32 %20, i32* %18, align 4, !tbaa !6
  br label %21

; <label>:21                                      ; preds = %._crit_edge, %3
  ret void
}

define i8* @initstate(i32 %seed, i8* %state, i64 %size) nounwind uwtable optsize {
  %1 = icmp ult i64 %size, 8
  br i1 %1, label %28, label %2

; <label>:2                                       ; preds = %0
  %3 = load i32* @n, align 4, !tbaa !6
  %4 = shl i32 %3, 16
  %5 = load i32* @i, align 4, !tbaa !6
  %6 = shl i32 %5, 8
  %7 = load i32* @j, align 4, !tbaa !6
  %8 = or i32 %6, %4
  %9 = or i32 %8, %7
  %10 = load i32** @x, align 8, !tbaa !7
  %11 = getelementptr inbounds i32* %10, i64 -1
  store i32 %9, i32* %11, align 4, !tbaa !6
  %12 = bitcast i32* %11 to i8*
  %13 = icmp ult i64 %size, 32
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %2
  store i32 0, i32* @n, align 4, !tbaa !6
  br label %25

; <label>:15                                      ; preds = %2
  %16 = icmp ult i64 %size, 64
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %15
  store i32 7, i32* @n, align 4, !tbaa !6
  br label %25

; <label>:18                                      ; preds = %15
  %19 = icmp ult i64 %size, 128
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %18
  store i32 15, i32* @n, align 4, !tbaa !6
  br label %25

; <label>:21                                      ; preds = %18
  %22 = icmp ult i64 %size, 256
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %21
  store i32 31, i32* @n, align 4, !tbaa !6
  br label %25

; <label>:24                                      ; preds = %21
  store i32 63, i32* @n, align 4, !tbaa !6
  br label %25

; <label>:25                                      ; preds = %24, %23, %20, %17, %14
  %26 = getelementptr inbounds i8* %state, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32* %27, i32** @x, align 8, !tbaa !7
  tail call fastcc void @__srandom(i32 %seed) optsize
  br label %28

; <label>:28                                      ; preds = %25, %0
  %.0 = phi i8* [ %12, %25 ], [ null, %0 ]
  ret i8* %.0
}

define i8* @setstate(i8* %state) nounwind uwtable optsize {
  %1 = load i32* @n, align 4, !tbaa !6
  %2 = shl i32 %1, 16
  %3 = load i32* @i, align 4, !tbaa !6
  %4 = shl i32 %3, 8
  %5 = load i32* @j, align 4, !tbaa !6
  %6 = or i32 %4, %2
  %7 = or i32 %6, %5
  %8 = load i32** @x, align 8, !tbaa !7
  %9 = getelementptr inbounds i32* %8, i64 -1
  store i32 %7, i32* %9, align 4, !tbaa !6
  %10 = bitcast i32* %9 to i8*
  %11 = bitcast i8* %state to i32*
  %12 = getelementptr inbounds i8* %state, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32* %13, i32** @x, align 8, !tbaa !7
  %14 = load i32* %11, align 4, !tbaa !6
  %15 = lshr i32 %14, 16
  store i32 %15, i32* @n, align 4, !tbaa !6
  %16 = load i32* %11, align 4, !tbaa !6
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, 255
  store i32 %18, i32* @i, align 4, !tbaa !6
  %19 = load i32* %11, align 4, !tbaa !6
  %20 = and i32 %19, 255
  store i32 %20, i32* @j, align 4, !tbaa !6
  ret i8* %10
}

define i64 @random() nounwind uwtable optsize {
  %1 = load i32* @n, align 4, !tbaa !6
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %10

; <label>:3                                       ; preds = %0
  %4 = load i32** @x, align 8, !tbaa !7
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = mul i32 %5, 1103515245
  %7 = add i32 %6, 12345
  %8 = and i32 %7, 2147483647
  store i32 %8, i32* %4, align 4, !tbaa !6
  %9 = zext i32 %8 to i64
  br label %36

; <label>:10                                      ; preds = %0
  %11 = load i32* @j, align 4, !tbaa !6
  %12 = sext i32 %11 to i64
  %13 = load i32** @x, align 8, !tbaa !7
  %14 = getelementptr inbounds i32* %13, i64 %12
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = load i32* @i, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32* %13, i64 %17
  %19 = load i32* %18, align 4, !tbaa !6
  %20 = add i32 %19, %15
  store i32 %20, i32* %18, align 4, !tbaa !6
  %21 = load i32* @i, align 4, !tbaa !6
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32* %13, i64 %22
  %24 = load i32* %23, align 4, !tbaa !6
  %25 = lshr i32 %24, 1
  %26 = zext i32 %25 to i64
  %27 = add nsw i32 %21, 1
  store i32 %27, i32* @i, align 4, !tbaa !6
  %28 = load i32* @n, align 4, !tbaa !6
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %10
  store i32 0, i32* @i, align 4, !tbaa !6
  br label %31

; <label>:31                                      ; preds = %30, %10
  %32 = load i32* @j, align 4, !tbaa !6
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* @j, align 4, !tbaa !6
  %34 = icmp eq i32 %33, %28
  br i1 %34, label %35, label %36

; <label>:35                                      ; preds = %31
  store i32 0, i32* @j, align 4, !tbaa !6
  br label %36

; <label>:36                                      ; preds = %35, %31, %3
  %k.0 = phi i64 [ %9, %3 ], [ %26, %35 ], [ %26, %31 ]
  ret i64 %k.0
}

define i32 @rand_r(i32* nocapture %seed) nounwind uwtable optsize {
  %1 = load i32* %seed, align 4, !tbaa !6
  %2 = mul i32 %1, 1103515245
  %3 = add i32 %2, 12345
  store i32 %3, i32* %seed, align 4, !tbaa !6
  %4 = and i32 %3, 2147483647
  ret i32 %4
}

define %struct.dirent.290* @readdir(%struct.__DIR_s* %dir) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 3
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 4
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %18, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 1
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 5, i64 0
  %10 = bitcast i8* %9 to %struct.dirent.290*
  %11 = tail call i32 bitcast (i32 (i32, %struct.dirent.139*, i64)* @__getdents to i32 (i32, %struct.dirent.290*, i64)*)(i32 %8, %struct.dirent.290* %10, i64 2048) nounwind optsize
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %6
  %14 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 0
  store i32 0, i32* %14, align 4, !tbaa !6
  br label %32

; <label>:15                                      ; preds = %6
  %16 = icmp eq i32 %11, 0
  br i1 %16, label %32, label %17

; <label>:17                                      ; preds = %15
  store i32 %11, i32* %3, align 4, !tbaa !6
  store i32 0, i32* %1, align 4, !tbaa !6
  br label %18

; <label>:18                                      ; preds = %17, %0
  %19 = phi i32 [ %2, %0 ], [ 0, %17 ]
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 5, i64 %20
  %22 = bitcast i8* %21 to %struct.dirent.290*
  %.sum = add i64 %20, 16
  %23 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 5, i64 %.sum
  %24 = bitcast i8* %23 to i16*
  %25 = load i16* %24, align 2, !tbaa !8
  %26 = zext i16 %25 to i32
  %27 = add nsw i32 %26, %19
  store i32 %27, i32* %1, align 4, !tbaa !6
  %.sum1 = add i64 %20, 8
  %28 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 5, i64 %.sum1
  %29 = bitcast i8* %28 to i64*
  %30 = load i64* %29, align 8, !tbaa !5
  %31 = getelementptr inbounds %struct.__DIR_s* %dir, i64 0, i32 2
  store i64 %30, i64* %31, align 8, !tbaa !5
  br label %32

; <label>:32                                      ; preds = %18, %15, %13
  %.0 = phi %struct.dirent.290* [ null, %13 ], [ %22, %18 ], [ null, %15 ]
  ret %struct.dirent.290* %.0
}

define i32 @readdir_r(%struct.__DIR_s* %dir, %struct.dirent.193* %buf, %struct.dirent.193** nocapture %result) nounwind uwtable optsize {
  %1 = tail call i32* @__errno_location() nounwind readnone optsize
  %2 = load i32* %1, align 4, !tbaa !6
  store i32 0, i32* %1, align 4, !tbaa !6
  %3 = tail call %struct.dirent.193* bitcast (%struct.dirent.290* (%struct.__DIR_s*)* @readdir to %struct.dirent.193* (%struct.__DIR_s*)*)(%struct.__DIR_s* %dir) nounwind optsize
  %4 = load i32* %1, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %16

; <label>:6                                       ; preds = %0
  store i32 %2, i32* %1, align 4, !tbaa !6
  %7 = icmp eq %struct.dirent.193* %3, null
  br i1 %7, label %15, label %8

; <label>:8                                       ; preds = %6
  %9 = bitcast %struct.dirent.193* %buf to i8*
  %10 = bitcast %struct.dirent.193* %3 to i8*
  %11 = getelementptr inbounds %struct.dirent.193* %3, i64 0, i32 2
  %12 = load i16* %11, align 2, !tbaa !8
  %13 = zext i16 %12 to i64
  %14 = tail call i8* @memcpy(i8* %9, i8* %10, i64 %13) nounwind optsize
  br label %15

; <label>:15                                      ; preds = %8, %6
  %.01 = phi %struct.dirent.193* [ %buf, %8 ], [ null, %6 ]
  store %struct.dirent.193* %.01, %struct.dirent.193** %result, align 8, !tbaa !7
  br label %16

; <label>:16                                      ; preds = %15, %0
  %.0 = phi i32 [ 0, %15 ], [ %4, %0 ]
  ret i32 %.0
}

define i64 @readlinkat(i32 %fd, i8* %path, i8* %buf, i64 %bufsize) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = ptrtoint i8* %buf to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 332, i64 %1, i64 %2, i64 %3, i64 %bufsize, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  ret i64 %5
}

define i64 @readlink(i8* %path, i8* %buf, i64 %bufsize) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 85, i64 %1, i64 %2, i64 %bufsize, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  ret i64 %4
}

define i64 @read(i32 %fd, i8* %buf, i64 %count) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = tail call i64 @__syscall_cp(i64 3, i64 %1, i64 %2, i64 %count, i64 0, i64 0, i64 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  ret i64 %4
}

define i64 @readv(i32 %fd, %struct.iovec* %iov, i32 %count) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.iovec* %iov to i64
  %3 = sext i32 %count to i64
  %4 = tail call i64 @__syscall_cp(i64 145, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  ret i64 %5
}

define i8* @realpath(i8* %filename, i8* %resolved) nounwind uwtable optsize {
  %st1 = alloca %struct.stat, align 8
  %st2 = alloca %struct.stat, align 8
  %buf = alloca [27 x i8], align 16
  %1 = icmp eq i8* %filename, null
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %0
  %3 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %3, align 4, !tbaa !6
  br label %44

; <label>:4                                       ; preds = %0
  %5 = call i32 (i8*, i32, ...)* @open(i8* %filename, i32 2048) nounwind optsize
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %44, label %7

; <label>:7                                       ; preds = %4
  %8 = getelementptr inbounds [27 x i8]* %buf, i64 0, i64 0
  %9 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %8, i64 27, i8* getelementptr inbounds ([17 x i8]* @.str596, i64 0, i64 0), i32 %5) nounwind optsize
  %10 = icmp eq i8* %resolved, null
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %7
  %12 = call i8* @malloc(i64 4096) optsize
  %13 = icmp eq i8* %12, null
  br i1 %13, label %44, label %14

; <label>:14                                      ; preds = %11, %7
  %.01 = phi i8* [ %resolved, %7 ], [ %12, %11 ]
  %alloc.0 = phi i32 [ 0, %7 ], [ 1, %11 ]
  %15 = call i64 @readlink(i8* %8, i8* %.01, i64 4095) nounwind optsize
  %16 = icmp slt i64 %15, 0
  br i1 %16, label %.thread, label %17

; <label>:17                                      ; preds = %14
  %18 = getelementptr inbounds i8* %.01, i64 %15
  store i8 0, i8* %18, align 1, !tbaa !0
  %19 = call i32 @fstat(i32 %5, %struct.stat* %st1) nounwind optsize
  %20 = call i32 bitcast (i32 (i8*, %struct.stat.104*)* @stat to i32 (i8*, %struct.stat*)*)(i8* %.01, %struct.stat* %st2) nounwind optsize
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %.thread, label %22

; <label>:22                                      ; preds = %17
  %23 = getelementptr inbounds %struct.stat* %st1, i64 0, i32 0
  %24 = load i64* %23, align 8, !tbaa !5
  %25 = getelementptr inbounds %struct.stat* %st2, i64 0, i32 0
  %26 = load i64* %25, align 8, !tbaa !5
  %27 = icmp eq i64 %24, %26
  br i1 %27, label %28, label %34

; <label>:28                                      ; preds = %22
  %29 = getelementptr inbounds %struct.stat* %st1, i64 0, i32 1
  %30 = load i64* %29, align 8, !tbaa !9
  %31 = getelementptr inbounds %struct.stat* %st2, i64 0, i32 1
  %32 = load i64* %31, align 8, !tbaa !9
  %33 = icmp eq i64 %30, %32
  br i1 %33, label %38, label %34

; <label>:34                                      ; preds = %28, %22
  %35 = icmp eq i32 %20, 0
  br i1 %35, label %36, label %.thread

; <label>:36                                      ; preds = %34
  %37 = call i32* @__errno_location() nounwind readnone optsize
  store i32 40, i32* %37, align 4, !tbaa !6
  br label %.thread

; <label>:38                                      ; preds = %28
  %39 = call i32 @close(i32 %5) nounwind optsize
  br label %44

.thread:                                          ; preds = %36, %34, %17, %14
  %40 = icmp eq i32 %alloc.0, 0
  br i1 %40, label %42, label %41

; <label>:41                                      ; preds = %.thread
  call void @free(i8* %.01) optsize
  br label %42

; <label>:42                                      ; preds = %41, %.thread
  %43 = call i32 @close(i32 %5) nounwind optsize
  br label %44

; <label>:44                                      ; preds = %42, %38, %11, %4, %2
  %.0 = phi i8* [ null, %42 ], [ %.01, %38 ], [ null, %2 ], [ null, %4 ], [ null, %11 ]
  ret i8* %.0
}

define i32 @reboot(i32 %type) nounwind uwtable optsize {
  %1 = sext i32 %type to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 88, i64 4276215469, i64 672274793, i64 %1, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i64 @recvfrom(i32 %fd, i8* %buf, i64 %len, i32 %flags, %struct.sockaddr.24* %addr, i32* %alen) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = sext i32 %flags to i64
  %4 = ptrtoint %struct.sockaddr.24* %addr to i64
  %5 = ptrtoint i32* %alen to i64
  %6 = tail call i64 @__syscall_cp(i64 292, i64 %1, i64 %2, i64 %len, i64 %3, i64 %4, i64 %5) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  ret i64 %7
}

define i64 @recvmsg(i32 %fd, %struct.msghdr* %msg, i32 %flags) nounwind uwtable optsize {
  %h = alloca %struct.msghdr, align 8
  %1 = icmp ne %struct.msghdr* %msg, null
  br i1 %1, label %2, label %7

; <label>:2                                       ; preds = %0
  %3 = bitcast %struct.msghdr* %h to i8*
  %4 = bitcast %struct.msghdr* %msg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 56, i32 8, i1 false)
  %5 = getelementptr inbounds %struct.msghdr* %h, i64 0, i32 7
  store i32 0, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds %struct.msghdr* %h, i64 0, i32 4
  store i32 0, i32* %6, align 4, !tbaa !6
  %phitmp = ptrtoint %struct.msghdr* %h to i64
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i64 [ %phitmp, %2 ], [ 0, %0 ]
  %8 = sext i32 %fd to i64
  %9 = sext i32 %flags to i64
  %10 = call i64 @__syscall_cp(i64 297, i64 %8, i64 %.0, i64 %9, i64 0, i64 0, i64 0) nounwind optsize
  %11 = call i64 @__syscall_ret(i64 %10) nounwind optsize
  br i1 %1, label %12, label %15

; <label>:12                                      ; preds = %7
  %13 = bitcast %struct.msghdr* %msg to i8*
  %14 = bitcast %struct.msghdr* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 56, i32 8, i1 false)
  br label %15

; <label>:15                                      ; preds = %12, %7
  ret i64 %11
}

define i64 @recv(i32 %fd, i8* %buf, i64 %len, i32 %flags) nounwind uwtable optsize {
  %1 = tail call i64 @recvfrom(i32 %fd, i8* %buf, i64 %len, i32 %flags, %struct.sockaddr.24* null, i32* null) nounwind optsize
  ret i64 %1
}

define i32 @regcomp(%struct.regex_t* nocapture %preg, i8* %regex, i32 %cflags) nounwind uwtable optsize {
  %num_tags.i.i = alloca i32, align 4
  %assertions.i.i = alloca i32, align 4
  %pos_add.i.i = alloca i32, align 4
  %max_pos.i.i = alloca i32, align 4
  %seq2.i.i = alloca %struct.tre_ast_node_t*, align 8
  %copy.i.i = alloca %struct.tre_ast_node_t*, align 8
  %copy4.i.i = alloca %struct.tre_ast_node_t*, align 8
  %i.i.i.i.i = alloca i32, align 4
  %max_i.i.i.i.i = alloca i32, align 4
  %tmp_str.i.i.i.i = alloca [64 x i8], align 16
  %tmp_wcs.i.i.i.i = alloca [64 x i32], align 16
  %items.i.i.i = alloca %struct.tre_ast_node_t**, align 8
  %neg_classes.i.i.i = alloca [64 x i32], align 16
  %parse_ctx.i = alloca %struct.tre_parse_ctx_t, align 8
  %1 = call i64 @strlen(i8* %regex) nounwind optsize
  %2 = add i64 %1, 1
  %3 = icmp ugt i64 %2, 4611686018427387903
  br i1 %3, label %1729, label %4

; <label>:4                                       ; preds = %0
  %5 = shl i64 %2, 2
  %6 = call i8* @malloc(i64 %5) optsize
  %7 = bitcast i8* %6 to i32*
  %8 = icmp eq i8* %6, null
  br i1 %8, label %1729, label %9

; <label>:9                                       ; preds = %4
  %10 = call i64 @mbstowcs(i32* %7, i8* %regex, i64 %2) nounwind optsize
  %11 = icmp eq i64 %10, -1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %9
  call void @free(i8* %6) optsize
  br label %1729

; <label>:13                                      ; preds = %9
  %14 = bitcast %struct.tre_parse_ctx_t* %parse_ctx.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %14) nounwind
  %15 = call i8* @malloc(i64 24) nounwind optsize
  %16 = bitcast i8* %15 to %struct.tre_stack_rec*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %tre_compile.exit, label %18

; <label>:18                                      ; preds = %13
  %19 = call i8* @malloc(i64 4096) nounwind optsize
  %20 = bitcast i8* %19 to i8**
  %21 = getelementptr inbounds i8* %15, i64 16
  %22 = bitcast i8* %21 to i8***
  store i8** %20, i8*** %22, align 8, !tbaa !7
  %23 = icmp eq i8* %19, null
  br i1 %23, label %tre_stack_new.exit.thread.i, label %24

tre_stack_new.exit.thread.i:                      ; preds = %18
  call void @free(i8* %15) nounwind optsize
  br label %tre_compile.exit

; <label>:24                                      ; preds = %18
  %25 = bitcast i8* %15 to i32*
  store i32 512, i32* %25, align 4, !tbaa !6
  %26 = getelementptr inbounds i8* %15, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 10240, i32* %27, align 4, !tbaa !6
  %28 = getelementptr inbounds i8* %15, i64 8
  %29 = bitcast i8* %28 to i32*
  store i32 128, i32* %29, align 4, !tbaa !6
  %30 = getelementptr inbounds i8* %15, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 4, !tbaa !6
  %32 = call %struct.tre_mem_struct* @__tre_mem_new_impl(i32 0, i8* null) nounwind optsize
  %33 = icmp eq %struct.tre_mem_struct* %32, null
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %24
  %35 = load i8*** %22, align 8, !tbaa !7
  %36 = bitcast i8** %35 to i8*
  call void @free(i8* %36) nounwind optsize
  call void @free(i8* %15) nounwind optsize
  br label %tre_compile.exit

; <label>:37                                      ; preds = %24
  %38 = call i8* @memset(i8* %14, i32 0, i64 72) nounwind optsize
  %39 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 0
  store %struct.tre_mem_struct* %32, %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %40 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 1
  store %struct.tre_stack_rec* %16, %struct.tre_stack_rec** %40, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 3
  store i32* %7, i32** %41, align 8, !tbaa !7
  %42 = trunc i64 %10 to i32
  %43 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 6
  store i32 %42, i32* %43, align 8, !tbaa !6
  %44 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 10
  store i32 %cflags, i32* %44, align 8, !tbaa !6
  %45 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 9
  store i32 -1, i32* %45, align 4, !tbaa !6
  %46 = load i32* %31, align 4, !tbaa !6
  %47 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 11
  %48 = load i32* %47, align 4, !tbaa !6
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %._crit_edge120.i.i

._crit_edge120.i.i:                               ; preds = %37
  %.pre122.i.i = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 7
  br label %60

; <label>:50                                      ; preds = %37
  %51 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %6) nounwind optsize
  %52 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 7
  %53 = load i32* %52, align 4, !tbaa !6
  %54 = sext i32 %53 to i64
  %55 = inttoptr i64 %54 to i8*
  %56 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %55) nounwind optsize
  %57 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 2 to i8*)) nounwind optsize
  %58 = load i32* %52, align 4, !tbaa !6
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %52, align 4, !tbaa !6
  br label %60

; <label>:60                                      ; preds = %50, %._crit_edge120.i.i
  %.pre-phi123.i.i = phi i32* [ %.pre122.i.i, %._crit_edge120.i.i ], [ %52, %50 ]
  %61 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %62 = load i32** %41, align 8, !tbaa !7
  %63 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 4
  store i32* %62, i32** %63, align 8, !tbaa !7
  %64 = load i32* %43, align 8, !tbaa !6
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32* %62, i64 %65
  %67 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 5
  store i32* %66, i32** %67, align 8, !tbaa !7
  %68 = bitcast %struct.tre_ast_node_t*** %items.i.i.i to i8*
  %69 = bitcast [64 x i32]* %neg_classes.i.i.i to i8*
  %70 = bitcast i32* %i.i.i.i.i to i8*
  %71 = bitcast i32* %max_i.i.i.i.i to i8*
  %72 = getelementptr inbounds [64 x i8]* %tmp_str.i.i.i.i, i64 0, i64 0
  %73 = bitcast [64 x i32]* %tmp_wcs.i.i.i.i to i8*
  %74 = getelementptr inbounds [64 x i32]* %tmp_wcs.i.i.i.i, i64 0, i64 0
  %75 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 8
  %76 = bitcast i32* %75 to i64*
  br label %.backedge.i.i

.backedge.i.i:                                    ; preds = %939, %934, %900, %tre_ast_new_literal.exit41.i.i, %797, %768, %744, %693, %.thread.i.i, %653, %tre_parse_bracket.exit.i.i, %384, %373, %354, %351, %348, %340, %321, %229, %225, %222, %218, %204, %195, %193, %189, %180, %178, %175, %172, %169, %165, %162, %160, %156, %147, %145, %142, %138, %135, %132, %128, %111, %107, %105, %102, %100, %97, %95, %92, %80, %60
  %node.2.i47.i.i = phi %struct.tre_ast_node_t* [ null, %60 ], [ %node.2.i47.i.i, %80 ], [ %node.2.i47.i.i, %939 ], [ %node.2.i44.i.i, %934 ], [ %822, %tre_ast_new_literal.exit41.i.i ], [ %node.2.i50.i.i, %900 ], [ %795, %797 ], [ %766, %768 ], [ %node.2.i49.i.i, %744 ], [ %.0.i28.i.i, %693 ], [ %node.2.i47.i.i, %653 ], [ %node.2.i.i.i, %tre_parse_bracket.exit.i.i ], [ %371, %373 ], [ %371, %384 ], [ %node.2.i47.i.i, %340 ], [ %node.2.i47.i.i, %348 ], [ %node.2.i47.i.i, %351 ], [ %node.2.i47.i.i, %354 ], [ %node.2.i47.i.i, %189 ], [ %node.2.i47.i.i, %193 ], [ %storemerge17.i.i.i, %321 ], [ %node.2.i47.i.i, %229 ], [ %node.2.i47.i.i, %218 ], [ %node.2.i47.i.i, %225 ], [ %node.2.i47.i.i, %222 ], [ %202, %204 ], [ %node.2.i47.i.i, %195 ], [ %node.2.i47.i.i, %156 ], [ %node.2.i47.i.i, %160 ], [ %node.2.i47.i.i, %178 ], [ %node.2.i47.i.i, %162 ], [ %node.2.i47.i.i, %165 ], [ %node.2.i47.i.i, %169 ], [ %node.2.i47.i.i, %172 ], [ %node.2.i47.i.i, %175 ], [ %node.2.i47.i.i, %107 ], [ %node.2.i47.i.i, %128 ], [ %node.2.i47.i.i, %132 ], [ %node.2.i47.i.i, %135 ], [ %node.2.i47.i.i, %138 ], [ %node.2.i47.i.i, %142 ], [ %node.2.i47.i.i, %145 ], [ %node.2.i47.i.i, %102 ], [ %node.2.i47.i.i, %105 ], [ %node.2.i47.i.i, %97 ], [ %node.2.i47.i.i, %100 ], [ %node.2.i47.i.i, %92 ], [ %node.2.i47.i.i, %95 ], [ %node.2.i47.i.i, %111 ], [ %154, %147 ], [ %187, %180 ], [ %662, %.thread.i.i ]
  %depth.0.i.i = phi i32 [ 0, %60 ], [ %depth.0.i.i, %80 ], [ %depth.0.i.i, %939 ], [ %depth.0.i.i, %934 ], [ %depth.0.i.i, %tre_ast_new_literal.exit41.i.i ], [ %depth.0.i.i, %900 ], [ %depth.0.i.i, %797 ], [ %depth.0.i.i, %768 ], [ %depth.0.i.i, %744 ], [ %depth.0.i.i, %693 ], [ %depth.0.i.i, %653 ], [ %depth.0.i.i, %tre_parse_bracket.exit.i.i ], [ %depth.0.i.i, %373 ], [ %depth.0.i.i, %384 ], [ %341, %340 ], [ %341, %348 ], [ %341, %351 ], [ %341, %354 ], [ %depth.0.i.i, %189 ], [ %depth.0.i.i, %193 ], [ %depth.0.i.i, %321 ], [ %depth.0.i.i, %229 ], [ %depth.0.i.i, %218 ], [ %depth.0.i.i, %225 ], [ %depth.0.i.i, %222 ], [ %depth.0.i.i, %204 ], [ %depth.0.i.i, %195 ], [ %depth.0.i.i, %156 ], [ %depth.0.i.i, %160 ], [ %depth.0.i.i, %178 ], [ %depth.0.i.i, %162 ], [ %depth.0.i.i, %165 ], [ %depth.0.i.i, %169 ], [ %depth.0.i.i, %172 ], [ %depth.0.i.i, %175 ], [ %depth.0.i.i, %107 ], [ %131, %128 ], [ %133, %132 ], [ %depth.0.i.i, %135 ], [ %depth.0.i.i, %138 ], [ %depth.0.i.i, %142 ], [ %depth.0.i.i, %145 ], [ %depth.0.i.i, %102 ], [ %depth.0.i.i, %105 ], [ %depth.0.i.i, %97 ], [ %depth.0.i.i, %100 ], [ %depth.0.i.i, %92 ], [ %depth.0.i.i, %95 ], [ %depth.0.i.i, %111 ], [ %depth.0.i.i, %147 ], [ %depth.0.i.i, %180 ], [ %depth.0.i.i, %.thread.i.i ]
  %status.0.i.i = phi i32 [ %61, %60 ], [ 0, %80 ], [ 0, %939 ], [ 0, %934 ], [ 0, %tre_ast_new_literal.exit41.i.i ], [ 0, %900 ], [ 0, %797 ], [ 0, %768 ], [ 0, %744 ], [ 0, %693 ], [ %654, %653 ], [ 0, %tre_parse_bracket.exit.i.i ], [ 0, %373 ], [ 0, %384 ], [ %346, %340 ], [ %349, %348 ], [ %352, %351 ], [ 0, %354 ], [ 0, %189 ], [ 0, %193 ], [ %322, %321 ], [ 0, %229 ], [ 0, %218 ], [ 0, %225 ], [ 0, %222 ], [ %217, %204 ], [ 0, %195 ], [ 0, %156 ], [ 0, %160 ], [ 0, %178 ], [ %163, %162 ], [ %167, %165 ], [ %170, %169 ], [ %173, %172 ], [ 0, %175 ], [ 0, %107 ], [ %status.1.i.i, %128 ], [ %status.1134.i.i, %132 ], [ %136, %135 ], [ %140, %138 ], [ %143, %142 ], [ %146, %145 ], [ %103, %102 ], [ %106, %105 ], [ %98, %97 ], [ %101, %100 ], [ %93, %92 ], [ %96, %95 ], [ 0, %111 ], [ 0, %147 ], [ 0, %180 ], [ 0, %.thread.i.i ]
  %77 = load i32* %31, align 4, !tbaa !6
  %78 = icmp sgt i32 %77, %46
  %79 = icmp eq i32 %status.0.i.i, 0
  %or.cond.i.i = and i1 %78, %79
  br i1 %or.cond.i.i, label %80, label %.critedge.i.i

; <label>:80                                      ; preds = %.backedge.i.i
  %81 = add nsw i32 %77, -1
  store i32 %81, i32* %31, align 4, !tbaa !6
  %82 = sext i32 %81 to i64
  %83 = load i8*** %22, align 8, !tbaa !7
  %84 = getelementptr inbounds i8** %83, i64 %82
  %85 = load i8** %84, align 8, !tbaa !7
  %86 = ptrtoint i8* %85 to i64
  %87 = trunc i64 %86 to i32
  switch i32 %87, label %.backedge.i.i [
    i32 0, label %88
    i32 3, label %97
    i32 4, label %102
    i32 5, label %107
    i32 6, label %147
    i32 7, label %156
    i32 8, label %180
    i32 9, label %189
    i32 1, label %323
    i32 2, label %905
    i32 10, label %939
  ]

; <label>:88                                      ; preds = %80
  %89 = load i32* %44, align 8, !tbaa !6
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %95, label %92

; <label>:92                                      ; preds = %88
  %93 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 7 to i8*)) nounwind optsize
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %.backedge.i.i

; <label>:95                                      ; preds = %92, %88
  %96 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 3 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:97                                      ; preds = %80
  %98 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 5 to i8*)) nounwind optsize
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %.backedge.i.i

; <label>:100                                     ; preds = %97
  %101 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 4 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:102                                     ; preds = %80
  %103 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 9 to i8*)) nounwind optsize
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %.backedge.i.i

; <label>:105                                     ; preds = %102
  %106 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 1 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:107                                     ; preds = %80
  %108 = load i32** %41, align 8, !tbaa !7
  %109 = load i32** %67, align 8, !tbaa !7
  %110 = icmp ult i32* %108, %109
  br i1 %110, label %111, label %.backedge.i.i

; <label>:111                                     ; preds = %107
  %112 = load i32* %108, align 4, !tbaa !6
  %113 = load i32* %44, align 8, !tbaa !6
  %114 = and i32 %113, 1
  %115 = icmp ne i32 %114, 0
  %116 = icmp eq i32 %112, 124
  %or.cond9.i.i = and i1 %115, %116
  br i1 %or.cond9.i.i, label %.backedge.i.i, label %117

; <label>:117                                     ; preds = %111
  %118 = icmp eq i32 %112, 41
  %or.cond10.i.i = and i1 %115, %118
  %119 = icmp sgt i32 %depth.0.i.i, 0
  %or.cond11.i.i = and i1 %or.cond10.i.i, %119
  %.pre124.i.i = icmp eq i32 %114, 0
  br i1 %or.cond11.i.i, label %128, label %120

; <label>:120                                     ; preds = %117
  %121 = icmp eq i32 %112, 92
  %or.cond12.i.i = and i1 %.pre124.i.i, %121
  br i1 %or.cond12.i.i, label %122, label %135

; <label>:122                                     ; preds = %120
  %123 = getelementptr inbounds i32* %108, i64 1
  %124 = load i32* %123, align 4, !tbaa !6
  %125 = icmp eq i32 %124, 41
  br i1 %125, label %.thread132.i.i, label %135

.thread132.i.i:                                   ; preds = %122
  %126 = icmp eq i32 %depth.0.i.i, 0
  %status.1133.i.i = select i1 %126, i32 8, i32 0
  %127 = add nsw i32 %depth.0.i.i, -1
  br label %132

; <label>:128                                     ; preds = %117
  %129 = or i32 %114, %depth.0.i.i
  %130 = icmp eq i32 %129, 0
  %status.1.i.i = select i1 %130, i32 8, i32 0
  %131 = add nsw i32 %depth.0.i.i, -1
  br i1 %.pre124.i.i, label %132, label %.backedge.i.i

; <label>:132                                     ; preds = %128, %.thread132.i.i
  %133 = phi i32 [ %127, %.thread132.i.i ], [ %131, %128 ]
  %status.1134.i.i = phi i32 [ %status.1133.i.i, %.thread132.i.i ], [ %status.1.i.i, %128 ]
  %134 = getelementptr inbounds i32* %108, i64 2
  store i32* %134, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:135                                     ; preds = %122, %120
  %136 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 5 to i8*)) nounwind optsize
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %.backedge.i.i

; <label>:138                                     ; preds = %135
  %139 = bitcast %struct.tre_ast_node_t* %node.2.i47.i.i to i8*
  %140 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %139) nounwind optsize
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %.backedge.i.i

; <label>:142                                     ; preds = %138
  %143 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 6 to i8*)) nounwind optsize
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %.backedge.i.i

; <label>:145                                     ; preds = %142
  %146 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 4 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:147                                     ; preds = %80
  %148 = add nsw i32 %77, -2
  store i32 %148, i32* %31, align 4, !tbaa !6
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8** %83, i64 %149
  %151 = load i8** %150, align 8, !tbaa !7
  %152 = bitcast i8* %151 to %struct.tre_ast_node_t*
  %153 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %154 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %153, %struct.tre_ast_node_t* %152, %struct.tre_ast_node_t* %node.2.i47.i.i) nounwind optsize
  %155 = icmp eq %struct.tre_ast_node_t* %154, null
  br i1 %155, label %.loopexit, label %.backedge.i.i

; <label>:156                                     ; preds = %80
  %157 = load i32** %41, align 8, !tbaa !7
  %158 = load i32** %67, align 8, !tbaa !7
  %159 = icmp ult i32* %157, %158
  br i1 %159, label %160, label %.backedge.i.i

; <label>:160                                     ; preds = %156
  %161 = load i32* %157, align 4, !tbaa !6
  switch i32 %161, label %.backedge.i.i [
    i32 124, label %162
    i32 41, label %178
  ]

; <label>:162                                     ; preds = %160
  %163 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 7 to i8*)) nounwind optsize
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %.backedge.i.i

; <label>:165                                     ; preds = %162
  %166 = bitcast %struct.tre_ast_node_t* %node.2.i47.i.i to i8*
  %167 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %166) nounwind optsize
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %.backedge.i.i

; <label>:169                                     ; preds = %165
  %170 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 8 to i8*)) nounwind optsize
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %.backedge.i.i

; <label>:172                                     ; preds = %169
  %173 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 3 to i8*)) nounwind optsize
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %.backedge.i.i

; <label>:175                                     ; preds = %172
  %176 = load i32** %41, align 8, !tbaa !7
  %177 = getelementptr inbounds i32* %176, i64 1
  store i32* %177, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:178                                     ; preds = %160
  %179 = getelementptr inbounds i32* %157, i64 1
  store i32* %179, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:180                                     ; preds = %80
  %181 = add nsw i32 %77, -2
  store i32 %181, i32* %31, align 4, !tbaa !6
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8** %83, i64 %182
  %184 = load i8** %183, align 8, !tbaa !7
  %185 = bitcast i8* %184 to %struct.tre_ast_node_t*
  %186 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %187 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %186, %struct.tre_ast_node_t* %185, %struct.tre_ast_node_t* %node.2.i47.i.i) nounwind optsize
  %188 = icmp eq %struct.tre_ast_node_t* %187, null
  br i1 %188, label %.loopexit, label %.backedge.i.i

; <label>:189                                     ; preds = %80
  %190 = load i32** %41, align 8, !tbaa !7
  %191 = load i32** %67, align 8, !tbaa !7
  %192 = icmp ult i32* %190, %191
  br i1 %192, label %193, label %.backedge.i.i

; <label>:193                                     ; preds = %189
  %194 = load i32* %190, align 4, !tbaa !6
  switch i32 %194, label %.backedge.i.i [
    i32 43, label %195
    i32 63, label %195
    i32 42, label %199
    i32 92, label %218
    i32 123, label %229
  ]

; <label>:195                                     ; preds = %193, %193
  %196 = load i32* %44, align 8, !tbaa !6
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %.backedge.i.i, label %199

; <label>:199                                     ; preds = %195, %193
  %200 = getelementptr inbounds i32* %190, i64 1
  store i32* %200, i32** %41, align 8, !tbaa !7
  %201 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %202 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %201, i32 2, i64 16) nounwind optsize
  %203 = icmp eq %struct.tre_ast_node_t* %202, null
  br i1 %203, label %.loopexit, label %204

; <label>:204                                     ; preds = %199
  %205 = icmp eq i32 %194, 63
  %rep_max.0.i.i = select i1 %205, i32 1, i32 -1
  %206 = icmp eq i32 %194, 43
  %rep_min.0.i.i = zext i1 %206 to i32
  %207 = getelementptr inbounds %struct.tre_ast_node_t* %202, i64 0, i32 1
  %208 = load i8** %207, align 8, !tbaa !7
  %209 = bitcast i8* %208 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %node.2.i47.i.i, %struct.tre_ast_node_t** %209, align 8, !tbaa !7
  %210 = getelementptr inbounds i8* %208, i64 8
  %211 = bitcast i8* %210 to i32*
  store i32 %rep_min.0.i.i, i32* %211, align 4, !tbaa !6
  %212 = getelementptr inbounds i8* %208, i64 12
  %213 = bitcast i8* %212 to i32*
  store i32 %rep_max.0.i.i, i32* %213, align 4, !tbaa !6
  %214 = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i47.i.i, i64 0, i32 4
  %215 = load i32* %214, align 4, !tbaa !6
  %216 = getelementptr inbounds %struct.tre_ast_node_t* %202, i64 0, i32 4
  store i32 %215, i32* %216, align 4, !tbaa !6
  %217 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 9 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:218                                     ; preds = %193
  %219 = load i32* %44, align 8, !tbaa !6
  %220 = and i32 %219, 1
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %.backedge.i.i

; <label>:222                                     ; preds = %218
  %223 = getelementptr inbounds i32* %190, i64 1
  %224 = icmp ult i32* %223, %191
  br i1 %224, label %225, label %.backedge.i.i

; <label>:225                                     ; preds = %222
  %226 = load i32* %223, align 4, !tbaa !6
  %227 = icmp eq i32 %226, 123
  br i1 %227, label %228, label %.backedge.i.i

; <label>:228                                     ; preds = %225
  store i32* %223, i32** %41, align 8, !tbaa !7
  br label %233

; <label>:229                                     ; preds = %193
  %230 = load i32* %44, align 8, !tbaa !6
  %231 = and i32 %230, 1
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %.backedge.i.i, label %233

; <label>:233                                     ; preds = %229, %228
  %234 = phi i32 [ %230, %229 ], [ %219, %228 ]
  %235 = phi i32* [ %190, %229 ], [ %223, %228 ]
  %236 = getelementptr inbounds i32* %235, i64 1
  store i32* %236, i32** %41, align 8, !tbaa !7
  %237 = icmp ult i32* %236, %191
  br i1 %237, label %238, label %tre_parse_int.exit.i.i.i

; <label>:238                                     ; preds = %233
  %239 = load i32* %236, align 4, !tbaa !6
  %.off.i.i.i = add i32 %239, -48
  %240 = icmp ult i32 %.off.i.i.i, 10
  br i1 %240, label %.preheader29.i.i.i, label %tre_parse_int.exit.i.i.i

.preheader29.i.i.i:                               ; preds = %245, %238
  %num.0.i.i.i.i = phi i32 [ %248, %245 ], [ -1, %238 ]
  %r.0.i.i.i.i = phi i32* [ %249, %245 ], [ %236, %238 ]
  %241 = icmp ult i32* %r.0.i.i.i.i, %191
  br i1 %241, label %242, label %tre_parse_int.exit.i.i.i

; <label>:242                                     ; preds = %.preheader29.i.i.i
  %243 = load i32* %r.0.i.i.i.i, align 4, !tbaa !6
  %.off.i.i.i.i = add i32 %243, -48
  %244 = icmp ult i32 %.off.i.i.i.i, 10
  br i1 %244, label %245, label %tre_parse_int.exit.i.i.i

; <label>:245                                     ; preds = %242
  %246 = icmp slt i32 %num.0.i.i.i.i, 0
  %num.0.op.i.i.i.i = mul i32 %num.0.i.i.i.i, 10
  %num.0.op.op.i.i.i.i = add i32 %num.0.op.i.i.i.i, -48
  %247 = select i1 %246, i32 -48, i32 %num.0.op.op.i.i.i.i
  %248 = add i32 %243, %247
  %249 = getelementptr inbounds i32* %r.0.i.i.i.i, i64 1
  br label %.preheader29.i.i.i

tre_parse_int.exit.i.i.i:                         ; preds = %242, %.preheader29.i.i.i, %238, %233
  %r.0.i716.i.i.i = phi i32* [ %236, %238 ], [ %236, %233 ], [ %r.0.i.i.i.i, %.preheader29.i.i.i ], [ %r.0.i.i.i.i, %242 ]
  %min.0.i.i.i = phi i32 [ -1, %238 ], [ -1, %233 ], [ %num.0.i.i.i.i, %.preheader29.i.i.i ], [ %num.0.i.i.i.i, %242 ]
  %250 = icmp ult i32* %r.0.i716.i.i.i, %191
  br i1 %250, label %251, label %tre_parse_int.exit11.i.i.i

; <label>:251                                     ; preds = %tre_parse_int.exit.i.i.i
  %252 = load i32* %r.0.i716.i.i.i, align 4, !tbaa !6
  %253 = icmp eq i32 %252, 44
  br i1 %253, label %.preheader28.i.i.i, label %tre_parse_int.exit11.i.i.i

.preheader28.i.i.i:                               ; preds = %258, %251
  %num.0.i6.i.i.i = phi i32 [ %261, %258 ], [ -1, %251 ]
  %r.0.i716.pn.i.i.i = phi i32* [ %r.0.i7.i.i.i, %258 ], [ %r.0.i716.i.i.i, %251 ]
  %r.0.i7.i.i.i = getelementptr inbounds i32* %r.0.i716.pn.i.i.i, i64 1
  %254 = icmp ult i32* %r.0.i7.i.i.i, %191
  br i1 %254, label %255, label %tre_parse_int.exit11.i.i.i

; <label>:255                                     ; preds = %.preheader28.i.i.i
  %256 = load i32* %r.0.i7.i.i.i, align 4, !tbaa !6
  %.off.i8.i.i.i = add i32 %256, -48
  %257 = icmp ult i32 %.off.i8.i.i.i, 10
  br i1 %257, label %258, label %tre_parse_int.exit11.i.i.i

; <label>:258                                     ; preds = %255
  %259 = icmp slt i32 %num.0.i6.i.i.i, 0
  %num.0.op.i9.i.i.i = mul i32 %num.0.i6.i.i.i, 10
  %num.0.op.op.i10.i.i.i = add i32 %num.0.op.i9.i.i.i, -48
  %260 = select i1 %259, i32 -48, i32 %num.0.op.op.i10.i.i.i
  %261 = add i32 %256, %260
  br label %.preheader28.i.i.i

tre_parse_int.exit11.i.i.i:                       ; preds = %255, %.preheader28.i.i.i, %251, %tre_parse_int.exit.i.i.i
  %r.0.i715.i.i.i = phi i32* [ %r.0.i716.i.i.i, %251 ], [ %r.0.i716.i.i.i, %tre_parse_int.exit.i.i.i ], [ %r.0.i7.i.i.i, %.preheader28.i.i.i ], [ %r.0.i7.i.i.i, %255 ]
  %max.0.i.i.i = phi i32 [ %min.0.i.i.i, %251 ], [ %min.0.i.i.i, %tre_parse_int.exit.i.i.i ], [ %num.0.i6.i.i.i, %.preheader28.i.i.i ], [ %num.0.i6.i.i.i, %255 ]
  %262 = icmp sgt i32 %max.0.i.i.i, -1
  br i1 %262, label %263, label %.preheader.i.i.i

; <label>:263                                     ; preds = %tre_parse_int.exit11.i.i.i
  %264 = icmp sgt i32 %min.0.i.i.i, %max.0.i.i.i
  %265 = icmp sgt i32 %max.0.i.i.i, 255
  %or.cond.i.i.i = or i1 %264, %265
  br i1 %or.cond.i.i.i, label %.loopexit, label %.preheader.i.i.i

.preheader.i.i.i:                                 ; preds = %.critedge.i.i.i, %263, %tre_parse_int.exit11.i.i.i
  %r.0.i713.i.i.i = phi i32* [ %r.0.i714.ph.i.i.i, %.critedge.i.i.i ], [ %r.0.i715.i.i.i, %tre_parse_int.exit11.i.i.i ], [ %r.0.i715.i.i.i, %263 ]
  br label %.outer.i.i.i

.outer.i.i.i:                                     ; preds = %269, %269, %.preheader.i.i.i
  %r.0.i714.ph.i.i.i = phi i32* [ %r.0.i713.i.i.i, %.preheader.i.i.i ], [ %266, %269 ], [ %266, %269 ]
  %266 = getelementptr inbounds i32* %r.0.i714.ph.i.i.i, i64 1
  %267 = icmp ult i32* %266, %191
  br label %268

; <label>:268                                     ; preds = %269, %.outer.i.i.i
  %done.0.i.i.i = phi i1 [ false, %269 ], [ true, %.outer.i.i.i ]
  %or.cond3.i.i.i = and i1 %267, %done.0.i.i.i
  br i1 %or.cond3.i.i.i, label %269, label %.critedge.i.i.i

; <label>:269                                     ; preds = %268
  %270 = load i32* %r.0.i714.ph.i.i.i, align 4, !tbaa !6
  switch i32 %270, label %268 [
    i32 44, label %.outer.i.i.i
    i32 32, label %.outer.i.i.i
  ]

.critedge.i.i.i:                                  ; preds = %268
  %271 = icmp eq i32* %r.0.i713.i.i.i, %r.0.i714.ph.i.i.i
  br i1 %271, label %272, label %.preheader.i.i.i

; <label>:272                                     ; preds = %.critedge.i.i.i
  %273 = icmp ult i32* %r.0.i714.ph.i.i.i, %191
  br i1 %273, label %274, label %.loopexit

; <label>:274                                     ; preds = %272
  %275 = icmp eq i32* %r.0.i714.ph.i.i.i, %236
  br i1 %275, label %.loopexit, label %276

; <label>:276                                     ; preds = %274
  %277 = and i32 %234, 1
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %282, label %279

; <label>:279                                     ; preds = %276
  %280 = load i32* %r.0.i714.ph.i.i.i, align 4, !tbaa !6
  %281 = icmp eq i32 %280, 125
  br i1 %281, label %291, label %.loopexit

; <label>:282                                     ; preds = %276
  br i1 %267, label %283, label %.loopexit

; <label>:283                                     ; preds = %282
  %284 = load i32* %r.0.i714.ph.i.i.i, align 4, !tbaa !6
  %285 = icmp eq i32 %284, 92
  br i1 %285, label %286, label %.loopexit

; <label>:286                                     ; preds = %283
  %287 = load i32* %266, align 4, !tbaa !6
  %288 = icmp eq i32 %287, 125
  br i1 %288, label %289, label %.loopexit

; <label>:289                                     ; preds = %286
  %290 = getelementptr inbounds i32* %r.0.i714.ph.i.i.i, i64 2
  br label %291

; <label>:291                                     ; preds = %289, %279
  %storemerge.i.i.i = phi i32* [ %290, %289 ], [ %266, %279 ]
  %292 = or i32 %max.0.i.i.i, %min.0.i.i.i
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %305

; <label>:294                                     ; preds = %291
  %295 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %296 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %295, i32 0, i64 32) nounwind optsize
  %297 = icmp eq %struct.tre_ast_node_t* %296, null
  br i1 %297, label %.loopexit, label %tre_ast_new_literal.exit.i.i.i

tre_ast_new_literal.exit.i.i.i:                   ; preds = %294
  %298 = getelementptr inbounds %struct.tre_ast_node_t* %296, i64 0, i32 1
  %299 = load i8** %298, align 8, !tbaa !7
  %300 = bitcast i8* %299 to i64*
  store i64 -1, i64* %300, align 8, !tbaa !5
  %301 = getelementptr inbounds i8* %299, i64 8
  %302 = bitcast i8* %301 to i64*
  store i64 -1, i64* %302, align 8, !tbaa !5
  %303 = getelementptr inbounds i8* %299, i64 16
  %304 = bitcast i8* %303 to i32*
  store i32 -1, i32* %304, align 4, !tbaa !6
  br label %321

; <label>:305                                     ; preds = %291
  %306 = and i32 %max.0.i.i.i, %min.0.i.i.i
  %307 = icmp slt i32 %306, 0
  %308 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %309 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %308, i32 2, i64 16) nounwind optsize
  %310 = icmp eq %struct.tre_ast_node_t* %309, null
  br i1 %310, label %.loopexit, label %tre_ast_new_iter.exit.i.i.i

tre_ast_new_iter.exit.i.i.i:                      ; preds = %305
  %max.1.i.i.i = select i1 %307, i32 1, i32 %max.0.i.i.i
  %min.1.i.i.i = select i1 %307, i32 1, i32 %min.0.i.i.i
  %311 = getelementptr inbounds %struct.tre_ast_node_t* %309, i64 0, i32 1
  %312 = load i8** %311, align 8, !tbaa !7
  %313 = bitcast i8* %312 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %node.2.i47.i.i, %struct.tre_ast_node_t** %313, align 8, !tbaa !7
  %314 = getelementptr inbounds i8* %312, i64 8
  %315 = bitcast i8* %314 to i32*
  store i32 %min.1.i.i.i, i32* %315, align 4, !tbaa !6
  %316 = getelementptr inbounds i8* %312, i64 12
  %317 = bitcast i8* %316 to i32*
  store i32 %max.1.i.i.i, i32* %317, align 4, !tbaa !6
  %318 = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i47.i.i, i64 0, i32 4
  %319 = load i32* %318, align 4, !tbaa !6
  %320 = getelementptr inbounds %struct.tre_ast_node_t* %309, i64 0, i32 4
  store i32 %319, i32* %320, align 4, !tbaa !6
  br label %321

; <label>:321                                     ; preds = %tre_ast_new_iter.exit.i.i.i, %tre_ast_new_literal.exit.i.i.i
  %storemerge17.i.i.i = phi %struct.tre_ast_node_t* [ %309, %tre_ast_new_iter.exit.i.i.i ], [ %296, %tre_ast_new_literal.exit.i.i.i ]
  store i32* %storemerge.i.i.i, i32** %41, align 8, !tbaa !7
  %322 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 9 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:323                                     ; preds = %80
  %324 = load i32** %41, align 8, !tbaa !7
  %325 = load i32** %67, align 8, !tbaa !7
  %326 = icmp ult i32* %324, %325
  br i1 %326, label %327, label %.thread141.i.i

; <label>:327                                     ; preds = %323
  %328 = load i32* %324, align 4, !tbaa !6
  switch i32 %328, label %._crit_edge [
    i32 40, label %329
    i32 41, label %357
    i32 91, label %387
    i32 92, label %644
    i32 46, label %697
    i32 94, label %747
    i32 36, label %778
    i32 42, label %.thread141.i.i
  ]

._crit_edge:                                      ; preds = %327
  %.pre = load i32* %44, align 8, !tbaa !6
  br label %809

; <label>:329                                     ; preds = %327
  %330 = load i32* %44, align 8, !tbaa !6
  %331 = and i32 %330, 1
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %340

; <label>:333                                     ; preds = %329
  %334 = load i32** %63, align 8, !tbaa !7
  %335 = icmp ugt i32* %324, %334
  br i1 %335, label %336, label %.thread140.i.i

; <label>:336                                     ; preds = %333
  %337 = getelementptr inbounds i32* %324, i64 -1
  %338 = load i32* %337, align 4, !tbaa !6
  %339 = icmp eq i32 %338, 92
  br i1 %339, label %340, label %.thread140.i.i

; <label>:340                                     ; preds = %336, %329
  %341 = add nsw i32 %depth.0.i.i, 1
  %342 = getelementptr inbounds i32* %324, i64 1
  store i32* %342, i32** %41, align 8, !tbaa !7
  %343 = load i32* %.pre-phi123.i.i, align 4, !tbaa !6
  %344 = sext i32 %343 to i64
  %345 = inttoptr i64 %344 to i8*
  %346 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %345) nounwind optsize
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %.backedge.i.i

; <label>:348                                     ; preds = %340
  %349 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 2 to i8*)) nounwind optsize
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %.backedge.i.i

; <label>:351                                     ; preds = %348
  %352 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %.backedge.i.i

; <label>:354                                     ; preds = %351
  %355 = load i32* %.pre-phi123.i.i, align 4, !tbaa !6
  %356 = add nsw i32 %355, 1
  store i32 %356, i32* %.pre-phi123.i.i, align 4, !tbaa !6
  br label %.backedge.i.i

; <label>:357                                     ; preds = %327
  %358 = load i32* %44, align 8, !tbaa !6
  %359 = and i32 %358, 1
  %360 = icmp ne i32 %359, 0
  %361 = icmp sgt i32 %depth.0.i.i, 0
  %or.cond14.i.i = and i1 %360, %361
  br i1 %or.cond14.i.i, label %369, label %362

; <label>:362                                     ; preds = %357
  %363 = load i32** %63, align 8, !tbaa !7
  %364 = icmp ugt i32* %324, %363
  br i1 %364, label %365, label %.thread140.i.i

; <label>:365                                     ; preds = %362
  %366 = getelementptr inbounds i32* %324, i64 -1
  %367 = load i32* %366, align 4, !tbaa !6
  %368 = icmp eq i32 %367, 92
  br i1 %368, label %369, label %.thread140.i.i

; <label>:369                                     ; preds = %365, %357
  %370 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %371 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %370, i32 0, i64 32) nounwind optsize
  %372 = icmp eq %struct.tre_ast_node_t* %371, null
  br i1 %372, label %.loopexit, label %373

; <label>:373                                     ; preds = %369
  %374 = getelementptr inbounds %struct.tre_ast_node_t* %371, i64 0, i32 1
  %375 = load i8** %374, align 8, !tbaa !7
  %376 = bitcast i8* %375 to i64*
  store i64 -1, i64* %376, align 8, !tbaa !5
  %377 = getelementptr inbounds i8* %375, i64 8
  %378 = bitcast i8* %377 to i64*
  store i64 -1, i64* %378, align 8, !tbaa !5
  %379 = getelementptr inbounds i8* %375, i64 16
  %380 = bitcast i8* %379 to i32*
  store i32 -1, i32* %380, align 4, !tbaa !6
  %381 = load i32* %44, align 8, !tbaa !6
  %382 = and i32 %381, 1
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %.backedge.i.i

; <label>:384                                     ; preds = %373
  %385 = load i32** %41, align 8, !tbaa !7
  %386 = getelementptr inbounds i32* %385, i64 -1
  store i32* %386, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:387                                     ; preds = %327
  %388 = getelementptr inbounds i32* %324, i64 1
  store i32* %388, i32** %41, align 8, !tbaa !7
  call void @llvm.lifetime.start(i64 -1, i8* %68) nounwind
  call void @llvm.lifetime.start(i64 -1, i8* %69) nounwind
  %389 = call i8* @malloc(i64 256) nounwind optsize
  %390 = bitcast i8* %389 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t** %390, %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %391 = icmp eq i8* %389, null
  br i1 %391, label %.loopexit, label %392

; <label>:392                                     ; preds = %387
  %393 = load i32* %388, align 4, !tbaa !6
  %394 = icmp eq i32 %393, 94
  br i1 %394, label %395, label %397

; <label>:395                                     ; preds = %392
  %396 = getelementptr inbounds i32* %324, i64 2
  store i32* %396, i32** %41, align 8, !tbaa !7
  br label %397

; <label>:397                                     ; preds = %395, %392
  %398 = phi i32* [ %396, %395 ], [ %388, %392 ]
  %negate.0.i.i.i = phi i32 [ 1, %395 ], [ 0, %392 ]
  call void @llvm.lifetime.start(i64 -1, i8* %70) nounwind
  call void @llvm.lifetime.start(i64 -1, i8* %71) nounwind
  call void @llvm.lifetime.start(i64 -1, i8* %72) nounwind
  call void @llvm.lifetime.start(i64 -1, i8* %73) nounwind
  store i32 0, i32* %i.i.i.i.i, align 4, !tbaa !6
  store i32 32, i32* %max_i.i.i.i.i, align 4, !tbaa !6
  %399 = icmp eq i32 %negate.0.i.i.i, 0
  br label %.loopexit.i.i.i.i

.loopexit.i.i.i.i:                                ; preds = %._crit_edge.i.i.i.i, %.preheader14.i.i.i.i, %397
  %400 = phi i32 [ 0, %397 ], [ %483, %._crit_edge.i.i.i.i ], [ %401, %.preheader14.i.i.i.i ]
  %re.0.i.i.i.i = phi i32* [ %398, %397 ], [ %re.34659.i.i.i.i, %._crit_edge.i.i.i.i ], [ %re.1.i.i.i.i, %.preheader14.i.i.i.i ]
  %status.0.i.i.i.i = phi i32 [ 0, %397 ], [ %status.6.i.i.i.i, %._crit_edge.i.i.i.i ], [ 7, %.preheader14.i.i.i.i ]
  %.old4.i.i.i.i = icmp eq i32 %status.0.i.i.i.i, 0
  br i1 %.old4.i.i.i.i, label %.preheader14.i.i.i.i, label %tre_parse_bracket_items.exit.i.i.i

.preheader14.i.i.i.i:                             ; preds = %.preheader12.i.i.i.i, %.loopexit.i.i.i.i
  %401 = phi i32 [ %400, %.loopexit.i.i.i.i ], [ %483, %.preheader12.i.i.i.i ]
  %re.1.i.i.i.i = phi i32* [ %re.0.i.i.i.i, %.loopexit.i.i.i.i ], [ %re.34659.i.i.i.i, %.preheader12.i.i.i.i ]
  %402 = load i32** %67, align 8, !tbaa !7
  %403 = icmp eq i32* %re.1.i.i.i.i, %402
  br i1 %403, label %.loopexit.i.i.i.i, label %404

; <label>:404                                     ; preds = %.preheader14.i.i.i.i
  %405 = load i32* %re.1.i.i.i.i, align 4, !tbaa !6
  %406 = icmp eq i32 %405, 93
  br i1 %406, label %407, label %412

; <label>:407                                     ; preds = %404
  %408 = load i32** %41, align 8, !tbaa !7
  %409 = icmp ugt i32* %re.1.i.i.i.i, %408
  br i1 %409, label %410, label %412

; <label>:410                                     ; preds = %407
  %411 = getelementptr inbounds i32* %re.1.i.i.i.i, i64 1
  br label %tre_parse_bracket_items.exit.i.i.i

; <label>:412                                     ; preds = %407, %404
  %413 = getelementptr inbounds i32* %re.1.i.i.i.i, i64 2
  %414 = icmp ult i32* %413, %402
  %415 = getelementptr inbounds i32* %re.1.i.i.i.i, i64 1
  br i1 %414, label %416, label %._crit_edge37.i.i.i.i

; <label>:416                                     ; preds = %412
  %417 = load i32* %415, align 4, !tbaa !6
  %418 = icmp eq i32 %417, 45
  br i1 %418, label %419, label %._crit_edge37.i.i.i.i

; <label>:419                                     ; preds = %416
  %420 = load i32* %413, align 4, !tbaa !6
  %421 = icmp eq i32 %420, 93
  br i1 %421, label %._crit_edge37.i.i.i.i, label %422

; <label>:422                                     ; preds = %419
  %423 = getelementptr inbounds i32* %re.1.i.i.i.i, i64 3
  %424 = icmp sgt i32 %405, %420
  br i1 %424, label %tre_parse_bracket_items.exit.i.i.i, label %.thread51.i.i.i.i

._crit_edge37.i.i.i.i:                            ; preds = %419, %416, %412
  %425 = icmp ult i32* %415, %402
  %426 = icmp eq i32 %405, 91
  %or.cond63.i.i.i.i = and i1 %425, %426
  br i1 %or.cond63.i.i.i.i, label %427, label %thread-pre-split.i.i.i.i

; <label>:427                                     ; preds = %._crit_edge37.i.i.i.i
  %428 = load i32* %415, align 4, !tbaa !6
  switch i32 %428, label %.thread51.i.i.i.i [
    i32 46, label %tre_parse_bracket_items.exit.i.i.i
    i32 61, label %tre_parse_bracket_items.exit.i.i.i
    i32 58, label %.preheader.i.i.i.i
  ]

.preheader.i.i.i.i:                               ; preds = %433, %427
  %endptr.0.i.i.i.i = phi i32* [ %434, %433 ], [ %413, %427 ]
  %429 = icmp ult i32* %endptr.0.i.i.i.i, %402
  br i1 %429, label %430, label %.critedge7.i.i.i.i

; <label>:430                                     ; preds = %.preheader.i.i.i.i
  %431 = load i32* %endptr.0.i.i.i.i, align 4, !tbaa !6
  %432 = icmp eq i32 %431, 58
  br i1 %432, label %.critedge7.i.i.i.i, label %433

; <label>:433                                     ; preds = %430
  %434 = getelementptr inbounds i32* %endptr.0.i.i.i.i, i64 1
  br label %.preheader.i.i.i.i

.critedge7.i.i.i.i:                               ; preds = %430, %.preheader.i.i.i.i
  %435 = icmp eq i32* %endptr.0.i.i.i.i, %402
  br i1 %435, label %tre_parse_bracket_items.exit.i.i.i, label %436

; <label>:436                                     ; preds = %.critedge7.i.i.i.i
  %437 = ptrtoint i32* %endptr.0.i.i.i.i to i64
  %438 = ptrtoint i32* %re.1.i.i.i.i to i64
  %439 = sub i64 %437, %438
  %440 = ashr exact i64 %439, 2
  %441 = add nsw i64 %440, -2
  %442 = icmp slt i64 %441, 64
  br i1 %442, label %443, label %451

; <label>:443                                     ; preds = %436
  %sext.i.i.i.i = shl i64 %441, 32
  %phitmp5.i.i.i.i = ashr exact i64 %sext.i.i.i.i, 32
  br label %451

thread-pre-split.i.i.i.i:                         ; preds = %._crit_edge37.i.i.i.i
  %444 = icmp eq i32 %405, 45
  br i1 %444, label %445, label %.thread51.i.i.i.i

; <label>:445                                     ; preds = %thread-pre-split.i.i.i.i
  %446 = load i32* %415, align 4, !tbaa !6
  %447 = icmp eq i32 %446, 93
  br i1 %447, label %.thread51.i.i.i.i, label %448

; <label>:448                                     ; preds = %445
  %449 = load i32** %41, align 8, !tbaa !7
  %450 = icmp eq i32* %449, %re.1.i.i.i.i
  br i1 %450, label %.thread51.i.i.i.i, label %tre_parse_bracket_items.exit.i.i.i

; <label>:451                                     ; preds = %443, %436
  %452 = phi i64 [ %phitmp5.i.i.i.i, %443 ], [ 63, %436 ]
  %453 = call i32* @wcsncpy(i32* %74, i32* %413, i64 %452) nounwind optsize
  %454 = getelementptr inbounds [64 x i32]* %tmp_wcs.i.i.i.i, i64 0, i64 %452
  store i32 0, i32* %454, align 4, !tbaa !6
  %455 = call i64 @wcstombs(i8* %72, i32* %74, i64 63) nounwind optsize
  %sext6.i.i.i.i = shl i64 %455, 32
  %456 = ashr exact i64 %sext6.i.i.i.i, 32
  %457 = getelementptr inbounds [64 x i8]* %tmp_str.i.i.i.i, i64 0, i64 %456
  store i8 0, i8* %457, align 1, !tbaa !0
  %458 = call i32 @wctype(i8* %72) nounwind optsize
  %459 = icmp eq i32 %458, 0
  %status.2.i.i.i.i = select i1 %459, i32 4, i32 0
  %460 = getelementptr inbounds i32* %endptr.0.i.i.i.i, i64 2
  br i1 %459, label %tre_parse_bracket_items.exit.i.i.i, label %461

; <label>:461                                     ; preds = %451
  br i1 %399, label %.thread51.i.i.i.i, label %462

; <label>:462                                     ; preds = %461
  %463 = icmp sgt i32 %401, 63
  br i1 %463, label %._crit_edge.i.i.i.i, label %464

; <label>:464                                     ; preds = %462
  %465 = add nsw i32 %401, 1
  %466 = sext i32 %401 to i64
  %467 = getelementptr inbounds [64 x i32]* %neg_classes.i.i.i, i64 0, i64 %466
  store i32 %458, i32* %467, align 4, !tbaa !6
  br label %._crit_edge.i.i.i.i

.thread51.i.i.i.i:                                ; preds = %461, %448, %445, %thread-pre-split.i.i.i.i, %427, %422
  %468 = phi i1 [ true, %461 ], [ false, %thread-pre-split.i.i.i.i ], [ false, %445 ], [ false, %448 ], [ false, %422 ], [ false, %427 ]
  %re.34660.i.i.i.i = phi i32* [ %460, %461 ], [ %415, %thread-pre-split.i.i.i.i ], [ %415, %445 ], [ %415, %448 ], [ %423, %422 ], [ %415, %427 ]
  %class.14758.i.i.i.i = phi i32 [ %458, %461 ], [ 0, %thread-pre-split.i.i.i.i ], [ 0, %445 ], [ 0, %448 ], [ 0, %422 ], [ 0, %427 ]
  %min.04856.i.i.i.i = phi i32 [ 0, %461 ], [ %405, %thread-pre-split.i.i.i.i ], [ 45, %445 ], [ 45, %448 ], [ %405, %422 ], [ 91, %427 ]
  %max.04955.i.i.i.i = phi i32 [ 2147483647, %461 ], [ %405, %thread-pre-split.i.i.i.i ], [ 45, %445 ], [ 45, %448 ], [ %420, %422 ], [ 91, %427 ]
  %469 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %470 = call fastcc i32 @tre_new_item(%struct.tre_mem_struct* %469, i32 %min.04856.i.i.i.i, i32 %max.04955.i.i.i.i, i32* %i.i.i.i.i, i32* %max_i.i.i.i.i, %struct.tre_ast_node_t*** %items.i.i.i) nounwind optsize
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %tre_parse_bracket_items.exit.i.i.i

; <label>:472                                     ; preds = %.thread51.i.i.i.i
  %473 = load i32* %i.i.i.i.i, align 4, !tbaa !6
  %474 = add nsw i32 %473, -1
  %475 = sext i32 %474 to i64
  %476 = load %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %477 = getelementptr inbounds %struct.tre_ast_node_t** %476, i64 %475
  %478 = load %struct.tre_ast_node_t** %477, align 8, !tbaa !7
  %479 = getelementptr inbounds %struct.tre_ast_node_t* %478, i64 0, i32 1
  %480 = load i8** %479, align 8, !tbaa !7
  %481 = getelementptr inbounds i8* %480, i64 20
  %482 = bitcast i8* %481 to i32*
  store i32 %class.14758.i.i.i.i, i32* %482, align 4, !tbaa !6
  br label %._crit_edge.i.i.i.i

._crit_edge.i.i.i.i:                              ; preds = %472, %464, %462
  %483 = phi i32 [ %465, %464 ], [ %401, %472 ], [ %401, %462 ]
  %484 = phi i1 [ true, %464 ], [ %468, %472 ], [ true, %462 ]
  %re.34659.i.i.i.i = phi i32* [ %460, %464 ], [ %re.34660.i.i.i.i, %472 ], [ %460, %462 ]
  %min.04857.i.i.i.i = phi i32 [ 0, %464 ], [ %min.04856.i.i.i.i, %472 ], [ 0, %462 ]
  %max.04954.i.i.i.i = phi i32 [ 2147483647, %464 ], [ %max.04955.i.i.i.i, %472 ], [ 2147483647, %462 ]
  %status.6.i.i.i.i = phi i32 [ 0, %464 ], [ 0, %472 ], [ 12, %462 ]
  %485 = load i32* %44, align 8, !tbaa !6
  %486 = and i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %brmerge.i.i.i.i = or i1 %487, %484
  %brmerge.not.i.i.i.i = xor i1 %brmerge.i.i.i.i, true
  %488 = icmp eq i32 %status.6.i.i.i.i, 0
  %or.cond8.i.i.i.i = and i1 %488, %brmerge.not.i.i.i.i
  br i1 %or.cond8.i.i.i.i, label %.preheader12.i.i.i.i, label %.loopexit.i.i.i.i

.preheader12.i.i.i.i:                             ; preds = %526, %507, %._crit_edge.i.i.i.i
  %min.1.i.i.i.i = phi i32 [ %min.04857.i.i.i.i, %._crit_edge.i.i.i.i ], [ %min.4.i.i.i.i, %526 ], [ %510, %507 ]
  %489 = icmp sgt i32 %min.1.i.i.i.i, %max.04954.i.i.i.i
  br i1 %489, label %.preheader14.i.i.i.i, label %490

; <label>:490                                     ; preds = %.preheader12.i.i.i.i
  %491 = call i32 @iswlower(i32 %min.1.i.i.i.i) nounwind optsize
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %507, label %493

; <label>:493                                     ; preds = %490
  %494 = call i32 @towupper(i32 %min.1.i.i.i.i) nounwind optsize
  br label %495

; <label>:495                                     ; preds = %503, %493
  %min.2.in.i.i.i.i = phi i32 [ %min.1.i.i.i.i, %493 ], [ %min.2.i.i.i.i, %503 ]
  %ccurr.0.i.i.i.i = phi i32 [ %494, %493 ], [ %504, %503 ]
  %min.2.i.i.i.i = add nsw i32 %min.2.in.i.i.i.i, 1
  %496 = call i32 @iswlower(i32 %min.2.i.i.i.i) nounwind optsize
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %.critedge.i.i.i.i, label %498

; <label>:498                                     ; preds = %495
  %499 = call i32 @towupper(i32 %min.2.i.i.i.i) nounwind optsize
  %500 = add nsw i32 %ccurr.0.i.i.i.i, 1
  %501 = icmp ne i32 %499, %500
  %502 = icmp sgt i32 %min.2.i.i.i.i, %max.04954.i.i.i.i
  %or.cond9.i.i.i.i = or i1 %501, %502
  br i1 %or.cond9.i.i.i.i, label %.critedge.i.i.i.i, label %503

; <label>:503                                     ; preds = %498
  %504 = call i32 @towupper(i32 %min.2.i.i.i.i) nounwind optsize
  br label %495

.critedge.i.i.i.i:                                ; preds = %498, %495
  %505 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %506 = call fastcc i32 @tre_new_item(%struct.tre_mem_struct* %505, i32 %494, i32 %ccurr.0.i.i.i.i, i32* %i.i.i.i.i, i32* %max_i.i.i.i.i, %struct.tre_ast_node_t*** %items.i.i.i) nounwind optsize
  br label %526

; <label>:507                                     ; preds = %490
  %508 = call i32 @iswupper(i32 %min.1.i.i.i.i) nounwind optsize
  %509 = icmp eq i32 %508, 0
  %510 = add nsw i32 %min.1.i.i.i.i, 1
  br i1 %509, label %.preheader12.i.i.i.i, label %511

; <label>:511                                     ; preds = %507
  %512 = call i32 @towlower(i32 %min.1.i.i.i.i) nounwind optsize
  br label %513

; <label>:513                                     ; preds = %521, %511
  %min.3.i.i.i.i = phi i32 [ %510, %511 ], [ %522, %521 ]
  %ccurr.1.i.i.i.i = phi i32 [ %512, %511 ], [ %523, %521 ]
  %514 = call i32 @iswupper(i32 %min.3.i.i.i.i) nounwind optsize
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %.critedge2.i.i.i.i, label %516

; <label>:516                                     ; preds = %513
  %517 = call i32 @towlower(i32 %min.3.i.i.i.i) nounwind optsize
  %518 = add nsw i32 %ccurr.1.i.i.i.i, 1
  %519 = icmp ne i32 %517, %518
  %520 = icmp sgt i32 %min.3.i.i.i.i, %max.04954.i.i.i.i
  %or.cond10.i.i.i.i = or i1 %519, %520
  br i1 %or.cond10.i.i.i.i, label %.critedge2.i.i.i.i, label %521

; <label>:521                                     ; preds = %516
  %522 = add nsw i32 %min.3.i.i.i.i, 1
  %523 = call i32 @towlower(i32 %min.3.i.i.i.i) nounwind optsize
  br label %513

.critedge2.i.i.i.i:                               ; preds = %516, %513
  %524 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %525 = call fastcc i32 @tre_new_item(%struct.tre_mem_struct* %524, i32 %512, i32 %ccurr.1.i.i.i.i, i32* %i.i.i.i.i, i32* %max_i.i.i.i.i, %struct.tre_ast_node_t*** %items.i.i.i) nounwind optsize
  br label %526

; <label>:526                                     ; preds = %.critedge2.i.i.i.i, %.critedge.i.i.i.i
  %status.8.i.i.i.i = phi i32 [ %506, %.critedge.i.i.i.i ], [ %525, %.critedge2.i.i.i.i ]
  %min.4.i.i.i.i = phi i32 [ %min.2.i.i.i.i, %.critedge.i.i.i.i ], [ %min.3.i.i.i.i, %.critedge2.i.i.i.i ]
  %527 = icmp eq i32 %status.8.i.i.i.i, 0
  br i1 %527, label %.preheader12.i.i.i.i, label %tre_parse_bracket_items.exit.i.i.i

tre_parse_bracket_items.exit.i.i.i:               ; preds = %526, %.thread51.i.i.i.i, %451, %448, %.critedge7.i.i.i.i, %427, %427, %422, %410, %.loopexit.i.i.i.i
  %528 = phi i32 [ %401, %410 ], [ %483, %526 ], [ %401, %422 ], [ %401, %427 ], [ %401, %427 ], [ %401, %.critedge7.i.i.i.i ], [ %401, %448 ], [ %401, %451 ], [ %401, %.thread51.i.i.i.i ], [ %400, %.loopexit.i.i.i.i ]
  %re.4.i.i.i.i = phi i32* [ %411, %410 ], [ %re.34659.i.i.i.i, %526 ], [ %423, %422 ], [ %re.1.i.i.i.i, %427 ], [ %re.1.i.i.i.i, %427 ], [ %re.1.i.i.i.i, %.critedge7.i.i.i.i ], [ %415, %448 ], [ %460, %451 ], [ %re.34660.i.i.i.i, %.thread51.i.i.i.i ], [ %re.0.i.i.i.i, %.loopexit.i.i.i.i ]
  %status.10.i.i.i.i = phi i32 [ 0, %410 ], [ %status.8.i.i.i.i, %526 ], [ 11, %422 ], [ 3, %427 ], [ 3, %427 ], [ 4, %.critedge7.i.i.i.i ], [ 11, %448 ], [ %status.2.i.i.i.i, %451 ], [ %470, %.thread51.i.i.i.i ], [ %status.0.i.i.i.i, %.loopexit.i.i.i.i ]
  %529 = load i32* %i.i.i.i.i, align 4, !tbaa !6
  store i32* %re.4.i.i.i.i, i32** %41, align 8, !tbaa !7
  call void @llvm.lifetime.end(i64 -1, i8* %70) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %71) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %72) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %73) nounwind
  %530 = icmp eq i32 %status.10.i.i.i.i, 0
  br i1 %530, label %531, label %tre_parse_bracket.exit.i.i

; <label>:531                                     ; preds = %tre_parse_bracket_items.exit.i.i.i
  %532 = icmp ne i32 %negate.0.i.i.i, 0
  br i1 %532, label %533, label %.preheader16.i.i.i

; <label>:533                                     ; preds = %531
  %534 = load %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %535 = bitcast %struct.tre_ast_node_t** %534 to i8*
  %536 = sext i32 %529 to i64
  call void @qsort(i8* %535, i64 %536, i64 8, i32 (i8*, i8*)* @tre_compare_items) nounwind optsize
  br label %.preheader16.i.i.i

.preheader16.i.i.i:                               ; preds = %533, %531
  %537 = icmp sgt i32 %528, 0
  %538 = add nsw i32 %528, 1
  %539 = sext i32 %538 to i64
  %540 = shl nsw i64 %539, 3
  %541 = add i32 %528, -1
  %542 = zext i32 %541 to i64
  %543 = add i64 %542, 1
  br label %544

; <label>:544                                     ; preds = %604, %.preheader16.i.i.i
  %indvars.iv49.i.i.i = phi i64 [ 0, %.preheader16.i.i.i ], [ %indvars.iv.next50.i.i.i, %604 ]
  %curr_min.0.i.i.i = phi i32 [ 0, %.preheader16.i.i.i ], [ %curr_min.14.i.i.i, %604 ]
  %curr_max.0.i.i.i = phi i32 [ 0, %.preheader16.i.i.i ], [ %curr_max.15.i.i.i, %604 ]
  %status.0.i.i.i = phi i32 [ 0, %.preheader16.i.i.i ], [ %status.2.i.i.i, %604 ]
  %node.0.i.i.i = phi %struct.tre_ast_node_t* [ null, %.preheader16.i.i.i ], [ %node.1.i.i.i, %604 ]
  %545 = trunc i64 %indvars.iv49.i.i.i to i32
  %546 = icmp slt i32 %545, %529
  %547 = icmp eq i32 %status.0.i.i.i, 0
  %or.cond.i23.i.i = and i1 %546, %547
  br i1 %or.cond.i23.i.i, label %548, label %.critedge.i24.i.i

; <label>:548                                     ; preds = %544
  %549 = load %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %550 = getelementptr inbounds %struct.tre_ast_node_t** %549, i64 %indvars.iv49.i.i.i
  %551 = load %struct.tre_ast_node_t** %550, align 8, !tbaa !7
  %552 = getelementptr inbounds %struct.tre_ast_node_t* %551, i64 0, i32 1
  %553 = load i8** %552, align 8, !tbaa !7
  %554 = bitcast i8* %553 to %struct.tre_literal_t*
  %555 = bitcast i8* %553 to i64*
  %556 = load i64* %555, align 8, !tbaa !5
  %557 = trunc i64 %556 to i32
  %558 = getelementptr inbounds i8* %553, i64 8
  %559 = bitcast i8* %558 to i64*
  %560 = load i64* %559, align 8, !tbaa !5
  %561 = trunc i64 %560 to i32
  br i1 %532, label %562, label %574

; <label>:562                                     ; preds = %548
  %563 = icmp slt i32 %557, %curr_max.0.i.i.i
  br i1 %563, label %.thread.i.i.i, label %566

.thread.i.i.i:                                    ; preds = %562
  %564 = add nsw i32 %561, 1
  %565 = icmp slt i32 %564, %curr_max.0.i.i.i
  %curr_max.0..i.i.i = select i1 %565, i32 %curr_max.0.i.i.i, i32 %564
  br label %604

; <label>:566                                     ; preds = %562
  %567 = add nsw i32 %557, -1
  %568 = icmp slt i32 %567, %curr_min.0.i.i.i
  br i1 %568, label %572, label %569

; <label>:569                                     ; preds = %566
  %570 = sext i32 %curr_min.0.i.i.i to i64
  store i64 %570, i64* %555, align 8, !tbaa !5
  %571 = sext i32 %567 to i64
  store i64 %571, i64* %559, align 8, !tbaa !5
  br label %572

; <label>:572                                     ; preds = %569, %566
  %l.0.i.i.i = phi %struct.tre_literal_t* [ %554, %569 ], [ null, %566 ]
  %573 = add nsw i32 %561, 1
  br label %574

; <label>:574                                     ; preds = %572, %548
  %curr_min.1.i.i.i = phi i32 [ %573, %572 ], [ %curr_min.0.i.i.i, %548 ]
  %curr_max.1.i.i.i = phi i32 [ %573, %572 ], [ %curr_max.0.i.i.i, %548 ]
  %l.1.i.i.i = phi %struct.tre_literal_t* [ %l.0.i.i.i, %572 ], [ %554, %548 ]
  %575 = icmp eq %struct.tre_literal_t* %l.1.i.i.i, null
  br i1 %575, label %604, label %576

; <label>:576                                     ; preds = %574
  %577 = load i32* %75, align 8, !tbaa !6
  %578 = getelementptr inbounds %struct.tre_literal_t* %l.1.i.i.i, i64 0, i32 2
  store i32 %577, i32* %578, align 4, !tbaa !6
  br i1 %537, label %579, label %589

; <label>:579                                     ; preds = %576
  %580 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %581 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %580, i32 0, i8* null, i32 0, i64 %540) nounwind optsize
  %582 = bitcast i8* %581 to i32*
  %583 = getelementptr inbounds %struct.tre_literal_t* %l.1.i.i.i, i64 0, i32 4
  store i32* %582, i32** %583, align 8, !tbaa !7
  %584 = icmp eq i8* %581, null
  br i1 %584, label %tre_parse_bracket.exit.i.i, label %.lr.ph13.i.i.i

.lr.ph13.i.i.i:                                   ; preds = %.lr.ph13.i.i.i, %579
  %indvars.iv42.i.i.i = phi i64 [ %indvars.iv.next43.i.i.i, %.lr.ph13.i.i.i ], [ 0, %579 ]
  %585 = getelementptr inbounds [64 x i32]* %neg_classes.i.i.i, i64 0, i64 %indvars.iv42.i.i.i
  %586 = load i32* %585, align 4, !tbaa !6
  %587 = getelementptr inbounds i32* %582, i64 %indvars.iv42.i.i.i
  store i32 %586, i32* %587, align 4, !tbaa !6
  %indvars.iv.next43.i.i.i = add i64 %indvars.iv42.i.i.i, 1
  %lftr.wideiv82 = trunc i64 %indvars.iv.next43.i.i.i to i32
  %exitcond83 = icmp eq i32 %lftr.wideiv82, %528
  br i1 %exitcond83, label %._crit_edge14.i.i.i, label %.lr.ph13.i.i.i

._crit_edge14.i.i.i:                              ; preds = %.lr.ph13.i.i.i
  %588 = getelementptr inbounds i32* %582, i64 %543
  store i32 0, i32* %588, align 4, !tbaa !6
  br label %591

; <label>:589                                     ; preds = %576
  %590 = getelementptr inbounds %struct.tre_literal_t* %l.1.i.i.i, i64 0, i32 4
  store i32* null, i32** %590, align 8, !tbaa !7
  br label %591

; <label>:591                                     ; preds = %589, %._crit_edge14.i.i.i
  %592 = icmp eq %struct.tre_ast_node_t* %node.0.i.i.i, null
  br i1 %592, label %593, label %597

; <label>:593                                     ; preds = %591
  %594 = load %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %595 = getelementptr inbounds %struct.tre_ast_node_t** %594, i64 %indvars.iv49.i.i.i
  %596 = load %struct.tre_ast_node_t** %595, align 8, !tbaa !7
  br label %604

; <label>:597                                     ; preds = %591
  %598 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %599 = load %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %600 = getelementptr inbounds %struct.tre_ast_node_t** %599, i64 %indvars.iv49.i.i.i
  %601 = load %struct.tre_ast_node_t** %600, align 8, !tbaa !7
  %602 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %598, %struct.tre_ast_node_t* %node.0.i.i.i, %struct.tre_ast_node_t* %601) nounwind optsize
  %603 = icmp eq %struct.tre_ast_node_t* %602, null
  %status.1.i.i.i = select i1 %603, i32 12, i32 0
  br label %604

; <label>:604                                     ; preds = %597, %593, %574, %.thread.i.i.i
  %curr_max.15.i.i.i = phi i32 [ %curr_max.1.i.i.i, %593 ], [ %curr_max.1.i.i.i, %574 ], [ %curr_max.1.i.i.i, %597 ], [ %curr_max.0..i.i.i, %.thread.i.i.i ]
  %curr_min.14.i.i.i = phi i32 [ %curr_min.1.i.i.i, %593 ], [ %curr_min.1.i.i.i, %574 ], [ %curr_min.1.i.i.i, %597 ], [ %curr_min.0.i.i.i, %.thread.i.i.i ]
  %status.2.i.i.i = phi i32 [ 0, %593 ], [ 0, %574 ], [ %status.1.i.i.i, %597 ], [ 0, %.thread.i.i.i ]
  %node.1.i.i.i = phi %struct.tre_ast_node_t* [ %596, %593 ], [ %node.0.i.i.i, %574 ], [ %602, %597 ], [ %node.0.i.i.i, %.thread.i.i.i ]
  %indvars.iv.next50.i.i.i = add i64 %indvars.iv49.i.i.i, 1
  br label %544

.critedge.i24.i.i:                                ; preds = %544
  %.not.i.i.i = icmp ne i32 %status.0.i.i.i, 0
  %.not3.i.i.i = xor i1 %532, true
  %brmerge.i.i.i = or i1 %.not.i.i.i, %.not3.i.i.i
  br i1 %brmerge.i.i.i, label %tre_parse_bracket.exit.i.i, label %605

; <label>:605                                     ; preds = %.critedge.i24.i.i
  %606 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %607 = load i32* %75, align 8, !tbaa !6
  %608 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %606, i32 0, i64 32) nounwind optsize
  %609 = icmp eq %struct.tre_ast_node_t* %608, null
  br i1 %609, label %tre_parse_bracket.exit.i.i, label %610

; <label>:610                                     ; preds = %605
  %611 = getelementptr inbounds %struct.tre_ast_node_t* %608, i64 0, i32 1
  %612 = load i8** %611, align 8, !tbaa !7
  %613 = sext i32 %curr_min.0.i.i.i to i64
  %614 = bitcast i8* %612 to i64*
  store i64 %613, i64* %614, align 8, !tbaa !5
  %615 = getelementptr inbounds i8* %612, i64 8
  %616 = bitcast i8* %615 to i64*
  store i64 2147483647, i64* %616, align 8, !tbaa !5
  %617 = getelementptr inbounds i8* %612, i64 16
  %618 = bitcast i8* %617 to i32*
  store i32 %607, i32* %618, align 4, !tbaa !6
  br i1 %537, label %619, label %630

; <label>:619                                     ; preds = %610
  %620 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %621 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %620, i32 0, i8* null, i32 0, i64 %540) nounwind optsize
  %622 = bitcast i8* %621 to i32*
  %623 = getelementptr inbounds i8* %612, i64 24
  %624 = bitcast i8* %623 to i32**
  store i32* %622, i32** %624, align 8, !tbaa !7
  %625 = icmp eq i8* %621, null
  br i1 %625, label %tre_parse_bracket.exit.i.i, label %.lr.ph.i.i.i

.lr.ph.i.i.i:                                     ; preds = %.lr.ph.i.i.i, %619
  %indvars.iv.i.i.i = phi i64 [ %indvars.iv.next.i.i.i, %.lr.ph.i.i.i ], [ 0, %619 ]
  %626 = getelementptr inbounds [64 x i32]* %neg_classes.i.i.i, i64 0, i64 %indvars.iv.i.i.i
  %627 = load i32* %626, align 4, !tbaa !6
  %628 = getelementptr inbounds i32* %622, i64 %indvars.iv.i.i.i
  store i32 %627, i32* %628, align 4, !tbaa !6
  %indvars.iv.next.i.i.i = add i64 %indvars.iv.i.i.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i.i.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %528
  br i1 %exitcond, label %._crit_edge.i.i.i, label %.lr.ph.i.i.i

._crit_edge.i.i.i:                                ; preds = %.lr.ph.i.i.i
  %629 = getelementptr inbounds i32* %622, i64 %543
  store i32 0, i32* %629, align 4, !tbaa !6
  br label %633

; <label>:630                                     ; preds = %610
  %631 = getelementptr inbounds i8* %612, i64 24
  %632 = bitcast i8* %631 to i32**
  store i32* null, i32** %632, align 8, !tbaa !7
  br label %633

; <label>:633                                     ; preds = %630, %._crit_edge.i.i.i
  %634 = icmp eq %struct.tre_ast_node_t* %node.0.i.i.i, null
  br i1 %634, label %tre_parse_bracket.exit.i.i, label %635

; <label>:635                                     ; preds = %633
  %636 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %637 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %636, %struct.tre_ast_node_t* %node.0.i.i.i, %struct.tre_ast_node_t* %608) nounwind optsize
  %638 = icmp eq %struct.tre_ast_node_t* %637, null
  %status.4.i.i.i = select i1 %638, i32 12, i32 0
  br label %tre_parse_bracket.exit.i.i

tre_parse_bracket.exit.i.i:                       ; preds = %635, %633, %619, %605, %.critedge.i24.i.i, %579, %tre_parse_bracket_items.exit.i.i.i
  %status.5.i.i.i = phi i32 [ %status.4.i.i.i, %635 ], [ %status.10.i.i.i.i, %tre_parse_bracket_items.exit.i.i.i ], [ %status.0.i.i.i, %.critedge.i24.i.i ], [ 12, %605 ], [ 12, %619 ], [ %status.0.i.i.i, %633 ], [ 12, %579 ]
  %node.2.i.i.i = phi %struct.tre_ast_node_t* [ %637, %635 ], [ null, %tre_parse_bracket_items.exit.i.i.i ], [ %node.0.i.i.i, %.critedge.i24.i.i ], [ %node.0.i.i.i, %605 ], [ %node.0.i.i.i, %619 ], [ %608, %633 ], [ %node.0.i.i.i, %579 ]
  %639 = load %struct.tre_ast_node_t*** %items.i.i.i, align 8, !tbaa !7
  %640 = bitcast %struct.tre_ast_node_t** %639 to i8*
  call void @free(i8* %640) nounwind optsize
  %641 = load i32* %75, align 8, !tbaa !6
  %642 = add nsw i32 %641, 1
  store i32 %642, i32* %75, align 8, !tbaa !6
  call void @llvm.lifetime.end(i64 -1, i8* %68) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %69) nounwind
  %643 = icmp eq i32 %status.5.i.i.i, 0
  br i1 %643, label %.backedge.i.i, label %.loopexit

; <label>:644                                     ; preds = %327
  %645 = load i32* %44, align 8, !tbaa !6
  %646 = and i32 %645, 1
  %647 = icmp eq i32 %646, 0
  %648 = getelementptr inbounds i32* %324, i64 1
  %649 = icmp ult i32* %648, %325
  br i1 %647, label %650, label %655

; <label>:650                                     ; preds = %644
  br i1 %649, label %651, label %.loopexit

; <label>:651                                     ; preds = %650
  %652 = load i32* %648, align 4, !tbaa !6
  %.off.i.i = add i32 %652, -40
  %switch.i.i = icmp ult i32 %.off.i.i, 2
  store i32* %648, i32** %41, align 8, !tbaa !7
  br i1 %switch.i.i, label %653, label %656

; <label>:653                                     ; preds = %651
  %654 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 1 to i8*)) nounwind optsize
  br label %.backedge.i.i

; <label>:655                                     ; preds = %644
  br i1 %649, label %._crit_edge111.i.i, label %.loopexit

._crit_edge111.i.i:                               ; preds = %655
  store i32* %648, i32** %41, align 8, !tbaa !7
  %.pre.i.pre.i = load i32* %648, align 4, !tbaa !6
  br label %678

; <label>:656                                     ; preds = %651
  %657 = add i32 %652, -48
  %658 = icmp ult i32 %657, 10
  br i1 %658, label %659, label %678

; <label>:659                                     ; preds = %656
  %660 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %661 = load i32* %75, align 8, !tbaa !6
  %662 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %660, i32 0, i64 32) nounwind optsize
  %663 = icmp eq %struct.tre_ast_node_t* %662, null
  br i1 %663, label %.loopexit, label %.thread.i.i

.thread.i.i:                                      ; preds = %659
  %664 = getelementptr inbounds %struct.tre_ast_node_t* %662, i64 0, i32 1
  %665 = load i8** %664, align 8, !tbaa !7
  %666 = bitcast i8* %665 to i64*
  store i64 -4, i64* %666, align 8, !tbaa !5
  %667 = sext i32 %657 to i64
  %668 = getelementptr inbounds i8* %665, i64 8
  %669 = bitcast i8* %668 to i64*
  store i64 %667, i64* %669, align 8, !tbaa !5
  %670 = getelementptr inbounds i8* %665, i64 16
  %671 = bitcast i8* %670 to i32*
  store i32 %661, i32* %671, align 4, !tbaa !6
  %672 = load i64* %76, align 8
  %673 = trunc i64 %672 to i32
  %674 = add nsw i32 %673, 1
  store i32 %674, i32* %75, align 8, !tbaa !6
  %675 = lshr i64 %672, 32
  %676 = trunc i64 %675 to i32
  %677 = icmp slt i32 %657, %676
  %..i.i = select i1 %677, i32 %676, i32 %657
  store i32 %..i.i, i32* %45, align 4, !tbaa !6
  %.pn52.i.i = load i32** %41, align 8
  %storemerge853.i.i = getelementptr inbounds i32* %.pn52.i.i, i64 1
  store i32* %storemerge853.i.i, i32** %41, align 8
  br label %.backedge.i.i

; <label>:678                                     ; preds = %656, %._crit_edge111.i.i
  %679 = phi i32 [ %.pre.i.pre.i, %._crit_edge111.i.i ], [ %652, %656 ]
  %680 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %681 = load i32* %75, align 8, !tbaa !6
  %682 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %680, i32 0, i64 32) nounwind optsize
  %683 = icmp eq %struct.tre_ast_node_t* %682, null
  br i1 %683, label %693, label %684

; <label>:684                                     ; preds = %678
  %685 = getelementptr inbounds %struct.tre_ast_node_t* %682, i64 0, i32 1
  %686 = load i8** %685, align 8, !tbaa !7
  %687 = sext i32 %679 to i64
  %688 = bitcast i8* %686 to i64*
  store i64 %687, i64* %688, align 8, !tbaa !5
  %689 = getelementptr inbounds i8* %686, i64 8
  %690 = bitcast i8* %689 to i64*
  store i64 %687, i64* %690, align 8, !tbaa !5
  %691 = getelementptr inbounds i8* %686, i64 16
  %692 = bitcast i8* %691 to i32*
  store i32 %681, i32* %692, align 4, !tbaa !6
  br label %693

; <label>:693                                     ; preds = %684, %678
  %.0.i28.i.i = phi %struct.tre_ast_node_t* [ %682, %684 ], [ null, %678 ]
  %694 = load i32* %75, align 8, !tbaa !6
  %695 = add nsw i32 %694, 1
  store i32 %695, i32* %75, align 8, !tbaa !6
  %.pn.i.i = load i32** %41, align 8
  %storemerge8.i.i = getelementptr inbounds i32* %.pn.i.i, i64 1
  store i32* %storemerge8.i.i, i32** %41, align 8
  %696 = icmp eq %struct.tre_ast_node_t* %.0.i28.i.i, null
  br i1 %696, label %.loopexit, label %.backedge.i.i

; <label>:697                                     ; preds = %327
  %698 = load i32* %44, align 8, !tbaa !6
  %699 = and i32 %698, 4
  %700 = icmp eq i32 %699, 0
  %701 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %702 = load i32* %75, align 8, !tbaa !6
  %703 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %701, i32 0, i64 32) nounwind optsize
  %704 = icmp eq %struct.tre_ast_node_t* %703, null
  br i1 %700, label %733, label %705

; <label>:705                                     ; preds = %697
  br i1 %704, label %.loopexit, label %706

; <label>:706                                     ; preds = %705
  %707 = getelementptr inbounds %struct.tre_ast_node_t* %703, i64 0, i32 1
  %708 = load i8** %707, align 8, !tbaa !7
  %709 = bitcast i8* %708 to i64*
  store i64 0, i64* %709, align 8, !tbaa !5
  %710 = getelementptr inbounds i8* %708, i64 8
  %711 = bitcast i8* %710 to i64*
  store i64 9, i64* %711, align 8, !tbaa !5
  %712 = getelementptr inbounds i8* %708, i64 16
  %713 = bitcast i8* %712 to i32*
  store i32 %702, i32* %713, align 4, !tbaa !6
  %714 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %715 = load i32* %75, align 8, !tbaa !6
  %716 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %714, i32 0, i64 32) nounwind optsize
  %717 = icmp eq %struct.tre_ast_node_t* %716, null
  br i1 %717, label %.loopexit, label %718

; <label>:718                                     ; preds = %706
  %719 = add nsw i32 %715, 1
  %720 = getelementptr inbounds %struct.tre_ast_node_t* %716, i64 0, i32 1
  %721 = load i8** %720, align 8, !tbaa !7
  %722 = bitcast i8* %721 to i64*
  store i64 11, i64* %722, align 8, !tbaa !5
  %723 = getelementptr inbounds i8* %721, i64 8
  %724 = bitcast i8* %723 to i64*
  store i64 2147483647, i64* %724, align 8, !tbaa !5
  %725 = getelementptr inbounds i8* %721, i64 16
  %726 = bitcast i8* %725 to i32*
  store i32 %719, i32* %726, align 4, !tbaa !6
  %727 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %728 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %727, %struct.tre_ast_node_t* %703, %struct.tre_ast_node_t* %716) nounwind optsize
  %729 = icmp eq %struct.tre_ast_node_t* %728, null
  br i1 %729, label %.loopexit, label %730

; <label>:730                                     ; preds = %718
  %731 = load i32* %75, align 8, !tbaa !6
  %732 = add nsw i32 %731, 2
  br label %744

; <label>:733                                     ; preds = %697
  br i1 %704, label %.loopexit, label %734

; <label>:734                                     ; preds = %733
  %735 = getelementptr inbounds %struct.tre_ast_node_t* %703, i64 0, i32 1
  %736 = load i8** %735, align 8, !tbaa !7
  %737 = bitcast i8* %736 to i64*
  store i64 0, i64* %737, align 8, !tbaa !5
  %738 = getelementptr inbounds i8* %736, i64 8
  %739 = bitcast i8* %738 to i64*
  store i64 2147483647, i64* %739, align 8, !tbaa !5
  %740 = getelementptr inbounds i8* %736, i64 16
  %741 = bitcast i8* %740 to i32*
  store i32 %702, i32* %741, align 4, !tbaa !6
  %742 = load i32* %75, align 8, !tbaa !6
  %743 = add nsw i32 %742, 1
  br label %744

; <label>:744                                     ; preds = %734, %730
  %node.2.i49.i.i = phi %struct.tre_ast_node_t* [ %703, %734 ], [ %728, %730 ]
  %storemerge.i.i = phi i32 [ %743, %734 ], [ %732, %730 ]
  store i32 %storemerge.i.i, i32* %75, align 8
  %745 = load i32** %41, align 8, !tbaa !7
  %746 = getelementptr inbounds i32* %745, i64 1
  store i32* %746, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:747                                     ; preds = %327
  %748 = load i32* %44, align 8, !tbaa !6
  %749 = and i32 %748, 1
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %751, label %764

; <label>:751                                     ; preds = %747
  %752 = getelementptr inbounds i32* %324, i64 -2
  %753 = load i32** %63, align 8, !tbaa !7
  %754 = icmp ult i32* %752, %753
  br i1 %754, label %763, label %755

; <label>:755                                     ; preds = %751
  %756 = load i32* %752, align 4, !tbaa !6
  %757 = icmp eq i32 %756, 92
  br i1 %757, label %758, label %763

; <label>:758                                     ; preds = %755
  %759 = getelementptr inbounds i32* %324, i64 -1
  %760 = load i32* %759, align 4, !tbaa !6
  %761 = icmp eq i32 %760, 40
  %762 = icmp eq i32* %324, %753
  %or.cond143.i.i = or i1 %761, %762
  br i1 %or.cond143.i.i, label %764, label %.thread140.i.i

; <label>:763                                     ; preds = %755, %751
  %.old.i.i = icmp eq i32* %324, %753
  br i1 %.old.i.i, label %764, label %.thread140.i.i

; <label>:764                                     ; preds = %763, %758, %747
  %765 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %766 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %765, i32 0, i64 32) nounwind optsize
  %767 = icmp eq %struct.tre_ast_node_t* %766, null
  br i1 %767, label %.loopexit, label %768

; <label>:768                                     ; preds = %764
  %769 = getelementptr inbounds %struct.tre_ast_node_t* %766, i64 0, i32 1
  %770 = load i8** %769, align 8, !tbaa !7
  %771 = bitcast i8* %770 to i64*
  store i64 -2, i64* %771, align 8, !tbaa !5
  %772 = getelementptr inbounds i8* %770, i64 8
  %773 = bitcast i8* %772 to i64*
  store i64 1, i64* %773, align 8, !tbaa !5
  %774 = getelementptr inbounds i8* %770, i64 16
  %775 = bitcast i8* %774 to i32*
  store i32 -1, i32* %775, align 4, !tbaa !6
  %776 = load i32** %41, align 8, !tbaa !7
  %777 = getelementptr inbounds i32* %776, i64 1
  store i32* %777, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:778                                     ; preds = %327
  %779 = load i32* %44, align 8, !tbaa !6
  %780 = and i32 %779, 1
  %781 = icmp eq i32 %780, 0
  br i1 %781, label %782, label %793

; <label>:782                                     ; preds = %778
  %783 = getelementptr inbounds i32* %324, i64 2
  %784 = icmp ult i32* %783, %325
  %785 = getelementptr inbounds i32* %324, i64 1
  br i1 %784, label %786, label %._crit_edge117.i.i

; <label>:786                                     ; preds = %782
  %787 = load i32* %785, align 4, !tbaa !6
  %788 = icmp eq i32 %787, 92
  br i1 %788, label %789, label %._crit_edge117.i.i

; <label>:789                                     ; preds = %786
  %790 = load i32* %783, align 4, !tbaa !6
  %791 = icmp eq i32 %790, 41
  %792 = icmp eq i32* %785, %325
  %or.cond.i = or i1 %791, %792
  br i1 %or.cond.i, label %793, label %.thread140.i.i

._crit_edge117.i.i:                               ; preds = %786, %782
  %.old.i = icmp eq i32* %785, %325
  br i1 %.old.i, label %793, label %.thread140.i.i

; <label>:793                                     ; preds = %._crit_edge117.i.i, %789, %778
  %794 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %795 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %794, i32 0, i64 32) nounwind optsize
  %796 = icmp eq %struct.tre_ast_node_t* %795, null
  br i1 %796, label %.loopexit, label %797

; <label>:797                                     ; preds = %793
  %798 = getelementptr inbounds %struct.tre_ast_node_t* %795, i64 0, i32 1
  %799 = load i8** %798, align 8, !tbaa !7
  %800 = bitcast i8* %799 to i64*
  store i64 -2, i64* %800, align 8, !tbaa !5
  %801 = getelementptr inbounds i8* %799, i64 8
  %802 = bitcast i8* %801 to i64*
  store i64 2, i64* %802, align 8, !tbaa !5
  %803 = getelementptr inbounds i8* %799, i64 16
  %804 = bitcast i8* %803 to i32*
  store i32 -1, i32* %804, align 4, !tbaa !6
  %805 = load i32** %41, align 8, !tbaa !7
  %806 = getelementptr inbounds i32* %805, i64 1
  store i32* %806, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

.thread140.i.i:                                   ; preds = %._crit_edge117.i.i, %789, %763, %758, %365, %362, %336, %333
  %807 = phi i32 [ %779, %._crit_edge117.i.i ], [ %779, %789 ], [ %748, %763 ], [ %748, %758 ], [ %358, %365 ], [ %358, %362 ], [ %330, %336 ], [ %330, %333 ]
  %808 = icmp eq i32 %328, 42
  br i1 %808, label %.thread141.i.i, label %809

; <label>:809                                     ; preds = %.thread140.i.i, %._crit_edge
  %810 = phi i32 [ %.pre, %._crit_edge ], [ %807, %.thread140.i.i ]
  %811 = and i32 %810, 1
  %812 = icmp eq i32 %811, 0
  br i1 %812, label %814, label %813

; <label>:813                                     ; preds = %809
  switch i32 %328, label %831 [
    i32 124, label %.thread141.i.i
    i32 123, label %.thread141.i.i
    i32 43, label %.thread141.i.i
    i32 63, label %.thread141.i.i
  ]

; <label>:814                                     ; preds = %809
  %815 = getelementptr inbounds i32* %324, i64 1
  %816 = icmp ult i32* %815, %325
  %817 = icmp eq i32 %328, 92
  %or.cond145.i.i = and i1 %816, %817
  br i1 %or.cond145.i.i, label %818, label %831

; <label>:818                                     ; preds = %814
  %819 = load i32* %815, align 4, !tbaa !6
  %820 = icmp eq i32 %819, 123
  br i1 %820, label %.thread141.i.i, label %831

.thread141.i.i:                                   ; preds = %818, %813, %813, %813, %813, %.thread140.i.i, %327, %323
  %821 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %822 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %821, i32 0, i64 32) nounwind optsize
  %823 = icmp eq %struct.tre_ast_node_t* %822, null
  br i1 %823, label %.loopexit, label %tre_ast_new_literal.exit41.i.i

tre_ast_new_literal.exit41.i.i:                   ; preds = %.thread141.i.i
  %824 = getelementptr inbounds %struct.tre_ast_node_t* %822, i64 0, i32 1
  %825 = load i8** %824, align 8, !tbaa !7
  %826 = bitcast i8* %825 to i64*
  store i64 -1, i64* %826, align 8, !tbaa !5
  %827 = getelementptr inbounds i8* %825, i64 8
  %828 = bitcast i8* %827 to i64*
  store i64 -1, i64* %828, align 8, !tbaa !5
  %829 = getelementptr inbounds i8* %825, i64 16
  %830 = bitcast i8* %829 to i32*
  store i32 -1, i32* %830, align 4, !tbaa !6
  br label %.backedge.i.i

; <label>:831                                     ; preds = %818, %814, %813
  %832 = and i32 %810, 2
  %833 = icmp eq i32 %832, 0
  br i1 %833, label %886, label %834

; <label>:834                                     ; preds = %831
  %835 = call i32 @iswupper(i32 %328) nounwind optsize
  %836 = icmp eq i32 %835, 0
  br i1 %836, label %837, label %842

; <label>:837                                     ; preds = %834
  %838 = load i32** %41, align 8, !tbaa !7
  %839 = load i32* %838, align 4, !tbaa !6
  %840 = call i32 @iswlower(i32 %839) nounwind optsize
  %841 = icmp eq i32 %840, 0
  br i1 %841, label %._crit_edge110.i.i, label %842

._crit_edge110.i.i:                               ; preds = %837
  %.pre114.i.i = load i32** %41, align 8, !tbaa !7
  %.pre115.i.i = load i32* %.pre114.i.i, align 4, !tbaa !6
  br label %886

; <label>:842                                     ; preds = %837, %834
  %843 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %844 = load i32** %41, align 8, !tbaa !7
  %845 = load i32* %844, align 4, !tbaa !6
  %846 = call i32 @towupper(i32 %845) nounwind optsize
  %847 = load i32** %41, align 8, !tbaa !7
  %848 = load i32* %847, align 4, !tbaa !6
  %849 = call i32 @towupper(i32 %848) nounwind optsize
  %850 = load i32* %75, align 8, !tbaa !6
  %851 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %843, i32 0, i64 32) nounwind optsize
  %852 = icmp eq %struct.tre_ast_node_t* %851, null
  br i1 %852, label %.loopexit, label %853

; <label>:853                                     ; preds = %842
  %854 = getelementptr inbounds %struct.tre_ast_node_t* %851, i64 0, i32 1
  %855 = load i8** %854, align 8, !tbaa !7
  %856 = sext i32 %846 to i64
  %857 = bitcast i8* %855 to i64*
  store i64 %856, i64* %857, align 8, !tbaa !5
  %858 = sext i32 %849 to i64
  %859 = getelementptr inbounds i8* %855, i64 8
  %860 = bitcast i8* %859 to i64*
  store i64 %858, i64* %860, align 8, !tbaa !5
  %861 = getelementptr inbounds i8* %855, i64 16
  %862 = bitcast i8* %861 to i32*
  store i32 %850, i32* %862, align 4, !tbaa !6
  %863 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %864 = load i32** %41, align 8, !tbaa !7
  %865 = load i32* %864, align 4, !tbaa !6
  %866 = call i32 @towlower(i32 %865) nounwind optsize
  %867 = load i32** %41, align 8, !tbaa !7
  %868 = load i32* %867, align 4, !tbaa !6
  %869 = call i32 @towlower(i32 %868) nounwind optsize
  %870 = load i32* %75, align 8, !tbaa !6
  %871 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %863, i32 0, i64 32) nounwind optsize
  %872 = icmp eq %struct.tre_ast_node_t* %871, null
  br i1 %872, label %.loopexit, label %873

; <label>:873                                     ; preds = %853
  %874 = getelementptr inbounds %struct.tre_ast_node_t* %871, i64 0, i32 1
  %875 = load i8** %874, align 8, !tbaa !7
  %876 = sext i32 %866 to i64
  %877 = bitcast i8* %875 to i64*
  store i64 %876, i64* %877, align 8, !tbaa !5
  %878 = sext i32 %869 to i64
  %879 = getelementptr inbounds i8* %875, i64 8
  %880 = bitcast i8* %879 to i64*
  store i64 %878, i64* %880, align 8, !tbaa !5
  %881 = getelementptr inbounds i8* %875, i64 16
  %882 = bitcast i8* %881 to i32*
  store i32 %870, i32* %882, align 4, !tbaa !6
  %883 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %884 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %883, %struct.tre_ast_node_t* %851, %struct.tre_ast_node_t* %871) nounwind optsize
  %885 = icmp eq %struct.tre_ast_node_t* %884, null
  br i1 %885, label %.loopexit, label %900

; <label>:886                                     ; preds = %._crit_edge110.i.i, %831
  %887 = phi i32 [ %.pre115.i.i, %._crit_edge110.i.i ], [ %328, %831 ]
  %888 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %889 = load i32* %75, align 8, !tbaa !6
  %890 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %888, i32 0, i64 32) nounwind optsize
  %891 = icmp eq %struct.tre_ast_node_t* %890, null
  br i1 %891, label %.loopexit, label %tre_ast_new_literal.exit16.i.i

tre_ast_new_literal.exit16.i.i:                   ; preds = %886
  %892 = getelementptr inbounds %struct.tre_ast_node_t* %890, i64 0, i32 1
  %893 = load i8** %892, align 8, !tbaa !7
  %894 = sext i32 %887 to i64
  %895 = bitcast i8* %893 to i64*
  store i64 %894, i64* %895, align 8, !tbaa !5
  %896 = getelementptr inbounds i8* %893, i64 8
  %897 = bitcast i8* %896 to i64*
  store i64 %894, i64* %897, align 8, !tbaa !5
  %898 = getelementptr inbounds i8* %893, i64 16
  %899 = bitcast i8* %898 to i32*
  store i32 %889, i32* %899, align 4, !tbaa !6
  br label %900

; <label>:900                                     ; preds = %tre_ast_new_literal.exit16.i.i, %873
  %node.2.i50.i.i = phi %struct.tre_ast_node_t* [ %884, %873 ], [ %890, %tre_ast_new_literal.exit16.i.i ]
  %901 = load i32* %75, align 8, !tbaa !6
  %902 = add nsw i32 %901, 1
  store i32 %902, i32* %75, align 8, !tbaa !6
  %903 = load i32** %41, align 8, !tbaa !7
  %904 = getelementptr inbounds i32* %903, i64 1
  store i32* %904, i32** %41, align 8, !tbaa !7
  br label %.backedge.i.i

; <label>:905                                     ; preds = %80
  %906 = add nsw i32 %77, -2
  store i32 %906, i32* %31, align 4, !tbaa !6
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds i8** %83, i64 %907
  %909 = load i8** %908, align 8, !tbaa !7
  %910 = ptrtoint i8* %909 to i64
  %911 = trunc i64 %910 to i32
  %912 = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i47.i.i, i64 0, i32 3
  %913 = load i32* %912, align 4, !tbaa !6
  %914 = icmp sgt i32 %913, -1
  br i1 %914, label %915, label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %905
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i47.i.i, i64 0, i32 4
  %.pre116.i.i = load i32* %.phi.trans.insert.i.i, align 4, !tbaa !6
  br label %934

; <label>:915                                     ; preds = %905
  %916 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %917 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %916, i32 0, i64 32) nounwind optsize
  %918 = icmp eq %struct.tre_ast_node_t* %917, null
  br i1 %918, label %.loopexit, label %919

; <label>:919                                     ; preds = %915
  %920 = getelementptr inbounds %struct.tre_ast_node_t* %917, i64 0, i32 1
  %921 = load i8** %920, align 8, !tbaa !7
  %922 = bitcast i8* %921 to i64*
  store i64 -1, i64* %922, align 8, !tbaa !5
  %923 = getelementptr inbounds i8* %921, i64 8
  %924 = bitcast i8* %923 to i64*
  store i64 -1, i64* %924, align 8, !tbaa !5
  %925 = getelementptr inbounds i8* %921, i64 16
  %926 = bitcast i8* %925 to i32*
  store i32 -1, i32* %926, align 4, !tbaa !6
  %927 = load %struct.tre_mem_struct** %39, align 8, !tbaa !7
  %928 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %927, %struct.tre_ast_node_t* %917, %struct.tre_ast_node_t* %node.2.i47.i.i) nounwind optsize
  %929 = icmp eq %struct.tre_ast_node_t* %928, null
  br i1 %929, label %.loopexit, label %930

; <label>:930                                     ; preds = %919
  %931 = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i47.i.i, i64 0, i32 4
  %932 = load i32* %931, align 4, !tbaa !6
  %933 = getelementptr inbounds %struct.tre_ast_node_t* %928, i64 0, i32 4
  store i32 %932, i32* %933, align 4, !tbaa !6
  br label %934

; <label>:934                                     ; preds = %930, %._crit_edge.i.i
  %935 = phi i32 [ %932, %930 ], [ %.pre116.i.i, %._crit_edge.i.i ]
  %node.2.i44.i.i = phi %struct.tre_ast_node_t* [ %928, %930 ], [ %node.2.i47.i.i, %._crit_edge.i.i ]
  %936 = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i44.i.i, i64 0, i32 3
  store i32 %911, i32* %936, align 4, !tbaa !6
  %937 = getelementptr inbounds %struct.tre_ast_node_t* %node.2.i44.i.i, i64 0, i32 4
  %938 = add nsw i32 %935, 1
  store i32 %938, i32* %937, align 4, !tbaa !6
  br label %.backedge.i.i

; <label>:939                                     ; preds = %80
  %940 = add nsw i32 %77, -2
  store i32 %940, i32* %31, align 4, !tbaa !6
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i8** %83, i64 %941
  %943 = load i8** %942, align 8, !tbaa !7
  %944 = ptrtoint i8* %943 to i64
  %945 = trunc i64 %944 to i32
  store i32 %945, i32* %44, align 8, !tbaa !6
  br label %.backedge.i.i

.critedge.i.i:                                    ; preds = %.backedge.i.i
  %946 = icmp sgt i32 %depth.0.i.i, 0
  %.not.i.i = xor i1 %79, true
  %brmerge.i.i = or i1 %946, %.not.i.i
  %.mux.i.i = select i1 %946, i32 8, i32 %status.0.i.i
  br i1 %brmerge.i.i, label %tre_parse.exit.i, label %tre_parse.exit.thread20.i

tre_parse.exit.thread20.i:                        ; preds = %.critedge.i.i
  %947 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 2
  store %struct.tre_ast_node_t* %node.2.i47.i.i, %struct.tre_ast_node_t** %947, align 8, !tbaa !7
  br label %949

tre_parse.exit.i:                                 ; preds = %.critedge.i.i
  %948 = icmp eq i32 %.mux.i.i, 0
  br i1 %948, label %tre_parse.exit._crit_edge.i, label %.loopexit

tre_parse.exit._crit_edge.i:                      ; preds = %tre_parse.exit.i
  %.pre.i = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 2
  br label %949

; <label>:949                                     ; preds = %tre_parse.exit._crit_edge.i, %tre_parse.exit.thread20.i
  %.pre-phi.i = phi %struct.tre_ast_node_t** [ %.pre.i, %tre_parse.exit._crit_edge.i ], [ %947, %tre_parse.exit.thread20.i ]
  %950 = getelementptr inbounds %struct.tre_parse_ctx_t* %parse_ctx.i, i64 0, i32 7
  %951 = load i32* %950, align 4, !tbaa !6
  %952 = add nsw i32 %951, -1
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds %struct.regex_t* %preg, i64 0, i32 3
  store i64 %953, i64* %954, align 8, !tbaa !5
  %955 = getelementptr inbounds %struct.regex_t* %preg, i64 0, i32 0
  store i64 %953, i64* %955, align 8, !tbaa !5
  %956 = load %struct.tre_ast_node_t** %.pre-phi.i, align 8, !tbaa !7
  %957 = load i32* %45, align 4, !tbaa !6
  %958 = icmp sgt i32 %957, %952
  br i1 %958, label %.loopexit, label %959

; <label>:959                                     ; preds = %949
  %960 = call i8* @calloc(i64 1, i64 80) nounwind optsize
  %961 = bitcast i8* %960 to %struct.tnfa*
  %962 = icmp eq i8* %960, null
  br i1 %962, label %.loopexit, label %963

; <label>:963                                     ; preds = %959
  %964 = load i32* %45, align 4, !tbaa !6
  %.lobit.i = lshr i32 %964, 31
  %.lobit.not.i = xor i32 %.lobit.i, 1
  %965 = getelementptr inbounds i8* %960, i64 72
  %966 = bitcast i8* %965 to i32*
  store i32 %.lobit.not.i, i32* %966, align 4, !tbaa !6
  %967 = load i32* %950, align 4, !tbaa !6
  %968 = getelementptr inbounds i8* %960, i64 40
  %969 = bitcast i8* %968 to i32*
  store i32 %967, i32* %969, align 4, !tbaa !6
  %970 = icmp eq i32 %.lobit.i, 1
  br i1 %970, label %971, label %974

; <label>:971                                     ; preds = %963
  %972 = and i32 %cflags, 8
  %973 = icmp eq i32 %972, 0
  br i1 %973, label %974, label %1004

; <label>:974                                     ; preds = %971, %963
  %975 = call fastcc i32 @tre_add_tags(%struct.tre_mem_struct* null, %struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %956, %struct.tnfa* %961) nounwind optsize
  %976 = icmp eq i32 %975, 0
  br i1 %976, label %977, label %.loopexit

; <label>:977                                     ; preds = %974
  %978 = getelementptr inbounds i8* %960, i64 56
  %979 = bitcast i8* %978 to i32*
  %980 = load i32* %979, align 4, !tbaa !6
  %981 = icmp sgt i32 %980, 0
  br i1 %981, label %982, label %993

; <label>:982                                     ; preds = %977
  %983 = add nsw i32 %980, 1
  %984 = sext i32 %983 to i64
  %985 = shl nsw i64 %984, 2
  %986 = call i8* @malloc(i64 %985) nounwind optsize
  %987 = bitcast i8* %986 to i32*
  %988 = icmp eq i8* %986, null
  br i1 %988, label %.loopexit, label %989

; <label>:989                                     ; preds = %982
  %990 = getelementptr inbounds i8* %960, i64 48
  %991 = bitcast i8* %990 to i32**
  store i32* %987, i32** %991, align 8, !tbaa !7
  %992 = call i8* @memset(i8* %986, i32 -1, i64 %985) nounwind optsize
  br label %993

; <label>:993                                     ; preds = %989, %977
  %tag_directions.0.i = phi i32* [ %987, %989 ], [ null, %977 ]
  %994 = load i32* %950, align 4, !tbaa !6
  %995 = sext i32 %994 to i64
  %996 = call i8* @calloc(i64 %995, i64 16) nounwind optsize
  %997 = icmp eq i8* %996, null
  br i1 %997, label %.loopexit, label %998

; <label>:998                                     ; preds = %993
  %999 = bitcast i8* %996 to %struct.tre_submatch_data*
  %1000 = getelementptr inbounds i8* %960, i64 32
  %1001 = bitcast i8* %1000 to %struct.tre_submatch_data**
  store %struct.tre_submatch_data* %999, %struct.tre_submatch_data** %1001, align 8, !tbaa !7
  %1002 = call fastcc i32 @tre_add_tags(%struct.tre_mem_struct* %32, %struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %956, %struct.tnfa* %961) nounwind optsize
  %1003 = icmp eq i32 %1002, 0
  br i1 %1003, label %1004, label %.loopexit

; <label>:1004                                    ; preds = %998, %971
  %tag_directions.1.i = phi i32* [ %tag_directions.0.i, %998 ], [ null, %971 ]
  %1005 = bitcast i32* %pos_add.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1005) nounwind
  %1006 = bitcast i32* %max_pos.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1006) nounwind
  %1007 = bitcast %struct.tre_ast_node_t** %seq2.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1007) nounwind
  %1008 = bitcast %struct.tre_ast_node_t** %copy.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1008) nounwind
  %1009 = bitcast %struct.tre_ast_node_t** %copy4.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1009) nounwind
  %1010 = load i32* %31, align 4, !tbaa !6
  store i32 0, i32* %pos_add.i.i, align 4, !tbaa !6
  store i32 0, i32* %max_pos.i.i, align 4, !tbaa !6
  %1011 = bitcast %struct.tre_ast_node_t* %956 to i8*
  %1012 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1011) nounwind optsize
  %1013 = icmp eq i32 %1012, 0
  br i1 %1013, label %1014, label %tre_expand_ast.exit.i

; <label>:1014                                    ; preds = %1004
  %1015 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1016 = icmp eq i32 %1015, 0
  br i1 %1016, label %.backedge.i3.i, label %tre_expand_ast.exit.i

.backedge.i3.i:                                   ; preds = %1244, %1238, %1129, %1115, %1109, %1106, %1103, %1095, %1093, %1087, %1084, %1074, %1072, %1066, %1063, %1053, %1052, %1045, %1037, %1034, %1022, %1014
  %1017 = phi i32 [ 0, %1014 ], [ %1017, %1022 ], [ %1242, %1244 ], [ %1239, %1238 ], [ %1017, %1034 ], [ %1017, %1095 ], [ %1017, %1103 ], [ %1017, %1106 ], [ %1017, %1109 ], [ %1017, %1115 ], [ %1130, %1129 ], [ %1017, %1074 ], [ %1017, %1084 ], [ %1017, %1087 ], [ %1017, %1093 ], [ %1017, %1053 ], [ %1017, %1063 ], [ %1017, %1066 ], [ %1017, %1072 ], [ %1017, %1052 ], [ %1017, %1045 ], [ %1017, %1037 ]
  %status.0.i2.i = phi i32 [ 0, %1014 ], [ 0, %1022 ], [ %status.4.i.i, %1244 ], [ %status.4.i.i, %1238 ], [ 0, %1034 ], [ %1101, %1095 ], [ %1104, %1103 ], [ %1107, %1106 ], [ %1113, %1109 ], [ %1116, %1115 ], [ %1116, %1129 ], [ %1082, %1074 ], [ %1085, %1084 ], [ %1091, %1087 ], [ %1094, %1093 ], [ %1061, %1053 ], [ %1064, %1063 ], [ %1070, %1066 ], [ %1073, %1072 ], [ 0, %1052 ], [ 0, %1045 ], [ 0, %1037 ]
  %pos_add_total.0.i.i = phi i32 [ 0, %1014 ], [ %pos_add_total.0.i.i, %1022 ], [ %1242, %1244 ], [ %1242, %1238 ], [ %pos_add_total.0.i.i, %1034 ], [ %pos_add_total.0.i.i, %1095 ], [ %pos_add_total.0.i.i, %1103 ], [ %pos_add_total.0.i.i, %1106 ], [ %pos_add_total.0.i.i, %1109 ], [ %pos_add_total.0.i.i, %1115 ], [ %pos_add_total.0.i.i, %1129 ], [ %pos_add_total.0.i.i, %1074 ], [ %pos_add_total.0.i.i, %1084 ], [ %pos_add_total.0.i.i, %1087 ], [ %pos_add_total.0.i.i, %1093 ], [ %pos_add_total.0.i.i, %1053 ], [ %pos_add_total.0.i.i, %1063 ], [ %pos_add_total.0.i.i, %1066 ], [ %pos_add_total.0.i.i, %1072 ], [ %pos_add_total.0.i.i, %1052 ], [ %pos_add_total.0.i.i, %1045 ], [ %pos_add_total.0.i.i, %1037 ]
  %iter_depth.0.i.i = phi i32 [ 0, %1014 ], [ %iter_depth.0.i.i, %1022 ], [ 0, %1244 ], [ %1240, %1238 ], [ %iter_depth.0.i.i, %1034 ], [ %iter_depth.0.i.i, %1095 ], [ %iter_depth.0.i.i, %1103 ], [ %iter_depth.0.i.i, %1106 ], [ %iter_depth.0.i.i, %1109 ], [ %iter_depth.0.i.i, %1115 ], [ %1131, %1129 ], [ %iter_depth.0.i.i, %1074 ], [ %iter_depth.0.i.i, %1084 ], [ %iter_depth.0.i.i, %1087 ], [ %iter_depth.0.i.i, %1093 ], [ %iter_depth.0.i.i, %1053 ], [ %iter_depth.0.i.i, %1063 ], [ %iter_depth.0.i.i, %1066 ], [ %iter_depth.0.i.i, %1072 ], [ %iter_depth.0.i.i, %1052 ], [ %iter_depth.0.i.i, %1045 ], [ %iter_depth.0.i.i, %1037 ]
  %1018 = icmp eq i32 %status.0.i2.i, 0
  br i1 %1018, label %1019, label %.critedge.i9.i

; <label>:1019                                    ; preds = %.backedge.i3.i
  %1020 = load i32* %31, align 4, !tbaa !6
  %1021 = icmp sgt i32 %1020, %1010
  br i1 %1021, label %1022, label %.critedge.i9.i

; <label>:1022                                    ; preds = %1019
  %1023 = add nsw i32 %1020, -1
  %1024 = sext i32 %1023 to i64
  %1025 = load i8*** %22, align 8, !tbaa !7
  %1026 = getelementptr inbounds i8** %1025, i64 %1024
  %1027 = load i8** %1026, align 8, !tbaa !7
  %1028 = ptrtoint i8* %1027 to i64
  %1029 = trunc i64 %1028 to i32
  %1030 = add nsw i32 %1020, -2
  store i32 %1030, i32* %31, align 4, !tbaa !6
  %1031 = sext i32 %1030 to i64
  %1032 = getelementptr inbounds i8** %1025, i64 %1031
  %1033 = load i8** %1032, align 8, !tbaa !7
  switch i32 %1029, label %.backedge.i3.i [
    i32 0, label %1034
    i32 1, label %1132
  ]

; <label>:1034                                    ; preds = %1022
  %1035 = bitcast i8* %1033 to i32*
  %1036 = load i32* %1035, align 4, !tbaa !0
  switch i32 %1036, label %.backedge.i3.i [
    i32 0, label %1037
    i32 3, label %1053
    i32 1, label %1074
    i32 2, label %1095
  ]

; <label>:1037                                    ; preds = %1034
  %1038 = getelementptr inbounds i8* %1033, i64 8
  %1039 = bitcast i8* %1038 to i8**
  %1040 = load i8** %1039, align 8, !tbaa !7
  %1041 = bitcast i8* %1040 to i64*
  %1042 = load i64* %1041, align 8, !tbaa !5
  %1043 = icmp sgt i64 %1042, -1
  %1044 = icmp eq i64 %1042, -4
  %or.cond1.i.i = or i1 %1043, %1044
  br i1 %or.cond1.i.i, label %1045, label %.backedge.i3.i

; <label>:1045                                    ; preds = %1037
  %1046 = getelementptr inbounds i8* %1040, i64 16
  %1047 = bitcast i8* %1046 to i32*
  %1048 = load i32* %1047, align 4, !tbaa !6
  %1049 = add nsw i32 %1048, %1017
  store i32 %1049, i32* %1047, align 4, !tbaa !6
  %1050 = load i32* %max_pos.i.i, align 4, !tbaa !6
  %1051 = icmp sgt i32 %1049, %1050
  br i1 %1051, label %1052, label %.backedge.i3.i

; <label>:1052                                    ; preds = %1045
  store i32 %1049, i32* %max_pos.i.i, align 4, !tbaa !6
  br label %.backedge.i3.i

; <label>:1053                                    ; preds = %1034
  %1054 = getelementptr inbounds i8* %1033, i64 8
  %1055 = bitcast i8* %1054 to i8**
  %1056 = load i8** %1055, align 8, !tbaa !7
  %1057 = getelementptr inbounds i8* %1056, i64 8
  %1058 = bitcast i8* %1057 to %struct.tre_ast_node_t**
  %1059 = load %struct.tre_ast_node_t** %1058, align 8, !tbaa !7
  %1060 = bitcast %struct.tre_ast_node_t* %1059 to i8*
  %1061 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1060) nounwind optsize
  %1062 = icmp eq i32 %1061, 0
  br i1 %1062, label %1063, label %.backedge.i3.i

; <label>:1063                                    ; preds = %1053
  %1064 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1065 = icmp eq i32 %1064, 0
  br i1 %1065, label %1066, label %.backedge.i3.i

; <label>:1066                                    ; preds = %1063
  %1067 = bitcast i8* %1056 to %struct.tre_ast_node_t**
  %1068 = load %struct.tre_ast_node_t** %1067, align 8, !tbaa !7
  %1069 = bitcast %struct.tre_ast_node_t* %1068 to i8*
  %1070 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1069) nounwind optsize
  %1071 = icmp eq i32 %1070, 0
  br i1 %1071, label %1072, label %.backedge.i3.i

; <label>:1072                                    ; preds = %1066
  %1073 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  br label %.backedge.i3.i

; <label>:1074                                    ; preds = %1034
  %1075 = getelementptr inbounds i8* %1033, i64 8
  %1076 = bitcast i8* %1075 to i8**
  %1077 = load i8** %1076, align 8, !tbaa !7
  %1078 = getelementptr inbounds i8* %1077, i64 8
  %1079 = bitcast i8* %1078 to %struct.tre_ast_node_t**
  %1080 = load %struct.tre_ast_node_t** %1079, align 8, !tbaa !7
  %1081 = bitcast %struct.tre_ast_node_t* %1080 to i8*
  %1082 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1081) nounwind optsize
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1084, label %.backedge.i3.i

; <label>:1084                                    ; preds = %1074
  %1085 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1086 = icmp eq i32 %1085, 0
  br i1 %1086, label %1087, label %.backedge.i3.i

; <label>:1087                                    ; preds = %1084
  %1088 = bitcast i8* %1077 to %struct.tre_ast_node_t**
  %1089 = load %struct.tre_ast_node_t** %1088, align 8, !tbaa !7
  %1090 = bitcast %struct.tre_ast_node_t* %1089 to i8*
  %1091 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1090) nounwind optsize
  %1092 = icmp eq i32 %1091, 0
  br i1 %1092, label %1093, label %.backedge.i3.i

; <label>:1093                                    ; preds = %1087
  %1094 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  br label %.backedge.i3.i

; <label>:1095                                    ; preds = %1034
  %1096 = getelementptr inbounds i8* %1033, i64 8
  %1097 = bitcast i8* %1096 to i8**
  %1098 = load i8** %1097, align 8, !tbaa !7
  %1099 = sext i32 %1017 to i64
  %1100 = inttoptr i64 %1099 to i8*
  %1101 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1100) nounwind optsize
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1103, label %.backedge.i3.i

; <label>:1103                                    ; preds = %1095
  %1104 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1033) nounwind optsize
  %1105 = icmp eq i32 %1104, 0
  br i1 %1105, label %1106, label %.backedge.i3.i

; <label>:1106                                    ; preds = %1103
  %1107 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 1 to i8*)) nounwind optsize
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1109, label %.backedge.i3.i

; <label>:1109                                    ; preds = %1106
  %1110 = bitcast i8* %1098 to %struct.tre_ast_node_t**
  %1111 = load %struct.tre_ast_node_t** %1110, align 8, !tbaa !7
  %1112 = bitcast %struct.tre_ast_node_t* %1111 to i8*
  %1113 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1112) nounwind optsize
  %1114 = icmp eq i32 %1113, 0
  br i1 %1114, label %1115, label %.backedge.i3.i

; <label>:1115                                    ; preds = %1109
  %1116 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1117 = icmp eq i32 %1116, 0
  br i1 %1117, label %1118, label %.backedge.i3.i

; <label>:1118                                    ; preds = %1115
  %1119 = getelementptr inbounds i8* %1098, i64 8
  %1120 = bitcast i8* %1119 to i32*
  %1121 = load i32* %1120, align 4, !tbaa !6
  %1122 = icmp sgt i32 %1121, 1
  br i1 %1122, label %1128, label %1123

; <label>:1123                                    ; preds = %1118
  %1124 = getelementptr inbounds i8* %1098, i64 12
  %1125 = bitcast i8* %1124 to i32*
  %1126 = load i32* %1125, align 4, !tbaa !6
  %1127 = icmp sgt i32 %1126, 1
  br i1 %1127, label %1128, label %1129

; <label>:1128                                    ; preds = %1123, %1118
  store i32 0, i32* %pos_add.i.i, align 4, !tbaa !6
  br label %1129

; <label>:1129                                    ; preds = %1128, %1123
  %1130 = phi i32 [ 0, %1128 ], [ %1017, %1123 ]
  %1131 = add nsw i32 %iter_depth.0.i.i, 1
  br label %.backedge.i3.i

; <label>:1132                                    ; preds = %1022
  %1133 = getelementptr inbounds i8* %1033, i64 8
  %1134 = bitcast i8* %1133 to i8**
  %1135 = load i8** %1134, align 8, !tbaa !7
  %1136 = add nsw i32 %1020, -3
  store i32 %1136, i32* %31, align 4, !tbaa !6
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i8** %1025, i64 %1137
  %1139 = load i8** %1138, align 8, !tbaa !7
  %1140 = ptrtoint i8* %1139 to i64
  %1141 = trunc i64 %1140 to i32
  store i32 %1141, i32* %pos_add.i.i, align 4, !tbaa !6
  %1142 = getelementptr inbounds i8* %1135, i64 8
  %1143 = bitcast i8* %1142 to i32*
  %1144 = load i32* %1143, align 4, !tbaa !6
  %1145 = icmp sgt i32 %1144, 1
  br i1 %1145, label %1151, label %1146

; <label>:1146                                    ; preds = %1132
  %1147 = getelementptr inbounds i8* %1135, i64 12
  %1148 = bitcast i8* %1147 to i32*
  %1149 = load i32* %1148, align 4, !tbaa !6
  %1150 = icmp sgt i32 %1149, 1
  br i1 %1150, label %1151, label %1238

; <label>:1151                                    ; preds = %1146, %1132
  store %struct.tre_ast_node_t* null, %struct.tre_ast_node_t** %seq2.i.i, align 8, !tbaa !7
  %1152 = bitcast i8* %1135 to %struct.tre_ast_node_t**
  br label %1153

; <label>:1153                                    ; preds = %._crit_edge.i5.i, %1151
  %1154 = phi i32 [ %1144, %1151 ], [ %.pre38.i.i, %._crit_edge.i5.i ]
  %status.1.i4.i = phi i32 [ 0, %1151 ], [ %1162, %._crit_edge.i5.i ]
  %seq1.0.i.i = phi %struct.tre_ast_node_t* [ null, %1151 ], [ %seq1.1.i.i, %._crit_edge.i5.i ]
  %i.0.i.i = phi i32 [ 0, %1151 ], [ %1157, %._crit_edge.i5.i ]
  %pos_add_save.0.i.i = phi i32 [ %1141, %1151 ], [ %1160, %._crit_edge.i5.i ]
  %1155 = icmp slt i32 %i.0.i.i, %1154
  br i1 %1155, label %1156, label %1171

; <label>:1156                                    ; preds = %1153
  %1157 = add nsw i32 %i.0.i.i, 1
  %1158 = icmp slt i32 %1157, %1154
  %1159 = select i1 %1158, i32 1, i32 2
  %1160 = load i32* %pos_add.i.i, align 4, !tbaa !6
  %1161 = load %struct.tre_ast_node_t** %1152, align 8, !tbaa !7
  %1162 = call fastcc i32 @tre_copy_ast(%struct.tre_mem_struct* %32, %struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1161, i32 %1159, i32* %pos_add.i.i, i32* %tag_directions.1.i, %struct.tre_ast_node_t** %copy.i.i, i32* %max_pos.i.i) nounwind optsize
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %1164, label %tre_expand_ast.exit.i

; <label>:1164                                    ; preds = %1156
  %1165 = icmp eq %struct.tre_ast_node_t* %seq1.0.i.i, null
  %1166 = load %struct.tre_ast_node_t** %copy.i.i, align 8, !tbaa !7
  br i1 %1165, label %1169, label %1167

; <label>:1167                                    ; preds = %1164
  %1168 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %32, %struct.tre_ast_node_t* %seq1.0.i.i, %struct.tre_ast_node_t* %1166) nounwind optsize
  br label %1169

; <label>:1169                                    ; preds = %1167, %1164
  %seq1.1.i.i = phi %struct.tre_ast_node_t* [ %1168, %1167 ], [ %1166, %1164 ]
  %1170 = icmp eq %struct.tre_ast_node_t* %seq1.1.i.i, null
  br i1 %1170, label %tre_expand_ast.exit.i, label %._crit_edge.i5.i

._crit_edge.i5.i:                                 ; preds = %1169
  %.pre38.i.i = load i32* %1143, align 4, !tbaa !6
  br label %1153

; <label>:1171                                    ; preds = %1153
  %1172 = getelementptr inbounds i8* %1135, i64 12
  %1173 = bitcast i8* %1172 to i32*
  %1174 = load i32* %1173, align 4, !tbaa !6
  %1175 = icmp eq i32 %1174, -1
  br i1 %1175, label %1176, label %.preheader.i.i

; <label>:1176                                    ; preds = %1171
  %1177 = load i32* %pos_add.i.i, align 4, !tbaa !6
  %1178 = load %struct.tre_ast_node_t** %1152, align 8, !tbaa !7
  %1179 = call fastcc i32 @tre_copy_ast(%struct.tre_mem_struct* %32, %struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1178, i32 0, i32* %pos_add.i.i, i32* null, %struct.tre_ast_node_t** %seq2.i.i, i32* %max_pos.i.i) nounwind optsize
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1181, label %tre_expand_ast.exit.i

; <label>:1181                                    ; preds = %1176
  %1182 = load %struct.tre_ast_node_t** %seq2.i.i, align 8, !tbaa !7
  %1183 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %32, i32 2, i64 16) nounwind optsize
  %1184 = icmp eq %struct.tre_ast_node_t* %1183, null
  br i1 %1184, label %tre_ast_new_iter.exit.thread.i.i, label %tre_ast_new_iter.exit.i.i

tre_ast_new_iter.exit.thread.i.i:                 ; preds = %1181
  store %struct.tre_ast_node_t* null, %struct.tre_ast_node_t** %seq2.i.i, align 8, !tbaa !7
  br label %tre_expand_ast.exit.i

tre_ast_new_iter.exit.i.i:                        ; preds = %1181
  %1185 = getelementptr inbounds %struct.tre_ast_node_t* %1183, i64 0, i32 1
  %1186 = load i8** %1185, align 8, !tbaa !7
  %1187 = bitcast i8* %1186 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %1182, %struct.tre_ast_node_t** %1187, align 8, !tbaa !7
  %1188 = getelementptr inbounds i8* %1186, i64 8
  %1189 = bitcast i8* %1188 to i32*
  store i32 0, i32* %1189, align 4, !tbaa !6
  %1190 = getelementptr inbounds i8* %1186, i64 12
  %1191 = bitcast i8* %1190 to i32*
  store i32 -1, i32* %1191, align 4, !tbaa !6
  %1192 = getelementptr inbounds %struct.tre_ast_node_t* %1182, i64 0, i32 4
  %1193 = load i32* %1192, align 4, !tbaa !6
  %1194 = getelementptr inbounds %struct.tre_ast_node_t* %1183, i64 0, i32 4
  store i32 %1193, i32* %1194, align 4, !tbaa !6
  store %struct.tre_ast_node_t* %1183, %struct.tre_ast_node_t** %seq2.i.i, align 8, !tbaa !7
  br label %thread-pre-split.i.i

.preheader.i.i:                                   ; preds = %1223, %1171
  %.pr.i6.i = phi %struct.tre_ast_node_t* [ %1221, %1223 ], [ null, %1171 ]
  %1195 = phi i32 [ %.pre.i7.i, %1223 ], [ %1174, %1171 ]
  %status.2.i.i = phi i32 [ %1200, %1223 ], [ %status.1.i4.i, %1171 ]
  %i.1.i.i = phi i32 [ %1224, %1223 ], [ %1154, %1171 ]
  %pos_add_save.1.i.i = phi i32 [ %1198, %1223 ], [ %pos_add_save.0.i.i, %1171 ]
  %1196 = icmp slt i32 %i.1.i.i, %1195
  br i1 %1196, label %1197, label %thread-pre-split.i.i

; <label>:1197                                    ; preds = %.preheader.i.i
  %1198 = load i32* %pos_add.i.i, align 4, !tbaa !6
  %1199 = load %struct.tre_ast_node_t** %1152, align 8, !tbaa !7
  %1200 = call fastcc i32 @tre_copy_ast(%struct.tre_mem_struct* %32, %struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1199, i32 0, i32* %pos_add.i.i, i32* null, %struct.tre_ast_node_t** %copy4.i.i, i32* %max_pos.i.i) nounwind optsize
  %1201 = icmp eq i32 %1200, 0
  br i1 %1201, label %1202, label %tre_expand_ast.exit.i

; <label>:1202                                    ; preds = %1197
  %1203 = icmp eq %struct.tre_ast_node_t* %.pr.i6.i, null
  %1204 = load %struct.tre_ast_node_t** %copy4.i.i, align 8, !tbaa !7
  br i1 %1203, label %1207, label %1205

; <label>:1205                                    ; preds = %1202
  %1206 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %32, %struct.tre_ast_node_t* %1204, %struct.tre_ast_node_t* %.pr.i6.i) nounwind optsize
  br label %1207

; <label>:1207                                    ; preds = %1205, %1202
  %1208 = phi %struct.tre_ast_node_t* [ %1206, %1205 ], [ %1204, %1202 ]
  store %struct.tre_ast_node_t* %1208, %struct.tre_ast_node_t** %seq2.i.i, align 8
  %1209 = icmp eq %struct.tre_ast_node_t* %1208, null
  br i1 %1209, label %tre_expand_ast.exit.i, label %1210

; <label>:1210                                    ; preds = %1207
  %1211 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %32, i32 0, i64 32) nounwind optsize
  %1212 = icmp eq %struct.tre_ast_node_t* %1211, null
  br i1 %1212, label %tre_expand_ast.exit.i, label %1213

; <label>:1213                                    ; preds = %1210
  %1214 = getelementptr inbounds %struct.tre_ast_node_t* %1211, i64 0, i32 1
  %1215 = load i8** %1214, align 8, !tbaa !7
  %1216 = bitcast i8* %1215 to i64*
  store i64 -1, i64* %1216, align 8, !tbaa !5
  %1217 = getelementptr inbounds i8* %1215, i64 8
  %1218 = bitcast i8* %1217 to i64*
  store i64 -1, i64* %1218, align 8, !tbaa !5
  %1219 = getelementptr inbounds i8* %1215, i64 16
  %1220 = bitcast i8* %1219 to i32*
  store i32 -1, i32* %1220, align 4, !tbaa !6
  %1221 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %32, %struct.tre_ast_node_t* %1211, %struct.tre_ast_node_t* %1208) nounwind optsize
  store %struct.tre_ast_node_t* %1221, %struct.tre_ast_node_t** %seq2.i.i, align 8, !tbaa !7
  %1222 = icmp eq %struct.tre_ast_node_t* %1221, null
  br i1 %1222, label %tre_expand_ast.exit.i, label %1223

; <label>:1223                                    ; preds = %1213
  %1224 = add nsw i32 %i.1.i.i, 1
  %.pre.i7.i = load i32* %1173, align 4, !tbaa !6
  br label %.preheader.i.i

thread-pre-split.i.i:                             ; preds = %.preheader.i.i, %tre_ast_new_iter.exit.i.i
  %1225 = phi %struct.tre_ast_node_t* [ %1183, %tre_ast_new_iter.exit.i.i ], [ %.pr.i6.i, %.preheader.i.i ]
  %status.3.i.i = phi i32 [ %1179, %tre_ast_new_iter.exit.i.i ], [ %status.2.i.i, %.preheader.i.i ]
  %pos_add_save.2.i.i = phi i32 [ %1177, %tre_ast_new_iter.exit.i.i ], [ %pos_add_save.1.i.i, %.preheader.i.i ]
  store i32 %pos_add_save.2.i.i, i32* %pos_add.i.i, align 4, !tbaa !6
  %1226 = icmp eq %struct.tre_ast_node_t* %seq1.0.i.i, null
  br i1 %1226, label %1231, label %1227

; <label>:1227                                    ; preds = %thread-pre-split.i.i
  %1228 = icmp eq %struct.tre_ast_node_t* %1225, null
  br i1 %1228, label %.thread.i8.i, label %1229

; <label>:1229                                    ; preds = %1227
  %1230 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %32, %struct.tre_ast_node_t* %seq1.0.i.i, %struct.tre_ast_node_t* %1225) nounwind optsize
  br label %1231

; <label>:1231                                    ; preds = %1229, %thread-pre-split.i.i
  %seq1.2.i.i = phi %struct.tre_ast_node_t* [ %1230, %1229 ], [ %1225, %thread-pre-split.i.i ]
  %1232 = icmp eq %struct.tre_ast_node_t* %seq1.2.i.i, null
  br i1 %1232, label %tre_expand_ast.exit.i, label %.thread.i8.i

.thread.i8.i:                                     ; preds = %1231, %1227
  %seq1.23.i.i = phi %struct.tre_ast_node_t* [ %seq1.2.i.i, %1231 ], [ %seq1.0.i.i, %1227 ]
  %1233 = getelementptr inbounds %struct.tre_ast_node_t* %seq1.23.i.i, i64 0, i32 1
  %1234 = load i8** %1233, align 8, !tbaa !7
  store i8* %1234, i8** %1134, align 8, !tbaa !7
  %1235 = getelementptr inbounds %struct.tre_ast_node_t* %seq1.23.i.i, i64 0, i32 0
  %1236 = load i32* %1235, align 4, !tbaa !0
  %1237 = bitcast i8* %1033 to i32*
  store i32 %1236, i32* %1237, align 4, !tbaa !0
  br label %1238

; <label>:1238                                    ; preds = %.thread.i8.i, %1146
  %1239 = phi i32 [ %pos_add_save.2.i.i, %.thread.i8.i ], [ %1141, %1146 ]
  %status.4.i.i = phi i32 [ %status.3.i.i, %.thread.i8.i ], [ 0, %1146 ]
  %1240 = add nsw i32 %iter_depth.0.i.i, -1
  %1241 = sub nsw i32 %1239, %1141
  %1242 = add nsw i32 %1241, %pos_add_total.0.i.i
  %1243 = icmp eq i32 %1240, 0
  br i1 %1243, label %1244, label %.backedge.i3.i

; <label>:1244                                    ; preds = %1238
  store i32 %1242, i32* %pos_add.i.i, align 4, !tbaa !6
  br label %.backedge.i3.i

.critedge.i9.i:                                   ; preds = %1019, %.backedge.i3.i
  %1245 = load i32* %75, align 8, !tbaa !6
  %1246 = add nsw i32 %1245, %pos_add_total.0.i.i
  store i32 %1246, i32* %75, align 8, !tbaa !6
  %1247 = load i32* %max_pos.i.i, align 4, !tbaa !6
  %1248 = icmp sgt i32 %1247, %1246
  br i1 %1248, label %1249, label %tre_expand_ast.exit.i

; <label>:1249                                    ; preds = %.critedge.i9.i
  store i32 %1247, i32* %75, align 8, !tbaa !6
  br label %tre_expand_ast.exit.i

tre_expand_ast.exit.i:                            ; preds = %1249, %.critedge.i9.i, %1231, %1213, %1210, %1207, %1197, %tre_ast_new_iter.exit.thread.i.i, %1176, %1169, %1156, %1014, %1004
  %.0.i10.i = phi i32 [ %1012, %1004 ], [ %1015, %1014 ], [ %status.0.i2.i, %1249 ], [ %status.0.i2.i, %.critedge.i9.i ], [ 12, %tre_ast_new_iter.exit.thread.i.i ], [ 12, %1213 ], [ 12, %1210 ], [ 12, %1207 ], [ %1200, %1197 ], [ 12, %1169 ], [ %1162, %1156 ], [ 12, %1231 ], [ %1179, %1176 ]
  call void @llvm.lifetime.end(i64 -1, i8* %1005) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %1006) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %1007) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %1008) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %1009) nounwind
  %1250 = icmp eq i32 %.0.i10.i, 0
  br i1 %1250, label %1251, label %.loopexit

; <label>:1251                                    ; preds = %tre_expand_ast.exit.i
  %1252 = load i32* %75, align 8, !tbaa !6
  %1253 = add nsw i32 %1252, 1
  store i32 %1253, i32* %75, align 8, !tbaa !6
  %1254 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %32, i32 0, i64 32) nounwind optsize
  %1255 = icmp eq %struct.tre_ast_node_t* %1254, null
  br i1 %1255, label %.loopexit, label %1256

; <label>:1256                                    ; preds = %1251
  %1257 = getelementptr inbounds %struct.tre_ast_node_t* %1254, i64 0, i32 1
  %1258 = load i8** %1257, align 8, !tbaa !7
  %1259 = bitcast i8* %1258 to i64*
  store i64 0, i64* %1259, align 8, !tbaa !5
  %1260 = getelementptr inbounds i8* %1258, i64 8
  %1261 = bitcast i8* %1260 to i64*
  store i64 0, i64* %1261, align 8, !tbaa !5
  %1262 = getelementptr inbounds i8* %1258, i64 16
  %1263 = bitcast i8* %1262 to i32*
  store i32 %1252, i32* %1263, align 4, !tbaa !6
  %1264 = call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %32, %struct.tre_ast_node_t* %956, %struct.tre_ast_node_t* %1254) nounwind optsize
  %1265 = icmp eq %struct.tre_ast_node_t* %1264, null
  br i1 %1265, label %.loopexit, label %1266

; <label>:1266                                    ; preds = %1256
  %1267 = bitcast i32* %num_tags.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1267) nounwind
  %1268 = bitcast i32* %assertions.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %1268) nounwind
  %1269 = load i32* %31, align 4, !tbaa !6
  %1270 = bitcast %struct.tre_ast_node_t* %1264 to i8*
  %1271 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1270) nounwind optsize
  %1272 = icmp eq i32 %1271, 0
  br i1 %1272, label %1273, label %.loopexit

; <label>:1273                                    ; preds = %1266
  %1274 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1275 = icmp eq i32 %1274, 0
  br i1 %1275, label %.backedge.i13.i, label %.loopexit

.backedge.i13.i:                                  ; preds = %1598, %1585, %1495, %1467, %1436, %1418, %1389, %1347, %1329, %1310, %1290, %1278, %1273
  %1276 = load i32* %31, align 4, !tbaa !6
  %1277 = icmp sgt i32 %1276, %1269
  br i1 %1277, label %1278, label %1603

; <label>:1278                                    ; preds = %.backedge.i13.i
  %1279 = add nsw i32 %1276, -1
  %1280 = sext i32 %1279 to i64
  %1281 = load i8*** %22, align 8, !tbaa !7
  %1282 = getelementptr inbounds i8** %1281, i64 %1280
  %1283 = load i8** %1282, align 8, !tbaa !7
  %1284 = ptrtoint i8* %1283 to i64
  %1285 = trunc i64 %1284 to i32
  %1286 = add nsw i32 %1276, -2
  store i32 %1286, i32* %31, align 4, !tbaa !6
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i8** %1281, i64 %1287
  %1289 = load i8** %1288, align 8, !tbaa !7
  switch i32 %1285, label %.backedge.i13.i [
    i32 0, label %1290
    i32 1, label %1439
    i32 3, label %1478
    i32 2, label %1505
  ]

; <label>:1290                                    ; preds = %1278
  %1291 = bitcast i8* %1289 to i32*
  %1292 = load i32* %1291, align 4, !tbaa !0
  switch i32 %1292, label %.backedge.i13.i [
    i32 0, label %1293
    i32 3, label %1363
    i32 1, label %1392
    i32 2, label %1421
  ]

; <label>:1293                                    ; preds = %1290
  %1294 = getelementptr inbounds i8* %1289, i64 8
  %1295 = bitcast i8* %1294 to i8**
  %1296 = load i8** %1295, align 8, !tbaa !7
  %1297 = bitcast i8* %1296 to i64*
  %1298 = load i64* %1297, align 8, !tbaa !5
  %1299 = icmp eq i64 %1298, -4
  br i1 %1299, label %1300, label %1320

; <label>:1300                                    ; preds = %1293
  %1301 = getelementptr inbounds i8* %1289, i64 16
  %1302 = bitcast i8* %1301 to i32*
  store i32 0, i32* %1302, align 4, !tbaa !6
  %1303 = getelementptr inbounds i8* %1296, i64 16
  %1304 = bitcast i8* %1303 to i32*
  %1305 = load i32* %1304, align 4, !tbaa !6
  %1306 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_one(%struct.tre_mem_struct* %32, i32 %1305, i32 0, i32 2147483647, i32 0, i32* null, i32 -1) nounwind optsize
  %1307 = getelementptr inbounds i8* %1289, i64 32
  %1308 = bitcast i8* %1307 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1306, %struct.tre_pos_and_tags_t** %1308, align 8, !tbaa !7
  %1309 = icmp eq %struct.tre_pos_and_tags_t* %1306, null
  br i1 %1309, label %.loopexit, label %1310

; <label>:1310                                    ; preds = %1300
  %1311 = load i32* %1304, align 4, !tbaa !6
  %1312 = getelementptr inbounds i8* %1296, i64 8
  %1313 = bitcast i8* %1312 to i64*
  %1314 = load i64* %1313, align 8, !tbaa !5
  %1315 = trunc i64 %1314 to i32
  %1316 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_one(%struct.tre_mem_struct* %32, i32 %1311, i32 0, i32 2147483647, i32 0, i32* null, i32 %1315) nounwind optsize
  %1317 = getelementptr inbounds i8* %1289, i64 40
  %1318 = bitcast i8* %1317 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1316, %struct.tre_pos_and_tags_t** %1318, align 8, !tbaa !7
  %1319 = icmp eq %struct.tre_pos_and_tags_t* %1316, null
  br i1 %1319, label %.loopexit, label %.backedge.i13.i

; <label>:1320                                    ; preds = %1293
  %1321 = icmp slt i64 %1298, 0
  %1322 = getelementptr inbounds i8* %1289, i64 16
  %1323 = bitcast i8* %1322 to i32*
  br i1 %1321, label %1324, label %1334

; <label>:1324                                    ; preds = %1320
  store i32 1, i32* %1323, align 4, !tbaa !6
  %1325 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_empty(%struct.tre_mem_struct* %32) nounwind optsize
  %1326 = getelementptr inbounds i8* %1289, i64 32
  %1327 = bitcast i8* %1326 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1325, %struct.tre_pos_and_tags_t** %1327, align 8, !tbaa !7
  %1328 = icmp eq %struct.tre_pos_and_tags_t* %1325, null
  br i1 %1328, label %.loopexit, label %1329

; <label>:1329                                    ; preds = %1324
  %1330 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_empty(%struct.tre_mem_struct* %32) nounwind optsize
  %1331 = getelementptr inbounds i8* %1289, i64 40
  %1332 = bitcast i8* %1331 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1330, %struct.tre_pos_and_tags_t** %1332, align 8, !tbaa !7
  %1333 = icmp eq %struct.tre_pos_and_tags_t* %1330, null
  br i1 %1333, label %.loopexit, label %.backedge.i13.i

; <label>:1334                                    ; preds = %1320
  store i32 0, i32* %1323, align 4, !tbaa !6
  %1335 = getelementptr inbounds i8* %1296, i64 16
  %1336 = bitcast i8* %1335 to i32*
  %1337 = load i32* %1336, align 4, !tbaa !6
  %1338 = trunc i64 %1298 to i32
  %1339 = getelementptr inbounds i8* %1296, i64 8
  %1340 = bitcast i8* %1339 to i64*
  %1341 = load i64* %1340, align 8, !tbaa !5
  %1342 = trunc i64 %1341 to i32
  %1343 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_one(%struct.tre_mem_struct* %32, i32 %1337, i32 %1338, i32 %1342, i32 0, i32* null, i32 -1) nounwind optsize
  %1344 = getelementptr inbounds i8* %1289, i64 32
  %1345 = bitcast i8* %1344 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1343, %struct.tre_pos_and_tags_t** %1345, align 8, !tbaa !7
  %1346 = icmp eq %struct.tre_pos_and_tags_t* %1343, null
  br i1 %1346, label %.loopexit, label %1347

; <label>:1347                                    ; preds = %1334
  %1348 = load i32* %1336, align 4, !tbaa !6
  %1349 = load i64* %1297, align 8, !tbaa !5
  %1350 = trunc i64 %1349 to i32
  %1351 = load i64* %1340, align 8, !tbaa !5
  %1352 = trunc i64 %1351 to i32
  %1353 = getelementptr inbounds i8* %1296, i64 20
  %1354 = bitcast i8* %1353 to i32*
  %1355 = load i32* %1354, align 4, !tbaa !6
  %1356 = getelementptr inbounds i8* %1296, i64 24
  %1357 = bitcast i8* %1356 to i32**
  %1358 = load i32** %1357, align 8, !tbaa !7
  %1359 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_one(%struct.tre_mem_struct* %32, i32 %1348, i32 %1350, i32 %1352, i32 %1355, i32* %1358, i32 -1) nounwind optsize
  %1360 = getelementptr inbounds i8* %1289, i64 40
  %1361 = bitcast i8* %1360 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1359, %struct.tre_pos_and_tags_t** %1361, align 8, !tbaa !7
  %1362 = icmp eq %struct.tre_pos_and_tags_t* %1359, null
  br i1 %1362, label %.loopexit, label %.backedge.i13.i

; <label>:1363                                    ; preds = %1290
  %1364 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1289) nounwind optsize
  %1365 = icmp eq i32 %1364, 0
  br i1 %1365, label %1366, label %.loopexit

; <label>:1366                                    ; preds = %1363
  %1367 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 1 to i8*)) nounwind optsize
  %1368 = icmp eq i32 %1367, 0
  br i1 %1368, label %1369, label %.loopexit

; <label>:1369                                    ; preds = %1366
  %1370 = getelementptr inbounds i8* %1289, i64 8
  %1371 = bitcast i8* %1370 to i8**
  %1372 = load i8** %1371, align 8, !tbaa !7
  %1373 = getelementptr inbounds i8* %1372, i64 8
  %1374 = bitcast i8* %1373 to %struct.tre_ast_node_t**
  %1375 = load %struct.tre_ast_node_t** %1374, align 8, !tbaa !7
  %1376 = bitcast %struct.tre_ast_node_t* %1375 to i8*
  %1377 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1376) nounwind optsize
  %1378 = icmp eq i32 %1377, 0
  br i1 %1378, label %1379, label %.loopexit

; <label>:1379                                    ; preds = %1369
  %1380 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1381 = icmp eq i32 %1380, 0
  br i1 %1381, label %1382, label %.loopexit

; <label>:1382                                    ; preds = %1379
  %1383 = load i8** %1371, align 8, !tbaa !7
  %1384 = bitcast i8* %1383 to %struct.tre_ast_node_t**
  %1385 = load %struct.tre_ast_node_t** %1384, align 8, !tbaa !7
  %1386 = bitcast %struct.tre_ast_node_t* %1385 to i8*
  %1387 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1386) nounwind optsize
  %1388 = icmp eq i32 %1387, 0
  br i1 %1388, label %1389, label %.loopexit

; <label>:1389                                    ; preds = %1382
  %1390 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1391 = icmp eq i32 %1390, 0
  br i1 %1391, label %.backedge.i13.i, label %.loopexit

; <label>:1392                                    ; preds = %1290
  %1393 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1289) nounwind optsize
  %1394 = icmp eq i32 %1393, 0
  br i1 %1394, label %1395, label %.loopexit

; <label>:1395                                    ; preds = %1392
  %1396 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 2 to i8*)) nounwind optsize
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1398, label %.loopexit

; <label>:1398                                    ; preds = %1395
  %1399 = getelementptr inbounds i8* %1289, i64 8
  %1400 = bitcast i8* %1399 to i8**
  %1401 = load i8** %1400, align 8, !tbaa !7
  %1402 = getelementptr inbounds i8* %1401, i64 8
  %1403 = bitcast i8* %1402 to %struct.tre_ast_node_t**
  %1404 = load %struct.tre_ast_node_t** %1403, align 8, !tbaa !7
  %1405 = bitcast %struct.tre_ast_node_t* %1404 to i8*
  %1406 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1405) nounwind optsize
  %1407 = icmp eq i32 %1406, 0
  br i1 %1407, label %1408, label %.loopexit

; <label>:1408                                    ; preds = %1398
  %1409 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1410 = icmp eq i32 %1409, 0
  br i1 %1410, label %1411, label %.loopexit

; <label>:1411                                    ; preds = %1408
  %1412 = load i8** %1400, align 8, !tbaa !7
  %1413 = bitcast i8* %1412 to %struct.tre_ast_node_t**
  %1414 = load %struct.tre_ast_node_t** %1413, align 8, !tbaa !7
  %1415 = bitcast %struct.tre_ast_node_t* %1414 to i8*
  %1416 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1415) nounwind optsize
  %1417 = icmp eq i32 %1416, 0
  br i1 %1417, label %1418, label %.loopexit

; <label>:1418                                    ; preds = %1411
  %1419 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1420 = icmp eq i32 %1419, 0
  br i1 %1420, label %.backedge.i13.i, label %.loopexit

; <label>:1421                                    ; preds = %1290
  %1422 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1289) nounwind optsize
  %1423 = icmp eq i32 %1422, 0
  br i1 %1423, label %1424, label %.loopexit

; <label>:1424                                    ; preds = %1421
  %1425 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* inttoptr (i64 3 to i8*)) nounwind optsize
  %1426 = icmp eq i32 %1425, 0
  br i1 %1426, label %1427, label %.loopexit

; <label>:1427                                    ; preds = %1424
  %1428 = getelementptr inbounds i8* %1289, i64 8
  %1429 = bitcast i8* %1428 to i8**
  %1430 = load i8** %1429, align 8, !tbaa !7
  %1431 = bitcast i8* %1430 to %struct.tre_ast_node_t**
  %1432 = load %struct.tre_ast_node_t** %1431, align 8, !tbaa !7
  %1433 = bitcast %struct.tre_ast_node_t* %1432 to i8*
  %1434 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* %1433) nounwind optsize
  %1435 = icmp eq i32 %1434, 0
  br i1 %1435, label %1436, label %.loopexit

; <label>:1436                                    ; preds = %1427
  %1437 = call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %16, i8* null) nounwind optsize
  %1438 = icmp eq i32 %1437, 0
  br i1 %1438, label %.backedge.i13.i, label %.loopexit

; <label>:1439                                    ; preds = %1278
  %1440 = getelementptr inbounds i8* %1289, i64 8
  %1441 = bitcast i8* %1440 to i8**
  %1442 = load i8** %1441, align 8, !tbaa !7
  %1443 = bitcast i8* %1442 to %struct.tre_ast_node_t**
  %1444 = load %struct.tre_ast_node_t** %1443, align 8, !tbaa !7
  %1445 = getelementptr inbounds %struct.tre_ast_node_t* %1444, i64 0, i32 2
  %1446 = load i32* %1445, align 4, !tbaa !6
  %1447 = icmp eq i32 %1446, 0
  %1448 = getelementptr inbounds i8* %1442, i64 8
  %1449 = bitcast i8* %1448 to %struct.tre_ast_node_t**
  %1450 = load %struct.tre_ast_node_t** %1449, align 8, !tbaa !7
  br i1 %1447, label %1451, label %._crit_edge.i14.i

; <label>:1451                                    ; preds = %1439
  %1452 = getelementptr inbounds %struct.tre_ast_node_t* %1450, i64 0, i32 2
  %1453 = load i32* %1452, align 4, !tbaa !6
  %1454 = icmp ne i32 %1453, 0
  br label %._crit_edge.i14.i

._crit_edge.i14.i:                                ; preds = %1451, %1439
  %1455 = phi i1 [ %1454, %1451 ], [ true, %1439 ]
  %1456 = zext i1 %1455 to i32
  %1457 = getelementptr inbounds i8* %1289, i64 16
  %1458 = bitcast i8* %1457 to i32*
  store i32 %1456, i32* %1458, align 4, !tbaa !6
  %1459 = getelementptr inbounds %struct.tre_ast_node_t* %1444, i64 0, i32 6
  %1460 = load %struct.tre_pos_and_tags_t** %1459, align 8, !tbaa !7
  %1461 = getelementptr inbounds %struct.tre_ast_node_t* %1450, i64 0, i32 6
  %1462 = load %struct.tre_pos_and_tags_t** %1461, align 8, !tbaa !7
  %1463 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_union(%struct.tre_mem_struct* %32, %struct.tre_pos_and_tags_t* %1460, %struct.tre_pos_and_tags_t* %1462, i32* null, i32 0) nounwind optsize
  %1464 = getelementptr inbounds i8* %1289, i64 32
  %1465 = bitcast i8* %1464 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1463, %struct.tre_pos_and_tags_t** %1465, align 8, !tbaa !7
  %1466 = icmp eq %struct.tre_pos_and_tags_t* %1463, null
  br i1 %1466, label %.loopexit, label %1467

; <label>:1467                                    ; preds = %._crit_edge.i14.i
  %1468 = load %struct.tre_ast_node_t** %1443, align 8, !tbaa !7
  %1469 = getelementptr inbounds %struct.tre_ast_node_t* %1468, i64 0, i32 7
  %1470 = load %struct.tre_pos_and_tags_t** %1469, align 8, !tbaa !7
  %1471 = load %struct.tre_ast_node_t** %1449, align 8, !tbaa !7
  %1472 = getelementptr inbounds %struct.tre_ast_node_t* %1471, i64 0, i32 7
  %1473 = load %struct.tre_pos_and_tags_t** %1472, align 8, !tbaa !7
  %1474 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_union(%struct.tre_mem_struct* %32, %struct.tre_pos_and_tags_t* %1470, %struct.tre_pos_and_tags_t* %1473, i32* null, i32 0) nounwind optsize
  %1475 = getelementptr inbounds i8* %1289, i64 40
  %1476 = bitcast i8* %1475 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1474, %struct.tre_pos_and_tags_t** %1476, align 8, !tbaa !7
  %1477 = icmp eq %struct.tre_pos_and_tags_t* %1474, null
  br i1 %1477, label %.loopexit, label %.backedge.i13.i

; <label>:1478                                    ; preds = %1278
  %1479 = getelementptr inbounds i8* %1289, i64 8
  %1480 = bitcast i8* %1479 to i8**
  %1481 = load i8** %1480, align 8, !tbaa !7
  %1482 = getelementptr inbounds i8* %1481, i64 8
  %1483 = bitcast i8* %1482 to i32*
  %1484 = load i32* %1483, align 4, !tbaa !6
  %1485 = icmp eq i32 %1484, 0
  %.phi.trans.insert.phi.trans.insert.i.i = bitcast i8* %1481 to %struct.tre_ast_node_t**
  %.pre.pre.i.i = load %struct.tre_ast_node_t** %.phi.trans.insert.phi.trans.insert.i.i, align 8, !tbaa !7
  br i1 %1485, label %._crit_edge28.i.i, label %1486

; <label>:1486                                    ; preds = %1478
  %1487 = getelementptr inbounds %struct.tre_ast_node_t* %.pre.pre.i.i, i64 0, i32 2
  %1488 = load i32* %1487, align 4, !tbaa !6
  %1489 = icmp eq i32 %1488, 0
  br i1 %1489, label %1492, label %._crit_edge28.i.i

._crit_edge28.i.i:                                ; preds = %1486, %1478
  %1490 = getelementptr inbounds i8* %1289, i64 16
  %1491 = bitcast i8* %1490 to i32*
  store i32 1, i32* %1491, align 4, !tbaa !6
  br label %1495

; <label>:1492                                    ; preds = %1486
  %1493 = getelementptr inbounds i8* %1289, i64 16
  %1494 = bitcast i8* %1493 to i32*
  store i32 0, i32* %1494, align 4, !tbaa !6
  br label %1495

; <label>:1495                                    ; preds = %1492, %._crit_edge28.i.i
  %1496 = getelementptr inbounds %struct.tre_ast_node_t* %.pre.pre.i.i, i64 0, i32 6
  %1497 = load %struct.tre_pos_and_tags_t** %1496, align 8, !tbaa !7
  %1498 = getelementptr inbounds i8* %1289, i64 32
  %1499 = bitcast i8* %1498 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1497, %struct.tre_pos_and_tags_t** %1499, align 8, !tbaa !7
  %1500 = load %struct.tre_ast_node_t** %.phi.trans.insert.phi.trans.insert.i.i, align 8, !tbaa !7
  %1501 = getelementptr inbounds %struct.tre_ast_node_t* %1500, i64 0, i32 7
  %1502 = load %struct.tre_pos_and_tags_t** %1501, align 8, !tbaa !7
  %1503 = getelementptr inbounds i8* %1289, i64 40
  %1504 = bitcast i8* %1503 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1502, %struct.tre_pos_and_tags_t** %1504, align 8, !tbaa !7
  br label %.backedge.i13.i

; <label>:1505                                    ; preds = %1278
  %1506 = getelementptr inbounds i8* %1289, i64 8
  %1507 = bitcast i8* %1506 to i8**
  %1508 = load i8** %1507, align 8, !tbaa !7
  %1509 = bitcast i8* %1508 to %struct.tre_ast_node_t**
  %1510 = load %struct.tre_ast_node_t** %1509, align 8, !tbaa !7
  %1511 = getelementptr inbounds %struct.tre_ast_node_t* %1510, i64 0, i32 2
  %1512 = load i32* %1511, align 4, !tbaa !6
  %1513 = icmp eq i32 %1512, 0
  br i1 %1513, label %1521, label %1514

; <label>:1514                                    ; preds = %1505
  %1515 = getelementptr inbounds i8* %1508, i64 8
  %1516 = bitcast i8* %1515 to %struct.tre_ast_node_t**
  %1517 = load %struct.tre_ast_node_t** %1516, align 8, !tbaa !7
  %1518 = getelementptr inbounds %struct.tre_ast_node_t* %1517, i64 0, i32 2
  %1519 = load i32* %1518, align 4, !tbaa !6
  %1520 = icmp ne i32 %1519, 0
  br label %1521

; <label>:1521                                    ; preds = %1514, %1505
  %1522 = phi i1 [ false, %1505 ], [ %1520, %1514 ]
  %1523 = zext i1 %1522 to i32
  %1524 = getelementptr inbounds i8* %1289, i64 16
  %1525 = bitcast i8* %1524 to i32*
  store i32 %1523, i32* %1525, align 4, !tbaa !6
  %1526 = load i32* %1511, align 4, !tbaa !6
  %1527 = icmp eq i32 %1526, 0
  br i1 %1527, label %1559, label %1528

; <label>:1528                                    ; preds = %1521
  %1529 = call fastcc i32 @tre_match_empty(%struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1510, i32* null, i32* null, i32* %num_tags.i.i) nounwind optsize
  %1530 = icmp eq i32 %1529, 0
  br i1 %1530, label %1531, label %.loopexit

; <label>:1531                                    ; preds = %1528
  %1532 = load i32* %num_tags.i.i, align 4, !tbaa !6
  %1533 = add nsw i32 %1532, 1
  %1534 = sext i32 %1533 to i64
  %1535 = shl nsw i64 %1534, 2
  %1536 = call i8* @malloc(i64 %1535) nounwind optsize
  %1537 = bitcast i8* %1536 to i32*
  %1538 = icmp eq i8* %1536, null
  br i1 %1538, label %.loopexit, label %1539

; <label>:1539                                    ; preds = %1531
  store i32 -1, i32* %1537, align 4, !tbaa !6
  store i32 0, i32* %assertions.i.i, align 4, !tbaa !6
  %1540 = load %struct.tre_ast_node_t** %1509, align 8, !tbaa !7
  %1541 = call fastcc i32 @tre_match_empty(%struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1540, i32* %1537, i32* %assertions.i.i, i32* null) nounwind optsize
  %1542 = icmp eq i32 %1541, 0
  br i1 %1542, label %1544, label %1543

; <label>:1543                                    ; preds = %1539
  call void @free(i8* %1536) nounwind optsize
  br label %.loopexit

; <label>:1544                                    ; preds = %1539
  %1545 = getelementptr inbounds i8* %1508, i64 8
  %1546 = bitcast i8* %1545 to %struct.tre_ast_node_t**
  %1547 = load %struct.tre_ast_node_t** %1546, align 8, !tbaa !7
  %1548 = getelementptr inbounds %struct.tre_ast_node_t* %1547, i64 0, i32 6
  %1549 = load %struct.tre_pos_and_tags_t** %1548, align 8, !tbaa !7
  %1550 = load %struct.tre_ast_node_t** %1509, align 8, !tbaa !7
  %1551 = getelementptr inbounds %struct.tre_ast_node_t* %1550, i64 0, i32 6
  %1552 = load %struct.tre_pos_and_tags_t** %1551, align 8, !tbaa !7
  %1553 = load i32* %assertions.i.i, align 4, !tbaa !6
  %1554 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_union(%struct.tre_mem_struct* %32, %struct.tre_pos_and_tags_t* %1549, %struct.tre_pos_and_tags_t* %1552, i32* %1537, i32 %1553) nounwind optsize
  %1555 = getelementptr inbounds i8* %1289, i64 32
  %1556 = bitcast i8* %1555 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1554, %struct.tre_pos_and_tags_t** %1556, align 8, !tbaa !7
  call void @free(i8* %1536) nounwind optsize
  %1557 = load %struct.tre_pos_and_tags_t** %1556, align 8, !tbaa !7
  %1558 = icmp eq %struct.tre_pos_and_tags_t* %1557, null
  br i1 %1558, label %.loopexit, label %1564

; <label>:1559                                    ; preds = %1521
  %1560 = getelementptr inbounds %struct.tre_ast_node_t* %1510, i64 0, i32 6
  %1561 = load %struct.tre_pos_and_tags_t** %1560, align 8, !tbaa !7
  %1562 = getelementptr inbounds i8* %1289, i64 32
  %1563 = bitcast i8* %1562 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1561, %struct.tre_pos_and_tags_t** %1563, align 8, !tbaa !7
  %.pre30.i.i = getelementptr inbounds i8* %1508, i64 8
  %.pre31.i.i = bitcast i8* %.pre30.i.i to %struct.tre_ast_node_t**
  br label %1564

; <label>:1564                                    ; preds = %1559, %1544
  %.pre-phi32.i.i = phi %struct.tre_ast_node_t** [ %1546, %1544 ], [ %.pre31.i.i, %1559 ]
  %1565 = load %struct.tre_ast_node_t** %.pre-phi32.i.i, align 8, !tbaa !7
  %1566 = getelementptr inbounds %struct.tre_ast_node_t* %1565, i64 0, i32 2
  %1567 = load i32* %1566, align 4, !tbaa !6
  %1568 = icmp eq i32 %1567, 0
  br i1 %1568, label %1598, label %1569

; <label>:1569                                    ; preds = %1564
  %1570 = call fastcc i32 @tre_match_empty(%struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1565, i32* null, i32* null, i32* %num_tags.i.i) nounwind optsize
  %1571 = icmp eq i32 %1570, 0
  br i1 %1571, label %1572, label %.loopexit

; <label>:1572                                    ; preds = %1569
  %1573 = load i32* %num_tags.i.i, align 4, !tbaa !6
  %1574 = add nsw i32 %1573, 1
  %1575 = sext i32 %1574 to i64
  %1576 = shl nsw i64 %1575, 2
  %1577 = call i8* @malloc(i64 %1576) nounwind optsize
  %1578 = bitcast i8* %1577 to i32*
  %1579 = icmp eq i8* %1577, null
  br i1 %1579, label %.loopexit, label %1580

; <label>:1580                                    ; preds = %1572
  store i32 -1, i32* %1578, align 4, !tbaa !6
  store i32 0, i32* %assertions.i.i, align 4, !tbaa !6
  %1581 = load %struct.tre_ast_node_t** %.pre-phi32.i.i, align 8, !tbaa !7
  %1582 = call fastcc i32 @tre_match_empty(%struct.tre_stack_rec* %16, %struct.tre_ast_node_t* %1581, i32* %1578, i32* %assertions.i.i, i32* null) nounwind optsize
  %1583 = icmp eq i32 %1582, 0
  br i1 %1583, label %1585, label %1584

; <label>:1584                                    ; preds = %1580
  call void @free(i8* %1577) nounwind optsize
  br label %.loopexit

; <label>:1585                                    ; preds = %1580
  %1586 = load %struct.tre_ast_node_t** %1509, align 8, !tbaa !7
  %1587 = getelementptr inbounds %struct.tre_ast_node_t* %1586, i64 0, i32 7
  %1588 = load %struct.tre_pos_and_tags_t** %1587, align 8, !tbaa !7
  %1589 = load %struct.tre_ast_node_t** %.pre-phi32.i.i, align 8, !tbaa !7
  %1590 = getelementptr inbounds %struct.tre_ast_node_t* %1589, i64 0, i32 7
  %1591 = load %struct.tre_pos_and_tags_t** %1590, align 8, !tbaa !7
  %1592 = load i32* %assertions.i.i, align 4, !tbaa !6
  %1593 = call fastcc %struct.tre_pos_and_tags_t* @tre_set_union(%struct.tre_mem_struct* %32, %struct.tre_pos_and_tags_t* %1588, %struct.tre_pos_and_tags_t* %1591, i32* %1578, i32 %1592) nounwind optsize
  %1594 = getelementptr inbounds i8* %1289, i64 40
  %1595 = bitcast i8* %1594 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1593, %struct.tre_pos_and_tags_t** %1595, align 8, !tbaa !7
  call void @free(i8* %1577) nounwind optsize
  %1596 = load %struct.tre_pos_and_tags_t** %1595, align 8, !tbaa !7
  %1597 = icmp eq %struct.tre_pos_and_tags_t* %1596, null
  br i1 %1597, label %.loopexit, label %.backedge.i13.i

; <label>:1598                                    ; preds = %1564
  %1599 = getelementptr inbounds %struct.tre_ast_node_t* %1565, i64 0, i32 7
  %1600 = load %struct.tre_pos_and_tags_t** %1599, align 8, !tbaa !7
  %1601 = getelementptr inbounds i8* %1289, i64 40
  %1602 = bitcast i8* %1601 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* %1600, %struct.tre_pos_and_tags_t** %1602, align 8, !tbaa !7
  br label %.backedge.i13.i

; <label>:1603                                    ; preds = %.backedge.i13.i
  call void @llvm.lifetime.end(i64 -1, i8* %1267) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %1268) nounwind
  %1604 = load i32* %75, align 8, !tbaa !6
  %1605 = sext i32 %1604 to i64
  %1606 = shl nsw i64 %1605, 2
  %1607 = call i8* @malloc(i64 %1606) nounwind optsize
  %1608 = bitcast i8* %1607 to i32*
  %1609 = icmp eq i8* %1607, null
  br i1 %1609, label %.loopexit, label %1610

; <label>:1610                                    ; preds = %1603
  %1611 = call i8* @malloc(i64 %1606) nounwind optsize
  %1612 = bitcast i8* %1611 to i32*
  %1613 = icmp eq i8* %1611, null
  br i1 %1613, label %.loopexit, label %.preheader32.i

.preheader32.i:                                   ; preds = %1610
  %1614 = icmp sgt i32 %1604, 0
  br i1 %1614, label %.lr.ph34.i, label %._crit_edge35.i

.lr.ph34.i:                                       ; preds = %.lr.ph34.i, %.preheader32.i
  %indvars.iv100.i = phi i64 [ %indvars.iv.next101.i, %.lr.ph34.i ], [ 0, %.preheader32.i ]
  %1615 = getelementptr inbounds i32* %1608, i64 %indvars.iv100.i
  store i32 0, i32* %1615, align 4, !tbaa !6
  %indvars.iv.next101.i = add i64 %indvars.iv100.i, 1
  %1616 = load i32* %75, align 8, !tbaa !6
  %1617 = trunc i64 %indvars.iv.next101.i to i32
  %1618 = icmp slt i32 %1617, %1616
  br i1 %1618, label %.lr.ph34.i, label %._crit_edge35.i

._crit_edge35.i:                                  ; preds = %.lr.ph34.i, %.preheader32.i
  %1619 = call fastcc i32 @tre_ast_to_tnfa(%struct.tre_ast_node_t* %1264, %struct.tnfa_transition* null, i32* %1608, i32* null) nounwind optsize
  %1620 = load i32* %75, align 8, !tbaa !6
  %1621 = icmp sgt i32 %1620, 0
  br i1 %1621, label %.lr.ph29.i, label %._crit_edge30.i

.lr.ph29.i:                                       ; preds = %.lr.ph29.i, %._crit_edge35.i
  %indvars.iv98.i = phi i64 [ %indvars.iv.next99.i, %.lr.ph29.i ], [ 0, %._crit_edge35.i ]
  %add.027.i = phi i32 [ %1626, %.lr.ph29.i ], [ 0, %._crit_edge35.i ]
  %1622 = getelementptr inbounds i32* %1612, i64 %indvars.iv98.i
  store i32 %add.027.i, i32* %1622, align 4, !tbaa !6
  %1623 = getelementptr inbounds i32* %1608, i64 %indvars.iv98.i
  %1624 = load i32* %1623, align 4, !tbaa !6
  %1625 = add i32 %add.027.i, 1
  %1626 = add i32 %1625, %1624
  store i32 0, i32* %1623, align 4, !tbaa !6
  %indvars.iv.next99.i = add i64 %indvars.iv98.i, 1
  %1627 = load i32* %75, align 8, !tbaa !6
  %1628 = trunc i64 %indvars.iv.next99.i to i32
  %1629 = icmp slt i32 %1628, %1627
  br i1 %1629, label %.lr.ph29.i, label %._crit_edge30.i

._crit_edge30.i:                                  ; preds = %.lr.ph29.i, %._crit_edge35.i
  %add.0.lcssa.i = phi i32 [ 0, %._crit_edge35.i ], [ %1626, %.lr.ph29.i ]
  %1630 = add nsw i32 %add.0.lcssa.i, 1
  %1631 = sext i32 %1630 to i64
  %1632 = call i8* @calloc(i64 %1631, i64 48) nounwind optsize
  %1633 = bitcast i8* %1632 to %struct.tnfa_transition*
  %1634 = icmp eq i8* %1632, null
  br i1 %1634, label %.loopexit, label %1635

; <label>:1635                                    ; preds = %._crit_edge30.i
  %1636 = bitcast i8* %960 to %struct.tnfa_transition**
  store %struct.tnfa_transition* %1633, %struct.tnfa_transition** %1636, align 8, !tbaa !7
  %1637 = getelementptr inbounds i8* %960, i64 8
  %1638 = bitcast i8* %1637 to i32*
  store i32 %add.0.lcssa.i, i32* %1638, align 4, !tbaa !6
  %1639 = call fastcc i32 @tre_ast_to_tnfa(%struct.tre_ast_node_t* %1264, %struct.tnfa_transition* %1633, i32* %1608, i32* %1612) nounwind optsize
  %1640 = icmp eq i32 %1639, 0
  br i1 %1640, label %1641, label %.loopexit

; <label>:1641                                    ; preds = %1635
  %1642 = getelementptr inbounds %struct.tre_ast_node_t* %1264, i64 0, i32 6
  %1643 = load %struct.tre_pos_and_tags_t** %1642, align 8, !tbaa !7
  %1644 = getelementptr inbounds %struct.tre_pos_and_tags_t* %1643, i64 0, i32 0
  %1645 = load i32* %1644, align 4, !tbaa !6
  %1646 = icmp sgt i32 %1645, -1
  br i1 %1646, label %.lr.ph.i, label %1651

.lr.ph.i:                                         ; preds = %.lr.ph.i, %1641
  %i.225.i = phi i32 [ %phitmp.i, %.lr.ph.i ], [ 1, %1641 ]
  %p.024.i = phi %struct.tre_pos_and_tags_t* [ %1647, %.lr.ph.i ], [ %1643, %1641 ]
  %1647 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p.024.i, i64 1
  %phitmp.i = add i32 %i.225.i, 1
  %1648 = getelementptr inbounds %struct.tre_pos_and_tags_t* %1647, i64 0, i32 0
  %1649 = load i32* %1648, align 4, !tbaa !6
  %1650 = icmp sgt i32 %1649, -1
  br i1 %1650, label %.lr.ph.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %.lr.ph.i
  %phitmp93.i = sext i32 %phitmp.i to i64
  br label %1651

; <label>:1651                                    ; preds = %._crit_edge.i, %1641
  %i.2.lcssa.i = phi i64 [ %phitmp93.i, %._crit_edge.i ], [ 1, %1641 ]
  %1652 = call i8* @calloc(i64 %i.2.lcssa.i, i64 48) nounwind optsize
  %1653 = bitcast i8* %1652 to %struct.tnfa_transition*
  %1654 = icmp eq i8* %1652, null
  br i1 %1654, label %.loopexit, label %1655

; <label>:1655                                    ; preds = %1651
  %1656 = getelementptr inbounds i8* %960, i64 16
  %1657 = bitcast i8* %1656 to %struct.tnfa_transition**
  store %struct.tnfa_transition* %1653, %struct.tnfa_transition** %1657, align 8, !tbaa !7
  %1658 = load %struct.tre_pos_and_tags_t** %1642, align 8, !tbaa !7
  br label %1659

; <label>:1659                                    ; preds = %1689, %1655
  %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %1689 ], [ 0, %1655 ]
  %p.1.i = phi %struct.tre_pos_and_tags_t* [ %1694, %1689 ], [ %1658, %1655 ]
  %i.3.i = phi i32 [ %1693, %1689 ], [ 0, %1655 ]
  %1660 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p.1.i, i64 0, i32 0
  %1661 = load i32* %1660, align 4, !tbaa !6
  %1662 = icmp sgt i32 %1661, -1
  br i1 %1662, label %1663, label %1695

; <label>:1663                                    ; preds = %1659
  %1664 = sext i32 %1661 to i64
  %1665 = getelementptr inbounds i32* %1612, i64 %1664
  %1666 = load i32* %1665, align 4, !tbaa !6
  %1667 = sext i32 %1666 to i64
  %1668 = getelementptr inbounds %struct.tnfa_transition* %1633, i64 %1667
  %1669 = getelementptr inbounds %struct.tnfa_transition* %1653, i64 %indvars.iv95.i, i32 2
  store %struct.tnfa_transition* %1668, %struct.tnfa_transition** %1669, align 8, !tbaa !7
  %1670 = getelementptr inbounds %struct.tnfa_transition* %1653, i64 %indvars.iv95.i, i32 3
  store i32 %1661, i32* %1670, align 4, !tbaa !6
  %1671 = getelementptr inbounds %struct.tnfa_transition* %1653, i64 %indvars.iv95.i, i32 4
  store i32* null, i32** %1671, align 8, !tbaa !7
  %1672 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p.1.i, i64 0, i32 3
  %1673 = load i32** %1672, align 8, !tbaa !7
  %1674 = icmp eq i32* %1673, null
  br i1 %1674, label %1689, label %.preheader.i

.preheader.i:                                     ; preds = %.preheader.i, %1663
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %.preheader.i ], [ 0, %1663 ]
  %j.0.i = phi i32 [ %1678, %.preheader.i ], [ 0, %1663 ]
  %1675 = getelementptr inbounds i32* %1673, i64 %indvars.iv.i
  %1676 = load i32* %1675, align 4, !tbaa !6
  %1677 = icmp sgt i32 %1676, -1
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %1678 = add nsw i32 %j.0.i, 1
  br i1 %1677, label %.preheader.i, label %1679

; <label>:1679                                    ; preds = %.preheader.i
  %1680 = sext i32 %1678 to i64
  %1681 = shl nsw i64 %1680, 2
  %1682 = call i8* @malloc(i64 %1681) nounwind optsize
  %1683 = bitcast i8* %1682 to i32*
  store i32* %1683, i32** %1671, align 8, !tbaa !7
  %1684 = icmp eq i8* %1682, null
  br i1 %1684, label %.loopexit, label %1685

; <label>:1685                                    ; preds = %1679
  %1686 = load i32** %1672, align 8, !tbaa !7
  %1687 = bitcast i32* %1686 to i8*
  %1688 = call i8* @memcpy(i8* %1682, i8* %1687, i64 %1681) nounwind optsize
  br label %1689

; <label>:1689                                    ; preds = %1685, %1663
  %1690 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p.1.i, i64 0, i32 4
  %1691 = load i32* %1690, align 4, !tbaa !6
  %1692 = getelementptr inbounds %struct.tnfa_transition* %1653, i64 %indvars.iv95.i, i32 5
  store i32 %1691, i32* %1692, align 4, !tbaa !6
  %indvars.iv.next96.i = add i64 %indvars.iv95.i, 1
  %1693 = add nsw i32 %i.3.i, 1
  %1694 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p.1.i, i64 1
  br label %1659

; <label>:1695                                    ; preds = %1659
  %1696 = sext i32 %i.3.i to i64
  %1697 = getelementptr inbounds %struct.tnfa_transition* %1653, i64 %1696, i32 2
  store %struct.tnfa_transition* null, %struct.tnfa_transition** %1697, align 8, !tbaa !7
  store i32 %add.0.lcssa.i, i32* %1638, align 4, !tbaa !6
  %1698 = getelementptr inbounds %struct.tre_ast_node_t* %1264, i64 0, i32 7
  %1699 = load %struct.tre_pos_and_tags_t** %1698, align 8, !tbaa !7
  %1700 = getelementptr inbounds %struct.tre_pos_and_tags_t* %1699, i64 0, i32 0
  %1701 = load i32* %1700, align 4, !tbaa !6
  %1702 = sext i32 %1701 to i64
  %1703 = getelementptr inbounds i32* %1612, i64 %1702
  %1704 = load i32* %1703, align 4, !tbaa !6
  %1705 = sext i32 %1704 to i64
  %1706 = getelementptr inbounds %struct.tnfa_transition* %1633, i64 %1705
  %1707 = getelementptr inbounds i8* %960, i64 24
  %1708 = bitcast i8* %1707 to %struct.tnfa_transition**
  store %struct.tnfa_transition* %1706, %struct.tnfa_transition** %1708, align 8, !tbaa !7
  %1709 = load i32* %75, align 8, !tbaa !6
  %1710 = getelementptr inbounds i8* %960, i64 64
  %1711 = bitcast i8* %1710 to i32*
  store i32 %1709, i32* %1711, align 4, !tbaa !6
  %1712 = getelementptr inbounds i8* %960, i64 68
  %1713 = bitcast i8* %1712 to i32*
  store i32 %cflags, i32* %1713, align 4, !tbaa !6
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %32) nounwind optsize
  %1714 = load i8*** %22, align 8, !tbaa !7
  %1715 = bitcast i8** %1714 to i8*
  call void @free(i8* %1715) nounwind optsize
  call void @free(i8* %15) nounwind optsize
  call void @free(i8* %1607) nounwind optsize
  call void @free(i8* %1611) nounwind optsize
  %1716 = getelementptr inbounds %struct.regex_t* %preg, i64 0, i32 1
  store i8* %960, i8** %1716, align 8, !tbaa !7
  br label %tre_compile.exit

.loopexit:                                        ; preds = %1679, %1651, %1635, %._crit_edge30.i, %1610, %1603, %1585, %1584, %1572, %1569, %1544, %1543, %1531, %1528, %1467, %._crit_edge.i14.i, %1436, %1427, %1424, %1421, %1418, %1411, %1408, %1398, %1395, %1392, %1389, %1382, %1379, %1369, %1366, %1363, %1347, %1334, %1329, %1324, %1310, %1300, %1273, %1266, %1256, %1251, %tre_expand_ast.exit.i, %998, %993, %982, %974, %959, %949, %tre_parse.exit.i, %919, %915, %886, %873, %853, %842, %.thread141.i.i, %793, %764, %733, %718, %706, %705, %693, %659, %655, %650, %tre_parse_bracket.exit.i.i, %387, %369, %305, %294, %286, %283, %282, %279, %274, %272, %263, %199, %180, %147
  %counts.0.i = phi i32* [ null, %tre_parse.exit.i ], [ null, %949 ], [ null, %959 ], [ null, %974 ], [ null, %982 ], [ null, %993 ], [ null, %998 ], [ null, %tre_expand_ast.exit.i ], [ null, %1256 ], [ %1608, %1603 ], [ %1608, %1610 ], [ %1608, %._crit_edge30.i ], [ %1608, %1635 ], [ %1608, %1651 ], [ null, %1251 ], [ null, %1543 ], [ null, %1584 ], [ null, %1266 ], [ null, %1273 ], [ %1608, %1679 ], [ null, %1300 ], [ null, %1310 ], [ null, %1324 ], [ null, %1329 ], [ null, %1334 ], [ null, %1347 ], [ null, %1363 ], [ null, %1366 ], [ null, %1369 ], [ null, %1379 ], [ null, %1382 ], [ null, %1389 ], [ null, %1392 ], [ null, %1395 ], [ null, %1398 ], [ null, %1408 ], [ null, %1411 ], [ null, %1418 ], [ null, %1421 ], [ null, %1424 ], [ null, %1427 ], [ null, %1436 ], [ null, %._crit_edge.i14.i ], [ null, %1467 ], [ null, %1528 ], [ null, %1531 ], [ null, %1544 ], [ null, %1569 ], [ null, %1572 ], [ null, %1585 ], [ null, %147 ], [ null, %180 ], [ null, %199 ], [ null, %263 ], [ null, %272 ], [ null, %274 ], [ null, %279 ], [ null, %282 ], [ null, %283 ], [ null, %286 ], [ null, %294 ], [ null, %305 ], [ null, %369 ], [ null, %387 ], [ null, %tre_parse_bracket.exit.i.i ], [ null, %650 ], [ null, %655 ], [ null, %659 ], [ null, %693 ], [ null, %705 ], [ null, %706 ], [ null, %718 ], [ null, %733 ], [ null, %764 ], [ null, %793 ], [ null, %.thread141.i.i ], [ null, %842 ], [ null, %853 ], [ null, %873 ], [ null, %886 ], [ null, %915 ], [ null, %919 ]
  %offs.0.i = phi i32* [ null, %tre_parse.exit.i ], [ null, %949 ], [ null, %959 ], [ null, %974 ], [ null, %982 ], [ null, %993 ], [ null, %998 ], [ null, %tre_expand_ast.exit.i ], [ null, %1256 ], [ null, %1603 ], [ %1612, %1610 ], [ %1612, %._crit_edge30.i ], [ %1612, %1635 ], [ %1612, %1651 ], [ null, %1251 ], [ null, %1543 ], [ null, %1584 ], [ null, %1266 ], [ null, %1273 ], [ %1612, %1679 ], [ null, %1300 ], [ null, %1310 ], [ null, %1324 ], [ null, %1329 ], [ null, %1334 ], [ null, %1347 ], [ null, %1363 ], [ null, %1366 ], [ null, %1369 ], [ null, %1379 ], [ null, %1382 ], [ null, %1389 ], [ null, %1392 ], [ null, %1395 ], [ null, %1398 ], [ null, %1408 ], [ null, %1411 ], [ null, %1418 ], [ null, %1421 ], [ null, %1424 ], [ null, %1427 ], [ null, %1436 ], [ null, %._crit_edge.i14.i ], [ null, %1467 ], [ null, %1528 ], [ null, %1531 ], [ null, %1544 ], [ null, %1569 ], [ null, %1572 ], [ null, %1585 ], [ null, %147 ], [ null, %180 ], [ null, %199 ], [ null, %263 ], [ null, %272 ], [ null, %274 ], [ null, %279 ], [ null, %282 ], [ null, %283 ], [ null, %286 ], [ null, %294 ], [ null, %305 ], [ null, %369 ], [ null, %387 ], [ null, %tre_parse_bracket.exit.i.i ], [ null, %650 ], [ null, %655 ], [ null, %659 ], [ null, %693 ], [ null, %705 ], [ null, %706 ], [ null, %718 ], [ null, %733 ], [ null, %764 ], [ null, %793 ], [ null, %.thread141.i.i ], [ null, %842 ], [ null, %853 ], [ null, %873 ], [ null, %886 ], [ null, %915 ], [ null, %919 ]
  %tnfa.0.i = phi %struct.tnfa* [ null, %tre_parse.exit.i ], [ null, %949 ], [ %961, %959 ], [ %961, %974 ], [ %961, %982 ], [ %961, %993 ], [ %961, %998 ], [ %961, %tre_expand_ast.exit.i ], [ %961, %1256 ], [ %961, %1603 ], [ %961, %1610 ], [ %961, %._crit_edge30.i ], [ %961, %1635 ], [ %961, %1651 ], [ %961, %1251 ], [ %961, %1543 ], [ %961, %1584 ], [ %961, %1266 ], [ %961, %1273 ], [ %961, %1679 ], [ %961, %1300 ], [ %961, %1310 ], [ %961, %1324 ], [ %961, %1329 ], [ %961, %1334 ], [ %961, %1347 ], [ %961, %1363 ], [ %961, %1366 ], [ %961, %1369 ], [ %961, %1379 ], [ %961, %1382 ], [ %961, %1389 ], [ %961, %1392 ], [ %961, %1395 ], [ %961, %1398 ], [ %961, %1408 ], [ %961, %1411 ], [ %961, %1418 ], [ %961, %1421 ], [ %961, %1424 ], [ %961, %1427 ], [ %961, %1436 ], [ %961, %._crit_edge.i14.i ], [ %961, %1467 ], [ %961, %1528 ], [ %961, %1531 ], [ %961, %1544 ], [ %961, %1569 ], [ %961, %1572 ], [ %961, %1585 ], [ null, %147 ], [ null, %180 ], [ null, %199 ], [ null, %263 ], [ null, %272 ], [ null, %274 ], [ null, %279 ], [ null, %282 ], [ null, %283 ], [ null, %286 ], [ null, %294 ], [ null, %305 ], [ null, %369 ], [ null, %387 ], [ null, %tre_parse_bracket.exit.i.i ], [ null, %650 ], [ null, %655 ], [ null, %659 ], [ null, %693 ], [ null, %705 ], [ null, %706 ], [ null, %718 ], [ null, %733 ], [ null, %764 ], [ null, %793 ], [ null, %.thread141.i.i ], [ null, %842 ], [ null, %853 ], [ null, %873 ], [ null, %886 ], [ null, %915 ], [ null, %919 ]
  %errcode.0.i = phi i32 [ %.mux.i.i, %tre_parse.exit.i ], [ 6, %949 ], [ 12, %959 ], [ %975, %974 ], [ 12, %982 ], [ 12, %993 ], [ %1002, %998 ], [ %.0.i10.i, %tre_expand_ast.exit.i ], [ 12, %1256 ], [ 12, %1603 ], [ 12, %1610 ], [ 12, %._crit_edge30.i ], [ %1639, %1635 ], [ 12, %1651 ], [ 12, %1251 ], [ %1541, %1543 ], [ %1582, %1584 ], [ %1271, %1266 ], [ %1274, %1273 ], [ 12, %1679 ], [ 12, %1300 ], [ 12, %1310 ], [ 12, %1324 ], [ 12, %1329 ], [ 12, %1334 ], [ 12, %1347 ], [ %1364, %1363 ], [ %1367, %1366 ], [ %1377, %1369 ], [ %1380, %1379 ], [ %1387, %1382 ], [ %1390, %1389 ], [ %1393, %1392 ], [ %1396, %1395 ], [ %1406, %1398 ], [ %1409, %1408 ], [ %1416, %1411 ], [ %1419, %1418 ], [ %1422, %1421 ], [ %1425, %1424 ], [ %1434, %1427 ], [ %1437, %1436 ], [ 12, %._crit_edge.i14.i ], [ 12, %1467 ], [ %1529, %1528 ], [ 12, %1531 ], [ 12, %1544 ], [ %1570, %1569 ], [ 12, %1572 ], [ 12, %1585 ], [ 12, %147 ], [ 12, %180 ], [ 12, %199 ], [ 10, %263 ], [ 9, %272 ], [ 10, %274 ], [ 10, %279 ], [ 10, %282 ], [ 10, %283 ], [ 10, %286 ], [ 12, %294 ], [ 12, %305 ], [ 12, %369 ], [ 12, %387 ], [ %status.5.i.i.i, %tre_parse_bracket.exit.i.i ], [ 5, %650 ], [ 5, %655 ], [ 12, %659 ], [ 12, %693 ], [ 12, %705 ], [ 12, %706 ], [ 12, %718 ], [ 12, %733 ], [ 12, %764 ], [ 12, %793 ], [ 12, %.thread141.i.i ], [ 12, %842 ], [ 12, %853 ], [ 12, %873 ], [ 12, %886 ], [ 12, %915 ], [ 12, %919 ]
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %32) nounwind optsize
  %1717 = load i8*** %22, align 8, !tbaa !7
  %1718 = bitcast i8** %1717 to i8*
  call void @free(i8* %1718) nounwind optsize
  call void @free(i8* %15) nounwind optsize
  %1719 = icmp eq i32* %counts.0.i, null
  br i1 %1719, label %1722, label %1720

; <label>:1720                                    ; preds = %.loopexit
  %1721 = bitcast i32* %counts.0.i to i8*
  call void @free(i8* %1721) nounwind optsize
  br label %1722

; <label>:1722                                    ; preds = %1720, %.loopexit
  %1723 = icmp eq i32* %offs.0.i, null
  br i1 %1723, label %1726, label %1724

; <label>:1724                                    ; preds = %1722
  %1725 = bitcast i32* %offs.0.i to i8*
  call void @free(i8* %1725) nounwind optsize
  br label %1726

; <label>:1726                                    ; preds = %1724, %1722
  %1727 = bitcast %struct.tnfa* %tnfa.0.i to i8*
  %1728 = getelementptr inbounds %struct.regex_t* %preg, i64 0, i32 1
  store i8* %1727, i8** %1728, align 8, !tbaa !7
  call fastcc void @tre_free(%struct.regex_t* %preg) nounwind optsize
  br label %tre_compile.exit

tre_compile.exit:                                 ; preds = %1726, %1695, %34, %tre_stack_new.exit.thread.i, %13
  %.0.i = phi i32 [ %errcode.0.i, %1726 ], [ 0, %1695 ], [ 12, %34 ], [ 12, %tre_stack_new.exit.thread.i ], [ 12, %13 ]
  call void @llvm.lifetime.end(i64 -1, i8* %14) nounwind
  call void @free(i8* %6) optsize
  br label %1729

; <label>:1729                                    ; preds = %tre_compile.exit, %12, %4, %0
  %.0 = phi i32 [ 2, %12 ], [ %.0.i, %tre_compile.exit ], [ 12, %0 ], [ 12, %4 ]
  ret i32 %.0
}

define void @regfree(%struct.regex_t* nocapture %preg) nounwind uwtable optsize {
  tail call fastcc void @tre_free(%struct.regex_t* %preg) optsize
  ret void
}

define internal fastcc void @tre_free(%struct.regex_t* nocapture %preg) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.regex_t* %preg, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %85, label %.preheader6

.preheader6:                                      ; preds = %0
  %4 = getelementptr inbounds i8* %2, i64 8
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  %.pre17 = bitcast i8* %2 to %struct.tnfa_transition**
  br i1 %7, label %._crit_edge9, label %._crit_edge14

._crit_edge14:                                    ; preds = %._crit_edge13, %.preheader6
  %i.07 = phi i32 [ %26, %._crit_edge13 ], [ 0, %.preheader6 ]
  %8 = zext i32 %i.07 to i64
  %9 = load %struct.tnfa_transition** %.pre17, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.tnfa_transition* %9, i64 %8, i32 2
  %11 = load %struct.tnfa_transition** %10, align 8, !tbaa !7
  %12 = icmp eq %struct.tnfa_transition* %11, null
  br i1 %12, label %._crit_edge13, label %13

; <label>:13                                      ; preds = %._crit_edge14
  %14 = getelementptr inbounds %struct.tnfa_transition* %9, i64 %8, i32 4
  %15 = load i32** %14, align 8, !tbaa !7
  %16 = icmp eq i32* %15, null
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %13
  %18 = bitcast i32* %15 to i8*
  tail call void @free(i8* %18) optsize
  %.pre12 = load %struct.tnfa_transition** %.pre17, align 8, !tbaa !7
  br label %19

; <label>:19                                      ; preds = %17, %13
  %20 = phi %struct.tnfa_transition* [ %9, %13 ], [ %.pre12, %17 ]
  %21 = getelementptr inbounds %struct.tnfa_transition* %20, i64 %8, i32 7
  %22 = load i32** %21, align 8, !tbaa !7
  %23 = icmp eq i32* %22, null
  br i1 %23, label %._crit_edge13, label %24

; <label>:24                                      ; preds = %19
  %25 = bitcast i32* %22 to i8*
  tail call void @free(i8* %25) optsize
  br label %._crit_edge13

._crit_edge13:                                    ; preds = %24, %19, %._crit_edge14
  %26 = add i32 %i.07, 1
  %27 = load i32* %5, align 4, !tbaa !6
  %28 = icmp ult i32 %26, %27
  br i1 %28, label %._crit_edge14, label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge13, %.preheader6
  %29 = load %struct.tnfa_transition** %.pre17, align 8, !tbaa !7
  %30 = icmp eq %struct.tnfa_transition* %29, null
  br i1 %30, label %33, label %31

; <label>:31                                      ; preds = %._crit_edge9
  %32 = bitcast %struct.tnfa_transition* %29 to i8*
  tail call void @free(i8* %32) optsize
  br label %33

; <label>:33                                      ; preds = %31, %._crit_edge9
  %34 = getelementptr inbounds i8* %2, i64 16
  %35 = bitcast i8* %34 to %struct.tnfa_transition**
  %36 = load %struct.tnfa_transition** %35, align 8, !tbaa !7
  %37 = icmp eq %struct.tnfa_transition* %36, null
  br i1 %37, label %54, label %.preheader

.preheader:                                       ; preds = %33
  %38 = getelementptr inbounds %struct.tnfa_transition* %36, i64 0, i32 2
  %39 = load %struct.tnfa_transition** %38, align 8, !tbaa !7
  %40 = icmp eq %struct.tnfa_transition* %39, null
  br i1 %40, label %51, label %.lr.ph

.lr.ph:                                           ; preds = %46, %.preheader
  %trans.01 = phi %struct.tnfa_transition* [ %47, %46 ], [ %36, %.preheader ]
  %41 = getelementptr inbounds %struct.tnfa_transition* %trans.01, i64 0, i32 4
  %42 = load i32** %41, align 8, !tbaa !7
  %43 = icmp eq i32* %42, null
  br i1 %43, label %46, label %44

; <label>:44                                      ; preds = %.lr.ph
  %45 = bitcast i32* %42 to i8*
  tail call void @free(i8* %45) optsize
  br label %46

; <label>:46                                      ; preds = %44, %.lr.ph
  %47 = getelementptr inbounds %struct.tnfa_transition* %trans.01, i64 1
  %48 = getelementptr inbounds %struct.tnfa_transition* %trans.01, i64 1, i32 2
  %49 = load %struct.tnfa_transition** %48, align 8, !tbaa !7
  %50 = icmp eq %struct.tnfa_transition* %49, null
  br i1 %50, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %46
  %.pre11 = load %struct.tnfa_transition** %35, align 8, !tbaa !7
  br label %51

; <label>:51                                      ; preds = %._crit_edge, %.preheader
  %52 = phi %struct.tnfa_transition* [ %.pre11, %._crit_edge ], [ %36, %.preheader ]
  %53 = bitcast %struct.tnfa_transition* %52 to i8*
  tail call void @free(i8* %53) optsize
  br label %54

; <label>:54                                      ; preds = %51, %33
  %55 = getelementptr inbounds i8* %2, i64 32
  %56 = bitcast i8* %55 to %struct.tre_submatch_data**
  %57 = load %struct.tre_submatch_data** %56, align 8, !tbaa !7
  %58 = icmp eq %struct.tre_submatch_data* %57, null
  br i1 %58, label %77, label %.preheader2

.preheader2:                                      ; preds = %54
  %59 = getelementptr inbounds i8* %2, i64 40
  %60 = bitcast i8* %59 to i32*
  %61 = load i32* %60, align 4, !tbaa !6
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %._crit_edge5, label %.lr.ph4

.lr.ph4:                                          ; preds = %71, %.preheader2
  %63 = phi %struct.tre_submatch_data* [ %57, %.preheader2 ], [ %.pre16, %71 ]
  %64 = phi i32 [ %61, %.preheader2 ], [ %72, %71 ]
  %i.13 = phi i32 [ 0, %.preheader2 ], [ %73, %71 ]
  %65 = zext i32 %i.13 to i64
  %66 = getelementptr inbounds %struct.tre_submatch_data* %63, i64 %65, i32 2
  %67 = load i32** %66, align 8, !tbaa !7
  %68 = icmp eq i32* %67, null
  br i1 %68, label %71, label %69

; <label>:69                                      ; preds = %.lr.ph4
  %70 = bitcast i32* %67 to i8*
  tail call void @free(i8* %70) optsize
  %.pre10 = load i32* %60, align 4, !tbaa !6
  br label %71

; <label>:71                                      ; preds = %69, %.lr.ph4
  %72 = phi i32 [ %64, %.lr.ph4 ], [ %.pre10, %69 ]
  %73 = add i32 %i.13, 1
  %74 = icmp ult i32 %73, %72
  %.pre16 = load %struct.tre_submatch_data** %56, align 8, !tbaa !7
  br i1 %74, label %.lr.ph4, label %._crit_edge5

._crit_edge5:                                     ; preds = %71, %.preheader2
  %75 = phi %struct.tre_submatch_data* [ %57, %.preheader2 ], [ %.pre16, %71 ]
  %76 = bitcast %struct.tre_submatch_data* %75 to i8*
  tail call void @free(i8* %76) optsize
  br label %77

; <label>:77                                      ; preds = %._crit_edge5, %54
  %78 = getelementptr inbounds i8* %2, i64 48
  %79 = bitcast i8* %78 to i32**
  %80 = load i32** %79, align 8, !tbaa !7
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

; <label>:82                                      ; preds = %77
  %83 = bitcast i32* %80 to i8*
  tail call void @free(i8* %83) optsize
  br label %84

; <label>:84                                      ; preds = %82, %77
  tail call void @free(i8* %2) optsize
  br label %85

; <label>:85                                      ; preds = %84, %0
  ret void
}

define internal fastcc i32 @tre_add_tags(%struct.tre_mem_struct* %mem, %struct.tre_stack_rec* %stack, %struct.tre_ast_node_t* %tree, %struct.tnfa* %tnfa) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tre_stack_rec* %stack, i64 0, i32 3
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq %struct.tre_mem_struct* %mem, null
  %4 = icmp eq %struct.tnfa* %tnfa, null
  %5 = or i1 %3, %4
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 8
  store i32 0, i32* %7, align 4, !tbaa !6
  br label %8

; <label>:8                                       ; preds = %6, %0
  %9 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 5
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = shl i32 %10, 1
  %12 = add i32 %11, 2
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %15 = tail call i8* @malloc(i64 %14) optsize
  %16 = bitcast i8* %15 to i32*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %562, label %18

; <label>:18                                      ; preds = %8
  store i32 -1, i32* %16, align 4, !tbaa !6
  %19 = load i32* %9, align 4, !tbaa !6
  %20 = add i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = shl nuw nsw i64 %21, 2
  %23 = tail call i8* @malloc(i64 %22) optsize
  %24 = bitcast i8* %23 to i32*
  %25 = icmp eq i8* %23, null
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %18
  tail call void @free(i8* %15) optsize
  br label %562

; <label>:27                                      ; preds = %18
  store i32 -1, i32* %24, align 4, !tbaa !6
  %28 = load i32* %9, align 4, !tbaa !6
  %29 = add i32 %28, 1
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = tail call i8* @malloc(i64 %31) optsize
  %33 = bitcast i8* %32 to %struct.tre_tag_states_t*
  %34 = icmp eq i8* %32, null
  br i1 %34, label %35, label %.preheader98

; <label>:35                                      ; preds = %27
  tail call void @free(i8* %15) optsize
  tail call void @free(i8* %23) optsize
  br label %562

.preheader98:                                     ; preds = %.preheader98, %27
  %i.099 = phi i32 [ %38, %.preheader98 ], [ 0, %27 ]
  %36 = zext i32 %i.099 to i64
  %37 = getelementptr inbounds %struct.tre_tag_states_t* %33, i64 %36, i32 0
  store i32 -1, i32* %37, align 4, !tbaa !6
  %38 = add i32 %i.099, 1
  %39 = load i32* %9, align 4, !tbaa !6
  %40 = icmp ugt i32 %38, %39
  br i1 %40, label %41, label %.preheader98

; <label>:41                                      ; preds = %.preheader98
  %42 = bitcast %struct.tre_ast_node_t* %tree to i8*
  %43 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %42) optsize
  %44 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %45 = load i32* %1, align 4, !tbaa !6
  %46 = icmp sgt i32 %45, %2
  %47 = icmp eq i32 %44, 0
  %or.cond75 = and i1 %46, %47
  br i1 %or.cond75, label %.lr.ph93, label %._crit_edge94

.lr.ph93:                                         ; preds = %41
  %48 = getelementptr inbounds %struct.tre_stack_rec* %stack, i64 0, i32 4
  %49 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 6
  %50 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 4
  br label %.backedge._crit_edge

.backedge._crit_edge:                             ; preds = %.backedge, %.lr.ph93
  %51 = phi i32 [ %45, %.lr.ph93 ], [ %59, %.backedge ]
  %status.091 = phi i32 [ 0, %.lr.ph93 ], [ %status.0.be, %.backedge ]
  %regset.088 = phi i32* [ %16, %.lr.ph93 ], [ %regset.0.be, %.backedge ]
  %num_tags.085 = phi i32 [ 0, %.lr.ph93 ], [ %num_tags.0.be, %.backedge ]
  %tag.082 = phi i32 [ 0, %.lr.ph93 ], [ %tag.0.be, %.backedge ]
  %next_tag.079 = phi i32 [ 1, %.lr.ph93 ], [ %next_tag.0.be, %.backedge ]
  %direction.076 = phi i32 [ 0, %.lr.ph93 ], [ %direction.0.be, %.backedge ]
  %52 = add nsw i32 %51, -1
  store i32 %52, i32* %1, align 4, !tbaa !6
  %53 = sext i32 %52 to i64
  %54 = load i8*** %48, align 8, !tbaa !7
  %55 = getelementptr inbounds i8** %54, i64 %53
  %56 = load i8** %55, align 8, !tbaa !7
  %57 = ptrtoint i8* %56 to i64
  %58 = trunc i64 %57 to i32
  switch i32 %58, label %.backedge [
    i32 6, label %64
    i32 0, label %89
    i32 1, label %403
    i32 4, label %427
    i32 5, label %442
    i32 2, label %.preheader68
    i32 3, label %466
  ]

.backedge:                                        ; preds = %540, %510, %.lr.ph71, %447, %442, %441, %427, %425, %408, %401, %._crit_edge133, %._crit_edge29, %.preheader68, %.backedge._crit_edge
  %direction.0.be = phi i32 [ %direction.076, %.backedge._crit_edge ], [ %direction.076, %447 ], [ %direction.076, %442 ], [ %direction.076, %441 ], [ %direction.076, %427 ], [ %direction.1, %401 ], [ %direction.076, %._crit_edge29 ], [ 1, %425 ], [ 1, %408 ], [ 1, %540 ], [ 1, %510 ], [ %direction.076, %.lr.ph71 ], [ %direction.076, %.preheader68 ], [ %direction.1, %._crit_edge133 ]
  %next_tag.0.be = phi i32 [ %next_tag.079, %.backedge._crit_edge ], [ %next_tag.079, %447 ], [ %next_tag.079, %442 ], [ %439, %441 ], [ %439, %427 ], [ %next_tag.4, %401 ], [ %next_tag.079, %._crit_edge29 ], [ %next_tag.079, %425 ], [ %next_tag.079, %408 ], [ %next_tag.079, %540 ], [ %next_tag.079, %510 ], [ %next_tag.079, %.lr.ph71 ], [ %next_tag.079, %.preheader68 ], [ %next_tag.4, %._crit_edge133 ]
  %tag.0.be = phi i32 [ %tag.082, %.backedge._crit_edge ], [ %tag.082, %447 ], [ %tag.082, %442 ], [ %433, %441 ], [ %tag.082, %427 ], [ %tag.3, %401 ], [ %tag.082, %._crit_edge29 ], [ %tag.082, %425 ], [ %tag.082, %408 ], [ %tag.082, %540 ], [ %tag.082, %510 ], [ %tag.082, %.lr.ph71 ], [ %tag.082, %.preheader68 ], [ %tag.3, %._crit_edge133 ]
  %num_tags.0.be = phi i32 [ %num_tags.085, %.backedge._crit_edge ], [ %num_tags.085, %447 ], [ %num_tags.085, %442 ], [ %num_tags.085, %441 ], [ %num_tags.085, %427 ], [ %num_tags.3, %401 ], [ %num_tags.085, %._crit_edge29 ], [ %num_tags.085, %425 ], [ %num_tags.085, %408 ], [ %541, %540 ], [ %num_tags.085, %510 ], [ %num_tags.085, %.lr.ph71 ], [ %num_tags.085, %.preheader68 ], [ %num_tags.3, %._crit_edge133 ]
  %regset.0.be = phi i32* [ %regset.088, %.backedge._crit_edge ], [ %regset.088, %447 ], [ %regset.088, %442 ], [ %regset.088, %441 ], [ %regset.088, %427 ], [ %regset.088, %401 ], [ %regset.088, %._crit_edge29 ], [ %regset.088, %425 ], [ %regset.088, %408 ], [ %516, %540 ], [ %516, %510 ], [ %463, %.lr.ph71 ], [ %regset.088, %.preheader68 ], [ %regset.088, %._crit_edge133 ]
  %status.0.be = phi i32 [ %status.091, %.backedge._crit_edge ], [ %status.091, %447 ], [ %status.091, %442 ], [ %status.091, %441 ], [ %status.091, %427 ], [ %status.7, %401 ], [ %status.091, %._crit_edge29 ], [ %status.091, %425 ], [ %status.091, %408 ], [ %status.8, %540 ], [ %status.091, %510 ], [ %status.091, %.lr.ph71 ], [ %status.091, %.preheader68 ], [ %status.7, %._crit_edge133 ]
  %59 = load i32* %1, align 4, !tbaa !6
  %60 = icmp sgt i32 %59, %2
  %61 = icmp eq i32 %status.0.be, 0
  %or.cond = and i1 %60, %61
  br i1 %or.cond, label %.backedge._crit_edge, label %._crit_edge94

.preheader68:                                     ; preds = %.backedge._crit_edge
  %62 = load i32* %regset.088, align 4, !tbaa !6
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %.lr.ph71, label %.backedge

; <label>:64                                      ; preds = %.backedge._crit_edge
  %65 = add nsw i32 %51, -2
  store i32 %65, i32* %1, align 4, !tbaa !6
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8** %54, i64 %66
  %68 = load i8** %67, align 8, !tbaa !7
  %69 = ptrtoint i8* %68 to i64
  %70 = trunc i64 %69 to i32
  %71 = load i32* %regset.088, align 4, !tbaa !6
  %72 = icmp sgt i32 %71, -1
  br i1 %72, label %.lr.ph24, label %77

.lr.ph24:                                         ; preds = %.lr.ph24, %64
  %indvars.iv107 = phi i64 [ %indvars.iv.next108, %.lr.ph24 ], [ 0, %64 ]
  %i1.023 = phi i32 [ %73, %.lr.ph24 ], [ 0, %64 ]
  %indvars.iv.next108 = add i64 %indvars.iv107, 1
  %73 = add nsw i32 %i1.023, 1
  %74 = getelementptr inbounds i32* %regset.088, i64 %indvars.iv.next108
  %75 = load i32* %74, align 4, !tbaa !6
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %.lr.ph24, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph24
  %phitmp103 = add i32 %i1.023, 2
  %phitmp104 = sext i32 %phitmp103 to i64
  br label %77

; <label>:77                                      ; preds = %._crit_edge, %64
  %.lcssa = phi i32* [ %74, %._crit_edge ], [ %regset.088, %64 ]
  %i1.0.lcssa = phi i64 [ %phitmp104, %._crit_edge ], [ 1, %64 ]
  %78 = shl nsw i32 %70, 1
  %79 = or i32 %78, 1
  store i32 %79, i32* %.lcssa, align 4, !tbaa !6
  %80 = getelementptr inbounds i32* %regset.088, i64 %i1.0.lcssa
  store i32 -1, i32* %80, align 4, !tbaa !6
  %81 = load i32* %24, align 4, !tbaa !6
  %82 = icmp sgt i32 %81, -1
  br i1 %82, label %.lr.ph28, label %._crit_edge29

.lr.ph28:                                         ; preds = %.lr.ph28, %77
  %indvars.iv109 = phi i64 [ %indvars.iv.next110, %.lr.ph28 ], [ 0, %77 ]
  %i1.126 = phi i32 [ %83, %.lr.ph28 ], [ 0, %77 ]
  %indvars.iv.next110 = add i64 %indvars.iv109, 1
  %83 = add nsw i32 %i1.126, 1
  %84 = getelementptr inbounds i32* %24, i64 %indvars.iv.next110
  %85 = load i32* %84, align 4, !tbaa !6
  %86 = icmp sgt i32 %85, -1
  br i1 %86, label %.lr.ph28, label %._crit_edge29

._crit_edge29:                                    ; preds = %.lr.ph28, %77
  %i1.1.lcssa = phi i32 [ -1, %77 ], [ %i1.126, %.lr.ph28 ]
  %87 = sext i32 %i1.1.lcssa to i64
  %88 = getelementptr inbounds i32* %24, i64 %87
  store i32 -1, i32* %88, align 4, !tbaa !6
  br label %.backedge

; <label>:89                                      ; preds = %.backedge._crit_edge
  %90 = add nsw i32 %51, -2
  store i32 %90, i32* %1, align 4, !tbaa !6
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8** %54, i64 %91
  %93 = load i8** %92, align 8, !tbaa !7
  %94 = bitcast i8* %93 to %struct.tre_ast_node_t*
  %95 = getelementptr inbounds i8* %93, i64 20
  %96 = bitcast i8* %95 to i32*
  %97 = load i32* %96, align 4, !tbaa !6
  %98 = icmp sgt i32 %97, -1
  br i1 %98, label %.preheader61, label %146

.preheader61:                                     ; preds = %89
  %99 = load i32* %regset.088, align 4, !tbaa !6
  %100 = icmp sgt i32 %99, -1
  br i1 %100, label %.lr.ph64, label %105

.lr.ph64:                                         ; preds = %.lr.ph64, %.preheader61
  %indvars.iv127 = phi i64 [ %indvars.iv.next128, %.lr.ph64 ], [ 0, %.preheader61 ]
  %i3.063 = phi i32 [ %101, %.lr.ph64 ], [ 0, %.preheader61 ]
  %indvars.iv.next128 = add i64 %indvars.iv127, 1
  %101 = add nsw i32 %i3.063, 1
  %102 = getelementptr inbounds i32* %regset.088, i64 %indvars.iv.next128
  %103 = load i32* %102, align 4, !tbaa !6
  %104 = icmp sgt i32 %103, -1
  br i1 %104, label %.lr.ph64, label %._crit_edge65

._crit_edge65:                                    ; preds = %.lr.ph64
  %phitmp101 = add i32 %i3.063, 2
  %phitmp102 = sext i32 %phitmp101 to i64
  br label %105

; <label>:105                                     ; preds = %._crit_edge65, %.preheader61
  %.lcssa62 = phi i32* [ %102, %._crit_edge65 ], [ %regset.088, %.preheader61 ]
  %i3.0.lcssa = phi i64 [ %phitmp102, %._crit_edge65 ], [ 1, %.preheader61 ]
  %106 = shl nsw i32 %97, 1
  store i32 %106, i32* %.lcssa62, align 4, !tbaa !6
  %107 = getelementptr inbounds i32* %regset.088, i64 %i3.0.lcssa
  store i32 -1, i32* %107, align 4, !tbaa !6
  br i1 %5, label %137, label %.preheader50

.preheader50:                                     ; preds = %105
  %108 = load i32* %24, align 4, !tbaa !6
  %109 = icmp sgt i32 %108, -1
  br i1 %109, label %.lr.ph52, label %.preheader50._crit_edge.thread

.preheader50._crit_edge.thread:                   ; preds = %.preheader50
  %110 = sext i32 %97 to i64
  %111 = load %struct.tre_submatch_data** %50, align 8, !tbaa !7
  %112 = getelementptr inbounds %struct.tre_submatch_data* %111, i64 %110, i32 2
  store i32* null, i32** %112, align 8, !tbaa !7
  br label %137

.lr.ph52:                                         ; preds = %.lr.ph52, %.preheader50
  %indvars.iv121 = phi i64 [ %indvars.iv.next122, %.lr.ph52 ], [ 0, %.preheader50 ]
  %i3.151 = phi i32 [ %113, %.lr.ph52 ], [ 0, %.preheader50 ]
  %indvars.iv.next122 = add i64 %indvars.iv121, 1
  %113 = add nsw i32 %i3.151, 1
  %114 = getelementptr inbounds i32* %24, i64 %indvars.iv.next122
  %115 = load i32* %114, align 4, !tbaa !6
  %116 = icmp sgt i32 %115, -1
  br i1 %116, label %.lr.ph52, label %.preheader50._crit_edge

.preheader50._crit_edge:                          ; preds = %.lr.ph52
  %117 = sext i32 %97 to i64
  %118 = load %struct.tre_submatch_data** %50, align 8, !tbaa !7
  %119 = getelementptr inbounds %struct.tre_submatch_data* %118, i64 %117, i32 2
  store i32* null, i32** %119, align 8, !tbaa !7
  %120 = icmp sgt i32 %113, 0
  br i1 %120, label %121, label %137

; <label>:121                                     ; preds = %.preheader50._crit_edge
  %122 = add nsw i32 %i3.151, 2
  %123 = sext i32 %122 to i64
  %124 = shl nsw i64 %123, 2
  %125 = tail call i8* @malloc(i64 %124) optsize
  %126 = bitcast i8* %125 to i32*
  %127 = icmp eq i8* %125, null
  br i1 %127, label %._crit_edge94, label %128

; <label>:128                                     ; preds = %121
  %129 = load %struct.tre_submatch_data** %50, align 8, !tbaa !7
  %130 = getelementptr inbounds %struct.tre_submatch_data* %129, i64 %117, i32 2
  store i32* %126, i32** %130, align 8, !tbaa !7
  br i1 %109, label %.lr.ph58, label %._crit_edge59

.lr.ph58:                                         ; preds = %.lr.ph58, %128
  %indvars.iv124 = phi i64 [ %indvars.iv.next125, %.lr.ph58 ], [ 0, %128 ]
  %131 = phi i32* [ %136, %.lr.ph58 ], [ %126, %128 ]
  %132 = phi i32 [ %134, %.lr.ph58 ], [ %108, %128 ]
  store i32 %132, i32* %131, align 4, !tbaa !6
  %indvars.iv.next125 = add i64 %indvars.iv124, 1
  %133 = getelementptr inbounds i32* %24, i64 %indvars.iv.next125
  %134 = load i32* %133, align 4, !tbaa !6
  %135 = icmp sgt i32 %134, -1
  %136 = getelementptr inbounds i32* %126, i64 %indvars.iv.next125
  br i1 %135, label %.lr.ph58, label %._crit_edge59

._crit_edge59:                                    ; preds = %.lr.ph58, %128
  %.lcssa55 = phi i32* [ %126, %128 ], [ %136, %.lr.ph58 ]
  store i32 -1, i32* %.lcssa55, align 4, !tbaa !6
  br label %137

; <label>:137                                     ; preds = %._crit_edge59, %.preheader50._crit_edge, %.preheader50._crit_edge.thread, %105
  %138 = load i32* %96, align 4, !tbaa !6
  %139 = sext i32 %138 to i64
  %140 = inttoptr i64 %139 to i8*
  %141 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %140) optsize
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %._crit_edge94

; <label>:143                                     ; preds = %137
  %144 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 6 to i8*)) optsize
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %._crit_edge94

; <label>:146                                     ; preds = %143, %89
  %status.1 = phi i32 [ 0, %143 ], [ %status.091, %89 ]
  %147 = bitcast i8* %93 to i32*
  %148 = load i32* %147, align 4, !tbaa !0
  switch i32 %148, label %._crit_edge133 [
    i32 0, label %149
    i32 1, label %188
    i32 2, label %240
    i32 3, label %298
  ]

; <label>:149                                     ; preds = %146
  %150 = getelementptr inbounds i8* %93, i64 8
  %151 = bitcast i8* %150 to i8**
  %152 = load i8** %151, align 8, !tbaa !7
  %153 = bitcast i8* %152 to i64*
  %154 = load i64* %153, align 8, !tbaa !5
  %155 = icmp sgt i64 %154, -1
  %156 = icmp eq i64 %154, -4
  %or.cond21 = or i1 %155, %156
  br i1 %or.cond21, label %157, label %._crit_edge133

; <label>:157                                     ; preds = %149
  %158 = load i32* %regset.088, align 4, !tbaa !6
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %160, label %._crit_edge133

; <label>:160                                     ; preds = %157
  br i1 %5, label %183, label %161

; <label>:161                                     ; preds = %160
  %162 = tail call fastcc i32 @tre_add_tag(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %94, i32 %tag.082, i32 0) optsize
  %163 = sext i32 %tag.082 to i64
  %164 = load i32** %49, align 8, !tbaa !7
  %165 = getelementptr inbounds i32* %164, i64 %163
  store i32 %direction.076, i32* %165, align 4, !tbaa !0
  %166 = load i32* %regset.088, align 4, !tbaa !6
  %167 = icmp sgt i32 %166, -1
  br i1 %167, label %.lr.ph49, label %.loopexit46

.lr.ph49:                                         ; preds = %161
  %168 = load %struct.tre_submatch_data** %50, align 8, !tbaa !7
  br label %169

; <label>:169                                     ; preds = %179, %.lr.ph49
  %indvars.iv118 = phi i64 [ 0, %.lr.ph49 ], [ %indvars.iv.next119, %179 ]
  %170 = phi i32 [ %166, %.lr.ph49 ], [ %181, %179 ]
  %171 = ashr i32 %170, 1
  %172 = and i32 %170, 1
  %173 = icmp eq i32 %172, 0
  %174 = sext i32 %171 to i64
  br i1 %173, label %175, label %177

; <label>:175                                     ; preds = %169
  %176 = getelementptr inbounds %struct.tre_submatch_data* %168, i64 %174, i32 0
  store i32 %tag.082, i32* %176, align 4, !tbaa !6
  br label %179

; <label>:177                                     ; preds = %169
  %178 = getelementptr inbounds %struct.tre_submatch_data* %168, i64 %174, i32 1
  store i32 %tag.082, i32* %178, align 4, !tbaa !6
  br label %179

; <label>:179                                     ; preds = %177, %175
  %indvars.iv.next119 = add i64 %indvars.iv118, 1
  %180 = getelementptr inbounds i32* %regset.088, i64 %indvars.iv.next119
  %181 = load i32* %180, align 4, !tbaa !6
  %182 = icmp sgt i32 %181, -1
  br i1 %182, label %169, label %.loopexit46

; <label>:183                                     ; preds = %160
  %184 = getelementptr inbounds i8* %93, i64 28
  %185 = bitcast i8* %184 to i32*
  store i32 1, i32* %185, align 4, !tbaa !6
  br label %.loopexit46

.loopexit46:                                      ; preds = %183, %179, %161
  %status.2 = phi i32 [ %status.1, %183 ], [ %162, %179 ], [ %162, %161 ]
  store i32 -1, i32* %regset.088, align 4, !tbaa !6
  %186 = add nsw i32 %num_tags.085, 1
  %187 = add nsw i32 %next_tag.079, 1
  br label %._crit_edge133

; <label>:188                                     ; preds = %146
  %189 = getelementptr inbounds i8* %93, i64 8
  %190 = bitcast i8* %189 to i8**
  %191 = load i8** %190, align 8, !tbaa !7
  %192 = bitcast i8* %191 to %struct.tre_ast_node_t**
  %193 = load %struct.tre_ast_node_t** %192, align 8, !tbaa !7
  %194 = getelementptr inbounds i8* %191, i64 8
  %195 = bitcast i8* %194 to %struct.tre_ast_node_t**
  %196 = load %struct.tre_ast_node_t** %195, align 8, !tbaa !7
  %197 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %93) optsize
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %._crit_edge133

; <label>:199                                     ; preds = %188
  %200 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 5 to i8*)) optsize
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %._crit_edge133

; <label>:202                                     ; preds = %199
  %203 = bitcast %struct.tre_ast_node_t* %196 to i8*
  %204 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %203) optsize
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %._crit_edge133

; <label>:206                                     ; preds = %202
  %207 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %._crit_edge133

; <label>:209                                     ; preds = %206
  %210 = getelementptr inbounds %struct.tre_ast_node_t* %193, i64 0, i32 5
  %211 = load i32* %210, align 4, !tbaa !6
  %212 = add nsw i32 %211, %next_tag.079
  %213 = sext i32 %212 to i64
  %214 = inttoptr i64 %213 to i8*
  %215 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %214) optsize
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %._crit_edge133

; <label>:217                                     ; preds = %209
  %218 = load i32* %210, align 4, !tbaa !6
  %219 = icmp sgt i32 %218, 0
  br i1 %219, label %220, label %226

; <label>:220                                     ; preds = %217
  %221 = getelementptr inbounds %struct.tre_ast_node_t* %196, i64 0, i32 5
  %222 = load i32* %221, align 4, !tbaa !6
  %223 = icmp sgt i32 %222, 0
  %224 = zext i1 %223 to i32
  %.next_tag.0 = add nsw i32 %224, %next_tag.079
  br i1 %223, label %225, label %226

; <label>:225                                     ; preds = %220
  br label %226

; <label>:226                                     ; preds = %225, %220, %217
  %next_tag.1 = phi i32 [ %.next_tag.0, %225 ], [ %.next_tag.0, %220 ], [ %next_tag.079, %217 ]
  %reserved_tag.0 = phi i32 [ %next_tag.079, %225 ], [ -1, %220 ], [ -1, %217 ]
  %227 = sext i32 %reserved_tag.0 to i64
  %228 = inttoptr i64 %227 to i8*
  %229 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %228) optsize
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %._crit_edge133

; <label>:231                                     ; preds = %226
  %232 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 4 to i8*)) optsize
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %._crit_edge133

; <label>:234                                     ; preds = %231
  %235 = bitcast %struct.tre_ast_node_t* %193 to i8*
  %236 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %235) optsize
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %._crit_edge133

; <label>:238                                     ; preds = %234
  %239 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  br label %._crit_edge133

; <label>:240                                     ; preds = %146
  %241 = getelementptr inbounds i8* %93, i64 8
  %242 = bitcast i8* %241 to i8**
  %243 = load i8** %242, align 8, !tbaa !7
  br i1 %5, label %244, label %250

; <label>:244                                     ; preds = %240
  %245 = load i32* %regset.088, align 4, !tbaa !6
  %.lobit20 = lshr i32 %245, 31
  %.lobit20.not = xor i32 %.lobit20, 1
  %246 = zext i32 %.lobit20.not to i64
  %247 = inttoptr i64 %246 to i8*
  %248 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %247) optsize
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %255, label %._crit_edge133

; <label>:250                                     ; preds = %240
  %251 = sext i32 %tag.082 to i64
  %252 = inttoptr i64 %251 to i8*
  %253 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %252) optsize
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %._crit_edge133

; <label>:255                                     ; preds = %250, %244
  %256 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %93) optsize
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %._crit_edge133

; <label>:258                                     ; preds = %255
  %259 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 1 to i8*)) optsize
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %._crit_edge133

; <label>:261                                     ; preds = %258
  %262 = bitcast i8* %243 to %struct.tre_ast_node_t**
  %263 = load %struct.tre_ast_node_t** %262, align 8, !tbaa !7
  %264 = bitcast %struct.tre_ast_node_t* %263 to i8*
  %265 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %264) optsize
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %._crit_edge133

; <label>:267                                     ; preds = %261
  %268 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %._crit_edge133

; <label>:270                                     ; preds = %267
  %271 = load i32* %regset.088, align 4, !tbaa !6
  %272 = icmp sgt i32 %271, -1
  br i1 %272, label %273, label %._crit_edge133

; <label>:273                                     ; preds = %270
  br i1 %5, label %.loopexit38, label %274

; <label>:274                                     ; preds = %273
  %275 = tail call fastcc i32 @tre_add_tag(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %94, i32 %tag.082, i32 0) optsize
  %276 = sext i32 %tag.082 to i64
  %277 = load i32** %49, align 8, !tbaa !7
  %278 = getelementptr inbounds i32* %277, i64 %276
  store i32 %direction.076, i32* %278, align 4, !tbaa !0
  %279 = load i32* %regset.088, align 4, !tbaa !6
  %280 = icmp sgt i32 %279, -1
  br i1 %280, label %.lr.ph41, label %.loopexit38

.lr.ph41:                                         ; preds = %274
  %281 = load %struct.tre_submatch_data** %50, align 8, !tbaa !7
  br label %282

; <label>:282                                     ; preds = %292, %.lr.ph41
  %indvars.iv114 = phi i64 [ 0, %.lr.ph41 ], [ %indvars.iv.next115, %292 ]
  %283 = phi i32 [ %279, %.lr.ph41 ], [ %294, %292 ]
  %284 = ashr i32 %283, 1
  %285 = and i32 %283, 1
  %286 = icmp eq i32 %285, 0
  %287 = sext i32 %284 to i64
  br i1 %286, label %288, label %290

; <label>:288                                     ; preds = %282
  %289 = getelementptr inbounds %struct.tre_submatch_data* %281, i64 %287, i32 0
  store i32 %tag.082, i32* %289, align 4, !tbaa !6
  br label %292

; <label>:290                                     ; preds = %282
  %291 = getelementptr inbounds %struct.tre_submatch_data* %281, i64 %287, i32 1
  store i32 %tag.082, i32* %291, align 4, !tbaa !6
  br label %292

; <label>:292                                     ; preds = %290, %288
  %indvars.iv.next115 = add i64 %indvars.iv114, 1
  %293 = getelementptr inbounds i32* %regset.088, i64 %indvars.iv.next115
  %294 = load i32* %293, align 4, !tbaa !6
  %295 = icmp sgt i32 %294, -1
  br i1 %295, label %282, label %.loopexit38

.loopexit38:                                      ; preds = %292, %274, %273
  %status.3 = phi i32 [ 0, %273 ], [ %275, %292 ], [ %275, %274 ]
  store i32 -1, i32* %regset.088, align 4, !tbaa !6
  %296 = add nsw i32 %num_tags.085, 1
  %297 = add nsw i32 %next_tag.079, 1
  br label %._crit_edge133

; <label>:298                                     ; preds = %146
  %299 = getelementptr inbounds i8* %93, i64 8
  %300 = bitcast i8* %299 to i8**
  %301 = load i8** %300, align 8, !tbaa !7
  %302 = bitcast i8* %301 to %struct.tre_ast_node_t**
  %303 = load %struct.tre_ast_node_t** %302, align 8, !tbaa !7
  %304 = getelementptr inbounds i8* %301, i64 8
  %305 = bitcast i8* %304 to %struct.tre_ast_node_t**
  %306 = load %struct.tre_ast_node_t** %305, align 8, !tbaa !7
  %307 = load i32* %regset.088, align 4, !tbaa !6
  %308 = icmp sgt i32 %307, -1
  %309 = add nsw i32 %next_tag.079, 1
  %right_tag.0 = select i1 %308, i32 %309, i32 %next_tag.079
  %310 = sext i32 %right_tag.0 to i64
  %311 = inttoptr i64 %310 to i8*
  %312 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %311) optsize
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %._crit_edge133

; <label>:314                                     ; preds = %298
  %left_tag.0 = select i1 %308, i32 %next_tag.079, i32 %tag.082
  %315 = sext i32 %left_tag.0 to i64
  %316 = inttoptr i64 %315 to i8*
  %317 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %316) optsize
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %319, label %._crit_edge133

; <label>:319                                     ; preds = %314
  %320 = bitcast i32* %regset.088 to i8*
  %321 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %320) optsize
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %._crit_edge133

; <label>:323                                     ; preds = %319
  %324 = load i32* %regset.088, align 4, !tbaa !6
  %.lobit = lshr i32 %324, 31
  %.lobit.not = xor i32 %.lobit, 1
  %325 = zext i32 %.lobit.not to i64
  %326 = inttoptr i64 %325 to i8*
  %327 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %326) optsize
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %._crit_edge133

; <label>:329                                     ; preds = %323
  %330 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %93) optsize
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %332, label %._crit_edge133

; <label>:332                                     ; preds = %329
  %333 = bitcast %struct.tre_ast_node_t* %306 to i8*
  %334 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %333) optsize
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %336, label %._crit_edge133

; <label>:336                                     ; preds = %332
  %337 = bitcast %struct.tre_ast_node_t* %303 to i8*
  %338 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %337) optsize
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %._crit_edge133

; <label>:340                                     ; preds = %336
  %341 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 3 to i8*)) optsize
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %343, label %._crit_edge133

; <label>:343                                     ; preds = %340
  %344 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %333) optsize
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %._crit_edge133

; <label>:346                                     ; preds = %343
  %347 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %._crit_edge133

; <label>:349                                     ; preds = %346
  %350 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 2 to i8*)) optsize
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %._crit_edge133

; <label>:352                                     ; preds = %349
  %353 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %337) optsize
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %._crit_edge133

; <label>:355                                     ; preds = %352
  %356 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %._crit_edge133

; <label>:358                                     ; preds = %355
  %359 = load i32* %regset.088, align 4, !tbaa !6
  %360 = icmp sgt i32 %359, -1
  br i1 %360, label %361, label %385

; <label>:361                                     ; preds = %358
  br i1 %5, label %.loopexit42, label %362

; <label>:362                                     ; preds = %361
  %363 = tail call fastcc i32 @tre_add_tag(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %94, i32 %tag.082, i32 0) optsize
  %364 = sext i32 %tag.082 to i64
  %365 = load i32** %49, align 8, !tbaa !7
  %366 = getelementptr inbounds i32* %365, i64 %364
  store i32 %direction.076, i32* %366, align 4, !tbaa !0
  %367 = load i32* %regset.088, align 4, !tbaa !6
  %368 = icmp sgt i32 %367, -1
  br i1 %368, label %.lr.ph45, label %.loopexit42

.lr.ph45:                                         ; preds = %362
  %369 = load %struct.tre_submatch_data** %50, align 8, !tbaa !7
  br label %370

; <label>:370                                     ; preds = %380, %.lr.ph45
  %indvars.iv116 = phi i64 [ 0, %.lr.ph45 ], [ %indvars.iv.next117, %380 ]
  %371 = phi i32 [ %367, %.lr.ph45 ], [ %382, %380 ]
  %372 = ashr i32 %371, 1
  %373 = and i32 %371, 1
  %374 = icmp eq i32 %373, 0
  %375 = sext i32 %372 to i64
  br i1 %374, label %376, label %378

; <label>:376                                     ; preds = %370
  %377 = getelementptr inbounds %struct.tre_submatch_data* %369, i64 %375, i32 0
  store i32 %tag.082, i32* %377, align 4, !tbaa !6
  br label %380

; <label>:378                                     ; preds = %370
  %379 = getelementptr inbounds %struct.tre_submatch_data* %369, i64 %375, i32 1
  store i32 %tag.082, i32* %379, align 4, !tbaa !6
  br label %380

; <label>:380                                     ; preds = %378, %376
  %indvars.iv.next117 = add i64 %indvars.iv116, 1
  %381 = getelementptr inbounds i32* %regset.088, i64 %indvars.iv.next117
  %382 = load i32* %381, align 4, !tbaa !6
  %383 = icmp sgt i32 %382, -1
  br i1 %383, label %370, label %.loopexit42

.loopexit42:                                      ; preds = %380, %362, %361
  %status.5 = phi i32 [ 0, %361 ], [ %363, %380 ], [ %363, %362 ]
  store i32 -1, i32* %regset.088, align 4, !tbaa !6
  %384 = add nsw i32 %num_tags.085, 1
  br label %385

; <label>:385                                     ; preds = %.loopexit42, %358
  %next_tag.3 = phi i32 [ %309, %.loopexit42 ], [ %next_tag.079, %358 ]
  %tag.2 = phi i32 [ %next_tag.079, %.loopexit42 ], [ %tag.082, %358 ]
  %num_tags.2 = phi i32 [ %384, %.loopexit42 ], [ %num_tags.085, %358 ]
  %status.6 = phi i32 [ %status.5, %.loopexit42 ], [ 0, %358 ]
  %386 = getelementptr inbounds i8* %93, i64 24
  %387 = bitcast i8* %386 to i32*
  %388 = load i32* %387, align 4, !tbaa !6
  %389 = icmp sgt i32 %388, 0
  br i1 %389, label %390, label %._crit_edge133

; <label>:390                                     ; preds = %385
  %391 = add nsw i32 %next_tag.3, 1
  %392 = add nsw i32 %next_tag.3, 2
  br label %._crit_edge133

._crit_edge133:                                   ; preds = %390, %385, %355, %352, %349, %346, %343, %340, %336, %332, %329, %323, %319, %314, %298, %.loopexit38, %270, %267, %261, %258, %255, %250, %244, %238, %234, %231, %226, %209, %206, %202, %199, %188, %.loopexit46, %157, %149, %146
  %direction.1 = phi i32 [ %direction.076, %390 ], [ %direction.076, %238 ], [ %direction.076, %.loopexit46 ], [ 0, %.loopexit38 ], [ %direction.076, %146 ], [ %direction.076, %149 ], [ %direction.076, %157 ], [ %direction.076, %188 ], [ %direction.076, %199 ], [ %direction.076, %202 ], [ %direction.076, %206 ], [ %direction.076, %209 ], [ %direction.076, %226 ], [ %direction.076, %231 ], [ %direction.076, %234 ], [ %direction.076, %244 ], [ %direction.076, %250 ], [ %direction.076, %255 ], [ %direction.076, %258 ], [ %direction.076, %261 ], [ %direction.076, %267 ], [ 0, %270 ], [ %direction.076, %298 ], [ %direction.076, %314 ], [ %direction.076, %319 ], [ %direction.076, %323 ], [ %direction.076, %329 ], [ %direction.076, %332 ], [ %direction.076, %336 ], [ %direction.076, %340 ], [ %direction.076, %343 ], [ %direction.076, %346 ], [ %direction.076, %349 ], [ %direction.076, %352 ], [ %direction.076, %355 ], [ %direction.076, %385 ]
  %next_tag.4 = phi i32 [ %392, %390 ], [ %next_tag.1, %238 ], [ %187, %.loopexit46 ], [ %297, %.loopexit38 ], [ %next_tag.079, %146 ], [ %next_tag.079, %149 ], [ %next_tag.079, %157 ], [ %next_tag.079, %188 ], [ %next_tag.079, %199 ], [ %next_tag.079, %202 ], [ %next_tag.079, %206 ], [ %next_tag.079, %209 ], [ %next_tag.1, %226 ], [ %next_tag.1, %231 ], [ %next_tag.1, %234 ], [ %next_tag.079, %244 ], [ %next_tag.079, %250 ], [ %next_tag.079, %255 ], [ %next_tag.079, %258 ], [ %next_tag.079, %261 ], [ %next_tag.079, %267 ], [ %next_tag.079, %270 ], [ %next_tag.079, %298 ], [ %next_tag.079, %314 ], [ %next_tag.079, %319 ], [ %next_tag.079, %323 ], [ %next_tag.079, %329 ], [ %next_tag.079, %332 ], [ %next_tag.079, %336 ], [ %next_tag.079, %340 ], [ %next_tag.079, %343 ], [ %next_tag.079, %346 ], [ %next_tag.079, %349 ], [ %next_tag.079, %352 ], [ %next_tag.079, %355 ], [ %next_tag.3, %385 ]
  %tag.3 = phi i32 [ %391, %390 ], [ %tag.082, %238 ], [ %next_tag.079, %.loopexit46 ], [ %next_tag.079, %.loopexit38 ], [ %tag.082, %146 ], [ %tag.082, %149 ], [ %tag.082, %157 ], [ %tag.082, %188 ], [ %tag.082, %199 ], [ %tag.082, %202 ], [ %tag.082, %206 ], [ %tag.082, %209 ], [ %tag.082, %226 ], [ %tag.082, %231 ], [ %tag.082, %234 ], [ %tag.082, %244 ], [ %tag.082, %250 ], [ %tag.082, %255 ], [ %tag.082, %258 ], [ %tag.082, %261 ], [ %tag.082, %267 ], [ %tag.082, %270 ], [ %tag.082, %298 ], [ %tag.082, %314 ], [ %tag.082, %319 ], [ %tag.082, %323 ], [ %tag.082, %329 ], [ %tag.082, %332 ], [ %tag.082, %336 ], [ %tag.082, %340 ], [ %tag.082, %343 ], [ %tag.082, %346 ], [ %tag.082, %349 ], [ %tag.082, %352 ], [ %tag.082, %355 ], [ %tag.2, %385 ]
  %num_tags.3 = phi i32 [ %num_tags.2, %390 ], [ %num_tags.085, %238 ], [ %186, %.loopexit46 ], [ %296, %.loopexit38 ], [ %num_tags.085, %146 ], [ %num_tags.085, %149 ], [ %num_tags.085, %157 ], [ %num_tags.085, %188 ], [ %num_tags.085, %199 ], [ %num_tags.085, %202 ], [ %num_tags.085, %206 ], [ %num_tags.085, %209 ], [ %num_tags.085, %226 ], [ %num_tags.085, %231 ], [ %num_tags.085, %234 ], [ %num_tags.085, %244 ], [ %num_tags.085, %250 ], [ %num_tags.085, %255 ], [ %num_tags.085, %258 ], [ %num_tags.085, %261 ], [ %num_tags.085, %267 ], [ %num_tags.085, %270 ], [ %num_tags.085, %298 ], [ %num_tags.085, %314 ], [ %num_tags.085, %319 ], [ %num_tags.085, %323 ], [ %num_tags.085, %329 ], [ %num_tags.085, %332 ], [ %num_tags.085, %336 ], [ %num_tags.085, %340 ], [ %num_tags.085, %343 ], [ %num_tags.085, %346 ], [ %num_tags.085, %349 ], [ %num_tags.085, %352 ], [ %num_tags.085, %355 ], [ %num_tags.2, %385 ]
  %status.7 = phi i32 [ %status.6, %390 ], [ %239, %238 ], [ %status.2, %.loopexit46 ], [ %status.3, %.loopexit38 ], [ %status.1, %146 ], [ %status.1, %149 ], [ %status.1, %157 ], [ %197, %188 ], [ %200, %199 ], [ %204, %202 ], [ %207, %206 ], [ %215, %209 ], [ %229, %226 ], [ %232, %231 ], [ %236, %234 ], [ %248, %244 ], [ %253, %250 ], [ %256, %255 ], [ %259, %258 ], [ %265, %261 ], [ %268, %267 ], [ 0, %270 ], [ %312, %298 ], [ %317, %314 ], [ %321, %319 ], [ %327, %323 ], [ %330, %329 ], [ %334, %332 ], [ %338, %336 ], [ %341, %340 ], [ %344, %343 ], [ %347, %346 ], [ %350, %349 ], [ %353, %352 ], [ %356, %355 ], [ %status.6, %385 ]
  %393 = load i32* %96, align 4, !tbaa !6
  %394 = icmp sgt i32 %393, -1
  br i1 %394, label %.preheader31, label %.backedge

.preheader31:                                     ; preds = %._crit_edge133
  %395 = load i32* %24, align 4, !tbaa !6
  %396 = icmp sgt i32 %395, -1
  br i1 %396, label %.lr.ph34, label %401

.lr.ph34:                                         ; preds = %.lr.ph34, %.preheader31
  %indvars.iv112 = phi i64 [ %indvars.iv.next113, %.lr.ph34 ], [ 0, %.preheader31 ]
  %i14.033 = phi i32 [ %397, %.lr.ph34 ], [ 0, %.preheader31 ]
  %indvars.iv.next113 = add i64 %indvars.iv112, 1
  %397 = add nsw i32 %i14.033, 1
  %398 = getelementptr inbounds i32* %24, i64 %indvars.iv.next113
  %399 = load i32* %398, align 4, !tbaa !6
  %400 = icmp sgt i32 %399, -1
  br i1 %400, label %.lr.ph34, label %._crit_edge35

._crit_edge35:                                    ; preds = %.lr.ph34
  %phitmp = add i32 %i14.033, 2
  %phitmp100 = sext i32 %phitmp to i64
  br label %401

; <label>:401                                     ; preds = %._crit_edge35, %.preheader31
  %.lcssa32 = phi i32* [ %398, %._crit_edge35 ], [ %24, %.preheader31 ]
  %i14.0.lcssa = phi i64 [ %phitmp100, %._crit_edge35 ], [ 1, %.preheader31 ]
  store i32 %393, i32* %.lcssa32, align 4, !tbaa !6
  %402 = getelementptr inbounds i32* %24, i64 %i14.0.lcssa
  store i32 -1, i32* %402, align 4, !tbaa !6
  br label %.backedge

; <label>:403                                     ; preds = %.backedge._crit_edge
  %404 = add nsw i32 %51, -2
  store i32 %404, i32* %1, align 4, !tbaa !6
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds i8** %54, i64 %405
  %407 = load i8** %406, align 8, !tbaa !7
  br i1 %5, label %408, label %425

; <label>:408                                     ; preds = %403
  %409 = getelementptr inbounds i8* %407, i64 8
  %410 = bitcast i8* %409 to i8**
  %411 = load i8** %410, align 8, !tbaa !7
  %412 = bitcast i8* %411 to %struct.tre_ast_node_t**
  %413 = load %struct.tre_ast_node_t** %412, align 8, !tbaa !7
  %414 = getelementptr inbounds %struct.tre_ast_node_t* %413, i64 0, i32 5
  %415 = load i32* %414, align 4, !tbaa !6
  %416 = add nsw i32 %51, -3
  store i32 %416, i32* %1, align 4, !tbaa !6
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i8** %54, i64 %417
  %419 = load i8** %418, align 8, !tbaa !7
  %420 = ptrtoint i8* %419 to i64
  %421 = trunc i64 %420 to i32
  %422 = add nsw i32 %421, %415
  %423 = getelementptr inbounds i8* %407, i64 28
  %424 = bitcast i8* %423 to i32*
  store i32 %422, i32* %424, align 4, !tbaa !6
  br label %.backedge

; <label>:425                                     ; preds = %403
  %426 = add nsw i32 %51, -3
  store i32 %426, i32* %1, align 4, !tbaa !6
  br label %.backedge

; <label>:427                                     ; preds = %.backedge._crit_edge
  %428 = add nsw i32 %51, -2
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds i8** %54, i64 %429
  %431 = load i8** %430, align 8, !tbaa !7
  %432 = ptrtoint i8* %431 to i64
  %433 = trunc i64 %432 to i32
  %434 = add nsw i32 %51, -3
  store i32 %434, i32* %1, align 4, !tbaa !6
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i8** %54, i64 %435
  %437 = load i8** %436, align 8, !tbaa !7
  %438 = ptrtoint i8* %437 to i64
  %439 = trunc i64 %438 to i32
  %440 = icmp sgt i32 %433, -1
  br i1 %440, label %441, label %.backedge

; <label>:441                                     ; preds = %427
  br label %.backedge

; <label>:442                                     ; preds = %.backedge._crit_edge
  %443 = add nsw i32 %51, -2
  store i32 %443, i32* %1, align 4, !tbaa !6
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds i8** %54, i64 %444
  %446 = load i8** %445, align 8, !tbaa !7
  br i1 %5, label %447, label %.backedge

; <label>:447                                     ; preds = %442
  %448 = getelementptr inbounds i8* %446, i64 8
  %449 = bitcast i8* %448 to i8**
  %450 = load i8** %449, align 8, !tbaa !7
  %451 = bitcast i8* %450 to %struct.tre_ast_node_t**
  %452 = load %struct.tre_ast_node_t** %451, align 8, !tbaa !7
  %453 = getelementptr inbounds %struct.tre_ast_node_t* %452, i64 0, i32 5
  %454 = load i32* %453, align 4, !tbaa !6
  %455 = getelementptr inbounds i8* %450, i64 8
  %456 = bitcast i8* %455 to %struct.tre_ast_node_t**
  %457 = load %struct.tre_ast_node_t** %456, align 8, !tbaa !7
  %458 = getelementptr inbounds %struct.tre_ast_node_t* %457, i64 0, i32 5
  %459 = load i32* %458, align 4, !tbaa !6
  %460 = add nsw i32 %459, %454
  %461 = getelementptr inbounds i8* %446, i64 28
  %462 = bitcast i8* %461 to i32*
  store i32 %460, i32* %462, align 4, !tbaa !6
  br label %.backedge

.lr.ph71:                                         ; preds = %.lr.ph71, %.preheader68
  %regset.170 = phi i32* [ %463, %.lr.ph71 ], [ %regset.088, %.preheader68 ]
  %463 = getelementptr inbounds i32* %regset.170, i64 1
  %464 = load i32* %463, align 4, !tbaa !6
  %465 = icmp sgt i32 %464, -1
  br i1 %465, label %.lr.ph71, label %.backedge

; <label>:466                                     ; preds = %.backedge._crit_edge
  %467 = add nsw i32 %51, -2
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i8** %54, i64 %468
  %470 = load i8** %469, align 8, !tbaa !7
  %471 = bitcast i8* %470 to %struct.tre_ast_node_t*
  %472 = add nsw i32 %51, -3
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i8** %54, i64 %473
  %475 = load i8** %474, align 8, !tbaa !7
  %476 = bitcast i8* %475 to %struct.tre_ast_node_t*
  %477 = add nsw i32 %51, -4
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i8** %54, i64 %478
  %480 = load i8** %479, align 8, !tbaa !7
  %481 = add nsw i32 %51, -5
  store i32 %481, i32* %1, align 4, !tbaa !6
  br i1 %5, label %482, label %._crit_edge165

._crit_edge165:                                   ; preds = %466
  %.pre166 = getelementptr inbounds i8* %480, i64 24
  %.pre167 = bitcast i8* %.pre166 to i32*
  br label %510

; <label>:482                                     ; preds = %466
  %483 = sext i32 %481 to i64
  %484 = getelementptr inbounds i8** %54, i64 %483
  %485 = load i8** %484, align 8, !tbaa !7
  %486 = ptrtoint i8* %485 to i64
  %487 = trunc i64 %486 to i32
  %488 = getelementptr inbounds i8* %480, i64 8
  %489 = bitcast i8* %488 to i8**
  %490 = load i8** %489, align 8, !tbaa !7
  %491 = bitcast i8* %490 to %struct.tre_ast_node_t**
  %492 = load %struct.tre_ast_node_t** %491, align 8, !tbaa !7
  %493 = getelementptr inbounds %struct.tre_ast_node_t* %492, i64 0, i32 5
  %494 = load i32* %493, align 4, !tbaa !6
  %495 = getelementptr inbounds i8* %490, i64 8
  %496 = bitcast i8* %495 to %struct.tre_ast_node_t**
  %497 = load %struct.tre_ast_node_t** %496, align 8, !tbaa !7
  %498 = getelementptr inbounds %struct.tre_ast_node_t* %497, i64 0, i32 5
  %499 = load i32* %498, align 4, !tbaa !6
  %500 = getelementptr inbounds i8* %480, i64 24
  %501 = bitcast i8* %500 to i32*
  %502 = load i32* %501, align 4, !tbaa !6
  %503 = icmp sgt i32 %502, 0
  %504 = select i1 %503, i32 2, i32 0
  %505 = add i32 %494, %487
  %506 = add i32 %505, %499
  %507 = add i32 %506, %504
  %508 = getelementptr inbounds i8* %480, i64 28
  %509 = bitcast i8* %508 to i32*
  store i32 %507, i32* %509, align 4, !tbaa !6
  %.pre = load i32* %1, align 4, !tbaa !6
  br label %510

; <label>:510                                     ; preds = %482, %._crit_edge165
  %.pre-phi168 = phi i32* [ %.pre167, %._crit_edge165 ], [ %501, %482 ]
  %511 = phi i32 [ %481, %._crit_edge165 ], [ %.pre, %482 ]
  %512 = add nsw i32 %511, -1
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i8** %54, i64 %513
  %515 = load i8** %514, align 8, !tbaa !7
  %516 = bitcast i8* %515 to i32*
  %517 = add nsw i32 %511, -2
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds i8** %54, i64 %518
  %520 = load i8** %519, align 8, !tbaa !7
  %521 = ptrtoint i8* %520 to i64
  %522 = trunc i64 %521 to i32
  %523 = add nsw i32 %511, -3
  store i32 %523, i32* %1, align 4, !tbaa !6
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds i8** %54, i64 %524
  %526 = load i8** %525, align 8, !tbaa !7
  %527 = ptrtoint i8* %526 to i64
  %528 = trunc i64 %527 to i32
  %529 = load i32* %.pre-phi168, align 4, !tbaa !6
  %530 = icmp sgt i32 %529, 0
  br i1 %530, label %531, label %.backedge

; <label>:531                                     ; preds = %510
  br i1 %5, label %540, label %532

; <label>:532                                     ; preds = %531
  %533 = tail call fastcc i32 @tre_add_tag(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %471, i32 %522, i32 1) optsize
  %534 = sext i32 %tag.082 to i64
  %535 = load i32** %49, align 8, !tbaa !7
  %536 = getelementptr inbounds i32* %535, i64 %534
  store i32 1, i32* %536, align 4, !tbaa !0
  %537 = tail call fastcc i32 @tre_add_tag(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %476, i32 %528, i32 1) optsize
  %538 = load i32** %49, align 8, !tbaa !7
  %539 = getelementptr inbounds i32* %538, i64 %534
  store i32 1, i32* %539, align 4, !tbaa !0
  br label %540

; <label>:540                                     ; preds = %532, %531
  %status.8 = phi i32 [ %status.091, %531 ], [ %537, %532 ]
  %541 = add nsw i32 %num_tags.085, 2
  br label %.backedge

._crit_edge94:                                    ; preds = %143, %137, %121, %.backedge, %41
  %status.0.lcssa = phi i32 [ %44, %41 ], [ %status.0.be, %.backedge ], [ 12, %121 ], [ %141, %137 ], [ %144, %143 ]
  %regset.0.lcssa = phi i32* [ %16, %41 ], [ %regset.0.be, %.backedge ], [ %regset.088, %121 ], [ %regset.088, %137 ], [ %regset.088, %143 ]
  %num_tags.0.lcssa = phi i32 [ 0, %41 ], [ %num_tags.0.be, %.backedge ], [ %num_tags.085, %121 ], [ %num_tags.085, %137 ], [ %num_tags.085, %143 ]
  br i1 %5, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %._crit_edge94
  %542 = load i32* %regset.0.lcssa, align 4, !tbaa !6
  %543 = icmp sgt i32 %542, -1
  br i1 %543, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %544 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 4
  %545 = load %struct.tre_submatch_data** %544, align 8, !tbaa !7
  br label %546

; <label>:546                                     ; preds = %556, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %556 ]
  %547 = phi i32 [ %542, %.lr.ph ], [ %558, %556 ]
  %548 = ashr i32 %547, 1
  %549 = and i32 %547, 1
  %550 = icmp eq i32 %549, 0
  %551 = sext i32 %548 to i64
  br i1 %550, label %552, label %554

; <label>:552                                     ; preds = %546
  %553 = getelementptr inbounds %struct.tre_submatch_data* %545, i64 %551, i32 0
  store i32 %num_tags.0.lcssa, i32* %553, align 4, !tbaa !6
  br label %556

; <label>:554                                     ; preds = %546
  %555 = getelementptr inbounds %struct.tre_submatch_data* %545, i64 %551, i32 1
  store i32 %num_tags.0.lcssa, i32* %555, align 4, !tbaa !6
  br label %556

; <label>:556                                     ; preds = %554, %552
  %indvars.iv.next = add i64 %indvars.iv, 1
  %557 = getelementptr inbounds i32* %regset.0.lcssa, i64 %indvars.iv.next
  %558 = load i32* %557, align 4, !tbaa !6
  %559 = icmp sgt i32 %558, -1
  br i1 %559, label %546, label %.loopexit

.loopexit:                                        ; preds = %556, %.preheader, %._crit_edge94
  %560 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 8
  store i32 %num_tags.0.lcssa, i32* %560, align 4, !tbaa !6
  %561 = getelementptr inbounds %struct.tnfa* %tnfa, i64 0, i32 7
  store i32 %num_tags.0.lcssa, i32* %561, align 4, !tbaa !6
  tail call void @free(i8* %15) optsize
  tail call void @free(i8* %23) optsize
  tail call void @free(i8* %32) optsize
  br label %562

; <label>:562                                     ; preds = %.loopexit, %35, %26, %8
  %.0 = phi i32 [ 12, %26 ], [ 12, %35 ], [ %status.0.lcssa, %.loopexit ], [ 12, %8 ]
  ret i32 %.0
}

define internal fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %left, %struct.tre_ast_node_t* %right) nounwind uwtable optsize {
  %1 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 1, i64 16) optsize
  %2 = icmp eq %struct.tre_ast_node_t* %1, null
  br i1 %2, label %16, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.tre_ast_node_t* %1, i64 0, i32 1
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = bitcast i8* %5 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %left, %struct.tre_ast_node_t** %6, align 8, !tbaa !7
  %7 = load i8** %4, align 8, !tbaa !7
  %8 = getelementptr inbounds i8* %7, i64 8
  %9 = bitcast i8* %8 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %right, %struct.tre_ast_node_t** %9, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.tre_ast_node_t* %left, i64 0, i32 4
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = getelementptr inbounds %struct.tre_ast_node_t* %right, i64 0, i32 4
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = add nsw i32 %13, %11
  %15 = getelementptr inbounds %struct.tre_ast_node_t* %1, i64 0, i32 4
  store i32 %14, i32* %15, align 4, !tbaa !6
  br label %16

; <label>:16                                      ; preds = %3, %0
  %.0 = phi %struct.tre_ast_node_t* [ %1, %3 ], [ null, %0 ]
  ret %struct.tre_ast_node_t* %.0
}

define internal fastcc i32 @tre_ast_to_tnfa(%struct.tre_ast_node_t* nocapture %node, %struct.tnfa_transition* %transitions, i32* %counts, i32* %offs) nounwind uwtable optsize {
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.backedge, %0
  %node.tr = phi %struct.tre_ast_node_t* [ %node, %0 ], [ %node.tr.be, %tailrecurse.backedge ]
  %1 = getelementptr inbounds %struct.tre_ast_node_t* %node.tr, i64 0, i32 0
  %2 = load i32* %1, align 4, !tbaa !0
  switch i32 %2, label %47 [
    i32 2, label %31
    i32 3, label %3
    i32 1, label %13
  ]

; <label>:3                                       ; preds = %tailrecurse
  %4 = getelementptr inbounds %struct.tre_ast_node_t* %node.tr, i64 0, i32 1
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = bitcast i8* %5 to %struct.tre_ast_node_t**
  %7 = load %struct.tre_ast_node_t** %6, align 8, !tbaa !7
  %8 = tail call fastcc i32 @tre_ast_to_tnfa(%struct.tre_ast_node_t* %7, %struct.tnfa_transition* %transitions, i32* %counts, i32* %offs) optsize
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %47

; <label>:10                                      ; preds = %3
  %11 = getelementptr inbounds i8* %5, i64 8
  %12 = bitcast i8* %11 to %struct.tre_ast_node_t**
  br label %tailrecurse.backedge

; <label>:13                                      ; preds = %tailrecurse
  %14 = getelementptr inbounds %struct.tre_ast_node_t* %node.tr, i64 0, i32 1
  %15 = load i8** %14, align 8, !tbaa !7
  %16 = bitcast i8* %15 to %struct.tre_ast_node_t**
  %17 = load %struct.tre_ast_node_t** %16, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.tre_ast_node_t* %17, i64 0, i32 7
  %19 = load %struct.tre_pos_and_tags_t** %18, align 8, !tbaa !7
  %20 = getelementptr inbounds i8* %15, i64 8
  %21 = bitcast i8* %20 to %struct.tre_ast_node_t**
  %22 = load %struct.tre_ast_node_t** %21, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.tre_ast_node_t* %22, i64 0, i32 6
  %24 = load %struct.tre_pos_and_tags_t** %23, align 8, !tbaa !7
  %25 = tail call fastcc i32 @tre_make_trans(%struct.tre_pos_and_tags_t* %19, %struct.tre_pos_and_tags_t* %24, %struct.tnfa_transition* %transitions, i32* %counts, i32* %offs) optsize
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %47

; <label>:27                                      ; preds = %13
  %28 = load %struct.tre_ast_node_t** %16, align 8, !tbaa !7
  %29 = tail call fastcc i32 @tre_ast_to_tnfa(%struct.tre_ast_node_t* %28, %struct.tnfa_transition* %transitions, i32* %counts, i32* %offs) optsize
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %tailrecurse.backedge, label %47

; <label>:31                                      ; preds = %tailrecurse
  %32 = getelementptr inbounds %struct.tre_ast_node_t* %node.tr, i64 0, i32 1
  %33 = load i8** %32, align 8, !tbaa !7
  %34 = getelementptr inbounds i8* %33, i64 12
  %35 = bitcast i8* %34 to i32*
  %36 = load i32* %35, align 4, !tbaa !6
  %37 = icmp eq i32 %36, -1
  %38 = bitcast i8* %33 to %struct.tre_ast_node_t**
  br i1 %37, label %39, label %tailrecurse.backedge

; <label>:39                                      ; preds = %31
  %40 = load %struct.tre_ast_node_t** %38, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.tre_ast_node_t* %40, i64 0, i32 7
  %42 = load %struct.tre_pos_and_tags_t** %41, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.tre_ast_node_t* %40, i64 0, i32 6
  %44 = load %struct.tre_pos_and_tags_t** %43, align 8, !tbaa !7
  %45 = tail call fastcc i32 @tre_make_trans(%struct.tre_pos_and_tags_t* %42, %struct.tre_pos_and_tags_t* %44, %struct.tnfa_transition* %transitions, i32* %counts, i32* %offs) optsize
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %tailrecurse.backedge, label %47

tailrecurse.backedge:                             ; preds = %39, %31, %27, %10
  %node.tr.be.in = phi %struct.tre_ast_node_t** [ %12, %10 ], [ %21, %27 ], [ %38, %39 ], [ %38, %31 ]
  %node.tr.be = load %struct.tre_ast_node_t** %node.tr.be.in, align 8
  br label %tailrecurse

; <label>:47                                      ; preds = %39, %27, %13, %3, %tailrecurse
  %.0 = phi i32 [ %8, %3 ], [ %25, %13 ], [ %29, %27 ], [ %45, %39 ], [ 0, %tailrecurse ]
  ret i32 %.0
}

define internal fastcc i32 @tre_make_trans(%struct.tre_pos_and_tags_t* nocapture %p1, %struct.tre_pos_and_tags_t* nocapture %p2, %struct.tnfa_transition* %transitions, i32* nocapture %counts, i32* nocapture %offs) nounwind uwtable optsize {
  %1 = icmp eq %struct.tnfa_transition* %transitions, null
  br i1 %1, label %.preheader47, label %.preheader41

.preheader47:                                     ; preds = %0
  %2 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p1, i64 0, i32 0
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %.preheader43.lr.ph, label %.loopexit35

.preheader43.lr.ph:                               ; preds = %.preheader47
  %5 = getelementptr inbounds %struct.tre_pos_and_tags_t* %p2, i64 0, i32 0
  br label %.preheader43

.preheader41:                                     ; preds = %164, %0
  %.01 = phi %struct.tre_pos_and_tags_t* [ %165, %164 ], [ %p1, %0 ]
  %6 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 0
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %.preheader34, label %.loopexit35

.preheader34:                                     ; preds = %.preheader41
  %9 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 1
  %10 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 2
  %11 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 4
  %12 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 5
  %13 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 6
  %14 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 7
  %15 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 0, i32 3
  br label %.outer

.outer:                                           ; preds = %162, %.preheader34
  %prev_p2_pos.0.ph = phi i32 [ %18, %162 ], [ -1, %.preheader34 ]
  %.02.ph = phi %struct.tre_pos_and_tags_t* [ %163, %162 ], [ %p2, %.preheader34 ]
  br label %16

; <label>:16                                      ; preds = %22, %.outer
  %.02 = phi %struct.tre_pos_and_tags_t* [ %23, %22 ], [ %.02.ph, %.outer ]
  %17 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.02, i64 0, i32 0
  %18 = load i32* %17, align 4, !tbaa !6
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %20, label %164

; <label>:20                                      ; preds = %16
  %21 = icmp eq i32 %18, %prev_p2_pos.0.ph
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %20
  %23 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.02, i64 1
  br label %16

; <label>:24                                      ; preds = %20
  %25 = load i32* %6, align 4, !tbaa !6
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32* %offs, i64 %26
  %28 = load i32* %27, align 4, !tbaa !6
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.tnfa_transition* %transitions, i64 %29
  %31 = getelementptr inbounds %struct.tnfa_transition* %transitions, i64 %29, i32 2
  %32 = load %struct.tnfa_transition** %31, align 8, !tbaa !7
  %33 = icmp eq %struct.tnfa_transition* %32, null
  br i1 %33, label %._crit_edge, label %.lr.ph13

.lr.ph13:                                         ; preds = %.lr.ph13, %24
  %trans.012 = phi %struct.tnfa_transition* [ %34, %.lr.ph13 ], [ %30, %24 ]
  %34 = getelementptr inbounds %struct.tnfa_transition* %trans.012, i64 1
  %35 = getelementptr inbounds %struct.tnfa_transition* %trans.012, i64 1, i32 2
  %36 = load %struct.tnfa_transition** %35, align 8, !tbaa !7
  %37 = icmp eq %struct.tnfa_transition* %36, null
  br i1 %37, label %._crit_edge, label %.lr.ph13

._crit_edge:                                      ; preds = %.lr.ph13, %24
  %.lcssa = phi %struct.tnfa_transition** [ %31, %24 ], [ %35, %.lr.ph13 ]
  %trans.0.lcssa = phi %struct.tnfa_transition* [ %30, %24 ], [ %34, %.lr.ph13 ]
  %38 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 1, i32 2
  store %struct.tnfa_transition* null, %struct.tnfa_transition** %38, align 8, !tbaa !7
  %39 = load i32* %9, align 4, !tbaa !6
  %40 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 0
  store i32 %39, i32* %40, align 4, !tbaa !6
  %41 = load i32* %10, align 4, !tbaa !6
  %42 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 1
  store i32 %41, i32* %42, align 4, !tbaa !6
  %43 = load i32* %17, align 4, !tbaa !6
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32* %offs, i64 %44
  %46 = load i32* %45, align 4, !tbaa !6
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.tnfa_transition* %transitions, i64 %47
  store %struct.tnfa_transition* %48, %struct.tnfa_transition** %.lcssa, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 3
  store i32 %43, i32* %49, align 4, !tbaa !6
  %50 = load i32* %11, align 4, !tbaa !6
  %51 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.02, i64 0, i32 4
  %52 = load i32* %51, align 4, !tbaa !6
  %53 = load i32* %12, align 4, !tbaa !6
  %54 = icmp ne i32 %53, 0
  %55 = select i1 %54, i32 4, i32 0
  %56 = load i32** %13, align 8, !tbaa !7
  %57 = icmp ne i32* %56, null
  %58 = select i1 %57, i32 8, i32 0
  %59 = or i32 %52, %50
  %60 = or i32 %59, %55
  %61 = or i32 %60, %58
  %62 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 5
  store i32 %61, i32* %62, align 4, !tbaa !6
  %63 = load i32* %14, align 4, !tbaa !6
  %64 = icmp sgt i32 %63, -1
  br i1 %64, label %65, label %68

; <label>:65                                      ; preds = %._crit_edge
  %66 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 6, i32 0
  store i32 %63, i32* %66, align 4, !tbaa !6
  %67 = or i32 %61, 256
  store i32 %67, i32* %62, align 4, !tbaa !6
  br label %71

; <label>:68                                      ; preds = %._crit_edge
  %69 = load i32* %12, align 4, !tbaa !6
  %70 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 6, i32 0
  store i32 %69, i32* %70, align 4, !tbaa !6
  br label %71

; <label>:71                                      ; preds = %68, %65
  %72 = icmp eq i32* %56, null
  br i1 %72, label %93, label %.preheader16

.preheader16:                                     ; preds = %.preheader16, %71
  %indvars.iv58 = phi i64 [ %indvars.iv.next59, %.preheader16 ], [ 0, %71 ]
  %i.0 = phi i32 [ %76, %.preheader16 ], [ 0, %71 ]
  %73 = getelementptr inbounds i32* %56, i64 %indvars.iv58
  %74 = load i32* %73, align 4, !tbaa !6
  %75 = icmp eq i32 %74, 0
  %indvars.iv.next59 = add i64 %indvars.iv58, 1
  %76 = add nsw i32 %i.0, 1
  br i1 %75, label %77, label %.preheader16

; <label>:77                                      ; preds = %.preheader16
  %78 = sext i32 %76 to i64
  %79 = shl nsw i64 %78, 2
  %80 = tail call i8* @malloc(i64 %79) optsize
  %81 = bitcast i8* %80 to i32*
  %82 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 7
  store i32* %81, i32** %82, align 8, !tbaa !7
  %83 = icmp eq i8* %80, null
  br i1 %83, label %.loopexit35, label %.preheader18

.preheader18:                                     ; preds = %77
  %84 = load i32** %13, align 8, !tbaa !7
  %85 = load i32* %84, align 4, !tbaa !6
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %._crit_edge22, label %.lr.ph21

.lr.ph21:                                         ; preds = %.lr.ph21, %.preheader18
  %indvars.iv61 = phi i64 [ %indvars.iv.next62, %.lr.ph21 ], [ 0, %.preheader18 ]
  %87 = phi i32* [ %92, %.lr.ph21 ], [ %81, %.preheader18 ]
  %88 = phi i32 [ %90, %.lr.ph21 ], [ %85, %.preheader18 ]
  store i32 %88, i32* %87, align 4, !tbaa !6
  %indvars.iv.next62 = add i64 %indvars.iv61, 1
  %89 = getelementptr inbounds i32* %84, i64 %indvars.iv.next62
  %90 = load i32* %89, align 4, !tbaa !6
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds i32* %81, i64 %indvars.iv.next62
  br i1 %91, label %._crit_edge22, label %.lr.ph21

._crit_edge22:                                    ; preds = %.lr.ph21, %.preheader18
  %.lcssa19 = phi i32* [ %81, %.preheader18 ], [ %92, %.lr.ph21 ]
  store i32 0, i32* %.lcssa19, align 4, !tbaa !6
  br label %95

; <label>:93                                      ; preds = %71
  %94 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 7
  store i32* null, i32** %94, align 8, !tbaa !7
  br label %95

; <label>:95                                      ; preds = %93, %._crit_edge22
  %96 = load i32** %15, align 8, !tbaa !7
  %97 = icmp eq i32* %96, null
  br i1 %97, label %.loopexit25, label %.preheader24

.preheader24:                                     ; preds = %95
  %98 = load i32* %96, align 4, !tbaa !6
  %99 = icmp sgt i32 %98, -1
  br i1 %99, label %.lr.ph27, label %.loopexit25

.lr.ph27:                                         ; preds = %.lr.ph27, %.preheader24
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %.lr.ph27 ], [ 0, %.preheader24 ]
  %i.226 = phi i32 [ %100, %.lr.ph27 ], [ 0, %.preheader24 ]
  %indvars.iv.next65 = add i64 %indvars.iv64, 1
  %100 = add nsw i32 %i.226, 1
  %101 = getelementptr inbounds i32* %96, i64 %indvars.iv.next65
  %102 = load i32* %101, align 4, !tbaa !6
  %103 = icmp sgt i32 %102, -1
  br i1 %103, label %.lr.ph27, label %.loopexit25

.loopexit25:                                      ; preds = %.lr.ph27, %.preheader24, %95
  %i.3 = phi i32 [ 0, %95 ], [ 0, %.preheader24 ], [ %100, %.lr.ph27 ]
  %104 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.02, i64 0, i32 3
  %105 = load i32** %104, align 8, !tbaa !7
  %106 = icmp eq i32* %105, null
  br i1 %106, label %.loopexit30, label %.preheader29

.preheader29:                                     ; preds = %.loopexit25
  %107 = load i32* %105, align 4, !tbaa !6
  %108 = icmp sgt i32 %107, -1
  br i1 %108, label %.lr.ph32, label %.loopexit30

.lr.ph32:                                         ; preds = %.lr.ph32, %.preheader29
  %indvars.iv67 = phi i64 [ %indvars.iv.next68, %.lr.ph32 ], [ 0, %.preheader29 ]
  %j.031 = phi i32 [ %109, %.lr.ph32 ], [ 0, %.preheader29 ]
  %indvars.iv.next68 = add i64 %indvars.iv67, 1
  %109 = add nsw i32 %j.031, 1
  %110 = getelementptr inbounds i32* %105, i64 %indvars.iv.next68
  %111 = load i32* %110, align 4, !tbaa !6
  %112 = icmp sgt i32 %111, -1
  br i1 %112, label %.lr.ph32, label %.loopexit30

.loopexit30:                                      ; preds = %.lr.ph32, %.preheader29, %.loopexit25
  %j.1 = phi i32 [ 0, %.loopexit25 ], [ 0, %.preheader29 ], [ %109, %.lr.ph32 ]
  %113 = getelementptr inbounds %struct.tnfa_transition* %trans.0.lcssa, i64 0, i32 4
  %114 = load i32** %113, align 8, !tbaa !7
  %115 = icmp eq i32* %114, null
  br i1 %115, label %118, label %116

; <label>:116                                     ; preds = %.loopexit30
  %117 = bitcast i32* %114 to i8*
  tail call void @free(i8* %117) optsize
  br label %118

; <label>:118                                     ; preds = %116, %.loopexit30
  store i32* null, i32** %113, align 8, !tbaa !7
  %119 = add nsw i32 %j.1, %i.3
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %162

; <label>:121                                     ; preds = %118
  %122 = add nsw i32 %119, 1
  %123 = sext i32 %122 to i64
  %124 = shl nsw i64 %123, 2
  %125 = tail call i8* @malloc(i64 %124) optsize
  %126 = bitcast i8* %125 to i32*
  store i32* %126, i32** %113, align 8, !tbaa !7
  %127 = icmp eq i8* %125, null
  br i1 %127, label %.loopexit35, label %128

; <label>:128                                     ; preds = %121
  %129 = load i32** %15, align 8, !tbaa !7
  %130 = icmp eq i32* %129, null
  br i1 %130, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %128
  %131 = load i32* %129, align 4, !tbaa !6
  %132 = icmp sgt i32 %131, -1
  br i1 %132, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.preheader ]
  %133 = phi i32 [ %137, %.lr.ph ], [ %131, %.preheader ]
  %i.44 = phi i32 [ %135, %.lr.ph ], [ 0, %.preheader ]
  %134 = getelementptr inbounds i32* %126, i64 %indvars.iv
  store i32 %133, i32* %134, align 4, !tbaa !6
  %indvars.iv.next = add i64 %indvars.iv, 1
  %135 = add nsw i32 %i.44, 1
  %136 = getelementptr inbounds i32* %129, i64 %indvars.iv.next
  %137 = load i32* %136, align 4, !tbaa !6
  %138 = icmp sgt i32 %137, -1
  br i1 %138, label %.lr.ph, label %.loopexit

.loopexit:                                        ; preds = %.lr.ph, %.preheader, %128
  %i.5 = phi i32 [ 0, %128 ], [ 0, %.preheader ], [ %135, %.lr.ph ]
  %139 = load i32** %104, align 8, !tbaa !7
  %140 = icmp eq i32* %139, null
  br i1 %140, label %.loopexit8, label %.preheader7

.preheader7:                                      ; preds = %.loopexit
  %141 = load i32* %139, align 4, !tbaa !6
  %142 = icmp sgt i32 %141, -1
  br i1 %142, label %.preheader5, label %.loopexit8

.preheader5:                                      ; preds = %.loopexit6, %.preheader7
  %143 = phi i32 [ %158, %.loopexit6 ], [ %141, %.preheader7 ]
  %indvars.iv53 = phi i64 [ %indvars.iv.next54, %.loopexit6 ], [ 0, %.preheader7 ]
  %l.010 = phi i32 [ %l.1, %.loopexit6 ], [ %i.5, %.preheader7 ]
  br label %144

; <label>:144                                     ; preds = %153, %.preheader5
  %indvars.iv51 = phi i64 [ 0, %.preheader5 ], [ %indvars.iv.next52, %153 ]
  %145 = trunc i64 %indvars.iv51 to i32
  %146 = icmp slt i32 %145, %i.5
  br i1 %146, label %147, label %.critedge

; <label>:147                                     ; preds = %144
  %148 = getelementptr inbounds i32* %126, i64 %indvars.iv51
  %149 = load i32* %148, align 4, !tbaa !6
  %150 = getelementptr inbounds i32* %139, i64 %indvars.iv53
  %151 = load i32* %150, align 4, !tbaa !6
  %152 = icmp eq i32 %149, %151
  br i1 %152, label %.loopexit6, label %153

; <label>:153                                     ; preds = %147
  %indvars.iv.next52 = add i64 %indvars.iv51, 1
  br label %144

.critedge:                                        ; preds = %144
  %154 = add nsw i32 %l.010, 1
  %155 = sext i32 %l.010 to i64
  %156 = getelementptr inbounds i32* %126, i64 %155
  store i32 %143, i32* %156, align 4, !tbaa !6
  br label %.loopexit6

.loopexit6:                                       ; preds = %.critedge, %147
  %l.1 = phi i32 [ %154, %.critedge ], [ %l.010, %147 ]
  %indvars.iv.next54 = add i64 %indvars.iv53, 1
  %157 = getelementptr inbounds i32* %139, i64 %indvars.iv.next54
  %158 = load i32* %157, align 4, !tbaa !6
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %.preheader5, label %.loopexit8

.loopexit8:                                       ; preds = %.loopexit6, %.preheader7, %.loopexit
  %l.2 = phi i32 [ %i.5, %.loopexit ], [ %i.5, %.preheader7 ], [ %l.1, %.loopexit6 ]
  %160 = sext i32 %l.2 to i64
  %161 = getelementptr inbounds i32* %126, i64 %160
  store i32 -1, i32* %161, align 4, !tbaa !6
  br label %162

; <label>:162                                     ; preds = %.loopexit8, %118
  %163 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.02, i64 1
  br label %.outer

; <label>:164                                     ; preds = %16
  %165 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.01, i64 1
  br label %.preheader41

.preheader43:                                     ; preds = %._crit_edge46, %.preheader43.lr.ph
  %166 = phi i32 [ %3, %.preheader43.lr.ph ], [ %181, %._crit_edge46 ]
  %167 = phi i32* [ %2, %.preheader43.lr.ph ], [ %180, %._crit_edge46 ]
  %.149 = phi %struct.tre_pos_and_tags_t* [ %p1, %.preheader43.lr.ph ], [ %179, %._crit_edge46 ]
  %168 = load i32* %5, align 4, !tbaa !6
  %169 = icmp sgt i32 %168, -1
  br i1 %169, label %.lr.ph45, label %._crit_edge46

.lr.ph45:                                         ; preds = %._crit_edge74, %.preheader43
  %170 = phi i32 [ %.pre, %._crit_edge74 ], [ %166, %.preheader43 ]
  %.1344 = phi %struct.tre_pos_and_tags_t* [ %175, %._crit_edge74 ], [ %p2, %.preheader43 ]
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i32* %counts, i64 %171
  %173 = load i32* %172, align 4, !tbaa !6
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %172, align 4, !tbaa !6
  %175 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.1344, i64 1
  %176 = getelementptr inbounds %struct.tre_pos_and_tags_t* %175, i64 0, i32 0
  %177 = load i32* %176, align 4, !tbaa !6
  %178 = icmp sgt i32 %177, -1
  br i1 %178, label %._crit_edge74, label %._crit_edge46

._crit_edge74:                                    ; preds = %.lr.ph45
  %.pre = load i32* %167, align 4, !tbaa !6
  br label %.lr.ph45

._crit_edge46:                                    ; preds = %.lr.ph45, %.preheader43
  %179 = getelementptr inbounds %struct.tre_pos_and_tags_t* %.149, i64 1
  %180 = getelementptr inbounds %struct.tre_pos_and_tags_t* %179, i64 0, i32 0
  %181 = load i32* %180, align 4, !tbaa !6
  %182 = icmp sgt i32 %181, -1
  br i1 %182, label %.preheader43, label %.loopexit35

.loopexit35:                                      ; preds = %._crit_edge46, %121, %77, %.preheader41, %.preheader47
  %.0 = phi i32 [ 12, %77 ], [ 12, %121 ], [ 0, %.preheader41 ], [ 0, %._crit_edge46 ], [ 0, %.preheader47 ]
  ret i32 %.0
}

define internal fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %s, i8* %value) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tre_stack_rec* %s, i64 0, i32 3
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = getelementptr inbounds %struct.tre_stack_rec* %s, i64 0, i32 0
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %0
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %struct.tre_stack_rec* %s, i64 0, i32 4
  %9 = load i8*** %8, align 8, !tbaa !7
  %10 = getelementptr inbounds i8** %9, i64 %7
  store i8* %value, i8** %10, align 8, !tbaa !7
  %11 = add nsw i32 %2, 1
  store i32 %11, i32* %1, align 4, !tbaa !6
  br label %31

; <label>:12                                      ; preds = %0
  %13 = getelementptr inbounds %struct.tre_stack_rec* %s, i64 0, i32 1
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = icmp slt i32 %4, %14
  br i1 %15, label %16, label %31

; <label>:16                                      ; preds = %12
  %17 = getelementptr inbounds %struct.tre_stack_rec* %s, i64 0, i32 2
  %18 = load i32* %17, align 4, !tbaa !6
  %19 = add nsw i32 %18, %4
  %20 = icmp sgt i32 %19, %14
  %new_size.0 = select i1 %20, i32 %14, i32 %19
  %21 = getelementptr inbounds %struct.tre_stack_rec* %s, i64 0, i32 4
  %22 = load i8*** %21, align 8, !tbaa !7
  %23 = bitcast i8** %22 to i8*
  %24 = sext i32 %new_size.0 to i64
  %25 = shl nsw i64 %24, 3
  %26 = tail call i8* @realloc(i8* %23, i64 %25) nounwind optsize
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

; <label>:28                                      ; preds = %16
  %29 = bitcast i8* %26 to i8**
  store i32 %new_size.0, i32* %3, align 4, !tbaa !6
  store i8** %29, i8*** %21, align 8, !tbaa !7
  %30 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %s, i8* %value) optsize
  ret i32 0

; <label>:31                                      ; preds = %16, %12, %6
  %.0 = phi i32 [ 12, %12 ], [ 12, %16 ], [ 0, %6 ]
  ret i32 %.0
}

define internal fastcc %struct.tre_pos_and_tags_t* @tre_set_one(%struct.tre_mem_struct* %mem, i32 %position, i32 %code_min, i32 %code_max, i32 %class, i32* %neg_classes, i32 %backref) nounwind uwtable optsize {
  %1 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 1, i64 96) nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %22, label %3

; <label>:3                                       ; preds = %0
  %4 = bitcast i8* %1 to %struct.tre_pos_and_tags_t*
  %5 = bitcast i8* %1 to i32*
  store i32 %position, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds i8* %1, i64 4
  %7 = bitcast i8* %6 to i32*
  store i32 %code_min, i32* %7, align 4, !tbaa !6
  %8 = getelementptr inbounds i8* %1, i64 8
  %9 = bitcast i8* %8 to i32*
  store i32 %code_max, i32* %9, align 4, !tbaa !6
  %10 = getelementptr inbounds i8* %1, i64 28
  %11 = bitcast i8* %10 to i32*
  store i32 %class, i32* %11, align 4, !tbaa !6
  %12 = getelementptr inbounds i8* %1, i64 32
  %13 = bitcast i8* %12 to i32**
  store i32* %neg_classes, i32** %13, align 8, !tbaa !7
  %14 = getelementptr inbounds i8* %1, i64 40
  %15 = bitcast i8* %14 to i32*
  store i32 %backref, i32* %15, align 4, !tbaa !6
  %16 = getelementptr inbounds i8* %1, i64 48
  %17 = bitcast i8* %16 to i32*
  store i32 -1, i32* %17, align 4, !tbaa !6
  %18 = getelementptr inbounds i8* %1, i64 52
  %19 = bitcast i8* %18 to i32*
  store i32 -1, i32* %19, align 4, !tbaa !6
  %20 = getelementptr inbounds i8* %1, i64 56
  %21 = bitcast i8* %20 to i32*
  store i32 -1, i32* %21, align 4, !tbaa !6
  br label %22

; <label>:22                                      ; preds = %3, %0
  %.0 = phi %struct.tre_pos_and_tags_t* [ %4, %3 ], [ null, %0 ]
  ret %struct.tre_pos_and_tags_t* %.0
}

define internal fastcc %struct.tre_pos_and_tags_t* @tre_set_empty(%struct.tre_mem_struct* %mem) nounwind uwtable optsize {
  %1 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 1, i64 48) nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %10, label %3

; <label>:3                                       ; preds = %0
  %4 = bitcast i8* %1 to %struct.tre_pos_and_tags_t*
  %5 = bitcast i8* %1 to i32*
  store i32 -1, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds i8* %1, i64 4
  %7 = bitcast i8* %6 to i32*
  store i32 -1, i32* %7, align 4, !tbaa !6
  %8 = getelementptr inbounds i8* %1, i64 8
  %9 = bitcast i8* %8 to i32*
  store i32 -1, i32* %9, align 4, !tbaa !6
  br label %10

; <label>:10                                      ; preds = %3, %0
  %.0 = phi %struct.tre_pos_and_tags_t* [ %4, %3 ], [ null, %0 ]
  ret %struct.tre_pos_and_tags_t* %.0
}

define internal fastcc %struct.tre_pos_and_tags_t* @tre_set_union(%struct.tre_mem_struct* %mem, %struct.tre_pos_and_tags_t* nocapture %set1, %struct.tre_pos_and_tags_t* nocapture %set2, i32* %tags, i32 %assertions) nounwind uwtable optsize {
  %1 = icmp eq i32* %tags, null
  br label %2

; <label>:2                                       ; preds = %10, %0
  %indvars.iv59 = phi i64 [ %indvars.iv.next60, %10 ], [ 0, %0 ]
  %indvars.iv47 = phi i32 [ %indvars.iv.next48, %10 ], [ 0, %0 ]
  br i1 %1, label %.critedge.preheader, label %3

; <label>:3                                       ; preds = %2
  %4 = getelementptr inbounds i32* %tags, i64 %indvars.iv59
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %10, label %.critedge.preheader

.critedge.preheader:                              ; preds = %3, %2
  %7 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 0, i32 0
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %.critedge, label %.preheader21

; <label>:10                                      ; preds = %3
  %indvars.iv.next60 = add i64 %indvars.iv59, 1
  %indvars.iv.next48 = add i32 %indvars.iv47, 1
  br label %2

.critedge..preheader21_crit_edge:                 ; preds = %.critedge
  %phitmp = add i32 %s1.026, 2
  br label %.preheader21

.preheader21:                                     ; preds = %.critedge..preheader21_crit_edge, %.critedge.preheader
  %s1.0.lcssa = phi i32 [ %phitmp, %.critedge..preheader21_crit_edge ], [ 1, %.critedge.preheader ]
  %11 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 0, i32 0
  %12 = load i32* %11, align 4, !tbaa !6
  %13 = icmp sgt i32 %12, -1
  br i1 %13, label %.lr.ph23, label %._crit_edge24

.critedge:                                        ; preds = %.critedge, %.critedge.preheader
  %indvars.iv57 = phi i64 [ %indvars.iv.next58, %.critedge ], [ 0, %.critedge.preheader ]
  %s1.026 = phi i32 [ %14, %.critedge ], [ 0, %.critedge.preheader ]
  %indvars.iv.next58 = add i64 %indvars.iv57, 1
  %14 = add nsw i32 %s1.026, 1
  %15 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv.next58, i32 0
  %16 = load i32* %15, align 4, !tbaa !6
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %.critedge, label %.critedge..preheader21_crit_edge

.lr.ph23:                                         ; preds = %.lr.ph23, %.preheader21
  %indvars.iv55 = phi i64 [ %indvars.iv.next56, %.lr.ph23 ], [ 0, %.preheader21 ]
  %s2.022 = phi i32 [ %18, %.lr.ph23 ], [ 0, %.preheader21 ]
  %indvars.iv.next56 = add i64 %indvars.iv55, 1
  %18 = add nsw i32 %s2.022, 1
  %19 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv.next56, i32 0
  %20 = load i32* %19, align 4, !tbaa !6
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %.lr.ph23, label %._crit_edge24

._crit_edge24:                                    ; preds = %.lr.ph23, %.preheader21
  %s2.0.lcssa = phi i32 [ 0, %.preheader21 ], [ %18, %.lr.ph23 ]
  %22 = add i32 %s1.0.lcssa, %s2.0.lcssa
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, 48
  %25 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 1, i64 %24) nounwind optsize
  %26 = bitcast i8* %25 to %struct.tre_pos_and_tags_t*
  %27 = icmp eq i8* %25, null
  br i1 %27, label %.loopexit, label %.preheader18

.preheader18:                                     ; preds = %._crit_edge24
  %28 = add i32 %indvars.iv47, 1
  %29 = icmp sgt i32 %indvars.iv47, 0
  br label %30

; <label>:30                                      ; preds = %89, %.preheader18
  %indvars.iv52 = phi i64 [ 0, %.preheader18 ], [ %indvars.iv.next53, %89 ]
  %s1.1 = phi i32 [ 0, %.preheader18 ], [ %90, %89 ]
  %31 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 0
  %32 = load i32* %31, align 4, !tbaa !6
  %33 = icmp sgt i32 %32, -1
  br i1 %33, label %35, label %.preheader5

.preheader5:                                      ; preds = %30
  %34 = sext i32 %s1.1 to i64
  br label %91

; <label>:35                                      ; preds = %30
  %36 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 0
  store i32 %32, i32* %36, align 4, !tbaa !6
  %37 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 1
  %38 = load i32* %37, align 4, !tbaa !6
  %39 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 1
  store i32 %38, i32* %39, align 4, !tbaa !6
  %40 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 2
  %41 = load i32* %40, align 4, !tbaa !6
  %42 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 2
  store i32 %41, i32* %42, align 4, !tbaa !6
  %43 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 4
  %44 = load i32* %43, align 4, !tbaa !6
  %45 = or i32 %44, %assertions
  %46 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 4
  store i32 %45, i32* %46, align 4, !tbaa !6
  %47 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 5
  %48 = load i32* %47, align 4, !tbaa !6
  %49 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 5
  store i32 %48, i32* %49, align 4, !tbaa !6
  %50 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 6
  %51 = load i32** %50, align 8, !tbaa !7
  %52 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 6
  store i32* %51, i32** %52, align 8, !tbaa !7
  %53 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 7
  %54 = load i32* %53, align 4, !tbaa !6
  %55 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 7
  store i32 %54, i32* %55, align 4, !tbaa !6
  %56 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set1, i64 %indvars.iv52, i32 3
  %57 = load i32** %56, align 8, !tbaa !7
  %58 = icmp eq i32* %57, null
  %or.cond = and i1 %58, %1
  br i1 %or.cond, label %59, label %.preheader8

; <label>:59                                      ; preds = %35
  %60 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 3
  store i32* null, i32** %60, align 8, !tbaa !7
  br label %89

.preheader8:                                      ; preds = %65, %35
  %indvars.iv37 = phi i64 [ %indvars.iv.next38, %65 ], [ 0, %35 ]
  %i.0 = phi i32 [ %66, %65 ], [ 0, %35 ]
  br i1 %58, label %.critedge1, label %61

; <label>:61                                      ; preds = %.preheader8
  %62 = getelementptr inbounds i32* %57, i64 %indvars.iv37
  %63 = load i32* %62, align 4, !tbaa !6
  %64 = icmp sgt i32 %63, -1
  br i1 %64, label %65, label %.critedge1

; <label>:65                                      ; preds = %61
  %indvars.iv.next38 = add i64 %indvars.iv37, 1
  %66 = add nsw i32 %i.0, 1
  br label %.preheader8

.critedge1:                                       ; preds = %61, %.preheader8
  %67 = add i32 %28, %i.0
  %68 = sext i32 %67 to i64
  %69 = shl nsw i64 %68, 2
  %70 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 0, i64 %69) nounwind optsize
  %71 = bitcast i8* %70 to i32*
  %72 = icmp eq i8* %70, null
  br i1 %72, label %.loopexit, label %.preheader9

.preheader9:                                      ; preds = %.critedge1
  %73 = icmp sgt i32 %i.0, 0
  br i1 %73, label %.lr.ph12, label %.loopexit10

.lr.ph12:                                         ; preds = %.preheader9
  %74 = load i32** %56, align 8, !tbaa !7
  br label %75

; <label>:75                                      ; preds = %75, %.lr.ph12
  %indvars.iv40 = phi i64 [ 0, %.lr.ph12 ], [ %indvars.iv.next41, %75 ]
  %76 = getelementptr inbounds i32* %74, i64 %indvars.iv40
  %77 = load i32* %76, align 4, !tbaa !6
  %78 = getelementptr inbounds i32* %71, i64 %indvars.iv40
  store i32 %77, i32* %78, align 4, !tbaa !6
  %indvars.iv.next41 = add i64 %indvars.iv40, 1
  %lftr.wideiv42 = trunc i64 %indvars.iv.next41 to i32
  %exitcond43 = icmp eq i32 %lftr.wideiv42, %i.0
  br i1 %exitcond43, label %.loopexit10, label %75

.loopexit10:                                      ; preds = %75, %.preheader9
  %j.0.lcssa = phi i32 [ 0, %.preheader9 ], [ %i.0, %75 ]
  br i1 %29, label %.lr.ph15, label %._crit_edge16

.lr.ph15:                                         ; preds = %.loopexit10
  %79 = sext i32 %j.0.lcssa to i64
  br label %80

; <label>:80                                      ; preds = %80, %.lr.ph15
  %indvars.iv45 = phi i64 [ 0, %.lr.ph15 ], [ %indvars.iv.next46, %80 ]
  %81 = getelementptr inbounds i32* %tags, i64 %indvars.iv45
  %82 = load i32* %81, align 4, !tbaa !6
  %83 = add nsw i64 %indvars.iv45, %79
  %84 = getelementptr inbounds i32* %71, i64 %83
  store i32 %82, i32* %84, align 4, !tbaa !6
  %indvars.iv.next46 = add i64 %indvars.iv45, 1
  %lftr.wideiv49 = trunc i64 %indvars.iv.next46 to i32
  %exitcond50 = icmp eq i32 %lftr.wideiv49, %indvars.iv47
  br i1 %exitcond50, label %._crit_edge16, label %80

._crit_edge16:                                    ; preds = %80, %.loopexit10
  %i.1.lcssa = phi i32 [ 0, %.loopexit10 ], [ %indvars.iv47, %80 ]
  %85 = add nsw i32 %i.1.lcssa, %j.0.lcssa
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32* %71, i64 %86
  store i32 -1, i32* %87, align 4, !tbaa !6
  %88 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %indvars.iv52, i32 3
  store i32* %71, i32** %88, align 8, !tbaa !7
  br label %89

; <label>:89                                      ; preds = %._crit_edge16, %59
  %indvars.iv.next53 = add i64 %indvars.iv52, 1
  %90 = add nsw i32 %s1.1, 1
  br label %30

; <label>:91                                      ; preds = %143, %.preheader5
  %indvars.iv35 = phi i64 [ 0, %.preheader5 ], [ %indvars.iv.next36, %143 ]
  %92 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 0
  %93 = load i32* %92, align 4, !tbaa !6
  %94 = icmp sgt i32 %93, -1
  %95 = add nsw i64 %indvars.iv35, %34
  %96 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 0
  br i1 %94, label %97, label %144

; <label>:97                                      ; preds = %91
  store i32 %93, i32* %96, align 4, !tbaa !6
  %98 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 1
  %99 = load i32* %98, align 4, !tbaa !6
  %100 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 1
  store i32 %99, i32* %100, align 4, !tbaa !6
  %101 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 2
  %102 = load i32* %101, align 4, !tbaa !6
  %103 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 2
  store i32 %102, i32* %103, align 4, !tbaa !6
  %104 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 4
  %105 = load i32* %104, align 4, !tbaa !6
  %106 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 4
  store i32 %105, i32* %106, align 4, !tbaa !6
  %107 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 5
  %108 = load i32* %107, align 4, !tbaa !6
  %109 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 5
  store i32 %108, i32* %109, align 4, !tbaa !6
  %110 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 6
  %111 = load i32** %110, align 8, !tbaa !7
  %112 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 6
  store i32* %111, i32** %112, align 8, !tbaa !7
  %113 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 7
  %114 = load i32* %113, align 4, !tbaa !6
  %115 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 7
  store i32 %114, i32* %115, align 4, !tbaa !6
  %116 = getelementptr inbounds %struct.tre_pos_and_tags_t* %set2, i64 %indvars.iv35, i32 3
  %117 = load i32** %116, align 8, !tbaa !7
  %118 = icmp eq i32* %117, null
  br i1 %118, label %119, label %.preheader

; <label>:119                                     ; preds = %97
  %120 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 3
  store i32* null, i32** %120, align 8, !tbaa !7
  br label %143

.preheader:                                       ; preds = %.preheader, %97
  %indvars.iv = phi i64 [ %indvars.iv.next, %.preheader ], [ 0, %97 ]
  %i.2 = phi i32 [ %124, %.preheader ], [ 0, %97 ]
  %121 = getelementptr inbounds i32* %117, i64 %indvars.iv
  %122 = load i32* %121, align 4, !tbaa !6
  %123 = icmp sgt i32 %122, -1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %124 = add nsw i32 %i.2, 1
  br i1 %123, label %.preheader, label %125

; <label>:125                                     ; preds = %.preheader
  %126 = sext i32 %124 to i64
  %127 = shl nsw i64 %126, 2
  %128 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 0, i64 %127) nounwind optsize
  %129 = bitcast i8* %128 to i32*
  %130 = icmp eq i8* %128, null
  br i1 %130, label %.loopexit, label %.preheader2

.preheader2:                                      ; preds = %125
  %131 = icmp sgt i32 %i.2, 0
  br i1 %131, label %.lr.ph, label %140

.lr.ph:                                           ; preds = %.preheader2
  %132 = load i32** %116, align 8, !tbaa !7
  %133 = add i32 %i.2, -1
  %134 = zext i32 %133 to i64
  br label %135

; <label>:135                                     ; preds = %135, %.lr.ph
  %indvars.iv31 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next32, %135 ]
  %136 = getelementptr inbounds i32* %132, i64 %indvars.iv31
  %137 = load i32* %136, align 4, !tbaa !6
  %138 = getelementptr inbounds i32* %129, i64 %indvars.iv31
  store i32 %137, i32* %138, align 4, !tbaa !6
  %indvars.iv.next32 = add i64 %indvars.iv31, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next32 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %i.2
  br i1 %exitcond, label %._crit_edge, label %135

._crit_edge:                                      ; preds = %135
  %139 = add i64 %134, 1
  br label %140

; <label>:140                                     ; preds = %._crit_edge, %.preheader2
  %.lcssa3 = phi i64 [ %139, %._crit_edge ], [ 0, %.preheader2 ]
  %141 = getelementptr inbounds i32* %129, i64 %.lcssa3
  store i32 -1, i32* %141, align 4, !tbaa !6
  %142 = getelementptr inbounds %struct.tre_pos_and_tags_t* %26, i64 %95, i32 3
  store i32* %129, i32** %142, align 8, !tbaa !7
  br label %143

; <label>:143                                     ; preds = %140, %119
  %indvars.iv.next36 = add i64 %indvars.iv35, 1
  br label %91

; <label>:144                                     ; preds = %91
  store i32 -1, i32* %96, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %144, %125, %.critedge1, %._crit_edge24
  %.0 = phi %struct.tre_pos_and_tags_t* [ %26, %144 ], [ null, %._crit_edge24 ], [ null, %125 ], [ null, %.critedge1 ]
  ret %struct.tre_pos_and_tags_t* %.0
}

define internal fastcc i32 @tre_match_empty(%struct.tre_stack_rec* %stack, %struct.tre_ast_node_t* %node, i32* %tags, i32* %assertions, i32* %num_tags_seen) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tre_stack_rec* %stack, i64 0, i32 3
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp ne i32* %num_tags_seen, null
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i32 0, i32* %num_tags_seen, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = bitcast %struct.tre_ast_node_t* %node to i8*
  %7 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %6) optsize
  %8 = getelementptr inbounds %struct.tre_stack_rec* %stack, i64 0, i32 4
  %9 = icmp eq i32* %tags, null
  %10 = icmp eq i32* %assertions, null
  br label %.backedge

.backedge:                                        ; preds = %106, %97, %91, %82, %79, %72, %69, %52, %51, %48, %47, %29, %23, %15, %5
  %status.0 = phi i32 [ %7, %5 ], [ 0, %15 ], [ %108, %106 ], [ 0, %97 ], [ %89, %82 ], [ %96, %91 ], [ %71, %69 ], [ %81, %79 ], [ 0, %72 ], [ 0, %23 ], [ 0, %52 ], [ 0, %51 ], [ 0, %48 ], [ 0, %47 ], [ 0, %29 ]
  %11 = icmp eq i32 %status.0, 0
  br i1 %11, label %12, label %.critedge

; <label>:12                                      ; preds = %.backedge
  %13 = load i32* %1, align 4, !tbaa !6
  %14 = icmp sgt i32 %13, %2
  br i1 %14, label %15, label %.critedge

; <label>:15                                      ; preds = %12
  %16 = add nsw i32 %13, -1
  store i32 %16, i32* %1, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  %18 = load i8*** %8, align 8, !tbaa !7
  %19 = getelementptr inbounds i8** %18, i64 %17
  %20 = load i8** %19, align 8, !tbaa !7
  %21 = bitcast i8* %20 to i32*
  %22 = load i32* %21, align 4, !tbaa !0
  switch i32 %22, label %.backedge [
    i32 0, label %23
    i32 3, label %60
    i32 1, label %82
    i32 2, label %97
  ]

; <label>:23                                      ; preds = %15
  %24 = getelementptr inbounds i8* %20, i64 8
  %25 = bitcast i8* %24 to i8**
  %26 = load i8** %25, align 8, !tbaa !7
  %27 = bitcast i8* %26 to i64*
  %28 = load i64* %27, align 8, !tbaa !5
  switch i64 %28, label %.backedge [
    i64 -3, label %29
    i64 -2, label %51
  ]

; <label>:29                                      ; preds = %23
  %30 = getelementptr inbounds i8* %26, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64* %31, align 8, !tbaa !5
  %33 = icmp sgt i64 %32, -1
  br i1 %33, label %34, label %.backedge

; <label>:34                                      ; preds = %29
  br i1 %9, label %47, label %.preheader

.preheader:                                       ; preds = %41, %34
  %indvars.iv = phi i64 [ %indvars.iv.next, %41 ], [ 0, %34 ]
  %i.0 = phi i32 [ %phitmp, %41 ], [ 1, %34 ]
  %35 = getelementptr inbounds i32* %tags, i64 %indvars.iv
  %36 = load i32* %35, align 4, !tbaa !6
  %37 = icmp sgt i32 %36, -1
  br i1 %37, label %38, label %.thread

; <label>:38                                      ; preds = %.preheader
  %39 = sext i32 %36 to i64
  %40 = icmp eq i64 %39, %32
  br i1 %40, label %42, label %41

; <label>:41                                      ; preds = %38
  %indvars.iv.next = add i64 %indvars.iv, 1
  %phitmp = add i32 %i.0, 1
  br label %.preheader

; <label>:42                                      ; preds = %38
  %43 = icmp slt i32 %36, 0
  br i1 %43, label %.thread, label %47

.thread:                                          ; preds = %42, %.preheader
  %44 = trunc i64 %32 to i32
  store i32 %44, i32* %35, align 4, !tbaa !6
  %45 = sext i32 %i.0 to i64
  %46 = getelementptr inbounds i32* %tags, i64 %45
  store i32 -1, i32* %46, align 4, !tbaa !6
  br label %47

; <label>:47                                      ; preds = %.thread, %42, %34
  br i1 %3, label %48, label %.backedge

; <label>:48                                      ; preds = %47
  %49 = load i32* %num_tags_seen, align 4, !tbaa !6
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %num_tags_seen, align 4, !tbaa !6
  br label %.backedge

; <label>:51                                      ; preds = %23
  br i1 %10, label %.backedge, label %52

; <label>:52                                      ; preds = %51
  %53 = getelementptr inbounds i8* %26, i64 8
  %54 = bitcast i8* %53 to i64*
  %55 = load i64* %54, align 8, !tbaa !5
  %56 = load i32* %assertions, align 4, !tbaa !6
  %57 = zext i32 %56 to i64
  %58 = or i64 %57, %55
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %assertions, align 4, !tbaa !6
  br label %.backedge

; <label>:60                                      ; preds = %15
  %61 = getelementptr inbounds i8* %20, i64 8
  %62 = bitcast i8* %61 to i8**
  %63 = load i8** %62, align 8, !tbaa !7
  %64 = bitcast i8* %63 to %struct.tre_ast_node_t**
  %65 = load %struct.tre_ast_node_t** %64, align 8, !tbaa !7
  %66 = getelementptr inbounds %struct.tre_ast_node_t* %65, i64 0, i32 2
  %67 = load i32* %66, align 4, !tbaa !6
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %72, label %69

; <label>:69                                      ; preds = %60
  %70 = bitcast %struct.tre_ast_node_t* %65 to i8*
  %71 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %70) optsize
  br label %.backedge

; <label>:72                                      ; preds = %60
  %73 = getelementptr inbounds i8* %63, i64 8
  %74 = bitcast i8* %73 to %struct.tre_ast_node_t**
  %75 = load %struct.tre_ast_node_t** %74, align 8, !tbaa !7
  %76 = getelementptr inbounds %struct.tre_ast_node_t* %75, i64 0, i32 2
  %77 = load i32* %76, align 4, !tbaa !6
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %.backedge, label %79

; <label>:79                                      ; preds = %72
  %80 = bitcast %struct.tre_ast_node_t* %75 to i8*
  %81 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %80) optsize
  br label %.backedge

; <label>:82                                      ; preds = %15
  %83 = getelementptr inbounds i8* %20, i64 8
  %84 = bitcast i8* %83 to i8**
  %85 = load i8** %84, align 8, !tbaa !7
  %86 = bitcast i8* %85 to %struct.tre_ast_node_t**
  %87 = load %struct.tre_ast_node_t** %86, align 8, !tbaa !7
  %88 = bitcast %struct.tre_ast_node_t* %87 to i8*
  %89 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %88) optsize
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %.backedge

; <label>:91                                      ; preds = %82
  %92 = getelementptr inbounds i8* %85, i64 8
  %93 = bitcast i8* %92 to %struct.tre_ast_node_t**
  %94 = load %struct.tre_ast_node_t** %93, align 8, !tbaa !7
  %95 = bitcast %struct.tre_ast_node_t* %94 to i8*
  %96 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %95) optsize
  br label %.backedge

; <label>:97                                      ; preds = %15
  %98 = getelementptr inbounds i8* %20, i64 8
  %99 = bitcast i8* %98 to i8**
  %100 = load i8** %99, align 8, !tbaa !7
  %101 = bitcast i8* %100 to %struct.tre_ast_node_t**
  %102 = load %struct.tre_ast_node_t** %101, align 8, !tbaa !7
  %103 = getelementptr inbounds %struct.tre_ast_node_t* %102, i64 0, i32 2
  %104 = load i32* %103, align 4, !tbaa !6
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %.backedge, label %106

; <label>:106                                     ; preds = %97
  %107 = bitcast %struct.tre_ast_node_t* %102 to i8*
  %108 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %107) optsize
  br label %.backedge

.critedge:                                        ; preds = %12, %.backedge
  ret i32 %status.0
}

define internal fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 %type, i64 %size) nounwind uwtable optsize {
  %1 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 1, i64 48) nounwind optsize
  %2 = bitcast i8* %1 to %struct.tre_ast_node_t*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %15, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 1, i64 %size) nounwind optsize
  %6 = getelementptr inbounds i8* %1, i64 8
  %7 = bitcast i8* %6 to i8**
  store i8* %5, i8** %7, align 8, !tbaa !7
  %8 = icmp eq i8* %5, null
  br i1 %8, label %15, label %9

; <label>:9                                       ; preds = %4
  %10 = bitcast i8* %1 to i32*
  store i32 %type, i32* %10, align 4, !tbaa !0
  %11 = getelementptr inbounds i8* %1, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 -1, i32* %12, align 4, !tbaa !6
  %13 = getelementptr inbounds i8* %1, i64 20
  %14 = bitcast i8* %13 to i32*
  store i32 -1, i32* %14, align 4, !tbaa !6
  br label %15

; <label>:15                                      ; preds = %9, %4, %0
  %.0 = phi %struct.tre_ast_node_t* [ %2, %9 ], [ null, %0 ], [ null, %4 ]
  ret %struct.tre_ast_node_t* %.0
}

define internal fastcc i32 @tre_copy_ast(%struct.tre_mem_struct* %mem, %struct.tre_stack_rec* %stack, %struct.tre_ast_node_t* %ast, i32 %flags, i32* nocapture %pos_add, i32* nocapture %tag_directions, %struct.tre_ast_node_t** nocapture %copy, i32* nocapture %max_pos) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tre_stack_rec* %stack, i64 0, i32 3
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = bitcast %struct.tre_ast_node_t* %ast to i8*
  %4 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %3) optsize
  %5 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %6 = getelementptr inbounds %struct.tre_stack_rec* %stack, i64 0, i32 4
  %7 = and i32 %flags, 1
  %8 = icmp eq i32 %7, 0
  %9 = and i32 %flags, 2
  %10 = icmp eq i32 %9, 0
  br label %.backedge

.backedge:                                        ; preds = %176, %tre_ast_new_iter.exit.thread, %163, %154, %152, %147, %144, %141, %138, %128, %117, %115, %110, %107, %103, %100, %92, %81, %80, %tre_ast_new_literal.exit, %29, %23, %15, %0
  %status.0 = phi i32 [ %5, %0 ], [ 0, %15 ], [ 0, %29 ], [ %161, %154 ], [ %164, %163 ], [ %164, %176 ], [ %136, %128 ], [ %139, %138 ], [ %142, %141 ], [ %145, %144 ], [ %150, %147 ], [ %153, %152 ], [ %98, %92 ], [ %101, %100 ], [ %105, %103 ], [ %108, %107 ], [ %113, %110 ], [ %116, %115 ], [ %status.1, %80 ], [ %status.1, %tre_ast_new_literal.exit ], [ 0, %23 ], [ 12, %81 ], [ 12, %117 ], [ 12, %tre_ast_new_iter.exit.thread ]
  %num_copied.0 = phi i32 [ 0, %0 ], [ %num_copied.0, %15 ], [ %num_copied.0, %29 ], [ %num_copied.0, %154 ], [ %num_copied.0, %163 ], [ %num_copied.0, %176 ], [ %num_copied.0, %128 ], [ %num_copied.0, %138 ], [ %num_copied.0, %141 ], [ %num_copied.0, %144 ], [ %num_copied.0, %147 ], [ %num_copied.0, %152 ], [ %num_copied.0, %92 ], [ %num_copied.0, %100 ], [ %num_copied.0, %103 ], [ %num_copied.0, %107 ], [ %num_copied.0, %110 ], [ %num_copied.0, %115 ], [ %num_copied.1, %80 ], [ %num_copied.1, %tre_ast_new_literal.exit ], [ %num_copied.0, %23 ], [ %num_copied.0, %81 ], [ %num_copied.0, %117 ], [ %num_copied.0, %tre_ast_new_iter.exit.thread ]
  %first_tag.0 = phi i32 [ 1, %0 ], [ %first_tag.0, %15 ], [ %first_tag.0, %29 ], [ %first_tag.0, %154 ], [ %first_tag.0, %163 ], [ %first_tag.0, %176 ], [ %first_tag.0, %128 ], [ %first_tag.0, %138 ], [ %first_tag.0, %141 ], [ %first_tag.0, %144 ], [ %first_tag.0, %147 ], [ %first_tag.0, %152 ], [ %first_tag.0, %92 ], [ %first_tag.0, %100 ], [ %first_tag.0, %103 ], [ %first_tag.0, %107 ], [ %first_tag.0, %110 ], [ %first_tag.0, %115 ], [ %first_tag.1, %80 ], [ %first_tag.1, %tre_ast_new_literal.exit ], [ %first_tag.0, %23 ], [ %first_tag.0, %81 ], [ %first_tag.0, %117 ], [ %first_tag.0, %tre_ast_new_iter.exit.thread ]
  %result.0 = phi %struct.tre_ast_node_t** [ %copy, %0 ], [ %result.0, %15 ], [ %result.0, %29 ], [ %result.0, %154 ], [ %result.0, %163 ], [ %188, %176 ], [ %131, %128 ], [ %131, %138 ], [ %131, %141 ], [ %131, %144 ], [ %131, %147 ], [ %131, %152 ], [ %95, %92 ], [ %95, %100 ], [ %95, %103 ], [ %95, %107 ], [ %95, %110 ], [ %95, %115 ], [ %result.0, %80 ], [ %result.0, %tre_ast_new_literal.exit ], [ %28, %23 ], [ %result.0, %81 ], [ %result.0, %117 ], [ %result.0, %tre_ast_new_iter.exit.thread ]
  %11 = icmp eq i32 %status.0, 0
  br i1 %11, label %12, label %.critedge

; <label>:12                                      ; preds = %.backedge
  %13 = load i32* %1, align 4, !tbaa !6
  %14 = icmp sgt i32 %13, %2
  br i1 %14, label %15, label %.critedge

; <label>:15                                      ; preds = %12
  %16 = add nsw i32 %13, -1
  store i32 %16, i32* %1, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  %18 = load i8*** %6, align 8, !tbaa !7
  %19 = getelementptr inbounds i8** %18, i64 %17
  %20 = load i8** %19, align 8, !tbaa !7
  %21 = ptrtoint i8* %20 to i64
  %22 = trunc i64 %21 to i32
  switch i32 %22, label %.backedge [
    i32 1, label %23
    i32 0, label %29
  ]

; <label>:23                                      ; preds = %15
  %24 = add nsw i32 %13, -2
  store i32 %24, i32* %1, align 4, !tbaa !6
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8** %18, i64 %25
  %27 = load i8** %26, align 8, !tbaa !7
  %28 = bitcast i8* %27 to %struct.tre_ast_node_t**
  br label %.backedge

; <label>:29                                      ; preds = %15
  %30 = add nsw i32 %13, -2
  store i32 %30, i32* %1, align 4, !tbaa !6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8** %18, i64 %31
  %33 = load i8** %32, align 8, !tbaa !7
  %34 = bitcast i8* %33 to i32*
  %35 = load i32* %34, align 4, !tbaa !0
  switch i32 %35, label %.backedge [
    i32 0, label %36
    i32 3, label %81
    i32 1, label %117
    i32 2, label %154
  ]

; <label>:36                                      ; preds = %29
  %37 = getelementptr inbounds i8* %33, i64 8
  %38 = bitcast i8* %37 to i8**
  %39 = load i8** %38, align 8, !tbaa !7
  %40 = getelementptr inbounds i8* %39, i64 16
  %41 = bitcast i8* %40 to i32*
  %42 = load i32* %41, align 4, !tbaa !6
  %43 = bitcast i8* %39 to i64*
  %44 = load i64* %43, align 8, !tbaa !5
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i8* %39, i64 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64* %47, align 8, !tbaa !5
  %49 = trunc i64 %48 to i32
  %50 = icmp sgt i64 %44, -1
  %51 = icmp eq i64 %44, -4
  %or.cond3 = or i1 %50, %51
  br i1 %or.cond3, label %52, label %56

; <label>:52                                      ; preds = %36
  %53 = load i32* %pos_add, align 4, !tbaa !6
  %54 = add nsw i32 %53, %42
  %55 = add nsw i32 %num_copied.0, 1
  br label %64

; <label>:56                                      ; preds = %36
  %57 = icmp eq i64 %44, -3
  br i1 %57, label %58, label %64

; <label>:58                                      ; preds = %56
  br i1 %8, label %59, label %64

; <label>:59                                      ; preds = %58
  %60 = icmp eq i32 %first_tag.0, 0
  %or.cond4 = or i1 %10, %60
  br i1 %or.cond4, label %64, label %61

; <label>:61                                      ; preds = %59
  %62 = sext i32 %49 to i64
  %63 = getelementptr inbounds i32* %tag_directions, i64 %62
  store i32 1, i32* %63, align 4, !tbaa !0
  br label %64

; <label>:64                                      ; preds = %61, %59, %58, %56, %52
  %num_copied.1 = phi i32 [ %55, %52 ], [ %num_copied.0, %61 ], [ %num_copied.0, %59 ], [ %num_copied.0, %58 ], [ %num_copied.0, %56 ]
  %first_tag.1 = phi i32 [ %first_tag.0, %52 ], [ 0, %61 ], [ %first_tag.0, %59 ], [ %first_tag.0, %58 ], [ %first_tag.0, %56 ]
  %pos.0 = phi i32 [ %54, %52 ], [ %42, %61 ], [ %42, %59 ], [ -1, %58 ], [ %42, %56 ]
  %min.0 = phi i32 [ %45, %52 ], [ %45, %61 ], [ %45, %59 ], [ -1, %58 ], [ %45, %56 ]
  %max.0 = phi i32 [ %49, %52 ], [ %49, %61 ], [ %49, %59 ], [ -1, %58 ], [ %49, %56 ]
  %65 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 0, i64 32) nounwind optsize
  %66 = icmp eq %struct.tre_ast_node_t* %65, null
  br i1 %66, label %tre_ast_new_literal.exit, label %67

; <label>:67                                      ; preds = %64
  %68 = getelementptr inbounds %struct.tre_ast_node_t* %65, i64 0, i32 1
  %69 = load i8** %68, align 8, !tbaa !7
  %70 = sext i32 %min.0 to i64
  %71 = bitcast i8* %69 to i64*
  store i64 %70, i64* %71, align 8, !tbaa !5
  %72 = sext i32 %max.0 to i64
  %73 = getelementptr inbounds i8* %69, i64 8
  %74 = bitcast i8* %73 to i64*
  store i64 %72, i64* %74, align 8, !tbaa !5
  %75 = getelementptr inbounds i8* %69, i64 16
  %76 = bitcast i8* %75 to i32*
  store i32 %pos.0, i32* %76, align 4, !tbaa !6
  br label %tre_ast_new_literal.exit

tre_ast_new_literal.exit:                         ; preds = %67, %64
  %.0.i5 = phi %struct.tre_ast_node_t* [ %65, %67 ], [ null, %64 ]
  store %struct.tre_ast_node_t* %.0.i5, %struct.tre_ast_node_t** %result.0, align 8, !tbaa !7
  %77 = icmp eq %struct.tre_ast_node_t* %.0.i5, null
  %status.1 = select i1 %77, i32 12, i32 0
  %78 = load i32* %max_pos, align 4, !tbaa !6
  %79 = icmp sgt i32 %pos.0, %78
  br i1 %79, label %80, label %.backedge

; <label>:80                                      ; preds = %tre_ast_new_literal.exit
  store i32 %pos.0, i32* %max_pos, align 4, !tbaa !6
  br label %.backedge

; <label>:81                                      ; preds = %29
  %82 = getelementptr inbounds i8* %33, i64 8
  %83 = bitcast i8* %82 to i8**
  %84 = load i8** %83, align 8, !tbaa !7
  %85 = bitcast i8* %84 to %struct.tre_ast_node_t**
  %86 = load %struct.tre_ast_node_t** %85, align 8, !tbaa !7
  %87 = getelementptr inbounds i8* %84, i64 8
  %88 = bitcast i8* %87 to %struct.tre_ast_node_t**
  %89 = load %struct.tre_ast_node_t** %88, align 8, !tbaa !7
  %90 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %86, %struct.tre_ast_node_t* %89) optsize
  store %struct.tre_ast_node_t* %90, %struct.tre_ast_node_t** %result.0, align 8, !tbaa !7
  %91 = icmp eq %struct.tre_ast_node_t* %90, null
  br i1 %91, label %.backedge, label %92

; <label>:92                                      ; preds = %81
  %93 = getelementptr inbounds %struct.tre_ast_node_t* %90, i64 0, i32 1
  %94 = load i8** %93, align 8, !tbaa !7
  %95 = bitcast i8* %94 to %struct.tre_ast_node_t**
  %96 = load %struct.tre_ast_node_t** %88, align 8, !tbaa !7
  %97 = bitcast %struct.tre_ast_node_t* %96 to i8*
  %98 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %97) optsize
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %.backedge

; <label>:100                                     ; preds = %92
  %101 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %.backedge

; <label>:103                                     ; preds = %100
  %104 = getelementptr inbounds i8* %94, i64 8
  %105 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %104) optsize
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %.backedge

; <label>:107                                     ; preds = %103
  %108 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 1 to i8*)) optsize
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %.backedge

; <label>:110                                     ; preds = %107
  %111 = load %struct.tre_ast_node_t** %85, align 8, !tbaa !7
  %112 = bitcast %struct.tre_ast_node_t* %111 to i8*
  %113 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %112) optsize
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %.backedge

; <label>:115                                     ; preds = %110
  %116 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  br label %.backedge

; <label>:117                                     ; preds = %29
  %118 = getelementptr inbounds i8* %33, i64 8
  %119 = bitcast i8* %118 to i8**
  %120 = load i8** %119, align 8, !tbaa !7
  %121 = bitcast i8* %120 to %struct.tre_ast_node_t**
  %122 = load %struct.tre_ast_node_t** %121, align 8, !tbaa !7
  %123 = getelementptr inbounds i8* %120, i64 8
  %124 = bitcast i8* %123 to %struct.tre_ast_node_t**
  %125 = load %struct.tre_ast_node_t** %124, align 8, !tbaa !7
  %126 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_catenation(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %122, %struct.tre_ast_node_t* %125) optsize
  store %struct.tre_ast_node_t* %126, %struct.tre_ast_node_t** %result.0, align 8, !tbaa !7
  %127 = icmp eq %struct.tre_ast_node_t* %126, null
  br i1 %127, label %.backedge, label %128

; <label>:128                                     ; preds = %117
  %129 = getelementptr inbounds %struct.tre_ast_node_t* %126, i64 0, i32 1
  %130 = load i8** %129, align 8, !tbaa !7
  %131 = bitcast i8* %130 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* null, %struct.tre_ast_node_t** %131, align 8, !tbaa !7
  %132 = getelementptr inbounds i8* %130, i64 8
  %133 = bitcast i8* %132 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* null, %struct.tre_ast_node_t** %133, align 8, !tbaa !7
  %134 = load %struct.tre_ast_node_t** %124, align 8, !tbaa !7
  %135 = bitcast %struct.tre_ast_node_t* %134 to i8*
  %136 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %135) optsize
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %.backedge

; <label>:138                                     ; preds = %128
  %139 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %.backedge

; <label>:141                                     ; preds = %138
  %142 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %132) optsize
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %.backedge

; <label>:144                                     ; preds = %141
  %145 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* inttoptr (i64 1 to i8*)) optsize
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %.backedge

; <label>:147                                     ; preds = %144
  %148 = load %struct.tre_ast_node_t** %121, align 8, !tbaa !7
  %149 = bitcast %struct.tre_ast_node_t* %148 to i8*
  %150 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %149) optsize
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %.backedge

; <label>:152                                     ; preds = %147
  %153 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  br label %.backedge

; <label>:154                                     ; preds = %29
  %155 = getelementptr inbounds i8* %33, i64 8
  %156 = bitcast i8* %155 to i8**
  %157 = load i8** %156, align 8, !tbaa !7
  %158 = bitcast i8* %157 to %struct.tre_ast_node_t**
  %159 = load %struct.tre_ast_node_t** %158, align 8, !tbaa !7
  %160 = bitcast %struct.tre_ast_node_t* %159 to i8*
  %161 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* %160) optsize
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %.backedge

; <label>:163                                     ; preds = %154
  %164 = tail call fastcc i32 @tre_stack_push(%struct.tre_stack_rec* %stack, i8* null) optsize
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %.backedge

; <label>:166                                     ; preds = %163
  %167 = load %struct.tre_ast_node_t** %158, align 8, !tbaa !7
  %168 = getelementptr inbounds i8* %157, i64 8
  %169 = bitcast i8* %168 to i32*
  %170 = load i32* %169, align 4, !tbaa !6
  %171 = getelementptr inbounds i8* %157, i64 12
  %172 = bitcast i8* %171 to i32*
  %173 = load i32* %172, align 4, !tbaa !6
  %174 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 2, i64 16) nounwind optsize
  %175 = icmp eq %struct.tre_ast_node_t* %174, null
  br i1 %175, label %tre_ast_new_iter.exit.thread, label %176

tre_ast_new_iter.exit.thread:                     ; preds = %166
  store %struct.tre_ast_node_t* null, %struct.tre_ast_node_t** %result.0, align 8, !tbaa !7
  br label %.backedge

; <label>:176                                     ; preds = %166
  %177 = getelementptr inbounds %struct.tre_ast_node_t* %174, i64 0, i32 1
  %178 = load i8** %177, align 8, !tbaa !7
  %179 = bitcast i8* %178 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %167, %struct.tre_ast_node_t** %179, align 8, !tbaa !7
  %180 = getelementptr inbounds i8* %178, i64 8
  %181 = bitcast i8* %180 to i32*
  store i32 %170, i32* %181, align 4, !tbaa !6
  %182 = getelementptr inbounds i8* %178, i64 12
  %183 = bitcast i8* %182 to i32*
  store i32 %173, i32* %183, align 4, !tbaa !6
  %184 = getelementptr inbounds %struct.tre_ast_node_t* %167, i64 0, i32 4
  %185 = load i32* %184, align 4, !tbaa !6
  %186 = getelementptr inbounds %struct.tre_ast_node_t* %174, i64 0, i32 4
  store i32 %185, i32* %186, align 4, !tbaa !6
  store %struct.tre_ast_node_t* %174, %struct.tre_ast_node_t** %result.0, align 8, !tbaa !7
  %187 = load i8** %177, align 8, !tbaa !7
  %188 = bitcast i8* %187 to %struct.tre_ast_node_t**
  br label %.backedge

.critedge:                                        ; preds = %12, %.backedge
  %189 = load i32* %pos_add, align 4, !tbaa !6
  %190 = add nsw i32 %189, %num_copied.0
  store i32 %190, i32* %pos_add, align 4, !tbaa !6
  ret i32 %status.0
}

define internal fastcc %struct.tre_ast_node_t* @tre_ast_new_union(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* %left, %struct.tre_ast_node_t* %right) nounwind uwtable optsize {
  %1 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 3, i64 16) optsize
  %2 = icmp eq %struct.tre_ast_node_t* %1, null
  br i1 %2, label %16, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.tre_ast_node_t* %1, i64 0, i32 1
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = bitcast i8* %5 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %left, %struct.tre_ast_node_t** %6, align 8, !tbaa !7
  %7 = load i8** %4, align 8, !tbaa !7
  %8 = getelementptr inbounds i8* %7, i64 8
  %9 = bitcast i8* %8 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %right, %struct.tre_ast_node_t** %9, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.tre_ast_node_t* %left, i64 0, i32 4
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = getelementptr inbounds %struct.tre_ast_node_t* %right, i64 0, i32 4
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = add nsw i32 %13, %11
  %15 = getelementptr inbounds %struct.tre_ast_node_t* %1, i64 0, i32 4
  store i32 %14, i32* %15, align 4, !tbaa !6
  br label %16

; <label>:16                                      ; preds = %3, %0
  %.0 = phi %struct.tre_ast_node_t* [ %1, %3 ], [ null, %0 ]
  ret %struct.tre_ast_node_t* %.0
}

define internal fastcc i32 @tre_add_tag(%struct.tre_mem_struct* %mem, %struct.tre_ast_node_t* nocapture %node, i32 %tag_id, i32 %right) nounwind uwtable optsize {
  %1 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 0, i64 16) nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %tre_ast_new_literal.exit.thread, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 0, i64 32) nounwind optsize
  %5 = icmp eq %struct.tre_ast_node_t* %4, null
  br i1 %5, label %tre_ast_new_literal.exit.thread, label %6

; <label>:6                                       ; preds = %3
  %7 = getelementptr inbounds %struct.tre_ast_node_t* %4, i64 0, i32 1
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = bitcast i8* %8 to i64*
  store i64 -3, i64* %9, align 8, !tbaa !5
  %10 = sext i32 %tag_id to i64
  %11 = getelementptr inbounds i8* %8, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 %10, i64* %12, align 8, !tbaa !5
  %13 = getelementptr inbounds i8* %8, i64 16
  %14 = bitcast i8* %13 to i32*
  store i32 -1, i32* %14, align 4, !tbaa !6
  %15 = tail call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %mem, i32 0, i8* null, i32 0, i64 48) nounwind optsize
  %16 = bitcast i8* %15 to %struct.tre_ast_node_t*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %tre_ast_new_literal.exit.thread, label %18

; <label>:18                                      ; preds = %6
  %19 = getelementptr inbounds %struct.tre_ast_node_t* %node, i64 0, i32 1
  %20 = load i8** %19, align 8, !tbaa !7
  %21 = getelementptr inbounds i8* %15, i64 8
  %22 = bitcast i8* %21 to i8**
  store i8* %20, i8** %22, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.tre_ast_node_t* %node, i64 0, i32 0
  %24 = load i32* %23, align 4, !tbaa !0
  %25 = bitcast i8* %15 to i32*
  store i32 %24, i32* %25, align 4, !tbaa !0
  %26 = getelementptr inbounds i8* %15, i64 16
  %27 = bitcast i8* %26 to i32*
  store i32 -1, i32* %27, align 4, !tbaa !6
  %28 = getelementptr inbounds i8* %15, i64 20
  %29 = bitcast i8* %28 to i32*
  store i32 -1, i32* %29, align 4, !tbaa !6
  %30 = getelementptr inbounds i8* %15, i64 32
  %31 = bitcast i8* %30 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* null, %struct.tre_pos_and_tags_t** %31, align 8, !tbaa !7
  %32 = getelementptr inbounds i8* %15, i64 40
  %33 = bitcast i8* %32 to %struct.tre_pos_and_tags_t**
  store %struct.tre_pos_and_tags_t* null, %struct.tre_pos_and_tags_t** %33, align 8, !tbaa !7
  %34 = getelementptr inbounds i8* %15, i64 28
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 4, !tbaa !6
  store i8* %1, i8** %19, align 8, !tbaa !7
  store i32 1, i32* %23, align 4, !tbaa !0
  %36 = bitcast i8* %1 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %16, %struct.tre_ast_node_t** %36, align 8, !tbaa !7
  %37 = getelementptr inbounds i8* %1, i64 8
  %38 = bitcast i8* %37 to %struct.tre_ast_node_t**
  store %struct.tre_ast_node_t* %16, %struct.tre_ast_node_t** %38, align 8, !tbaa !7
  %39 = icmp eq i32 %right, 0
  br i1 %39, label %41, label %40

; <label>:40                                      ; preds = %18
  store %struct.tre_ast_node_t* %4, %struct.tre_ast_node_t** %38, align 8, !tbaa !7
  br label %tre_ast_new_literal.exit.thread

; <label>:41                                      ; preds = %18
  store %struct.tre_ast_node_t* %4, %struct.tre_ast_node_t** %36, align 8, !tbaa !7
  br label %tre_ast_new_literal.exit.thread

tre_ast_new_literal.exit.thread:                  ; preds = %41, %40, %6, %3, %0
  %.0 = phi i32 [ 12, %0 ], [ 12, %6 ], [ 0, %41 ], [ 0, %40 ], [ 12, %3 ]
  ret i32 %.0
}

define internal i32 @tre_compare_items(i8* nocapture %a, i8* nocapture %b) nounwind uwtable readonly optsize {
  %1 = bitcast i8* %a to %struct.tre_ast_node_t**
  %2 = load %struct.tre_ast_node_t** %1, align 8, !tbaa !7
  %3 = bitcast i8* %b to %struct.tre_ast_node_t**
  %4 = load %struct.tre_ast_node_t** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.tre_ast_node_t* %2, i64 0, i32 1
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.tre_ast_node_t* %4, i64 0, i32 1
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = bitcast i8* %6 to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %11 = trunc i64 %10 to i32
  %12 = bitcast i8* %8 to i64*
  %13 = load i64* %12, align 8, !tbaa !5
  %14 = trunc i64 %13 to i32
  %15 = icmp slt i32 %11, %14
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %0
  %17 = icmp sgt i32 %11, %14
  %. = zext i1 %17 to i32
  br label %18

; <label>:18                                      ; preds = %16, %0
  %.0 = phi i32 [ -1, %0 ], [ %., %16 ]
  ret i32 %.0
}

define internal fastcc i32 @tre_new_item(%struct.tre_mem_struct* %mem, i32 %min, i32 %max, i32* nocapture %i, i32* nocapture %max_i, %struct.tre_ast_node_t*** nocapture %items) nounwind uwtable optsize {
  %1 = load %struct.tre_ast_node_t*** %items, align 8, !tbaa !7
  %2 = load i32* %i, align 4, !tbaa !6
  %3 = load i32* %max_i, align 4, !tbaa !6
  %4 = icmp slt i32 %2, %3
  br i1 %4, label %16, label %5

; <label>:5                                       ; preds = %0
  %6 = icmp sgt i32 %3, 1024
  br i1 %6, label %35, label %7

; <label>:7                                       ; preds = %5
  %8 = shl nsw i32 %3, 1
  store i32 %8, i32* %max_i, align 4, !tbaa !6
  %9 = bitcast %struct.tre_ast_node_t** %1 to i8*
  %10 = sext i32 %8 to i64
  %11 = shl nsw i64 %10, 3
  %12 = tail call i8* @realloc(i8* %9, i64 %11) nounwind optsize
  %13 = bitcast i8* %12 to %struct.tre_ast_node_t**
  %14 = icmp eq i8* %12, null
  br i1 %14, label %35, label %15

; <label>:15                                      ; preds = %7
  store %struct.tre_ast_node_t** %13, %struct.tre_ast_node_t*** %items, align 8, !tbaa !7
  br label %16

; <label>:16                                      ; preds = %15, %0
  %array.0 = phi %struct.tre_ast_node_t** [ %13, %15 ], [ %1, %0 ]
  %17 = tail call fastcc %struct.tre_ast_node_t* @tre_ast_new_node(%struct.tre_mem_struct* %mem, i32 0, i64 32) nounwind optsize
  %18 = icmp eq %struct.tre_ast_node_t* %17, null
  br i1 %18, label %tre_ast_new_literal.exit, label %19

; <label>:19                                      ; preds = %16
  %20 = getelementptr inbounds %struct.tre_ast_node_t* %17, i64 0, i32 1
  %21 = load i8** %20, align 8, !tbaa !7
  %22 = sext i32 %min to i64
  %23 = bitcast i8* %21 to i64*
  store i64 %22, i64* %23, align 8, !tbaa !5
  %24 = sext i32 %max to i64
  %25 = getelementptr inbounds i8* %21, i64 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8, !tbaa !5
  %27 = getelementptr inbounds i8* %21, i64 16
  %28 = bitcast i8* %27 to i32*
  store i32 -1, i32* %28, align 4, !tbaa !6
  br label %tre_ast_new_literal.exit

tre_ast_new_literal.exit:                         ; preds = %19, %16
  %.0.i = phi %struct.tre_ast_node_t* [ %17, %19 ], [ null, %16 ]
  %29 = load i32* %i, align 4, !tbaa !6
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.tre_ast_node_t** %array.0, i64 %30
  store %struct.tre_ast_node_t* %.0.i, %struct.tre_ast_node_t** %31, align 8, !tbaa !7
  %32 = icmp eq %struct.tre_ast_node_t* %.0.i, null
  %33 = select i1 %32, i32 12, i32 0
  %34 = add nsw i32 %29, 1
  store i32 %34, i32* %i, align 4, !tbaa !6
  br label %35

; <label>:35                                      ; preds = %tre_ast_new_literal.exit, %7, %5
  %.0 = phi i32 [ %33, %tre_ast_new_literal.exit ], [ 12, %5 ], [ 12, %7 ]
  ret i32 %.0
}

define i64 @regerror(i32 %errcode, %struct.regex_t.522* nocapture %preg, i8* %errbuf, i64 %errbuf_size) nounwind uwtable optsize {
  %1 = icmp ult i32 %errcode, 14
  br i1 %1, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %0
  %2 = icmp eq i32 %errcode, 0
  br i1 %2, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.03 = phi i32 [ %3, %.lr.ph ], [ %errcode, %.preheader ]
  %err.02 = phi i8* [ %6, %.lr.ph ], [ getelementptr inbounds (<{ [232 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }>* @tre_error_messages, i64 0, i32 0, i64 0), %.preheader ]
  %3 = add nsw i32 %.03, -1
  %4 = tail call i64 @strlen(i8* %err.02) nounwind optsize
  %5 = add i64 %4, 1
  %6 = getelementptr inbounds i8* %err.02, i64 %5
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %.loopexit, label %.lr.ph

.loopexit:                                        ; preds = %.lr.ph, %.preheader, %0
  %err.1 = phi i8* [ getelementptr inbounds ([14 x i8]* @.str601, i64 0, i64 0), %0 ], [ getelementptr inbounds (<{ [232 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }>* @tre_error_messages, i64 0, i32 0, i64 0), %.preheader ], [ %6, %.lr.ph ]
  %8 = tail call i64 @strlen(i8* %err.1) nounwind optsize
  %9 = add i64 %8, 1
  %10 = icmp eq i64 %errbuf_size, 0
  %11 = icmp eq i8* %errbuf, null
  %or.cond = or i1 %10, %11
  br i1 %or.cond, label %20, label %12

; <label>:12                                      ; preds = %.loopexit
  %13 = icmp ugt i64 %9, %errbuf_size
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %12
  %15 = add i64 %errbuf_size, -1
  %16 = tail call i8* @memcpy(i8* %errbuf, i8* %err.1, i64 %15) nounwind optsize
  %17 = getelementptr inbounds i8* %errbuf, i64 %15
  store i8 0, i8* %17, align 1, !tbaa !0
  br label %20

; <label>:18                                      ; preds = %12
  %19 = tail call i8* @strcpy(i8* %errbuf, i8* %err.1) nounwind optsize
  br label %20

; <label>:20                                      ; preds = %18, %14, %.loopexit
  ret i64 %9
}

define i32 @regexec(%struct.regex_t.523* nocapture %preg, i8* %str, i64 %nmatch, %struct.regmatch_t* nocapture %pmatch, i32 %eflags) nounwind uwtable optsize {
  %next_c.i1.i = alloca i32, align 4
  %next_c.i.i = alloca i32, align 4
  %1 = getelementptr inbounds %struct.regex_t.523* %preg, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = bitcast i8* %2 to %struct.tnfa.524*
  %4 = getelementptr inbounds i8* %2, i64 56
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = icmp slt i32 %6, 1
  %8 = icmp eq i64 %nmatch, 0
  %or.cond.i = or i1 %7, %8
  br i1 %or.cond.i, label %15, label %9

; <label>:9                                       ; preds = %0
  %10 = sext i32 %6 to i64
  %11 = shl nsw i64 %10, 2
  %12 = call i8* @malloc(i64 %11) nounwind optsize
  %13 = bitcast i8* %12 to i32*
  %14 = icmp eq i8* %12, null
  br i1 %14, label %tre_match.exit, label %15

; <label>:15                                      ; preds = %9, %0
  %tags.0.i = phi i32* [ %13, %9 ], [ null, %0 ]
  %16 = getelementptr inbounds i8* %2, i64 72
  %17 = bitcast i8* %16 to i32*
  %18 = load i32* %17, align 4, !tbaa !6
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %459, label %20

; <label>:20                                      ; preds = %15
  %21 = bitcast i32* %next_c.i.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %21) nounwind
  store i32 0, i32* %next_c.i.i, align 4, !tbaa !6
  %22 = and i32 %eflags, 1
  %23 = and i32 %eflags, 2
  %24 = getelementptr inbounds i8* %2, i64 68
  %25 = bitcast i8* %24 to i32*
  %26 = load i32* %25, align 4, !tbaa !6
  %27 = and i32 %26, 4
  %28 = call %struct.tre_mem_struct* @__tre_mem_new_impl(i32 0, i8* null) nounwind optsize
  %29 = icmp eq %struct.tre_mem_struct* %28, null
  br i1 %29, label %tre_tnfa_run_backtrack.exit.thread.i, label %30

; <label>:30                                      ; preds = %20
  %31 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %28, i32 0, i8* null, i32 0, i64 56) nounwind optsize
  %32 = bitcast i8* %31 to %struct.tre_backtrack_struct*
  %33 = icmp eq i8* %31, null
  br i1 %33, label %.thread15.i.i, label %34

.thread15.i.i:                                    ; preds = %30
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:34                                      ; preds = %30
  %35 = getelementptr inbounds i8* %31, i64 40
  %36 = bitcast i8* %35 to %struct.tre_backtrack_struct**
  store %struct.tre_backtrack_struct* null, %struct.tre_backtrack_struct** %36, align 8, !tbaa !7
  %37 = getelementptr inbounds i8* %31, i64 48
  %38 = bitcast i8* %37 to %struct.tre_backtrack_struct**
  store %struct.tre_backtrack_struct* null, %struct.tre_backtrack_struct** %38, align 8, !tbaa !7
  %39 = load i32* %5, align 4, !tbaa !6
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 2
  %42 = call i8* @malloc(i64 %41) nounwind optsize
  %43 = bitcast i8* %42 to i32*
  %44 = icmp eq i8* %42, null
  br i1 %44, label %.thread141.i.i, label %45

.thread141.i.i:                                   ; preds = %34
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:45                                      ; preds = %34
  %46 = getelementptr inbounds i8* %2, i64 40
  %47 = bitcast i8* %46 to i32*
  %48 = load i32* %47, align 4, !tbaa !6
  %49 = zext i32 %48 to i64
  %50 = shl nuw nsw i64 %49, 4
  %51 = call i8* @malloc(i64 %50) nounwind optsize
  %52 = bitcast i8* %51 to %struct.regmatch_t*
  %53 = icmp eq i8* %51, null
  br i1 %53, label %.thread129.i, label %54

.thread129.i:                                     ; preds = %45
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  call void @free(i8* %42) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:54                                      ; preds = %45
  %55 = getelementptr inbounds i8* %2, i64 64
  %56 = bitcast i8* %55 to i32*
  %57 = load i32* %56, align 4, !tbaa !6
  %58 = sext i32 %57 to i64
  %59 = shl nsw i64 %58, 2
  %60 = call i8* @malloc(i64 %59) nounwind optsize
  %61 = bitcast i8* %60 to i32*
  %62 = icmp eq i8* %60, null
  br i1 %62, label %457, label %.preheader78.i.i

.preheader78.i.i:                                 ; preds = %54
  %63 = getelementptr inbounds i8* %2, i64 16
  %64 = bitcast i8* %63 to %struct.tnfa_transition.525**
  %65 = icmp eq i32 %27, 0
  %66 = icmp eq i32 %22, 0
  %67 = getelementptr inbounds i8* %2, i64 24
  %68 = bitcast i8* %67 to %struct.tnfa_transition.525**
  %69 = and i32 %26, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp eq i32* %tags.0.i, null
  %72 = getelementptr inbounds i8* %2, i64 48
  %73 = bitcast i8* %72 to i32**
  %.not.i.i = xor i1 %70, true
  br label %74

; <label>:74                                      ; preds = %455, %.preheader78.i.i
  %75 = phi i32 [ %.pre.i.i, %455 ], [ %39, %.preheader78.i.i ]
  %stack.0.i.i = phi %struct.tre_backtrack_struct* [ %stack.8.i.i, %455 ], [ %32, %.preheader78.i.i ]
  %match_eo.0.i.i = phi i32 [ %match_eo.2.i.i, %455 ], [ -1, %.preheader78.i.i ]
  %pos_start.0.i.i = phi i32 [ %91, %455 ], [ -1, %.preheader78.i.i ]
  %pos_add_next.0.i.i = phi i32 [ %pos_add_next.6.i.i, %455 ], [ 1, %.preheader78.i.i ]
  %str_byte.0.i.i = phi i8* [ %100, %455 ], [ %str, %.preheader78.i.i ]
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %.lr.ph55.i.i, label %.loopexit52.i.i

.lr.ph55.i.i:                                     ; preds = %80, %74
  %indvars.iv106.i.i = phi i64 [ %indvars.iv.next107.i.i, %80 ], [ 0, %74 ]
  %77 = getelementptr inbounds i32* %43, i64 %indvars.iv106.i.i
  store i32 -1, i32* %77, align 4, !tbaa !6
  br i1 %71, label %80, label %78

; <label>:78                                      ; preds = %.lr.ph55.i.i
  %79 = getelementptr inbounds i32* %tags.0.i, i64 %indvars.iv106.i.i
  store i32 -1, i32* %79, align 4, !tbaa !6
  br label %80

; <label>:80                                      ; preds = %78, %.lr.ph55.i.i
  %indvars.iv.next107.i.i = add i64 %indvars.iv106.i.i, 1
  %81 = load i32* %5, align 4, !tbaa !6
  %82 = trunc i64 %indvars.iv.next107.i.i to i32
  %83 = icmp slt i32 %82, %81
  br i1 %83, label %.lr.ph55.i.i, label %.loopexit52.i.i

.loopexit52.i.i:                                  ; preds = %80, %74
  %84 = load i32* %56, align 4, !tbaa !6
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %.lr.ph57.i.i, label %.loopexit52._crit_edge.i.i

.lr.ph57.i.i:                                     ; preds = %.lr.ph57.i.i, %.loopexit52.i.i
  %indvars.iv108.i.i = phi i64 [ %indvars.iv.next109.i.i, %.lr.ph57.i.i ], [ 0, %.loopexit52.i.i ]
  %86 = getelementptr inbounds i32* %61, i64 %indvars.iv108.i.i
  store i32 0, i32* %86, align 4, !tbaa !6
  %indvars.iv.next109.i.i = add i64 %indvars.iv108.i.i, 1
  %87 = load i32* %56, align 4, !tbaa !6
  %88 = trunc i64 %indvars.iv.next109.i.i to i32
  %89 = icmp slt i32 %88, %87
  br i1 %89, label %.lr.ph57.i.i, label %.loopexit52._crit_edge.i.i

.loopexit52._crit_edge.i.i:                       ; preds = %.lr.ph57.i.i, %.loopexit52.i.i
  %90 = load i32* %next_c.i.i, align 4, !tbaa !6
  %91 = add nsw i32 %pos_add_next.0.i.i, %pos_start.0.i.i
  %92 = call i32 @mbtowc(i32* %next_c.i.i, i8* %str_byte.0.i.i, i64 4) nounwind optsize
  %93 = icmp slt i32 %92, 1
  br i1 %93, label %94, label %98

; <label>:94                                      ; preds = %.loopexit52._crit_edge.i.i
  %95 = icmp slt i32 %92, 0
  br i1 %95, label %tre_tnfa_run_backtrack.exit.thread.i, label %96

; <label>:96                                      ; preds = %94
  %97 = add nsw i32 %92, 1
  br label %98

; <label>:98                                      ; preds = %96, %.loopexit52._crit_edge.i.i
  %pos_add_next.1.i.i = phi i32 [ %97, %96 ], [ %92, %.loopexit52._crit_edge.i.i ]
  %99 = sext i32 %pos_add_next.1.i.i to i64
  %100 = getelementptr inbounds i8* %str_byte.0.i.i, i64 %99
  %101 = load i32* %next_c.i.i, align 4, !tbaa !6
  %102 = load %struct.tnfa_transition.525** %64, align 8, !tbaa !7
  %103 = icmp slt i32 %91, 1
  %or.cond.i.i = and i1 %103, %66
  %104 = icmp ne i32 %90, 10
  %or.cond1.i.i = or i1 %104, %65
  %or.cond1.not.i.i = xor i1 %or.cond1.i.i, true
  br label %105

; <label>:105                                     ; preds = %.loopexit64.i.i, %98
  %trans_i.0.i.i = phi %struct.tnfa_transition.525* [ %102, %98 ], [ %188, %.loopexit64.i.i ]
  %stack.1.i.i = phi %struct.tre_backtrack_struct* [ %stack.0.i.i, %98 ], [ %stack.3.i.i, %.loopexit64.i.i ]
  %state.0.i.i = phi %struct.tnfa_transition.525* [ null, %98 ], [ %state.1.i.i, %.loopexit64.i.i ]
  %next_tags.0.i.i = phi i32* [ null, %98 ], [ %next_tags.1.i.i, %.loopexit64.i.i ]
  %106 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i.i, i64 0, i32 2
  %107 = load %struct.tnfa_transition.525** %106, align 8, !tbaa !7
  %108 = icmp eq %struct.tnfa_transition.525* %107, null
  br i1 %108, label %189, label %109

; <label>:109                                     ; preds = %105
  %110 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i.i, i64 0, i32 5
  %111 = load i32* %110, align 4, !tbaa !6
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %124, label %113

; <label>:113                                     ; preds = %109
  %114 = and i32 %111, 1
  %115 = icmp eq i32 %114, 0
  %brmerge.i.i = or i1 %115, %or.cond.i.i
  %brmerge142.i.i = or i1 %brmerge.i.i, %or.cond1.not.i.i
  br i1 %brmerge142.i.i, label %116, label %.loopexit64.i.i

; <label>:116                                     ; preds = %113
  %117 = and i32 %111, 2
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %124, label %119

; <label>:119                                     ; preds = %116
  %120 = load i32* %next_c.i.i, align 4, !tbaa !6
  %121 = or i32 %120, %23
  %122 = icmp ne i32 %121, 0
  %123 = icmp ne i32 %120, 10
  %or.cond3.i.i = or i1 %123, %65
  %or.cond143.i.i = and i1 %122, %or.cond3.i.i
  br i1 %or.cond143.i.i, label %.loopexit64.i.i, label %124

; <label>:124                                     ; preds = %119, %116, %109
  %125 = icmp eq %struct.tnfa_transition.525* %state.0.i.i, null
  br i1 %125, label %126, label %129

; <label>:126                                     ; preds = %124
  %127 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i.i, i64 0, i32 4
  %128 = load i32** %127, align 8, !tbaa !7
  br label %.loopexit64.i.i

; <label>:129                                     ; preds = %124
  %130 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.1.i.i, i64 0, i32 2
  %131 = load %struct.tre_backtrack_struct** %130, align 8, !tbaa !7
  %132 = icmp eq %struct.tre_backtrack_struct* %131, null
  br i1 %132, label %133, label %153

; <label>:133                                     ; preds = %129
  %134 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %28, i32 0, i8* null, i32 0, i64 56) nounwind optsize
  %135 = bitcast i8* %134 to %struct.tre_backtrack_struct*
  %136 = icmp eq i8* %134, null
  br i1 %136, label %137, label %138

; <label>:137                                     ; preds = %133
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  call void @free(i8* %42) nounwind optsize
  call void @free(i8* %51) nounwind optsize
  call void @free(i8* %60) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:138                                     ; preds = %133
  %139 = getelementptr inbounds i8* %134, i64 40
  %140 = bitcast i8* %139 to %struct.tre_backtrack_struct**
  store %struct.tre_backtrack_struct* %stack.1.i.i, %struct.tre_backtrack_struct** %140, align 8, !tbaa !7
  %141 = getelementptr inbounds i8* %134, i64 48
  %142 = bitcast i8* %141 to %struct.tre_backtrack_struct**
  store %struct.tre_backtrack_struct* null, %struct.tre_backtrack_struct** %142, align 8, !tbaa !7
  %143 = load i32* %5, align 4, !tbaa !6
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 2
  %146 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %28, i32 0, i8* null, i32 0, i64 %145) nounwind optsize
  %147 = bitcast i8* %146 to i32*
  %148 = getelementptr inbounds i8* %134, i64 32
  %149 = bitcast i8* %148 to i32**
  store i32* %147, i32** %149, align 8, !tbaa !7
  %150 = icmp eq i8* %146, null
  br i1 %150, label %151, label %152

; <label>:151                                     ; preds = %138
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  call void @free(i8* %42) nounwind optsize
  call void @free(i8* %51) nounwind optsize
  call void @free(i8* %60) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:152                                     ; preds = %138
  store %struct.tre_backtrack_struct* %135, %struct.tre_backtrack_struct** %130, align 8, !tbaa !7
  br label %153

; <label>:153                                     ; preds = %152, %129
  %stack.2.i.i = phi %struct.tre_backtrack_struct* [ %135, %152 ], [ %131, %129 ]
  %154 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 0
  store i32 %91, i32* %154, align 4, !tbaa !6
  %155 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 1
  store i8* %100, i8** %155, align 8, !tbaa !7
  %156 = load %struct.tnfa_transition.525** %106, align 8, !tbaa !7
  %157 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 2
  store %struct.tnfa_transition.525* %156, %struct.tnfa_transition.525** %157, align 8, !tbaa !7
  %158 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i.i, i64 0, i32 3
  %159 = load i32* %158, align 4, !tbaa !6
  %160 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 3
  store i32 %159, i32* %160, align 4, !tbaa !6
  %161 = load i32* %next_c.i.i, align 4, !tbaa !6
  %162 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 4
  store i32 %161, i32* %162, align 4, !tbaa !6
  %163 = load i32* %5, align 4, !tbaa !6
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %.lr.ph61.i.i, label %._crit_edge62.i.i

.lr.ph61.i.i:                                     ; preds = %153
  %165 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 5
  %166 = load i32** %165, align 8, !tbaa !7
  br label %167

; <label>:167                                     ; preds = %167, %.lr.ph61.i.i
  %indvars.iv110.i.i = phi i64 [ 0, %.lr.ph61.i.i ], [ %indvars.iv.next111.i.i, %167 ]
  %168 = getelementptr inbounds i32* %43, i64 %indvars.iv110.i.i
  %169 = load i32* %168, align 4, !tbaa !6
  %170 = getelementptr inbounds i32* %166, i64 %indvars.iv110.i.i
  store i32 %169, i32* %170, align 4, !tbaa !6
  %indvars.iv.next111.i.i = add i64 %indvars.iv110.i.i, 1
  %171 = load i32* %5, align 4, !tbaa !6
  %172 = trunc i64 %indvars.iv.next111.i.i to i32
  %173 = icmp slt i32 %172, %171
  br i1 %173, label %167, label %._crit_edge62.i.i

._crit_edge62.i.i:                                ; preds = %167, %153
  %174 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i.i, i64 0, i32 4
  %175 = load i32** %174, align 8, !tbaa !7
  %176 = icmp eq i32* %175, null
  br i1 %176, label %.loopexit64.i.i, label %.preheader63.i.i

.preheader63.i.i:                                 ; preds = %._crit_edge62.i.i
  %177 = load i32* %175, align 4, !tbaa !6
  %178 = icmp sgt i32 %177, -1
  br i1 %178, label %.lr.ph66.i.i, label %.loopexit64.i.i

.lr.ph66.i.i:                                     ; preds = %.preheader63.i.i
  %179 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.2.i.i, i64 0, i32 0, i32 5
  %180 = load i32** %179, align 8, !tbaa !7
  br label %181

; <label>:181                                     ; preds = %181, %.lr.ph66.i.i
  %182 = phi i32 [ %177, %.lr.ph66.i.i ], [ %186, %181 ]
  %tmp.065.i.i = phi i32* [ %175, %.lr.ph66.i.i ], [ %183, %181 ]
  %183 = getelementptr inbounds i32* %tmp.065.i.i, i64 1
  %184 = sext i32 %182 to i64
  %185 = getelementptr inbounds i32* %180, i64 %184
  store i32 %91, i32* %185, align 4, !tbaa !6
  %186 = load i32* %183, align 4, !tbaa !6
  %187 = icmp sgt i32 %186, -1
  br i1 %187, label %181, label %.loopexit64.i.i

.loopexit64.i.i:                                  ; preds = %181, %.preheader63.i.i, %._crit_edge62.i.i, %126, %119, %113
  %stack.3.i.i = phi %struct.tre_backtrack_struct* [ %stack.1.i.i, %126 ], [ %stack.2.i.i, %._crit_edge62.i.i ], [ %stack.2.i.i, %.preheader63.i.i ], [ %stack.1.i.i, %113 ], [ %stack.1.i.i, %119 ], [ %stack.2.i.i, %181 ]
  %state.1.i.i = phi %struct.tnfa_transition.525* [ %107, %126 ], [ %state.0.i.i, %._crit_edge62.i.i ], [ %state.0.i.i, %.preheader63.i.i ], [ %state.0.i.i, %113 ], [ %state.0.i.i, %119 ], [ %state.0.i.i, %181 ]
  %next_tags.1.i.i = phi i32* [ %128, %126 ], [ %next_tags.0.i.i, %._crit_edge62.i.i ], [ %next_tags.0.i.i, %.preheader63.i.i ], [ %next_tags.0.i.i, %113 ], [ %next_tags.0.i.i, %119 ], [ %next_tags.0.i.i, %181 ]
  %188 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i.i, i64 1
  br label %105

; <label>:189                                     ; preds = %105
  %190 = icmp eq i32* %next_tags.0.i.i, null
  br i1 %190, label %.loopexit74.i.i, label %.preheader73.i.i

.preheader73.i.i:                                 ; preds = %189
  %191 = load i32* %next_tags.0.i.i, align 4, !tbaa !6
  %192 = icmp sgt i32 %191, -1
  br i1 %192, label %.lr.ph76.i.i, label %.loopexit74.i.i

.lr.ph76.i.i:                                     ; preds = %.lr.ph76.i.i, %.preheader73.i.i
  %193 = phi i32 [ %197, %.lr.ph76.i.i ], [ %191, %.preheader73.i.i ]
  %next_tags.275.i.i = phi i32* [ %196, %.lr.ph76.i.i ], [ %next_tags.0.i.i, %.preheader73.i.i ]
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i32* %43, i64 %194
  store i32 %91, i32* %195, align 4, !tbaa !6
  %196 = getelementptr inbounds i32* %next_tags.275.i.i, i64 1
  %197 = load i32* %196, align 4, !tbaa !6
  %198 = icmp sgt i32 %197, -1
  br i1 %198, label %.lr.ph76.i.i, label %.loopexit74.i.i

.loopexit74.i.i:                                  ; preds = %.lr.ph76.i.i, %.preheader73.i.i, %189
  %next_tags.3.i.i = phi i32* [ null, %189 ], [ %next_tags.0.i.i, %.preheader73.i.i ], [ %196, %.lr.ph76.i.i ]
  %199 = icmp eq %struct.tnfa_transition.525* %state.0.i.i, null
  br i1 %199, label %.loopexit30.i.i, label %.preheader29.i.i

.preheader29.i.i:                                 ; preds = %443, %._crit_edge125.i.i, %.loopexit74.i.i
  %stack.4.ph.i.i = phi %struct.tre_backtrack_struct* [ %stack.1.i.i, %.loopexit74.i.i ], [ %419, %._crit_edge125.i.i ], [ %419, %443 ]
  %state.2.ph.i.i = phi %struct.tnfa_transition.525* [ %state.0.i.i, %.loopexit74.i.i ], [ %423, %._crit_edge125.i.i ], [ %423, %443 ]
  %next_tags.4.ph.i.i = phi i32* [ %next_tags.3.i.i, %.loopexit74.i.i ], [ %next_tags.8.i.i, %._crit_edge125.i.i ], [ %next_tags.8.i.i, %443 ]
  %match_eo.1.ph.i.i = phi i32 [ %match_eo.0.i.i, %.loopexit74.i.i ], [ %match_eo.2.i.i, %._crit_edge125.i.i ], [ %match_eo.2.i.i, %443 ]
  %pos_add_next.2.ph.i.i = phi i32 [ %pos_add_next.1.i.i, %.loopexit74.i.i ], [ %pos_add_next.6.i.i, %._crit_edge125.i.i ], [ %pos_add_next.6.i.i, %443 ]
  %pos.0.ph.i.i = phi i32 [ %91, %.loopexit74.i.i ], [ %434, %._crit_edge125.i.i ], [ %434, %443 ]
  %str_byte.1.ph.i.i = phi i8* [ %100, %.loopexit74.i.i ], [ %436, %._crit_edge125.i.i ], [ %436, %443 ]
  br label %.backedge.i.i

.backedge.i.i:                                    ; preds = %.lr.ph28.i.i, %.preheader.i.i, %408, %.preheader29.i.i
  %stack.4.i.i = phi %struct.tre_backtrack_struct* [ %stack.4.ph.i.i, %.preheader29.i.i ], [ %stack.5.i.i, %.lr.ph28.i.i ], [ %stack.5.i.i, %408 ], [ %stack.5.i.i, %.preheader.i.i ]
  %state.2.i.i = phi %struct.tnfa_transition.525* [ %state.2.ph.i.i, %.preheader29.i.i ], [ %next_state.0.i.i, %.lr.ph28.i.i ], [ %next_state.0.i.i, %408 ], [ %next_state.0.i.i, %.preheader.i.i ]
  %next_tags.4.i.i = phi i32* [ %next_tags.4.ph.i.i, %.preheader29.i.i ], [ %413, %.lr.ph28.i.i ], [ null, %408 ], [ %next_tags.5.i.i, %.preheader.i.i ]
  %pos_add_next.2.i.i = phi i32 [ %pos_add_next.2.ph.i.i, %.preheader29.i.i ], [ %pos_add_next.5.i.i, %.lr.ph28.i.i ], [ %pos_add_next.5.i.i, %408 ], [ %pos_add_next.5.i.i, %.preheader.i.i ]
  %pos.0.i.i = phi i32 [ %pos.0.ph.i.i, %.preheader29.i.i ], [ %pos.1.i.i, %.lr.ph28.i.i ], [ %pos.1.i.i, %408 ], [ %pos.1.i.i, %.preheader.i.i ]
  %str_byte.1.i.i = phi i8* [ %str_byte.1.ph.i.i, %.preheader29.i.i ], [ %str_byte.2.i.i, %.lr.ph28.i.i ], [ %str_byte.2.i.i, %408 ], [ %str_byte.2.i.i, %.preheader.i.i ]
  %200 = load %struct.tnfa_transition.525** %68, align 8, !tbaa !7
  %201 = icmp eq %struct.tnfa_transition.525* %state.2.i.i, %200
  br i1 %201, label %202, label %220

; <label>:202                                     ; preds = %.backedge.i.i
  %203 = icmp slt i32 %match_eo.1.ph.i.i, %pos.0.i.i
  br i1 %203, label %211, label %204

; <label>:204                                     ; preds = %202
  %205 = icmp ne i32 %match_eo.1.ph.i.i, %pos.0.i.i
  %or.cond4.i.i = or i1 %205, %71
  br i1 %or.cond4.i.i, label %.loopexit30.i.i, label %206

; <label>:206                                     ; preds = %204
  %207 = load i32* %5, align 4, !tbaa !6
  %208 = load i32** %73, align 8, !tbaa !7
  %209 = call fastcc i32 @tre_tag_order(i32 %207, i32* %208, i32* %43, i32* %tags.0.i) nounwind optsize
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %.loopexit30.i.i, label %211

; <label>:211                                     ; preds = %206, %202
  br i1 %71, label %.loopexit30.i.i, label %.preheader48.i.i

.preheader48.i.i:                                 ; preds = %211
  %212 = load i32* %5, align 4, !tbaa !6
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %.lr.ph51.i.i, label %.loopexit30.i.i

.lr.ph51.i.i:                                     ; preds = %.lr.ph51.i.i, %.preheader48.i.i
  %indvars.iv104.i.i = phi i64 [ %indvars.iv.next105.i.i, %.lr.ph51.i.i ], [ 0, %.preheader48.i.i ]
  %214 = getelementptr inbounds i32* %43, i64 %indvars.iv104.i.i
  %215 = load i32* %214, align 4, !tbaa !6
  %216 = getelementptr inbounds i32* %tags.0.i, i64 %indvars.iv104.i.i
  store i32 %215, i32* %216, align 4, !tbaa !6
  %indvars.iv.next105.i.i = add i64 %indvars.iv104.i.i, 1
  %217 = load i32* %5, align 4, !tbaa !6
  %218 = trunc i64 %indvars.iv.next105.i.i to i32
  %219 = icmp slt i32 %218, %217
  br i1 %219, label %.lr.ph51.i.i, label %.loopexit30.i.i

; <label>:220                                     ; preds = %.backedge.i.i
  %221 = getelementptr inbounds %struct.tnfa_transition.525* %state.2.i.i, i64 0, i32 2
  %222 = load %struct.tnfa_transition.525** %221, align 8, !tbaa !7
  %223 = icmp eq %struct.tnfa_transition.525* %222, null
  br i1 %223, label %._crit_edge124.i.i, label %224

; <label>:224                                     ; preds = %220
  %225 = getelementptr inbounds %struct.tnfa_transition.525* %state.2.i.i, i64 0, i32 5
  %226 = load i32* %225, align 4, !tbaa !6
  %227 = and i32 %226, 256
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %._crit_edge124.i.i, label %229

; <label>:229                                     ; preds = %224
  %230 = getelementptr inbounds %struct.tnfa_transition.525* %state.2.i.i, i64 0, i32 6, i32 0
  %231 = load i32* %230, align 4, !tbaa !6
  %232 = add nsw i32 %231, 1
  %233 = sext i32 %232 to i64
  call fastcc void @tre_fill_pmatch(i64 %233, %struct.regmatch_t* %52, i32 0, %struct.tnfa.524* %3, i32* %43, i32 %pos.0.i.i) nounwind optsize
  %234 = sext i32 %231 to i64
  %235 = getelementptr inbounds %struct.regmatch_t* %52, i64 %234, i32 0
  %236 = load i64* %235, align 8, !tbaa !5
  %237 = trunc i64 %236 to i32
  %238 = getelementptr inbounds %struct.regmatch_t* %52, i64 %234, i32 1
  %239 = load i64* %238, align 8, !tbaa !5
  %240 = trunc i64 %239 to i32
  %241 = sub nsw i32 %240, %237
  %242 = sext i32 %237 to i64
  %243 = getelementptr inbounds i8* %str, i64 %242
  %244 = getelementptr inbounds i8* %str_byte.1.i.i, i64 -1
  %245 = sext i32 %241 to i64
  %246 = call i32 @strncmp(i8* %243, i8* %244, i64 %245) nounwind optsize
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %.loopexit30.i.i

; <label>:248                                     ; preds = %229
  %249 = icmp eq i32 %240, %237
  %empty_br_match.0.i.i = zext i1 %249 to i32
  %250 = getelementptr inbounds %struct.tnfa_transition.525* %state.2.i.i, i64 0, i32 3
  %251 = load i32* %250, align 4, !tbaa !6
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i32* %61, i64 %252
  br i1 %249, label %254, label %._crit_edge119.i.i

; <label>:254                                     ; preds = %248
  %255 = load i32* %253, align 4, !tbaa !6
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %._crit_edge119.i.i, label %.loopexit30.i.i

._crit_edge119.i.i:                               ; preds = %254, %248
  store i32 %empty_br_match.0.i.i, i32* %253, align 4, !tbaa !6
  %257 = add nsw i32 %241, -1
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8* %str_byte.1.i.i, i64 %258
  %260 = add nsw i32 %257, %pos.0.i.i
  %261 = load i32* %next_c.i.i, align 4, !tbaa !6
  %262 = call i32 @mbtowc(i32* %next_c.i.i, i8* %259, i64 4) nounwind optsize
  %263 = icmp slt i32 %262, 1
  br i1 %263, label %264, label %268

; <label>:264                                     ; preds = %._crit_edge119.i.i
  %265 = icmp slt i32 %262, 0
  br i1 %265, label %tre_tnfa_run_backtrack.exit.thread.i, label %266

; <label>:266                                     ; preds = %264
  %267 = add nsw i32 %262, 1
  br label %268

; <label>:268                                     ; preds = %266, %._crit_edge119.i.i
  %pos_add_next.3.i.i = phi i32 [ %267, %266 ], [ %262, %._crit_edge119.i.i ]
  %269 = sext i32 %pos_add_next.3.i.i to i64
  %.sum.i.i = add i64 %269, %258
  br label %281

._crit_edge124.i.i:                               ; preds = %224, %220
  %270 = load i32* %next_c.i.i, align 4, !tbaa !6
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %.loopexit30.i.i, label %272

; <label>:272                                     ; preds = %._crit_edge124.i.i
  %273 = call i32 @mbtowc(i32* %next_c.i.i, i8* %str_byte.1.i.i, i64 4) nounwind optsize
  %274 = icmp slt i32 %273, 1
  br i1 %274, label %275, label %279

; <label>:275                                     ; preds = %272
  %276 = icmp slt i32 %273, 0
  br i1 %276, label %tre_tnfa_run_backtrack.exit.thread.i, label %277

; <label>:277                                     ; preds = %275
  %278 = add nsw i32 %273, 1
  br label %279

; <label>:279                                     ; preds = %277, %272
  %pos_add_next.4.i.i = phi i32 [ %278, %277 ], [ %273, %272 ]
  %280 = sext i32 %pos_add_next.4.i.i to i64
  br label %281

; <label>:281                                     ; preds = %279, %268
  %pos_add_next.5.i.i = phi i32 [ %pos_add_next.3.i.i, %268 ], [ %pos_add_next.4.i.i, %279 ]
  %.pn.i.i = phi i32 [ %260, %268 ], [ %pos.0.i.i, %279 ]
  %.sum.pn.i.i = phi i64 [ %.sum.i.i, %268 ], [ %280, %279 ]
  %prev_c.0.i.i = phi i32 [ %261, %268 ], [ %270, %279 ]
  %str_byte.2.i.i = getelementptr inbounds i8* %str_byte.1.i.i, i64 %.sum.pn.i.i
  %pos.1.i.i = add nsw i32 %.pn.i.i, %pos_add_next.2.i.i
  %282 = icmp slt i32 %pos.1.i.i, 1
  %or.cond5.i.i = and i1 %282, %66
  %283 = icmp ne i32 %prev_c.0.i.i, 10
  %or.cond6.i.i = or i1 %283, %65
  %or.cond6.not.i.i = xor i1 %or.cond6.i.i, true
  br label %284

; <label>:284                                     ; preds = %.critedge.i.i, %281
  %stack.5.i.i = phi %struct.tre_backtrack_struct* [ %stack.4.i.i, %281 ], [ %stack.7.i.i, %.critedge.i.i ]
  %next_tags.5.i.i = phi i32* [ %next_tags.4.i.i, %281 ], [ %next_tags.6.i.i, %.critedge.i.i ]
  %trans_i2.0.i.i = phi %struct.tnfa_transition.525* [ %state.2.i.i, %281 ], [ %405, %.critedge.i.i ]
  %next_state.0.i.i = phi %struct.tnfa_transition.525* [ null, %281 ], [ %next_state.1.i.i, %.critedge.i.i ]
  %285 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 2
  %286 = load %struct.tnfa_transition.525** %285, align 8, !tbaa !7
  %287 = icmp eq %struct.tnfa_transition.525* %286, null
  br i1 %287, label %406, label %288

; <label>:288                                     ; preds = %284
  %289 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 0
  %290 = load i32* %289, align 4, !tbaa !6
  %291 = icmp sgt i32 %290, %prev_c.0.i.i
  br i1 %291, label %.critedge.i.i, label %292

; <label>:292                                     ; preds = %288
  %293 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 1
  %294 = load i32* %293, align 4, !tbaa !6
  %295 = icmp slt i32 %294, %prev_c.0.i.i
  br i1 %295, label %.critedge.i.i, label %296

; <label>:296                                     ; preds = %292
  %297 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 5
  %298 = load i32* %297, align 4, !tbaa !6
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %342, label %300

; <label>:300                                     ; preds = %296
  %301 = and i32 %298, 1
  %302 = icmp eq i32 %301, 0
  %brmerge144.i.i = or i1 %302, %or.cond5.i.i
  %brmerge145.i.i = or i1 %brmerge144.i.i, %or.cond6.not.i.i
  br i1 %brmerge145.i.i, label %303, label %.critedge.i.i

; <label>:303                                     ; preds = %300
  %304 = and i32 %298, 2
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %311, label %306

; <label>:306                                     ; preds = %303
  %307 = load i32* %next_c.i.i, align 4, !tbaa !6
  %308 = or i32 %307, %23
  %309 = icmp ne i32 %308, 0
  %310 = icmp ne i32 %307, 10
  %or.cond8.i.i = or i1 %310, %65
  %or.cond146.i.i = and i1 %309, %or.cond8.i.i
  br i1 %or.cond146.i.i, label %.critedge.i.i, label %311

; <label>:311                                     ; preds = %306, %303
  %312 = and i32 %298, 4
  %313 = icmp eq i32 %312, 0
  %brmerge147.i.i = or i1 %313, %.not.i.i
  br i1 %brmerge147.i.i, label %319, label %314

; <label>:314                                     ; preds = %311
  %315 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 6, i32 0
  %316 = load i32* %315, align 4, !tbaa !6
  %317 = call i32 @iswctype(i32 %prev_c.0.i.i, i32 %316) nounwind optsize
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %.critedge.i.i, label %._crit_edge122.i.i

._crit_edge122.i.i:                               ; preds = %314
  %.pre127.i.i = load i32* %297, align 4, !tbaa !6
  br label %319

; <label>:319                                     ; preds = %._crit_edge122.i.i, %311
  %320 = phi i32 [ %.pre127.i.i, %._crit_edge122.i.i ], [ %298, %311 ]
  %321 = and i32 %320, 4
  %322 = icmp eq i32 %321, 0
  %brmerge148.i.i = or i1 %322, %70
  br i1 %brmerge148.i.i, label %._crit_edge120.i.i, label %323

; <label>:323                                     ; preds = %319
  %324 = call i32 @towlower(i32 %prev_c.0.i.i) nounwind optsize
  %325 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 6, i32 0
  %326 = load i32* %325, align 4, !tbaa !6
  %327 = call i32 @iswctype(i32 %324, i32 %326) nounwind optsize
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %._crit_edge120.i.i

; <label>:329                                     ; preds = %323
  %330 = call i32 @towupper(i32 %prev_c.0.i.i) nounwind optsize
  %331 = load i32* %325, align 4, !tbaa !6
  %332 = call i32 @iswctype(i32 %330, i32 %331) nounwind optsize
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %.critedge.i.i, label %._crit_edge120.i.i

._crit_edge120.i.i:                               ; preds = %329, %323, %319
  %334 = load i32* %297, align 4, !tbaa !6
  %335 = and i32 %334, 8
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %342, label %337

; <label>:337                                     ; preds = %._crit_edge120.i.i
  %338 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 7
  %339 = load i32** %338, align 8, !tbaa !7
  %340 = call fastcc i32 @tre_neg_char_classes_match(i32* %339, i32 %prev_c.0.i.i, i32 %69) nounwind optsize
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %.critedge.i.i

; <label>:342                                     ; preds = %337, %._crit_edge120.i.i, %296
  %343 = icmp eq %struct.tnfa_transition.525* %next_state.0.i.i, null
  br i1 %343, label %344, label %348

; <label>:344                                     ; preds = %342
  %345 = load %struct.tnfa_transition.525** %285, align 8, !tbaa !7
  %346 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 4
  %347 = load i32** %346, align 8, !tbaa !7
  br label %.critedge.i.i

; <label>:348                                     ; preds = %342
  %349 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.5.i.i, i64 0, i32 2
  %350 = load %struct.tre_backtrack_struct** %349, align 8, !tbaa !7
  %351 = icmp eq %struct.tre_backtrack_struct* %350, null
  br i1 %351, label %352, label %372

; <label>:352                                     ; preds = %348
  %353 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %28, i32 0, i8* null, i32 0, i64 56) nounwind optsize
  %354 = bitcast i8* %353 to %struct.tre_backtrack_struct*
  %355 = icmp eq i8* %353, null
  br i1 %355, label %356, label %357

; <label>:356                                     ; preds = %352
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  call void @free(i8* %42) nounwind optsize
  call void @free(i8* %51) nounwind optsize
  call void @free(i8* %60) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:357                                     ; preds = %352
  %358 = getelementptr inbounds i8* %353, i64 40
  %359 = bitcast i8* %358 to %struct.tre_backtrack_struct**
  store %struct.tre_backtrack_struct* %stack.5.i.i, %struct.tre_backtrack_struct** %359, align 8, !tbaa !7
  %360 = getelementptr inbounds i8* %353, i64 48
  %361 = bitcast i8* %360 to %struct.tre_backtrack_struct**
  store %struct.tre_backtrack_struct* null, %struct.tre_backtrack_struct** %361, align 8, !tbaa !7
  %362 = load i32* %5, align 4, !tbaa !6
  %363 = sext i32 %362 to i64
  %364 = shl nsw i64 %363, 2
  %365 = call i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* %28, i32 0, i8* null, i32 0, i64 %364) nounwind optsize
  %366 = bitcast i8* %365 to i32*
  %367 = getelementptr inbounds i8* %353, i64 32
  %368 = bitcast i8* %367 to i32**
  store i32* %366, i32** %368, align 8, !tbaa !7
  %369 = icmp eq i8* %365, null
  br i1 %369, label %370, label %371

; <label>:370                                     ; preds = %357
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  call void @free(i8* %42) nounwind optsize
  call void @free(i8* %51) nounwind optsize
  call void @free(i8* %60) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:371                                     ; preds = %357
  store %struct.tre_backtrack_struct* %354, %struct.tre_backtrack_struct** %349, align 8, !tbaa !7
  br label %372

; <label>:372                                     ; preds = %371, %348
  %stack.6.i.i = phi %struct.tre_backtrack_struct* [ %354, %371 ], [ %350, %348 ]
  %373 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.6.i.i, i64 0, i32 0, i32 0
  store i32 %pos.1.i.i, i32* %373, align 4, !tbaa !6
  %374 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.6.i.i, i64 0, i32 0, i32 1
  store i8* %str_byte.2.i.i, i8** %374, align 8, !tbaa !7
  %375 = load %struct.tnfa_transition.525** %285, align 8, !tbaa !7
  %376 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.6.i.i, i64 0, i32 0, i32 2
  store %struct.tnfa_transition.525* %375, %struct.tnfa_transition.525** %376, align 8, !tbaa !7
  %377 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 3
  %378 = load i32* %377, align 4, !tbaa !6
  %379 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.6.i.i, i64 0, i32 0, i32 3
  store i32 %378, i32* %379, align 4, !tbaa !6
  %380 = load i32* %next_c.i.i, align 4, !tbaa !6
  %381 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.6.i.i, i64 0, i32 0, i32 4
  store i32 %380, i32* %381, align 4, !tbaa !6
  %382 = load i32* %5, align 4, !tbaa !6
  %383 = icmp sgt i32 %382, 0
  %384 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.6.i.i, i64 0, i32 0, i32 5
  br i1 %383, label %.lr.ph19.i.i, label %._crit_edge20.i.i

.lr.ph19.i.i:                                     ; preds = %372
  %385 = load i32** %384, align 8, !tbaa !7
  br label %386

; <label>:386                                     ; preds = %386, %.lr.ph19.i.i
  %indvars.iv80.i.i = phi i64 [ 0, %.lr.ph19.i.i ], [ %indvars.iv.next81.i.i, %386 ]
  %387 = getelementptr inbounds i32* %43, i64 %indvars.iv80.i.i
  %388 = load i32* %387, align 4, !tbaa !6
  %389 = getelementptr inbounds i32* %385, i64 %indvars.iv80.i.i
  store i32 %388, i32* %389, align 4, !tbaa !6
  %indvars.iv.next81.i.i = add i64 %indvars.iv80.i.i, 1
  %390 = load i32* %5, align 4, !tbaa !6
  %391 = trunc i64 %indvars.iv.next81.i.i to i32
  %392 = icmp slt i32 %391, %390
  br i1 %392, label %386, label %._crit_edge20.i.i

._crit_edge20.i.i:                                ; preds = %386, %372
  %393 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 0, i32 4
  %394 = load i32** %393, align 8, !tbaa !7
  br label %395

; <label>:395                                     ; preds = %400, %._crit_edge20.i.i
  %tmp6.0.i.i = phi i32* [ %394, %._crit_edge20.i.i ], [ %404, %400 ]
  %396 = icmp eq i32* %tmp6.0.i.i, null
  br i1 %396, label %.critedge.i.i, label %397

; <label>:397                                     ; preds = %395
  %398 = load i32* %tmp6.0.i.i, align 4, !tbaa !6
  %399 = icmp sgt i32 %398, -1
  br i1 %399, label %400, label %.critedge.i.i

; <label>:400                                     ; preds = %397
  %401 = sext i32 %398 to i64
  %402 = load i32** %384, align 8, !tbaa !7
  %403 = getelementptr inbounds i32* %402, i64 %401
  store i32 %pos.1.i.i, i32* %403, align 4, !tbaa !6
  %404 = getelementptr inbounds i32* %tmp6.0.i.i, i64 1
  br label %395

.critedge.i.i:                                    ; preds = %397, %395, %344, %337, %329, %314, %306, %300, %292, %288
  %stack.7.i.i = phi %struct.tre_backtrack_struct* [ %stack.5.i.i, %337 ], [ %stack.5.i.i, %344 ], [ %stack.5.i.i, %329 ], [ %stack.5.i.i, %314 ], [ %stack.5.i.i, %292 ], [ %stack.5.i.i, %288 ], [ %stack.5.i.i, %300 ], [ %stack.5.i.i, %306 ], [ %stack.6.i.i, %395 ], [ %stack.6.i.i, %397 ]
  %next_tags.6.i.i = phi i32* [ %next_tags.5.i.i, %337 ], [ %347, %344 ], [ %next_tags.5.i.i, %329 ], [ %next_tags.5.i.i, %314 ], [ %next_tags.5.i.i, %292 ], [ %next_tags.5.i.i, %288 ], [ %next_tags.5.i.i, %300 ], [ %next_tags.5.i.i, %306 ], [ %next_tags.5.i.i, %395 ], [ %next_tags.5.i.i, %397 ]
  %next_state.1.i.i = phi %struct.tnfa_transition.525* [ %next_state.0.i.i, %337 ], [ %345, %344 ], [ %next_state.0.i.i, %329 ], [ %next_state.0.i.i, %314 ], [ %next_state.0.i.i, %292 ], [ %next_state.0.i.i, %288 ], [ %next_state.0.i.i, %300 ], [ %next_state.0.i.i, %306 ], [ %next_state.0.i.i, %395 ], [ %next_state.0.i.i, %397 ]
  %405 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i2.0.i.i, i64 1
  br label %284

; <label>:406                                     ; preds = %284
  %407 = icmp eq %struct.tnfa_transition.525* %next_state.0.i.i, null
  br i1 %407, label %.loopexit30.i.i, label %408

; <label>:408                                     ; preds = %406
  %409 = icmp eq i32* %next_tags.5.i.i, null
  br i1 %409, label %.backedge.i.i, label %.preheader.i.i

.preheader.i.i:                                   ; preds = %408
  %410 = load i32* %next_tags.5.i.i, align 4, !tbaa !6
  %411 = icmp sgt i32 %410, -1
  br i1 %411, label %.lr.ph28.i.i, label %.backedge.i.i

.lr.ph28.i.i:                                     ; preds = %.lr.ph28.i.i, %.preheader.i.i
  %412 = phi i32 [ %416, %.lr.ph28.i.i ], [ %410, %.preheader.i.i ]
  %next_tags.727.i.i = phi i32* [ %413, %.lr.ph28.i.i ], [ %next_tags.5.i.i, %.preheader.i.i ]
  %413 = getelementptr inbounds i32* %next_tags.727.i.i, i64 1
  %414 = sext i32 %412 to i64
  %415 = getelementptr inbounds i32* %43, i64 %414
  store i32 %pos.1.i.i, i32* %415, align 4, !tbaa !6
  %416 = load i32* %413, align 4, !tbaa !6
  %417 = icmp sgt i32 %416, -1
  br i1 %417, label %.lr.ph28.i.i, label %.backedge.i.i

.loopexit30.i.i:                                  ; preds = %406, %._crit_edge124.i.i, %254, %229, %.lr.ph51.i.i, %.preheader48.i.i, %211, %206, %204, %.loopexit74.i.i
  %stack.8.i.i = phi %struct.tre_backtrack_struct* [ %stack.1.i.i, %.loopexit74.i.i ], [ %stack.4.i.i, %211 ], [ %stack.4.i.i, %206 ], [ %stack.4.i.i, %204 ], [ %stack.4.i.i, %.preheader48.i.i ], [ %stack.4.i.i, %.lr.ph51.i.i ], [ %stack.5.i.i, %406 ], [ %stack.4.i.i, %._crit_edge124.i.i ], [ %stack.4.i.i, %254 ], [ %stack.4.i.i, %229 ]
  %next_tags.8.i.i = phi i32* [ %next_tags.3.i.i, %.loopexit74.i.i ], [ %next_tags.4.i.i, %211 ], [ %next_tags.4.i.i, %206 ], [ %next_tags.4.i.i, %204 ], [ %next_tags.4.i.i, %.preheader48.i.i ], [ %next_tags.4.i.i, %.lr.ph51.i.i ], [ %next_tags.5.i.i, %406 ], [ %next_tags.4.i.i, %._crit_edge124.i.i ], [ %next_tags.4.i.i, %254 ], [ %next_tags.4.i.i, %229 ]
  %match_eo.2.i.i = phi i32 [ %match_eo.0.i.i, %.loopexit74.i.i ], [ %pos.0.i.i, %211 ], [ %match_eo.1.ph.i.i, %206 ], [ %match_eo.1.ph.i.i, %204 ], [ %pos.0.i.i, %.preheader48.i.i ], [ %pos.0.i.i, %.lr.ph51.i.i ], [ %match_eo.1.ph.i.i, %406 ], [ %match_eo.1.ph.i.i, %._crit_edge124.i.i ], [ %match_eo.1.ph.i.i, %254 ], [ %match_eo.1.ph.i.i, %229 ]
  %pos_add_next.6.i.i = phi i32 [ %pos_add_next.1.i.i, %.loopexit74.i.i ], [ %pos_add_next.2.i.i, %211 ], [ %pos_add_next.2.i.i, %206 ], [ %pos_add_next.2.i.i, %204 ], [ %pos_add_next.2.i.i, %.preheader48.i.i ], [ %pos_add_next.2.i.i, %.lr.ph51.i.i ], [ %pos_add_next.5.i.i, %406 ], [ %pos_add_next.2.i.i, %._crit_edge124.i.i ], [ %pos_add_next.2.i.i, %254 ], [ %pos_add_next.2.i.i, %229 ]
  %418 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 1
  %419 = load %struct.tre_backtrack_struct** %418, align 8, !tbaa !7
  %420 = icmp eq %struct.tre_backtrack_struct* %419, null
  br i1 %420, label %450, label %421

; <label>:421                                     ; preds = %.loopexit30.i.i
  %422 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 0, i32 2
  %423 = load %struct.tnfa_transition.525** %422, align 8, !tbaa !7
  %424 = getelementptr inbounds %struct.tnfa_transition.525* %423, i64 0, i32 5
  %425 = load i32* %424, align 4, !tbaa !6
  %426 = and i32 %425, 256
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %._crit_edge125.i.i, label %428

; <label>:428                                     ; preds = %421
  %429 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 0, i32 3
  %430 = load i32* %429, align 4, !tbaa !6
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds i32* %61, i64 %431
  store i32 0, i32* %432, align 4, !tbaa !6
  br label %._crit_edge125.i.i

._crit_edge125.i.i:                               ; preds = %428, %421
  %433 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 0, i32 0
  %434 = load i32* %433, align 4, !tbaa !6
  %435 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 0, i32 1
  %436 = load i8** %435, align 8, !tbaa !7
  %437 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 0, i32 4
  %438 = load i32* %437, align 4, !tbaa !6
  store i32 %438, i32* %next_c.i.i, align 4, !tbaa !6
  %439 = load i32* %5, align 4, !tbaa !6
  %440 = icmp sgt i32 %439, 0
  br i1 %440, label %.lr.ph.i.i, label %.preheader29.i.i

.lr.ph.i.i:                                       ; preds = %._crit_edge125.i.i
  %441 = getelementptr inbounds %struct.tre_backtrack_struct* %stack.8.i.i, i64 0, i32 0, i32 5
  %442 = load i32** %441, align 8, !tbaa !7
  br label %443

; <label>:443                                     ; preds = %443, %.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ 0, %.lr.ph.i.i ], [ %indvars.iv.next.i.i, %443 ]
  %444 = getelementptr inbounds i32* %442, i64 %indvars.iv.i.i
  %445 = load i32* %444, align 4, !tbaa !6
  %446 = getelementptr inbounds i32* %43, i64 %indvars.iv.i.i
  store i32 %445, i32* %446, align 4, !tbaa !6
  %indvars.iv.next.i.i = add i64 %indvars.iv.i.i, 1
  %447 = load i32* %5, align 4, !tbaa !6
  %448 = trunc i64 %indvars.iv.next.i.i to i32
  %449 = icmp slt i32 %448, %447
  br i1 %449, label %443, label %.preheader29.i.i

; <label>:450                                     ; preds = %.loopexit30.i.i
  %451 = icmp slt i32 %match_eo.2.i.i, 0
  br i1 %451, label %452, label %456

; <label>:452                                     ; preds = %450
  %453 = load i32* %next_c.i.i, align 4, !tbaa !6
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %456, label %455

; <label>:455                                     ; preds = %452
  store i32 %101, i32* %next_c.i.i, align 4, !tbaa !6
  %.pre.i.i = load i32* %5, align 4, !tbaa !6
  br label %74

; <label>:456                                     ; preds = %452, %450
  %match_eo.2.lobit.i.i = lshr i32 %match_eo.2.i.i, 31
  br label %457

; <label>:457                                     ; preds = %456, %54
  %match_eo.10.i28.i = phi i32 [ %match_eo.2.i.i, %456 ], [ undef, %54 ]
  %ret.0.i.i = phi i32 [ %match_eo.2.lobit.i.i, %456 ], [ 12, %54 ]
  call void @__tre_mem_destroy(%struct.tre_mem_struct* %28) nounwind optsize
  call void @free(i8* %42) nounwind optsize
  call void @free(i8* %51) nounwind optsize
  br i1 %62, label %tre_tnfa_run_backtrack.exit.i, label %458

; <label>:458                                     ; preds = %457
  call void @free(i8* %60) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.i

; <label>:459                                     ; preds = %15
  %460 = bitcast i32* %next_c.i1.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %460) nounwind
  store i32 0, i32* %next_c.i1.i, align 4, !tbaa !6
  %461 = and i32 %eflags, 1
  %462 = and i32 %eflags, 2
  %463 = getelementptr inbounds i8* %2, i64 68
  %464 = bitcast i8* %463 to i32*
  %465 = load i32* %464, align 4, !tbaa !6
  %466 = and i32 %465, 4
  %467 = icmp eq i32* %tags.0.i, null
  %num_tags.0.i.i = select i1 %467, i32 0, i32 %6
  %468 = shl i32 %num_tags.0.i.i, 2
  %469 = getelementptr inbounds i8* %2, i64 64
  %470 = bitcast i8* %469 to i32*
  %471 = load i32* %470, align 4, !tbaa !6
  %472 = shl i32 %471, 4
  %473 = add i32 %472, 16
  %474 = mul nsw i32 %471, %468
  %475 = add nsw i32 %473, %474
  %476 = shl i32 %475, 1
  %477 = sext i32 %468 to i64
  %478 = add i32 %468, 28
  %479 = add i32 %478, %472
  %480 = add i32 %479, %476
  %481 = sext i32 %480 to i64
  %482 = call i8* @malloc(i64 %481) nounwind optsize
  %483 = icmp eq i8* %482, null
  br i1 %483, label %tre_tnfa_run_backtrack.exit.thread.i, label %484

; <label>:484                                     ; preds = %459
  %485 = sext i32 %472 to i64
  %486 = call i8* @memset(i8* %482, i32 0, i64 %481) nounwind optsize
  %487 = bitcast i8* %482 to i32*
  %488 = getelementptr inbounds i8* %482, i64 %477
  %489 = ptrtoint i8* %488 to i64
  %490 = and i64 %489, 7
  %491 = sub i64 8, %490
  %492 = icmp eq i64 %490, 0
  %..i.i = select i1 %492, i64 0, i64 %491
  %.sum.i2.i = add i64 %..i.i, %477
  %493 = getelementptr inbounds i8* %482, i64 %.sum.i2.i
  %494 = bitcast i8* %493 to %struct.tre_tnfa_reach_t*
  %495 = sext i32 %473 to i64
  %.sum1.i.i = add i64 %.sum.i2.i, %495
  %496 = getelementptr inbounds i8* %482, i64 %.sum1.i.i
  %497 = ptrtoint i8* %496 to i64
  %498 = and i64 %497, 7
  %499 = icmp eq i64 %498, 0
  %500 = sub i64 8, %498
  %501 = select i1 %499, i64 0, i64 %500
  %.sum2.i.i = add i64 %501, %.sum1.i.i
  %502 = getelementptr inbounds i8* %482, i64 %.sum2.i.i
  %503 = bitcast i8* %502 to %struct.tre_tnfa_reach_t*
  %.sum3.i.i = add i64 %.sum2.i.i, %495
  %504 = getelementptr inbounds i8* %482, i64 %.sum3.i.i
  %505 = ptrtoint i8* %504 to i64
  %506 = and i64 %505, 7
  %507 = sub i64 8, %506
  %508 = icmp eq i64 %506, 0
  %.8.i.i = select i1 %508, i64 0, i64 %507
  %.sum4.i.i = add i64 %.8.i.i, %.sum3.i.i
  %509 = getelementptr inbounds i8* %482, i64 %.sum4.i.i
  %510 = bitcast i8* %509 to %struct.tre_reach_pos_t*
  %.sum5.i.i = add i64 %.sum4.i.i, %485
  %511 = getelementptr inbounds i8* %482, i64 %.sum5.i.i
  %512 = ptrtoint i8* %511 to i64
  %513 = and i64 %512, 7
  %514 = load i32* %470, align 4, !tbaa !6
  %515 = icmp sgt i32 %514, 0
  br i1 %515, label %.lr.ph75.i.i, label %._crit_edge71.i.i

.lr.ph75.i.i:                                     ; preds = %484
  %516 = sub i64 8, %513
  %517 = icmp eq i64 %513, 0
  %518 = select i1 %517, i64 0, i64 %516
  %.sum6.i.i = add i64 %518, %.sum5.i.i
  %519 = getelementptr inbounds i8* %482, i64 %.sum6.i.i
  %.sum7.i.i = shl nsw i64 %477, 1
  br label %520

; <label>:520                                     ; preds = %520, %.lr.ph75.i.i
  %indvars.iv100.i.i = phi i64 [ 0, %.lr.ph75.i.i ], [ %indvars.iv.next101.i.i, %520 ]
  %tmp_buf.073.i.i = phi i8* [ %519, %.lr.ph75.i.i ], [ %526, %520 ]
  %521 = bitcast i8* %tmp_buf.073.i.i to i32*
  %522 = getelementptr inbounds %struct.tre_tnfa_reach_t* %503, i64 %indvars.iv100.i.i, i32 1
  store i32* %521, i32** %522, align 8, !tbaa !7
  %523 = getelementptr inbounds i8* %tmp_buf.073.i.i, i64 %477
  %524 = bitcast i8* %523 to i32*
  %525 = getelementptr inbounds %struct.tre_tnfa_reach_t* %494, i64 %indvars.iv100.i.i, i32 1
  store i32* %524, i32** %525, align 8, !tbaa !7
  %526 = getelementptr inbounds i8* %tmp_buf.073.i.i, i64 %.sum7.i.i
  %indvars.iv.next101.i.i = add i64 %indvars.iv100.i.i, 1
  %lftr.wideiv88 = trunc i64 %indvars.iv.next101.i.i to i32
  %exitcond89 = icmp eq i32 %lftr.wideiv88, %514
  br i1 %exitcond89, label %.lr.ph70.i.i, label %520

.lr.ph70.i.i:                                     ; preds = %.lr.ph70.i.i, %520
  %indvars.iv98.i.i = phi i64 [ %indvars.iv.next99.i.i, %.lr.ph70.i.i ], [ 0, %520 ]
  %527 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %indvars.iv98.i.i, i32 0
  store i32 -1, i32* %527, align 4, !tbaa !6
  %indvars.iv.next99.i.i = add i64 %indvars.iv98.i.i, 1
  %528 = load i32* %470, align 4, !tbaa !6
  %529 = trunc i64 %indvars.iv.next99.i.i to i32
  %530 = icmp slt i32 %529, %528
  br i1 %530, label %.lr.ph70.i.i, label %._crit_edge71.i.i

._crit_edge71.i.i:                                ; preds = %.lr.ph70.i.i, %484
  %531 = load i32* %next_c.i1.i, align 4, !tbaa !6
  %532 = call i32 @mbtowc(i32* %next_c.i1.i, i8* %str, i64 4) nounwind optsize
  %533 = icmp slt i32 %532, 1
  br i1 %533, label %534, label %538

; <label>:534                                     ; preds = %._crit_edge71.i.i
  %535 = icmp slt i32 %532, 0
  br i1 %535, label %tre_tnfa_run_backtrack.exit.thread.i, label %536

; <label>:536                                     ; preds = %534
  %537 = add nsw i32 %532, 1
  br label %538

; <label>:538                                     ; preds = %536, %._crit_edge71.i.i
  %pos_add_next.0.i3.i = phi i32 [ %537, %536 ], [ %532, %._crit_edge71.i.i ]
  %539 = sext i32 %pos_add_next.0.i3.i to i64
  %540 = getelementptr inbounds i8* %str, i64 %539
  %541 = getelementptr inbounds i8* %2, i64 16
  %542 = bitcast i8* %541 to %struct.tnfa_transition.525**
  %543 = icmp eq i32 %466, 0
  %544 = icmp eq i32 %461, 0
  %545 = icmp sgt i32 %num_tags.0.i.i, 0
  %546 = getelementptr inbounds i8* %2, i64 24
  %547 = bitcast i8* %546 to %struct.tnfa_transition.525**
  %548 = getelementptr inbounds i8* %2, i64 48
  %549 = bitcast i8* %548 to i32**
  %550 = icmp eq i32 %num_tags.0.i.i, 0
  %.not111.i.i = xor i1 %545, true
  br label %551

; <label>:551                                     ; preds = %._crit_edge63.i.i, %538
  %reach_next.0.i.i = phi %struct.tre_tnfa_reach_t* [ %494, %538 ], [ %reach.0.i.i, %._crit_edge63.i.i ]
  %reach.0.i.i = phi %struct.tre_tnfa_reach_t* [ %503, %538 ], [ %reach_next.0.i.i, %._crit_edge63.i.i ]
  %reach_next_i.0.i.i = phi %struct.tre_tnfa_reach_t* [ %494, %538 ], [ %reach_next_i.3.lcssa.i.i, %._crit_edge63.i.i ]
  %pos_add_next.1.i4.i = phi i32 [ %pos_add_next.0.i3.i, %538 ], [ %pos_add_next.2.i20.i, %._crit_edge63.i.i ]
  %pos.0.i5.i = phi i32 [ 0, %538 ], [ %630, %._crit_edge63.i.i ]
  %str_byte.0.i6.i = phi i8* [ %540, %538 ], [ %639, %._crit_edge63.i.i ]
  %prev_c.0.i7.i = phi i32 [ %531, %538 ], [ %627, %._crit_edge63.i.i ]
  %match_eo.0.i8.i = phi i32 [ -1, %538 ], [ %match_eo.5.lcssa.i.i, %._crit_edge63.i.i ]
  %tmp_tags.0.i.i = phi i32* [ %487, %538 ], [ %tmp_tags.1.lcssa.i.i, %._crit_edge63.i.i ]
  %552 = icmp slt i32 %match_eo.0.i8.i, 0
  br i1 %552, label %553, label %624

; <label>:553                                     ; preds = %551
  %554 = load %struct.tnfa_transition.525** %542, align 8, !tbaa !7
  %555 = icmp slt i32 %pos.0.i5.i, 1
  %or.cond.i9.i = and i1 %555, %544
  %556 = icmp ne i32 %prev_c.0.i7.i, 10
  %or.cond9.i.i = or i1 %556, %543
  %or.cond9.not.i.i = xor i1 %or.cond9.i.i, true
  br label %.outer.i.i

.outer.i.i:                                       ; preds = %.loopexit24.i.i, %553
  %trans_i.0.ph.i.i = phi %struct.tnfa_transition.525* [ %554, %553 ], [ %621, %.loopexit24.i.i ]
  %reach_next_i.1.ph.i.i = phi %struct.tre_tnfa_reach_t* [ %reach_next_i.0.i.i, %553 ], [ %reach_next_i.2.i.i, %.loopexit24.i.i ]
  %match_eo.1.ph.i10.i = phi i32 [ %match_eo.0.i8.i, %553 ], [ %match_eo.3.i.i, %.loopexit24.i.i ]
  %557 = load i32* %next_c.i1.i, align 4, !tbaa !6
  %558 = or i32 %557, %462
  %559 = icmp eq i32 %558, 0
  %560 = icmp ne i32 %557, 10
  %or.cond11.i.i = or i1 %560, %543
  %or.cond11.not.i.i = xor i1 %or.cond11.i.i, true
  br label %561

; <label>:561                                     ; preds = %582, %.outer.i.i
  %trans_i.0.i11.i = phi %struct.tnfa_transition.525* [ %583, %582 ], [ %trans_i.0.ph.i.i, %.outer.i.i ]
  %562 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i11.i, i64 0, i32 2
  %563 = load %struct.tnfa_transition.525** %562, align 8, !tbaa !7
  %564 = icmp eq %struct.tnfa_transition.525* %563, null
  br i1 %564, label %622, label %565

; <label>:565                                     ; preds = %561
  %566 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i11.i, i64 0, i32 3
  %567 = load i32* %566, align 4, !tbaa !6
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %568, i32 0
  %570 = load i32* %569, align 4, !tbaa !6
  %571 = icmp slt i32 %570, %pos.0.i5.i
  br i1 %571, label %572, label %.loopexit24.i.i

; <label>:572                                     ; preds = %565
  %573 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i11.i, i64 0, i32 5
  %574 = load i32* %573, align 4, !tbaa !6
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %584, label %576

; <label>:576                                     ; preds = %572
  %577 = and i32 %574, 1
  %578 = icmp eq i32 %577, 0
  %brmerge.i12.i = or i1 %578, %or.cond.i9.i
  %brmerge108.i.i = or i1 %brmerge.i12.i, %or.cond9.not.i.i
  br i1 %brmerge108.i.i, label %579, label %582

; <label>:579                                     ; preds = %576
  %580 = and i32 %574, 2
  %581 = icmp eq i32 %580, 0
  %brmerge109.i.i = or i1 %581, %559
  %brmerge110.i.i = or i1 %brmerge109.i.i, %or.cond11.not.i.i
  br i1 %brmerge110.i.i, label %584, label %582

; <label>:582                                     ; preds = %579, %576
  %583 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i11.i, i64 1
  br label %561

; <label>:584                                     ; preds = %579, %572
  %585 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 0, i32 0
  store %struct.tnfa_transition.525* %563, %struct.tnfa_transition.525** %585, align 8, !tbaa !7
  br i1 %545, label %.lr.ph19.i13.i, label %._crit_edge.i.i

.lr.ph19.i13.i:                                   ; preds = %584
  %586 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 0, i32 1
  %587 = load i32** %586, align 8, !tbaa !7
  br label %588

; <label>:588                                     ; preds = %588, %.lr.ph19.i13.i
  %indvars.iv76.i.i = phi i64 [ 0, %.lr.ph19.i13.i ], [ %indvars.iv.next77.i.i, %588 ]
  %589 = getelementptr inbounds i32* %587, i64 %indvars.iv76.i.i
  store i32 -1, i32* %589, align 4, !tbaa !6
  %indvars.iv.next77.i.i = add i64 %indvars.iv76.i.i, 1
  %lftr.wideiv77 = trunc i64 %indvars.iv.next77.i.i to i32
  %exitcond78 = icmp eq i32 %lftr.wideiv77, %num_tags.0.i.i
  br i1 %exitcond78, label %._crit_edge.i.i, label %588

._crit_edge.i.i:                                  ; preds = %588, %584
  %590 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i11.i, i64 0, i32 4
  %591 = load i32** %590, align 8, !tbaa !7
  %592 = icmp eq i32* %591, null
  br i1 %592, label %.loopexit21.i.i, label %.preheader20.i.i

.preheader20.i.i:                                 ; preds = %._crit_edge.i.i
  %593 = load i32* %591, align 4, !tbaa !6
  %594 = icmp sgt i32 %593, -1
  br i1 %594, label %.lr.ph23.i.i, label %.loopexit21.i.i

.lr.ph23.i.i:                                     ; preds = %.preheader20.i.i
  %595 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 0, i32 1
  br label %596

; <label>:596                                     ; preds = %603, %.lr.ph23.i.i
  %597 = phi i32 [ %593, %.lr.ph23.i.i ], [ %605, %603 ]
  %tag_i.022.i.i = phi i32* [ %591, %.lr.ph23.i.i ], [ %604, %603 ]
  %598 = icmp slt i32 %597, %num_tags.0.i.i
  br i1 %598, label %599, label %603

; <label>:599                                     ; preds = %596
  %600 = sext i32 %597 to i64
  %601 = load i32** %595, align 8, !tbaa !7
  %602 = getelementptr inbounds i32* %601, i64 %600
  store i32 %pos.0.i5.i, i32* %602, align 4, !tbaa !6
  br label %603

; <label>:603                                     ; preds = %599, %596
  %604 = getelementptr inbounds i32* %tag_i.022.i.i, i64 1
  %605 = load i32* %604, align 4, !tbaa !6
  %606 = icmp sgt i32 %605, -1
  br i1 %606, label %596, label %.loopexit21.i.i

.loopexit21.i.i:                                  ; preds = %603, %.preheader20.i.i, %._crit_edge.i.i
  %607 = load %struct.tnfa_transition.525** %547, align 8, !tbaa !7
  %.not.i14.i = icmp ne %struct.tnfa_transition.525* %563, %607
  %brmerge112.i.i = or i1 %.not.i14.i, %.not111.i.i
  br i1 %brmerge112.i.i, label %.loopexit21.i.._crit_edge106.i_crit_edge.i, label %.lr.ph.i15.i

.loopexit21.i.._crit_edge106.i_crit_edge.i:       ; preds = %.loopexit21.i.i
  %match_eo.1.ph.mux.i.i = select i1 %.not.i14.i, i32 %match_eo.1.ph.i10.i, i32 %pos.0.i5.i
  %.pre121.i = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 0, i32 1
  br label %._crit_edge106.i.i

.lr.ph.i15.i:                                     ; preds = %.loopexit21.i.i
  %608 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 0, i32 1
  %609 = load i32** %608, align 8, !tbaa !7
  br label %610

; <label>:610                                     ; preds = %610, %.lr.ph.i15.i
  %indvars.iv.i16.i = phi i64 [ 0, %.lr.ph.i15.i ], [ %indvars.iv.next.i17.i, %610 ]
  %611 = getelementptr inbounds i32* %609, i64 %indvars.iv.i16.i
  %612 = load i32* %611, align 4, !tbaa !6
  %613 = getelementptr inbounds i32* %tags.0.i, i64 %indvars.iv.i16.i
  store i32 %612, i32* %613, align 4, !tbaa !6
  %indvars.iv.next.i17.i = add i64 %indvars.iv.i16.i, 1
  %lftr.wideiv75 = trunc i64 %indvars.iv.next.i17.i to i32
  %exitcond76 = icmp eq i32 %lftr.wideiv75, %num_tags.0.i.i
  br i1 %exitcond76, label %._crit_edge106.i.i, label %610

._crit_edge106.i.i:                               ; preds = %610, %.loopexit21.i.._crit_edge106.i_crit_edge.i
  %.pre-phi.i = phi i32** [ %.pre121.i, %.loopexit21.i.._crit_edge106.i_crit_edge.i ], [ %608, %610 ]
  %match_eo.2.i18.i = phi i32 [ %match_eo.1.ph.mux.i.i, %.loopexit21.i.._crit_edge106.i_crit_edge.i ], [ %pos.0.i5.i, %610 ]
  %614 = load i32* %566, align 4, !tbaa !6
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %615, i32 0
  store i32 %pos.0.i5.i, i32* %616, align 4, !tbaa !6
  %617 = load i32* %566, align 4, !tbaa !6
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %618, i32 1
  store i32** %.pre-phi.i, i32*** %619, align 8, !tbaa !7
  %620 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 1
  br label %.loopexit24.i.i

.loopexit24.i.i:                                  ; preds = %._crit_edge106.i.i, %565
  %reach_next_i.2.i.i = phi %struct.tre_tnfa_reach_t* [ %620, %._crit_edge106.i.i ], [ %reach_next_i.1.ph.i.i, %565 ]
  %match_eo.3.i.i = phi i32 [ %match_eo.2.i18.i, %._crit_edge106.i.i ], [ %match_eo.1.ph.i10.i, %565 ]
  %621 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.0.i11.i, i64 1
  br label %.outer.i.i

; <label>:622                                     ; preds = %561
  %623 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.1.ph.i.i, i64 0, i32 0
  store %struct.tnfa_transition.525* null, %struct.tnfa_transition.525** %623, align 8, !tbaa !7
  br label %626

; <label>:624                                     ; preds = %551
  %625 = icmp eq %struct.tre_tnfa_reach_t* %reach_next_i.0.i.i, %reach_next.0.i.i
  %or.cond12.i.i = or i1 %550, %625
  br i1 %or.cond12.i.i, label %786, label %._crit_edge105.i.i

._crit_edge105.i.i:                               ; preds = %624
  %.pre.i19.i = load i32* %next_c.i1.i, align 4, !tbaa !6
  br label %626

; <label>:626                                     ; preds = %._crit_edge105.i.i, %622
  %627 = phi i32 [ %557, %622 ], [ %.pre.i19.i, %._crit_edge105.i.i ]
  %match_eo.4.i.i = phi i32 [ %match_eo.1.ph.i10.i, %622 ], [ %match_eo.0.i8.i, %._crit_edge105.i.i ]
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %786, label %629

; <label>:629                                     ; preds = %626
  %630 = add nsw i32 %pos.0.i5.i, %pos_add_next.1.i4.i
  %631 = call i32 @mbtowc(i32* %next_c.i1.i, i8* %str_byte.0.i6.i, i64 4) nounwind optsize
  %632 = icmp slt i32 %631, 1
  br i1 %632, label %633, label %637

; <label>:633                                     ; preds = %629
  %634 = icmp slt i32 %631, 0
  br i1 %634, label %tre_tnfa_run_backtrack.exit.thread.i, label %635

; <label>:635                                     ; preds = %633
  %636 = add nsw i32 %631, 1
  br label %637

; <label>:637                                     ; preds = %635, %629
  %pos_add_next.2.i20.i = phi i32 [ %636, %635 ], [ %631, %629 ]
  %638 = sext i32 %pos_add_next.2.i20.i to i64
  %639 = getelementptr inbounds i8* %str_byte.0.i6.i, i64 %638
  %640 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next.0.i.i, i64 0, i32 0
  %641 = load %struct.tnfa_transition.525** %640, align 8, !tbaa !7
  %642 = icmp eq %struct.tnfa_transition.525* %641, null
  br i1 %642, label %._crit_edge63.i.i, label %.preheader47.lr.ph.i.i

.preheader47.lr.ph.i.i:                           ; preds = %637
  %643 = icmp slt i32 %630, 1
  %or.cond13.i.i = and i1 %643, %544
  %644 = icmp ne i32 %627, 10
  %or.cond14.i.i = or i1 %644, %543
  %or.cond14.not.i.i = xor i1 %or.cond14.i.i, true
  br label %.preheader47.i.i

.preheader47.i.i:                                 ; preds = %._crit_edge56.i.i, %.preheader47.lr.ph.i.i
  %645 = phi %struct.tnfa_transition.525* [ %641, %.preheader47.lr.ph.i.i ], [ %783, %._crit_edge56.i.i ]
  %tmp_tags.162.i.i = phi i32* [ %tmp_tags.0.i.i, %.preheader47.lr.ph.i.i ], [ %tmp_tags.2.lcssa.i.i, %._crit_edge56.i.i ]
  %match_eo.561.i.i = phi i32 [ %match_eo.4.i.i, %.preheader47.lr.ph.i.i ], [ %match_eo.6.lcssa.i.i, %._crit_edge56.i.i ]
  %reach_next_i.360.i.i = phi %struct.tre_tnfa_reach_t* [ %reach.0.i.i, %.preheader47.lr.ph.i.i ], [ %reach_next_i.4.lcssa.i.i, %._crit_edge56.i.i ]
  %reach_i.059.i.i = phi %struct.tre_tnfa_reach_t* [ %reach_next.0.i.i, %.preheader47.lr.ph.i.i ], [ %781, %._crit_edge56.i.i ]
  %646 = getelementptr inbounds %struct.tnfa_transition.525* %645, i64 0, i32 2
  %647 = load %struct.tnfa_transition.525** %646, align 8, !tbaa !7
  %648 = icmp eq %struct.tnfa_transition.525* %647, null
  br i1 %648, label %._crit_edge56.i.i, label %.lr.ph55.i21.i

.lr.ph55.i21.i:                                   ; preds = %.preheader47.i.i
  %649 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_i.059.i.i, i64 0, i32 1
  br label %650

; <label>:650                                     ; preds = %.loopexit32.i.i, %.lr.ph55.i21.i
  %651 = phi %struct.tnfa_transition.525** [ %646, %.lr.ph55.i21.i ], [ %778, %.loopexit32.i.i ]
  %tmp_tags.253.i.i = phi i32* [ %tmp_tags.162.i.i, %.lr.ph55.i21.i ], [ %tmp_tags.3.i.i, %.loopexit32.i.i ]
  %match_eo.652.i.i = phi i32 [ %match_eo.561.i.i, %.lr.ph55.i21.i ], [ %match_eo.9.i.i, %.loopexit32.i.i ]
  %reach_next_i.451.i.i = phi %struct.tre_tnfa_reach_t* [ %reach_next_i.360.i.i, %.lr.ph55.i21.i ], [ %reach_next_i.5.i.i, %.loopexit32.i.i ]
  %trans_i.148.i.i = phi %struct.tnfa_transition.525* [ %645, %.lr.ph55.i21.i ], [ %777, %.loopexit32.i.i ]
  %652 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 0
  %653 = load i32* %652, align 4, !tbaa !6
  %654 = icmp sgt i32 %653, %627
  br i1 %654, label %.loopexit32.i.i, label %655

; <label>:655                                     ; preds = %650
  %656 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 1
  %657 = load i32* %656, align 4, !tbaa !6
  %658 = icmp slt i32 %657, %627
  br i1 %658, label %.loopexit32.i.i, label %659

; <label>:659                                     ; preds = %655
  %660 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 5
  %661 = load i32* %660, align 4, !tbaa !6
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %.preheader39.i.i, label %663

; <label>:663                                     ; preds = %659
  %664 = and i32 %661, 1
  %665 = icmp eq i32 %664, 0
  %brmerge113.i.i = or i1 %665, %or.cond13.i.i
  %brmerge114.i.i = or i1 %brmerge113.i.i, %or.cond14.not.i.i
  br i1 %brmerge114.i.i, label %666, label %.loopexit32.i.i

; <label>:666                                     ; preds = %663
  %667 = and i32 %661, 2
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %674, label %669

; <label>:669                                     ; preds = %666
  %670 = load i32* %next_c.i1.i, align 4, !tbaa !6
  %671 = or i32 %670, %462
  %672 = icmp ne i32 %671, 0
  %673 = icmp ne i32 %670, 10
  %or.cond16.i.i = or i1 %673, %543
  %or.cond115.i.i = and i1 %672, %or.cond16.i.i
  br i1 %or.cond115.i.i, label %.loopexit32.i.i, label %674

; <label>:674                                     ; preds = %669, %666
  %675 = and i32 %661, 4
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %686, label %677

; <label>:677                                     ; preds = %674
  %678 = load i32* %464, align 4, !tbaa !6
  %679 = and i32 %678, 2
  %680 = icmp eq i32 %679, 0
  br i1 %680, label %681, label %686

; <label>:681                                     ; preds = %677
  %682 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 6, i32 0
  %683 = load i32* %682, align 4, !tbaa !6
  %684 = call i32 @iswctype(i32 %627, i32 %683) nounwind optsize
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %.loopexit32.i.i, label %._crit_edge104.i.i

._crit_edge104.i.i:                               ; preds = %681
  %.pre107.i.i = load i32* %660, align 4, !tbaa !6
  br label %686

; <label>:686                                     ; preds = %._crit_edge104.i.i, %677, %674
  %687 = phi i32 [ %.pre107.i.i, %._crit_edge104.i.i ], [ %661, %677 ], [ %661, %674 ]
  %688 = and i32 %687, 4
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %._crit_edge102.i.i, label %690

; <label>:690                                     ; preds = %686
  %691 = load i32* %464, align 4, !tbaa !6
  %692 = and i32 %691, 2
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %._crit_edge102.i.i, label %694

; <label>:694                                     ; preds = %690
  %695 = call i32 @towlower(i32 %627) nounwind optsize
  %696 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 6, i32 0
  %697 = load i32* %696, align 4, !tbaa !6
  %698 = call i32 @iswctype(i32 %695, i32 %697) nounwind optsize
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %700, label %._crit_edge102.i.i

; <label>:700                                     ; preds = %694
  %701 = call i32 @towupper(i32 %627) nounwind optsize
  %702 = load i32* %696, align 4, !tbaa !6
  %703 = call i32 @iswctype(i32 %701, i32 %702) nounwind optsize
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %.loopexit32.i.i, label %._crit_edge102.i.i

._crit_edge102.i.i:                               ; preds = %700, %694, %690, %686
  %705 = load i32* %660, align 4, !tbaa !6
  %706 = and i32 %705, 8
  %707 = icmp eq i32 %706, 0
  br i1 %707, label %.preheader39.i.i, label %708

; <label>:708                                     ; preds = %._crit_edge102.i.i
  %709 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 7
  %710 = load i32** %709, align 8, !tbaa !7
  %711 = load i32* %464, align 4, !tbaa !6
  %712 = and i32 %711, 2
  %713 = call fastcc i32 @tre_neg_char_classes_match(i32* %710, i32 %627, i32 %712) nounwind optsize
  %714 = icmp eq i32 %713, 0
  br i1 %714, label %.preheader39.i.i, label %.loopexit32.i.i

.preheader39.i.i:                                 ; preds = %708, %._crit_edge102.i.i, %659
  br i1 %545, label %.lr.ph41.i.i, label %._crit_edge42.i.i

.lr.ph41.i.i:                                     ; preds = %.preheader39.i.i
  %715 = load i32** %649, align 8, !tbaa !7
  br label %716

; <label>:716                                     ; preds = %716, %.lr.ph41.i.i
  %indvars.iv94.i.i = phi i64 [ 0, %.lr.ph41.i.i ], [ %indvars.iv.next95.i.i, %716 ]
  %717 = getelementptr inbounds i32* %715, i64 %indvars.iv94.i.i
  %718 = load i32* %717, align 4, !tbaa !6
  %719 = getelementptr inbounds i32* %tmp_tags.253.i.i, i64 %indvars.iv94.i.i
  store i32 %718, i32* %719, align 4, !tbaa !6
  %indvars.iv.next95.i.i = add i64 %indvars.iv94.i.i, 1
  %lftr.wideiv73 = trunc i64 %indvars.iv.next95.i.i to i32
  %exitcond74 = icmp eq i32 %lftr.wideiv73, %num_tags.0.i.i
  br i1 %exitcond74, label %._crit_edge42.i.i, label %716

._crit_edge42.i.i:                                ; preds = %716, %.preheader39.i.i
  %720 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 4
  %721 = load i32** %720, align 8, !tbaa !7
  %722 = icmp eq i32* %721, null
  br i1 %722, label %.loopexit44.i.i, label %.preheader43.i.i

.preheader43.i.i:                                 ; preds = %._crit_edge42.i.i
  %723 = load i32* %721, align 4, !tbaa !6
  %724 = icmp sgt i32 %723, -1
  br i1 %724, label %.lr.ph46.i.i, label %.loopexit44.i.i

.lr.ph46.i.i:                                     ; preds = %730, %.preheader43.i.i
  %725 = phi i32 [ %732, %730 ], [ %723, %.preheader43.i.i ]
  %tag_i.145.i.i = phi i32* [ %731, %730 ], [ %721, %.preheader43.i.i ]
  %726 = icmp slt i32 %725, %num_tags.0.i.i
  br i1 %726, label %727, label %730

; <label>:727                                     ; preds = %.lr.ph46.i.i
  %728 = sext i32 %725 to i64
  %729 = getelementptr inbounds i32* %tmp_tags.253.i.i, i64 %728
  store i32 %630, i32* %729, align 4, !tbaa !6
  br label %730

; <label>:730                                     ; preds = %727, %.lr.ph46.i.i
  %731 = getelementptr inbounds i32* %tag_i.145.i.i, i64 1
  %732 = load i32* %731, align 4, !tbaa !6
  %733 = icmp sgt i32 %732, -1
  br i1 %733, label %.lr.ph46.i.i, label %.loopexit44.i.i

.loopexit44.i.i:                                  ; preds = %730, %.preheader43.i.i, %._crit_edge42.i.i
  %734 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 0, i32 3
  %735 = load i32* %734, align 4, !tbaa !6
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %736, i32 0
  %738 = load i32* %737, align 4, !tbaa !6
  %739 = icmp slt i32 %738, %630
  br i1 %739, label %740, label %764

; <label>:740                                     ; preds = %.loopexit44.i.i
  %741 = load %struct.tnfa_transition.525** %651, align 8, !tbaa !7
  %742 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.451.i.i, i64 0, i32 0
  store %struct.tnfa_transition.525* %741, %struct.tnfa_transition.525** %742, align 8, !tbaa !7
  %743 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.451.i.i, i64 0, i32 1
  %744 = load i32** %743, align 8, !tbaa !7
  store i32* %tmp_tags.253.i.i, i32** %743, align 8, !tbaa !7
  store i32 %630, i32* %737, align 4, !tbaa !6
  %745 = load i32* %734, align 4, !tbaa !6
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %746, i32 1
  store i32** %743, i32*** %747, align 8, !tbaa !7
  %748 = load %struct.tnfa_transition.525** %742, align 8, !tbaa !7
  %749 = load %struct.tnfa_transition.525** %547, align 8, !tbaa !7
  %750 = icmp eq %struct.tnfa_transition.525* %748, %749
  br i1 %750, label %751, label %.loopexit36.i.i

; <label>:751                                     ; preds = %740
  %752 = icmp eq i32 %match_eo.652.i.i, -1
  br i1 %752, label %.preheader35.i.i, label %753

; <label>:753                                     ; preds = %751
  br i1 %545, label %754, label %.loopexit36.i.i

; <label>:754                                     ; preds = %753
  %755 = load i32** %743, align 8, !tbaa !7
  %756 = load i32* %755, align 4, !tbaa !6
  %757 = load i32* %tags.0.i, align 4, !tbaa !6
  %758 = icmp sgt i32 %756, %757
  br i1 %758, label %.loopexit36.i.i, label %.lr.ph38.i.i

.preheader35.i.i:                                 ; preds = %751
  br i1 %545, label %.preheader35.i..lr.ph38.i_crit_edge.i, label %.loopexit36.i.i

.preheader35.i..lr.ph38.i_crit_edge.i:            ; preds = %.preheader35.i.i
  %.pre.i = load i32** %743, align 8, !tbaa !7
  br label %.lr.ph38.i.i

.lr.ph38.i.i:                                     ; preds = %.preheader35.i..lr.ph38.i_crit_edge.i, %754
  %759 = phi i32* [ %.pre.i, %.preheader35.i..lr.ph38.i_crit_edge.i ], [ %755, %754 ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i, %.lr.ph38.i.i
  %indvars.iv90.i.i = phi i64 [ 0, %.lr.ph38.i.i ], [ %indvars.iv.next91.i.i, %._crit_edge.i ]
  %760 = getelementptr inbounds i32* %759, i64 %indvars.iv90.i.i
  %761 = load i32* %760, align 4, !tbaa !6
  %762 = getelementptr inbounds i32* %tags.0.i, i64 %indvars.iv90.i.i
  store i32 %761, i32* %762, align 4, !tbaa !6
  %indvars.iv.next91.i.i = add i64 %indvars.iv90.i.i, 1
  %lftr.wideiv71 = trunc i64 %indvars.iv.next91.i.i to i32
  %exitcond72 = icmp eq i32 %lftr.wideiv71, %num_tags.0.i.i
  br i1 %exitcond72, label %.loopexit36.i.i, label %._crit_edge.i

.loopexit36.i.i:                                  ; preds = %._crit_edge.i, %.preheader35.i.i, %754, %753, %740
  %match_eo.7.i.i = phi i32 [ %match_eo.652.i.i, %754 ], [ %match_eo.652.i.i, %753 ], [ %match_eo.652.i.i, %740 ], [ %630, %.preheader35.i.i ], [ %630, %._crit_edge.i ]
  %763 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.451.i.i, i64 1
  br label %.loopexit32.i.i

; <label>:764                                     ; preds = %.loopexit44.i.i
  %765 = load i32** %549, align 8, !tbaa !7
  %766 = getelementptr inbounds %struct.tre_reach_pos_t* %510, i64 %736, i32 1
  %767 = load i32*** %766, align 8, !tbaa !7
  %768 = load i32** %767, align 8, !tbaa !7
  %769 = call fastcc i32 @tre_tag_order(i32 %num_tags.0.i.i, i32* %765, i32* %tmp_tags.253.i.i, i32* %768) nounwind optsize
  %770 = icmp eq i32 %769, 0
  br i1 %770, label %.loopexit32.i.i, label %771

; <label>:771                                     ; preds = %764
  store i32* %tmp_tags.253.i.i, i32** %767, align 8, !tbaa !7
  %772 = load %struct.tnfa_transition.525** %651, align 8, !tbaa !7
  %773 = load %struct.tnfa_transition.525** %547, align 8, !tbaa !7
  %.not116.i.i = icmp ne %struct.tnfa_transition.525* %772, %773
  %brmerge118.i.i = or i1 %.not116.i.i, %.not111.i.i
  %match_eo.652.mux.i.i = select i1 %.not116.i.i, i32 %match_eo.652.i.i, i32 %630
  br i1 %brmerge118.i.i, label %.loopexit32.i.i, label %.lr.ph34.i.i

.lr.ph34.i.i:                                     ; preds = %.lr.ph34.i.i, %771
  %indvars.iv86.i.i = phi i64 [ %indvars.iv.next87.i.i, %.lr.ph34.i.i ], [ 0, %771 ]
  %774 = getelementptr inbounds i32* %tmp_tags.253.i.i, i64 %indvars.iv86.i.i
  %775 = load i32* %774, align 4, !tbaa !6
  %776 = getelementptr inbounds i32* %tags.0.i, i64 %indvars.iv86.i.i
  store i32 %775, i32* %776, align 4, !tbaa !6
  %indvars.iv.next87.i.i = add i64 %indvars.iv86.i.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next87.i.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %num_tags.0.i.i
  br i1 %exitcond, label %.loopexit32.i.i, label %.lr.ph34.i.i

.loopexit32.i.i:                                  ; preds = %.lr.ph34.i.i, %771, %764, %.loopexit36.i.i, %708, %700, %681, %669, %663, %655, %650
  %reach_next_i.5.i.i = phi %struct.tre_tnfa_reach_t* [ %reach_next_i.451.i.i, %708 ], [ %763, %.loopexit36.i.i ], [ %reach_next_i.451.i.i, %764 ], [ %reach_next_i.451.i.i, %700 ], [ %reach_next_i.451.i.i, %681 ], [ %reach_next_i.451.i.i, %655 ], [ %reach_next_i.451.i.i, %650 ], [ %reach_next_i.451.i.i, %771 ], [ %reach_next_i.451.i.i, %663 ], [ %reach_next_i.451.i.i, %669 ], [ %reach_next_i.451.i.i, %.lr.ph34.i.i ]
  %match_eo.9.i.i = phi i32 [ %match_eo.652.i.i, %708 ], [ %match_eo.7.i.i, %.loopexit36.i.i ], [ %match_eo.652.i.i, %764 ], [ %match_eo.652.i.i, %700 ], [ %match_eo.652.i.i, %681 ], [ %match_eo.652.i.i, %655 ], [ %match_eo.652.i.i, %650 ], [ %match_eo.652.mux.i.i, %771 ], [ %match_eo.652.i.i, %663 ], [ %match_eo.652.i.i, %669 ], [ %630, %.lr.ph34.i.i ]
  %tmp_tags.3.i.i = phi i32* [ %tmp_tags.253.i.i, %708 ], [ %744, %.loopexit36.i.i ], [ %tmp_tags.253.i.i, %764 ], [ %tmp_tags.253.i.i, %700 ], [ %tmp_tags.253.i.i, %681 ], [ %tmp_tags.253.i.i, %655 ], [ %tmp_tags.253.i.i, %650 ], [ %768, %771 ], [ %tmp_tags.253.i.i, %663 ], [ %tmp_tags.253.i.i, %669 ], [ %768, %.lr.ph34.i.i ]
  %777 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 1
  %778 = getelementptr inbounds %struct.tnfa_transition.525* %trans_i.148.i.i, i64 1, i32 2
  %779 = load %struct.tnfa_transition.525** %778, align 8, !tbaa !7
  %780 = icmp eq %struct.tnfa_transition.525* %779, null
  br i1 %780, label %._crit_edge56.i.i, label %650

._crit_edge56.i.i:                                ; preds = %.loopexit32.i.i, %.preheader47.i.i
  %tmp_tags.2.lcssa.i.i = phi i32* [ %tmp_tags.162.i.i, %.preheader47.i.i ], [ %tmp_tags.3.i.i, %.loopexit32.i.i ]
  %match_eo.6.lcssa.i.i = phi i32 [ %match_eo.561.i.i, %.preheader47.i.i ], [ %match_eo.9.i.i, %.loopexit32.i.i ]
  %reach_next_i.4.lcssa.i.i = phi %struct.tre_tnfa_reach_t* [ %reach_next_i.360.i.i, %.preheader47.i.i ], [ %reach_next_i.5.i.i, %.loopexit32.i.i ]
  %781 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_i.059.i.i, i64 1
  %782 = getelementptr inbounds %struct.tre_tnfa_reach_t* %781, i64 0, i32 0
  %783 = load %struct.tnfa_transition.525** %782, align 8, !tbaa !7
  %784 = icmp eq %struct.tnfa_transition.525* %783, null
  br i1 %784, label %._crit_edge63.i.i, label %.preheader47.i.i

._crit_edge63.i.i:                                ; preds = %._crit_edge56.i.i, %637
  %tmp_tags.1.lcssa.i.i = phi i32* [ %tmp_tags.0.i.i, %637 ], [ %tmp_tags.2.lcssa.i.i, %._crit_edge56.i.i ]
  %match_eo.5.lcssa.i.i = phi i32 [ %match_eo.4.i.i, %637 ], [ %match_eo.6.lcssa.i.i, %._crit_edge56.i.i ]
  %reach_next_i.3.lcssa.i.i = phi %struct.tre_tnfa_reach_t* [ %reach.0.i.i, %637 ], [ %reach_next_i.4.lcssa.i.i, %._crit_edge56.i.i ]
  %785 = getelementptr inbounds %struct.tre_tnfa_reach_t* %reach_next_i.3.lcssa.i.i, i64 0, i32 0
  store %struct.tnfa_transition.525* null, %struct.tnfa_transition.525** %785, align 8, !tbaa !7
  br label %551

; <label>:786                                     ; preds = %626, %624
  %match_eo.10.i.i = phi i32 [ %match_eo.4.i.i, %626 ], [ %match_eo.0.i8.i, %624 ]
  call void @free(i8* %482) nounwind optsize
  %match_eo.10.lobit.i.i = lshr i32 %match_eo.10.i.i, 31
  br label %tre_tnfa_run_backtrack.exit.i

tre_tnfa_run_backtrack.exit.i:                    ; preds = %786, %458, %457
  %match_eo.10.i23.i = phi i32 [ %match_eo.10.i28.i, %457 ], [ %match_eo.10.i28.i, %458 ], [ %match_eo.10.i.i, %786 ]
  %status.0.i = phi i32 [ %ret.0.i.i, %457 ], [ %ret.0.i.i, %458 ], [ %match_eo.10.lobit.i.i, %786 ]
  %787 = icmp eq i32 %status.0.i, 0
  br i1 %787, label %788, label %tre_tnfa_run_backtrack.exit.thread.i

; <label>:788                                     ; preds = %tre_tnfa_run_backtrack.exit.i
  %789 = getelementptr inbounds i8* %2, i64 68
  %790 = bitcast i8* %789 to i32*
  %791 = load i32* %790, align 4, !tbaa !6
  call fastcc void @tre_fill_pmatch(i64 %nmatch, %struct.regmatch_t* %pmatch, i32 %791, %struct.tnfa.524* %3, i32* %tags.0.i, i32 %match_eo.10.i23.i) nounwind optsize
  br label %tre_tnfa_run_backtrack.exit.thread.i

tre_tnfa_run_backtrack.exit.thread.i:             ; preds = %788, %tre_tnfa_run_backtrack.exit.i, %633, %534, %459, %370, %356, %275, %264, %151, %137, %94, %.thread129.i, %.thread141.i.i, %.thread15.i.i, %20
  %status.0130.i = phi i32 [ 0, %788 ], [ %status.0.i, %tre_tnfa_run_backtrack.exit.i ], [ 12, %20 ], [ 12, %137 ], [ 12, %151 ], [ 12, %356 ], [ 12, %370 ], [ 12, %.thread15.i.i ], [ 12, %.thread141.i.i ], [ 12, %459 ], [ 1, %534 ], [ 12, %.thread129.i ], [ 1, %264 ], [ 1, %275 ], [ 1, %94 ], [ 1, %633 ]
  %792 = icmp eq i32* %tags.0.i, null
  br i1 %792, label %tre_match.exit, label %793

; <label>:793                                     ; preds = %tre_tnfa_run_backtrack.exit.thread.i
  %794 = bitcast i32* %tags.0.i to i8*
  call void @free(i8* %794) nounwind optsize
  br label %tre_match.exit

tre_match.exit:                                   ; preds = %793, %tre_tnfa_run_backtrack.exit.thread.i, %9
  %.0.i = phi i32 [ 12, %9 ], [ %status.0130.i, %tre_tnfa_run_backtrack.exit.thread.i ], [ %status.0130.i, %793 ]
  ret i32 %.0.i
}

define internal fastcc void @tre_fill_pmatch(i64 %nmatch, %struct.regmatch_t* nocapture %pmatch, i32 %cflags, %struct.tnfa.524* nocapture %tnfa, i32* nocapture %tags, i32 %match_eo) nounwind uwtable optsize {
  %1 = icmp sgt i32 %match_eo, -1
  br i1 %1, label %2, label %.critedge1.preheader

; <label>:2                                       ; preds = %0
  %3 = and i32 %cflags, 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %.critedge1.preheader

.critedge1.preheader:                             ; preds = %53, %.critedge, %2, %0
  %i.2.ph = phi i32 [ 0, %2 ], [ 0, %0 ], [ %i.1, %.critedge ], [ %i.1, %53 ]
  %5 = zext i32 %i.2.ph to i64
  %6 = icmp ult i64 %5, %nmatch
  br i1 %6, label %.critedge1, label %.critedge1._crit_edge

; <label>:7                                       ; preds = %2
  %8 = getelementptr inbounds %struct.tnfa.524* %tnfa, i64 0, i32 4
  %9 = load %struct.tre_submatch_data.526** %8, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.tnfa.524* %tnfa, i64 0, i32 5
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = getelementptr inbounds %struct.tnfa.524* %tnfa, i64 0, i32 8
  %13 = sext i32 %match_eo to i64
  br label %14

; <label>:14                                      ; preds = %50, %7
  %i.0 = phi i32 [ 0, %7 ], [ %51, %50 ]
  %15 = icmp ult i32 %i.0, %11
  br i1 %15, label %16, label %.critedge

; <label>:16                                      ; preds = %14
  %17 = zext i32 %i.0 to i64
  %18 = icmp ult i64 %17, %nmatch
  br i1 %18, label %19, label %.critedge

; <label>:19                                      ; preds = %16
  %20 = getelementptr inbounds %struct.tre_submatch_data.526* %9, i64 %17, i32 0
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = load i32* %12, align 4, !tbaa !6
  %23 = icmp eq i32 %21, %22
  br i1 %23, label %24, label %26

; <label>:24                                      ; preds = %19
  %25 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %17, i32 0
  store i64 %13, i64* %25, align 8, !tbaa !5
  br label %32

; <label>:26                                      ; preds = %19
  %27 = sext i32 %21 to i64
  %28 = getelementptr inbounds i32* %tags, i64 %27
  %29 = load i32* %28, align 4, !tbaa !6
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %17, i32 0
  store i64 %30, i64* %31, align 8, !tbaa !5
  br label %32

; <label>:32                                      ; preds = %26, %24
  %33 = phi i64 [ %30, %26 ], [ %13, %24 ]
  %34 = getelementptr inbounds %struct.tre_submatch_data.526* %9, i64 %17, i32 1
  %35 = load i32* %34, align 4, !tbaa !6
  %36 = icmp eq i32 %35, %22
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %32
  %38 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %17, i32 1
  store i64 %13, i64* %38, align 8, !tbaa !5
  br label %45

; <label>:39                                      ; preds = %32
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds i32* %tags, i64 %40
  %42 = load i32* %41, align 4, !tbaa !6
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %17, i32 1
  store i64 %43, i64* %44, align 8, !tbaa !5
  br label %45

; <label>:45                                      ; preds = %39, %37
  %46 = phi i64 [ %43, %39 ], [ %13, %37 ]
  %47 = icmp eq i64 %33, -1
  %48 = icmp eq i64 %46, -1
  %or.cond = or i1 %47, %48
  br i1 %or.cond, label %._crit_edge, label %50

._crit_edge:                                      ; preds = %45
  %49 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %17, i32 0
  %.pre-phi = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %17, i32 1
  store i64 -1, i64* %.pre-phi, align 8, !tbaa !5
  store i64 -1, i64* %49, align 8, !tbaa !5
  br label %50

; <label>:50                                      ; preds = %._crit_edge, %45
  %51 = add i32 %i.0, 1
  br label %14

.critedge:                                        ; preds = %.loopexit, %16, %14
  %i.1 = phi i32 [ %84, %.loopexit ], [ 0, %14 ], [ 0, %16 ]
  %52 = icmp ult i32 %i.1, %11
  br i1 %52, label %53, label %.critedge1.preheader

; <label>:53                                      ; preds = %.critedge
  %54 = zext i32 %i.1 to i64
  %55 = icmp ult i64 %54, %nmatch
  br i1 %55, label %56, label %.critedge1.preheader

; <label>:56                                      ; preds = %53
  %57 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %54, i32 1
  %58 = getelementptr inbounds %struct.tre_submatch_data.526* %9, i64 %54, i32 2
  %59 = load i32** %58, align 8, !tbaa !7
  %60 = icmp eq i32* %59, null
  br i1 %60, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %56
  %61 = load i32* %59, align 4, !tbaa !6
  %62 = icmp sgt i32 %61, -1
  br i1 %62, label %.lr.ph4, label %.loopexit

.lr.ph4:                                          ; preds = %.preheader
  %63 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %54, i32 0
  %.pre = load i64* %63, align 8, !tbaa !5
  br label %64

; <label>:64                                      ; preds = %77, %.lr.ph4
  %65 = phi i64 [ %.pre, %.lr.ph4 ], [ %78, %77 ]
  %66 = phi i32 [ %61, %.lr.ph4 ], [ %82, %77 ]
  %j.03 = phi i32 [ 0, %.lr.ph4 ], [ %79, %77 ]
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %67, i32 0
  %69 = load i64* %68, align 8, !tbaa !5
  %70 = icmp slt i64 %65, %69
  br i1 %70, label %76, label %71

; <label>:71                                      ; preds = %64
  %72 = load i64* %57, align 8, !tbaa !5
  %73 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %67, i32 1
  %74 = load i64* %73, align 8, !tbaa !5
  %75 = icmp sgt i64 %72, %74
  br i1 %75, label %76, label %77

; <label>:76                                      ; preds = %71, %64
  store i64 -1, i64* %57, align 8, !tbaa !5
  store i64 -1, i64* %63, align 8, !tbaa !5
  br label %77

; <label>:77                                      ; preds = %76, %71
  %78 = phi i64 [ %65, %71 ], [ -1, %76 ]
  %79 = add i32 %j.03, 1
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i32* %59, i64 %80
  %82 = load i32* %81, align 4, !tbaa !6
  %83 = icmp sgt i32 %82, -1
  br i1 %83, label %64, label %.loopexit

.loopexit:                                        ; preds = %77, %.preheader, %56
  %84 = add i32 %i.1, 1
  br label %.critedge

.critedge1:                                       ; preds = %.critedge1, %.critedge1.preheader
  %85 = phi i64 [ %89, %.critedge1 ], [ %5, %.critedge1.preheader ]
  %i.22 = phi i32 [ %88, %.critedge1 ], [ %i.2.ph, %.critedge1.preheader ]
  %86 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %85, i32 0
  store i64 -1, i64* %86, align 8, !tbaa !5
  %87 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %85, i32 1
  store i64 -1, i64* %87, align 8, !tbaa !5
  %88 = add i32 %i.22, 1
  %89 = zext i32 %88 to i64
  %90 = icmp ult i64 %89, %nmatch
  br i1 %90, label %.critedge1, label %.critedge1._crit_edge

.critedge1._crit_edge:                            ; preds = %.critedge1, %.critedge1.preheader
  ret void
}

define internal fastcc i32 @tre_neg_char_classes_match(i32* nocapture %classes, i32 %wc, i32 %icase) nounwind uwtable optsize {
  %1 = icmp eq i32 %icase, 0
  br label %2

; <label>:2                                       ; preds = %18, %0
  %.01 = phi i32* [ %classes, %0 ], [ %19, %18 ]
  %3 = load i32* %.01, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %20, label %5

; <label>:5                                       ; preds = %2
  br i1 %1, label %6, label %.critedge

; <label>:6                                       ; preds = %5
  %7 = tail call i32 @iswctype(i32 %wc, i32 %3) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %18, label %20

.critedge:                                        ; preds = %5
  %9 = tail call i32 @towupper(i32 %wc) nounwind optsize
  %10 = load i32* %.01, align 4, !tbaa !6
  %11 = tail call i32 @iswctype(i32 %9, i32 %10) nounwind optsize
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %20

; <label>:13                                      ; preds = %.critedge
  %14 = tail call i32 @towlower(i32 %wc) nounwind optsize
  %15 = load i32* %.01, align 4, !tbaa !6
  %16 = tail call i32 @iswctype(i32 %14, i32 %15) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %13, %6
  %19 = getelementptr inbounds i32* %.01, i64 1
  br label %2

; <label>:20                                      ; preds = %13, %.critedge, %6, %2
  %.0 = phi i32 [ 1, %13 ], [ 1, %.critedge ], [ 1, %6 ], [ 0, %2 ]
  ret i32 %.0
}

define internal fastcc i32 @tre_tag_order(i32 %num_tags, i32* nocapture %tag_directions, i32* nocapture %t1, i32* nocapture %t2) nounwind uwtable readonly optsize {
  br label %1

; <label>:1                                       ; preds = %20, %0
  %indvars.iv = phi i64 [ %indvars.iv.next, %20 ], [ 0, %0 ]
  %2 = trunc i64 %indvars.iv to i32
  %3 = icmp slt i32 %2, %num_tags
  br i1 %3, label %4, label %21

; <label>:4                                       ; preds = %1
  %5 = getelementptr inbounds i32* %tag_directions, i64 %indvars.iv
  %6 = load i32* %5, align 4, !tbaa !0
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds i32* %t1, i64 %indvars.iv
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = getelementptr inbounds i32* %t2, i64 %indvars.iv
  %11 = load i32* %10, align 4, !tbaa !6
  br i1 %7, label %12, label %16

; <label>:12                                      ; preds = %4
  %13 = icmp slt i32 %9, %11
  br i1 %13, label %21, label %14

; <label>:14                                      ; preds = %12
  %15 = icmp sgt i32 %9, %11
  br i1 %15, label %21, label %20

; <label>:16                                      ; preds = %4
  %17 = icmp sgt i32 %9, %11
  br i1 %17, label %21, label %18

; <label>:18                                      ; preds = %16
  %19 = icmp slt i32 %9, %11
  br i1 %19, label %21, label %20

; <label>:20                                      ; preds = %18, %14
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %1

; <label>:21                                      ; preds = %18, %16, %14, %12, %1
  %.0 = phi i32 [ 1, %12 ], [ 0, %14 ], [ 1, %16 ], [ 0, %18 ], [ 0, %1 ]
  ret i32 %.0
}

define float @remainderf(float %x, float %p) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = bitcast float %p to i32
  %3 = and i32 %1, -2147483648
  %4 = and i32 %2, 2147483647
  %5 = and i32 %1, 2147483647
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = fmul float %x, %p
  %9 = fdiv float %8, %8
  br label %55

; <label>:10                                      ; preds = %0
  %11 = icmp ugt i32 %5, 2139095039
  %12 = icmp ugt i32 %4, 2139095040
  %or.cond = or i1 %11, %12
  br i1 %or.cond, label %13, label %19

; <label>:13                                      ; preds = %10
  %14 = fpext float %x to x86_fp80
  %15 = fpext float %p to x86_fp80
  %16 = fmul x86_fp80 %14, %15
  %17 = fdiv x86_fp80 %16, %16
  %18 = fptrunc x86_fp80 %17 to float
  br label %55

; <label>:19                                      ; preds = %10
  %20 = icmp ult i32 %4, 2130706432
  br i1 %20, label %21, label %24

; <label>:21                                      ; preds = %19
  %22 = fadd float %p, %p
  %23 = tail call float @fmodf(float %x, float %22) nounwind optsize
  br label %24

; <label>:24                                      ; preds = %21, %19
  %.04 = phi float [ %23, %21 ], [ %x, %19 ]
  %25 = icmp eq i32 %5, %4
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %24
  %27 = fmul float %.04, 0.000000e+00
  br label %55

; <label>:28                                      ; preds = %24
  %29 = tail call float @fabsf(float %.04) nounwind optsize
  %30 = tail call float @fabsf(float %p) nounwind optsize
  %31 = icmp ult i32 %4, 16777216
  br i1 %31, label %32, label %41

; <label>:32                                      ; preds = %28
  %33 = fadd float %29, %29
  %34 = fcmp ogt float %33, %30
  br i1 %34, label %35, label %49

; <label>:35                                      ; preds = %32
  %36 = fsub float %29, %30
  %37 = fadd float %36, %36
  %38 = fcmp ult float %37, %30
  br i1 %38, label %49, label %39

; <label>:39                                      ; preds = %35
  %40 = fsub float %36, %30
  br label %49

; <label>:41                                      ; preds = %28
  %42 = fmul float %30, 5.000000e-01
  %43 = fcmp ogt float %29, %42
  br i1 %43, label %44, label %49

; <label>:44                                      ; preds = %41
  %45 = fsub float %29, %30
  %46 = fcmp ult float %45, %42
  br i1 %46, label %49, label %47

; <label>:47                                      ; preds = %44
  %48 = fsub float %45, %30
  br label %49

; <label>:49                                      ; preds = %47, %44, %41, %39, %35, %32
  %.1 = phi float [ %40, %39 ], [ %36, %35 ], [ %29, %32 ], [ %48, %47 ], [ %45, %44 ], [ %29, %41 ]
  %50 = bitcast float %.1 to i32
  %51 = and i32 %50, 2147483647
  %52 = icmp eq i32 %51, 0
  %hx.0 = select i1 %52, i32 0, i32 %50
  %53 = xor i32 %hx.0, %3
  %54 = bitcast i32 %53 to float
  br label %55

; <label>:55                                      ; preds = %49, %26, %13, %7
  %.0 = phi float [ %9, %7 ], [ %18, %13 ], [ %27, %26 ], [ %54, %49 ]
  ret float %.0
}

define x86_fp80 @remainderl(x86_fp80 %x, x86_fp80 %y) nounwind uwtable optsize {
  %q = alloca i32, align 4
  %1 = call x86_fp80 @remquol(x86_fp80 %x, x86_fp80 %y, i32* %q) nounwind optsize
  ret x86_fp80 %1
}

define double @remainder(double %x, double %p) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %p to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = and i32 %3, -2147483648
  %10 = and i32 %7, 2147483647
  %11 = and i32 %3, 2147483647
  %12 = or i32 %10, %8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %17

; <label>:14                                      ; preds = %0
  %15 = fmul double %x, %p
  %16 = fdiv double %15, %15
  br label %76

; <label>:17                                      ; preds = %0
  %18 = icmp ugt i32 %11, 2146435071
  br i1 %18, label %25, label %19

; <label>:19                                      ; preds = %17
  %20 = icmp ugt i32 %10, 2146435071
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %19
  %22 = add nsw i32 %10, -2146435072
  %23 = or i32 %22, %8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %25

; <label>:25                                      ; preds = %21, %17
  %26 = fpext double %x to x86_fp80
  %27 = fpext double %p to x86_fp80
  %28 = fmul x86_fp80 %26, %27
  %29 = fdiv x86_fp80 %28, %28
  %30 = fptrunc x86_fp80 %29 to double
  br label %76

; <label>:31                                      ; preds = %21, %19
  %32 = icmp ult i32 %10, 2145386496
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %31
  %34 = fadd double %p, %p
  %35 = tail call double @fmod(double %x, double %34) nounwind optsize
  br label %36

; <label>:36                                      ; preds = %33, %31
  %.04 = phi double [ %35, %33 ], [ %x, %31 ]
  %37 = sub nsw i32 %11, %10
  %38 = sub i32 %4, %8
  %39 = or i32 %37, %38
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

; <label>:41                                      ; preds = %36
  %42 = fmul double %.04, 0.000000e+00
  br label %76

; <label>:43                                      ; preds = %36
  %44 = tail call double @fabs(double %.04) nounwind optsize
  %45 = tail call double @fabs(double %p) nounwind optsize
  %46 = icmp ult i32 %10, 2097152
  br i1 %46, label %47, label %56

; <label>:47                                      ; preds = %43
  %48 = fadd double %44, %44
  %49 = fcmp ogt double %48, %45
  br i1 %49, label %50, label %64

; <label>:50                                      ; preds = %47
  %51 = fsub double %44, %45
  %52 = fadd double %51, %51
  %53 = fcmp ult double %52, %45
  br i1 %53, label %64, label %54

; <label>:54                                      ; preds = %50
  %55 = fsub double %51, %45
  br label %64

; <label>:56                                      ; preds = %43
  %57 = fmul double %45, 5.000000e-01
  %58 = fcmp ogt double %44, %57
  br i1 %58, label %59, label %64

; <label>:59                                      ; preds = %56
  %60 = fsub double %44, %45
  %61 = fcmp ult double %60, %57
  br i1 %61, label %64, label %62

; <label>:62                                      ; preds = %59
  %63 = fsub double %60, %45
  br label %64

; <label>:64                                      ; preds = %62, %59, %56, %54, %50, %47
  %.1 = phi double [ %55, %54 ], [ %51, %50 ], [ %44, %47 ], [ %63, %62 ], [ %60, %59 ], [ %44, %56 ]
  %65 = bitcast double %.1 to i64
  %66 = lshr i64 %65, 32
  %67 = trunc i64 %66 to i32
  %68 = and i32 %67, 2147483647
  %69 = icmp eq i32 %68, 0
  %hx.0 = select i1 %69, i32 0, i32 %67
  %70 = and i64 %65, 4294967295
  %71 = xor i32 %hx.0, %9
  %72 = zext i32 %71 to i64
  %73 = shl nuw i64 %72, 32
  %74 = or i64 %73, %70
  %75 = bitcast i64 %74 to double
  br label %76

; <label>:76                                      ; preds = %64, %41, %25, %14
  %.0 = phi double [ %16, %14 ], [ %30, %25 ], [ %42, %41 ], [ %75, %64 ]
  ret double %.0
}

define i32 @remove(i8* %path) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 10, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %6

; <label>:6                                       ; preds = %0
  %7 = tail call i32* @__errno_location() nounwind readnone optsize
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp eq i32 %8, 21
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %6
  %11 = tail call i64 (i64, ...)* @__syscall(i64 40, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %12 = tail call i64 @__syscall_ret(i64 %11) nounwind optsize
  br label %15

; <label>:13                                      ; preds = %6, %0
  %14 = sext i32 %4 to i64
  br label %15

; <label>:15                                      ; preds = %13, %10
  %16 = phi i64 [ %12, %10 ], [ %14, %13 ]
  %17 = trunc i64 %16 to i32
  ret i32 %17
}

define i32 @__rem_pio2f(float %x, double* nocapture %y) nounwind uwtable optsize {
  %tx = alloca [1 x double], align 8
  %ty = alloca [1 x double], align 8
  %__v = alloca double, align 8
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ult i32 %2, 1305022427
  br i1 %3, label %4, label %15

; <label>:4                                       ; preds = %0
  %5 = fpext float %x to double
  %6 = fmul double %5, 0x3FE45F306DC9C883
  %7 = fadd double %6, 0x4338000000000000
  store volatile double %7, double* %__v, align 8, !tbaa !3
  %8 = load volatile double* %__v, align 8, !tbaa !3
  %9 = fadd double %8, 0xC338000000000000
  %10 = fptosi double %9 to i32
  %11 = fmul double %9, 0x3FF921FB50000000
  %12 = fsub double %5, %11
  %13 = fmul double %9, 0x3E5110B4611A6263
  %14 = fsub double %12, %13
  store double %14, double* %y, align 8, !tbaa !3
  br label %36

; <label>:15                                      ; preds = %0
  %16 = icmp ugt i32 %2, 2139095039
  br i1 %16, label %17, label %20

; <label>:17                                      ; preds = %15
  %18 = fsub float %x, %x
  %19 = fpext float %18 to double
  store double %19, double* %y, align 8, !tbaa !3
  br label %36

; <label>:20                                      ; preds = %15
  %21 = lshr i32 %2, 23
  %22 = add nsw i32 %21, -150
  %23 = shl i32 %22, 23
  %24 = sub nsw i32 %2, %23
  %25 = bitcast i32 %24 to float
  %26 = fpext float %25 to double
  %27 = getelementptr inbounds [1 x double]* %tx, i64 0, i64 0
  store double %26, double* %27, align 8, !tbaa !3
  %28 = getelementptr inbounds [1 x double]* %ty, i64 0, i64 0
  %29 = call i32 @__rem_pio2_large(double* %27, double* %28, i32 %22, i32 1, i32 0) nounwind optsize
  %30 = icmp slt i32 %1, 0
  %31 = load double* %28, align 8, !tbaa !3
  br i1 %30, label %32, label %35

; <label>:32                                      ; preds = %20
  %33 = fsub double -0.000000e+00, %31
  store double %33, double* %y, align 8, !tbaa !3
  %34 = sub nsw i32 0, %29
  br label %36

; <label>:35                                      ; preds = %20
  store double %31, double* %y, align 8, !tbaa !3
  br label %36

; <label>:36                                      ; preds = %35, %32, %17, %4
  %.0 = phi i32 [ %10, %4 ], [ 0, %17 ], [ %34, %32 ], [ %29, %35 ]
  ret i32 %.0
}

define i32 @__rem_pio2_large(double* nocapture %x, double* nocapture %y, i32 %e0, i32 %nx, i32 %prec) nounwind uwtable optsize {
  %iq = alloca [20 x i32], align 16
  %f = alloca [20 x double], align 16
  %fq = alloca [20 x double], align 16
  %q = alloca [20 x double], align 16
  %__v = alloca double, align 8
  %1 = sext i32 %prec to i64
  %2 = getelementptr inbounds [4 x i32]* @init_jk, i64 0, i64 %1
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = add nsw i32 %nx, -1
  %5 = add nsw i32 %e0, -3
  %6 = sdiv i32 %5, 24
  %7 = icmp slt i32 %5, -23
  %jv.0 = select i1 %7, i32 0, i32 %6
  %8 = mul i32 %jv.0, 24
  %9 = add i32 %8, 24
  %10 = sub nsw i32 %e0, %9
  %11 = add nsw i32 %3, %4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %.preheader97.lr.ph, label %.lr.ph108

.lr.ph108:                                        ; preds = %0
  %13 = add i32 %jv.0, 1
  %14 = sub i32 %13, %nx
  %15 = sext i32 %14 to i64
  %16 = add i32 %3, %nx
  br label %18

.preheader97.lr.ph:                               ; preds = %25, %0
  %17 = icmp slt i32 %4, 0
  br label %.preheader97

; <label>:18                                      ; preds = %25, %.lr.ph108
  %indvars.iv184 = phi i64 [ 0, %.lr.ph108 ], [ %indvars.iv.next185, %25 ]
  %indvars.iv182 = phi i64 [ %15, %.lr.ph108 ], [ %indvars.iv.next183, %25 ]
  %19 = trunc i64 %indvars.iv182 to i32
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %25, label %21

; <label>:21                                      ; preds = %18
  %22 = getelementptr inbounds [690 x i32]* @ipio2, i64 0, i64 %indvars.iv182
  %23 = load i32* %22, align 4, !tbaa !6
  %24 = sitofp i32 %23 to double
  br label %25

; <label>:25                                      ; preds = %21, %18
  %26 = phi double [ %24, %21 ], [ 0.000000e+00, %18 ]
  %27 = getelementptr inbounds [20 x double]* %f, i64 0, i64 %indvars.iv184
  store double %26, double* %27, align 8, !tbaa !3
  %indvars.iv.next185 = add i64 %indvars.iv184, 1
  %indvars.iv.next183 = add i64 %indvars.iv182, 1
  %lftr.wideiv186 = trunc i64 %indvars.iv.next185 to i32
  %exitcond187 = icmp eq i32 %lftr.wideiv186, %16
  br i1 %exitcond187, label %.preheader97.lr.ph, label %18

.preheader97:                                     ; preds = %._crit_edge101, %.preheader97.lr.ph
  %indvars.iv180 = phi i64 [ 0, %.preheader97.lr.ph ], [ %indvars.iv.next181, %._crit_edge101 ]
  br i1 %17, label %._crit_edge101, label %.lr.ph100

.lr.ph100:                                        ; preds = %.preheader97
  %28 = trunc i64 %indvars.iv180 to i32
  %29 = add i32 %28, %4
  br label %38

.preheader82:                                     ; preds = %._crit_edge101
  %30 = icmp sgt i32 %10, 0
  %31 = sub nsw i32 24, %10
  %32 = sub nsw i32 23, %10
  %33 = add nsw i32 %3, -1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %34
  %36 = icmp eq i32 %9, %e0
  %37 = sext i32 %jv.0 to i64
  br label %.loopexit76

; <label>:38                                      ; preds = %38, %.lr.ph100
  %indvars.iv176 = phi i64 [ 0, %.lr.ph100 ], [ %indvars.iv.next177, %38 ]
  %fw.099 = phi double [ 0.000000e+00, %.lr.ph100 ], [ %47, %38 ]
  %39 = getelementptr inbounds double* %x, i64 %indvars.iv176
  %40 = load double* %39, align 8, !tbaa !3
  %41 = trunc i64 %indvars.iv176 to i32
  %42 = sub i32 %29, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [20 x double]* %f, i64 0, i64 %43
  %45 = load double* %44, align 8, !tbaa !3
  %46 = fmul double %40, %45
  %47 = fadd double %fw.099, %46
  %indvars.iv.next177 = add i64 %indvars.iv176, 1
  %lftr.wideiv178 = trunc i64 %indvars.iv.next177 to i32
  %exitcond179 = icmp eq i32 %lftr.wideiv178, %nx
  br i1 %exitcond179, label %._crit_edge101, label %38

._crit_edge101:                                   ; preds = %38, %.preheader97
  %fw.0.lcssa = phi double [ 0.000000e+00, %.preheader97 ], [ %47, %38 ]
  %48 = getelementptr inbounds [20 x double]* %q, i64 0, i64 %indvars.iv180
  store double %fw.0.lcssa, double* %48, align 8, !tbaa !3
  %indvars.iv.next181 = add i64 %indvars.iv180, 1
  %49 = trunc i64 %indvars.iv.next181 to i32
  %50 = icmp sgt i32 %49, %3
  br i1 %50, label %.preheader82, label %.preheader97

.loopexit76:                                      ; preds = %._crit_edge74, %.loopexit66, %.preheader82
  %jz.0 = phi i32 [ %3, %.preheader82 ], [ %144, %._crit_edge74 ], [ %144, %.loopexit66 ]
  %51 = sext i32 %jz.0 to i64
  %52 = getelementptr inbounds [20 x double]* %q, i64 0, i64 %51
  %53 = load double* %52, align 8, !tbaa !3
  %54 = icmp sgt i32 %jz.0, 0
  br i1 %54, label %.lr.ph55, label %._crit_edge56

.lr.ph55:                                         ; preds = %.lr.ph55, %.loopexit76
  %indvars.iv142 = phi i64 [ %indvars.iv.next143, %.lr.ph55 ], [ 0, %.loopexit76 ]
  %indvars.iv140 = phi i64 [ %indvars.iv.next141, %.lr.ph55 ], [ %51, %.loopexit76 ]
  %z.053 = phi double [ %64, %.lr.ph55 ], [ %53, %.loopexit76 ]
  %55 = fmul double %z.053, 0x3E70000000000000
  %56 = fptosi double %55 to i32
  %57 = sitofp i32 %56 to double
  %58 = fmul double %57, 0x4170000000000000
  %59 = fsub double %z.053, %58
  %60 = fptosi double %59 to i32
  %61 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %indvars.iv142
  store i32 %60, i32* %61, align 4, !tbaa !6
  %indvars.iv.next141 = add i64 %indvars.iv140, -1
  %62 = getelementptr inbounds [20 x double]* %q, i64 0, i64 %indvars.iv.next141
  %63 = load double* %62, align 8, !tbaa !3
  %64 = fadd double %63, %57
  %indvars.iv.next143 = add i64 %indvars.iv142, 1
  %lftr.wideiv144 = trunc i64 %indvars.iv.next143 to i32
  %exitcond145 = icmp eq i32 %lftr.wideiv144, %jz.0
  br i1 %exitcond145, label %._crit_edge56, label %.lr.ph55

._crit_edge56:                                    ; preds = %.lr.ph55, %.loopexit76
  %z.0.lcssa = phi double [ %53, %.loopexit76 ], [ %64, %.lr.ph55 ]
  %65 = call double @scalbn(double %z.0.lcssa, i32 %10) nounwind optsize
  %66 = fmul double %65, 1.250000e-01
  %67 = call double @floor(double %66) nounwind optsize
  %68 = fmul double %67, 8.000000e+00
  %69 = fsub double %65, %68
  %70 = fptosi double %69 to i32
  %71 = sitofp i32 %70 to double
  %72 = fsub double %69, %71
  br i1 %30, label %73, label %83

; <label>:73                                      ; preds = %._crit_edge56
  %74 = add nsw i32 %jz.0, -1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %75
  %77 = load i32* %76, align 4, !tbaa !6
  %78 = ashr i32 %77, %31
  %79 = add nsw i32 %78, %70
  %80 = shl i32 %78, %31
  %81 = sub nsw i32 %77, %80
  store i32 %81, i32* %76, align 4, !tbaa !6
  %82 = ashr i32 %81, %32
  br label %92

; <label>:83                                      ; preds = %._crit_edge56
  br i1 %36, label %84, label %90

; <label>:84                                      ; preds = %83
  %85 = add nsw i32 %jz.0, -1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %86
  %88 = load i32* %87, align 4, !tbaa !6
  %89 = ashr i32 %88, 23
  br label %92

; <label>:90                                      ; preds = %83
  %91 = fcmp ult double %72, 5.000000e-01
  br i1 %91, label %.thread5, label %.thread

; <label>:92                                      ; preds = %84, %73
  %n.0 = phi i32 [ %79, %73 ], [ %70, %84 ]
  %ih.0 = phi i32 [ %82, %73 ], [ %89, %84 ]
  %93 = icmp sgt i32 %ih.0, 0
  br i1 %93, label %.thread, label %.thread5

.thread:                                          ; preds = %92, %90
  %ih.03 = phi i32 [ %ih.0, %92 ], [ 2, %90 ]
  %n.02 = phi i32 [ %n.0, %92 ], [ %70, %90 ]
  %94 = add nsw i32 %n.02, 1
  br i1 %54, label %.lr.ph48, label %._crit_edge49

.lr.ph48:                                         ; preds = %104, %.thread
  %indvars.iv135 = phi i64 [ %indvars.iv.next136, %104 ], [ 0, %.thread ]
  %carry.046 = phi i32 [ %carry.1, %104 ], [ 0, %.thread ]
  %95 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %indvars.iv135
  %96 = load i32* %95, align 4, !tbaa !6
  %97 = icmp eq i32 %carry.046, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %.lr.ph48
  %99 = icmp eq i32 %96, 0
  br i1 %99, label %104, label %100

; <label>:100                                     ; preds = %98
  %101 = sub nsw i32 16777216, %96
  store i32 %101, i32* %95, align 4, !tbaa !6
  br label %104

; <label>:102                                     ; preds = %.lr.ph48
  %103 = sub nsw i32 16777215, %96
  store i32 %103, i32* %95, align 4, !tbaa !6
  br label %104

; <label>:104                                     ; preds = %102, %100, %98
  %carry.1 = phi i32 [ 1, %100 ], [ 0, %98 ], [ %carry.046, %102 ]
  %indvars.iv.next136 = add i64 %indvars.iv135, 1
  %lftr.wideiv137 = trunc i64 %indvars.iv.next136 to i32
  %exitcond138 = icmp eq i32 %lftr.wideiv137, %jz.0
  br i1 %exitcond138, label %._crit_edge49, label %.lr.ph48

._crit_edge49:                                    ; preds = %104, %.thread
  %carry.0.lcssa = phi i32 [ 0, %.thread ], [ %carry.1, %104 ]
  br i1 %30, label %105, label %118

; <label>:105                                     ; preds = %._crit_edge49
  switch i32 %10, label %118 [
    i32 1, label %106
    i32 2, label %112
  ]

; <label>:106                                     ; preds = %105
  %107 = add nsw i32 %jz.0, -1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %108
  %110 = load i32* %109, align 4, !tbaa !6
  %111 = and i32 %110, 8388607
  store i32 %111, i32* %109, align 4, !tbaa !6
  br label %118

; <label>:112                                     ; preds = %105
  %113 = add nsw i32 %jz.0, -1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %114
  %116 = load i32* %115, align 4, !tbaa !6
  %117 = and i32 %116, 4194303
  store i32 %117, i32* %115, align 4, !tbaa !6
  br label %118

; <label>:118                                     ; preds = %112, %106, %105, %._crit_edge49
  %119 = icmp eq i32 %ih.03, 2
  br i1 %119, label %120, label %.thread5

; <label>:120                                     ; preds = %118
  %121 = fsub double 1.000000e+00, %72
  %122 = icmp eq i32 %carry.0.lcssa, 0
  br i1 %122, label %.thread5, label %123

; <label>:123                                     ; preds = %120
  %124 = call double @scalbn(double 1.000000e+00, i32 %10) nounwind optsize
  %125 = fsub double %121, %124
  br label %.thread5

.thread5:                                         ; preds = %123, %120, %118, %92, %90
  %ih.04 = phi i32 [ 2, %123 ], [ 2, %120 ], [ %ih.03, %118 ], [ %ih.0, %92 ], [ 0, %90 ]
  %n.1 = phi i32 [ %94, %123 ], [ %94, %120 ], [ %94, %118 ], [ %n.0, %92 ], [ %70, %90 ]
  %z.1 = phi double [ %125, %123 ], [ %121, %120 ], [ %72, %118 ], [ %72, %92 ], [ %72, %90 ]
  %126 = fcmp oeq double %z.1, 0.000000e+00
  br i1 %126, label %.preheader58, label %.critedge1

.preheader58:                                     ; preds = %.thread5
  %i.459 = add nsw i32 %jz.0, -1
  %127 = icmp slt i32 %i.459, %3
  br i1 %127, label %.preheader65, label %.lr.ph62

.lr.ph62:                                         ; preds = %.preheader58
  %128 = sext i32 %i.459 to i64
  br label %129

; <label>:129                                     ; preds = %129, %.lr.ph62
  %indvars.iv147 = phi i64 [ %128, %.lr.ph62 ], [ %indvars.iv.next148, %129 ]
  %i.461 = phi i32 [ %i.459, %.lr.ph62 ], [ %i.4, %129 ]
  %j.360 = phi i32 [ 0, %.lr.ph62 ], [ %132, %129 ]
  %130 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %indvars.iv147
  %131 = load i32* %130, align 4, !tbaa !6
  %132 = or i32 %131, %j.360
  %i.4 = add nsw i32 %i.461, -1
  %133 = icmp slt i32 %i.4, %3
  %indvars.iv.next148 = add i64 %indvars.iv147, -1
  br i1 %133, label %134, label %129

; <label>:134                                     ; preds = %129
  %phitmp = icmp eq i32 %132, 0
  br i1 %phitmp, label %.preheader65, label %.preheader45

.preheader65:                                     ; preds = %134, %.preheader58
  %135 = load i32* %35, align 4, !tbaa !6
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %.lr.ph68, label %.loopexit66

.lr.ph68:                                         ; preds = %.lr.ph68, %.preheader65
  %indvars.iv151 = phi i64 [ %indvars.iv.next152, %.lr.ph68 ], [ 1, %.preheader65 ]
  %k.067 = phi i32 [ %137, %.lr.ph68 ], [ 1, %.preheader65 ]
  %indvars.iv.next152 = add i64 %indvars.iv151, 1
  %137 = add nsw i32 %k.067, 1
  %138 = trunc i64 %indvars.iv.next152 to i32
  %139 = sub nsw i32 %3, %138
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %140
  %142 = load i32* %141, align 4, !tbaa !6
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %.lr.ph68, label %.loopexit66

.loopexit66:                                      ; preds = %.lr.ph68, %.preheader65
  %k.0.lcssa = phi i32 [ 1, %.preheader65 ], [ %137, %.lr.ph68 ]
  %i.577 = add nsw i32 %jz.0, 1
  %144 = add nsw i32 %k.0.lcssa, %jz.0
  %145 = icmp sgt i32 %i.577, %144
  br i1 %145, label %.loopexit76, label %.lr.ph80

.lr.ph80:                                         ; preds = %.loopexit66
  %146 = sext i32 %i.577 to i64
  br label %147

; <label>:147                                     ; preds = %._crit_edge74, %.lr.ph80
  %indvars.iv158 = phi i64 [ %146, %.lr.ph80 ], [ %indvars.iv.next159, %._crit_edge74 ]
  %i.579 = phi i32 [ %i.577, %.lr.ph80 ], [ %i.5, %._crit_edge74 ]
  %i.5.in78 = phi i32 [ %jz.0, %.lr.ph80 ], [ %166, %._crit_edge74 ]
  %148 = add nsw i64 %indvars.iv158, %37
  %149 = getelementptr inbounds [690 x i32]* @ipio2, i64 0, i64 %148
  %150 = load i32* %149, align 4, !tbaa !6
  %151 = sitofp i32 %150 to double
  %152 = add i32 %i.5.in78, %nx
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [20 x double]* %f, i64 0, i64 %153
  store double %151, double* %154, align 8, !tbaa !3
  br i1 %17, label %._crit_edge74, label %.lr.ph73

.lr.ph73:                                         ; preds = %.lr.ph73, %147
  %indvars.iv154 = phi i64 [ %indvars.iv.next155, %.lr.ph73 ], [ 0, %147 ]
  %fw.171 = phi double [ %163, %.lr.ph73 ], [ 0.000000e+00, %147 ]
  %155 = getelementptr inbounds double* %x, i64 %indvars.iv154
  %156 = load double* %155, align 8, !tbaa !3
  %157 = trunc i64 %indvars.iv154 to i32
  %158 = sub nsw i32 %152, %157
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [20 x double]* %f, i64 0, i64 %159
  %161 = load double* %160, align 8, !tbaa !3
  %162 = fmul double %156, %161
  %163 = fadd double %fw.171, %162
  %indvars.iv.next155 = add i64 %indvars.iv154, 1
  %lftr.wideiv156 = trunc i64 %indvars.iv.next155 to i32
  %exitcond157 = icmp eq i32 %lftr.wideiv156, %nx
  br i1 %exitcond157, label %._crit_edge74, label %.lr.ph73

._crit_edge74:                                    ; preds = %.lr.ph73, %147
  %fw.1.lcssa = phi double [ 0.000000e+00, %147 ], [ %163, %.lr.ph73 ]
  %164 = getelementptr inbounds [20 x double]* %q, i64 0, i64 %indvars.iv158
  store double %fw.1.lcssa, double* %164, align 8, !tbaa !3
  %i.5 = add nsw i32 %i.579, 1
  %165 = icmp sgt i32 %i.5, %144
  %indvars.iv.next159 = add i64 %indvars.iv158, 1
  %166 = trunc i64 %indvars.iv158 to i32
  br i1 %165, label %.loopexit76, label %147

.preheader45:                                     ; preds = %.preheader45, %134
  %indvars.iv133 = phi i64 [ %indvars.iv.next134, %.preheader45 ], [ %51, %134 ]
  %jz.1.in = phi i32 [ %jz.1, %.preheader45 ], [ %jz.0, %134 ]
  %q0.0.in = phi i32 [ %q0.0, %.preheader45 ], [ %10, %134 ]
  %q0.0 = add nsw i32 %q0.0.in, -24
  %indvars.iv.next134 = add i64 %indvars.iv133, -1
  %jz.1 = add nsw i32 %jz.1.in, -1
  %167 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %indvars.iv.next134
  %168 = load i32* %167, align 4, !tbaa !6
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %.preheader45, label %.loopexit

.critedge1:                                       ; preds = %.thread5
  %170 = sub nsw i32 0, %10
  %171 = call double @scalbn(double %z.1, i32 %170) nounwind optsize
  %172 = fcmp ult double %171, 0x4170000000000000
  br i1 %172, label %185, label %173

; <label>:173                                     ; preds = %.critedge1
  %174 = fmul double %171, 0x3E70000000000000
  %175 = fptosi double %174 to i32
  %176 = sitofp i32 %175 to double
  %177 = fmul double %176, 0x4170000000000000
  %178 = fsub double %171, %177
  %179 = fptosi double %178 to i32
  %180 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %51
  store i32 %179, i32* %180, align 4, !tbaa !6
  %181 = add nsw i32 %jz.0, 1
  %182 = add nsw i32 %10, 24
  %183 = sext i32 %181 to i64
  %184 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %183
  store i32 %175, i32* %184, align 4, !tbaa !6
  br label %.loopexit

; <label>:185                                     ; preds = %.critedge1
  %186 = fptosi double %171 to i32
  %187 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %51
  store i32 %186, i32* %187, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %185, %173, %.preheader45
  %jz.2 = phi i32 [ %181, %173 ], [ %jz.0, %185 ], [ %jz.1, %.preheader45 ]
  %q0.1 = phi i32 [ %182, %173 ], [ %10, %185 ], [ %q0.0, %.preheader45 ]
  %188 = call double @scalbn(double 1.000000e+00, i32 %q0.1) nounwind optsize
  %189 = icmp sgt i32 %jz.2, -1
  br i1 %189, label %.lr.ph44, label %._crit_edge40

.lr.ph44:                                         ; preds = %.loopexit
  %190 = sext i32 %jz.2 to i64
  br label %192

.preheader38:                                     ; preds = %192
  br i1 %189, label %.preheader32.lr.ph, label %._crit_edge40

.preheader32.lr.ph:                               ; preds = %.preheader38
  %.op = xor i32 %3, -1
  %191 = sext i32 %jz.2 to i64
  br label %.preheader32

; <label>:192                                     ; preds = %192, %.lr.ph44
  %indvars.iv131 = phi i64 [ %190, %.lr.ph44 ], [ %indvars.iv.next132, %192 ]
  %fw.242 = phi double [ %188, %.lr.ph44 ], [ %198, %192 ]
  %193 = getelementptr inbounds [20 x i32]* %iq, i64 0, i64 %indvars.iv131
  %194 = load i32* %193, align 4, !tbaa !6
  %195 = sitofp i32 %194 to double
  %196 = fmul double %fw.242, %195
  %197 = getelementptr inbounds [20 x double]* %q, i64 0, i64 %indvars.iv131
  store double %196, double* %197, align 8, !tbaa !3
  %198 = fmul double %fw.242, 0x3E70000000000000
  %indvars.iv.next132 = add i64 %indvars.iv131, -1
  %199 = trunc i64 %indvars.iv131 to i32
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %192, label %.preheader38

.preheader32:                                     ; preds = %.critedge, %.preheader32.lr.ph
  %indvars.iv129 = phi i64 [ %191, %.preheader32.lr.ph ], [ %indvars.iv.next130, %.critedge ]
  %indvars.iv125 = phi i32 [ -1, %.preheader32.lr.ph ], [ %indvars.iv.next126, %.critedge ]
  %201 = icmp ugt i32 %indvars.iv125, %.op
  %umax = select i1 %201, i32 %indvars.iv125, i32 %.op
  %202 = sub i32 0, %umax
  %203 = trunc i64 %indvars.iv129 to i32
  %204 = sub nsw i32 %jz.2, %203
  %205 = icmp slt i32 %204, 0
  br i1 %205, label %.critedge, label %.lr.ph36

.lr.ph36:                                         ; preds = %.lr.ph36, %.preheader32
  %indvars.iv123 = phi i64 [ %indvars.iv.next124, %.lr.ph36 ], [ 0, %.preheader32 ]
  %fw.335 = phi double [ %212, %.lr.ph36 ], [ 0.000000e+00, %.preheader32 ]
  %206 = getelementptr inbounds [8 x double]* @PIo2, i64 0, i64 %indvars.iv123
  %207 = load double* %206, align 8, !tbaa !3
  %208 = add nsw i64 %indvars.iv123, %indvars.iv129
  %209 = getelementptr inbounds [20 x double]* %q, i64 0, i64 %208
  %210 = load double* %209, align 8, !tbaa !3
  %211 = fmul double %207, %210
  %212 = fadd double %fw.335, %211
  %indvars.iv.next124 = add i64 %indvars.iv123, 1
  %lftr.wideiv127 = trunc i64 %indvars.iv.next124 to i32
  %exitcond128 = icmp eq i32 %lftr.wideiv127, %202
  br i1 %exitcond128, label %.critedge, label %.lr.ph36

.critedge:                                        ; preds = %.lr.ph36, %.preheader32
  %fw.3.lcssa = phi double [ 0.000000e+00, %.preheader32 ], [ %212, %.lr.ph36 ]
  %213 = sext i32 %204 to i64
  %214 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %213
  store double %fw.3.lcssa, double* %214, align 8, !tbaa !3
  %indvars.iv.next130 = add i64 %indvars.iv129, -1
  %215 = icmp sgt i32 %203, 0
  %indvars.iv.next126 = add i32 %indvars.iv125, -1
  br i1 %215, label %.preheader32, label %._crit_edge40

._crit_edge40:                                    ; preds = %.critedge, %.preheader38, %.loopexit
  switch i32 %prec, label %302 [
    i32 0, label %.preheader26
    i32 1, label %.preheader20
    i32 2, label %.preheader20
    i32 3, label %.preheader11
  ]

.preheader26:                                     ; preds = %._crit_edge40
  br i1 %189, label %.lr.ph29, label %._crit_edge30

.lr.ph29:                                         ; preds = %.preheader26
  %216 = sext i32 %jz.2 to i64
  br label %220

.preheader20:                                     ; preds = %._crit_edge40, %._crit_edge40
  br i1 %189, label %.lr.ph23, label %._crit_edge24

.lr.ph23:                                         ; preds = %.preheader20
  %217 = sext i32 %jz.2 to i64
  br label %231

.preheader11:                                     ; preds = %._crit_edge40
  %218 = icmp sgt i32 %jz.2, 0
  br i1 %218, label %.lr.ph13, label %.preheader._crit_edge

.lr.ph13:                                         ; preds = %.preheader11
  %219 = sext i32 %jz.2 to i64
  %.phi.trans.insert188 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %219
  %.pre189 = load double* %.phi.trans.insert188, align 8, !tbaa !3
  br label %259

; <label>:220                                     ; preds = %220, %.lr.ph29
  %indvars.iv120 = phi i64 [ %216, %.lr.ph29 ], [ %indvars.iv.next121, %220 ]
  %fw.428 = phi double [ 0.000000e+00, %.lr.ph29 ], [ %223, %220 ]
  %221 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv120
  %222 = load double* %221, align 8, !tbaa !3
  %223 = fadd double %fw.428, %222
  %indvars.iv.next121 = add i64 %indvars.iv120, -1
  %224 = trunc i64 %indvars.iv120 to i32
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %220, label %._crit_edge30

._crit_edge30:                                    ; preds = %220, %.preheader26
  %fw.4.lcssa = phi double [ 0.000000e+00, %.preheader26 ], [ %223, %220 ]
  %226 = icmp eq i32 %ih.04, 0
  br i1 %226, label %229, label %227

; <label>:227                                     ; preds = %._crit_edge30
  %228 = fsub double -0.000000e+00, %fw.4.lcssa
  br label %229

; <label>:229                                     ; preds = %227, %._crit_edge30
  %230 = phi double [ %228, %227 ], [ %fw.4.lcssa, %._crit_edge30 ]
  store double %230, double* %y, align 8, !tbaa !3
  br label %302

; <label>:231                                     ; preds = %231, %.lr.ph23
  %indvars.iv117 = phi i64 [ %217, %.lr.ph23 ], [ %indvars.iv.next118, %231 ]
  %fw.522 = phi double [ 0.000000e+00, %.lr.ph23 ], [ %234, %231 ]
  %232 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv117
  %233 = load double* %232, align 8, !tbaa !3
  %234 = fadd double %fw.522, %233
  %indvars.iv.next118 = add i64 %indvars.iv117, -1
  %235 = trunc i64 %indvars.iv117 to i32
  %236 = icmp sgt i32 %235, 0
  br i1 %236, label %231, label %._crit_edge24

._crit_edge24:                                    ; preds = %231, %.preheader20
  %fw.5.lcssa = phi double [ 0.000000e+00, %.preheader20 ], [ %234, %231 ]
  store volatile double %fw.5.lcssa, double* %__v, align 8, !tbaa !3
  %237 = load volatile double* %__v, align 8, !tbaa !3
  %238 = icmp eq i32 %ih.04, 0
  br i1 %238, label %241, label %239

; <label>:239                                     ; preds = %._crit_edge24
  %240 = fsub double -0.000000e+00, %237
  br label %241

; <label>:241                                     ; preds = %239, %._crit_edge24
  %242 = phi double [ %240, %239 ], [ %237, %._crit_edge24 ]
  store double %242, double* %y, align 8, !tbaa !3
  %243 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 0
  %244 = load double* %243, align 16, !tbaa !3
  %245 = fsub double %244, %237
  %246 = icmp slt i32 %jz.2, 1
  br i1 %246, label %._crit_edge18, label %.lr.ph17

.lr.ph17:                                         ; preds = %241
  %247 = add i32 %jz.2, 1
  br label %248

; <label>:248                                     ; preds = %248, %.lr.ph17
  %indvars.iv114 = phi i64 [ 1, %.lr.ph17 ], [ %indvars.iv.next115, %248 ]
  %fw.615 = phi double [ %245, %.lr.ph17 ], [ %251, %248 ]
  %249 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv114
  %250 = load double* %249, align 8, !tbaa !3
  %251 = fadd double %fw.615, %250
  %indvars.iv.next115 = add i64 %indvars.iv114, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next115 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %247
  br i1 %exitcond, label %._crit_edge18, label %248

._crit_edge18:                                    ; preds = %248, %241
  %fw.6.lcssa = phi double [ %245, %241 ], [ %251, %248 ]
  br i1 %238, label %254, label %252

; <label>:252                                     ; preds = %._crit_edge18
  %253 = fsub double -0.000000e+00, %fw.6.lcssa
  br label %254

; <label>:254                                     ; preds = %252, %._crit_edge18
  %255 = phi double [ %253, %252 ], [ %fw.6.lcssa, %._crit_edge18 ]
  %256 = getelementptr inbounds double* %y, i64 1
  store double %255, double* %256, align 8, !tbaa !3
  br label %302

.preheader8:                                      ; preds = %259
  %257 = icmp sgt i32 %jz.2, 1
  br i1 %257, label %.lr.ph10, label %.preheader._crit_edge

.lr.ph10:                                         ; preds = %.preheader8
  %258 = sext i32 %jz.2 to i64
  %.phi.trans.insert = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %258
  %.pre = load double* %.phi.trans.insert, align 8, !tbaa !3
  br label %270

; <label>:259                                     ; preds = %259, %.lr.ph13
  %260 = phi double [ %.pre189, %.lr.ph13 ], [ %264, %259 ]
  %indvars.iv111 = phi i64 [ %219, %.lr.ph13 ], [ %indvars.iv.next112, %259 ]
  %indvars.iv.next112 = add i64 %indvars.iv111, -1
  %261 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv.next112
  %262 = load double* %261, align 8, !tbaa !3
  %263 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv111
  %264 = fadd double %262, %260
  %265 = fsub double %262, %264
  %266 = fadd double %260, %265
  store double %266, double* %263, align 8, !tbaa !3
  store double %264, double* %261, align 8, !tbaa !3
  %267 = trunc i64 %indvars.iv.next112 to i32
  %268 = icmp sgt i32 %267, 0
  br i1 %268, label %259, label %.preheader8

.preheader:                                       ; preds = %270
  br i1 %257, label %.lr.ph, label %.preheader._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %269 = sext i32 %jz.2 to i64
  br label %280

; <label>:270                                     ; preds = %270, %.lr.ph10
  %271 = phi double [ %.pre, %.lr.ph10 ], [ %275, %270 ]
  %indvars.iv109 = phi i64 [ %258, %.lr.ph10 ], [ %indvars.iv.next110, %270 ]
  %indvars.iv.next110 = add i64 %indvars.iv109, -1
  %272 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv.next110
  %273 = load double* %272, align 8, !tbaa !3
  %274 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv109
  %275 = fadd double %273, %271
  %276 = fsub double %273, %275
  %277 = fadd double %271, %276
  store double %277, double* %274, align 8, !tbaa !3
  store double %275, double* %272, align 8, !tbaa !3
  %278 = trunc i64 %indvars.iv.next110 to i32
  %279 = icmp sgt i32 %278, 1
  br i1 %279, label %270, label %.preheader

; <label>:280                                     ; preds = %280, %.lr.ph
  %indvars.iv = phi i64 [ %269, %.lr.ph ], [ %indvars.iv.next, %280 ]
  %fw.77 = phi double [ 0.000000e+00, %.lr.ph ], [ %283, %280 ]
  %281 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 %indvars.iv
  %282 = load double* %281, align 8, !tbaa !3
  %283 = fadd double %fw.77, %282
  %indvars.iv.next = add i64 %indvars.iv, -1
  %284 = trunc i64 %indvars.iv.next to i32
  %285 = icmp sgt i32 %284, 1
  br i1 %285, label %280, label %.preheader._crit_edge

.preheader._crit_edge:                            ; preds = %280, %.preheader, %.preheader8, %.preheader11
  %fw.7.lcssa = phi double [ 0.000000e+00, %.preheader ], [ %283, %280 ], [ 0.000000e+00, %.preheader8 ], [ 0.000000e+00, %.preheader11 ]
  %286 = icmp eq i32 %ih.04, 0
  %287 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 0
  %288 = load double* %287, align 16, !tbaa !3
  br i1 %286, label %289, label %294

; <label>:289                                     ; preds = %.preheader._crit_edge
  store double %288, double* %y, align 8, !tbaa !3
  %290 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 1
  %291 = load double* %290, align 8, !tbaa !3
  %292 = getelementptr inbounds double* %y, i64 1
  store double %291, double* %292, align 8, !tbaa !3
  %293 = getelementptr inbounds double* %y, i64 2
  store double %fw.7.lcssa, double* %293, align 8, !tbaa !3
  br label %302

; <label>:294                                     ; preds = %.preheader._crit_edge
  %295 = fsub double -0.000000e+00, %288
  store double %295, double* %y, align 8, !tbaa !3
  %296 = getelementptr inbounds [20 x double]* %fq, i64 0, i64 1
  %297 = load double* %296, align 8, !tbaa !3
  %298 = fsub double -0.000000e+00, %297
  %299 = getelementptr inbounds double* %y, i64 1
  store double %298, double* %299, align 8, !tbaa !3
  %300 = fsub double -0.000000e+00, %fw.7.lcssa
  %301 = getelementptr inbounds double* %y, i64 2
  store double %300, double* %301, align 8, !tbaa !3
  br label %302

; <label>:302                                     ; preds = %294, %289, %254, %229, %._crit_edge40
  %303 = and i32 %n.1, 7
  ret i32 %303
}

define i32 @__rem_pio2(double %x, double* %y) nounwind uwtable optsize {
  %tx = alloca [3 x double], align 16
  %ty = alloca [2 x double], align 16
  %__v = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ult i32 %4, 1074752123
  br i1 %5, label %6, label %38

; <label>:6                                       ; preds = %0
  %7 = and i32 %3, 1048575
  %8 = icmp eq i32 %7, 598523
  br i1 %8, label %76, label %9

; <label>:9                                       ; preds = %6
  %10 = icmp ult i32 %4, 1073928573
  %11 = icmp sgt i32 %3, 0
  br i1 %10, label %12, label %25

; <label>:12                                      ; preds = %9
  br i1 %11, label %13, label %19

; <label>:13                                      ; preds = %12
  %14 = fadd double %x, 0xBFF921FB54400000
  %15 = fadd double %14, 0xBDD0B4611A626331
  store double %15, double* %y, align 8, !tbaa !3
  %16 = fsub double %14, %15
  %17 = fadd double %16, 0xBDD0B4611A626331
  %18 = getelementptr inbounds double* %y, i64 1
  store double %17, double* %18, align 8, !tbaa !3
  br label %165

; <label>:19                                      ; preds = %12
  %20 = fadd double %x, 0x3FF921FB54400000
  %21 = fadd double %20, 0x3DD0B4611A626331
  store double %21, double* %y, align 8, !tbaa !3
  %22 = fsub double %20, %21
  %23 = fadd double %22, 0x3DD0B4611A626331
  %24 = getelementptr inbounds double* %y, i64 1
  store double %23, double* %24, align 8, !tbaa !3
  br label %165

; <label>:25                                      ; preds = %9
  br i1 %11, label %26, label %32

; <label>:26                                      ; preds = %25
  %27 = fadd double %x, 0xC00921FB54400000
  %28 = fadd double %27, 0xBDE0B4611A626331
  store double %28, double* %y, align 8, !tbaa !3
  %29 = fsub double %27, %28
  %30 = fadd double %29, 0xBDE0B4611A626331
  %31 = getelementptr inbounds double* %y, i64 1
  store double %30, double* %31, align 8, !tbaa !3
  br label %165

; <label>:32                                      ; preds = %25
  %33 = fadd double %x, 0x400921FB54400000
  %34 = fadd double %33, 0x3DE0B4611A626331
  store double %34, double* %y, align 8, !tbaa !3
  %35 = fsub double %33, %34
  %36 = fadd double %35, 0x3DE0B4611A626331
  %37 = getelementptr inbounds double* %y, i64 1
  store double %36, double* %37, align 8, !tbaa !3
  br label %165

; <label>:38                                      ; preds = %0
  %39 = icmp ult i32 %4, 1075594812
  br i1 %39, label %40, label %74

; <label>:40                                      ; preds = %38
  %41 = icmp ult i32 %4, 1075183037
  br i1 %41, label %42, label %58

; <label>:42                                      ; preds = %40
  %43 = icmp eq i32 %4, 1074977148
  br i1 %43, label %76, label %44

; <label>:44                                      ; preds = %42
  %45 = icmp sgt i32 %3, 0
  br i1 %45, label %46, label %52

; <label>:46                                      ; preds = %44
  %47 = fadd double %x, 0xC012D97C7F300000
  %48 = fadd double %47, 0xBDE90E91A79394CA
  store double %48, double* %y, align 8, !tbaa !3
  %49 = fsub double %47, %48
  %50 = fadd double %49, 0xBDE90E91A79394CA
  %51 = getelementptr inbounds double* %y, i64 1
  store double %50, double* %51, align 8, !tbaa !3
  br label %165

; <label>:52                                      ; preds = %44
  %53 = fadd double %x, 0x4012D97C7F300000
  %54 = fadd double %53, 0x3DE90E91A79394CA
  store double %54, double* %y, align 8, !tbaa !3
  %55 = fsub double %53, %54
  %56 = fadd double %55, 0x3DE90E91A79394CA
  %57 = getelementptr inbounds double* %y, i64 1
  store double %56, double* %57, align 8, !tbaa !3
  br label %165

; <label>:58                                      ; preds = %40
  %59 = icmp eq i32 %4, 1075388923
  br i1 %59, label %76, label %60

; <label>:60                                      ; preds = %58
  %61 = icmp sgt i32 %3, 0
  br i1 %61, label %62, label %68

; <label>:62                                      ; preds = %60
  %63 = fadd double %x, 0xC01921FB54400000
  %64 = fadd double %63, 0xBDF0B4611A626331
  store double %64, double* %y, align 8, !tbaa !3
  %65 = fsub double %63, %64
  %66 = fadd double %65, 0xBDF0B4611A626331
  %67 = getelementptr inbounds double* %y, i64 1
  store double %66, double* %67, align 8, !tbaa !3
  br label %165

; <label>:68                                      ; preds = %60
  %69 = fadd double %x, 0x401921FB54400000
  %70 = fadd double %69, 0x3DF0B4611A626331
  store double %70, double* %y, align 8, !tbaa !3
  %71 = fsub double %69, %70
  %72 = fadd double %71, 0x3DF0B4611A626331
  %73 = getelementptr inbounds double* %y, i64 1
  store double %72, double* %73, align 8, !tbaa !3
  br label %165

; <label>:74                                      ; preds = %38
  %75 = icmp ult i32 %4, 1094263291
  br i1 %75, label %76, label %120

; <label>:76                                      ; preds = %74, %58, %42, %6
  %77 = fmul double %x, 0x3FE45F306DC9C883
  %78 = fadd double %77, 0x4338000000000000
  store volatile double %78, double* %__v, align 8, !tbaa !3
  %79 = load volatile double* %__v, align 8, !tbaa !3
  %80 = fadd double %79, 0xC338000000000000
  %81 = fptosi double %80 to i32
  %82 = fmul double %80, 0x3FF921FB54400000
  %83 = fsub double %x, %82
  %84 = fmul double %80, 0x3DD0B4611A626331
  %85 = lshr i32 %4, 20
  %86 = fsub double %83, %84
  store double %86, double* %y, align 8, !tbaa !3
  %87 = bitcast double %86 to i64
  %88 = lshr i64 %87, 52
  %89 = trunc i64 %88 to i32
  %90 = and i32 %89, 2047
  %91 = sub i32 %85, %90
  %92 = icmp sgt i32 %91, 16
  br i1 %92, label %93, label %115

; <label>:93                                      ; preds = %76
  %94 = fmul double %80, 0x3DD0B4611A600000
  %95 = fsub double %83, %94
  %96 = fmul double %80, 0x3BA3198A2E037073
  %97 = fsub double %83, %95
  %98 = fsub double %97, %94
  %99 = fsub double %96, %98
  %100 = fsub double %95, %99
  store double %100, double* %y, align 8, !tbaa !3
  %101 = bitcast double %100 to i64
  %102 = lshr i64 %101, 52
  %103 = trunc i64 %102 to i32
  %104 = and i32 %103, 2047
  %105 = sub i32 %85, %104
  %106 = icmp sgt i32 %105, 49
  br i1 %106, label %107, label %115

; <label>:107                                     ; preds = %93
  %108 = fmul double %80, 0x3BA3198A2E000000
  %109 = fsub double %95, %108
  %110 = fmul double %80, 0x397B839A252049C1
  %111 = fsub double %95, %109
  %112 = fsub double %111, %108
  %113 = fsub double %110, %112
  %114 = fsub double %109, %113
  store double %114, double* %y, align 8, !tbaa !3
  br label %115

; <label>:115                                     ; preds = %107, %93, %76
  %116 = phi double [ %114, %107 ], [ %100, %93 ], [ %86, %76 ]
  %r.0 = phi double [ %109, %107 ], [ %95, %93 ], [ %83, %76 ]
  %w.0 = phi double [ %113, %107 ], [ %99, %93 ], [ %84, %76 ]
  %117 = fsub double %r.0, %116
  %118 = fsub double %117, %w.0
  %119 = getelementptr inbounds double* %y, i64 1
  store double %118, double* %119, align 8, !tbaa !3
  br label %165

; <label>:120                                     ; preds = %74
  %121 = icmp ugt i32 %4, 2146435071
  br i1 %121, label %122, label %125

; <label>:122                                     ; preds = %120
  %123 = fsub double %x, %x
  %124 = getelementptr inbounds double* %y, i64 1
  store double %123, double* %124, align 8, !tbaa !3
  store double %123, double* %y, align 8, !tbaa !3
  br label %165

; <label>:125                                     ; preds = %120
  %126 = lshr i32 %4, 20
  %127 = add nsw i32 %126, -1046
  %128 = shl i32 %127, 20
  %129 = sub nsw i32 %4, %128
  %130 = zext i32 %129 to i64
  %131 = shl nuw i64 %130, 32
  %132 = and i64 %1, 4294967295
  %133 = or i64 %131, %132
  %134 = bitcast i64 %133 to double
  br label %135

; <label>:135                                     ; preds = %135, %125
  %indvars.iv10 = phi i64 [ 0, %125 ], [ %indvars.iv.next11, %135 ]
  %z.09 = phi double [ %134, %125 ], [ %140, %135 ]
  %136 = fptosi double %z.09 to i32
  %137 = sitofp i32 %136 to double
  %138 = getelementptr inbounds [3 x double]* %tx, i64 0, i64 %indvars.iv10
  store double %137, double* %138, align 8, !tbaa !3
  %139 = fsub double %z.09, %137
  %140 = fmul double %139, 0x4170000000000000
  %indvars.iv.next11 = add i64 %indvars.iv10, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next11 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 2
  br i1 %exitcond, label %141, label %135

; <label>:141                                     ; preds = %135
  %142 = getelementptr inbounds [3 x double]* %tx, i64 0, i64 2
  store double %140, double* %142, align 16, !tbaa !3
  br label %143

; <label>:143                                     ; preds = %._crit_edge, %141
  %indvars.iv = phi i64 [ %phitmp, %._crit_edge ], [ 2, %141 ]
  %nx.0 = phi i32 [ %147, %._crit_edge ], [ 3, %141 ]
  %144 = getelementptr inbounds [3 x double]* %tx, i64 0, i64 %indvars.iv
  %145 = load double* %144, align 8, !tbaa !3
  %146 = fcmp oeq double %145, 0.000000e+00
  br i1 %146, label %._crit_edge, label %148

._crit_edge:                                      ; preds = %143
  %147 = add nsw i32 %nx.0, -1
  %phitmp = add i64 %indvars.iv, -1
  br label %143

; <label>:148                                     ; preds = %143
  %149 = getelementptr inbounds [3 x double]* %tx, i64 0, i64 0
  %150 = getelementptr inbounds [2 x double]* %ty, i64 0, i64 0
  %151 = call i32 @__rem_pio2_large(double* %149, double* %150, i32 %127, i32 %nx.0, i32 1) nounwind optsize
  %152 = icmp slt i32 %3, 0
  %153 = load double* %150, align 16, !tbaa !3
  br i1 %152, label %154, label %161

; <label>:154                                     ; preds = %148
  %155 = fsub double -0.000000e+00, %153
  store double %155, double* %y, align 8, !tbaa !3
  %156 = getelementptr inbounds [2 x double]* %ty, i64 0, i64 1
  %157 = load double* %156, align 8, !tbaa !3
  %158 = fsub double -0.000000e+00, %157
  %159 = getelementptr inbounds double* %y, i64 1
  store double %158, double* %159, align 8, !tbaa !3
  %160 = sub nsw i32 0, %151
  br label %165

; <label>:161                                     ; preds = %148
  store double %153, double* %y, align 8, !tbaa !3
  %162 = getelementptr inbounds [2 x double]* %ty, i64 0, i64 1
  %163 = load double* %162, align 8, !tbaa !3
  %164 = getelementptr inbounds double* %y, i64 1
  store double %163, double* %164, align 8, !tbaa !3
  br label %165

; <label>:165                                     ; preds = %161, %154, %122, %115, %68, %62, %52, %46, %32, %26, %19, %13
  %.0 = phi i32 [ %81, %115 ], [ 1, %13 ], [ -1, %19 ], [ 2, %26 ], [ -2, %32 ], [ 3, %46 ], [ -3, %52 ], [ 4, %62 ], [ -4, %68 ], [ 0, %122 ], [ %160, %154 ], [ %151, %161 ]
  ret i32 %.0
}

define float @remquof(float %x, float %y, i32* nocapture %quo) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = bitcast float %y to i32
  %3 = xor i32 %2, %1
  %4 = and i32 %3, -2147483648
  %5 = and i32 %1, -2147483648
  %6 = xor i32 %5, %1
  %7 = and i32 %2, 2147483647
  %8 = icmp eq i32 %7, 0
  %9 = icmp sgt i32 %6, 2139095039
  %or.cond = or i1 %8, %9
  %10 = icmp ugt i32 %7, 2139095040
  %or.cond8 = or i1 %or.cond, %10
  br i1 %or.cond8, label %11, label %14

; <label>:11                                      ; preds = %0
  %12 = fmul float %x, %y
  %13 = fdiv float %12, %12
  br label %128

; <label>:14                                      ; preds = %0
  %15 = icmp slt i32 %6, %7
  br i1 %15, label %94, label %16

; <label>:16                                      ; preds = %14
  %17 = icmp eq i32 %6, %7
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %16
  store i32 1, i32* %quo, align 4, !tbaa !6
  %19 = lshr i32 %1, 31
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [2 x float]* @Zero608, i64 0, i64 %20
  %22 = load float* %21, align 4, !tbaa !2
  br label %128

; <label>:23                                      ; preds = %16
  %24 = icmp slt i32 %6, 8388608
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %23
  %26 = shl i32 %6, 8
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %.lr.ph31, label %.loopexit27

.lr.ph31:                                         ; preds = %.lr.ph31, %25
  %i.029 = phi i32 [ %29, %.lr.ph31 ], [ %26, %25 ]
  %ix.028 = phi i32 [ %28, %.lr.ph31 ], [ -126, %25 ]
  %28 = add nsw i32 %ix.028, -1
  %29 = shl i32 %i.029, 1
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %.lr.ph31, label %.loopexit27

; <label>:31                                      ; preds = %23
  %32 = ashr i32 %6, 23
  %33 = add nsw i32 %32, -127
  br label %.loopexit27

.loopexit27:                                      ; preds = %31, %.lr.ph31, %25
  %ix.1 = phi i32 [ %33, %31 ], [ -126, %25 ], [ %28, %.lr.ph31 ]
  %34 = icmp ult i32 %7, 8388608
  br i1 %34, label %35, label %41

; <label>:35                                      ; preds = %.loopexit27
  %36 = shl i32 %2, 8
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %.lr.ph25, label %.loopexit

.lr.ph25:                                         ; preds = %.lr.ph25, %35
  %i.123 = phi i32 [ %39, %.lr.ph25 ], [ %36, %35 ]
  %iy.022 = phi i32 [ %38, %.lr.ph25 ], [ -126, %35 ]
  %38 = add nsw i32 %iy.022, -1
  %39 = shl i32 %i.123, 1
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %.lr.ph25, label %.loopexit

; <label>:41                                      ; preds = %.loopexit27
  %42 = lshr i32 %7, 23
  %43 = add nsw i32 %42, -127
  br label %.loopexit

.loopexit:                                        ; preds = %41, %.lr.ph25, %35
  %iy.1 = phi i32 [ %43, %41 ], [ -126, %35 ], [ %38, %.lr.ph25 ]
  %44 = icmp sgt i32 %ix.1, -127
  br i1 %44, label %45, label %48

; <label>:45                                      ; preds = %.loopexit
  %46 = and i32 %6, 8388607
  %47 = or i32 %46, 8388608
  br label %51

; <label>:48                                      ; preds = %.loopexit
  %49 = sub nsw i32 -126, %ix.1
  %50 = shl i32 %6, %49
  br label %51

; <label>:51                                      ; preds = %48, %45
  %hx.0 = phi i32 [ %47, %45 ], [ %50, %48 ]
  %52 = icmp sgt i32 %iy.1, -127
  br i1 %52, label %53, label %56

; <label>:53                                      ; preds = %51
  %54 = and i32 %2, 8388607
  %55 = or i32 %54, 8388608
  br label %59

; <label>:56                                      ; preds = %51
  %57 = sub nsw i32 -126, %iy.1
  %58 = shl i32 %7, %57
  br label %59

; <label>:59                                      ; preds = %56, %53
  %hy.0 = phi i32 [ %55, %53 ], [ %58, %56 ]
  %60 = icmp eq i32 %ix.1, %iy.1
  %61 = sub nsw i32 %hx.0, %hy.0
  br i1 %60, label %._crit_edge18, label %.lr.ph17

.lr.ph17:                                         ; preds = %59
  %62 = sub nsw i32 %ix.1, %iy.1
  br label %63

; <label>:63                                      ; preds = %63, %.lr.ph17
  %64 = phi i32 [ %61, %.lr.ph17 ], [ %70, %63 ]
  %65 = phi i32 [ 0, %.lr.ph17 ], [ %68, %63 ]
  %n.015 = phi i32 [ %62, %.lr.ph17 ], [ %66, %63 ]
  %hx.114 = phi i32 [ %hx.0, %.lr.ph17 ], [ %hx.2, %63 ]
  %66 = add nsw i32 %n.015, -1
  %67 = icmp slt i32 %64, 0
  %hx.2.in = select i1 %67, i32 %hx.114, i32 %64
  %.lobit = lshr i32 %64, 31
  %q.0 = or i32 %.lobit, %65
  %hx.2 = shl i32 %hx.2.in, 1
  %q.1 = shl i32 %q.0, 1
  %68 = xor i32 %q.1, 2
  %69 = icmp eq i32 %66, 0
  %70 = sub nsw i32 %hx.2, %hy.0
  br i1 %69, label %._crit_edge18, label %63

._crit_edge18:                                    ; preds = %63, %59
  %.lcssa13 = phi i32 [ %61, %59 ], [ %70, %63 ]
  %.lcssa = phi i32 [ 0, %59 ], [ %68, %63 ]
  %hx.1.lcssa = phi i32 [ %hx.0, %59 ], [ %hx.2, %63 ]
  %71 = icmp sgt i32 %.lcssa13, -1
  %.lobit9 = lshr i32 %.lcssa13, 31
  %.lobit9.not = xor i32 %.lobit9, 1
  %.q.0 = or i32 %.lobit9.not, %.lcssa
  %hx.3 = select i1 %71, i32 %.lcssa13, i32 %hx.1.lcssa
  %72 = icmp eq i32 %hx.3, 0
  br i1 %72, label %74, label %.preheader

.preheader:                                       ; preds = %._crit_edge18
  %73 = icmp slt i32 %hx.3, 8388608
  br i1 %73, label %.lr.ph, label %._crit_edge

; <label>:74                                      ; preds = %._crit_edge18
  %75 = icmp ne i32 %4, 0
  %76 = sub i32 0, %.q.0
  %77 = select i1 %75, i32 %76, i32 %.q.0
  store i32 %77, i32* %quo, align 4, !tbaa !6
  %78 = lshr i32 %1, 31
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [2 x float]* @Zero608, i64 0, i64 %79
  %81 = load float* %80, align 4, !tbaa !2
  br label %128

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %hx.411 = phi i32 [ %82, %.lr.ph ], [ %hx.3, %.preheader ]
  %iy.210 = phi i32 [ %83, %.lr.ph ], [ %iy.1, %.preheader ]
  %82 = shl i32 %hx.411, 1
  %83 = add nsw i32 %iy.210, -1
  %84 = icmp slt i32 %82, 8388608
  br i1 %84, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %hx.4.lcssa = phi i32 [ %hx.3, %.preheader ], [ %82, %.lr.ph ]
  %iy.2.lcssa = phi i32 [ %iy.1, %.preheader ], [ %83, %.lr.ph ]
  %85 = icmp sgt i32 %iy.2.lcssa, -127
  br i1 %85, label %86, label %91

; <label>:86                                      ; preds = %._crit_edge
  %87 = add nsw i32 %hx.4.lcssa, -8388608
  %88 = shl i32 %iy.2.lcssa, 23
  %89 = add i32 %88, 1065353216
  %90 = or i32 %87, %89
  br label %94

; <label>:91                                      ; preds = %._crit_edge
  %92 = sub nsw i32 -126, %iy.2.lcssa
  %93 = ashr i32 %hx.4.lcssa, %92
  br label %94

; <label>:94                                      ; preds = %91, %86, %14
  %hx.5 = phi i32 [ %90, %86 ], [ %93, %91 ], [ %6, %14 ]
  %q.3 = phi i32 [ %.q.0, %86 ], [ %.q.0, %91 ], [ 0, %14 ]
  %95 = bitcast i32 %hx.5 to float
  %96 = tail call float @fabsf(float %y) nounwind optsize
  %97 = fcmp olt float %96, 0x3820000000000000
  br i1 %97, label %98, label %109

; <label>:98                                      ; preds = %94
  %99 = fadd float %95, %95
  %100 = fcmp ogt float %99, %96
  br i1 %100, label %106, label %101

; <label>:101                                     ; preds = %98
  %102 = fcmp oeq float %99, %96
  br i1 %102, label %103, label %120

; <label>:103                                     ; preds = %101
  %104 = and i32 %q.3, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %120, label %106

; <label>:106                                     ; preds = %103, %98
  %107 = add i32 %q.3, 1
  %108 = fsub float %95, %96
  br label %120

; <label>:109                                     ; preds = %94
  %110 = fmul float %96, 5.000000e-01
  %111 = fcmp ogt float %95, %110
  br i1 %111, label %117, label %112

; <label>:112                                     ; preds = %109
  %113 = fcmp oeq float %95, %110
  br i1 %113, label %114, label %120

; <label>:114                                     ; preds = %112
  %115 = and i32 %q.3, 1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %120, label %117

; <label>:117                                     ; preds = %114, %109
  %118 = add i32 %q.3, 1
  %119 = fsub float %95, %96
  br label %120

; <label>:120                                     ; preds = %117, %114, %112, %106, %103, %101
  %q.4 = phi i32 [ %107, %106 ], [ %q.3, %103 ], [ %q.3, %101 ], [ %118, %117 ], [ %q.3, %114 ], [ %q.3, %112 ]
  %.05 = phi float [ %108, %106 ], [ %95, %103 ], [ %95, %101 ], [ %119, %117 ], [ %95, %114 ], [ %95, %112 ]
  %121 = bitcast float %.05 to i32
  %122 = xor i32 %121, %5
  %123 = bitcast i32 %122 to float
  %124 = and i32 %q.4, 2147483647
  %125 = icmp ne i32 %4, 0
  %126 = sub i32 0, %124
  %127 = select i1 %125, i32 %126, i32 %124
  store i32 %127, i32* %quo, align 4, !tbaa !6
  br label %128

; <label>:128                                     ; preds = %120, %74, %18, %11
  %.0 = phi float [ %13, %11 ], [ %123, %120 ], [ %22, %18 ], [ %81, %74 ]
  ret float %.0
}

define x86_fp80 @remquol(x86_fp80 %x, x86_fp80 %y, i32* nocapture %quo) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = zext i80 %1 to i128
  %3 = bitcast x86_fp80 %y to i80
  %4 = lshr i80 %1, 64
  %5 = trunc i80 %4 to i32
  %6 = lshr i80 %1, 79
  %7 = lshr i80 %3, 64
  %8 = trunc i80 %7 to i32
  %9 = xor i80 %3, %1
  %10 = lshr i80 %9, 79
  %11 = trunc i80 %10 to i32
  %12 = and i32 %5, 32767
  %13 = zext i32 %12 to i128
  %14 = shl nuw nsw i128 %13, 64
  %mask36 = and i128 %2, 18446744073709551615
  %ins37 = or i128 %14, %mask36
  %ins4 = and i80 %3, 604462909807314587353087
  %15 = trunc i128 %ins37 to i80
  %16 = bitcast i80 %15 to x86_fp80
  %17 = and i32 %8, 32767
  %18 = lshr i80 %3, 32
  %19 = trunc i80 %18 to i32
  %20 = trunc i80 %3 to i32
  %21 = or i80 %18, %3
  %22 = trunc i80 %21 to i32
  %23 = or i32 %22, %17
  %24 = icmp eq i32 %23, 0
  %25 = icmp eq i32 %12, 32767
  %or.cond51 = or i1 %24, %25
  br i1 %or.cond51, label %35, label %26

; <label>:26                                      ; preds = %0
  %27 = icmp eq i32 %17, 32767
  br i1 %27, label %28, label %38

; <label>:28                                      ; preds = %26
  %29 = trunc i80 %18 to i64
  %30 = and i64 %29, 2147483647
  %31 = trunc i80 %3 to i64
  %32 = and i64 %31, 4294967295
  %33 = or i64 %30, %32
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %38, label %35

; <label>:35                                      ; preds = %28, %0
  %36 = fmul x86_fp80 %16, %y
  %37 = fdiv x86_fp80 %36, %36
  br label %207

; <label>:38                                      ; preds = %28, %26
  %39 = icmp ugt i32 %12, %17
  br i1 %39, label %57, label %40

; <label>:40                                      ; preds = %38
  %41 = icmp ult i32 %12, %17
  br i1 %41, label %165, label %42

; <label>:42                                      ; preds = %40
  %43 = lshr i80 %1, 32
  %44 = trunc i80 %43 to i32
  %45 = icmp ugt i32 %44, %19
  br i1 %45, label %._crit_edge76, label %46

._crit_edge76:                                    ; preds = %42
  %.pre = trunc i80 %1 to i32
  br label %50

; <label>:46                                      ; preds = %42
  %47 = icmp ult i32 %44, %19
  %48 = trunc i80 %1 to i32
  %49 = icmp ult i32 %48, %20
  %or.cond = or i1 %47, %49
  br i1 %or.cond, label %165, label %50

; <label>:50                                      ; preds = %46, %._crit_edge76
  %.pre-phi = phi i32 [ %.pre, %._crit_edge76 ], [ %48, %46 ]
  %51 = icmp eq i32 %44, %19
  %52 = icmp eq i32 %.pre-phi, %20
  %or.cond49 = and i1 %51, %52
  br i1 %or.cond49, label %53, label %57

; <label>:53                                      ; preds = %50
  store i32 1, i32* %quo, align 4, !tbaa !6
  %54 = trunc i80 %6 to i64
  %55 = getelementptr inbounds [2 x x86_fp80]* @Zero609, i64 0, i64 %54
  %56 = load x86_fp80* %55, align 16, !tbaa !4
  br label %207

; <label>:57                                      ; preds = %50, %38
  %58 = icmp eq i32 %12, 0
  br i1 %58, label %59, label %67

; <label>:59                                      ; preds = %57
  %60 = fmul x86_fp80 %16, 0xK41FF8000000000000000
  %61 = bitcast x86_fp80 %60 to i80
  %62 = zext i80 %61 to i128
  %63 = lshr i80 %61, 64
  %64 = trunc i80 %63 to i32
  %65 = and i32 %64, 32767
  %66 = add nsw i32 %65, -16895
  br label %69

; <label>:67                                      ; preds = %57
  %68 = add nsw i32 %12, -16383
  br label %69

; <label>:69                                      ; preds = %67, %59
  %ux.0 = phi i128 [ %62, %59 ], [ %ins37, %67 ]
  %ix.0 = phi i32 [ %66, %59 ], [ %68, %67 ]
  %70 = icmp eq i32 %17, 0
  br i1 %70, label %71, label %79

; <label>:71                                      ; preds = %69
  %72 = bitcast i80 %ins4 to x86_fp80
  %73 = fmul x86_fp80 %72, 0xK41FF8000000000000000
  %74 = bitcast x86_fp80 %73 to i80
  %75 = lshr i80 %74, 64
  %76 = trunc i80 %75 to i32
  %77 = and i32 %76, 32767
  %78 = add nsw i32 %77, -16895
  %extract.t = trunc i80 %74 to i32
  %extract = lshr i80 %74, 32
  %extract.t42 = trunc i80 %extract to i64
  br label %81

; <label>:79                                      ; preds = %69
  %80 = add nsw i32 %17, -16383
  %extract.t44 = trunc i80 %18 to i64
  br label %81

; <label>:81                                      ; preds = %79, %71
  %uy.0.off0 = phi i32 [ %extract.t, %71 ], [ %20, %79 ]
  %uy.0.off32 = phi i64 [ %extract.t42, %71 ], [ %extract.t44, %79 ]
  %iy.0 = phi i32 [ %78, %71 ], [ %80, %79 ]
  %82 = lshr i128 %ux.0, 32
  %83 = trunc i128 %82 to i64
  %84 = and i64 %83, 4294967295
  %85 = trunc i128 %ux.0 to i32
  %86 = icmp eq i32 %ix.0, %iy.0
  %87 = and i64 %uy.0.off32, 4294967295
  %88 = sub nsw i64 %84, %87
  %89 = sub i32 %85, %uy.0.off0
  %90 = icmp ult i32 %85, %uy.0.off0
  %91 = sext i1 %90 to i64
  %.5058 = add nsw i64 %88, %91
  br i1 %86, label %._crit_edge64, label %.lr.ph63

.lr.ph63:                                         ; preds = %81
  %92 = sub nsw i32 %ix.0, %iy.0
  br label %93

; <label>:93                                      ; preds = %109, %.lr.ph63
  %.5061 = phi i64 [ %.5058, %.lr.ph63 ], [ %.50, %109 ]
  %94 = phi i32 [ %89, %.lr.ph63 ], [ %113, %109 ]
  %.in = phi i32 [ %92, %.lr.ph63 ], [ %96, %109 ]
  %95 = phi i32 [ 0, %.lr.ph63 ], [ %110, %109 ]
  %hx.060 = phi i64 [ %84, %.lr.ph63 ], [ %hx.1, %109 ]
  %lx.059 = phi i32 [ %85, %.lr.ph63 ], [ %lx.1, %109 ]
  %96 = add nsw i32 %.in, -1
  %97 = icmp slt i64 %.5061, 0
  br i1 %97, label %98, label %103

; <label>:98                                      ; preds = %93
  %99 = shl nsw i64 %hx.060, 1
  %100 = lshr i32 %lx.059, 31
  %101 = zext i32 %100 to i64
  %102 = or i64 %99, %101
  br label %109

; <label>:103                                     ; preds = %93
  %104 = shl nsw i64 %.5061, 1
  %105 = lshr i32 %94, 31
  %106 = zext i32 %105 to i64
  %107 = or i64 %104, %106
  %108 = or i32 %95, 1
  br label %109

; <label>:109                                     ; preds = %103, %98
  %lx.1.in = phi i32 [ %lx.059, %98 ], [ %94, %103 ]
  %hx.1 = phi i64 [ %102, %98 ], [ %107, %103 ]
  %q.1 = phi i32 [ %95, %98 ], [ %108, %103 ]
  %lx.1 = shl i32 %lx.1.in, 1
  %110 = shl i32 %q.1, 1
  %111 = icmp eq i32 %96, 0
  %112 = sub nsw i64 %hx.1, %87
  %113 = sub i32 %lx.1, %uy.0.off0
  %114 = icmp ult i32 %lx.1, %uy.0.off0
  %115 = sext i1 %114 to i64
  %.50 = add nsw i64 %112, %115
  br i1 %111, label %._crit_edge64, label %93

._crit_edge64:                                    ; preds = %109, %81
  %.50.lcssa = phi i64 [ %.5058, %81 ], [ %.50, %109 ]
  %.lcssa57 = phi i32 [ %89, %81 ], [ %113, %109 ]
  %.lcssa = phi i32 [ 0, %81 ], [ %110, %109 ]
  %hx.0.lcssa = phi i64 [ %84, %81 ], [ %hx.1, %109 ]
  %lx.0.lcssa = phi i32 [ %85, %81 ], [ %lx.1, %109 ]
  %116 = icmp sgt i64 %.50.lcssa, -1
  %lx.2 = select i1 %116, i32 %.lcssa57, i32 %lx.0.lcssa
  %hx.2 = select i1 %116, i64 %.50.lcssa, i64 %hx.0.lcssa
  %.50.lobit = lshr i64 %.50.lcssa, 63
  %117 = trunc i64 %.50.lobit to i32
  %q.0 = or i32 %117, %.lcssa
  %q.2 = xor i32 %q.0, 1
  %118 = zext i32 %lx.2 to i64
  %119 = or i64 %118, %hx.2
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %122, label %.preheader

.preheader:                                       ; preds = %._crit_edge64
  %121 = icmp ult i64 %hx.2, 2147483648
  br i1 %121, label %.lr.ph, label %._crit_edge

; <label>:122                                     ; preds = %._crit_edge64
  %123 = icmp ne i32 %11, 0
  %124 = sub nsw i32 0, %q.2
  %125 = select i1 %123, i32 %124, i32 %q.2
  store i32 %125, i32* %quo, align 4, !tbaa !6
  %126 = trunc i80 %6 to i64
  %127 = getelementptr inbounds [2 x x86_fp80]* @Zero609, i64 0, i64 %126
  %128 = load x86_fp80* %127, align 16, !tbaa !4
  br label %207

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %hx.354 = phi i64 [ %132, %.lr.ph ], [ %hx.2, %.preheader ]
  %lx.353 = phi i32 [ %133, %.lr.ph ], [ %lx.2, %.preheader ]
  %iy.152 = phi i32 [ %134, %.lr.ph ], [ %iy.0, %.preheader ]
  %129 = shl nsw i64 %hx.354, 1
  %130 = lshr i32 %lx.353, 31
  %131 = zext i32 %130 to i64
  %132 = or i64 %129, %131
  %133 = shl i32 %lx.353, 1
  %134 = add nsw i32 %iy.152, -1
  %135 = icmp ult i64 %132, 2147483648
  br i1 %135, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %hx.3.lcssa = phi i64 [ %hx.2, %.preheader ], [ %132, %.lr.ph ]
  %lx.3.lcssa = phi i32 [ %lx.2, %.preheader ], [ %133, %.lr.ph ]
  %iy.1.lcssa = phi i32 [ %iy.0, %.preheader ], [ %134, %.lr.ph ]
  %.mask = and i64 %hx.3.lcssa, 4294967295
  %136 = zext i64 %.mask to i128
  %137 = shl nuw nsw i128 %136, 32
  %mask30 = and i128 %ux.0, -18446744073709551616
  %138 = zext i32 %lx.3.lcssa to i128
  %mask27 = or i128 %138, %mask30
  %ins28 = or i128 %mask27, %137
  %139 = icmp slt i32 %iy.1.lcssa, -16381
  br i1 %139, label %140, label %153

; <label>:140                                     ; preds = %._crit_edge
  %141 = add nsw i32 %iy.1.lcssa, 16895
  %142 = and i32 %141, 32767
  %143 = lshr i128 %ux.0, 64
  %144 = trunc i128 %143 to i32
  %145 = and i32 %144, 32768
  %146 = or i32 %142, %145
  %147 = zext i32 %146 to i128
  %148 = shl nuw nsw i128 %147, 64
  %mask24 = and i128 %ins28, 18446744073709551615
  %ins25 = or i128 %mask24, %148
  %149 = trunc i128 %ins25 to i80
  %150 = bitcast i80 %149 to x86_fp80
  %151 = fmul x86_fp80 %150, 0xK3DFF8000000000000000
  %152 = bitcast x86_fp80 %151 to i80
  br label %162

; <label>:153                                     ; preds = %._crit_edge
  %154 = add nsw i32 %iy.1.lcssa, 16383
  %155 = and i32 %154, 32767
  %156 = lshr i128 %ux.0, 64
  %157 = trunc i128 %156 to i32
  %158 = and i32 %157, 32768
  %159 = or i32 %155, %158
  %160 = zext i32 %159 to i128
  %161 = shl nuw nsw i128 %160, 64
  %mask18 = and i128 %ins28, 18446744073709551615
  %ins19 = or i128 %mask18, %161
  %extract.t46 = trunc i128 %ins19 to i80
  br label %162

; <label>:162                                     ; preds = %153, %140
  %ux.1.off0 = phi i80 [ %152, %140 ], [ %extract.t46, %153 ]
  %163 = and i80 %ux.1.off0, 604462909807314587353087
  %164 = bitcast i80 %163 to x86_fp80
  br label %165

; <label>:165                                     ; preds = %162, %46, %40
  %q.3 = phi i32 [ %q.2, %162 ], [ 0, %46 ], [ 0, %40 ]
  %.01 = phi x86_fp80 [ %164, %162 ], [ %16, %46 ], [ %16, %40 ]
  %166 = tail call x86_fp80 @fabsl(x86_fp80 %y) nounwind optsize
  %167 = fcmp olt x86_fp80 %166, 0xK00028000000000000000
  br i1 %167, label %168, label %179

; <label>:168                                     ; preds = %165
  %169 = fadd x86_fp80 %.01, %.01
  %170 = fcmp ogt x86_fp80 %169, %166
  br i1 %170, label %176, label %171

; <label>:171                                     ; preds = %168
  %172 = fcmp oeq x86_fp80 %169, %166
  br i1 %172, label %173, label %190

; <label>:173                                     ; preds = %171
  %174 = and i32 %q.3, 1
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %190, label %176

; <label>:176                                     ; preds = %173, %168
  %177 = add nsw i32 %q.3, 1
  %178 = fsub x86_fp80 %.01, %166
  br label %190

; <label>:179                                     ; preds = %165
  %180 = fmul x86_fp80 %166, 0xK3FFE8000000000000000
  %181 = fcmp ogt x86_fp80 %.01, %180
  br i1 %181, label %187, label %182

; <label>:182                                     ; preds = %179
  %183 = fcmp oeq x86_fp80 %.01, %180
  br i1 %183, label %184, label %190

; <label>:184                                     ; preds = %182
  %185 = and i32 %q.3, 1
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %190, label %187

; <label>:187                                     ; preds = %184, %179
  %188 = add nsw i32 %q.3, 1
  %189 = fsub x86_fp80 %.01, %166
  br label %190

; <label>:190                                     ; preds = %187, %184, %182, %176, %173, %171
  %q.4 = phi i32 [ %177, %176 ], [ %q.3, %173 ], [ %q.3, %171 ], [ %188, %187 ], [ %q.3, %184 ], [ %q.3, %182 ]
  %.1 = phi x86_fp80 [ %178, %176 ], [ %.01, %173 ], [ %.01, %171 ], [ %189, %187 ], [ %.01, %184 ], [ %.01, %182 ]
  %191 = bitcast x86_fp80 %.1 to i80
  %192 = lshr i80 %191, 64
  %193 = trunc i80 %192 to i32
  %194 = lshr i80 %191, 79
  %195 = xor i80 %194, %6
  %196 = trunc i80 %195 to i32
  %197 = shl nuw nsw i32 %196, 15
  %198 = and i32 %193, 32767
  %199 = or i32 %197, %198
  %200 = zext i32 %199 to i80
  %201 = shl nuw i80 %200, 64
  %mask9 = and i80 %191, 18446744073709551615
  %ins10 = or i80 %201, %mask9
  %202 = bitcast i80 %ins10 to x86_fp80
  %203 = and i32 %q.4, 2147483647
  %204 = icmp ne i32 %11, 0
  %205 = sub nsw i32 0, %203
  %206 = select i1 %204, i32 %205, i32 %203
  store i32 %206, i32* %quo, align 4, !tbaa !6
  br label %207

; <label>:207                                     ; preds = %190, %122, %53, %35
  %.0 = phi x86_fp80 [ %37, %35 ], [ %202, %190 ], [ %56, %53 ], [ %128, %122 ]
  ret x86_fp80 %.0
}

define double @remquo(double %x, double %y, i32* nocapture %quo) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = bitcast double %y to i64
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %5 to i32
  %9 = xor i64 %6, %2
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, -2147483648
  %12 = and i32 %3, -2147483648
  %13 = xor i32 %12, %3
  %14 = and i32 %7, 2147483647
  %15 = or i32 %14, %8
  %16 = icmp eq i32 %15, 0
  %17 = icmp sgt i32 %13, 2146435071
  %or.cond = or i1 %16, %17
  br i1 %or.cond, label %24, label %18

; <label>:18                                      ; preds = %0
  %19 = sub i32 0, %8
  %20 = or i32 %8, %19
  %21 = lshr i32 %20, 31
  %22 = or i32 %14, %21
  %23 = icmp ugt i32 %22, 2146435072
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %18, %0
  %25 = fmul double %x, %y
  %26 = fdiv double %25, %25
  br label %219

; <label>:27                                      ; preds = %18
  %28 = icmp sgt i32 %13, %14
  br i1 %28, label %38, label %29

; <label>:29                                      ; preds = %27
  %30 = icmp slt i32 %13, %14
  %31 = icmp ult i32 %4, %8
  %or.cond12 = or i1 %30, %31
  br i1 %or.cond12, label %175, label %32

; <label>:32                                      ; preds = %29
  %33 = icmp eq i32 %4, %8
  br i1 %33, label %34, label %38

; <label>:34                                      ; preds = %32
  store i32 1, i32* %quo, align 4, !tbaa !6
  %35 = lshr i64 %1, 63
  %36 = getelementptr inbounds [2 x double]* @Zero612, i64 0, i64 %35
  %37 = load double* %36, align 8, !tbaa !3
  br label %219

; <label>:38                                      ; preds = %32, %27
  %39 = icmp slt i32 %13, 1048576
  br i1 %39, label %40, label %52

; <label>:40                                      ; preds = %38
  %41 = icmp eq i32 %3, %12
  br i1 %41, label %.preheader47, label %46

.preheader47:                                     ; preds = %40
  %42 = icmp sgt i32 %4, 0
  br i1 %42, label %.lr.ph51, label %.loopexit

.lr.ph51:                                         ; preds = %.lr.ph51, %.preheader47
  %ix.050 = phi i32 [ %43, %.lr.ph51 ], [ -1043, %.preheader47 ]
  %i.049 = phi i32 [ %44, %.lr.ph51 ], [ %4, %.preheader47 ]
  %43 = add nsw i32 %ix.050, -1
  %44 = shl i32 %i.049, 1
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %.lr.ph51, label %.loopexit

; <label>:46                                      ; preds = %40
  %47 = shl i32 %13, 11
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph, %46
  %ix.115 = phi i32 [ %49, %.lr.ph ], [ -1022, %46 ]
  %i.114 = phi i32 [ %50, %.lr.ph ], [ %47, %46 ]
  %49 = add nsw i32 %ix.115, -1
  %50 = shl i32 %i.114, 1
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %.lr.ph, label %.loopexit

; <label>:52                                      ; preds = %38
  %53 = ashr i32 %13, 20
  %54 = add nsw i32 %53, -1023
  br label %.loopexit

.loopexit:                                        ; preds = %52, %.lr.ph, %46, %.lr.ph51, %.preheader47
  %ix.2 = phi i32 [ %54, %52 ], [ -1022, %46 ], [ %49, %.lr.ph ], [ -1043, %.preheader47 ], [ %43, %.lr.ph51 ]
  %55 = icmp ult i32 %14, 1048576
  br i1 %55, label %56, label %69

; <label>:56                                      ; preds = %.loopexit
  %57 = icmp eq i32 %14, 0
  br i1 %57, label %.preheader41, label %62

.preheader41:                                     ; preds = %56
  %58 = icmp sgt i32 %8, 0
  br i1 %58, label %.lr.ph45, label %.loopexit16

.lr.ph45:                                         ; preds = %.lr.ph45, %.preheader41
  %iy.044 = phi i32 [ %59, %.lr.ph45 ], [ -1043, %.preheader41 ]
  %i.243 = phi i32 [ %60, %.lr.ph45 ], [ %8, %.preheader41 ]
  %59 = add nsw i32 %iy.044, -1
  %60 = shl i32 %i.243, 1
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %.lr.ph45, label %.loopexit16

; <label>:62                                      ; preds = %56
  %63 = lshr i64 %5, 21
  %.tr = trunc i64 %63 to i32
  %64 = and i32 %.tr, -2048
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %.lr.ph19, label %.loopexit16

.lr.ph19:                                         ; preds = %.lr.ph19, %62
  %iy.118 = phi i32 [ %66, %.lr.ph19 ], [ -1022, %62 ]
  %i.317 = phi i32 [ %67, %.lr.ph19 ], [ %64, %62 ]
  %66 = add nsw i32 %iy.118, -1
  %67 = shl i32 %i.317, 1
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %.lr.ph19, label %.loopexit16

; <label>:69                                      ; preds = %.loopexit
  %70 = lshr i32 %14, 20
  %71 = add nsw i32 %70, -1023
  br label %.loopexit16

.loopexit16:                                      ; preds = %69, %.lr.ph19, %62, %.lr.ph45, %.preheader41
  %iy.2 = phi i32 [ %71, %69 ], [ -1022, %62 ], [ %66, %.lr.ph19 ], [ -1043, %.preheader41 ], [ %59, %.lr.ph45 ]
  %72 = icmp sgt i32 %ix.2, -1023
  br i1 %72, label %73, label %76

; <label>:73                                      ; preds = %.loopexit16
  %74 = and i32 %13, 1048575
  %75 = or i32 %74, 1048576
  br label %88

; <label>:76                                      ; preds = %.loopexit16
  %77 = sub nsw i32 -1022, %ix.2
  %78 = icmp slt i32 %77, 32
  br i1 %78, label %79, label %85

; <label>:79                                      ; preds = %76
  %80 = shl i32 %13, %77
  %81 = sub nsw i32 32, %77
  %82 = lshr i32 %4, %81
  %83 = or i32 %82, %80
  %84 = shl i32 %4, %77
  br label %88

; <label>:85                                      ; preds = %76
  %86 = add nsw i32 %77, -32
  %87 = shl i32 %4, %86
  br label %88

; <label>:88                                      ; preds = %85, %79, %73
  %lx.0 = phi i32 [ %4, %73 ], [ %84, %79 ], [ 0, %85 ]
  %hx.0 = phi i32 [ %75, %73 ], [ %83, %79 ], [ %87, %85 ]
  %89 = icmp sgt i32 %iy.2, -1023
  br i1 %89, label %90, label %93

; <label>:90                                      ; preds = %88
  %91 = and i32 %7, 1048575
  %92 = or i32 %91, 1048576
  br label %105

; <label>:93                                      ; preds = %88
  %94 = sub nsw i32 -1022, %iy.2
  %95 = icmp slt i32 %94, 32
  br i1 %95, label %96, label %102

; <label>:96                                      ; preds = %93
  %97 = shl i32 %14, %94
  %98 = sub nsw i32 32, %94
  %99 = lshr i32 %8, %98
  %100 = or i32 %99, %97
  %101 = shl i32 %8, %94
  br label %105

; <label>:102                                     ; preds = %93
  %103 = add nsw i32 %94, -32
  %104 = shl i32 %8, %103
  br label %105

; <label>:105                                     ; preds = %102, %96, %90
  %ly.0 = phi i32 [ %8, %90 ], [ %101, %96 ], [ 0, %102 ]
  %hy.0 = phi i32 [ %92, %90 ], [ %100, %96 ], [ %104, %102 ]
  %106 = icmp eq i32 %ix.2, %iy.2
  %107 = sub nsw i32 %hx.0, %hy.0
  %108 = sub i32 %lx.0, %ly.0
  %109 = icmp ult i32 %lx.0, %ly.0
  %110 = sext i1 %109 to i32
  %.1329 = add nsw i32 %107, %110
  br i1 %106, label %._crit_edge35, label %.lr.ph34

.lr.ph34:                                         ; preds = %105
  %111 = sub nsw i32 %ix.2, %iy.2
  br label %112

; <label>:112                                     ; preds = %126, %.lr.ph34
  %.1332 = phi i32 [ %.1329, %.lr.ph34 ], [ %.13, %126 ]
  %113 = phi i32 [ %108, %.lr.ph34 ], [ %130, %126 ]
  %.in = phi i32 [ %111, %.lr.ph34 ], [ %115, %126 ]
  %114 = phi i32 [ 0, %.lr.ph34 ], [ %127, %126 ]
  %hx.131 = phi i32 [ %hx.0, %.lr.ph34 ], [ %hx.2, %126 ]
  %lx.130 = phi i32 [ %lx.0, %.lr.ph34 ], [ %lx.2, %126 ]
  %115 = add nsw i32 %.in, -1
  %116 = icmp slt i32 %.1332, 0
  br i1 %116, label %117, label %121

; <label>:117                                     ; preds = %112
  %118 = shl nsw i32 %hx.131, 1
  %119 = lshr i32 %lx.130, 31
  %120 = or i32 %118, %119
  br label %126

; <label>:121                                     ; preds = %112
  %122 = shl nsw i32 %.1332, 1
  %123 = lshr i32 %113, 31
  %124 = or i32 %122, %123
  %125 = or i32 %114, 1
  br label %126

; <label>:126                                     ; preds = %121, %117
  %lx.2.in = phi i32 [ %lx.130, %117 ], [ %113, %121 ]
  %hx.2 = phi i32 [ %120, %117 ], [ %124, %121 ]
  %q.1 = phi i32 [ %114, %117 ], [ %125, %121 ]
  %lx.2 = shl i32 %lx.2.in, 1
  %127 = shl i32 %q.1, 1
  %128 = icmp eq i32 %115, 0
  %129 = sub nsw i32 %hx.2, %hy.0
  %130 = sub i32 %lx.2, %ly.0
  %131 = icmp ult i32 %lx.2, %ly.0
  %132 = sext i1 %131 to i32
  %.13 = add nsw i32 %129, %132
  br i1 %128, label %._crit_edge35, label %112

._crit_edge35:                                    ; preds = %126, %105
  %.13.lcssa = phi i32 [ %.1329, %105 ], [ %.13, %126 ]
  %.lcssa28 = phi i32 [ %108, %105 ], [ %130, %126 ]
  %.lcssa = phi i32 [ 0, %105 ], [ %127, %126 ]
  %hx.1.lcssa = phi i32 [ %hx.0, %105 ], [ %hx.2, %126 ]
  %lx.1.lcssa = phi i32 [ %lx.0, %105 ], [ %lx.2, %126 ]
  %133 = icmp sgt i32 %.13.lcssa, -1
  %lx.3 = select i1 %133, i32 %.lcssa28, i32 %lx.1.lcssa
  %hx.3 = select i1 %133, i32 %.13.lcssa, i32 %hx.1.lcssa
  %.13.lobit = lshr i32 %.13.lcssa, 31
  %q.0 = or i32 %.13.lobit, %.lcssa
  %q.2 = xor i32 %q.0, 1
  %134 = or i32 %hx.3, %lx.3
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %137, label %.preheader

.preheader:                                       ; preds = %._crit_edge35
  %136 = icmp slt i32 %hx.3, 1048576
  br i1 %136, label %.lr.ph24, label %._crit_edge

; <label>:137                                     ; preds = %._crit_edge35
  %138 = icmp ne i32 %11, 0
  %139 = sub i32 0, %q.2
  %140 = select i1 %138, i32 %139, i32 %q.2
  store i32 %140, i32* %quo, align 4, !tbaa !6
  %141 = lshr i64 %1, 63
  %142 = getelementptr inbounds [2 x double]* @Zero612, i64 0, i64 %141
  %143 = load double* %142, align 8, !tbaa !3
  br label %219

.lr.ph24:                                         ; preds = %.lr.ph24, %.preheader
  %hx.423 = phi i32 [ %146, %.lr.ph24 ], [ %hx.3, %.preheader ]
  %iy.322 = phi i32 [ %148, %.lr.ph24 ], [ %iy.2, %.preheader ]
  %lx.421 = phi i32 [ %147, %.lr.ph24 ], [ %lx.3, %.preheader ]
  %144 = shl nsw i32 %hx.423, 1
  %145 = lshr i32 %lx.421, 31
  %146 = or i32 %144, %145
  %147 = shl i32 %lx.421, 1
  %148 = add nsw i32 %iy.322, -1
  %149 = icmp slt i32 %146, 1048576
  br i1 %149, label %.lr.ph24, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph24, %.preheader
  %hx.4.lcssa = phi i32 [ %hx.3, %.preheader ], [ %146, %.lr.ph24 ]
  %iy.3.lcssa = phi i32 [ %iy.2, %.preheader ], [ %148, %.lr.ph24 ]
  %lx.4.lcssa = phi i32 [ %lx.3, %.preheader ], [ %147, %.lr.ph24 ]
  %150 = icmp sgt i32 %iy.3.lcssa, -1023
  br i1 %150, label %151, label %156

; <label>:151                                     ; preds = %._crit_edge
  %152 = add nsw i32 %hx.4.lcssa, -1048576
  %153 = shl i32 %iy.3.lcssa, 20
  %154 = add i32 %153, 1072693248
  %155 = or i32 %152, %154
  br label %175

; <label>:156                                     ; preds = %._crit_edge
  %157 = sub nsw i32 -1022, %iy.3.lcssa
  %158 = icmp slt i32 %157, 21
  br i1 %158, label %159, label %165

; <label>:159                                     ; preds = %156
  %160 = lshr i32 %lx.4.lcssa, %157
  %161 = sub nsw i32 32, %157
  %162 = shl i32 %hx.4.lcssa, %161
  %163 = or i32 %162, %160
  %164 = ashr i32 %hx.4.lcssa, %157
  br label %175

; <label>:165                                     ; preds = %156
  %166 = icmp slt i32 %157, 32
  br i1 %166, label %167, label %172

; <label>:167                                     ; preds = %165
  %168 = sub nsw i32 32, %157
  %169 = shl i32 %hx.4.lcssa, %168
  %170 = lshr i32 %lx.4.lcssa, %157
  %171 = or i32 %169, %170
  br label %175

; <label>:172                                     ; preds = %165
  %173 = add nsw i32 %157, -32
  %174 = ashr i32 %hx.4.lcssa, %173
  br label %175

; <label>:175                                     ; preds = %172, %167, %159, %151, %29
  %lx.5 = phi i32 [ %lx.4.lcssa, %151 ], [ %163, %159 ], [ %171, %167 ], [ %174, %172 ], [ %4, %29 ]
  %hx.5 = phi i32 [ %155, %151 ], [ %164, %159 ], [ %12, %167 ], [ %12, %172 ], [ %13, %29 ]
  %q.3 = phi i32 [ %q.2, %151 ], [ %q.2, %159 ], [ %q.2, %167 ], [ %q.2, %172 ], [ 0, %29 ]
  %176 = zext i32 %hx.5 to i64
  %177 = shl nuw i64 %176, 32
  %178 = zext i32 %lx.5 to i64
  %179 = or i64 %177, %178
  %180 = bitcast i64 %179 to double
  %181 = tail call double @fabs(double %y) nounwind optsize
  %182 = fcmp olt double %181, 0x20000000000000
  br i1 %182, label %183, label %194

; <label>:183                                     ; preds = %175
  %184 = fadd double %180, %180
  %185 = fcmp ogt double %184, %181
  br i1 %185, label %191, label %186

; <label>:186                                     ; preds = %183
  %187 = fcmp oeq double %184, %181
  br i1 %187, label %188, label %205

; <label>:188                                     ; preds = %186
  %189 = and i32 %q.3, 1
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %205, label %191

; <label>:191                                     ; preds = %188, %183
  %192 = add i32 %q.3, 1
  %193 = fsub double %180, %181
  br label %205

; <label>:194                                     ; preds = %175
  %195 = fmul double %181, 5.000000e-01
  %196 = fcmp ogt double %180, %195
  br i1 %196, label %202, label %197

; <label>:197                                     ; preds = %194
  %198 = fcmp oeq double %180, %195
  br i1 %198, label %199, label %205

; <label>:199                                     ; preds = %197
  %200 = and i32 %q.3, 1
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %205, label %202

; <label>:202                                     ; preds = %199, %194
  %203 = add i32 %q.3, 1
  %204 = fsub double %180, %181
  br label %205

; <label>:205                                     ; preds = %202, %199, %197, %191, %188, %186
  %q.4 = phi i32 [ %192, %191 ], [ %q.3, %188 ], [ %q.3, %186 ], [ %203, %202 ], [ %q.3, %199 ], [ %q.3, %197 ]
  %.05 = phi double [ %193, %191 ], [ %180, %188 ], [ %180, %186 ], [ %204, %202 ], [ %180, %199 ], [ %180, %197 ]
  %206 = bitcast double %.05 to i64
  %207 = lshr i64 %206, 32
  %208 = trunc i64 %207 to i32
  %209 = and i64 %206, 4294967295
  %210 = xor i32 %208, %12
  %211 = zext i32 %210 to i64
  %212 = shl nuw i64 %211, 32
  %213 = or i64 %212, %209
  %214 = bitcast i64 %213 to double
  %215 = and i32 %q.4, 2147483647
  %216 = icmp ne i32 %11, 0
  %217 = sub i32 0, %215
  %218 = select i1 %216, i32 %217, i32 %215
  store i32 %218, i32* %quo, align 4, !tbaa !6
  br label %219

; <label>:219                                     ; preds = %205, %137, %34, %24
  %.0 = phi double [ %26, %24 ], [ %214, %205 ], [ %37, %34 ], [ %143, %137 ]
  ret double %.0
}

define i32 @renameat(i32 %oldfd, i8* %old, i32 %newfd, i8* %new) nounwind uwtable optsize {
  %1 = sext i32 %oldfd to i64
  %2 = ptrtoint i8* %old to i64
  %3 = sext i32 %newfd to i64
  %4 = ptrtoint i8* %new to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 329, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @rename(i8* %old, i8* %new) nounwind uwtable optsize {
  %1 = ptrtoint i8* %old to i64
  %2 = ptrtoint i8* %new to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 38, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @res_init() nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @res_query(i8* %name, i32 %class, i32 %type, i8* %dest, i32 %len) nounwind uwtable optsize {
  %1 = alloca i32, align 4
  store i32 %type, i32* %1, align 4, !tbaa !6
  %2 = icmp ne i32 %class, 1
  %3 = icmp slt i32 %len, 512
  %or.cond = or i1 %2, %3
  br i1 %or.cond, label %9, label %4

; <label>:4                                       ; preds = %0
  %5 = call i32 @__dns_doqueries(i8* %dest, i8* %name, i32* %1, i32 1) nounwind optsize
  switch i32 %5, label %9 [
    i32 -2, label %6
    i32 -3, label %7
    i32 -4, label %8
  ]

; <label>:6                                       ; preds = %4
  store i32 1, i32* @h_errno, align 4, !tbaa !6
  br label %9

; <label>:7                                       ; preds = %4
  store i32 2, i32* @h_errno, align 4, !tbaa !6
  br label %9

; <label>:8                                       ; preds = %4
  store i32 3, i32* @h_errno, align 4, !tbaa !6
  br label %9

; <label>:9                                       ; preds = %8, %7, %6, %4, %0
  %.0 = phi i32 [ -1, %8 ], [ -1, %7 ], [ -1, %6 ], [ -1, %0 ], [ 512, %4 ]
  ret i32 %.0
}

define %struct.__res_state* @__res_state() nounwind uwtable readnone optsize {
  ret %struct.__res_state* @__res_state.res
}

define void @rewinddir(%struct.__DIR_s.537* nocapture %dir) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__DIR_s.537* %dir, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = tail call i64 @lseek(i32 %2, i64 0, i32 0) nounwind optsize
  %4 = getelementptr inbounds %struct.__DIR_s.537* %dir, i64 0, i32 4
  store i32 0, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds %struct.__DIR_s.537* %dir, i64 0, i32 3
  store i32 0, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds %struct.__DIR_s.537* %dir, i64 0, i32 2
  store i64 0, i64* %6, align 8, !tbaa !5
  ret void
}

define void @rewind(%struct.__FILE_s.96* %f) nounwind uwtable optsize {
  %1 = tail call i32 @__fseeko_unlocked(%struct.__FILE_s.96* %f, i64 0, i32 0) nounwind optsize
  %2 = getelementptr inbounds %struct.__FILE_s.96* %f, i64 0, i32 0
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = and i32 %3, -33
  store i32 %4, i32* %2, align 4, !tbaa !6
  ret void
}

define i8* @rindex(i8* %s, i32 %c) nounwind uwtable optsize {
  %1 = tail call i8* @strrchr(i8* %s, i32 %c) nounwind optsize
  ret i8* %1
}

define float @rintf(float %x) nounwind uwtable optsize {
  %__v = alloca float, align 4
  %__v3 = alloca float, align 4
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 31
  %3 = lshr i32 %1, 23
  %4 = and i32 %3, 255
  %5 = add nsw i32 %4, -127
  %6 = icmp slt i32 %5, 23
  br i1 %6, label %7, label %33

; <label>:7                                       ; preds = %0
  %8 = icmp slt i32 %5, 0
  br i1 %8, label %9, label %25

; <label>:9                                       ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %37, label %12

; <label>:12                                      ; preds = %9
  %13 = zext i32 %2 to i64
  %14 = getelementptr inbounds [2 x float]* @TWO23, i64 0, i64 %13
  %15 = load float* %14, align 4, !tbaa !2
  %16 = fadd float %15, %x
  store volatile float %16, float* %__v, align 4, !tbaa !2
  %17 = load volatile float* %__v, align 4, !tbaa !2
  %18 = load float* %14, align 4, !tbaa !2
  %19 = fsub float %17, %18
  %20 = bitcast float %19 to i32
  %21 = and i32 %20, 2147483647
  %22 = and i32 %1, -2147483648
  %23 = or i32 %21, %22
  %24 = bitcast i32 %23 to float
  br label %37

; <label>:25                                      ; preds = %7
  %26 = zext i32 %2 to i64
  %27 = getelementptr inbounds [2 x float]* @TWO23, i64 0, i64 %26
  %28 = load float* %27, align 4, !tbaa !2
  %29 = fadd float %28, %x
  store volatile float %29, float* %__v3, align 4, !tbaa !2
  %30 = load volatile float* %__v3, align 4, !tbaa !2
  %31 = load float* %27, align 4, !tbaa !2
  %32 = fsub float %30, %31
  br label %37

; <label>:33                                      ; preds = %0
  %34 = icmp eq i32 %5, 128
  br i1 %34, label %35, label %37

; <label>:35                                      ; preds = %33
  %36 = fadd float %x, %x
  br label %37

; <label>:37                                      ; preds = %35, %33, %25, %12, %9
  %.0 = phi float [ %24, %12 ], [ %32, %25 ], [ %36, %35 ], [ %x, %9 ], [ %x, %33 ]
  ret float %.0
}

define x86_fp80 @rintl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp ugt i32 %4, 16445
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %0
  %7 = icmp eq i32 %4, 32767
  br i1 %7, label %8, label %24

; <label>:8                                       ; preds = %6
  %9 = fadd x86_fp80 %x, %x
  br label %24

; <label>:10                                      ; preds = %0
  %11 = lshr i80 %1, 79
  %12 = trunc i80 %11 to i64
  %13 = getelementptr inbounds [2 x float]* @shift, i64 0, i64 %12
  %14 = load float* %13, align 4, !tbaa !2
  %15 = fpext float %14 to x86_fp80
  %16 = fadd x86_fp80 %15, %x
  %17 = fsub x86_fp80 %16, %15
  %18 = icmp ult i32 %4, 16383
  %19 = fcmp oeq x86_fp80 %17, 0xK00000000000000000000
  %or.cond = and i1 %18, %19
  br i1 %or.cond, label %20, label %24

; <label>:20                                      ; preds = %10
  %21 = getelementptr inbounds [2 x float]* @zero615, i64 0, i64 %12
  %22 = load float* %21, align 4, !tbaa !2
  %23 = fpext float %22 to x86_fp80
  br label %24

; <label>:24                                      ; preds = %20, %10, %8, %6
  %.0 = phi x86_fp80 [ %9, %8 ], [ %23, %20 ], [ %x, %6 ], [ %17, %10 ]
  ret x86_fp80 %.0
}

define double @rint(double %x) nounwind uwtable optsize {
  %__v = alloca double, align 8
  %__v5 = alloca double, align 8
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = lshr i64 %1, 63
  %6 = lshr i64 %1, 52
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2047
  %9 = add nsw i32 %8, -1023
  %10 = icmp slt i32 %9, 20
  br i1 %10, label %11, label %61

; <label>:11                                      ; preds = %0
  %12 = icmp slt i32 %9, 0
  br i1 %12, label %13, label %44

; <label>:13                                      ; preds = %11
  %14 = and i32 %3, 2147483647
  %15 = or i32 %14, %4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %93, label %17

; <label>:17                                      ; preds = %13
  %18 = and i32 %3, 1048575
  %19 = or i32 %18, %4
  %20 = and i32 %3, -131072
  %21 = sub i32 0, %19
  %22 = or i32 %4, %21
  %23 = lshr i32 %22, 12
  %24 = and i32 %23, 524288
  %25 = or i32 %24, %20
  %26 = and i64 %1, 4294967295
  %27 = zext i32 %25 to i64
  %28 = shl nuw i64 %27, 32
  %29 = or i64 %28, %26
  %30 = bitcast i64 %29 to double
  %31 = getelementptr inbounds [2 x double]* @TWO52, i64 0, i64 %5
  %32 = load double* %31, align 8, !tbaa !3
  %33 = fadd double %32, %30
  store volatile double %33, double* %__v, align 8, !tbaa !3
  %34 = load volatile double* %__v, align 8, !tbaa !3
  %35 = load double* %31, align 8, !tbaa !3
  %36 = fsub double %34, %35
  %37 = bitcast double %36 to i64
  %38 = and i64 %37, 4294967295
  %39 = and i64 %37, 9223372032559808512
  %40 = and i64 %1, -9223372036854775808
  %41 = or i64 %38, %40
  %42 = or i64 %41, %39
  %43 = bitcast i64 %42 to double
  br label %93

; <label>:44                                      ; preds = %11
  %45 = lshr i32 1048575, %9
  %46 = and i32 %45, %3
  %47 = or i32 %46, %4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %93, label %49

; <label>:49                                      ; preds = %44
  %50 = lshr i32 %45, 1
  %51 = and i32 %50, %3
  %52 = or i32 %51, %4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %81, label %54

; <label>:54                                      ; preds = %49
  switch i32 %8, label %56 [
    i32 1042, label %81
    i32 1041, label %55
  ]

; <label>:55                                      ; preds = %54
  br label %81

; <label>:56                                      ; preds = %54
  %57 = xor i32 %50, -1
  %58 = and i32 %3, %57
  %59 = lshr i32 131072, %9
  %60 = or i32 %58, %59
  br label %81

; <label>:61                                      ; preds = %0
  %62 = icmp sgt i32 %9, 51
  br i1 %62, label %63, label %67

; <label>:63                                      ; preds = %61
  %64 = icmp eq i32 %9, 1024
  br i1 %64, label %65, label %93

; <label>:65                                      ; preds = %63
  %66 = fadd double %x, %x
  br label %93

; <label>:67                                      ; preds = %61
  %68 = add nsw i32 %8, -1043
  %69 = lshr i32 -1, %68
  %70 = and i32 %69, %4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %93, label %72

; <label>:72                                      ; preds = %67
  %73 = lshr i32 %69, 1
  %74 = and i32 %73, %4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %81, label %76

; <label>:76                                      ; preds = %72
  %77 = xor i32 %73, -1
  %78 = and i32 %4, %77
  %79 = lshr i32 1073741824, %68
  %80 = or i32 %78, %79
  br label %81

; <label>:81                                      ; preds = %76, %72, %56, %55, %54, %49
  %i1.0 = phi i32 [ -2147483648, %55 ], [ %4, %56 ], [ %4, %49 ], [ %80, %76 ], [ %4, %72 ], [ 1073741824, %54 ]
  %i0.0 = phi i32 [ %3, %55 ], [ %60, %56 ], [ %3, %49 ], [ %3, %76 ], [ %3, %72 ], [ %3, %54 ]
  %82 = zext i32 %i0.0 to i64
  %83 = shl nuw i64 %82, 32
  %84 = zext i32 %i1.0 to i64
  %85 = or i64 %83, %84
  %86 = bitcast i64 %85 to double
  %87 = getelementptr inbounds [2 x double]* @TWO52, i64 0, i64 %5
  %88 = load double* %87, align 8, !tbaa !3
  %89 = fadd double %88, %86
  store volatile double %89, double* %__v5, align 8, !tbaa !3
  %90 = load volatile double* %__v5, align 8, !tbaa !3
  %91 = load double* %87, align 8, !tbaa !3
  %92 = fsub double %90, %91
  br label %93

; <label>:93                                      ; preds = %81, %67, %65, %63, %44, %17, %13
  %.0 = phi double [ %43, %17 ], [ %92, %81 ], [ %66, %65 ], [ %x, %13 ], [ %x, %44 ], [ %x, %63 ], [ %x, %67 ]
  ret double %.0
}

define i32 @rmdir(i8* %path) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 40, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define float @roundf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2139095040
  %3 = icmp ult i32 %2, 2139095040
  br i1 %3, label %4, label %21

; <label>:4                                       ; preds = %0
  %5 = fcmp ult float %x, 0.000000e+00
  br i1 %5, label %12, label %6

; <label>:6                                       ; preds = %4
  %7 = tail call float @floorf(float %x) nounwind optsize
  %8 = fsub float %7, %x
  %9 = fcmp ugt float %8, -5.000000e-01
  br i1 %9, label %21, label %10

; <label>:10                                      ; preds = %6
  %11 = fadd float %7, 1.000000e+00
  br label %21

; <label>:12                                      ; preds = %4
  %13 = fsub float -0.000000e+00, %x
  %14 = tail call float @floorf(float %13) nounwind optsize
  %15 = fadd float %14, %x
  %16 = fcmp ugt float %15, -5.000000e-01
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %12
  %18 = fadd float %14, 1.000000e+00
  br label %19

; <label>:19                                      ; preds = %17, %12
  %t.1 = phi float [ %18, %17 ], [ %14, %12 ]
  %20 = fsub float -0.000000e+00, %t.1
  br label %21

; <label>:21                                      ; preds = %19, %10, %6, %0
  %.0 = phi float [ %20, %19 ], [ %x, %0 ], [ %11, %10 ], [ %7, %6 ]
  ret float %.0
}

define x86_fp80 @roundl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = tail call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp sgt i32 %1, 1
  br i1 %2, label %3, label %20

; <label>:3                                       ; preds = %0
  %4 = fcmp ult x86_fp80 %x, 0xK00000000000000000000
  br i1 %4, label %11, label %5

; <label>:5                                       ; preds = %3
  %6 = tail call x86_fp80 @floorl(x86_fp80 %x) nounwind optsize
  %7 = fsub x86_fp80 %6, %x
  %8 = fcmp ugt x86_fp80 %7, 0xKBFFE8000000000000000
  br i1 %8, label %20, label %9

; <label>:9                                       ; preds = %5
  %10 = fadd x86_fp80 %6, 0xK3FFF8000000000000000
  br label %20

; <label>:11                                      ; preds = %3
  %12 = fsub x86_fp80 0xK80000000000000000000, %x
  %13 = tail call x86_fp80 @floorl(x86_fp80 %12) nounwind optsize
  %14 = fadd x86_fp80 %13, %x
  %15 = fcmp ugt x86_fp80 %14, 0xKBFFE8000000000000000
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %11
  %17 = fadd x86_fp80 %13, 0xK3FFF8000000000000000
  br label %18

; <label>:18                                      ; preds = %16, %11
  %t.1 = phi x86_fp80 [ %17, %16 ], [ %13, %11 ]
  %19 = fsub x86_fp80 0xK80000000000000000000, %t.1
  br label %20

; <label>:20                                      ; preds = %18, %9, %5, %0
  %.0 = phi x86_fp80 [ %19, %18 ], [ %x, %0 ], [ %10, %9 ], [ %6, %5 ]
  ret x86_fp80 %.0
}

define double @round(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9218868437227405312
  %3 = icmp ult i64 %2, 9218868437227405312
  br i1 %3, label %4, label %21

; <label>:4                                       ; preds = %0
  %5 = fcmp ult double %x, 0.000000e+00
  br i1 %5, label %12, label %6

; <label>:6                                       ; preds = %4
  %7 = tail call double @floor(double %x) nounwind optsize
  %8 = fsub double %7, %x
  %9 = fcmp ugt double %8, -5.000000e-01
  br i1 %9, label %21, label %10

; <label>:10                                      ; preds = %6
  %11 = fadd double %7, 1.000000e+00
  br label %21

; <label>:12                                      ; preds = %4
  %13 = fsub double -0.000000e+00, %x
  %14 = tail call double @floor(double %13) nounwind optsize
  %15 = fadd double %14, %x
  %16 = fcmp ugt double %15, -5.000000e-01
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %12
  %18 = fadd double %14, 1.000000e+00
  br label %19

; <label>:19                                      ; preds = %17, %12
  %t.1 = phi double [ %18, %17 ], [ %14, %12 ]
  %20 = fsub double -0.000000e+00, %t.1
  br label %21

; <label>:21                                      ; preds = %19, %10, %6, %0
  %.0 = phi double [ %20, %19 ], [ %x, %0 ], [ %11, %10 ], [ %7, %6 ]
  ret double %.0
}

define i8* @sbrk(i64 %inc) nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = icmp eq i64 %inc, 0
  br i1 %3, label %9, label %4

; <label>:4                                       ; preds = %0
  %5 = add i64 %2, %inc
  %6 = tail call i64 (i64, ...)* @__syscall(i64 45, i64 %5, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = icmp eq i64 %7, %5
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %4, %0
  %10 = inttoptr i64 %2 to i8*
  br label %11

; <label>:11                                      ; preds = %9, %4
  %.0 = phi i8* [ %10, %9 ], [ inttoptr (i64 -1 to i8*), %4 ]
  ret i8* %.0
}

define float @scalbf(float %x, float %fn) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095040
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast float %fn to i32
  %6 = and i32 %5, 2147483647
  %7 = icmp ugt i32 %6, 2139095040
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %4, %0
  %9 = fmul float %x, %fn
  br label %36

; <label>:10                                      ; preds = %4
  %11 = icmp ult i32 %6, 2139095040
  br i1 %11, label %19, label %12

; <label>:12                                      ; preds = %10
  %13 = fcmp ogt float %fn, 0.000000e+00
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %12
  %15 = fmul float %x, %fn
  br label %36

; <label>:16                                      ; preds = %12
  %17 = fsub float -0.000000e+00, %fn
  %18 = fdiv float %x, %17
  br label %36

; <label>:19                                      ; preds = %10
  %20 = tail call float @rintf(float %fn) nounwind optsize
  %21 = fcmp une float %20, %fn
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %19
  %23 = fsub float %fn, %fn
  %24 = fdiv float %23, %23
  br label %36

; <label>:25                                      ; preds = %19
  %26 = fcmp ogt float %fn, 6.500000e+04
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %25
  %28 = tail call float @scalbnf(float %x, i32 65000) nounwind optsize
  br label %36

; <label>:29                                      ; preds = %25
  %30 = fcmp olt float %fn, -6.500000e+04
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %29
  %32 = tail call float @scalbnf(float %x, i32 -65000) nounwind optsize
  br label %36

; <label>:33                                      ; preds = %29
  %34 = fptosi float %fn to i32
  %35 = tail call float @scalbnf(float %x, i32 %34) nounwind optsize
  br label %36

; <label>:36                                      ; preds = %33, %31, %27, %22, %16, %14, %8
  %.0 = phi float [ %9, %8 ], [ %24, %22 ], [ %28, %27 ], [ %32, %31 ], [ %35, %33 ], [ %15, %14 ], [ %18, %16 ]
  ret float %.0
}

define float @scalblnf(float %x, i64 %n) nounwind uwtable optsize {
  %1 = icmp sgt i64 %n, 2147483647
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = icmp slt i64 %n, -2147483648
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %2
  br label %5

; <label>:5                                       ; preds = %4, %2, %0
  %.0 = phi i64 [ -2147483648, %4 ], [ %n, %2 ], [ 2147483647, %0 ]
  %6 = trunc i64 %.0 to i32
  %7 = tail call float @scalbnf(float %x, i32 %6) nounwind optsize
  ret float %7
}

define x86_fp80 @scalblnl(x86_fp80 %x, i64 %n) nounwind uwtable optsize {
  %1 = icmp sgt i64 %n, 2147483647
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = icmp slt i64 %n, -2147483648
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %2
  br label %5

; <label>:5                                       ; preds = %4, %2, %0
  %.0 = phi i64 [ -2147483648, %4 ], [ %n, %2 ], [ 2147483647, %0 ]
  %6 = trunc i64 %.0 to i32
  %7 = tail call x86_fp80 @scalbnl(x86_fp80 %x, i32 %6) nounwind optsize
  ret x86_fp80 %7
}

define double @scalbln(double %x, i64 %n) nounwind uwtable optsize {
  %1 = icmp sgt i64 %n, 2147483647
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = icmp slt i64 %n, -2147483648
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %2
  br label %5

; <label>:5                                       ; preds = %4, %2, %0
  %.0 = phi i64 [ -2147483648, %4 ], [ %n, %2 ], [ 2147483647, %0 ]
  %6 = trunc i64 %.0 to i32
  %7 = tail call double @scalbn(double %x, i32 %6) nounwind optsize
  ret double %7
}

define float @scalbnf(float %x, i32 %n) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %17

; <label>:5                                       ; preds = %0
  %6 = and i32 %1, 2147483647
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %43, label %8

; <label>:8                                       ; preds = %5
  %9 = fmul float %x, 0x4180000000000000
  %10 = bitcast float %9 to i32
  %11 = lshr i32 %10, 23
  %12 = and i32 %11, 255
  %13 = add nsw i32 %12, -25
  %14 = icmp slt i32 %n, -50000
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %8
  %16 = fmul float %9, 0x39B4484C00000000
  br label %43

; <label>:17                                      ; preds = %8, %0
  %k.0 = phi i32 [ %13, %8 ], [ %3, %0 ]
  %ix.0 = phi i32 [ %10, %8 ], [ %1, %0 ]
  %.03 = phi float [ %9, %8 ], [ %x, %0 ]
  %18 = icmp eq i32 %k.0, 255
  br i1 %18, label %19, label %21

; <label>:19                                      ; preds = %17
  %20 = fadd float %.03, %.03
  br label %43

; <label>:21                                      ; preds = %17
  %22 = add nsw i32 %k.0, %n
  %23 = icmp sgt i32 %22, 254
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %21
  %25 = tail call float @copysignf(float 0x46293E5940000000, float %.03) nounwind optsize
  %26 = fmul float %25, 0x46293E5940000000
  br label %43

; <label>:27                                      ; preds = %21
  %28 = icmp sgt i32 %22, 0
  br i1 %28, label %29, label %34

; <label>:29                                      ; preds = %27
  %30 = and i32 %ix.0, -2139095041
  %31 = shl i32 %22, 23
  %32 = or i32 %30, %31
  %33 = bitcast i32 %32 to float
  br label %43

; <label>:34                                      ; preds = %27
  %35 = icmp slt i32 %22, -24
  %36 = icmp sgt i32 %n, 50000
  %or.cond = and i1 %35, %36
  br i1 %or.cond, label %37, label %40

; <label>:37                                      ; preds = %34
  %38 = tail call float @copysignf(float 0x46293E5940000000, float %.03) nounwind optsize
  %39 = fmul float %38, 0x46293E5940000000
  br label %43

; <label>:40                                      ; preds = %34
  %41 = tail call float @copysignf(float 0x39B4484C00000000, float %.03) nounwind optsize
  %42 = fmul float %41, 0x39B4484C00000000
  br label %43

; <label>:43                                      ; preds = %40, %37, %29, %24, %19, %15, %5
  %.0 = phi float [ %16, %15 ], [ %20, %19 ], [ %26, %24 ], [ %33, %29 ], [ %39, %37 ], [ %42, %40 ], [ %x, %5 ]
  ret float %.0
}

define x86_fp80 @scalbnl(x86_fp80 %x, i32 %n) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %21

; <label>:6                                       ; preds = %0
  %7 = lshr i80 %1, 32
  %8 = or i80 %7, %1
  %9 = trunc i80 %8 to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %54, label %11

; <label>:11                                      ; preds = %6
  %12 = fmul x86_fp80 %x, 0xK407F8000000000000000
  %13 = bitcast x86_fp80 %12 to i80
  %14 = lshr i80 %13, 64
  %15 = trunc i80 %14 to i32
  %16 = and i32 %15, 32767
  %17 = add nsw i32 %16, -128
  %18 = icmp slt i32 %n, -50000
  br i1 %18, label %19, label %21

; <label>:19                                      ; preds = %11
  %20 = fmul x86_fp80 %x, 0xK017F8000000000000000
  br label %54

; <label>:21                                      ; preds = %11, %0
  %u.0.in = phi i80 [ %13, %11 ], [ %1, %0 ]
  %k.0 = phi i32 [ %17, %11 ], [ %4, %0 ]
  %22 = icmp eq i32 %k.0, 32767
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %21
  %24 = fadd x86_fp80 %x, %x
  br label %54

; <label>:25                                      ; preds = %21
  %26 = add nsw i32 %k.0, %n
  %27 = icmp sgt i32 %26, 32766
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %25
  %29 = tail call x86_fp80 @copysignl(x86_fp80 0xK7E7F8000000000000000, x86_fp80 %x) nounwind optsize
  %30 = fmul x86_fp80 %29, 0xK7E7F8000000000000000
  br label %54

; <label>:31                                      ; preds = %25
  %32 = icmp sgt i32 %26, 0
  br i1 %32, label %33, label %42

; <label>:33                                      ; preds = %31
  %34 = and i32 %26, 32767
  %35 = lshr i80 %u.0.in, 64
  %36 = trunc i80 %35 to i32
  %37 = and i32 %36, 32768
  %38 = or i32 %37, %34
  %39 = zext i32 %38 to i80
  %40 = shl nuw i80 %39, 64
  %mask = and i80 %u.0.in, 18446744073709551615
  %ins = or i80 %40, %mask
  %41 = bitcast i80 %ins to x86_fp80
  br label %54

; <label>:42                                      ; preds = %31
  %43 = icmp slt i32 %26, -127
  %44 = icmp sgt i32 %n, 50000
  %or.cond = and i1 %43, %44
  %45 = fptrunc x86_fp80 %x to double
  br i1 %or.cond, label %46, label %50

; <label>:46                                      ; preds = %42
  %47 = tail call double @copysign(double 0x7FF0000000000000, double %45) nounwind optsize
  %48 = fpext double %47 to x86_fp80
  %49 = fmul x86_fp80 %48, 0xK7E7F8000000000000000
  br label %54

; <label>:50                                      ; preds = %42
  %51 = tail call double @copysign(double 0.000000e+00, double %45) nounwind optsize
  %52 = fpext double %51 to x86_fp80
  %53 = fmul x86_fp80 %52, 0xK017F8000000000000000
  br label %54

; <label>:54                                      ; preds = %50, %46, %33, %28, %23, %19, %6
  %.0 = phi x86_fp80 [ %20, %19 ], [ %24, %23 ], [ %30, %28 ], [ %41, %33 ], [ %49, %46 ], [ %53, %50 ], [ %x, %6 ]
  ret x86_fp80 %.0
}

define double @scalbn(double %x, i32 %n) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = lshr i64 %1, 52
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 2047
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %25

; <label>:8                                       ; preds = %0
  %9 = trunc i64 %1 to i32
  %10 = and i32 %3, 2147483647
  %11 = or i32 %10, %9
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %56, label %13

; <label>:13                                      ; preds = %8
  %14 = fmul double %x, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  %18 = lshr i64 %15, 52
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 2047
  %21 = add nsw i32 %20, -54
  %22 = icmp slt i32 %n, -50000
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %13
  %24 = fmul double %14, 1.000000e-300
  br label %56

; <label>:25                                      ; preds = %13, %0
  %k.0 = phi i32 [ %21, %13 ], [ %6, %0 ]
  %hx.0 = phi i32 [ %17, %13 ], [ %3, %0 ]
  %.03 = phi double [ %14, %13 ], [ %x, %0 ]
  %26 = icmp eq i32 %k.0, 2047
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %25
  %28 = fadd double %.03, %.03
  br label %56

; <label>:29                                      ; preds = %25
  %30 = add nsw i32 %k.0, %n
  %31 = icmp sgt i32 %30, 2046
  br i1 %31, label %32, label %35

; <label>:32                                      ; preds = %29
  %33 = tail call double @copysign(double 1.000000e+300, double %.03) nounwind optsize
  %34 = fmul double %33, 1.000000e+300
  br label %56

; <label>:35                                      ; preds = %29
  %36 = icmp sgt i32 %30, 0
  br i1 %36, label %37, label %47

; <label>:37                                      ; preds = %35
  %38 = bitcast double %.03 to i64
  %39 = and i64 %38, 4294967295
  %40 = and i32 %hx.0, -2146435073
  %41 = shl i32 %30, 20
  %42 = or i32 %40, %41
  %43 = zext i32 %42 to i64
  %44 = shl nuw i64 %43, 32
  %45 = or i64 %44, %39
  %46 = bitcast i64 %45 to double
  br label %56

; <label>:47                                      ; preds = %35
  %48 = icmp slt i32 %30, -53
  %49 = icmp sgt i32 %n, 50000
  %or.cond = and i1 %48, %49
  br i1 %or.cond, label %50, label %53

; <label>:50                                      ; preds = %47
  %51 = tail call double @copysign(double 1.000000e+300, double %.03) nounwind optsize
  %52 = fmul double %51, 1.000000e+300
  br label %56

; <label>:53                                      ; preds = %47
  %54 = tail call double @copysign(double 1.000000e-300, double %.03) nounwind optsize
  %55 = fmul double %54, 1.000000e-300
  br label %56

; <label>:56                                      ; preds = %53, %50, %37, %32, %27, %23, %8
  %.0 = phi double [ %24, %23 ], [ %28, %27 ], [ %34, %32 ], [ %46, %37 ], [ %52, %50 ], [ %55, %53 ], [ %x, %8 ]
  ret double %.0
}

define double @scalb(double %x, double %fn) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = and i64 %1, 9223372036854775807
  %3 = icmp ugt i64 %2, 9218868437227405312
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double %fn to i64
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %6, 9218868437227405312
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %4, %0
  %9 = fmul double %x, %fn
  br label %36

; <label>:10                                      ; preds = %4
  %11 = icmp ult i64 %6, 9218868437227405312
  br i1 %11, label %19, label %12

; <label>:12                                      ; preds = %10
  %13 = fcmp ogt double %fn, 0.000000e+00
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %12
  %15 = fmul double %x, %fn
  br label %36

; <label>:16                                      ; preds = %12
  %17 = fsub double -0.000000e+00, %fn
  %18 = fdiv double %x, %17
  br label %36

; <label>:19                                      ; preds = %10
  %20 = tail call double @rint(double %fn) nounwind optsize
  %21 = fcmp une double %20, %fn
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %19
  %23 = fsub double %fn, %fn
  %24 = fdiv double %23, %23
  br label %36

; <label>:25                                      ; preds = %19
  %26 = fcmp ogt double %fn, 6.500000e+04
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %25
  %28 = tail call double @scalbn(double %x, i32 65000) nounwind optsize
  br label %36

; <label>:29                                      ; preds = %25
  %30 = fcmp olt double %fn, -6.500000e+04
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %29
  %32 = tail call double @scalbn(double %x, i32 -65000) nounwind optsize
  br label %36

; <label>:33                                      ; preds = %29
  %34 = fptosi double %fn to i32
  %35 = tail call double @scalbn(double %x, i32 %34) nounwind optsize
  br label %36

; <label>:36                                      ; preds = %33, %31, %27, %22, %16, %14, %8
  %.0 = phi double [ %9, %8 ], [ %24, %22 ], [ %28, %27 ], [ %32, %31 ], [ %35, %33 ], [ %15, %14 ], [ %18, %16 ]
  ret double %.0
}

define i32 @scandir(i8* %path, %struct.dirent.290*** nocapture %res, i32 (%struct.dirent.290*)* %sel, i32 (%struct.dirent.290**, %struct.dirent.290**)* %cmp) nounwind uwtable optsize {
  %1 = tail call %struct.__DIR_s* @opendir(i8* %path) nounwind optsize
  %2 = tail call i32* @__errno_location() nounwind readnone optsize
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq %struct.__DIR_s* %1, null
  br i1 %4, label %57, label %.preheader1

.preheader1:                                      ; preds = %0
  %5 = icmp eq i32 (%struct.dirent.290*)* %sel, null
  br label %.outer

.outer:                                           ; preds = %34, %.preheader1
  %names.0.ph = phi %struct.dirent.290** [ %names.1, %34 ], [ null, %.preheader1 ]
  %cnt.0.ph = phi i64 [ %35, %34 ], [ 0, %.preheader1 ]
  %len.0.ph = phi i64 [ %len.1, %34 ], [ 0, %.preheader1 ]
  br label %6

; <label>:6                                       ; preds = %10, %.outer
  store i32 0, i32* %2, align 4, !tbaa !6
  %7 = tail call %struct.dirent.290* @readdir(%struct.__DIR_s* %1) nounwind optsize
  %8 = icmp eq %struct.dirent.290* %7, null
  br i1 %8, label %.loopexit2, label %9

; <label>:9                                       ; preds = %6
  br i1 %5, label %13, label %10

; <label>:10                                      ; preds = %9
  %11 = tail call i32 %sel(%struct.dirent.290* %7) nounwind optsize
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %6, label %13

; <label>:13                                      ; preds = %10, %9
  %14 = icmp ult i64 %cnt.0.ph, %len.0.ph
  br i1 %14, label %26, label %15

; <label>:15                                      ; preds = %13
  %16 = shl i64 %len.0.ph, 1
  %17 = or i64 %16, 1
  %18 = icmp ugt i64 %17, 2305843009213693951
  br i1 %18, label %.loopexit2, label %19

; <label>:19                                      ; preds = %15
  %20 = bitcast %struct.dirent.290** %names.0.ph to i8*
  %21 = shl i64 %17, 3
  %22 = tail call i8* @realloc(i8* %20, i64 %21) nounwind optsize
  %23 = icmp eq i8* %22, null
  br i1 %23, label %.loopexit2, label %24

; <label>:24                                      ; preds = %19
  %25 = bitcast i8* %22 to %struct.dirent.290**
  br label %26

; <label>:26                                      ; preds = %24, %13
  %names.1 = phi %struct.dirent.290** [ %25, %24 ], [ %names.0.ph, %13 ]
  %len.1 = phi i64 [ %17, %24 ], [ %len.0.ph, %13 ]
  %27 = getelementptr inbounds %struct.dirent.290* %7, i64 0, i32 2
  %28 = load i16* %27, align 2, !tbaa !8
  %29 = zext i16 %28 to i64
  %30 = tail call i8* @malloc(i64 %29) optsize
  %31 = bitcast i8* %30 to %struct.dirent.290*
  %32 = getelementptr inbounds %struct.dirent.290** %names.1, i64 %cnt.0.ph
  store %struct.dirent.290* %31, %struct.dirent.290** %32, align 8, !tbaa !7
  %33 = icmp eq i8* %30, null
  br i1 %33, label %.loopexit2, label %34

; <label>:34                                      ; preds = %26
  %35 = add i64 %cnt.0.ph, 1
  %36 = bitcast %struct.dirent.290* %7 to i8*
  %37 = tail call i8* @memcpy(i8* %30, i8* %36, i64 %29) nounwind optsize
  br label %.outer

.loopexit2:                                       ; preds = %26, %19, %15, %6
  %names.2 = phi %struct.dirent.290** [ %names.0.ph, %6 ], [ %names.0.ph, %19 ], [ %names.1, %26 ], [ %names.0.ph, %15 ]
  %38 = tail call i32 @closedir(%struct.__DIR_s* %1) nounwind optsize
  %39 = load i32* %2, align 4, !tbaa !6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %50, label %41

; <label>:41                                      ; preds = %.loopexit2
  %42 = icmp eq %struct.dirent.290** %names.2, null
  %43 = icmp eq i64 %cnt.0.ph, 0
  %or.cond = or i1 %42, %43
  br i1 %or.cond, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %41
  %.in = phi i64 [ %44, %.lr.ph ], [ %cnt.0.ph, %41 ]
  %44 = add i64 %.in, -1
  %45 = getelementptr inbounds %struct.dirent.290** %names.2, i64 %44
  %46 = load %struct.dirent.290** %45, align 8, !tbaa !7
  %47 = bitcast %struct.dirent.290* %46 to i8*
  tail call void @free(i8* %47) optsize
  %48 = icmp eq i64 %44, 0
  br i1 %48, label %.loopexit, label %.lr.ph

.loopexit:                                        ; preds = %.lr.ph, %41
  %49 = bitcast %struct.dirent.290** %names.2 to i8*
  tail call void @free(i8* %49) optsize
  br label %57

; <label>:50                                      ; preds = %.loopexit2
  store i32 %3, i32* %2, align 4, !tbaa !6
  %51 = icmp eq i32 (%struct.dirent.290**, %struct.dirent.290**)* %cmp, null
  br i1 %51, label %55, label %52

; <label>:52                                      ; preds = %50
  %53 = bitcast %struct.dirent.290** %names.2 to i8*
  %54 = bitcast i32 (%struct.dirent.290**, %struct.dirent.290**)* %cmp to i32 (i8*, i8*)*
  tail call void @qsort(i8* %53, i64 %cnt.0.ph, i64 8, i32 (i8*, i8*)* %54) nounwind optsize
  br label %55

; <label>:55                                      ; preds = %52, %50
  store %struct.dirent.290** %names.2, %struct.dirent.290*** %res, align 8, !tbaa !7
  %56 = trunc i64 %cnt.0.ph to i32
  br label %57

; <label>:57                                      ; preds = %55, %.loopexit, %0
  %.0 = phi i32 [ -1, %.loopexit ], [ %56, %55 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @__scanf(%struct.rctx* %r, i32* %fmt, %struct.__va_list_tag.541* %ap) nounwind uwtable optsize {
  %ap2.i = alloca [1 x %struct.__va_list_tag.541], align 16
  %dummy = alloca i64, align 8
  %st = alloca %struct.mbstate_t, align 4
  %ch = alloca i8, align 1
  %scanset = alloca [257 x i8], align 16
  %ch1 = alloca i8, align 1
  %ch5 = alloca i8, align 1
  %1 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 2
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 3
  %4 = load i32 (...)** %3, align 8, !tbaa !7
  %5 = bitcast i32 (...)* %4 to i32 (i32)*
  %6 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 8
  %7 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 4
  %8 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 7
  %9 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 6
  %st.0 = getelementptr inbounds %struct.mbstate_t* %st, i64 0, i32 0
  %st.1 = getelementptr inbounds %struct.mbstate_t* %st, i64 0, i32 1
  %10 = icmp eq i32 %2, 0
  %11 = bitcast i64* %dummy to i8*
  %12 = icmp ne i32 %2, 0
  %.not = xor i1 %12, true
  %13 = getelementptr inbounds [257 x i8]* %scanset, i64 0, i64 0
  %14 = bitcast i64* %dummy to i32*
  %15 = getelementptr inbounds %struct.__va_list_tag.541* %ap, i64 0, i32 0
  %16 = getelementptr inbounds %struct.__va_list_tag.541* %ap, i64 0, i32 3
  %17 = getelementptr inbounds %struct.__va_list_tag.541* %ap, i64 0, i32 2
  %18 = bitcast [1 x %struct.__va_list_tag.541]* %ap2.i to i8*
  %19 = bitcast %struct.__va_list_tag.541* %ap to i8*
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag.541]* %ap2.i, i64 0, i64 0, i32 0
  %21 = getelementptr inbounds [1 x %struct.__va_list_tag.541]* %ap2.i, i64 0, i64 0, i32 2
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag.541]* %ap2.i, i64 0, i64 0, i32 3
  br label %unread.exit

unread.exit:                                      ; preds = %unread.exit31, %184, %182, %180, %177, %175, %174, %._crit_edge345, %52, %41, %38, %35, %0
  %matches.0 = phi i32 [ 0, %0 ], [ %matches.0, %52 ], [ %matches.0., %unread.exit31 ], [ %matches.0, %35 ], [ %matches.0, %38 ], [ %matches.0, %41 ], [ %matches.0, %._crit_edge345 ], [ %matches.0, %174 ], [ %matches.0, %175 ], [ %matches.0, %177 ], [ %matches.0, %180 ], [ %matches.0, %182 ], [ %matches.0, %184 ]
  %neg.0 = phi i32 [ 0, %0 ], [ %neg.0, %52 ], [ %neg.4, %unread.exit31 ], [ %neg.0, %35 ], [ %neg.0, %38 ], [ %neg.0, %41 ], [ %neg.0, %._crit_edge345 ], [ %neg.0, %174 ], [ %neg.0, %175 ], [ %neg.0, %177 ], [ %neg.0, %180 ], [ %neg.0, %182 ], [ %neg.0, %184 ]
  %i.0 = phi i64 [ 0, %0 ], [ %i.0, %52 ], [ %i.7, %unread.exit31 ], [ %i.0, %35 ], [ %i.0, %38 ], [ %i.0, %41 ], [ %i.0, %._crit_edge345 ], [ %i.0, %174 ], [ %i.0, %175 ], [ %i.0, %177 ], [ %i.0, %180 ], [ %i.0, %182 ], [ %i.0, %184 ]
  %dest.0 = phi i8* [ null, %0 ], [ %dest.0, %52 ], [ %dest.2, %unread.exit31 ], [ %dest.0, %35 ], [ %dest.0, %38 ], [ %dest.0, %41 ], [ null, %._crit_edge345 ], [ %dest.2, %174 ], [ %dest.2, %175 ], [ %dest.2, %177 ], [ %dest.2, %180 ], [ %dest.2, %182 ], [ %dest.2, %184 ]
  %m.0 = phi i32 [ undef, %0 ], [ %m.0, %52 ], [ %m.16, %unread.exit31 ], [ %m.0, %35 ], [ %m.0, %38 ], [ %m.0, %41 ], [ %m.0, %._crit_edge345 ], [ %m.0, %174 ], [ %m.0, %175 ], [ %m.0, %177 ], [ %m.0, %180 ], [ %m.0, %182 ], [ %m.0, %184 ]
  %p.0 = phi i32* [ %fmt, %0 ], [ %53, %52 ], [ %p.11, %unread.exit31 ], [ %28, %35 ], [ %28, %38 ], [ %28, %41 ], [ %148, %._crit_edge345 ], [ %148, %174 ], [ %148, %175 ], [ %148, %177 ], [ %148, %180 ], [ %148, %182 ], [ %148, %184 ]
  %mode.0 = phi i32 [ 0, %0 ], [ %mode.0, %52 ], [ %mode.1, %unread.exit31 ], [ %mode.0, %35 ], [ %mode.0, %38 ], [ %mode.0, %41 ], [ %mode.1, %._crit_edge345 ], [ %mode.1, %174 ], [ %mode.1, %175 ], [ %mode.1, %177 ], [ %mode.1, %180 ], [ %mode.1, %182 ], [ %mode.1, %184 ]
  %23 = load i32* %p.0, align 4, !tbaa !6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %unread.exit30, label %25

; <label>:25                                      ; preds = %unread.exit
  %26 = call i32 %5(i32 %23) nounwind optsize
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %43, label %.preheader

.preheader:                                       ; preds = %.preheader, %25
  %p.1 = phi i32* [ %28, %.preheader ], [ %p.0, %25 ]
  %28 = getelementptr inbounds i32* %p.1, i64 1
  %29 = load i32* %28, align 4, !tbaa !6
  %30 = call i32 %5(i32 %29) nounwind optsize
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.loopexit, %.preheader
  store i32 1, i32* %6, align 4, !tbaa !6
  %32 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %33 = call i32 %5(i32 %32) nounwind optsize
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %.loopexit

; <label>:35                                      ; preds = %.loopexit
  %36 = load i32* %9, align 4, !tbaa !6
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %unread.exit, label %38

; <label>:38                                      ; preds = %35
  %39 = load i32* %6, align 4, !tbaa !6
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %unread.exit, label %41

; <label>:41                                      ; preds = %38
  %42 = add nsw i32 %39, 1
  store i32 %42, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit

; <label>:43                                      ; preds = %25
  %44 = load i32* %p.0, align 4, !tbaa !6
  %45 = icmp eq i32 %44, 37
  %46 = getelementptr inbounds i32* %p.0, i64 1
  br i1 %45, label %47, label %._crit_edge348

; <label>:47                                      ; preds = %43
  %48 = load i32* %46, align 4, !tbaa !6
  %49 = icmp eq i32 %48, 37
  br i1 %49, label %._crit_edge348, label %56

._crit_edge348:                                   ; preds = %47, %43
  %p.2 = select i1 %45, i32* %46, i32* %p.0
  store i32 1, i32* %6, align 4, !tbaa !6
  %50 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %.critedge9.thread, label %52

; <label>:52                                      ; preds = %._crit_edge348
  %53 = getelementptr inbounds i32* %p.2, i64 1
  %54 = load i32* %p.2, align 4, !tbaa !6
  %55 = icmp eq i32 %54, %50
  br i1 %55, label %unread.exit, label %.loopexit232

; <label>:56                                      ; preds = %47
  %57 = icmp eq i32 %mode.0, 1
  br i1 %57, label %100, label %.preheader197

.preheader197:                                    ; preds = %56
  %58 = add i32 %48, -48
  %59 = icmp ult i32 %58, 10
  br i1 %59, label %.lr.ph200, label %._crit_edge201

.lr.ph200:                                        ; preds = %.lr.ph200, %.preheader197
  %z.0199 = phi i32* [ %60, %.lr.ph200 ], [ %46, %.preheader197 ]
  %60 = getelementptr inbounds i32* %z.0199, i64 1
  %61 = load i32* %60, align 4, !tbaa !6
  %62 = add i32 %61, -48
  %63 = icmp ult i32 %62, 10
  br i1 %63, label %.lr.ph200, label %._crit_edge201

._crit_edge201:                                   ; preds = %.lr.ph200, %.preheader197
  %64 = phi i32 [ %48, %.preheader197 ], [ %61, %.lr.ph200 ]
  %z.0.lcssa = phi i32* [ %46, %.preheader197 ], [ %60, %.lr.ph200 ]
  switch i32 %64, label %65 [
    i32 42, label %100
    i32 36, label %.preheader204
  ]

; <label>:65                                      ; preds = %._crit_edge201
  %66 = icmp eq i32 %mode.0, 0
  br i1 %66, label %100, label %.critedge9.thread

.preheader204:                                    ; preds = %._crit_edge201
  %67 = icmp ult i32* %46, %z.0.lcssa
  br i1 %67, label %.lr.ph207, label %.critedge9.thread

.lr.ph207:                                        ; preds = %._crit_edge339, %.preheader204
  %68 = phi i32 [ %.pre347, %._crit_edge339 ], [ %48, %.preheader204 ]
  %p.3206 = phi i32* [ %70, %._crit_edge339 ], [ %46, %.preheader204 ]
  %pos.0205 = phi i32 [ %phitmp350, %._crit_edge339 ], [ -48, %.preheader204 ]
  %69 = add i32 %pos.0205, %68
  %70 = getelementptr inbounds i32* %p.3206, i64 1
  %71 = icmp ult i32* %70, %z.0.lcssa
  br i1 %71, label %._crit_edge339, label %._crit_edge208

._crit_edge339:                                   ; preds = %.lr.ph207
  %.pre347 = load i32* %70, align 4, !tbaa !6
  %phitmp = mul i32 %69, 10
  %phitmp350 = add i32 %phitmp, -48
  br label %.lr.ph207

._crit_edge208:                                   ; preds = %.lr.ph207
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %.critedge9.thread, label %73

; <label>:73                                      ; preds = %._crit_edge208
  %74 = getelementptr inbounds i32* %p.3206, i64 2
  call void @llvm.lifetime.start(i64 -1, i8* %18) nounwind
  call void @llvm.va_copy(i8* %18, i8* %19) nounwind
  %75 = icmp ugt i32 %69, 1
  %76 = load i32* %20, align 16
  %77 = icmp ult i32 %76, 41
  br i1 %75, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %85, %73
  %78 = phi i1 [ %89, %85 ], [ %77, %73 ]
  %79 = phi i32 [ %86, %85 ], [ %76, %73 ]
  %i.03.i = phi i32 [ %87, %85 ], [ %69, %73 ]
  br i1 %78, label %80, label %82

; <label>:80                                      ; preds = %.lr.ph.i
  %81 = add i32 %79, 8
  store i32 %81, i32* %20, align 16
  br label %85

; <label>:82                                      ; preds = %.lr.ph.i
  %83 = load i8** %21, align 8
  %84 = getelementptr i8* %83, i64 8
  store i8* %84, i8** %21, align 8
  br label %85

; <label>:85                                      ; preds = %82, %80
  %86 = phi i32 [ %79, %82 ], [ %81, %80 ]
  %87 = add i32 %i.03.i, -1
  %88 = icmp ugt i32 %87, 1
  %89 = icmp ult i32 %86, 41
  br i1 %88, label %.lr.ph.i, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %85, %73
  %.lcssa2.i = phi i1 [ %77, %73 ], [ %89, %85 ]
  %.lcssa1.i = phi i32 [ %76, %73 ], [ %86, %85 ]
  br i1 %.lcssa2.i, label %90, label %95

; <label>:90                                      ; preds = %._crit_edge.i
  %91 = load i8** %22, align 16
  %92 = sext i32 %.lcssa1.i to i64
  %93 = getelementptr i8* %91, i64 %92
  %94 = add i32 %.lcssa1.i, 8
  store i32 %94, i32* %20, align 16
  br label %arg_n.exit

; <label>:95                                      ; preds = %._crit_edge.i
  %96 = load i8** %21, align 8
  %97 = getelementptr i8* %96, i64 8
  store i8* %97, i8** %21, align 8
  br label %arg_n.exit

arg_n.exit:                                       ; preds = %95, %90
  %.in.i = phi i8* [ %93, %90 ], [ %96, %95 ]
  %98 = bitcast i8* %.in.i to i8**
  %99 = load i8** %98, align 8
  call void @llvm.va_end(i8* %18) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %18) nounwind
  %.pre = load i32* %74, align 4, !tbaa !6
  br label %100

; <label>:100                                     ; preds = %arg_n.exit, %65, %._crit_edge201, %56
  %101 = phi i32 [ %.pre, %arg_n.exit ], [ %48, %56 ], [ %48, %65 ], [ %48, %._crit_edge201 ]
  %dest.1 = phi i8* [ %99, %arg_n.exit ], [ %dest.0, %56 ], [ %dest.0, %65 ], [ %dest.0, %._crit_edge201 ]
  %p.4 = phi i32* [ %74, %arg_n.exit ], [ %46, %56 ], [ %46, %65 ], [ %46, %._crit_edge201 ]
  %mode.1 = phi i32 [ 2, %arg_n.exit ], [ 1, %56 ], [ 1, %65 ], [ %mode.0, %._crit_edge201 ]
  %102 = icmp eq i32 %101, 42
  br i1 %102, label %103, label %105

; <label>:103                                     ; preds = %100
  %104 = getelementptr inbounds i32* %p.4, i64 1
  br label %121

; <label>:105                                     ; preds = %100
  %106 = icmp eq i32 %mode.1, 1
  br i1 %106, label %107, label %121

; <label>:107                                     ; preds = %105
  %108 = load i32* %15, align 4
  %109 = icmp ult i32 %108, 41
  br i1 %109, label %110, label %115

; <label>:110                                     ; preds = %107
  %111 = load i8** %16, align 8
  %112 = sext i32 %108 to i64
  %113 = getelementptr i8* %111, i64 %112
  %114 = add i32 %108, 8
  store i32 %114, i32* %15, align 4
  br label %118

; <label>:115                                     ; preds = %107
  %116 = load i8** %17, align 8
  %117 = getelementptr i8* %116, i64 8
  store i8* %117, i8** %17, align 8
  br label %118

; <label>:118                                     ; preds = %115, %110
  %.in = phi i8* [ %113, %110 ], [ %116, %115 ]
  %119 = bitcast i8* %.in to i8**
  %120 = load i8** %119, align 8
  br label %121

; <label>:121                                     ; preds = %118, %105, %103
  %dest.2 = phi i8* [ null, %103 ], [ %120, %118 ], [ %dest.1, %105 ]
  %p.5 = phi i32* [ %104, %103 ], [ %p.4, %118 ], [ %p.4, %105 ]
  %122 = load i32* %p.5, align 4, !tbaa !6
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %.critedge9.thread, label %.preheader211

.preheader211:                                    ; preds = %121
  %124 = add i32 %122, -48
  %125 = icmp ult i32 %124, 10
  br i1 %125, label %.lr.ph215, label %._crit_edge216

.lr.ph215:                                        ; preds = %.lr.ph215, %.preheader211
  %126 = phi i32 [ %131, %.lr.ph215 ], [ %122, %.preheader211 ]
  %width.0214 = phi i32 [ %129, %.lr.ph215 ], [ 0, %.preheader211 ]
  %p.6213 = phi i32* [ %130, %.lr.ph215 ], [ %p.5, %.preheader211 ]
  %127 = mul nsw i32 %width.0214, 10
  %128 = add i32 %126, -48
  %129 = add i32 %128, %127
  %130 = getelementptr inbounds i32* %p.6213, i64 1
  %131 = load i32* %130, align 4, !tbaa !6
  %132 = add i32 %131, -48
  %133 = icmp ult i32 %132, 10
  br i1 %133, label %.lr.ph215, label %._crit_edge216

._crit_edge216:                                   ; preds = %.lr.ph215, %.preheader211
  %.lcssa212 = phi i32 [ %122, %.preheader211 ], [ %131, %.lr.ph215 ]
  %width.0.lcssa = phi i32 [ 0, %.preheader211 ], [ %129, %.lr.ph215 ]
  %p.6.lcssa = phi i32* [ %p.5, %.preheader211 ], [ %130, %.lr.ph215 ]
  %134 = getelementptr inbounds i32* %p.6.lcssa, i64 1
  switch i32 %.lcssa212, label %.critedge9.thread [
    i32 110, label %147
    i32 104, label %135
    i32 108, label %140
    i32 106, label %._crit_edge346
    i32 122, label %145
    i32 116, label %145
    i32 76, label %146
    i32 100, label %147
    i32 105, label %147
    i32 111, label %147
    i32 117, label %147
    i32 120, label %147
    i32 97, label %147
    i32 101, label %147
    i32 102, label %147
    i32 103, label %147
    i32 65, label %147
    i32 69, label %147
    i32 70, label %147
    i32 71, label %147
    i32 88, label %147
    i32 115, label %147
    i32 99, label %147
    i32 91, label %147
    i32 83, label %147
    i32 67, label %147
    i32 112, label %147
  ]

; <label>:135                                     ; preds = %._crit_edge216
  %136 = load i32* %134, align 4, !tbaa !6
  %137 = icmp eq i32 %136, 104
  br i1 %137, label %138, label %._crit_edge346

; <label>:138                                     ; preds = %135
  %139 = getelementptr inbounds i32* %p.6.lcssa, i64 2
  br label %._crit_edge346

; <label>:140                                     ; preds = %._crit_edge216
  %141 = load i32* %134, align 4, !tbaa !6
  %142 = icmp eq i32 %141, 108
  br i1 %142, label %143, label %._crit_edge346

; <label>:143                                     ; preds = %140
  %144 = getelementptr inbounds i32* %p.6.lcssa, i64 2
  br label %._crit_edge346

; <label>:145                                     ; preds = %._crit_edge216, %._crit_edge216
  br label %._crit_edge346

; <label>:146                                     ; preds = %._crit_edge216
  br label %._crit_edge346

; <label>:147                                     ; preds = %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216, %._crit_edge216
  br label %._crit_edge346

._crit_edge346:                                   ; preds = %147, %146, %145, %143, %140, %138, %135, %._crit_edge216
  %p.7 = phi i32* [ %134, %146 ], [ %134, %145 ], [ %144, %143 ], [ %139, %138 ], [ %p.6.lcssa, %147 ], [ %134, %135 ], [ %134, %140 ], [ %134, %._crit_edge216 ]
  %size.0 = phi i32 [ 3, %146 ], [ 1, %145 ], [ 2, %143 ], [ -2, %138 ], [ 0, %147 ], [ -1, %135 ], [ 1, %140 ], [ 2, %._crit_edge216 ]
  %148 = getelementptr inbounds i32* %p.7, i64 1
  %149 = load i32* %p.7, align 4, !tbaa !6
  switch i32 %149, label %.critedge9.thread [
    i32 67, label %150
    i32 99, label %150
    i32 115, label %153
    i32 100, label %156
    i32 105, label %156
    i32 111, label %156
    i32 117, label %156
    i32 120, label %156
    i32 97, label %156
    i32 101, label %156
    i32 102, label %156
    i32 103, label %156
    i32 65, label %156
    i32 69, label %156
    i32 70, label %156
    i32 71, label %156
    i32 88, label %156
    i32 91, label %156
    i32 83, label %156
    i32 112, label %156
    i32 110, label %156
  ]

; <label>:150                                     ; preds = %._crit_edge346, %._crit_edge346
  %151 = icmp slt i32 %width.0.lcssa, 1
  br i1 %151, label %152, label %153

; <label>:152                                     ; preds = %150
  br label %153

; <label>:153                                     ; preds = %152, %150, %._crit_edge346
  %width.1 = phi i32 [ %width.0.lcssa, %._crit_edge346 ], [ 1, %152 ], [ %width.0.lcssa, %150 ]
  %154 = and i32 %149, -33
  %155 = icmp eq i32 %size.0, 1
  %. = select i1 %155, i32 %154, i32 %149
  br label %156

; <label>:156                                     ; preds = %153, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346, %._crit_edge346
  %t.0 = phi i32 [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %149, %._crit_edge346 ], [ %., %153 ]
  %width.2 = phi i32 [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.0.lcssa, %._crit_edge346 ], [ %width.1, %153 ]
  %157 = icmp slt i32 %width.2, 1
  %width.3 = select i1 %157, i32 2147483647, i32 %width.2
  store i32 %width.3, i32* %6, align 4, !tbaa !6
  %cond = icmp eq i32 %t.0, 110
  br i1 %cond, label %._crit_edge345, label %158

; <label>:158                                     ; preds = %156
  %159 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %160 = icmp slt i32 %159, 0
  br i1 %160, label %.critedge9.thread, label %161

; <label>:161                                     ; preds = %158
  %162 = load i32* %9, align 4, !tbaa !6
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %unread.exit32, label %164

; <label>:164                                     ; preds = %161
  %165 = load i32* %6, align 4, !tbaa !6
  %166 = icmp slt i32 %165, 0
  br i1 %166, label %unread.exit32, label %167

; <label>:167                                     ; preds = %164
  %168 = add nsw i32 %165, 1
  store i32 %168, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit32

unread.exit32:                                    ; preds = %167, %164, %161
  switch i32 %t.0, label %.preheader220 [
    i32 110, label %._crit_edge345
    i32 67, label %186
    i32 99, label %202
    i32 91, label %222
  ]

._crit_edge345:                                   ; preds = %unread.exit32, %156
  %169 = load i32* %7, align 4, !tbaa !6
  %170 = load i32* %8, align 4, !tbaa !6
  %171 = sub nsw i32 %169, %170
  %172 = sext i32 %171 to i64
  %173 = icmp eq i8* %dest.2, null
  br i1 %173, label %unread.exit, label %174

; <label>:174                                     ; preds = %._crit_edge345
  switch i32 %size.0, label %unread.exit [
    i32 -2, label %175
    i32 -1, label %177
    i32 0, label %180
    i32 1, label %182
    i32 2, label %184
  ]

; <label>:175                                     ; preds = %174
  %176 = trunc i32 %171 to i8
  store i8 %176, i8* %dest.2, align 1, !tbaa !0
  br label %unread.exit

; <label>:177                                     ; preds = %174
  %178 = trunc i32 %171 to i16
  %179 = bitcast i8* %dest.2 to i16*
  store i16 %178, i16* %179, align 2, !tbaa !8
  br label %unread.exit

; <label>:180                                     ; preds = %174
  %181 = bitcast i8* %dest.2 to i32*
  store i32 %171, i32* %181, align 4, !tbaa !6
  br label %unread.exit

; <label>:182                                     ; preds = %174
  %183 = bitcast i8* %dest.2 to i64*
  store i64 %172, i64* %183, align 8, !tbaa !5
  br label %unread.exit

; <label>:184                                     ; preds = %174
  %185 = bitcast i8* %dest.2 to i64*
  store i64 %172, i64* %185, align 8, !tbaa !9
  br label %unread.exit

; <label>:186                                     ; preds = %unread.exit32
  %187 = icmp ne i8* %dest.2, null
  %188 = select i1 %187, i8* %dest.2, i8* %11
  %189 = bitcast i8* %188 to i32*
  store i32 0, i32* %st.0, align 4
  store i32 0, i32* %st.1, align 4
  br label %.outer189

.outer189:                                        ; preds = %.outer189.backedge, %186
  %wcs.0.ph = phi i32* [ %189, %186 ], [ %wcs.0.ph.be, %.outer189.backedge ]
  br label %.backedge190

.backedge190:                                     ; preds = %198, %195, %193, %.outer189
  %190 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %191 = icmp sgt i32 %190, -1
  br i1 %191, label %192, label %199

; <label>:192                                     ; preds = %.backedge190
  br i1 %10, label %195, label %193

; <label>:193                                     ; preds = %192
  br i1 %187, label %194, label %.backedge190

; <label>:194                                     ; preds = %193
  store i32 %190, i32* %wcs.0.ph, align 4, !tbaa !6
  br label %.outer189.backedge

.outer189.backedge:                               ; preds = %198, %194
  %wcs.0.ph.be = getelementptr inbounds i32* %wcs.0.ph, i64 1
  br label %.outer189

; <label>:195                                     ; preds = %192
  %196 = trunc i32 %190 to i8
  store i8 %196, i8* %ch, align 1, !tbaa !0
  %197 = call i64 @mbrtowc(i32* %wcs.0.ph, i8* %ch, i64 1, %struct.mbstate_t* %st) nounwind optsize
  switch i64 %197, label %198 [
    i64 -1, label %.loopexit60
    i64 -2, label %.backedge190
  ]

; <label>:198                                     ; preds = %195
  br i1 %187, label %.outer189.backedge, label %.backedge190

; <label>:199                                     ; preds = %.backedge190
  %200 = load i32* %6, align 4, !tbaa !6
  %201 = icmp sgt i32 %200, 0
  br i1 %201, label %.loopexit232, label %308

; <label>:202                                     ; preds = %unread.exit32
  %203 = icmp ne i8* %dest.2, null
  br i1 %203, label %.outer179, label %204

; <label>:204                                     ; preds = %202
  br label %.outer179

.outer179:                                        ; preds = %216, %212, %204, %202
  %s.0.ph180 = phi i8* [ %11, %204 ], [ %dest.2, %202 ], [ %214, %212 ], [ %218, %216 ]
  br label %.backedge181

.backedge181:                                     ; preds = %215, %211, %.outer179
  %205 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %206 = icmp sgt i32 %205, -1
  br i1 %206, label %207, label %219

; <label>:207                                     ; preds = %.backedge181
  br i1 %10, label %215, label %208

; <label>:208                                     ; preds = %207
  %209 = call i32 @wctomb(i8* %s.0.ph180, i32 %205) nounwind optsize
  %210 = icmp slt i32 %209, 0
  br i1 %210, label %.loopexit60, label %211

; <label>:211                                     ; preds = %208
  br i1 %203, label %212, label %.backedge181

; <label>:212                                     ; preds = %211
  %213 = sext i32 %209 to i64
  %214 = getelementptr inbounds i8* %s.0.ph180, i64 %213
  br label %.outer179

; <label>:215                                     ; preds = %207
  br i1 %203, label %216, label %.backedge181

; <label>:216                                     ; preds = %215
  %217 = trunc i32 %205 to i8
  %218 = getelementptr inbounds i8* %s.0.ph180, i64 1
  store i8 %217, i8* %s.0.ph180, align 1, !tbaa !0
  br label %.outer179

; <label>:219                                     ; preds = %.backedge181
  %220 = load i32* %6, align 4, !tbaa !6
  %221 = icmp sgt i32 %220, 0
  br i1 %221, label %.loopexit232, label %308

; <label>:222                                     ; preds = %unread.exit32
  %223 = icmp ne i8* %dest.2, null
  br i1 %223, label %.thread, label %225

.thread:                                          ; preds = %222
  %224 = bitcast i8* %dest.2 to i32*
  br label %225

; <label>:225                                     ; preds = %.thread, %222
  %226 = phi i32* [ %224, %.thread ], [ %14, %222 ]
  %227 = phi i8* [ %dest.2, %.thread ], [ %11, %222 ]
  %228 = icmp eq i32 %size.0, 1
  %or.cond = and i1 %228, %.not
  br i1 %or.cond, label %229, label %230

; <label>:229                                     ; preds = %225
  store i32 0, i32* %st.0, align 4
  store i32 0, i32* %st.1, align 4
  br label %230

; <label>:230                                     ; preds = %229, %225
  %231 = load i32* %148, align 4, !tbaa !6
  %232 = icmp eq i32 %231, 94
  %233 = getelementptr inbounds i32* %p.7, i64 2
  %p.8 = select i1 %232, i32* %233, i32* %148
  br i1 %12, label %.outer144, label %261

.outer144:                                        ; preds = %251, %230
  %wcs.1.ph = phi i32* [ %252, %251 ], [ %226, %230 ]
  %s.1.ph = phi i8* [ %s.1.ph146, %251 ], [ %227, %230 ]
  %m.1.ph = phi i32 [ 1, %251 ], [ 0, %230 ]
  br label %.outer145

.outer145:                                        ; preds = %257, %.outer144
  %s.1.ph146 = phi i8* [ %259, %257 ], [ %s.1.ph, %.outer144 ]
  %m.1.ph147 = phi i32 [ 1, %257 ], [ %m.1.ph, %.outer144 ]
  br label %.backedge148

.backedge148:                                     ; preds = %256, %250, %.outer145
  %m.1 = phi i32 [ %m.1.ph147, %.outer145 ], [ 1, %250 ], [ 1, %256 ]
  %234 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %235 = icmp sgt i32 %234, -1
  br i1 %235, label %.preheader136, label %.loopexit142

.preheader136:                                    ; preds = %.critedge7, %.backedge148
  %z.1 = phi i32* [ %242, %.critedge7 ], [ %p.8, %.backedge148 ]
  %236 = load i32* %z.1, align 4, !tbaa !6
  %237 = icmp eq i32 %236, 0
  %238 = icmp eq i32 %236, %234
  %or.cond27 = or i1 %237, %238
  br i1 %or.cond27, label %.critedge, label %239

; <label>:239                                     ; preds = %.preheader136
  %240 = icmp ne i32 %236, 93
  %241 = icmp eq i32* %z.1, %p.8
  %or.cond28 = or i1 %240, %241
  br i1 %or.cond28, label %.critedge7, label %.critedge

.critedge7:                                       ; preds = %239
  %242 = getelementptr inbounds i32* %z.1, i64 1
  br label %.preheader136

.critedge:                                        ; preds = %239, %.preheader136
  br i1 %237, label %.critedge9.thread, label %243

; <label>:243                                     ; preds = %.critedge
  br i1 %238, label %244, label %248

; <label>:244                                     ; preds = %243
  %245 = icmp ne i32 %236, 93
  %246 = icmp eq i32* %z.1, %p.8
  %or.cond29 = or i1 %245, %246
  br i1 %or.cond29, label %247, label %248

; <label>:247                                     ; preds = %244
  br i1 %232, label %.loopexit142, label %249

; <label>:248                                     ; preds = %244, %243
  br i1 %232, label %249, label %.loopexit142

; <label>:249                                     ; preds = %248, %247
  br i1 %228, label %250, label %253

; <label>:250                                     ; preds = %249
  br i1 %223, label %251, label %.backedge148

; <label>:251                                     ; preds = %250
  %252 = getelementptr inbounds i32* %wcs.1.ph, i64 1
  store i32 %234, i32* %wcs.1.ph, align 4, !tbaa !6
  br label %.outer144

; <label>:253                                     ; preds = %249
  %254 = call i32 @wctomb(i8* %s.1.ph146, i32 %234) nounwind optsize
  %255 = icmp slt i32 %254, 0
  br i1 %255, label %.loopexit60, label %256

; <label>:256                                     ; preds = %253
  br i1 %223, label %257, label %.backedge148

; <label>:257                                     ; preds = %256
  %258 = sext i32 %254 to i64
  %259 = getelementptr inbounds i8* %s.1.ph146, i64 %258
  br label %.outer145

.loopexit142:                                     ; preds = %.loopexit142, %248, %247, %.backedge148
  %p.8.pn = phi i32* [ %p.9, %.loopexit142 ], [ %p.8, %.backedge148 ], [ %p.8, %248 ], [ %p.8, %247 ]
  %p.9 = getelementptr inbounds i32* %p.8.pn, i64 1
  %260 = load i32* %p.9, align 4, !tbaa !6
  switch i32 %260, label %.loopexit142 [
    i32 0, label %.critedge8
    i32 93, label %.critedge8
  ]

; <label>:261                                     ; preds = %230
  %invert.0 = zext i1 %232 to i32
  %262 = call i8* @memset(i8* %13, i32 %invert.0, i64 257) nounwind optsize
  store i8 0, i8* %13, align 16, !tbaa !0
  %263 = zext i1 %232 to i8
  %264 = xor i8 %263, 1
  br label %265

; <label>:265                                     ; preds = %.critedge10, %261
  %z.2 = phi i32* [ %p.8, %261 ], [ %272, %.critedge10 ]
  %266 = load i32* %z.2, align 4, !tbaa !6
  switch i32 %266, label %.critedge10 [
    i32 0, label %.critedge9.thread
    i32 93, label %267
  ]

; <label>:267                                     ; preds = %265
  %268 = icmp eq i32* %z.2, %p.8
  br i1 %268, label %.critedge10, label %.outer165

.critedge10:                                      ; preds = %267, %265
  %269 = add nsw i32 %266, 1
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds [257 x i8]* %scanset, i64 0, i64 %270
  store i8 %264, i8* %271, align 1, !tbaa !0
  %272 = getelementptr inbounds i32* %z.2, i64 1
  br label %265

.outer165:                                        ; preds = %284, %267
  %wcs.3.ph = phi i32* [ %285, %284 ], [ %226, %267 ]
  %s.3.ph = phi i8* [ %s.3.ph167, %284 ], [ %227, %267 ]
  %m.2.ph = phi i32 [ 1, %284 ], [ 0, %267 ]
  br label %.outer166

.outer166:                                        ; preds = %287, %.outer165
  %s.3.ph167 = phi i8* [ %289, %287 ], [ %s.3.ph, %.outer165 ]
  %m.2.ph168 = phi i32 [ 1, %287 ], [ %m.2.ph, %.outer165 ]
  br label %.backedge169

.backedge169:                                     ; preds = %286, %283, %280, %.outer166
  %m.2 = phi i32 [ %m.2.ph168, %.outer166 ], [ 1, %283 ], [ 1, %280 ], [ 1, %286 ]
  %273 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %274 = add nsw i32 %273, 1
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [257 x i8]* %scanset, i64 0, i64 %275
  %277 = load i8* %276, align 1, !tbaa !0
  %278 = icmp eq i8 %277, 0
  br i1 %278, label %.critedge8, label %279

; <label>:279                                     ; preds = %.backedge169
  br i1 %228, label %280, label %286

; <label>:280                                     ; preds = %279
  %281 = trunc i32 %273 to i8
  store i8 %281, i8* %ch1, align 1, !tbaa !0
  %282 = call i64 @mbrtowc(i32* %wcs.3.ph, i8* %ch1, i64 1, %struct.mbstate_t* %st) nounwind optsize
  switch i64 %282, label %283 [
    i64 -1, label %.loopexit60
    i64 -2, label %.backedge169
  ]

; <label>:283                                     ; preds = %280
  br i1 %223, label %284, label %.backedge169

; <label>:284                                     ; preds = %283
  %285 = getelementptr inbounds i32* %wcs.3.ph, i64 1
  br label %.outer165

; <label>:286                                     ; preds = %279
  br i1 %223, label %287, label %.backedge169

; <label>:287                                     ; preds = %286
  %288 = trunc i32 %273 to i8
  %289 = getelementptr inbounds i8* %s.3.ph167, i64 1
  store i8 %288, i8* %s.3.ph167, align 1, !tbaa !0
  br label %.outer166

.critedge8:                                       ; preds = %.backedge169, %.loopexit142, %.loopexit142
  %wcs.5 = phi i32* [ %wcs.1.ph, %.loopexit142 ], [ %wcs.1.ph, %.loopexit142 ], [ %wcs.3.ph, %.backedge169 ]
  %s.5 = phi i8* [ %s.1.ph146, %.loopexit142 ], [ %s.1.ph146, %.loopexit142 ], [ %s.3.ph167, %.backedge169 ]
  %m.3 = phi i32 [ %m.1, %.loopexit142 ], [ %m.1, %.loopexit142 ], [ %m.2, %.backedge169 ]
  %p.9.pn = phi i32* [ %p.9, %.loopexit142 ], [ %p.9, %.loopexit142 ], [ %z.2, %.backedge169 ]
  %p.10 = getelementptr inbounds i32* %p.9.pn, i64 1
  %290 = icmp eq i32 %m.3, 0
  br i1 %290, label %.loopexit232, label %291

; <label>:291                                     ; preds = %.critedge8
  br i1 %223, label %292, label %308

; <label>:292                                     ; preds = %291
  br i1 %228, label %293, label %294

; <label>:293                                     ; preds = %292
  store i32 0, i32* %wcs.5, align 4, !tbaa !6
  br label %308

; <label>:294                                     ; preds = %292
  store i8 0, i8* %s.5, align 1, !tbaa !0
  br label %308

.preheader220:                                    ; preds = %.preheader220, %unread.exit32
  store i32 1, i32* %6, align 4, !tbaa !6
  %295 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %296 = call i32 %5(i32 %295) nounwind optsize
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %.preheader220

; <label>:298                                     ; preds = %.preheader220
  %299 = icmp slt i32 %295, 0
  br i1 %299, label %.critedge9.thread, label %300

; <label>:300                                     ; preds = %298
  %301 = load i32* %9, align 4, !tbaa !6
  %302 = icmp slt i32 %301, 0
  br i1 %302, label %unread.exit33, label %303

; <label>:303                                     ; preds = %300
  %304 = load i32* %6, align 4, !tbaa !6
  %305 = icmp slt i32 %304, 0
  br i1 %305, label %unread.exit33, label %306

; <label>:306                                     ; preds = %303
  %307 = add nsw i32 %304, 1
  store i32 %307, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit33

unread.exit33:                                    ; preds = %306, %303, %300
  store i32 %width.3, i32* %6, align 4, !tbaa !6
  br label %308

; <label>:308                                     ; preds = %unread.exit33, %294, %293, %291, %219, %199
  %m.4 = phi i32 [ %m.0, %unread.exit33 ], [ %m.3, %293 ], [ %m.3, %294 ], [ %m.3, %291 ], [ %m.0, %219 ], [ %m.0, %199 ]
  %p.11 = phi i32* [ %148, %unread.exit33 ], [ %p.10, %293 ], [ %p.10, %294 ], [ %p.10, %291 ], [ %148, %219 ], [ %148, %199 ]
  switch i32 %t.0, label %unread.exit35 [
    i32 112, label %309
    i32 88, label %309
    i32 100, label %310
    i32 105, label %310
    i32 111, label %310
    i32 117, label %310
    i32 120, label %310
  ]

; <label>:309                                     ; preds = %308, %308
  br label %310

; <label>:310                                     ; preds = %309, %308, %308, %308, %308, %308
  %t.1 = phi i32 [ %t.0, %308 ], [ %t.0, %308 ], [ %t.0, %308 ], [ %t.0, %308 ], [ %t.0, %308 ], [ 120, %309 ]
  %311 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %312 = icmp eq i32 %311, 45
  br i1 %312, label %unread.exit34, label %313

; <label>:313                                     ; preds = %310
  %314 = icmp eq i32 %311, 43
  br i1 %314, label %unread.exit34, label %315

; <label>:315                                     ; preds = %313
  %316 = load i32* %9, align 4, !tbaa !6
  %317 = icmp slt i32 %316, 0
  br i1 %317, label %unread.exit34, label %318

; <label>:318                                     ; preds = %315
  %319 = load i32* %6, align 4, !tbaa !6
  %320 = icmp slt i32 %319, 0
  br i1 %320, label %unread.exit34, label %321

; <label>:321                                     ; preds = %318
  %322 = add nsw i32 %319, 1
  store i32 %322, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit34

unread.exit34:                                    ; preds = %321, %318, %315, %313, %310
  %neg.1 = phi i32 [ 0, %313 ], [ 1, %310 ], [ 0, %315 ], [ 0, %318 ], [ 0, %321 ]
  switch i32 %t.1, label %unread.exit35 [
    i32 105, label %323
    i32 120, label %323
  ]

; <label>:323                                     ; preds = %unread.exit34, %unread.exit34
  %324 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %325 = icmp eq i32 %324, 48
  br i1 %325, label %335, label %326

; <label>:326                                     ; preds = %323
  %327 = icmp eq i32 %t.1, 105
  %t.2 = select i1 %327, i32 100, i32 %t.1
  %328 = load i32* %9, align 4, !tbaa !6
  %329 = icmp slt i32 %328, 0
  br i1 %329, label %unread.exit35, label %330

; <label>:330                                     ; preds = %326
  %331 = load i32* %6, align 4, !tbaa !6
  %332 = icmp slt i32 %331, 0
  br i1 %332, label %unread.exit35, label %333

; <label>:333                                     ; preds = %330
  %334 = add nsw i32 %331, 1
  store i32 %334, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit35

; <label>:335                                     ; preds = %323
  %336 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %337 = or i32 %336, 32
  %338 = icmp eq i32 %337, 120
  br i1 %338, label %unread.exit35.thread.preheader, label %339

unread.exit35.thread.preheader:                   ; preds = %unread.exit35, %335
  %neg.245.ph = phi i32 [ %neg.1, %335 ], [ %neg.2, %unread.exit35 ]
  %i.4.ph = phi i64 [ 0, %335 ], [ %i.1, %unread.exit35 ]
  %m.8.ph = phi i32 [ 0, %335 ], [ %m.5, %unread.exit35 ]
  br label %unread.exit35.thread

; <label>:339                                     ; preds = %335
  %340 = icmp eq i32 %t.1, 105
  %t.3 = select i1 %340, i32 111, i32 %t.1
  %341 = load i32* %9, align 4, !tbaa !6
  %342 = icmp slt i32 %341, 0
  br i1 %342, label %unread.exit35, label %343

; <label>:343                                     ; preds = %339
  %344 = load i32* %6, align 4, !tbaa !6
  %345 = icmp slt i32 %344, 0
  br i1 %345, label %unread.exit35, label %346

; <label>:346                                     ; preds = %343
  %347 = add nsw i32 %344, 1
  store i32 %347, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit35

unread.exit35:                                    ; preds = %346, %343, %339, %333, %330, %326, %unread.exit34, %308
  %neg.2 = phi i32 [ %neg.0, %308 ], [ %neg.1, %unread.exit34 ], [ %neg.1, %326 ], [ %neg.1, %330 ], [ %neg.1, %333 ], [ %neg.1, %339 ], [ %neg.1, %343 ], [ %neg.1, %346 ]
  %i.1 = phi i64 [ %i.0, %308 ], [ 0, %unread.exit34 ], [ 0, %326 ], [ 0, %330 ], [ 0, %333 ], [ 0, %339 ], [ 0, %343 ], [ 0, %346 ]
  %m.5 = phi i32 [ %m.4, %308 ], [ 0, %unread.exit34 ], [ 0, %326 ], [ 0, %330 ], [ 0, %333 ], [ 1, %339 ], [ 1, %343 ], [ 1, %346 ]
  %t.4 = phi i32 [ %t.0, %308 ], [ %t.1, %unread.exit34 ], [ %t.2, %326 ], [ %t.2, %330 ], [ %t.2, %333 ], [ %t.3, %339 ], [ %t.3, %343 ], [ %t.3, %346 ]
  switch i32 %t.4, label %store_int.exit39 [
    i32 100, label %.preheader53
    i32 117, label %.preheader53
    i32 111, label %.preheader49
    i32 120, label %unread.exit35.thread.preheader
    i32 97, label %404
    i32 101, label %404
    i32 102, label %404
    i32 103, label %404
    i32 83, label %575
    i32 115, label %596
  ]

.preheader53:                                     ; preds = %unread.exit35, %unread.exit35
  %348 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %349 = add i32 %348, -48
  %350 = icmp ult i32 %349, 10
  br i1 %350, label %.lr.ph56, label %.loopexit48

.preheader49:                                     ; preds = %unread.exit35
  %351 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %352 = add i32 %351, -48
  %353 = icmp ult i32 %352, 8
  br i1 %353, label %.lr.ph, label %.loopexit48

.lr.ph56:                                         ; preds = %.lr.ph56, %.preheader53
  %354 = phi i32 [ %359, %.lr.ph56 ], [ %348, %.preheader53 ]
  %i.255 = phi i64 [ %358, %.lr.ph56 ], [ %i.1, %.preheader53 ]
  %355 = mul i64 %i.255, 10
  %356 = sext i32 %354 to i64
  %357 = add i64 %355, -48
  %358 = add i64 %357, %356
  %359 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %360 = add i32 %359, -48
  %361 = icmp ult i32 %360, 10
  br i1 %361, label %.lr.ph56, label %.loopexit48.thread

.lr.ph:                                           ; preds = %.lr.ph, %.preheader49
  %362 = phi i32 [ %367, %.lr.ph ], [ %351, %.preheader49 ]
  %i.351 = phi i64 [ %366, %.lr.ph ], [ %i.1, %.preheader49 ]
  %363 = shl i64 %i.351, 3
  %364 = sext i32 %362 to i64
  %365 = add i64 %363, -48
  %366 = add i64 %365, %364
  %367 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %368 = add i32 %367, -48
  %369 = icmp ult i32 %368, 8
  br i1 %369, label %.lr.ph, label %.loopexit48.thread

unread.exit35.thread:                             ; preds = %382, %373, %unread.exit35.thread.preheader
  %i.4 = phi i64 [ %i.4.ph, %unread.exit35.thread.preheader ], [ %377, %373 ], [ %386, %382 ]
  %m.8 = phi i32 [ %m.8.ph, %unread.exit35.thread.preheader ], [ 1, %373 ], [ 1, %382 ]
  %370 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %371 = add i32 %370, -48
  %372 = icmp ult i32 %371, 10
  br i1 %372, label %373, label %378

; <label>:373                                     ; preds = %unread.exit35.thread
  %374 = shl i64 %i.4, 4
  %375 = sext i32 %370 to i64
  %376 = add i64 %374, -48
  %377 = add i64 %376, %375
  br label %unread.exit35.thread

; <label>:378                                     ; preds = %unread.exit35.thread
  %379 = or i32 %370, 32
  %380 = add i32 %379, -97
  %381 = icmp ult i32 %380, 6
  br i1 %381, label %382, label %.loopexit48

; <label>:382                                     ; preds = %378
  %383 = shl i64 %i.4, 4
  %384 = sext i32 %379 to i64
  %385 = add i64 %383, -87
  %386 = add i64 %385, %384
  br label %unread.exit35.thread

.loopexit48:                                      ; preds = %378, %.preheader49, %.preheader53
  %neg.244 = phi i32 [ %neg.245.ph, %378 ], [ %neg.2, %.preheader49 ], [ %neg.2, %.preheader53 ]
  %i.6 = phi i64 [ %i.4, %378 ], [ %i.1, %.preheader49 ], [ %i.1, %.preheader53 ]
  %m.9 = phi i32 [ %m.8, %378 ], [ %m.5, %.preheader49 ], [ %m.5, %.preheader53 ]
  %387 = icmp eq i32 %m.9, 0
  br i1 %387, label %.loopexit232, label %.loopexit48.thread

.loopexit48.thread:                               ; preds = %.loopexit48, %.lr.ph, %.lr.ph56
  %m.9353 = phi i32 [ %m.9, %.loopexit48 ], [ 1, %.lr.ph ], [ 1, %.lr.ph56 ]
  %i.6352 = phi i64 [ %i.6, %.loopexit48 ], [ %366, %.lr.ph ], [ %358, %.lr.ph56 ]
  %neg.244351 = phi i32 [ %neg.244, %.loopexit48 ], [ %neg.2, %.lr.ph ], [ %neg.2, %.lr.ph56 ]
  %388 = icmp eq i8* %dest.2, null
  br i1 %388, label %store_int.exit39, label %389

; <label>:389                                     ; preds = %.loopexit48.thread
  %390 = sub i64 0, %i.6352
  %391 = icmp eq i32 %neg.244351, 0
  %i..i38 = select i1 %391, i64 %i.6352, i64 %390
  switch i32 %size.0, label %store_int.exit39 [
    i32 -2, label %392
    i32 -1, label %394
    i32 0, label %397
    i32 1, label %400
    i32 2, label %402
  ]

; <label>:392                                     ; preds = %389
  %393 = trunc i64 %i..i38 to i8
  store i8 %393, i8* %dest.2, align 1, !tbaa !0
  br label %store_int.exit39

; <label>:394                                     ; preds = %389
  %395 = trunc i64 %i..i38 to i16
  %396 = bitcast i8* %dest.2 to i16*
  store i16 %395, i16* %396, align 2, !tbaa !8
  br label %store_int.exit39

; <label>:397                                     ; preds = %389
  %398 = trunc i64 %i..i38 to i32
  %399 = bitcast i8* %dest.2 to i32*
  store i32 %398, i32* %399, align 4, !tbaa !6
  br label %store_int.exit39

; <label>:400                                     ; preds = %389
  %401 = bitcast i8* %dest.2 to i64*
  store i64 %i..i38, i64* %401, align 8, !tbaa !5
  br label %store_int.exit39

; <label>:402                                     ; preds = %389
  %403 = bitcast i8* %dest.2 to i64*
  store i64 %i..i38, i64* %403, align 8, !tbaa !9
  br label %store_int.exit39

; <label>:404                                     ; preds = %unread.exit35, %unread.exit35, %unread.exit35, %unread.exit35
  %405 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %406 = icmp eq i32 %405, 45
  br i1 %406, label %unread.exit40, label %407

; <label>:407                                     ; preds = %404
  %408 = icmp eq i32 %405, 43
  br i1 %408, label %unread.exit40, label %409

; <label>:409                                     ; preds = %407
  %410 = load i32* %9, align 4, !tbaa !6
  %411 = icmp slt i32 %410, 0
  br i1 %411, label %unread.exit40, label %412

; <label>:412                                     ; preds = %409
  %413 = load i32* %6, align 4, !tbaa !6
  %414 = icmp slt i32 %413, 0
  br i1 %414, label %unread.exit40, label %415

; <label>:415                                     ; preds = %412
  %416 = add nsw i32 %413, 1
  store i32 %416, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit40

unread.exit40:                                    ; preds = %415, %412, %409, %407, %404
  %neg.3 = phi i32 [ 0, %407 ], [ 1, %404 ], [ 0, %409 ], [ 0, %412 ], [ 0, %415 ]
  %417 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %418 = icmp eq i32 %417, 48
  br i1 %418, label %419, label %426

; <label>:419                                     ; preds = %unread.exit40
  %420 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %421 = or i32 %420, 32
  %422 = icmp eq i32 %421, 120
  br i1 %422, label %.preheader107, label %426

.preheader107:                                    ; preds = %419
  %423 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %424 = call i32 @isxdigit(i32 %423) nounwind optsize
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %._crit_edge, label %.lr.ph110

; <label>:426                                     ; preds = %419, %unread.exit40
  %m.10 = phi i32 [ 1, %419 ], [ 0, %unread.exit40 ]
  %427 = load i32* %9, align 4, !tbaa !6
  %428 = icmp slt i32 %427, 0
  br i1 %428, label %unread.exit41.preheader, label %429

; <label>:429                                     ; preds = %426
  %430 = load i32* %6, align 4, !tbaa !6
  %431 = icmp slt i32 %430, 0
  br i1 %431, label %unread.exit41.preheader, label %432

; <label>:432                                     ; preds = %429
  %433 = add nsw i32 %430, 1
  store i32 %433, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit41.preheader

unread.exit41.preheader:                          ; preds = %432, %429, %426
  %434 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %435 = add i32 %434, -48
  %436 = icmp ult i32 %435, 10
  br i1 %436, label %unread.exit41, label %unread.exit41._crit_edge

unread.exit41:                                    ; preds = %unread.exit41, %unread.exit41.preheader
  %437 = phi i32 [ %442, %unread.exit41 ], [ %434, %unread.exit41.preheader ]
  %f.0127 = phi x86_fp80 [ %441, %unread.exit41 ], [ 0xK00000000000000000000, %unread.exit41.preheader ]
  %438 = fmul x86_fp80 %f.0127, 0xK4002A000000000000000
  %439 = add nsw i32 %437, -48
  %440 = sitofp i32 %439 to x86_fp80
  %441 = fadd x86_fp80 %438, %440
  %442 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %443 = add i32 %442, -48
  %444 = icmp ult i32 %443, 10
  br i1 %444, label %unread.exit41, label %unread.exit41._crit_edge

unread.exit41._crit_edge:                         ; preds = %unread.exit41, %unread.exit41.preheader
  %.lcssa126 = phi i32 [ %434, %unread.exit41.preheader ], [ %442, %unread.exit41 ]
  %m.11.lcssa = phi i32 [ %m.10, %unread.exit41.preheader ], [ 1, %unread.exit41 ]
  %f.0.lcssa = phi x86_fp80 [ 0xK00000000000000000000, %unread.exit41.preheader ], [ %441, %unread.exit41 ]
  %445 = icmp eq i32 %.lcssa126, 46
  br i1 %445, label %.preheader118, label %.loopexit119

.preheader118:                                    ; preds = %unread.exit41._crit_edge
  %446 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %447 = add i32 %446, -48
  %448 = icmp ult i32 %447, 10
  br i1 %448, label %.lr.ph123, label %.loopexit119

.lr.ph123:                                        ; preds = %.lr.ph123, %.preheader118
  %449 = phi i32 [ %456, %.lr.ph123 ], [ %446, %.preheader118 ]
  %f.1122 = phi x86_fp80 [ %454, %.lr.ph123 ], [ %f.0.lcssa, %.preheader118 ]
  %mag.0121 = phi double [ %455, %.lr.ph123 ], [ 1.000000e+01, %.preheader118 ]
  %450 = add nsw i32 %449, -48
  %451 = sitofp i32 %450 to double
  %452 = fdiv double %451, %mag.0121
  %453 = fpext double %452 to x86_fp80
  %454 = fadd x86_fp80 %f.1122, %453
  %455 = fmul double %mag.0121, 1.000000e+01
  %456 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %457 = add i32 %456, -48
  %458 = icmp ult i32 %457, 10
  br i1 %458, label %.lr.ph123, label %.loopexit119

.loopexit119:                                     ; preds = %.lr.ph123, %.preheader118, %unread.exit41._crit_edge
  %f.2 = phi x86_fp80 [ %f.0.lcssa, %unread.exit41._crit_edge ], [ %f.0.lcssa, %.preheader118 ], [ %454, %.lr.ph123 ]
  %c.0 = phi i32 [ %.lcssa126, %unread.exit41._crit_edge ], [ %446, %.preheader118 ], [ %456, %.lr.ph123 ]
  %459 = or i32 %c.0, 32
  %460 = icmp eq i32 %459, 101
  br i1 %460, label %461, label %.loopexit76

; <label>:461                                     ; preds = %.loopexit119
  %462 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %463 = icmp eq i32 %462, 45
  br i1 %463, label %unread.exit42.preheader, label %464

; <label>:464                                     ; preds = %461
  %465 = icmp eq i32 %462, 43
  br i1 %465, label %unread.exit42.preheader, label %466

; <label>:466                                     ; preds = %464
  %467 = load i32* %9, align 4, !tbaa !6
  %468 = icmp slt i32 %467, 0
  br i1 %468, label %unread.exit42.preheader, label %469

; <label>:469                                     ; preds = %466
  %470 = load i32* %6, align 4, !tbaa !6
  %471 = icmp slt i32 %470, 0
  br i1 %471, label %unread.exit42.preheader, label %472

; <label>:472                                     ; preds = %469
  %473 = add nsw i32 %470, 1
  store i32 %473, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit42.preheader

unread.exit42.preheader:                          ; preds = %472, %469, %466, %464, %461
  %en.0.ph = phi i32 [ 0, %472 ], [ 0, %469 ], [ 0, %466 ], [ 1, %461 ], [ 0, %464 ]
  br label %unread.exit42.outer

unread.exit42.outer:                              ; preds = %479, %unread.exit42.preheader
  %ex.0.ph = phi i32 [ %482, %479 ], [ 0, %unread.exit42.preheader ]
  %m.12.ph = phi i32 [ 1, %479 ], [ 0, %unread.exit42.preheader ]
  %474 = icmp slt i32 %ex.0.ph, 4932
  br label %unread.exit42

unread.exit42:                                    ; preds = %478, %unread.exit42.outer
  %m.12 = phi i32 [ 1, %478 ], [ %m.12.ph, %unread.exit42.outer ]
  %475 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %476 = add i32 %475, -48
  %477 = icmp ult i32 %476, 10
  br i1 %477, label %478, label %483

; <label>:478                                     ; preds = %unread.exit42
  br i1 %474, label %479, label %unread.exit42

; <label>:479                                     ; preds = %478
  %480 = mul nsw i32 %ex.0.ph, 10
  %481 = add i32 %480, -48
  %482 = add i32 %481, %475
  br label %unread.exit42.outer

; <label>:483                                     ; preds = %unread.exit42
  %484 = icmp sgt i32 %ex.0.ph, 4932
  %485 = icmp ne i32 %en.0.ph, 0
  br i1 %484, label %486, label %488

; <label>:486                                     ; preds = %483
  %487 = select i1 %485, x86_fp80 0xK00000000000000000000, x86_fp80 0xK7FFF8000000000000000
  br label %.loopexit76

; <label>:488                                     ; preds = %483
  %489 = icmp eq i32 %ex.0.ph, 0
  br i1 %485, label %.preheader87, label %.preheader93

.preheader93:                                     ; preds = %488
  br i1 %489, label %.loopexit76, label %.lr.ph97

.preheader87:                                     ; preds = %488
  br i1 %489, label %.loopexit76, label %.lr.ph91

.lr.ph91:                                         ; preds = %.lr.ph91, %.preheader87
  %f.390 = phi x86_fp80 [ %491, %.lr.ph91 ], [ %f.2, %.preheader87 ]
  %ex.289 = phi i32 [ %490, %.lr.ph91 ], [ %ex.0.ph, %.preheader87 ]
  %490 = add nsw i32 %ex.289, -1
  %491 = fdiv x86_fp80 %f.390, 0xK4002A000000000000000
  %492 = icmp eq i32 %490, 0
  br i1 %492, label %.loopexit76, label %.lr.ph91

.lr.ph97:                                         ; preds = %.lr.ph97, %.preheader93
  %f.496 = phi x86_fp80 [ %494, %.lr.ph97 ], [ %f.2, %.preheader93 ]
  %ex.395 = phi i32 [ %493, %.lr.ph97 ], [ %ex.0.ph, %.preheader93 ]
  %493 = add nsw i32 %ex.395, -1
  %494 = fmul x86_fp80 %f.496, 0xK4002A000000000000000
  %495 = icmp eq i32 %493, 0
  br i1 %495, label %.loopexit76, label %.lr.ph97

.lr.ph110:                                        ; preds = %503, %.preheader107
  %496 = phi i32 [ %504, %503 ], [ %423, %.preheader107 ]
  %f.5109 = phi x86_fp80 [ %f.6, %503 ], [ 0xK00000000000000000000, %.preheader107 ]
  %497 = add i32 %496, -48
  %498 = icmp ult i32 %497, 10
  %499 = fmul x86_fp80 %f.5109, 0xK40038000000000000000
  br i1 %498, label %503, label %500

; <label>:500                                     ; preds = %.lr.ph110
  %501 = or i32 %496, 32
  %502 = add nsw i32 %501, -87
  br label %503

; <label>:503                                     ; preds = %500, %.lr.ph110
  %.pn25.in = phi i32 [ %502, %500 ], [ %497, %.lr.ph110 ]
  %.pn25 = sitofp i32 %.pn25.in to x86_fp80
  %f.6 = fadd x86_fp80 %499, %.pn25
  %504 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %505 = call i32 @isxdigit(i32 %504) nounwind optsize
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %._crit_edge, label %.lr.ph110

._crit_edge:                                      ; preds = %503, %.preheader107
  %.lcssa108 = phi i32 [ %423, %.preheader107 ], [ %504, %503 ]
  %m.13.lcssa = phi i32 [ 0, %.preheader107 ], [ 1, %503 ]
  %f.5.lcssa = phi x86_fp80 [ 0xK00000000000000000000, %.preheader107 ], [ %f.6, %503 ]
  %507 = icmp eq i32 %.lcssa108, 46
  br i1 %507, label %.preheader99, label %.loopexit100

.preheader99:                                     ; preds = %._crit_edge
  %508 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %509 = call i32 @isxdigit(i32 %508) nounwind optsize
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %.loopexit100, label %.lr.ph104

.lr.ph104:                                        ; preds = %517, %.preheader99
  %511 = phi i32 [ %519, %517 ], [ %508, %.preheader99 ]
  %mag2.0103 = phi double [ %518, %517 ], [ 6.250000e-02, %.preheader99 ]
  %f.7102 = phi x86_fp80 [ %f.8, %517 ], [ %f.5.lcssa, %.preheader99 ]
  %512 = add i32 %511, -48
  %513 = icmp ult i32 %512, 10
  br i1 %513, label %517, label %514

; <label>:514                                     ; preds = %.lr.ph104
  %515 = or i32 %511, 32
  %516 = add nsw i32 %515, -87
  br label %517

; <label>:517                                     ; preds = %514, %.lr.ph104
  %.pn26.in = phi i32 [ %516, %514 ], [ %512, %.lr.ph104 ]
  %.pn26 = sitofp i32 %.pn26.in to double
  %.pn.in = fmul double %.pn26, %mag2.0103
  %.pn = fpext double %.pn.in to x86_fp80
  %f.8 = fadd x86_fp80 %f.7102, %.pn
  %518 = fmul double %mag2.0103, 6.250000e-02
  %519 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %520 = call i32 @isxdigit(i32 %519) nounwind optsize
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %.loopexit100, label %.lr.ph104

.loopexit100:                                     ; preds = %517, %.preheader99, %._crit_edge
  %f.9 = phi x86_fp80 [ %f.5.lcssa, %._crit_edge ], [ %f.5.lcssa, %.preheader99 ], [ %f.8, %517 ]
  %c.1 = phi i32 [ %.lcssa108, %._crit_edge ], [ %508, %.preheader99 ], [ %519, %517 ]
  %522 = or i32 %c.1, 32
  %523 = icmp eq i32 %522, 112
  br i1 %523, label %524, label %.loopexit76

; <label>:524                                     ; preds = %.loopexit100
  %525 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %526 = icmp eq i32 %525, 45
  br i1 %526, label %unread.exit36.preheader, label %527

; <label>:527                                     ; preds = %524
  %528 = icmp eq i32 %525, 43
  br i1 %528, label %unread.exit36.preheader, label %529

; <label>:529                                     ; preds = %527
  %530 = load i32* %9, align 4, !tbaa !6
  %531 = icmp slt i32 %530, 0
  br i1 %531, label %unread.exit36.preheader, label %532

; <label>:532                                     ; preds = %529
  %533 = load i32* %6, align 4, !tbaa !6
  %534 = icmp slt i32 %533, 0
  br i1 %534, label %unread.exit36.preheader, label %535

; <label>:535                                     ; preds = %532
  %536 = add nsw i32 %533, 1
  store i32 %536, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit36.preheader

unread.exit36.preheader:                          ; preds = %535, %532, %529, %527, %524
  %en4.0.ph = phi i32 [ 0, %535 ], [ 0, %532 ], [ 0, %529 ], [ 1, %524 ], [ 0, %527 ]
  br label %unread.exit36.outer

unread.exit36.outer:                              ; preds = %542, %unread.exit36.preheader
  %m.14.ph = phi i32 [ 1, %542 ], [ 0, %unread.exit36.preheader ]
  %ex3.0.ph = phi i32 [ %545, %542 ], [ 0, %unread.exit36.preheader ]
  %537 = icmp slt i32 %ex3.0.ph, 16384
  br label %unread.exit36

unread.exit36:                                    ; preds = %541, %unread.exit36.outer
  %m.14 = phi i32 [ 1, %541 ], [ %m.14.ph, %unread.exit36.outer ]
  %538 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %539 = add i32 %538, -48
  %540 = icmp ult i32 %539, 10
  br i1 %540, label %541, label %546

; <label>:541                                     ; preds = %unread.exit36
  br i1 %537, label %542, label %unread.exit36

; <label>:542                                     ; preds = %541
  %543 = mul nsw i32 %ex3.0.ph, 10
  %544 = add i32 %543, -48
  %545 = add i32 %544, %538
  br label %unread.exit36.outer

; <label>:546                                     ; preds = %unread.exit36
  %547 = icmp sgt i32 %ex3.0.ph, 16384
  %548 = icmp ne i32 %en4.0.ph, 0
  br i1 %547, label %549, label %551

; <label>:549                                     ; preds = %546
  %550 = select i1 %548, x86_fp80 0xK00000000000000000000, x86_fp80 0xK7FFF8000000000000000
  br label %.loopexit76

; <label>:551                                     ; preds = %546
  %552 = icmp eq i32 %ex3.0.ph, 0
  br i1 %548, label %.preheader75, label %.preheader81

.preheader81:                                     ; preds = %551
  br i1 %552, label %.loopexit76, label %.lr.ph85

.preheader75:                                     ; preds = %551
  br i1 %552, label %.loopexit76, label %.lr.ph79

.lr.ph79:                                         ; preds = %.lr.ph79, %.preheader75
  %ex3.278 = phi i32 [ %553, %.lr.ph79 ], [ %ex3.0.ph, %.preheader75 ]
  %f.1077 = phi x86_fp80 [ %554, %.lr.ph79 ], [ %f.9, %.preheader75 ]
  %553 = add nsw i32 %ex3.278, -1
  %554 = fmul x86_fp80 %f.1077, 0xK3FFE8000000000000000
  %555 = icmp eq i32 %553, 0
  br i1 %555, label %.loopexit76, label %.lr.ph79

.lr.ph85:                                         ; preds = %.lr.ph85, %.preheader81
  %ex3.384 = phi i32 [ %556, %.lr.ph85 ], [ %ex3.0.ph, %.preheader81 ]
  %f.1183 = phi x86_fp80 [ %557, %.lr.ph85 ], [ %f.9, %.preheader81 ]
  %556 = add nsw i32 %ex3.384, -1
  %557 = fmul x86_fp80 %f.1183, 0xK40008000000000000000
  %558 = icmp eq i32 %556, 0
  br i1 %558, label %.loopexit76, label %.lr.ph85

.loopexit76:                                      ; preds = %.lr.ph85, %.lr.ph79, %.preheader75, %.preheader81, %549, %.loopexit100, %.lr.ph97, %.lr.ph91, %.preheader87, %.preheader93, %486, %.loopexit119
  %f.12 = phi x86_fp80 [ %550, %549 ], [ %f.9, %.loopexit100 ], [ %487, %486 ], [ %f.2, %.loopexit119 ], [ %f.9, %.preheader75 ], [ %554, %.lr.ph79 ], [ %f.9, %.preheader81 ], [ %557, %.lr.ph85 ], [ %f.2, %.preheader87 ], [ %491, %.lr.ph91 ], [ %f.2, %.preheader93 ], [ %494, %.lr.ph97 ]
  %m.15 = phi i32 [ %m.14, %549 ], [ %m.13.lcssa, %.loopexit100 ], [ %m.12, %486 ], [ %m.11.lcssa, %.loopexit119 ], [ %m.14, %.preheader75 ], [ %m.14, %.lr.ph79 ], [ %m.14, %.preheader81 ], [ %m.14, %.lr.ph85 ], [ %m.12, %.preheader87 ], [ %m.12, %.lr.ph91 ], [ %m.12, %.preheader93 ], [ %m.12, %.lr.ph97 ]
  %559 = icmp eq i32 %m.15, 0
  br i1 %559, label %.loopexit232, label %560

; <label>:560                                     ; preds = %.loopexit76
  %561 = icmp eq i32 %neg.3, 0
  br i1 %561, label %564, label %562

; <label>:562                                     ; preds = %560
  %563 = fmul x86_fp80 %f.12, 0xKBFFF8000000000000000
  br label %564

; <label>:564                                     ; preds = %562, %560
  %f.13 = phi x86_fp80 [ %563, %562 ], [ %f.12, %560 ]
  %565 = icmp eq i8* %dest.2, null
  br i1 %565, label %store_int.exit39, label %566

; <label>:566                                     ; preds = %564
  switch i32 %size.0, label %store_int.exit39 [
    i32 0, label %567
    i32 1, label %570
    i32 3, label %573
  ]

; <label>:567                                     ; preds = %566
  %568 = fptrunc x86_fp80 %f.13 to float
  %569 = bitcast i8* %dest.2 to float*
  store float %568, float* %569, align 4, !tbaa !2
  br label %store_int.exit39

; <label>:570                                     ; preds = %566
  %571 = fptrunc x86_fp80 %f.13 to double
  %572 = bitcast i8* %dest.2 to double*
  store double %571, double* %572, align 8, !tbaa !3
  br label %store_int.exit39

; <label>:573                                     ; preds = %566
  %574 = bitcast i8* %dest.2 to x86_fp80*
  store x86_fp80 %f.13, x86_fp80* %574, align 16, !tbaa !4
  br label %store_int.exit39

; <label>:575                                     ; preds = %unread.exit35
  %576 = icmp ne i8* %dest.2, null
  %577 = select i1 %576, i8* %dest.2, i8* %11
  %578 = bitcast i8* %577 to i32*
  store i32 0, i32* %st.0, align 4
  store i32 0, i32* %st.1, align 4
  br label %.outer69

.outer69:                                         ; preds = %.outer69.backedge, %575
  %wcs.6.ph = phi i32* [ %578, %575 ], [ %wcs.6.ph.be, %.outer69.backedge ]
  br label %.backedge70

.backedge70:                                      ; preds = %593, %591, %585, %.outer69
  %579 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %580 = icmp sgt i32 %579, -1
  br i1 %580, label %581, label %594

; <label>:581                                     ; preds = %.backedge70
  br i1 %10, label %587, label %582

; <label>:582                                     ; preds = %581
  %583 = call i32 %5(i32 %579) nounwind optsize
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %594

; <label>:585                                     ; preds = %582
  br i1 %576, label %586, label %.backedge70

; <label>:586                                     ; preds = %585
  store i32 %579, i32* %wcs.6.ph, align 4, !tbaa !6
  br label %.outer69.backedge

.outer69.backedge:                                ; preds = %593, %586
  %wcs.6.ph.be = getelementptr inbounds i32* %wcs.6.ph, i64 1
  br label %.outer69

; <label>:587                                     ; preds = %581
  %588 = trunc i32 %579 to i8
  store i8 %588, i8* %ch5, align 1, !tbaa !0
  %589 = call i32 %5(i32 %579) nounwind optsize
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %591, label %594

; <label>:591                                     ; preds = %587
  %592 = call i64 @mbrtowc(i32* %wcs.6.ph, i8* %ch5, i64 1, %struct.mbstate_t* %st) nounwind optsize
  switch i64 %592, label %593 [
    i64 -1, label %.loopexit60
    i64 -2, label %.backedge70
  ]

; <label>:593                                     ; preds = %591
  br i1 %576, label %.outer69.backedge, label %.backedge70

; <label>:594                                     ; preds = %587, %582, %.backedge70
  br i1 %576, label %595, label %store_int.exit39

; <label>:595                                     ; preds = %594
  store i32 0, i32* %wcs.6.ph, align 4, !tbaa !6
  br label %store_int.exit39

; <label>:596                                     ; preds = %unread.exit35
  %597 = icmp ne i8* %dest.2, null
  br i1 %597, label %.outer, label %598

; <label>:598                                     ; preds = %596
  br label %.outer

.outer:                                           ; preds = %614, %609, %598, %596
  %s.6.ph61 = phi i8* [ %11, %598 ], [ %dest.2, %596 ], [ %611, %609 ], [ %616, %614 ]
  br label %.backedge

.backedge:                                        ; preds = %613, %608, %.outer
  %599 = call fastcc i32 @read632(%struct.rctx* %r) optsize
  %600 = icmp sgt i32 %599, -1
  br i1 %600, label %601, label %617

; <label>:601                                     ; preds = %.backedge
  %602 = call i32 %5(i32 %599) nounwind optsize
  %603 = icmp ne i32 %602, 0
  br i1 %10, label %612, label %604

; <label>:604                                     ; preds = %601
  br i1 %603, label %617, label %605

; <label>:605                                     ; preds = %604
  %606 = call i32 @wctomb(i8* %s.6.ph61, i32 %599) nounwind optsize
  %607 = icmp slt i32 %606, 0
  br i1 %607, label %.loopexit60, label %608

; <label>:608                                     ; preds = %605
  br i1 %597, label %609, label %.backedge

; <label>:609                                     ; preds = %608
  %610 = sext i32 %606 to i64
  %611 = getelementptr inbounds i8* %s.6.ph61, i64 %610
  br label %.outer

; <label>:612                                     ; preds = %601
  br i1 %603, label %617, label %613

; <label>:613                                     ; preds = %612
  br i1 %597, label %614, label %.backedge

; <label>:614                                     ; preds = %613
  %615 = trunc i32 %599 to i8
  %616 = getelementptr inbounds i8* %s.6.ph61, i64 1
  store i8 %615, i8* %s.6.ph61, align 1, !tbaa !0
  br label %.outer

; <label>:617                                     ; preds = %612, %604, %.backedge
  br i1 %597, label %618, label %store_int.exit39

; <label>:618                                     ; preds = %617
  store i8 0, i8* %s.6.ph61, align 1, !tbaa !0
  br label %store_int.exit39

store_int.exit39:                                 ; preds = %618, %617, %595, %594, %573, %570, %567, %566, %564, %402, %400, %397, %394, %392, %389, %.loopexit48.thread, %unread.exit35
  %neg.4 = phi i32 [ %neg.2, %618 ], [ %neg.2, %595 ], [ %neg.3, %573 ], [ %neg.3, %570 ], [ %neg.3, %567 ], [ %neg.244351, %392 ], [ %neg.244351, %394 ], [ %neg.244351, %397 ], [ %neg.244351, %400 ], [ %neg.244351, %402 ], [ %neg.2, %unread.exit35 ], [ %neg.244351, %.loopexit48.thread ], [ %neg.244351, %389 ], [ %neg.3, %564 ], [ %neg.3, %566 ], [ %neg.2, %594 ], [ %neg.2, %617 ]
  %i.7 = phi i64 [ %i.1, %618 ], [ %i.1, %595 ], [ %i.1, %573 ], [ %i.1, %570 ], [ %i.1, %567 ], [ %i.6352, %392 ], [ %i.6352, %394 ], [ %i.6352, %397 ], [ %i.6352, %400 ], [ %i.6352, %402 ], [ %i.1, %unread.exit35 ], [ %i.6352, %.loopexit48.thread ], [ %i.6352, %389 ], [ %i.1, %564 ], [ %i.1, %566 ], [ %i.1, %594 ], [ %i.1, %617 ]
  %m.16 = phi i32 [ %m.5, %618 ], [ %m.5, %595 ], [ %m.15, %573 ], [ %m.15, %570 ], [ %m.15, %567 ], [ %m.9353, %392 ], [ %m.9353, %394 ], [ %m.9353, %397 ], [ %m.9353, %400 ], [ %m.9353, %402 ], [ %m.5, %unread.exit35 ], [ %m.9353, %.loopexit48.thread ], [ %m.9353, %389 ], [ %m.15, %564 ], [ %m.15, %566 ], [ %m.5, %594 ], [ %m.5, %617 ]
  %619 = load i32* %9, align 4, !tbaa !6
  %620 = icmp slt i32 %619, 0
  br i1 %620, label %unread.exit31, label %621

; <label>:621                                     ; preds = %store_int.exit39
  %622 = load i32* %6, align 4, !tbaa !6
  %623 = icmp slt i32 %622, 0
  br i1 %623, label %unread.exit31, label %624

; <label>:624                                     ; preds = %621
  %625 = add nsw i32 %622, 1
  store i32 %625, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit31

unread.exit31:                                    ; preds = %624, %621, %store_int.exit39
  %not. = icmp ne i8* %dest.2, null
  %626 = zext i1 %not. to i32
  %matches.0. = add nsw i32 %626, %matches.0
  br label %unread.exit

.loopexit60:                                      ; preds = %605, %591, %280, %253, %208, %195
  %627 = call i32* @__errno_location() nounwind readnone optsize
  store i32 84, i32* %627, align 4, !tbaa !6
  br label %.critedge9.thread

.critedge9.thread:                                ; preds = %.loopexit60, %298, %265, %.critedge, %158, %._crit_edge346, %._crit_edge216, %121, %._crit_edge208, %.preheader204, %65, %._crit_edge348
  %628 = icmp eq i32 %matches.0, 0
  %629 = sext i1 %628 to i32
  %.matches.0 = add nsw i32 %629, %matches.0
  br label %.loopexit232

.loopexit232:                                     ; preds = %.critedge9.thread, %.loopexit76, %.loopexit48, %.critedge8, %219, %199, %52
  %matches.1 = phi i32 [ %.matches.0, %.critedge9.thread ], [ %matches.0, %199 ], [ %matches.0, %219 ], [ %matches.0, %.critedge8 ], [ %matches.0, %.loopexit76 ], [ %matches.0, %.loopexit48 ], [ %matches.0, %52 ]
  %630 = load i32* %9, align 4, !tbaa !6
  %631 = icmp slt i32 %630, 0
  br i1 %631, label %unread.exit30, label %632

; <label>:632                                     ; preds = %.loopexit232
  %633 = load i32* %6, align 4, !tbaa !6
  %634 = icmp slt i32 %633, 0
  br i1 %634, label %unread.exit30, label %635

; <label>:635                                     ; preds = %632
  %636 = add nsw i32 %633, 1
  store i32 %636, i32* %6, align 4, !tbaa !6
  store i32 1, i32* %8, align 4, !tbaa !6
  br label %unread.exit30

unread.exit30:                                    ; preds = %635, %632, %.loopexit232, %unread.exit
  %.0 = phi i32 [ %matches.1, %.loopexit232 ], [ %matches.1, %632 ], [ %matches.1, %635 ], [ %matches.0, %unread.exit ]
  ret i32 %.0
}

define internal fastcc i32 @read632(%struct.rctx* %r) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 8
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = add nsw i32 %2, -1
  store i32 %3, i32* %1, align 4, !tbaa !6
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  store i32 -1, i32* %1, align 4, !tbaa !6
  br label %17

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 7
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

; <label>:10                                      ; preds = %6
  store i32 0, i32* %7, align 4, !tbaa !6
  br label %14

; <label>:11                                      ; preds = %6
  %12 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 0
  %13 = load void (%struct.rctx*)** %12, align 8, !tbaa !7
  tail call void %13(%struct.rctx* %r) nounwind optsize
  br label %14

; <label>:14                                      ; preds = %11, %10
  %15 = getelementptr inbounds %struct.rctx* %r, i64 0, i32 6
  %16 = load i32* %15, align 4, !tbaa !6
  br label %17

; <label>:17                                      ; preds = %14, %5
  %.0 = phi i32 [ -1, %5 ], [ %16, %14 ]
  ret i32 %.0
}

declare void @llvm.va_copy(i8*, i8*) nounwind

define i32 @scanf(i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.543], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.543]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.543]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vscanf(i8* %fmt, %struct.__va_list_tag.543* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @__yield() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 158, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i16* @seed48(i16* %s) nounwind uwtable optsize {
  %1 = tail call i8* @memcpy(i8* bitcast ([3 x i16]* @seed48.p to i8*), i8* bitcast ([7 x i16]* @__seed48 to i8*), i64 6) nounwind optsize
  %2 = bitcast i16* %s to i8*
  %3 = tail call i8* @memcpy(i8* bitcast ([7 x i16]* @__seed48 to i8*), i8* %2, i64 6) nounwind optsize
  ret i16* getelementptr inbounds ([3 x i16]* @seed48.p, i64 0, i64 0)
}

define void @seekdir(%struct.__DIR_s.544* nocapture %dir, i64 %off) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__DIR_s.544* %dir, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = tail call i64 @lseek(i32 %2, i64 %off, i32 0) nounwind optsize
  %4 = getelementptr inbounds %struct.__DIR_s.544* %dir, i64 0, i32 2
  store i64 %3, i64* %4, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.__DIR_s.544* %dir, i64 0, i32 4
  store i32 0, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds %struct.__DIR_s.544* %dir, i64 0, i32 3
  store i32 0, i32* %6, align 4, !tbaa !6
  ret void
}

define i32 @select(i32 %n, %struct.fd_set.545* %rfds, %struct.fd_set.545* %wfds, %struct.fd_set.545* %efds, %struct.timeval.546* %tv) nounwind uwtable optsize {
  %1 = sext i32 %n to i64
  %2 = ptrtoint %struct.fd_set.545* %rfds to i64
  %3 = ptrtoint %struct.fd_set.545* %wfds to i64
  %4 = ptrtoint %struct.fd_set.545* %efds to i64
  %5 = ptrtoint %struct.timeval.546* %tv to i64
  %6 = tail call i64 @__syscall_cp(i64 142, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 0) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define i32 @semctl(i32 %id, i32 %num, i32 %cmd, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.547], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.547]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.547]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %5, label %11

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag.547]* %ap, i64 0, i64 0, i32 3
  %7 = load i8** %6, align 16
  %8 = sext i32 %3 to i64
  %9 = getelementptr i8* %7, i64 %8
  %10 = add i32 %3, 8
  store i32 %10, i32* %2, align 16
  br label %15

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag.547]* %ap, i64 0, i64 0, i32 2
  %13 = load i8** %12, align 8
  %14 = getelementptr i8* %13, i64 8
  store i8* %14, i8** %12, align 8
  br label %15

; <label>:15                                      ; preds = %11, %5
  %.in = phi i8* [ %9, %5 ], [ %13, %11 ]
  %16 = bitcast i8* %.in to i64*
  %17 = load i64* %16, align 8
  call void @llvm.va_end(i8* %1)
  %18 = sext i32 %id to i64
  %19 = sext i32 %num to i64
  %20 = or i32 %cmd, 256
  %21 = sext i32 %20 to i64
  %22 = call i64 (i64, ...)* @__syscall(i64 300, i64 %18, i64 %19, i64 %21, i64 %17, i32 0, i32 0) nounwind optsize
  %23 = call i64 @__syscall_ret(i64 %22) nounwind optsize
  %24 = trunc i64 %23 to i32
  ret i32 %24
}

define i32 @sem_destroy(%struct.sem_t* nocapture %sem) nounwind uwtable readnone optsize {
  ret i32 0
}

define i32 @semget(i32 %key, i32 %n, i32 %fl) nounwind uwtable optsize {
  %1 = sext i32 %key to i64
  %2 = sext i32 %n to i64
  %3 = sext i32 %fl to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 299, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @sem_getvalue(%struct.sem_t.548* nocapture %sem, i32* nocapture %valp) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sem_t.548* %sem, i64 0, i32 0, i64 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp slt i32 %2, 0
  %4 = select i1 %3, i32 0, i32 %2
  store i32 %4, i32* %valp, align 4, !tbaa !6
  ret i32 0
}

define i32 @sem_init(%struct.sem_t.549* nocapture %sem, i32 %pshared, i32 %value) nounwind uwtable optsize {
  %1 = icmp slt i32 %value, 0
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %0
  %3 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %3, align 4, !tbaa !6
  br label %7

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.sem_t.549* %sem, i64 0, i32 0, i64 0
  store i32 %value, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds %struct.sem_t.549* %sem, i64 0, i32 0, i64 1
  store i32 0, i32* %6, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %4, %2
  %.0 = phi i32 [ -1, %2 ], [ 0, %4 ]
  ret i32 %.0
}

define %struct.sem_t.549* @sem_open(i8* %name, i32 %flags, ...) nounwind uwtable optsize {
  %1 = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag.552], align 16
  %newsem = alloca %struct.sem_t.549, align 4
  %tmp = alloca [64 x i8], align 16
  %ts = alloca %struct.timespec.29, align 8
  %st = alloca %struct.stat.554, align 8
  store i8* %name, i8** %1, align 8
  %2 = load i8* %name, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 47
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %0
  %storemerge7 = phi i8* [ %4, %.lr.ph ], [ %name, %0 ]
  %4 = getelementptr inbounds i8* %storemerge7, i64 1
  store i8* %4, i8** %1, align 8
  %5 = load i8* %4, align 1, !tbaa !0
  %6 = icmp eq i8 %5, 47
  br i1 %6, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %0
  %storemerge.lcssa = phi i8* [ %name, %0 ], [ %4, %.lr.ph ]
  %7 = call i8* @strchr(i8* %storemerge.lcssa, i32 47) nounwind optsize
  %8 = icmp eq i8* %7, null
  br i1 %8, label %11, label %9

; <label>:9                                       ; preds = %._crit_edge
  %10 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %10, align 4, !tbaa !6
  br label %188

; <label>:11                                      ; preds = %._crit_edge
  %12 = call i32 @pthread_once(i32* @once, void ()* @init638) nounwind optsize
  %13 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  %14 = icmp eq %struct.anon.550* %13, null
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %16, align 4, !tbaa !6
  br label %188

; <label>:17                                      ; preds = %11
  %18 = and i32 %flags, 64
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %._crit_edge10, label %20

._crit_edge10:                                    ; preds = %17
  %.pre = getelementptr inbounds [64 x i8]* %tmp, i64 0, i64 0
  br label %83

; <label>:20                                      ; preds = %17
  %21 = bitcast [1 x %struct.__va_list_tag.552]* %ap to i8*
  call void @llvm.va_start(i8* %21)
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag.552]* %ap, i64 0, i64 0, i32 0
  %23 = load i32* %22, align 16
  %24 = icmp ult i32 %23, 41
  br i1 %24, label %31, label %.thread11

.thread11:                                        ; preds = %20
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag.552]* %ap, i64 0, i64 0, i32 2
  %26 = load i8** %25, align 8
  %27 = getelementptr i8* %26, i64 8
  store i8* %27, i8** %25, align 8
  %28 = bitcast i8* %26 to i32*
  %29 = load i32* %28, align 4
  %30 = and i32 %29, 438
  br label %47

; <label>:31                                      ; preds = %20
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag.552]* %ap, i64 0, i64 0, i32 3
  %33 = load i8** %32, align 16
  %34 = sext i32 %23 to i64
  %35 = getelementptr i8* %33, i64 %34
  %36 = add i32 %23, 8
  store i32 %36, i32* %22, align 16
  %37 = bitcast i8* %35 to i32*
  %38 = load i32* %37, align 4
  %39 = and i32 %38, 438
  %40 = icmp ult i32 %36, 41
  br i1 %40, label %41, label %47

; <label>:41                                      ; preds = %31
  %42 = getelementptr inbounds [1 x %struct.__va_list_tag.552]* %ap, i64 0, i64 0, i32 3
  %43 = load i8** %42, align 16
  %44 = sext i32 %36 to i64
  %45 = getelementptr i8* %43, i64 %44
  %46 = add i32 %23, 16
  store i32 %46, i32* %22, align 16
  br label %52

; <label>:47                                      ; preds = %31, %.thread11
  %48 = phi i32 [ %30, %.thread11 ], [ %39, %31 ]
  %49 = getelementptr inbounds [1 x %struct.__va_list_tag.552]* %ap, i64 0, i64 0, i32 2
  %50 = load i8** %49, align 8
  %51 = getelementptr i8* %50, i64 8
  store i8* %51, i8** %49, align 8
  br label %52

; <label>:52                                      ; preds = %47, %41
  %53 = phi i32 [ %39, %41 ], [ %48, %47 ]
  %.in1 = phi i8* [ %45, %41 ], [ %50, %47 ]
  %54 = bitcast i8* %.in1 to i32*
  %55 = load i32* %54, align 4
  call void @llvm.va_end(i8* %21)
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %59

; <label>:57                                      ; preds = %52
  %58 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %58, align 4, !tbaa !6
  br label %188

; <label>:59                                      ; preds = %52
  %60 = call i32 @sem_init(%struct.sem_t.549* %newsem, i32 0, i32 %55) nounwind optsize
  %61 = call i32 @clock_gettime(i32 0, %struct.timespec.29* %ts) nounwind optsize
  %62 = getelementptr inbounds [64 x i8]* %tmp, i64 0, i64 0
  %63 = load i8** %1, align 8, !tbaa !7
  %64 = call i32 @getpid() nounwind optsize
  %65 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %66 = load i64* %65, align 8, !tbaa !5
  %67 = trunc i64 %66 to i32
  %68 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %62, i64 64, i8* getelementptr inbounds ([21 x i8]* @.str635, i64 0, i64 0), i8** %1, i8* %63, i32 %64, i32 %67) nounwind optsize
  %69 = call i32 (i8*, i32, ...)* @open(i8* %62, i32 194, i32 %53) nounwind optsize
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %188, label %71

; <label>:71                                      ; preds = %59
  %72 = call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([9 x i8]* @.str1636, i64 0, i64 0), i32 65536) nounwind optsize
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %80, label %74

; <label>:74                                      ; preds = %71
  %75 = bitcast %struct.sem_t.549* %newsem to i8*
  %76 = call i64 @write(i32 %69, i8* %75, i64 32) nounwind optsize
  %77 = icmp eq i64 %76, 32
  br i1 %77, label %83, label %78

; <label>:78                                      ; preds = %74
  %79 = call i32 @close(i32 %72) nounwind optsize
  br label %80

; <label>:80                                      ; preds = %78, %71
  %81 = call i32 @close(i32 %69) nounwind optsize
  %82 = call i32 @unlink(i8* %62) nounwind optsize
  br label %188

; <label>:83                                      ; preds = %74, %._crit_edge10
  %.pre-phi = phi i8* [ %.pre, %._crit_edge10 ], [ %62, %74 ]
  %dir.0 = phi i32 [ undef, %._crit_edge10 ], [ %72, %74 ]
  %tfd.0 = phi i32 [ undef, %._crit_edge10 ], [ %69, %74 ]
  %84 = call i32 @pthread_spin_lock(i32* @lock637) nounwind optsize
  %85 = and i32 %flags, 128
  %86 = icmp ne i32 %85, 0
  %87 = and i32 %flags, -68
  %88 = or i32 %87, 2
  br label %89

; <label>:89                                      ; preds = %149, %83
  br i1 %86, label %138, label %90

; <label>:90                                      ; preds = %89
  %91 = load i8** %1, align 8, !tbaa !7
  %92 = call i32 @shm_open(i8* %91, i32 %88, i32 0) nounwind optsize
  %93 = icmp sgt i32 %92, -1
  br i1 %93, label %98, label %94

; <label>:94                                      ; preds = %90
  %95 = call i32* @__errno_location() nounwind readnone optsize
  %96 = load i32* %95, align 4, !tbaa !6
  %97 = icmp eq i32 %96, 2
  br i1 %97, label %138, label %98

; <label>:98                                      ; preds = %94, %90
  br i1 %19, label %103, label %99

; <label>:99                                      ; preds = %98
  %100 = call i32 @close(i32 %dir.0) nounwind optsize
  %101 = call i32 @close(i32 %tfd.0) nounwind optsize
  %102 = call i32 @unlink(i8* %.pre-phi) nounwind optsize
  br label %103

; <label>:103                                     ; preds = %99, %98
  br i1 %93, label %104, label %.thread

; <label>:104                                     ; preds = %103
  %105 = call i32 bitcast (i32 (i32, %struct.stat*)* @fstat to i32 (i32, %struct.stat.554*)*)(i32 %92, %struct.stat.554* %st) nounwind optsize
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %107, label %109

; <label>:107                                     ; preds = %104
  %108 = call i32 @close(i32 %92) nounwind optsize
  br label %.thread

; <label>:109                                     ; preds = %104
  %110 = icmp slt i32 %92, 0
  br i1 %110, label %.thread, label %112

.thread:                                          ; preds = %109, %107, %103
  %111 = call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  br label %188

; <label>:112                                     ; preds = %109
  %113 = getelementptr inbounds %struct.stat.554* %st, i64 0, i32 1
  %114 = load i64* %113, align 8, !tbaa !9
  %115 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  br label %116

; <label>:116                                     ; preds = %123, %112
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %123 ], [ 0, %112 ]
  %i.0.i = phi i32 [ %124, %123 ], [ 0, %112 ]
  %117 = trunc i64 %indvars.iv.i to i32
  %118 = icmp slt i32 %117, 256
  br i1 %118, label %119, label %.critedge.i

; <label>:119                                     ; preds = %116
  %120 = getelementptr inbounds %struct.anon.550* %115, i64 %indvars.iv.i, i32 0
  %121 = load i64* %120, align 8, !tbaa !9
  %122 = icmp eq i64 %121, %114
  br i1 %122, label %.critedge.i, label %123

; <label>:123                                     ; preds = %119
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %124 = add nsw i32 %i.0.i, 1
  br label %116

.critedge.i:                                      ; preds = %119, %116
  %125 = icmp eq i32 %i.0.i, 256
  br i1 %125, label %find_map.exit.thread, label %126

; <label>:126                                     ; preds = %.critedge.i
  %127 = sext i32 %i.0.i to i64
  %128 = getelementptr inbounds %struct.anon.550* %115, i64 %127, i32 2
  %129 = load i32* %128, align 4, !tbaa !6
  %130 = icmp eq i32 %129, 2147483647
  br i1 %130, label %find_map.exit.thread2, label %find_map.exit

find_map.exit:                                    ; preds = %126
  %131 = add nsw i32 %129, 1
  store i32 %131, i32* %128, align 4, !tbaa !6
  %132 = getelementptr inbounds %struct.anon.550* %115, i64 %127, i32 1
  %133 = load %struct.sem_t.549** %132, align 8, !tbaa !7
  %134 = icmp eq %struct.sem_t.549* %133, null
  br i1 %134, label %find_map.exit.thread, label %find_map.exit.thread2

find_map.exit.thread2:                            ; preds = %find_map.exit, %126
  %.0.i3 = phi %struct.sem_t.549* [ %133, %find_map.exit ], [ inttoptr (i64 -1 to %struct.sem_t.549*), %126 ]
  %135 = call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  %136 = call i32 @close(i32 %92) nounwind optsize
  %137 = icmp eq %struct.sem_t.549* %.0.i3, inttoptr (i64 -1 to %struct.sem_t.549*)
  %. = select i1 %137, %struct.sem_t.549* null, %struct.sem_t.549* %.0.i3
  br label %188

; <label>:138                                     ; preds = %94, %89
  br i1 %19, label %139, label %141

; <label>:139                                     ; preds = %138
  %140 = call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  br label %188

; <label>:141                                     ; preds = %138
  %142 = load i8** %1, align 8, !tbaa !7
  %143 = call i32 @linkat(i32 -100, i8* %.pre-phi, i32 %dir.0, i8* %142, i32 0) nounwind optsize
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148

; <label>:145                                     ; preds = %141
  %146 = call i32 @close(i32 %dir.0) nounwind optsize
  %147 = call i32 @unlink(i8* %.pre-phi) nounwind optsize
  br label %find_map.exit.thread

; <label>:148                                     ; preds = %141
  br i1 %86, label %153, label %149

; <label>:149                                     ; preds = %148
  %150 = call i32* @__errno_location() nounwind readnone optsize
  %151 = load i32* %150, align 4, !tbaa !6
  %152 = icmp eq i32 %151, 17
  br i1 %152, label %89, label %153

; <label>:153                                     ; preds = %149, %148
  %154 = call i32 @close(i32 %dir.0) nounwind optsize
  %155 = call i32 @close(i32 %tfd.0) nounwind optsize
  %156 = call i32 @unlink(i8* %.pre-phi) nounwind optsize
  br label %188

find_map.exit.thread:                             ; preds = %145, %find_map.exit, %.critedge.i
  %fd.1 = phi i32 [ %tfd.0, %145 ], [ %92, %find_map.exit ], [ %92, %.critedge.i ]
  %157 = call i32 bitcast (i32 (i32, %struct.stat*)* @fstat to i32 (i32, %struct.stat.554*)*)(i32 %fd.1, %struct.stat.554* %st) nounwind optsize
  %158 = icmp slt i32 %157, 0
  br i1 %158, label %160, label %.preheader

.preheader:                                       ; preds = %find_map.exit.thread
  %159 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  br label %163

; <label>:160                                     ; preds = %find_map.exit.thread
  %161 = call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  %162 = call i32 @close(i32 %fd.1) nounwind optsize
  br label %188

; <label>:163                                     ; preds = %170, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %170 ]
  %i.0 = phi i32 [ 0, %.preheader ], [ %171, %170 ]
  %164 = trunc i64 %indvars.iv to i32
  %165 = icmp slt i32 %164, 256
  br i1 %165, label %166, label %.critedge

; <label>:166                                     ; preds = %163
  %167 = getelementptr inbounds %struct.anon.550* %159, i64 %indvars.iv, i32 1
  %168 = load %struct.sem_t.549** %167, align 8, !tbaa !7
  %169 = icmp eq %struct.sem_t.549* %168, null
  br i1 %169, label %.critedge, label %170

; <label>:170                                     ; preds = %166
  %indvars.iv.next = add i64 %indvars.iv, 1
  %171 = add nsw i32 %i.0, 1
  br label %163

.critedge:                                        ; preds = %166, %163
  %172 = call i8* @mmap(i8* null, i64 32, i32 3, i32 1, i32 %fd.1, i64 0) nounwind optsize
  %173 = call i32 @close(i32 %fd.1) nounwind optsize
  %174 = icmp eq i8* %172, inttoptr (i64 -1 to i8*)
  br i1 %174, label %175, label %177

; <label>:175                                     ; preds = %.critedge
  %176 = call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  br label %188

; <label>:177                                     ; preds = %.critedge
  %178 = getelementptr inbounds %struct.stat.554* %st, i64 0, i32 1
  %179 = load i64* %178, align 8, !tbaa !9
  %180 = sext i32 %i.0 to i64
  %181 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  %182 = getelementptr inbounds %struct.anon.550* %181, i64 %180, i32 0
  store i64 %179, i64* %182, align 8, !tbaa !9
  %183 = bitcast i8* %172 to %struct.sem_t.549*
  %184 = getelementptr inbounds %struct.anon.550* %181, i64 %180, i32 1
  store %struct.sem_t.549* %183, %struct.sem_t.549** %184, align 8, !tbaa !7
  %185 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  %186 = getelementptr inbounds %struct.anon.550* %185, i64 %180, i32 2
  store i32 1, i32* %186, align 4, !tbaa !6
  %187 = call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  br label %188

; <label>:188                                     ; preds = %177, %175, %160, %153, %139, %find_map.exit.thread2, %.thread, %80, %59, %57, %15, %9
  %.0 = phi %struct.sem_t.549* [ null, %9 ], [ null, %57 ], [ null, %80 ], [ null, %153 ], [ null, %160 ], [ null, %175 ], [ %183, %177 ], [ null, %139 ], [ null, %.thread ], [ null, %15 ], [ null, %59 ], [ %., %find_map.exit.thread2 ]
  ret %struct.sem_t.549* %.0
}

define i32 @sem_close(%struct.sem_t.549* %sem) nounwind uwtable optsize {
  %1 = tail call i32 @pthread_spin_lock(i32* @lock637) nounwind optsize
  %2 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  br label %3

; <label>:3                                       ; preds = %10, %0
  %indvars.iv = phi i64 [ %indvars.iv.next, %10 ], [ 0, %0 ]
  %i.0 = phi i32 [ %11, %10 ], [ 0, %0 ]
  %4 = trunc i64 %indvars.iv to i32
  %5 = icmp slt i32 %4, 256
  br i1 %5, label %6, label %.critedge

; <label>:6                                       ; preds = %3
  %7 = getelementptr inbounds %struct.anon.550* %2, i64 %indvars.iv, i32 1
  %8 = load %struct.sem_t.549** %7, align 8, !tbaa !7
  %9 = icmp eq %struct.sem_t.549* %8, %sem
  br i1 %9, label %.critedge, label %10

; <label>:10                                      ; preds = %6
  %indvars.iv.next = add i64 %indvars.iv, 1
  %11 = add nsw i32 %i.0, 1
  br label %3

.critedge:                                        ; preds = %6, %3
  %12 = sext i32 %i.0 to i64
  %13 = getelementptr inbounds %struct.anon.550* %2, i64 %12, i32 2
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = add nsw i32 %14, -1
  store i32 %15, i32* %13, align 4, !tbaa !6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

; <label>:17                                      ; preds = %.critedge
  %18 = getelementptr inbounds %struct.anon.550* %2, i64 %12, i32 1
  store %struct.sem_t.549* null, %struct.sem_t.549** %18, align 8, !tbaa !7
  %19 = load %struct.anon.550** @semtab, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.anon.550* %19, i64 %12, i32 0
  store i64 0, i64* %20, align 8, !tbaa !9
  br label %21

; <label>:21                                      ; preds = %17, %.critedge
  %22 = tail call i32 @pthread_spin_unlock(i32* @lock637) nounwind optsize
  %23 = bitcast %struct.sem_t.549* %sem to i8*
  %24 = tail call i32 @munmap(i8* %23, i64 32) nounwind optsize
  ret i32 %24
}

define internal void @init638() nounwind uwtable optsize {
  %1 = tail call i8* @calloc(i64 24, i64 256) nounwind optsize
  %2 = bitcast i8* %1 to %struct.anon.550*
  store %struct.anon.550* %2, %struct.anon.550** @semtab, align 8, !tbaa !7
  ret void
}

define i32 @semop(i32 %id, %struct.sembuf* %buf, i64 %n) nounwind uwtable optsize {
  %1 = sext i32 %id to i64
  %2 = ptrtoint %struct.sembuf* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 298, i64 %1, i64 %2, i64 %n, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @sem_post(%struct.sem_t.555* %sem) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sem_t.555* %sem, i64 0, i32 0, i64 0
  %2 = getelementptr inbounds %struct.sem_t.555* %sem, i64 0, i32 0, i64 1
  %.pre = load i32* %1, align 4, !tbaa !6
  br label %a_cas.exit

a_cas.exit:                                       ; preds = %14, %0
  %3 = phi i32 [ %.pre, %0 ], [ %15, %14 ]
  %4 = load i32* %2, align 4, !tbaa !6
  %5 = icmp eq i32 %3, 2147483647
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %a_cas.exit
  %7 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 75, i32* %7, align 4, !tbaa !6
  br label %20

; <label>:8                                       ; preds = %a_cas.exit
  %.lobit = lshr i32 %3, 31
  %9 = add i32 %3, 1
  %10 = add i32 %9, %.lobit
  br label %11

; <label>:11                                      ; preds = %14, %8
  %12 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %3, i32 %10, i32* %1) nounwind optsize
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %a_cas.exit.thread, label %14

; <label>:14                                      ; preds = %11
  %15 = load volatile i32* %1, align 4, !tbaa !6
  %16 = icmp eq i32 %15, %3
  br i1 %16, label %11, label %a_cas.exit

a_cas.exit.thread:                                ; preds = %11
  %17 = icmp sgt i32 %3, -1
  %18 = icmp eq i32 %4, 0
  %or.cond = and i1 %17, %18
  br i1 %or.cond, label %20, label %19

; <label>:19                                      ; preds = %a_cas.exit.thread
  tail call void @__wake(i32* %1, i32 1, i32 0) nounwind optsize
  br label %20

; <label>:20                                      ; preds = %19, %a_cas.exit.thread, %6
  %.0 = phi i32 [ -1, %6 ], [ 0, %a_cas.exit.thread ], [ 0, %19 ]
  ret i32 %.0
}

define i32 @sem_timedwait(%struct.sem_t.556* %sem, %struct.timespec* %at) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sem_t.556* %sem, i64 0, i32 0, i64 0
  %2 = getelementptr inbounds %struct.sem_t.556* %sem, i64 0, i32 0, i64 1
  %3 = bitcast i32* %2 to i8*
  br label %4

; <label>:4                                       ; preds = %a_dec.exit, %0
  %5 = tail call i32 @sem_trywait(%struct.sem_t.556* %sem) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.loopexit, label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %12, %4
  %7 = load volatile i32* %2, align 4, !tbaa !6
  %8 = add nsw i32 %7, 1
  br label %9

; <label>:9                                       ; preds = %12, %a_cas.exit.i.i
  %10 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %7, i32 %8, i32* %2) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %a_inc.exit, label %12

; <label>:12                                      ; preds = %9
  %13 = load volatile i32* %2, align 4, !tbaa !6
  %14 = icmp eq i32 %13, %7
  br i1 %14, label %9, label %a_cas.exit.i.i

a_inc.exit:                                       ; preds = %17, %9
  %15 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 0, i32 -1, i32* %1) nounwind optsize
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %a_cas.exit, label %17

; <label>:17                                      ; preds = %a_inc.exit
  %18 = load volatile i32* %1, align 4, !tbaa !6
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %a_inc.exit, label %a_cas.exit

a_cas.exit:                                       ; preds = %17, %a_inc.exit
  %20 = tail call i32 @__timedwait(i32* %1, i32 -1, i32 0, %struct.timespec* %at, void (i8*)* @cleanup639, i8* %3, i32 0) nounwind optsize
  br label %a_cas.exit.i.i1

a_cas.exit.i.i1:                                  ; preds = %26, %a_cas.exit
  %21 = load volatile i32* %2, align 4, !tbaa !6
  %22 = add nsw i32 %21, -1
  br label %23

; <label>:23                                      ; preds = %26, %a_cas.exit.i.i1
  %24 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %21, i32 %22, i32* %2) nounwind optsize
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %a_dec.exit, label %26

; <label>:26                                      ; preds = %23
  %27 = load volatile i32* %2, align 4, !tbaa !6
  %28 = icmp eq i32 %27, %21
  br i1 %28, label %23, label %a_cas.exit.i.i1

a_dec.exit:                                       ; preds = %23
  %29 = icmp eq i32 %20, 0
  br i1 %29, label %4, label %30

; <label>:30                                      ; preds = %a_dec.exit
  %31 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 %20, i32* %31, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %30, %4
  %.0 = phi i32 [ -1, %30 ], [ 0, %4 ]
  ret i32 %.0
}

define internal void @cleanup639(i8* %p) nounwind uwtable optsize {
  %1 = bitcast i8* %p to i32*
  br label %a_cas.exit.i.i

a_cas.exit.i.i:                                   ; preds = %7, %0
  %2 = load volatile i32* %1, align 4, !tbaa !6
  %3 = add nsw i32 %2, -1
  br label %4

; <label>:4                                       ; preds = %7, %a_cas.exit.i.i
  %5 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %2, i32 %3, i32* %1) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %a_dec.exit, label %7

; <label>:7                                       ; preds = %4
  %8 = load volatile i32* %1, align 4, !tbaa !6
  %9 = icmp eq i32 %8, %2
  br i1 %9, label %4, label %a_cas.exit.i.i

a_dec.exit:                                       ; preds = %4
  ret void
}

define i32 @sem_trywait(%struct.sem_t.556* %sem) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sem_t.556* %sem, i64 0, i32 0, i64 0
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %a_cas.exit

; <label>:4                                       ; preds = %0
  %5 = icmp eq i32 %2, 1
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %4
  %7 = getelementptr inbounds %struct.sem_t.556* %sem, i64 0, i32 0, i64 1
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp ne i32 %8, 0
  br label %10

; <label>:10                                      ; preds = %6, %4
  %11 = phi i1 [ false, %4 ], [ %9, %6 ]
  %.neg = sext i1 %11 to i32
  %12 = add i32 %2, -1
  %13 = add i32 %12, %.neg
  br label %14

; <label>:14                                      ; preds = %17, %10
  %15 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %2, i32 %13, i32* %1) nounwind optsize
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %a_cas.exit.thread, label %17

; <label>:17                                      ; preds = %14
  %18 = load volatile i32* %1, align 4, !tbaa !6
  %19 = icmp eq i32 %18, %2
  br i1 %19, label %14, label %a_cas.exit

a_cas.exit:                                       ; preds = %17, %0
  %20 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 11, i32* %20, align 4, !tbaa !6
  br label %a_cas.exit.thread

a_cas.exit.thread:                                ; preds = %a_cas.exit, %14
  %.0 = phi i32 [ -1, %a_cas.exit ], [ 0, %14 ]
  ret i32 %.0
}

define i32 @sem_unlink(i8* %name) nounwind uwtable optsize {
  %1 = tail call i32 @shm_unlink(i8* %name) nounwind optsize
  ret i32 %1
}

define i32 @sem_wait(%struct.sem_t.556* %sem) nounwind uwtable optsize {
  %1 = tail call i32 @sem_timedwait(%struct.sem_t.556* %sem, %struct.timespec* null) nounwind optsize
  ret i32 %1
}

define i64 @sendfile(i32 %out_fd, i32 %in_fd, i64* %ofs, i64 %count) nounwind uwtable optsize {
  %1 = sext i32 %out_fd to i64
  %2 = sext i32 %in_fd to i64
  %3 = ptrtoint i64* %ofs to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 187, i64 %1, i64 %2, i64 %3, i64 %count, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  ret i64 %5
}

define i64 @sendmsg(i32 %fd, %struct.msghdr.561* %msg, i32 %flags) nounwind uwtable optsize {
  %h = alloca %struct.msghdr.561, align 8
  %1 = icmp eq %struct.msghdr.561* %msg, null
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = bitcast %struct.msghdr.561* %h to i8*
  %4 = bitcast %struct.msghdr.561* %msg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 56, i32 8, i1 false)
  %5 = getelementptr inbounds %struct.msghdr.561* %h, i64 0, i32 7
  store i32 0, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds %struct.msghdr.561* %h, i64 0, i32 4
  store i32 0, i32* %6, align 4, !tbaa !6
  %phitmp = ptrtoint %struct.msghdr.561* %h to i64
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i64 [ %phitmp, %2 ], [ 0, %0 ]
  %8 = sext i32 %fd to i64
  %9 = sext i32 %flags to i64
  %10 = call i64 @__syscall_cp(i64 296, i64 %8, i64 %.0, i64 %9, i64 0, i64 0, i64 0) nounwind optsize
  %11 = call i64 @__syscall_ret(i64 %10) nounwind optsize
  ret i64 %11
}

define i64 @send(i32 %fd, i8* %buf, i64 %len, i32 %flags) nounwind uwtable optsize {
  %1 = tail call i64 @sendto(i32 %fd, i8* %buf, i64 %len, i32 %flags, %struct.sockaddr.24* null, i32 0) nounwind optsize
  ret i64 %1
}

define i64 @sendto(i32 %fd, i8* %buf, i64 %len, i32 %flags, %struct.sockaddr.24* %addr, i32 %alen) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = sext i32 %flags to i64
  %4 = ptrtoint %struct.sockaddr.24* %addr to i64
  %5 = zext i32 %alen to i64
  %6 = tail call i64 @__syscall_cp(i64 290, i64 %1, i64 %2, i64 %len, i64 %3, i64 %4, i64 %5) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  ret i64 %7
}

define void @endservent() nounwind uwtable readnone optsize {
  ret void
}

define void @setservent(i32 %stayopen) nounwind uwtable readnone optsize {
  ret void
}

define noalias %struct.servent.565* @getservent() nounwind uwtable readnone optsize {
  ret %struct.servent.565* null
}

define void @setbuffer(%struct.__FILE_s.566* %f, i8* %buf, i64 %size) nounwind uwtable optsize {
  %1 = icmp ne i8* %buf, null
  %2 = select i1 %1, i32 0, i32 2
  %3 = tail call i32 @setvbuf(%struct.__FILE_s.566* %f, i8* %buf, i32 %2, i64 %size) nounwind optsize
  ret void
}

define void @setbuf(%struct.__FILE_s.566* %f, i8* %buf) nounwind uwtable optsize {
  %1 = icmp ne i8* %buf, null
  %2 = select i1 %1, i32 0, i32 2
  %3 = tail call i32 @setvbuf(%struct.__FILE_s.566* %f, i8* %buf, i32 %2, i64 1024) nounwind optsize
  ret void
}

define i32 @setegid(i32 %egid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 210, i32 -1, i32 %egid, i32 -1) nounwind optsize
  ret i32 %1
}

define i32 @setenv(i8* %var, i8* %value, i32 %overwrite) nounwind uwtable optsize {
  %1 = icmp eq i8* %var, null
  br i1 %1, label %8, label %2

; <label>:2                                       ; preds = %0
  %3 = load i8* %var, align 1, !tbaa !0
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

; <label>:5                                       ; preds = %2
  %6 = tail call i8* @strchr(i8* %var, i32 61) nounwind optsize
  %7 = icmp eq i8* %6, null
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %5, %2, %0
  %9 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %9, align 4, !tbaa !6
  br label %37

; <label>:10                                      ; preds = %5
  %11 = icmp eq i32 %overwrite, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %10
  %13 = tail call i8* @getenv(i8* %var) nounwind optsize
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %37

; <label>:15                                      ; preds = %12, %10
  %16 = tail call i64 @strlen(i8* %var) nounwind optsize
  %17 = trunc i64 %16 to i32
  %18 = tail call i64 @strlen(i8* %value) nounwind optsize
  %19 = trunc i64 %18 to i32
  %20 = add nsw i32 %19, %17
  %21 = add nsw i32 %20, 2
  %22 = sext i32 %21 to i64
  %23 = tail call i8* @malloc(i64 %22) optsize
  %24 = sext i32 %17 to i64
  %25 = tail call i8* @memcpy(i8* %23, i8* %var, i64 %24) nounwind optsize
  %26 = getelementptr inbounds i8* %23, i64 %24
  store i8 61, i8* %26, align 1, !tbaa !0
  %.sum = add i64 %24, 1
  %27 = getelementptr inbounds i8* %23, i64 %.sum
  %28 = sext i32 %19 to i64
  %29 = tail call i8* @memcpy(i8* %27, i8* %value, i64 %28) nounwind optsize
  %30 = add nsw i32 %20, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8* %23, i64 %31
  store i8 0, i8* %32, align 1, !tbaa !0
  %33 = tail call i32 @__putenv(i8* %23, i32 1) nounwind optsize
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35

; <label>:35                                      ; preds = %15
  tail call void @free(i8* %23) optsize
  %36 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %36, align 4, !tbaa !6
  br label %37

; <label>:37                                      ; preds = %35, %15, %12, %8
  %.0 = phi i32 [ -1, %8 ], [ -1, %35 ], [ 0, %12 ], [ 0, %15 ]
  ret i32 %.0
}

define i32 @seteuid(i32 %euid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 208, i32 -1, i32 %euid, i32 -1) nounwind optsize
  ret i32 %1
}

define i32 @setfsgid(i32 %gid) nounwind uwtable optsize {
  %1 = zext i32 %gid to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 216, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @setfsuid(i32 %uid) nounwind uwtable optsize {
  %1 = zext i32 %uid to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 215, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @setgid(i32 %gid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 214, i32 %gid, i32 0, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @setgroups(i64 %count, i32* %list) nounwind uwtable optsize {
  %1 = ptrtoint i32* %list to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 206, i64 %count, i64 %1, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @sethostname(i8* %name, i64 %len) nounwind uwtable optsize {
  %1 = ptrtoint i8* %name to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 74, i64 %1, i64 %len, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @setitimer(i32 %which, %struct.itimerval.568* %new, %struct.itimerval.568* %old) nounwind uwtable optsize {
  %1 = sext i32 %which to i64
  %2 = ptrtoint %struct.itimerval.568* %new to i64
  %3 = ptrtoint %struct.itimerval.568* %old to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 104, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define void @setlinebuf(%struct.__FILE_s.566* %f) nounwind uwtable optsize {
  %1 = tail call i32 @setvbuf(%struct.__FILE_s.566* %f, i8* null, i32 1, i64 0) nounwind optsize
  ret void
}

define i8* @setlocale(i32 %category, i8* nocapture %locale) nounwind uwtable readnone optsize {
  ret i8* getelementptr inbounds ([8 x i8]* @.str652, i64 0, i64 0)
}

define i32 @setpgid(i32 %pid, i32 %pgid) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = sext i32 %pgid to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 57, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @setpgrp() nounwind uwtable optsize {
  %1 = tail call i32 @setpgid(i32 0, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @setpriority(i32 %which, i32 %who, i32 %prio) nounwind uwtable optsize {
  %1 = sext i32 %which to i64
  %2 = sext i32 %who to i64
  %3 = sext i32 %prio to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 96, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @setregid(i32 %rgid, i32 %egid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 204, i32 %rgid, i32 %egid, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @setresgid(i32 %rgid, i32 %egid, i32 %sgid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 210, i32 %rgid, i32 %egid, i32 %sgid) nounwind optsize
  ret i32 %1
}

define i32 @setresuid(i32 %ruid, i32 %euid, i32 %suid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 208, i32 %ruid, i32 %euid, i32 %suid) nounwind optsize
  ret i32 %1
}

define i32 @setreuid(i32 %ruid, i32 %euid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 203, i32 %ruid, i32 %euid, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @__setrlimit(i32 %resource, %struct.rlimit.571* %rlim) nounwind uwtable optsize {
  %k_rlim = alloca [2 x i64], align 16
  %1 = sext i32 %resource to i64
  %2 = ptrtoint %struct.rlimit.571* %rlim to i64
  %3 = call i64 (i64, ...)* @__syscall(i64 369, i64 0, i64 %1, i64 %2, i64 0, i32 0, i32 0) nounwind optsize
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i32 %4, -38
  br i1 %5, label %6, label %16

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.rlimit.571* %rlim, i64 0, i32 0
  %8 = load i64* %7, align 8, !tbaa !9
  %9 = getelementptr inbounds [2 x i64]* %k_rlim, i64 0, i64 0
  store i64 %8, i64* %9, align 16, !tbaa !5
  %10 = getelementptr inbounds %struct.rlimit.571* %rlim, i64 0, i32 1
  %11 = load i64* %10, align 8, !tbaa !9
  %12 = getelementptr inbounds [2 x i64]* %k_rlim, i64 0, i64 1
  store i64 %11, i64* %12, align 8, !tbaa !5
  %13 = ptrtoint [2 x i64]* %k_rlim to i64
  %14 = call i64 (i64, ...)* @__syscall(i64 75, i64 %1, i64 %13, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %15 = trunc i64 %14 to i32
  br label %16

; <label>:16                                      ; preds = %6, %0
  %.0 = phi i32 [ %15, %6 ], [ %4, %0 ]
  ret i32 %.0
}

define i32 @setrlimit(i32 %resource, %struct.rlimit.571* %rlim) nounwind uwtable optsize {
  %c = alloca %struct.ctx, align 8
  %1 = getelementptr inbounds %struct.ctx* %c, i64 0, i32 0
  store %struct.rlimit.571* %rlim, %struct.rlimit.571** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.ctx* %c, i64 0, i32 1
  store i32 %resource, i32* %2, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct.ctx* %c, i64 0, i32 2
  store i32 0, i32* %3, align 4, !tbaa !6
  %4 = bitcast %struct.ctx* %c to i8*
  call void @__synccall(void (i8*)* @do_setrlimit, i8* %4) nounwind optsize
  %5 = load i32* %3, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7                                       ; preds = %0
  %8 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %5, i32* %8, align 4, !tbaa !6
  br label %9

; <label>:9                                       ; preds = %7, %0
  %.0 = phi i32 [ -1, %7 ], [ 0, %0 ]
  ret i32 %.0
}

declare void @__synccall(void (i8*)*, i8*) optsize

define internal void @do_setrlimit(i8* nocapture %p) nounwind uwtable optsize {
  %1 = getelementptr inbounds i8* %p, i64 12
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %13

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %p, i64 8
  %7 = bitcast i8* %6 to i32*
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = bitcast i8* %p to %struct.rlimit.571**
  %10 = load %struct.rlimit.571** %9, align 8, !tbaa !7
  %11 = tail call i32 @__setrlimit(i32 %8, %struct.rlimit.571* %10) optsize
  %12 = sub nsw i32 0, %11
  store i32 %12, i32* %2, align 4, !tbaa !6
  br label %13

; <label>:13                                      ; preds = %5, %0
  ret void
}

define i32 @setsid() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 66, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i8* %optval, i32 %optlen) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = sext i32 %level to i64
  %3 = sext i32 %optname to i64
  %4 = ptrtoint i8* %optval to i64
  %5 = zext i32 %optlen to i64
  %6 = tail call i64 (i64, ...)* @__syscall(i64 294, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 0) nounwind optsize
  %7 = tail call i64 @__syscall_ret(i64 %6) nounwind optsize
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define i32 @__set_thread_area(i8* nocapture %p) nounwind uwtable readnone optsize {
  ret i32 -1
}

define i32 @settimeofday(%struct.timeval.572* %tv, i8* nocapture %tz) nounwind uwtable optsize {
  %1 = ptrtoint %struct.timeval.572* %tv to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 79, i64 %1, i64 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @setuid(i32 %uid) nounwind uwtable optsize {
  %1 = tail call i32 @__setxid(i32 213, i32 %uid, i32 0, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @setvbuf(%struct.__FILE_s.566* nocapture %f, i8* nocapture %buf, i32 %type, i64 %size) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.566* %f, i64 0, i32 20
  store i8 -1, i8* %1, align 1, !tbaa !0
  switch i32 %type, label %5 [
    i32 2, label %2
    i32 1, label %4
  ]

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.__FILE_s.566* %f, i64 0, i32 12
  store i64 0, i64* %3, align 8, !tbaa !5
  br label %5

; <label>:4                                       ; preds = %0
  store i8 10, i8* %1, align 1, !tbaa !0
  br label %5

; <label>:5                                       ; preds = %4, %2, %0
  %6 = getelementptr inbounds %struct.__FILE_s.566* %f, i64 0, i32 0
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = or i32 %7, 64
  store i32 %8, i32* %6, align 4, !tbaa !6
  ret i32 0
}

define i32 @__setxid(i32 %nr, i32 %id, i32 %eid, i32 %sid) nounwind uwtable optsize {
  %c = alloca %struct.ctx.577, align 4
  %1 = getelementptr inbounds %struct.ctx.577* %c, i64 0, i32 0
  store i32 %id, i32* %1, align 4, !tbaa !6
  %2 = getelementptr inbounds %struct.ctx.577* %c, i64 0, i32 1
  store i32 %eid, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds %struct.ctx.577* %c, i64 0, i32 2
  store i32 %sid, i32* %3, align 4, !tbaa !6
  %4 = getelementptr inbounds %struct.ctx.577* %c, i64 0, i32 3
  store i32 %nr, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds %struct.ctx.577* %c, i64 0, i32 4
  store i32 0, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds %struct.ctx.577* %c, i64 0, i32 5
  store i32 0, i32* %6, align 4, !tbaa !6
  switch i32 %nr, label %8 [
    i32 213, label %7
    i32 203, label %7
    i32 208, label %7
  ]

; <label>:7                                       ; preds = %0, %0, %0
  store i32 1, i32* %5, align 4, !tbaa !6
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = bitcast %struct.ctx.577* %c to i8*
  call void @__synccall(void (i8*)* @do_setxid, i8* %9) nounwind optsize
  %10 = load i32* %6, align 4, !tbaa !6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

; <label>:12                                      ; preds = %8
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %10, i32* %13, align 4, !tbaa !6
  br label %14

; <label>:14                                      ; preds = %12, %8
  %.0 = phi i32 [ -1, %12 ], [ 0, %8 ]
  ret i32 %.0
}

define internal void @do_setxid(i8* nocapture %p) nounwind uwtable optsize {
  %inf = alloca %struct.rlimit, align 8
  %old = alloca %struct.rlimit, align 8
  %1 = getelementptr inbounds i8* %p, i64 20
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %61

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %p, i64 16
  %7 = bitcast i8* %6 to i32*
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp eq i32 %8, 0
  %.pre = bitcast i8* %p to i32*
  br i1 %9, label %._crit_edge1, label %10

; <label>:10                                      ; preds = %5
  %11 = load i32* %.pre, align 4, !tbaa !6
  %12 = icmp sgt i32 %11, -1
  br i1 %12, label %13, label %._crit_edge1

; <label>:13                                      ; preds = %10
  %14 = call i32 @getuid() nounwind optsize
  %15 = icmp eq i32 %11, %14
  br i1 %15, label %._crit_edge1, label %16

; <label>:16                                      ; preds = %13
  %17 = bitcast %struct.rlimit* %inf to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* bitcast (%struct.rlimit* @do_setxid.inf to i8*), i64 16, i32 8, i1 false)
  %18 = call i32 @getrlimit(i32 6, %struct.rlimit* %old) nounwind optsize
  %19 = call i32 bitcast (i32 (i32, %struct.rlimit.571*)* @__setrlimit to i32 (i32, %struct.rlimit*)*)(i32 6, %struct.rlimit* %inf) nounwind optsize
  %20 = sub nsw i32 0, %19
  store i32 %20, i32* %2, align 4, !tbaa !6
  %21 = icmp eq i32 %19, 0
  br i1 %21, label %25, label %22

; <label>:22                                      ; preds = %16
  %23 = load volatile i32* getelementptr inbounds (%struct.__libc* @__libc, i64 0, i32 7), align 8, !tbaa !6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %61

; <label>:25                                      ; preds = %22, %16
  %26 = getelementptr inbounds i8* %p, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32* %27, align 4, !tbaa !6
  %29 = sext i32 %28 to i64
  %30 = load i32* %.pre, align 4, !tbaa !6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8* %p, i64 4
  %33 = bitcast i8* %32 to i32*
  %34 = load i32* %33, align 4, !tbaa !6
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8* %p, i64 8
  %37 = bitcast i8* %36 to i32*
  %38 = load i32* %37, align 4, !tbaa !6
  %39 = sext i32 %38 to i64
  %40 = call i64 (i64, ...)* @__syscall(i64 %29, i64 %31, i64 %35, i64 %39, i32 0, i32 0, i32 0) nounwind optsize
  %41 = sub nsw i64 0, %40
  %42 = trunc i64 %41 to i32
  store i32 %42, i32* %2, align 4, !tbaa !6
  %43 = call i32 bitcast (i32 (i32, %struct.rlimit.571*)* @__setrlimit to i32 (i32, %struct.rlimit*)*)(i32 6, %struct.rlimit* %old) nounwind optsize
  br label %61

._crit_edge1:                                     ; preds = %13, %10, %5
  %44 = getelementptr inbounds i8* %p, i64 12
  %45 = bitcast i8* %44 to i32*
  %46 = load i32* %45, align 4, !tbaa !6
  %47 = sext i32 %46 to i64
  %48 = load i32* %.pre, align 4, !tbaa !6
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8* %p, i64 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32* %51, align 4, !tbaa !6
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8* %p, i64 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32* %55, align 4, !tbaa !6
  %57 = sext i32 %56 to i64
  %58 = call i64 (i64, ...)* @__syscall(i64 %47, i64 %49, i64 %53, i64 %57, i32 0, i32 0, i32 0) nounwind optsize
  %59 = sub nsw i64 0, %58
  %60 = trunc i64 %59 to i32
  store i32 %60, i32* %2, align 4, !tbaa !6
  br label %61

; <label>:61                                      ; preds = %._crit_edge1, %25, %22, %0
  ret void
}

define i8* @shmat(i32 %id, i8* %addr, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %id to i64
  %2 = ptrtoint i8* %addr to i64
  %3 = sext i32 %flag to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 305, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = inttoptr i64 %5 to i8*
  ret i8* %6
}

define i32 @shmctl(i32 %id, i32 %cmd, %struct.shmid_ds* %buf) nounwind uwtable optsize {
  %1 = sext i32 %id to i64
  %2 = or i32 %cmd, 256
  %3 = sext i32 %2 to i64
  %4 = ptrtoint %struct.shmid_ds* %buf to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 308, i64 %1, i64 %3, i64 %4, i32 0, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @shmdt(i8* %addr) nounwind uwtable optsize {
  %1 = ptrtoint i8* %addr to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 306, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @shmget(i32 %key, i64 %size, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %key to i64
  %2 = sext i32 %flag to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 307, i64 %1, i64 %size, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @shm_open(i8* %name, i32 %flag, i32 %mode) nounwind uwtable optsize {
  %1 = load i8* %name, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 47
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.012 = phi i8* [ %3, %.lr.ph ], [ %name, %0 ]
  %3 = getelementptr inbounds i8* %.012, i64 1
  %4 = load i8* %3, align 1, !tbaa !0
  %5 = icmp eq i8 %4, 47
  br i1 %5, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %0
  %.01.lcssa = phi i8* [ %name, %0 ], [ %3, %.lr.ph ]
  %6 = tail call i8* @strchr(i8* %.01.lcssa, i32 47) nounwind optsize
  %7 = icmp eq i8* %6, null
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %._crit_edge
  %9 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %9, align 4, !tbaa !6
  br label %17

; <label>:10                                      ; preds = %._crit_edge
  %11 = tail call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([9 x i8]* @.str661, i64 0, i64 0), i32 65536) nounwind optsize
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %17, label %13

; <label>:13                                      ; preds = %10
  %14 = or i32 %flag, 657408
  %15 = tail call i32 (i32, i8*, i32, ...)* @openat(i32 %11, i8* %.01.lcssa, i32 %14, i32 %mode) nounwind optsize
  %16 = tail call i32 @close(i32 %11) nounwind optsize
  br label %17

; <label>:17                                      ; preds = %13, %10, %8
  %.0 = phi i32 [ -1, %8 ], [ %15, %13 ], [ -1, %10 ]
  ret i32 %.0
}

define i32 @shm_unlink(i8* %name) nounwind uwtable optsize {
  %1 = load i8* %name, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 47
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.012 = phi i8* [ %3, %.lr.ph ], [ %name, %0 ]
  %3 = getelementptr inbounds i8* %.012, i64 1
  %4 = load i8* %3, align 1, !tbaa !0
  %5 = icmp eq i8 %4, 47
  br i1 %5, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %0
  %.01.lcssa = phi i8* [ %name, %0 ], [ %3, %.lr.ph ]
  %6 = tail call i8* @strchr(i8* %.01.lcssa, i32 47) nounwind optsize
  %7 = icmp eq i8* %6, null
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %._crit_edge
  %9 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %9, align 4, !tbaa !6
  br label %16

; <label>:10                                      ; preds = %._crit_edge
  %11 = tail call i32 (i8*, i32, ...)* @open(i8* getelementptr inbounds ([9 x i8]* @.str664, i64 0, i64 0), i32 65536) nounwind optsize
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %10
  %14 = tail call i32 @unlinkat(i32 %11, i8* %.01.lcssa, i32 0) nounwind optsize
  %15 = tail call i32 @close(i32 %11) nounwind optsize
  br label %16

; <label>:16                                      ; preds = %13, %10, %8
  %.0 = phi i32 [ -1, %8 ], [ %14, %13 ], [ -1, %10 ]
  ret i32 %.0
}

define i32 @shutdown(i32 %fd, i32 %how) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = sext i32 %how to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 293, i64 %1, i64 %2, i64 0, i64 0, i64 0, i64 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define internal noalias %struct.__pthread.579* @dummy667() nounwind uwtable readnone {
  ret %struct.__pthread.579* null
}

define i32 @__libc_sigaction(i32 %sig, %struct.sigaction.585* %sa, %struct.sigaction.585* %old) nounwind uwtable optsize {
  %ksa = alloca %struct.anon.7, align 8
  %kold = alloca %struct.anon.7, align 8
  %1 = icmp eq %struct.sigaction.585* %sa, null
  br i1 %1, label %21, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.sigaction.585* %sa, i64 0, i32 0, i32 0
  %4 = load void (i32)** %3, align 8, !tbaa !7
  %5 = bitcast void (i32)* %4 to i8*
  %6 = getelementptr inbounds %struct.anon.7* %ksa, i64 0, i32 0
  store i8* %5, i8** %6, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.sigaction.585* %sa, i64 0, i32 2
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = or i32 %8, 67108864
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.anon.7* %ksa, i64 0, i32 1
  store i64 %10, i64* %11, align 8, !tbaa !5
  %12 = and i32 %8, 4
  %13 = icmp ne i32 %12, 0
  %14 = select i1 %13, void ()* bitcast (void (...)* @__restore_rt to void ()*), void ()* bitcast (void (...)* @__restore to void ()*)
  %15 = getelementptr inbounds %struct.anon.7* %ksa, i64 0, i32 2
  store void ()* %14, void ()** %15, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.anon.7* %ksa, i64 0, i32 3
  %17 = getelementptr inbounds %struct.sigaction.585* %sa, i64 0, i32 1
  %18 = bitcast %struct.sigset_t.587* %16 to i8*
  %19 = bitcast %struct.sigset_t.587* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 128, i32 8, i1 false)
  %20 = ptrtoint %struct.anon.7* %ksa to i64
  br label %21

; <label>:21                                      ; preds = %2, %0
  %pksa.0 = phi i64 [ %20, %2 ], [ 0, %0 ]
  %22 = icmp ne %struct.sigaction.585* %old, null
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %21
  %24 = ptrtoint %struct.anon.7* %kold to i64
  br label %25

; <label>:25                                      ; preds = %23, %21
  %pkold.0 = phi i64 [ %24, %23 ], [ 0, %21 ]
  %26 = call %struct.__pthread.579* @__pthread_self_def() nounwind optsize
  %27 = sext i32 %sig to i64
  %28 = call i64 (i64, ...)* @__syscall(i64 174, i64 %27, i64 %pksa.0, i64 %pkold.0, i64 8, i32 0, i32 0) nounwind optsize
  %29 = call i64 @__syscall_ret(i64 %28) nounwind optsize
  %.not = icmp ne i64 %29, 0
  %.not1 = xor i1 %22, true
  %brmerge = or i1 %.not, %.not1
  %.mux = sext i1 %.not to i32
  br i1 %brmerge, label %43, label %30

; <label>:30                                      ; preds = %25
  %31 = getelementptr inbounds %struct.anon.7* %kold, i64 0, i32 0
  %32 = load i8** %31, align 8, !tbaa !7
  %33 = bitcast i8* %32 to void (i32)*
  %34 = getelementptr inbounds %struct.sigaction.585* %old, i64 0, i32 0, i32 0
  store void (i32)* %33, void (i32)** %34, align 8, !tbaa !7
  %35 = getelementptr inbounds %struct.anon.7* %kold, i64 0, i32 1
  %36 = load i64* %35, align 8, !tbaa !5
  %37 = trunc i64 %36 to i32
  %38 = getelementptr inbounds %struct.sigaction.585* %old, i64 0, i32 2
  store i32 %37, i32* %38, align 4, !tbaa !6
  %39 = getelementptr inbounds %struct.sigaction.585* %old, i64 0, i32 1
  %40 = getelementptr inbounds %struct.anon.7* %kold, i64 0, i32 3
  %41 = bitcast %struct.sigset_t.587* %39 to i8*
  %42 = bitcast %struct.sigset_t.587* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 128, i32 8, i1 false)
  br label %43

; <label>:43                                      ; preds = %30, %25
  %.0 = phi i32 [ %.mux, %25 ], [ 0, %30 ]
  ret i32 %.0
}

declare void @__restore_rt(...) optsize

declare void @__restore(...) optsize

define i32 @__sigaction(i32 %sig, %struct.sigaction.585* %sa, %struct.sigaction.585* %old) nounwind uwtable optsize {
  %1 = add i32 %sig, -32
  %2 = icmp ult i32 %1, 3
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %4, align 4, !tbaa !6
  br label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i32 @__libc_sigaction(i32 %sig, %struct.sigaction.585* %sa, %struct.sigaction.585* %old) optsize
  br label %7

; <label>:7                                       ; preds = %5, %3
  %.0 = phi i32 [ -1, %3 ], [ %6, %5 ]
  ret i32 %.0
}

define i32 @sigaddset(%struct.sigset_t.588* nocapture %set, i32 %sig) nounwind uwtable optsize {
  %1 = add nsw i32 %sig, -1
  %2 = icmp ugt i32 %1, 1023
  %3 = add i32 %sig, -33
  %4 = icmp ult i32 %3, 3
  %or.cond = or i1 %2, %4
  br i1 %or.cond, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %17

; <label>:7                                       ; preds = %0
  %8 = zext i32 %1 to i64
  %9 = and i64 %8, 63
  %10 = shl i64 1, %9
  %11 = lshr i32 %1, 3
  %12 = zext i32 %11 to i64
  %13 = lshr i64 %12, 3
  %14 = getelementptr inbounds %struct.sigset_t.588* %set, i64 0, i32 0, i64 %13
  %15 = load i64* %14, align 8, !tbaa !5
  %16 = or i64 %15, %10
  store i64 %16, i64* %14, align 8, !tbaa !5
  br label %17

; <label>:17                                      ; preds = %7, %5
  %.0 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %.0
}

define i32 @sigaltstack(%struct.stack_t* %ss, %struct.stack_t* %old) nounwind uwtable optsize {
  %1 = icmp eq %struct.stack_t* %ss, null
  br i1 %1, label %15, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.stack_t* %ss, i64 0, i32 2
  %4 = load i64* %3, align 8, !tbaa !5
  %5 = icmp ult i64 %4, 2048
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %2
  %7 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %7, align 4, !tbaa !6
  br label %21

; <label>:8                                       ; preds = %2
  %9 = getelementptr inbounds %struct.stack_t* %ss, i64 0, i32 1
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = and i32 %10, -3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

; <label>:13                                      ; preds = %8
  %14 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %14, align 4, !tbaa !6
  br label %21

; <label>:15                                      ; preds = %8, %0
  %16 = ptrtoint %struct.stack_t* %ss to i64
  %17 = ptrtoint %struct.stack_t* %old to i64
  %18 = tail call i64 (i64, ...)* @__syscall(i64 186, i64 %16, i64 %17, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %19 = tail call i64 @__syscall_ret(i64 %18) nounwind optsize
  %20 = trunc i64 %19 to i32
  br label %21

; <label>:21                                      ; preds = %15, %13, %6
  %.0 = phi i32 [ -1, %6 ], [ -1, %13 ], [ %20, %15 ]
  ret i32 %.0
}

define i32 @sigdelset(%struct.sigset_t.589* nocapture %set, i32 %sig) nounwind uwtable optsize {
  %1 = add nsw i32 %sig, -1
  %2 = icmp ugt i32 %1, 1023
  %3 = add i32 %sig, -33
  %4 = icmp ult i32 %3, 3
  %or.cond = or i1 %2, %4
  br i1 %or.cond, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %18

; <label>:7                                       ; preds = %0
  %8 = zext i32 %1 to i64
  %9 = and i64 %8, 63
  %10 = shl i64 1, %9
  %11 = xor i64 %10, -1
  %12 = lshr i32 %1, 3
  %13 = zext i32 %12 to i64
  %14 = lshr i64 %13, 3
  %15 = getelementptr inbounds %struct.sigset_t.589* %set, i64 0, i32 0, i64 %14
  %16 = load i64* %15, align 8, !tbaa !5
  %17 = and i64 %16, %11
  store i64 %17, i64* %15, align 8, !tbaa !5
  br label %18

; <label>:18                                      ; preds = %7, %5
  %.0 = phi i32 [ -1, %5 ], [ 0, %7 ]
  ret i32 %.0
}

define i32 @sigemptyset(%struct.sigset_t.590* nocapture %set) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sigset_t.590* %set, i64 0, i32 0, i64 0
  store i64 0, i64* %1, align 8, !tbaa !5
  ret i32 0
}

define i32 @sigfillset(%struct.sigset_t.591* nocapture %set) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.sigset_t.591* %set, i64 0, i32 0, i64 0
  store i64 -15032385537, i64* %1, align 8, !tbaa !5
  ret i32 0
}

define i32 @sighold(i32 %sig) nounwind uwtable optsize {
  %mask = alloca %struct.sigset_t.590, align 8
  %1 = call i32 @sigemptyset(%struct.sigset_t.590* %mask) nounwind optsize
  %2 = call i32 bitcast (i32 (%struct.sigset_t.588*, i32)* @sigaddset to i32 (%struct.sigset_t.590*, i32)*)(%struct.sigset_t.590* %mask, i32 %sig) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 0, %struct.sigset_t.590* %mask, %struct.sigset_t.590* null) nounwind optsize
  br label %6

; <label>:6                                       ; preds = %4, %0
  %.0 = phi i32 [ %5, %4 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @sigignore(i32 %sig) nounwind uwtable optsize {
  %sa = alloca %struct.sigaction.593, align 8
  %1 = getelementptr inbounds %struct.sigaction.593* %sa, i64 0, i32 1
  %2 = call i32 @sigemptyset(%struct.sigset_t.590* %1) nounwind optsize
  %3 = getelementptr inbounds %struct.sigaction.593* %sa, i64 0, i32 0, i32 0
  store void (i32)* inttoptr (i64 1 to void (i32)*), void (i32)** %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.sigaction.593* %sa, i64 0, i32 2
  store i32 0, i32* %4, align 8, !tbaa !6
  %5 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.593*, %struct.sigaction.593*)*)(i32 %sig, %struct.sigaction.593* %sa, %struct.sigaction.593* null) nounwind optsize
  ret i32 %5
}

define i32 @siginterrupt(i32 %sig, i32 %flag) nounwind uwtable optsize {
  %sa = alloca %struct.sigaction.585, align 8
  %1 = call i32 @sigaction(i32 %sig, %struct.sigaction.585* null, %struct.sigaction.585* %sa) nounwind optsize
  %2 = icmp eq i32 %flag, 0
  %3 = getelementptr inbounds %struct.sigaction.585* %sa, i64 0, i32 2
  %4 = load i32* %3, align 8, !tbaa !6
  %5 = and i32 %4, -268435457
  %6 = or i32 %4, 268435456
  %storemerge = select i1 %2, i32 %6, i32 %5
  store i32 %storemerge, i32* %3, align 8
  %7 = call i32 @sigaction(i32 %sig, %struct.sigaction.585* %sa, %struct.sigaction.585* null) nounwind optsize
  ret i32 %7
}

define i32 @sigisemptyset(%struct.sigset_t.599* %set) nounwind uwtable optsize {
  %1 = bitcast %struct.sigset_t.599* %set to i8*
  %2 = tail call i32 @memcmp(i8* %1, i8* bitcast (%struct.sigset_t.599* @sigisemptyset.zeroset to i8*), i64 8) nounwind optsize
  %3 = icmp eq i32 %2, 0
  %4 = zext i1 %3 to i32
  ret i32 %4
}

define i32 @sigismember(%struct.sigset_t.335* nocapture %set, i32 %sig) nounwind uwtable optsize {
  %1 = add nsw i32 %sig, -1
  %2 = icmp ugt i32 %1, 1023
  %3 = add i32 %sig, -33
  %4 = icmp ult i32 %3, 3
  %or.cond = or i1 %2, %4
  br i1 %or.cond, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %6, align 4, !tbaa !6
  br label %19

; <label>:7                                       ; preds = %0
  %8 = zext i32 %1 to i64
  %9 = lshr i32 %1, 3
  %10 = zext i32 %9 to i64
  %11 = lshr i64 %10, 3
  %12 = getelementptr inbounds %struct.sigset_t.335* %set, i64 0, i32 0, i64 %11
  %13 = load i64* %12, align 8, !tbaa !5
  %14 = and i64 %8, 63
  %15 = shl i64 1, %14
  %16 = and i64 %13, %15
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i32
  br label %19

; <label>:19                                      ; preds = %7, %5
  %.0 = phi i32 [ -1, %5 ], [ %18, %7 ]
  ret i32 %.0
}

define void @siglongjmp(i64* %buf, i32 %ret) nounwind uwtable optsize {
  %1 = getelementptr inbounds i64* %buf, i64 8
  %2 = load i64* %1, align 8, !tbaa !5
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i64* %buf, i64 9
  %6 = bitcast i64* %5 to %struct.sigset_t.335*
  %7 = tail call i32 @sigprocmask(i32 2, %struct.sigset_t.335* %6, %struct.sigset_t.335* null) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %4, %0
  tail call void @longjmp(i64* %buf, i32 %ret) nounwind optsize
  ret void
}

declare void @longjmp(i64*, i32) optsize

define i32 @signalfd(i32 %fd, %struct.sigset_t.602* %sigs, i32 %flags) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.sigset_t.602* %sigs to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 349, i64 %1, i64 %2, i64 8, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define void (i32)* @signal(i32 %sig, void (i32)* %func) nounwind uwtable optsize {
  %sa = alloca %struct.sigaction.585, align 8
  %1 = bitcast %struct.sigaction.585* %sa to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 152, i32 8, i1 false)
  %2 = getelementptr inbounds %struct.sigaction.585* %sa, i64 0, i32 0, i32 0
  store void (i32)* %func, void (i32)** %2, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.sigaction.585* %sa, i64 0, i32 2
  store i32 268435456, i32* %3, align 8, !tbaa !6
  %4 = call i32 @__sigaction(i32 %sig, %struct.sigaction.585* %sa, %struct.sigaction.585* %sa) nounwind optsize
  %5 = icmp slt i32 %4, 0
  %6 = load void (i32)** %2, align 8, !tbaa !7
  %.0 = select i1 %5, void (i32)* inttoptr (i64 -1 to void (i32)*), void (i32)* %6
  ret void (i32)* %.0
}

define i32 @__signbitf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 31
  ret i32 %2
}

define i32 @__signbitl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 79
  %3 = trunc i80 %2 to i32
  ret i32 %3
}

define i32 @__signbit(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 63
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @sigpause(i32 %sig) nounwind uwtable optsize {
  %mask = alloca %struct.sigset_t.335, align 8
  %1 = call i32 @sigprocmask(i32 0, %struct.sigset_t.335* null, %struct.sigset_t.335* %mask) nounwind optsize
  %2 = call i32 bitcast (i32 (%struct.sigset_t.589*, i32)* @sigdelset to i32 (%struct.sigset_t.335*, i32)*)(%struct.sigset_t.335* %mask, i32 %sig) nounwind optsize
  %3 = call i32 @sigsuspend(%struct.sigset_t.335* %mask) nounwind optsize
  ret i32 %3
}

define i32 @sigpending(%struct.sigset_t.607* %set) nounwind uwtable optsize {
  %1 = ptrtoint %struct.sigset_t.607* %set to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 176, i64 %1, i64 8, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @sigprocmask(i32 %how, %struct.sigset_t.335* %set, %struct.sigset_t.335* %old) nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (i32, %struct.sigset_t.502*, %struct.sigset_t.502*)* @pthread_sigmask to i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)*)(i32 %how, %struct.sigset_t.335* %set, %struct.sigset_t.335* %old) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 %1, i32* %4, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %3, %0
  %.0 = phi i32 [ -1, %3 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @sigqueue(i32 %pid, i32 %sig, i8* %value.coerce) nounwind uwtable optsize {
  %si = alloca %struct.__siginfo.609, align 8
  %set = alloca %struct.sigset_t.502, align 8
  %1 = alloca [1 x i64], align 8
  %2 = bitcast %struct.__siginfo.609* %si to i8*
  %3 = call i8* @memset(i8* %2, i32 0, i64 136) nounwind optsize
  %4 = getelementptr inbounds %struct.__siginfo.609* %si, i64 0, i32 0
  store i32 %sig, i32* %4, align 8, !tbaa !6
  %5 = getelementptr inbounds %struct.__siginfo.609* %si, i64 0, i32 2
  store i32 -1, i32* %5, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.__siginfo.609* %si, i64 0, i32 3, i32 0, i32 2
  %.0 = bitcast i32* %6 to i8**
  store i8* %value.coerce, i8** %.0, align 8
  %7 = call i32 @getuid() nounwind optsize
  %8 = getelementptr inbounds %struct.__siginfo.609* %si, i64 0, i32 3, i32 0, i32 1
  store i32 %7, i32* %8, align 4, !tbaa !6
  %9 = getelementptr inbounds [1 x i64]* %1, i64 0, i64 0
  store i64 -1, i64* %9, align 8, !tbaa !5
  %10 = bitcast [1 x i64]* %1 to %struct.sigset_t.502*
  %11 = call i32 @pthread_sigmask(i32 0, %struct.sigset_t.502* %10, %struct.sigset_t.502* %set) nounwind optsize
  %12 = call i32 @getpid() nounwind optsize
  %13 = getelementptr inbounds %struct.__siginfo.609* %si, i64 0, i32 3, i32 0, i32 0
  store i32 %12, i32* %13, align 8, !tbaa !6
  %14 = sext i32 %pid to i64
  %15 = sext i32 %sig to i64
  %16 = ptrtoint %struct.__siginfo.609* %si to i64
  %17 = call i64 (i64, ...)* @__syscall(i64 178, i64 %14, i64 %15, i64 %16, i32 0, i32 0, i32 0) nounwind optsize
  %18 = call i64 @__syscall_ret(i64 %17) nounwind optsize
  %19 = trunc i64 %18 to i32
  %20 = call i32 @pthread_sigmask(i32 2, %struct.sigset_t.502* %set, %struct.sigset_t.502* null) nounwind optsize
  ret i32 %19
}

define i32 @sigrelse(i32 %sig) nounwind uwtable optsize {
  %mask = alloca %struct.sigset_t.590, align 8
  %1 = call i32 @sigemptyset(%struct.sigset_t.590* %mask) nounwind optsize
  %2 = call i32 bitcast (i32 (%struct.sigset_t.588*, i32)* @sigaddset to i32 (%struct.sigset_t.590*, i32)*)(%struct.sigset_t.590* %mask, i32 %sig) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 1, %struct.sigset_t.590* %mask, %struct.sigset_t.590* null) nounwind optsize
  br label %6

; <label>:6                                       ; preds = %4, %0
  %.0 = phi i32 [ %5, %4 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @__libc_current_sigrtmax() nounwind uwtable readnone optsize {
  ret i32 64
}

define i32 @__libc_current_sigrtmin() nounwind uwtable readnone optsize {
  ret i32 35
}

define i32 @sigsetjmp(i64* %buf, i32 %save) nounwind uwtable optsize {
  %1 = getelementptr inbounds i64* %buf, i64 9
  %2 = sext i32 %save to i64
  store i64 %2, i64* %1, align 8, !tbaa !5
  %3 = icmp eq i32 %save, 0
  br i1 %3, label %8, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i64* %buf, i64 10
  %6 = bitcast i64* %5 to %struct.sigset_t.335*
  %7 = call i32 @sigprocmask(i32 2, %struct.sigset_t.335* null, %struct.sigset_t.335* %6) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %4, %0
  %9 = call i32 @setjmp(i64* %buf) nounwind optsize
  ret i32 %9
}

declare i32 @setjmp(i64*) optsize

define void (i32)* @sigset(i32 %sig, void (i32)* %handler) nounwind uwtable optsize {
  %sa = alloca %struct.sigaction.615, align 8
  %sa_old = alloca %struct.sigaction.615, align 8
  %mask = alloca %struct.sigset_t.590, align 8
  %1 = call i32 @sigemptyset(%struct.sigset_t.590* %mask) nounwind optsize
  %2 = call i32 bitcast (i32 (%struct.sigset_t.588*, i32)* @sigaddset to i32 (%struct.sigset_t.590*, i32)*)(%struct.sigset_t.590* %mask, i32 %sig) nounwind optsize
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %28, label %4

; <label>:4                                       ; preds = %0
  %5 = icmp eq void (i32)* %handler, inttoptr (i64 2 to void (i32)*)
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.615*, %struct.sigaction.615*)*)(i32 %sig, %struct.sigaction.615* null, %struct.sigaction.615* %sa_old) nounwind optsize
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %28, label %9

; <label>:9                                       ; preds = %6
  %10 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 0, %struct.sigset_t.590* %mask, %struct.sigset_t.590* %mask) nounwind optsize
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %28, label %22

; <label>:12                                      ; preds = %4
  %13 = getelementptr inbounds %struct.sigaction.615* %sa, i64 0, i32 0, i32 0
  store void (i32)* %handler, void (i32)** %13, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.sigaction.615* %sa, i64 0, i32 2
  store i32 0, i32* %14, align 8, !tbaa !6
  %15 = getelementptr inbounds %struct.sigaction.615* %sa, i64 0, i32 1
  %16 = call i32 @sigemptyset(%struct.sigset_t.590* %15) nounwind optsize
  %17 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.615*, %struct.sigaction.615*)*)(i32 %sig, %struct.sigaction.615* %sa, %struct.sigaction.615* %sa_old) nounwind optsize
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %28, label %19

; <label>:19                                      ; preds = %12
  %20 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 1, %struct.sigset_t.590* %mask, %struct.sigset_t.590* %mask) nounwind optsize
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %28, label %22

; <label>:22                                      ; preds = %19, %9
  %23 = call i32 bitcast (i32 (%struct.sigset_t.335*, i32)* @sigismember to i32 (%struct.sigset_t.590*, i32)*)(%struct.sigset_t.590* %mask, i32 %sig) nounwind optsize
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %22
  %26 = getelementptr inbounds %struct.sigaction.615* %sa_old, i64 0, i32 0, i32 0
  %27 = load void (i32)** %26, align 8, !tbaa !7
  br label %28

; <label>:28                                      ; preds = %25, %22, %19, %12, %9, %6, %0
  %.0 = phi void (i32)* [ inttoptr (i64 -1 to void (i32)*), %0 ], [ inttoptr (i64 -1 to void (i32)*), %6 ], [ inttoptr (i64 -1 to void (i32)*), %9 ], [ inttoptr (i64 -1 to void (i32)*), %12 ], [ inttoptr (i64 -1 to void (i32)*), %19 ], [ %27, %25 ], [ inttoptr (i64 2 to void (i32)*), %22 ]
  ret void (i32)* %.0
}

define i32 @sigsuspend(%struct.sigset_t.335* %mask) nounwind uwtable optsize {
  %1 = ptrtoint %struct.sigset_t.335* %mask to i64
  %2 = tail call i64 @__syscall_cp(i64 179, i64 %1, i64 8, i64 0, i64 0, i64 0, i64 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @sigtimedwait(%struct.sigset_t.619* %mask, %struct.__siginfo.620* %si, %struct.timespec.623* %timeout) nounwind uwtable optsize {
  %1 = ptrtoint %struct.sigset_t.619* %mask to i64
  %2 = ptrtoint %struct.__siginfo.620* %si to i64
  %3 = ptrtoint %struct.timespec.623* %timeout to i64
  br label %4

; <label>:4                                       ; preds = %9, %0
  %5 = tail call i64 @__syscall_cp(i64 177, i64 %1, i64 %2, i64 %3, i64 8, i64 0, i64 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %.critedge

; <label>:9                                       ; preds = %4
  %10 = tail call i32* @__errno_location() nounwind readnone optsize
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = icmp eq i32 %11, 4
  br i1 %12, label %4, label %.critedge

.critedge:                                        ; preds = %9, %4
  ret i32 %7
}

define i32 @sigwaitinfo(%struct.sigset_t.619* %mask, %struct.__siginfo.620* %si) nounwind uwtable optsize {
  %1 = tail call i32 @sigtimedwait(%struct.sigset_t.619* %mask, %struct.__siginfo.620* %si, %struct.timespec.623* null) nounwind optsize
  ret i32 %1
}

define i32 @sigwait(%struct.sigset_t.619* %mask, i32* nocapture %sig) nounwind uwtable optsize {
  %si = alloca %struct.__siginfo.620, align 8
  %1 = call i32 @sigtimedwait(%struct.sigset_t.619* %mask, %struct.__siginfo.620* %si, %struct.timespec.623* null) nounwind optsize
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.__siginfo.620* %si, i64 0, i32 0
  %5 = load i32* %4, align 8, !tbaa !6
  store i32 %5, i32* %sig, align 4, !tbaa !6
  br label %6

; <label>:6                                       ; preds = %3, %0
  %.0 = phi i32 [ 0, %3 ], [ -1, %0 ]
  ret i32 %.0
}

define void @sincosf(float %x, float* nocapture %sin, float* nocapture %cos) nounwind uwtable optsize {
  %y = alloca double, align 8
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ult i32 %2, 1061752795
  br i1 %3, label %4, label %14

; <label>:4                                       ; preds = %0
  %5 = icmp ult i32 %2, 964689920
  br i1 %5, label %6, label %10

; <label>:6                                       ; preds = %4
  %7 = fptosi float %x to i32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %88

; <label>:9                                       ; preds = %6
  store float %x, float* %sin, align 4, !tbaa !2
  store float 1.000000e+00, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:10                                      ; preds = %4
  %11 = fpext float %x to double
  %12 = call float @__sindf(double %11) nounwind optsize
  store float %12, float* %sin, align 4, !tbaa !2
  %13 = call float @__cosdf(double %11) nounwind optsize
  store float %13, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:14                                      ; preds = %0
  %15 = icmp ult i32 %2, 1081824210
  br i1 %15, label %16, label %42

; <label>:16                                      ; preds = %14
  %17 = icmp ult i32 %2, 1075235812
  %18 = icmp sgt i32 %1, -1
  %19 = fpext float %x to double
  br i1 %17, label %20, label %31

; <label>:20                                      ; preds = %16
  br i1 %18, label %21, label %26

; <label>:21                                      ; preds = %20
  %22 = fadd double %19, 0xBFF921FB54442D18
  %23 = call float @__cosdf(double %22) nounwind optsize
  store float %23, float* %sin, align 4, !tbaa !2
  %24 = fsub double 0x3FF921FB54442D18, %19
  %25 = call float @__sindf(double %24) nounwind optsize
  store float %25, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:26                                      ; preds = %20
  %27 = fadd double %19, 0x3FF921FB54442D18
  %28 = call float @__cosdf(double %27) nounwind optsize
  %29 = fsub float -0.000000e+00, %28
  store float %29, float* %sin, align 4, !tbaa !2
  %30 = call float @__sindf(double %27) nounwind optsize
  store float %30, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:31                                      ; preds = %16
  %. = select i1 %18, double 0x400921FB54442D18, double 0xC00921FB54442D18
  %32 = fsub double %., %19
  %33 = call float @__sindf(double %32) nounwind optsize
  store float %33, float* %sin, align 4, !tbaa !2
  br i1 %18, label %34, label %36

; <label>:34                                      ; preds = %31
  %35 = fadd double %19, 0xC00921FB54442D18
  br label %38

; <label>:36                                      ; preds = %31
  %37 = fadd double %19, 0x400921FB54442D18
  br label %38

; <label>:38                                      ; preds = %36, %34
  %39 = phi double [ %35, %34 ], [ %37, %36 ]
  %40 = call float @__cosdf(double %39) nounwind optsize
  %41 = fsub float -0.000000e+00, %40
  store float %41, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:42                                      ; preds = %14
  %43 = icmp ult i32 %2, 1088565718
  br i1 %43, label %44, label %69

; <label>:44                                      ; preds = %42
  %45 = icmp ult i32 %2, 1085271520
  %46 = icmp sgt i32 %1, -1
  %47 = fpext float %x to double
  br i1 %45, label %48, label %59

; <label>:48                                      ; preds = %44
  br i1 %46, label %49, label %54

; <label>:49                                      ; preds = %48
  %50 = fadd double %47, 0xC012D97C7F3321D2
  %51 = call float @__cosdf(double %50) nounwind optsize
  %52 = fsub float -0.000000e+00, %51
  store float %52, float* %sin, align 4, !tbaa !2
  %53 = call float @__sindf(double %50) nounwind optsize
  store float %53, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:54                                      ; preds = %48
  %55 = fadd double %47, 0x4012D97C7F3321D2
  %56 = call float @__cosdf(double %55) nounwind optsize
  store float %56, float* %sin, align 4, !tbaa !2
  %57 = fsub double 0xC012D97C7F3321D2, %47
  %58 = call float @__sindf(double %57) nounwind optsize
  store float %58, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:59                                      ; preds = %44
  br i1 %46, label %60, label %63

; <label>:60                                      ; preds = %59
  %61 = fadd double %47, 0xC01921FB54442D18
  %62 = call float @__sindf(double %61) nounwind optsize
  br label %66

; <label>:63                                      ; preds = %59
  %64 = fadd double %47, 0x401921FB54442D18
  %65 = call float @__sindf(double %64) nounwind optsize
  br label %66

; <label>:66                                      ; preds = %63, %60
  %storemerge = phi float [ %65, %63 ], [ %62, %60 ]
  %67 = phi double [ %64, %63 ], [ %61, %60 ]
  store float %storemerge, float* %sin, align 4
  %68 = call float @__cosdf(double %67) nounwind optsize
  store float %68, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:69                                      ; preds = %42
  %70 = icmp ugt i32 %2, 2139095039
  br i1 %70, label %71, label %73

; <label>:71                                      ; preds = %69
  %72 = fsub float %x, %x
  store float %72, float* %cos, align 4, !tbaa !2
  store float %72, float* %sin, align 4, !tbaa !2
  br label %88

; <label>:73                                      ; preds = %69
  %74 = call i32 @__rem_pio2f(float %x, double* %y) nounwind optsize
  %75 = load double* %y, align 8, !tbaa !3
  %76 = call float @__sindf(double %75) nounwind optsize
  %77 = load double* %y, align 8, !tbaa !3
  %78 = call float @__cosdf(double %77) nounwind optsize
  %79 = and i32 %74, 3
  switch i32 %79, label %86 [
    i32 0, label %80
    i32 1, label %81
    i32 2, label %83
  ]

; <label>:80                                      ; preds = %73
  store float %76, float* %sin, align 4, !tbaa !2
  store float %78, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:81                                      ; preds = %73
  store float %78, float* %sin, align 4, !tbaa !2
  %82 = fsub float -0.000000e+00, %76
  store float %82, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:83                                      ; preds = %73
  %84 = fsub float -0.000000e+00, %76
  store float %84, float* %sin, align 4, !tbaa !2
  %85 = fsub float -0.000000e+00, %78
  store float %85, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:86                                      ; preds = %73
  %87 = fsub float -0.000000e+00, %78
  store float %87, float* %sin, align 4, !tbaa !2
  store float %76, float* %cos, align 4, !tbaa !2
  br label %88

; <label>:88                                      ; preds = %86, %83, %81, %80, %71, %66, %54, %49, %38, %26, %21, %10, %9, %6
  ret void
}

define void @sincosl(x86_fp80 %x, x86_fp80* nocapture %sin, x86_fp80* nocapture %cos) nounwind uwtable optsize {
  %tx.i = alloca [3 x double], align 16
  %ty.i = alloca [2 x double], align 16
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  switch i32 %4, label %8 [
    i32 0, label %5
    i32 32767, label %6
  ]

; <label>:5                                       ; preds = %0
  store x86_fp80 %x, x86_fp80* %sin, align 16, !tbaa !4
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %cos, align 16, !tbaa !4
  br label %135

; <label>:6                                       ; preds = %0
  %7 = fsub x86_fp80 %x, %x
  store x86_fp80 %7, x86_fp80* %cos, align 16, !tbaa !4
  store x86_fp80 %7, x86_fp80* %sin, align 16, !tbaa !4
  br label %135

; <label>:8                                       ; preds = %0
  %ins = and i80 %1, 604462909807314587353087
  %9 = bitcast i80 %ins to x86_fp80
  %10 = fcmp olt x86_fp80 %9, 0xK3FFEC90FDAA22168C000
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %8
  %12 = call x86_fp80 @__sinl(x86_fp80 %x, x86_fp80 0xK00000000000000000000, i32 0) nounwind optsize
  store x86_fp80 %12, x86_fp80* %sin, align 16, !tbaa !4
  %13 = call x86_fp80 @__cosl(x86_fp80 %x, x86_fp80 0xK00000000000000000000) nounwind optsize
  store x86_fp80 %13, x86_fp80* %cos, align 16, !tbaa !4
  br label %135

; <label>:14                                      ; preds = %8
  %15 = bitcast [3 x double]* %tx.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %15) nounwind
  %16 = bitcast [2 x double]* %ty.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %16) nounwind
  %17 = lshr i80 %1, 48
  %.tr.i = trunc i80 %17 to i32
  %sext.i = ashr i32 %.tr.i, 16
  %18 = and i32 %sext.i, 32767
  %19 = icmp ult i32 %18, 16408
  br i1 %19, label %25, label %20

; <label>:20                                      ; preds = %14
  switch i32 %18, label %88 [
    i32 16408, label %21
    i32 32767, label %86
  ]

; <label>:21                                      ; preds = %20
  %22 = lshr i80 %1, 32
  %23 = trunc i80 %22 to i32
  %24 = icmp ult i32 %23, -921707870
  br i1 %24, label %25, label %88

; <label>:25                                      ; preds = %21, %14
  %26 = load volatile double* @invpio2hi680, align 8, !tbaa !3
  %27 = fpext double %26 to x86_fp80
  %28 = load volatile double* @invpio2lo681, align 8, !tbaa !3
  %29 = fpext double %28 to x86_fp80
  %30 = fadd x86_fp80 %27, %29
  %31 = fmul x86_fp80 %30, %x
  %32 = fadd x86_fp80 %31, 0xK403EC000000000000000
  %33 = fadd x86_fp80 %32, 0xKC03EC000000000000000
  %34 = fptosi x86_fp80 %33 to i32
  %35 = fmul x86_fp80 %33, 0xK3FFFC90FDAA222000000
  %36 = fsub x86_fp80 %x, %35
  %37 = load volatile double* @pio2_1thi682, align 8, !tbaa !3
  %38 = fpext double %37 to x86_fp80
  %39 = load volatile double* @pio2_1tlo683, align 8, !tbaa !3
  %40 = fpext double %39 to x86_fp80
  %41 = fadd x86_fp80 %38, %40
  %42 = fmul x86_fp80 %33, %41
  %43 = fsub x86_fp80 %36, %42
  %44 = bitcast x86_fp80 %43 to i80
  %45 = lshr i80 %44, 64
  %46 = trunc i80 %45 to i32
  %47 = and i32 %46, 32767
  %48 = sub nsw i32 %18, %47
  %49 = icmp sgt i32 %48, 22
  br i1 %49, label %50, label %82

; <label>:50                                      ; preds = %25
  %51 = fmul x86_fp80 %33, 0xKBFD7973DCB3B3A000000
  %52 = fsub x86_fp80 %36, %51
  %53 = load volatile double* @pio2_2thi684, align 8, !tbaa !3
  %54 = fpext double %53 to x86_fp80
  %55 = load volatile double* @pio2_2tlo685, align 8, !tbaa !3
  %56 = fpext double %55 to x86_fp80
  %57 = fadd x86_fp80 %54, %56
  %58 = fmul x86_fp80 %33, %57
  %59 = fsub x86_fp80 %36, %52
  %60 = fsub x86_fp80 %59, %51
  %61 = fsub x86_fp80 %58, %60
  %62 = fsub x86_fp80 %52, %61
  %63 = bitcast x86_fp80 %62 to i80
  %64 = lshr i80 %63, 64
  %65 = trunc i80 %64 to i32
  %66 = and i32 %65, 32767
  %67 = sub nsw i32 %18, %66
  %68 = icmp sgt i32 %67, 61
  br i1 %68, label %69, label %82

; <label>:69                                      ; preds = %50
  %70 = fmul x86_fp80 %33, 0xK3FAEC51701B83A000000
  %71 = fsub x86_fp80 %52, %70
  %72 = load volatile double* @pio2_3thi686, align 8, !tbaa !3
  %73 = fpext double %72 to x86_fp80
  %74 = load volatile double* @pio2_3tlo687, align 8, !tbaa !3
  %75 = fpext double %74 to x86_fp80
  %76 = fadd x86_fp80 %73, %75
  %77 = fmul x86_fp80 %33, %76
  %78 = fsub x86_fp80 %52, %71
  %79 = fsub x86_fp80 %78, %70
  %80 = fsub x86_fp80 %77, %79
  %81 = fsub x86_fp80 %71, %80
  br label %82

; <label>:82                                      ; preds = %69, %50, %25
  %83 = phi x86_fp80 [ %81, %69 ], [ %62, %50 ], [ %43, %25 ]
  %r.0.i = phi x86_fp80 [ %71, %69 ], [ %52, %50 ], [ %36, %25 ]
  %w.0.i = phi x86_fp80 [ %80, %69 ], [ %61, %50 ], [ %42, %25 ]
  %84 = fsub x86_fp80 %r.0.i, %83
  %85 = fsub x86_fp80 %84, %w.0.i
  br label %__rem_pio2l.exit

; <label>:86                                      ; preds = %20
  %87 = fsub x86_fp80 %x, %x
  br label %__rem_pio2l.exit

; <label>:88                                      ; preds = %21, %20
  %mask5.i = and i80 %1, 18446744073709551615
  %ins6.i = or i80 %mask5.i, 302637283273278903812096
  %89 = bitcast i80 %ins6.i to x86_fp80
  br label %90

; <label>:90                                      ; preds = %90, %88
  %indvars.iv16.i = phi i64 [ 0, %88 ], [ %indvars.iv.next17.i, %90 ]
  %z.015.i = phi x86_fp80 [ %89, %88 ], [ %96, %90 ]
  %91 = fptosi x86_fp80 %z.015.i to i32
  %92 = sitofp i32 %91 to double
  %93 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %indvars.iv16.i
  store double %92, double* %93, align 8, !tbaa !3
  %94 = fpext double %92 to x86_fp80
  %95 = fsub x86_fp80 %z.015.i, %94
  %96 = fmul x86_fp80 %95, 0xK40178000000000000000
  %indvars.iv.next17.i = add i64 %indvars.iv16.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next17.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 2
  br i1 %exitcond, label %97, label %90

; <label>:97                                      ; preds = %90
  %98 = add nsw i32 %18, -16406
  %99 = fptrunc x86_fp80 %96 to double
  %100 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 2
  store double %99, double* %100, align 16, !tbaa !3
  %101 = fcmp oeq double %99, 0.000000e+00
  br i1 %101, label %._crit_edge.i, label %._crit_edge

._crit_edge.i:                                    ; preds = %._crit_edge.i, %97
  %nx.0.i5 = phi i32 [ %102, %._crit_edge.i ], [ 3, %97 ]
  %indvars.iv.i4 = phi i64 [ %phitmp.i, %._crit_edge.i ], [ 2, %97 ]
  %102 = add nsw i32 %nx.0.i5, -1
  %phitmp.i = add i64 %indvars.iv.i4, -1
  %103 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %phitmp.i
  %104 = load double* %103, align 8, !tbaa !3
  %105 = fcmp oeq double %104, 0.000000e+00
  br i1 %105, label %._crit_edge.i, label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.i, %97
  %nx.0.i.lcssa = phi i32 [ 3, %97 ], [ %102, %._crit_edge.i ]
  %106 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 0
  %107 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 0
  %108 = call i32 @__rem_pio2_large(double* %106, double* %107, i32 %98, i32 %nx.0.i.lcssa, i32 2) nounwind optsize
  %109 = load double* %107, align 16, !tbaa !3
  %110 = fpext double %109 to x86_fp80
  %111 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 1
  %112 = load double* %111, align 8, !tbaa !3
  %113 = fpext double %112 to x86_fp80
  %114 = fadd x86_fp80 %110, %113
  %115 = fsub x86_fp80 %114, %110
  %116 = fsub x86_fp80 %113, %115
  %117 = icmp slt i32 %sext.i, 0
  br i1 %117, label %118, label %__rem_pio2l.exit

; <label>:118                                     ; preds = %._crit_edge
  %119 = fsub x86_fp80 0xK80000000000000000000, %114
  %120 = fsub x86_fp80 0xK80000000000000000000, %116
  %121 = sub nsw i32 0, %108
  br label %__rem_pio2l.exit

__rem_pio2l.exit:                                 ; preds = %118, %._crit_edge, %86, %82
  %122 = phi x86_fp80 [ %85, %82 ], [ %87, %86 ], [ %120, %118 ], [ %116, %._crit_edge ]
  %123 = phi x86_fp80 [ %83, %82 ], [ %87, %86 ], [ %119, %118 ], [ %114, %._crit_edge ]
  %.0.i = phi i32 [ %34, %82 ], [ 0, %86 ], [ %121, %118 ], [ %108, %._crit_edge ]
  call void @llvm.lifetime.end(i64 -1, i8* %15) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %16) nounwind
  %124 = call x86_fp80 @__sinl(x86_fp80 %123, x86_fp80 %122, i32 1) nounwind optsize
  %125 = call x86_fp80 @__cosl(x86_fp80 %123, x86_fp80 %122) nounwind optsize
  %126 = and i32 %.0.i, 3
  switch i32 %126, label %133 [
    i32 0, label %127
    i32 1, label %128
    i32 2, label %130
  ]

; <label>:127                                     ; preds = %__rem_pio2l.exit
  store x86_fp80 %124, x86_fp80* %sin, align 16, !tbaa !4
  store x86_fp80 %125, x86_fp80* %cos, align 16, !tbaa !4
  br label %135

; <label>:128                                     ; preds = %__rem_pio2l.exit
  store x86_fp80 %125, x86_fp80* %sin, align 16, !tbaa !4
  %129 = fsub x86_fp80 0xK80000000000000000000, %124
  store x86_fp80 %129, x86_fp80* %cos, align 16, !tbaa !4
  br label %135

; <label>:130                                     ; preds = %__rem_pio2l.exit
  %131 = fsub x86_fp80 0xK80000000000000000000, %124
  store x86_fp80 %131, x86_fp80* %sin, align 16, !tbaa !4
  %132 = fsub x86_fp80 0xK80000000000000000000, %125
  store x86_fp80 %132, x86_fp80* %cos, align 16, !tbaa !4
  br label %135

; <label>:133                                     ; preds = %__rem_pio2l.exit
  %134 = fsub x86_fp80 0xK80000000000000000000, %125
  store x86_fp80 %134, x86_fp80* %sin, align 16, !tbaa !4
  store x86_fp80 %124, x86_fp80* %cos, align 16, !tbaa !4
  br label %135

; <label>:135                                     ; preds = %133, %130, %128, %127, %11, %6, %5
  ret void
}

define void @sincos(double %x, double* nocapture %sin, double* nocapture %cos) nounwind uwtable optsize {
  %y = alloca [2 x double], align 16
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ult i32 %4, 1072243196
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %0
  %7 = icmp ult i32 %4, 1044816030
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %6
  %9 = fptosi double %x to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %38

; <label>:11                                      ; preds = %8
  store double %x, double* %sin, align 8, !tbaa !3
  store double 1.000000e+00, double* %cos, align 8, !tbaa !3
  br label %38

; <label>:12                                      ; preds = %6
  %13 = call double @__sin(double %x, double 0.000000e+00, i32 0) nounwind optsize
  store double %13, double* %sin, align 8, !tbaa !3
  %14 = call double @__cos(double %x, double 0.000000e+00) nounwind optsize
  store double %14, double* %cos, align 8, !tbaa !3
  br label %38

; <label>:15                                      ; preds = %0
  %16 = icmp ugt i32 %4, 2146435071
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %15
  %18 = fsub double %x, %x
  store double %18, double* %cos, align 8, !tbaa !3
  store double %18, double* %sin, align 8, !tbaa !3
  br label %38

; <label>:19                                      ; preds = %15
  %20 = getelementptr inbounds [2 x double]* %y, i64 0, i64 0
  %21 = call i32 @__rem_pio2(double %x, double* %20) nounwind optsize
  %22 = load double* %20, align 16, !tbaa !3
  %23 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %24 = load double* %23, align 8, !tbaa !3
  %25 = call double @__sin(double %22, double %24, i32 1) nounwind optsize
  %26 = load double* %20, align 16, !tbaa !3
  %27 = load double* %23, align 8, !tbaa !3
  %28 = call double @__cos(double %26, double %27) nounwind optsize
  %29 = and i32 %21, 3
  switch i32 %29, label %36 [
    i32 0, label %30
    i32 1, label %31
    i32 2, label %33
  ]

; <label>:30                                      ; preds = %19
  store double %25, double* %sin, align 8, !tbaa !3
  store double %28, double* %cos, align 8, !tbaa !3
  br label %38

; <label>:31                                      ; preds = %19
  store double %28, double* %sin, align 8, !tbaa !3
  %32 = fsub double -0.000000e+00, %25
  store double %32, double* %cos, align 8, !tbaa !3
  br label %38

; <label>:33                                      ; preds = %19
  %34 = fsub double -0.000000e+00, %25
  store double %34, double* %sin, align 8, !tbaa !3
  %35 = fsub double -0.000000e+00, %28
  store double %35, double* %cos, align 8, !tbaa !3
  br label %38

; <label>:36                                      ; preds = %19
  %37 = fsub double -0.000000e+00, %28
  store double %37, double* %sin, align 8, !tbaa !3
  store double %25, double* %cos, align 8, !tbaa !3
  br label %38

; <label>:38                                      ; preds = %36, %33, %31, %30, %17, %12, %11, %8
  ret void
}

define float @__sindf(double %x) nounwind uwtable readnone optsize {
  %1 = fmul double %x, %x
  %2 = fmul double %1, %1
  %3 = fmul double %1, 0x3EC6CD878C3B46A7
  %4 = fadd double %3, 0xBF2A00F9E2CAE774
  %5 = fmul double %1, %x
  %6 = fmul double %1, 0x3F811110896EFBB2
  %7 = fadd double %6, 0xBFC5555554CBAC77
  %8 = fmul double %5, %7
  %9 = fadd double %8, %x
  %10 = fmul double %5, %2
  %11 = fmul double %10, %4
  %12 = fadd double %9, %11
  %13 = fptrunc double %12 to float
  ret float %13
}

define float @sinf(float %x) nounwind uwtable optsize {
  %y = alloca double, align 8
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ult i32 %2, 1061752795
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = icmp ult i32 %2, 964689920
  %6 = fptosi float %x to i32
  %7 = icmp eq i32 %6, 0
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %71, label %8

; <label>:8                                       ; preds = %4
  %9 = fpext float %x to double
  %10 = call float @__sindf(double %9) nounwind optsize
  br label %71

; <label>:11                                      ; preds = %0
  %12 = icmp ult i32 %2, 1081824210
  br i1 %12, label %13, label %28

; <label>:13                                      ; preds = %11
  %14 = icmp ult i32 %2, 1075235812
  %15 = icmp sgt i32 %1, 0
  %16 = fpext float %x to double
  br i1 %14, label %17, label %25

; <label>:17                                      ; preds = %13
  br i1 %15, label %18, label %21

; <label>:18                                      ; preds = %17
  %19 = fadd double %16, 0xBFF921FB54442D18
  %20 = call float @__cosdf(double %19) nounwind optsize
  br label %71

; <label>:21                                      ; preds = %17
  %22 = fadd double %16, 0x3FF921FB54442D18
  %23 = call float @__cosdf(double %22) nounwind optsize
  %24 = fsub float -0.000000e+00, %23
  br label %71

; <label>:25                                      ; preds = %13
  %. = select i1 %15, double 0x400921FB54442D18, double 0xC00921FB54442D18
  %26 = fsub double %., %16
  %27 = call float @__sindf(double %26) nounwind optsize
  br label %71

; <label>:28                                      ; preds = %11
  %29 = icmp ult i32 %2, 1088565718
  br i1 %29, label %30, label %50

; <label>:30                                      ; preds = %28
  %31 = icmp ult i32 %2, 1085271520
  %32 = icmp sgt i32 %1, 0
  %33 = fpext float %x to double
  br i1 %31, label %34, label %42

; <label>:34                                      ; preds = %30
  br i1 %32, label %35, label %39

; <label>:35                                      ; preds = %34
  %36 = fadd double %33, 0xC012D97C7F3321D2
  %37 = call float @__cosdf(double %36) nounwind optsize
  %38 = fsub float -0.000000e+00, %37
  br label %71

; <label>:39                                      ; preds = %34
  %40 = fadd double %33, 0x4012D97C7F3321D2
  %41 = call float @__cosdf(double %40) nounwind optsize
  br label %71

; <label>:42                                      ; preds = %30
  br i1 %32, label %43, label %45

; <label>:43                                      ; preds = %42
  %44 = fadd double %33, 0xC01921FB54442D18
  br label %47

; <label>:45                                      ; preds = %42
  %46 = fadd double %33, 0x401921FB54442D18
  br label %47

; <label>:47                                      ; preds = %45, %43
  %48 = phi double [ %44, %43 ], [ %46, %45 ]
  %49 = call float @__sindf(double %48) nounwind optsize
  br label %71

; <label>:50                                      ; preds = %28
  %51 = icmp ugt i32 %2, 2139095039
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %50
  %53 = fsub float %x, %x
  br label %71

; <label>:54                                      ; preds = %50
  %55 = call i32 @__rem_pio2f(float %x, double* %y) nounwind optsize
  %56 = and i32 %55, 3
  switch i32 %56, label %67 [
    i32 0, label %57
    i32 1, label %60
    i32 2, label %63
  ]

; <label>:57                                      ; preds = %54
  %58 = load double* %y, align 8, !tbaa !3
  %59 = call float @__sindf(double %58) nounwind optsize
  br label %71

; <label>:60                                      ; preds = %54
  %61 = load double* %y, align 8, !tbaa !3
  %62 = call float @__cosdf(double %61) nounwind optsize
  br label %71

; <label>:63                                      ; preds = %54
  %64 = load double* %y, align 8, !tbaa !3
  %65 = fsub double -0.000000e+00, %64
  %66 = call float @__sindf(double %65) nounwind optsize
  br label %71

; <label>:67                                      ; preds = %54
  %68 = load double* %y, align 8, !tbaa !3
  %69 = call float @__cosdf(double %68) nounwind optsize
  %70 = fsub float -0.000000e+00, %69
  br label %71

; <label>:71                                      ; preds = %67, %63, %60, %57, %52, %47, %39, %35, %25, %21, %18, %8, %4
  %.0 = phi float [ %10, %8 ], [ %20, %18 ], [ %24, %21 ], [ %27, %25 ], [ %38, %35 ], [ %41, %39 ], [ %49, %47 ], [ %53, %52 ], [ %70, %67 ], [ %66, %63 ], [ %62, %60 ], [ %59, %57 ], [ %x, %4 ]
  ret float %.0
}

define float @sinhf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = fadd float %x, %x
  br label %44

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %1, 0
  %h.0 = select i1 %7, float -5.000000e-01, float 5.000000e-01
  %8 = icmp ult i32 %2, 1091567616
  br i1 %8, label %9, label %29

; <label>:9                                       ; preds = %6
  %10 = icmp ult i32 %2, 964689920
  %11 = fadd float %x, 0x479E17B840000000
  %12 = fcmp ogt float %11, 1.000000e+00
  %or.cond = and i1 %10, %12
  br i1 %or.cond, label %44, label %13

; <label>:13                                      ; preds = %9
  %14 = tail call float @fabsf(float %x) nounwind optsize
  %15 = tail call float @expm1f(float %14) nounwind optsize
  %16 = icmp ult i32 %2, 1065353216
  br i1 %16, label %17, label %24

; <label>:17                                      ; preds = %13
  %18 = fmul float %15, 2.000000e+00
  %19 = fmul float %15, %15
  %20 = fadd float %15, 1.000000e+00
  %21 = fdiv float %19, %20
  %22 = fsub float %18, %21
  %23 = fmul float %h.0, %22
  br label %44

; <label>:24                                      ; preds = %13
  %25 = fadd float %15, 1.000000e+00
  %26 = fdiv float %15, %25
  %27 = fadd float %15, %26
  %28 = fmul float %h.0, %27
  br label %44

; <label>:29                                      ; preds = %6
  %30 = icmp ult i32 %2, 1118925335
  br i1 %30, label %31, label %35

; <label>:31                                      ; preds = %29
  %32 = tail call float @fabsf(float %x) nounwind optsize
  %33 = tail call float @expf(float %32) nounwind optsize
  %34 = fmul float %h.0, %33
  br label %44

; <label>:35                                      ; preds = %29
  %36 = icmp ult i32 %2, 1119016189
  br i1 %36, label %37, label %42

; <label>:37                                      ; preds = %35
  %38 = fmul float %h.0, 2.000000e+00
  %39 = tail call float @fabsf(float %x) nounwind optsize
  %40 = tail call float @__expo2f(float %39) nounwind optsize
  %41 = fmul float %38, %40
  br label %44

; <label>:42                                      ; preds = %35
  %43 = fmul float %x, 0x479E17B840000000
  br label %44

; <label>:44                                      ; preds = %42, %37, %31, %24, %17, %9, %4
  %.0 = phi float [ %5, %4 ], [ %23, %17 ], [ %28, %24 ], [ %34, %31 ], [ %41, %37 ], [ %43, %42 ], [ %x, %9 ]
  ret float %.0
}

define x86_fp80 @sinhl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = lshr i80 %1, 32
  %5 = trunc i80 %4 to i32
  %6 = trunc i80 %1 to i32
  %7 = and i32 %3, 32767
  %8 = icmp eq i32 %7, 32767
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = fadd x86_fp80 %x, %x
  br label %61

; <label>:11                                      ; preds = %0
  %12 = and i32 %3, 32768
  %13 = icmp eq i32 %12, 0
  %h.0 = select i1 %13, x86_fp80 0xK3FFE8000000000000000, x86_fp80 0xKBFFE8000000000000000
  %14 = icmp ult i32 %7, 16387
  br i1 %14, label %18, label %15

; <label>:15                                      ; preds = %11
  %16 = icmp eq i32 %7, 16387
  %17 = icmp ult i32 %5, -939524095
  %or.cond = and i1 %16, %17
  br i1 %or.cond, label %.thread, label %38

; <label>:18                                      ; preds = %11
  %19 = icmp ult i32 %7, 16351
  br i1 %19, label %20, label %.thread

; <label>:20                                      ; preds = %18
  %21 = fadd x86_fp80 %x, 0xK7FFBAC23C22116CBF8A4
  %22 = fcmp ogt x86_fp80 %21, 0xK3FFF8000000000000000
  br i1 %22, label %61, label %.thread

.thread:                                          ; preds = %20, %18, %15
  %23 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %24 = tail call x86_fp80 @expm1l(x86_fp80 %23) nounwind optsize
  %25 = icmp ult i32 %7, 16383
  br i1 %25, label %26, label %33

; <label>:26                                      ; preds = %.thread
  %27 = fmul x86_fp80 %24, 0xK40008000000000000000
  %28 = fmul x86_fp80 %24, %24
  %29 = fadd x86_fp80 %24, 0xK3FFF8000000000000000
  %30 = fdiv x86_fp80 %28, %29
  %31 = fsub x86_fp80 %27, %30
  %32 = fmul x86_fp80 %h.0, %31
  br label %61

; <label>:33                                      ; preds = %.thread
  %34 = fadd x86_fp80 %24, 0xK3FFF8000000000000000
  %35 = fdiv x86_fp80 %24, %34
  %36 = fadd x86_fp80 %24, %35
  %37 = fmul x86_fp80 %h.0, %36
  br label %61

; <label>:38                                      ; preds = %15
  %39 = icmp ult i32 %7, 16396
  br i1 %39, label %43, label %40

; <label>:40                                      ; preds = %38
  %41 = icmp eq i32 %7, 16396
  %42 = icmp ult i32 %5, -1317922825
  %or.cond1 = and i1 %41, %42
  br i1 %or.cond1, label %43, label %47

; <label>:43                                      ; preds = %40, %38
  %44 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %45 = tail call x86_fp80 @expl(x86_fp80 %44) nounwind optsize
  %46 = fmul x86_fp80 %h.0, %45
  br label %61

; <label>:47                                      ; preds = %40
  br i1 %41, label %48, label %59

; <label>:48                                      ; preds = %47
  %49 = icmp ult i32 %5, -1317741120
  br i1 %49, label %53, label %50

; <label>:50                                      ; preds = %48
  %51 = icmp eq i32 %5, -1317741120
  %52 = icmp ult i32 %6, 833536235
  %or.cond2 = and i1 %51, %52
  br i1 %or.cond2, label %53, label %59

; <label>:53                                      ; preds = %50, %48
  %54 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %55 = fmul x86_fp80 %54, 0xK3FFE8000000000000000
  %56 = tail call x86_fp80 @expl(x86_fp80 %55) nounwind optsize
  %57 = fmul x86_fp80 %h.0, %56
  %58 = fmul x86_fp80 %57, %56
  br label %61

; <label>:59                                      ; preds = %50, %47
  %60 = fmul x86_fp80 %x, 0xK7FFBAC23C22116CBF8A4
  br label %61

; <label>:61                                      ; preds = %59, %53, %43, %33, %26, %20, %9
  %.0 = phi x86_fp80 [ %10, %9 ], [ %32, %26 ], [ %37, %33 ], [ %46, %43 ], [ %58, %53 ], [ %60, %59 ], [ %x, %20 ]
  ret x86_fp80 %.0
}

define double @sinh(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = fadd double %x, %x
  br label %47

; <label>:8                                       ; preds = %0
  %9 = icmp slt i32 %3, 0
  %h.0 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %10 = icmp ult i32 %4, 1077280768
  br i1 %10, label %11, label %32

; <label>:11                                      ; preds = %8
  %12 = icmp ult i32 %4, 1043333120
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %11
  %14 = fadd double %x, 1.000000e+307
  %15 = fcmp ogt double %14, 1.000000e+00
  br i1 %15, label %47, label %16

; <label>:16                                      ; preds = %13, %11
  %17 = tail call double @fabs(double %x) nounwind optsize
  %18 = tail call double @expm1(double %17) nounwind optsize
  %19 = icmp ult i32 %4, 1072693248
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %16
  %21 = fmul double %18, 2.000000e+00
  %22 = fmul double %18, %18
  %23 = fadd double %18, 1.000000e+00
  %24 = fdiv double %22, %23
  %25 = fsub double %21, %24
  %26 = fmul double %h.0, %25
  br label %47

; <label>:27                                      ; preds = %16
  %28 = fadd double %18, 1.000000e+00
  %29 = fdiv double %18, %28
  %30 = fadd double %18, %29
  %31 = fmul double %h.0, %30
  br label %47

; <label>:32                                      ; preds = %8
  %33 = icmp ult i32 %4, 1082535490
  br i1 %33, label %34, label %38

; <label>:34                                      ; preds = %32
  %35 = tail call double @fabs(double %x) nounwind optsize
  %36 = tail call double @exp(double %35) nounwind optsize
  %37 = fmul double %h.0, %36
  br label %47

; <label>:38                                      ; preds = %32
  %39 = icmp ult i32 %4, 1082536911
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %38
  %41 = fmul double %h.0, 2.000000e+00
  %42 = tail call double @fabs(double %x) nounwind optsize
  %43 = tail call double @__expo2(double %42) nounwind optsize
  %44 = fmul double %41, %43
  br label %47

; <label>:45                                      ; preds = %38
  %46 = fmul double %x, 1.000000e+307
  br label %47

; <label>:47                                      ; preds = %45, %40, %34, %27, %20, %13, %6
  %.0 = phi double [ %7, %6 ], [ %26, %20 ], [ %31, %27 ], [ %37, %34 ], [ %44, %40 ], [ %46, %45 ], [ %x, %13 ]
  ret double %.0
}

define x86_fp80 @__sinl(x86_fp80 %x, x86_fp80 %y, i32 %iy) nounwind uwtable optsize {
  %1 = fmul x86_fp80 %x, %x
  %2 = fmul x86_fp80 %1, %x
  %3 = fmul x86_fp80 %1, 0xK3FCEBC9B975059FB2000
  %4 = fadd x86_fp80 %3, 0xKBFD6D72175E8D9700000
  %5 = fmul x86_fp80 %1, %4
  %6 = fadd x86_fp80 %5, 0xK3FDEB09215C8121DA800
  %7 = fmul x86_fp80 %1, %6
  %8 = fadd x86_fp80 %7, 0xKBFE5D7322B278B656800
  %9 = fmul x86_fp80 %1, %8
  %10 = fadd x86_fp80 %9, 0xK3FECB8EF1D2AAB07B800
  %11 = fmul x86_fp80 %1, %10
  %12 = fadd x86_fp80 %11, 0xKBFF2D00D00D00CFC0800
  %13 = fmul x86_fp80 %1, %12
  %14 = fadd x86_fp80 %13, 0xK3FF88888888888888800
  %15 = icmp eq i32 %iy, 0
  br i1 %15, label %16, label %26

; <label>:16                                      ; preds = %0
  %17 = load volatile double* @S1hi, align 8, !tbaa !3
  %18 = fpext double %17 to x86_fp80
  %19 = load volatile double* @S1lo, align 8, !tbaa !3
  %20 = fpext double %19 to x86_fp80
  %21 = fadd x86_fp80 %18, %20
  %22 = fmul x86_fp80 %1, %14
  %23 = fadd x86_fp80 %21, %22
  %24 = fmul x86_fp80 %2, %23
  %25 = fadd x86_fp80 %24, %x
  br label %40

; <label>:26                                      ; preds = %0
  %27 = fmul x86_fp80 %y, 0xK3FFE8000000000000000
  %28 = fmul x86_fp80 %2, %14
  %29 = fsub x86_fp80 %27, %28
  %30 = fmul x86_fp80 %1, %29
  %31 = fsub x86_fp80 %30, %y
  %32 = load volatile double* @S1hi, align 8, !tbaa !3
  %33 = fpext double %32 to x86_fp80
  %34 = load volatile double* @S1lo, align 8, !tbaa !3
  %35 = fpext double %34 to x86_fp80
  %36 = fadd x86_fp80 %33, %35
  %37 = fmul x86_fp80 %2, %36
  %38 = fsub x86_fp80 %31, %37
  %39 = fsub x86_fp80 %x, %38
  br label %40

; <label>:40                                      ; preds = %26, %16
  %.0 = phi x86_fp80 [ %25, %16 ], [ %39, %26 ]
  ret x86_fp80 %.0
}

define x86_fp80 @sinl(x86_fp80 %x) nounwind uwtable optsize {
  %tx.i = alloca [3 x double], align 16
  %ty.i = alloca [2 x double], align 16
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  switch i32 %4, label %8 [
    i32 0, label %138
    i32 32767, label %5
  ]

; <label>:5                                       ; preds = %0
  %6 = fsub x86_fp80 %x, %x
  %7 = fdiv x86_fp80 %6, %6
  br label %138

; <label>:8                                       ; preds = %0
  %ins = and i80 %1, 604462909807314587353087
  %9 = bitcast i80 %ins to x86_fp80
  %10 = fcmp olt x86_fp80 %9, 0xK3FFEC90FDAA22168C000
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %8
  %12 = call x86_fp80 @__sinl(x86_fp80 %9, x86_fp80 0xK00000000000000000000, i32 0) nounwind optsize
  %13 = icmp slt i80 %1, 0
  br i1 %13, label %14, label %138

; <label>:14                                      ; preds = %11
  %15 = fsub x86_fp80 0xK80000000000000000000, %12
  br label %138

; <label>:16                                      ; preds = %8
  %17 = bitcast [3 x double]* %tx.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %17) nounwind
  %18 = bitcast [2 x double]* %ty.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %18) nounwind
  %19 = lshr i80 %1, 48
  %.tr.i = trunc i80 %19 to i32
  %sext.i = ashr i32 %.tr.i, 16
  %20 = and i32 %sext.i, 32767
  %21 = icmp ult i32 %20, 16408
  br i1 %21, label %27, label %22

; <label>:22                                      ; preds = %16
  switch i32 %20, label %89 [
    i32 16408, label %23
    i32 32767, label %__rem_pio2l.exit.thread
  ]

; <label>:23                                      ; preds = %22
  %24 = lshr i80 %1, 32
  %25 = trunc i80 %24 to i32
  %26 = icmp ult i32 %25, -921707870
  br i1 %26, label %27, label %89

; <label>:27                                      ; preds = %23, %16
  %28 = load volatile double* @invpio2hi698, align 8, !tbaa !3
  %29 = fpext double %28 to x86_fp80
  %30 = load volatile double* @invpio2lo699, align 8, !tbaa !3
  %31 = fpext double %30 to x86_fp80
  %32 = fadd x86_fp80 %29, %31
  %33 = fmul x86_fp80 %32, %x
  %34 = fadd x86_fp80 %33, 0xK403EC000000000000000
  %35 = fadd x86_fp80 %34, 0xKC03EC000000000000000
  %36 = fptosi x86_fp80 %35 to i32
  %37 = fmul x86_fp80 %35, 0xK3FFFC90FDAA222000000
  %38 = fsub x86_fp80 %x, %37
  %39 = load volatile double* @pio2_1thi700, align 8, !tbaa !3
  %40 = fpext double %39 to x86_fp80
  %41 = load volatile double* @pio2_1tlo701, align 8, !tbaa !3
  %42 = fpext double %41 to x86_fp80
  %43 = fadd x86_fp80 %40, %42
  %44 = fmul x86_fp80 %35, %43
  %45 = fsub x86_fp80 %38, %44
  %46 = bitcast x86_fp80 %45 to i80
  %47 = lshr i80 %46, 64
  %48 = trunc i80 %47 to i32
  %49 = and i32 %48, 32767
  %50 = sub nsw i32 %20, %49
  %51 = icmp sgt i32 %50, 22
  br i1 %51, label %52, label %84

; <label>:52                                      ; preds = %27
  %53 = fmul x86_fp80 %35, 0xKBFD7973DCB3B3A000000
  %54 = fsub x86_fp80 %38, %53
  %55 = load volatile double* @pio2_2thi702, align 8, !tbaa !3
  %56 = fpext double %55 to x86_fp80
  %57 = load volatile double* @pio2_2tlo703, align 8, !tbaa !3
  %58 = fpext double %57 to x86_fp80
  %59 = fadd x86_fp80 %56, %58
  %60 = fmul x86_fp80 %35, %59
  %61 = fsub x86_fp80 %38, %54
  %62 = fsub x86_fp80 %61, %53
  %63 = fsub x86_fp80 %60, %62
  %64 = fsub x86_fp80 %54, %63
  %65 = bitcast x86_fp80 %64 to i80
  %66 = lshr i80 %65, 64
  %67 = trunc i80 %66 to i32
  %68 = and i32 %67, 32767
  %69 = sub nsw i32 %20, %68
  %70 = icmp sgt i32 %69, 61
  br i1 %70, label %71, label %84

; <label>:71                                      ; preds = %52
  %72 = fmul x86_fp80 %35, 0xK3FAEC51701B83A000000
  %73 = fsub x86_fp80 %54, %72
  %74 = load volatile double* @pio2_3thi704, align 8, !tbaa !3
  %75 = fpext double %74 to x86_fp80
  %76 = load volatile double* @pio2_3tlo705, align 8, !tbaa !3
  %77 = fpext double %76 to x86_fp80
  %78 = fadd x86_fp80 %75, %77
  %79 = fmul x86_fp80 %35, %78
  %80 = fsub x86_fp80 %54, %73
  %81 = fsub x86_fp80 %80, %72
  %82 = fsub x86_fp80 %79, %81
  %83 = fsub x86_fp80 %73, %82
  br label %84

; <label>:84                                      ; preds = %71, %52, %27
  %85 = phi x86_fp80 [ %83, %71 ], [ %64, %52 ], [ %45, %27 ]
  %r.0.i = phi x86_fp80 [ %73, %71 ], [ %54, %52 ], [ %38, %27 ]
  %w.0.i = phi x86_fp80 [ %82, %71 ], [ %63, %52 ], [ %44, %27 ]
  %86 = fsub x86_fp80 %r.0.i, %85
  %87 = fsub x86_fp80 %86, %w.0.i
  br label %__rem_pio2l.exit

__rem_pio2l.exit.thread:                          ; preds = %22
  %88 = fsub x86_fp80 %x, %x
  call void @llvm.lifetime.end(i64 -1, i8* %17) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %18) nounwind
  br label %126

; <label>:89                                      ; preds = %23, %22
  %mask5.i = and i80 %1, 18446744073709551615
  %ins6.i = or i80 %mask5.i, 302637283273278903812096
  %90 = bitcast i80 %ins6.i to x86_fp80
  br label %91

; <label>:91                                      ; preds = %91, %89
  %indvars.iv16.i = phi i64 [ 0, %89 ], [ %indvars.iv.next17.i, %91 ]
  %z.015.i = phi x86_fp80 [ %90, %89 ], [ %97, %91 ]
  %92 = fptosi x86_fp80 %z.015.i to i32
  %93 = sitofp i32 %92 to double
  %94 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %indvars.iv16.i
  store double %93, double* %94, align 8, !tbaa !3
  %95 = fpext double %93 to x86_fp80
  %96 = fsub x86_fp80 %z.015.i, %95
  %97 = fmul x86_fp80 %96, 0xK40178000000000000000
  %indvars.iv.next17.i = add i64 %indvars.iv16.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next17.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 2
  br i1 %exitcond, label %98, label %91

; <label>:98                                      ; preds = %91
  %99 = add nsw i32 %20, -16406
  %100 = fptrunc x86_fp80 %97 to double
  %101 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 2
  store double %100, double* %101, align 16, !tbaa !3
  %102 = fcmp oeq double %100, 0.000000e+00
  br i1 %102, label %._crit_edge.i, label %._crit_edge

._crit_edge.i:                                    ; preds = %._crit_edge.i, %98
  %nx.0.i5 = phi i32 [ %103, %._crit_edge.i ], [ 3, %98 ]
  %indvars.iv.i4 = phi i64 [ %phitmp.i, %._crit_edge.i ], [ 2, %98 ]
  %103 = add nsw i32 %nx.0.i5, -1
  %phitmp.i = add i64 %indvars.iv.i4, -1
  %104 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %phitmp.i
  %105 = load double* %104, align 8, !tbaa !3
  %106 = fcmp oeq double %105, 0.000000e+00
  br i1 %106, label %._crit_edge.i, label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.i, %98
  %nx.0.i.lcssa = phi i32 [ 3, %98 ], [ %103, %._crit_edge.i ]
  %107 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 0
  %108 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 0
  %109 = call i32 @__rem_pio2_large(double* %107, double* %108, i32 %99, i32 %nx.0.i.lcssa, i32 2) nounwind optsize
  %110 = load double* %108, align 16, !tbaa !3
  %111 = fpext double %110 to x86_fp80
  %112 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 1
  %113 = load double* %112, align 8, !tbaa !3
  %114 = fpext double %113 to x86_fp80
  %115 = fadd x86_fp80 %111, %114
  %116 = fsub x86_fp80 %115, %111
  %117 = fsub x86_fp80 %114, %116
  %118 = icmp slt i32 %sext.i, 0
  br i1 %118, label %119, label %__rem_pio2l.exit

; <label>:119                                     ; preds = %._crit_edge
  %120 = fsub x86_fp80 0xK80000000000000000000, %115
  %121 = fsub x86_fp80 0xK80000000000000000000, %117
  %122 = sub nsw i32 0, %109
  br label %__rem_pio2l.exit

__rem_pio2l.exit:                                 ; preds = %119, %._crit_edge, %84
  %123 = phi x86_fp80 [ %87, %84 ], [ %121, %119 ], [ %117, %._crit_edge ]
  %124 = phi x86_fp80 [ %85, %84 ], [ %120, %119 ], [ %115, %._crit_edge ]
  %.0.i = phi i32 [ %36, %84 ], [ %122, %119 ], [ %109, %._crit_edge ]
  call void @llvm.lifetime.end(i64 -1, i8* %17) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %18) nounwind
  %125 = and i32 %.0.i, 3
  switch i32 %125, label %138 [
    i32 0, label %126
    i32 1, label %130
    i32 2, label %132
    i32 3, label %135
  ]

; <label>:126                                     ; preds = %__rem_pio2l.exit, %__rem_pio2l.exit.thread
  %127 = phi x86_fp80 [ %88, %__rem_pio2l.exit.thread ], [ %124, %__rem_pio2l.exit ]
  %128 = phi x86_fp80 [ %88, %__rem_pio2l.exit.thread ], [ %123, %__rem_pio2l.exit ]
  %129 = call x86_fp80 @__sinl(x86_fp80 %127, x86_fp80 %128, i32 1) nounwind optsize
  br label %138

; <label>:130                                     ; preds = %__rem_pio2l.exit
  %131 = call x86_fp80 @__cosl(x86_fp80 %124, x86_fp80 %123) nounwind optsize
  br label %138

; <label>:132                                     ; preds = %__rem_pio2l.exit
  %133 = call x86_fp80 @__sinl(x86_fp80 %124, x86_fp80 %123, i32 1) nounwind optsize
  %134 = fsub x86_fp80 0xK80000000000000000000, %133
  br label %138

; <label>:135                                     ; preds = %__rem_pio2l.exit
  %136 = call x86_fp80 @__cosl(x86_fp80 %124, x86_fp80 %123) nounwind optsize
  %137 = fsub x86_fp80 0xK80000000000000000000, %136
  br label %138

; <label>:138                                     ; preds = %135, %132, %130, %126, %__rem_pio2l.exit, %14, %11, %5, %0
  %.0 = phi x86_fp80 [ %7, %5 ], [ %x, %0 ], [ %15, %14 ], [ %12, %11 ], [ %124, %__rem_pio2l.exit ], [ %137, %135 ], [ %134, %132 ], [ %131, %130 ], [ %129, %126 ]
  ret x86_fp80 %.0
}

define double @__sin(double %x, double %y, i32 %iy) nounwind uwtable readnone optsize {
  %1 = fmul double %x, %x
  %2 = fmul double %1, %1
  %3 = fmul double %1, 0x3EC71DE357B1FE7D
  %4 = fadd double %3, 0xBF2A01A019C161D5
  %5 = fmul double %1, %4
  %6 = fadd double %5, 0x3F8111111110F8A6
  %7 = fmul double %1, %2
  %8 = fmul double %1, 0x3DE5D93A5ACFD57C
  %9 = fadd double %8, 0xBE5AE5E68A2B9CEB
  %10 = fmul double %7, %9
  %11 = fadd double %6, %10
  %12 = fmul double %1, %x
  %13 = icmp eq i32 %iy, 0
  br i1 %13, label %14, label %19

; <label>:14                                      ; preds = %0
  %15 = fmul double %1, %11
  %16 = fadd double %15, 0xBFC5555555555549
  %17 = fmul double %12, %16
  %18 = fadd double %17, %x
  br label %28

; <label>:19                                      ; preds = %0
  %20 = fmul double %y, 5.000000e-01
  %21 = fmul double %12, %11
  %22 = fsub double %20, %21
  %23 = fmul double %1, %22
  %24 = fsub double %23, %y
  %25 = fmul double %12, 0xBFC5555555555549
  %26 = fsub double %24, %25
  %27 = fsub double %x, %26
  br label %28

; <label>:28                                      ; preds = %19, %14
  %.0 = phi double [ %18, %14 ], [ %27, %19 ]
  ret double %.0
}

define double @sin(double %x) nounwind uwtable optsize {
  %y = alloca [2 x double], align 16
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ult i32 %4, 1072243196
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %0
  %7 = icmp ult i32 %4, 1045430272
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fptosi double %x to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %43, label %11

; <label>:11                                      ; preds = %8, %6
  %12 = call double @__sin(double %x, double 0.000000e+00, i32 0) nounwind optsize
  br label %43

; <label>:13                                      ; preds = %0
  %14 = icmp ugt i32 %4, 2146435071
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %13
  %16 = fsub double %x, %x
  br label %43

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds [2 x double]* %y, i64 0, i64 0
  %19 = call i32 @__rem_pio2(double %x, double* %18) nounwind optsize
  %20 = and i32 %19, 3
  switch i32 %20, label %37 [
    i32 0, label %21
    i32 1, label %26
    i32 2, label %31
  ]

; <label>:21                                      ; preds = %17
  %22 = load double* %18, align 16, !tbaa !3
  %23 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %24 = load double* %23, align 8, !tbaa !3
  %25 = call double @__sin(double %22, double %24, i32 1) nounwind optsize
  br label %43

; <label>:26                                      ; preds = %17
  %27 = load double* %18, align 16, !tbaa !3
  %28 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %29 = load double* %28, align 8, !tbaa !3
  %30 = call double @__cos(double %27, double %29) nounwind optsize
  br label %43

; <label>:31                                      ; preds = %17
  %32 = load double* %18, align 16, !tbaa !3
  %33 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %34 = load double* %33, align 8, !tbaa !3
  %35 = call double @__sin(double %32, double %34, i32 1) nounwind optsize
  %36 = fsub double -0.000000e+00, %35
  br label %43

; <label>:37                                      ; preds = %17
  %38 = load double* %18, align 16, !tbaa !3
  %39 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %40 = load double* %39, align 8, !tbaa !3
  %41 = call double @__cos(double %38, double %40) nounwind optsize
  %42 = fsub double -0.000000e+00, %41
  br label %43

; <label>:43                                      ; preds = %37, %31, %26, %21, %15, %11, %8
  %.0 = phi double [ %12, %11 ], [ %16, %15 ], [ %42, %37 ], [ %36, %31 ], [ %30, %26 ], [ %25, %21 ], [ %x, %8 ]
  ret double %.0
}

define i32 @sleep(i32 %seconds) nounwind uwtable optsize {
  %tv = alloca %struct.timespec.281, align 8
  %1 = getelementptr inbounds %struct.timespec.281* %tv, i64 0, i32 0
  %2 = zext i32 %seconds to i64
  store i64 %2, i64* %1, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.timespec.281* %tv, i64 0, i32 1
  store i64 0, i64* %3, align 8, !tbaa !5
  %4 = call i32 @nanosleep(%struct.timespec.281* %tv, %struct.timespec.281* %tv) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %0
  %7 = load i64* %1, align 8, !tbaa !5
  %8 = trunc i64 %7 to i32
  br label %9

; <label>:9                                       ; preds = %6, %0
  %.0 = phi i32 [ %8, %6 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @snprintf(i8* %s, i64 %n, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.635], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.635]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.635]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vsnprintf(i8* %s, i64 %n, i8* %fmt, %struct.__va_list_tag.635* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @sockatmark(i32 %s) nounwind uwtable optsize {
  %ret = alloca i32, align 4
  %1 = call i32 (i32, i32, ...)* @ioctl(i32 %s, i32 35077, i32* %ret) nounwind optsize
  %2 = icmp slt i32 %1, 0
  %3 = load i32* %ret, align 4, !tbaa !6
  %.0 = select i1 %2, i32 -1, i32 %3
  ret i32 %.0
}

define i32 @socket(i32 %domain, i32 %type, i32 %protocol) nounwind uwtable optsize {
  %1 = sext i32 %domain to i64
  %2 = sext i32 %type to i64
  %3 = sext i32 %protocol to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 281, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @socketpair(i32 %domain, i32 %type, i32 %protocol, i32* %fd) nounwind uwtable optsize {
  %1 = sext i32 %domain to i64
  %2 = sext i32 %type to i64
  %3 = sext i32 %protocol to i64
  %4 = ptrtoint i32* %fd to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 288, i64 %1, i64 %2, i64 %3, i64 %4, i64 0, i64 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @sprintf(i8* %s, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.636], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.636]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.636]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vsprintf(i8* %s, i8* %fmt, %struct.__va_list_tag.636* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define float @sqrtf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2139095040
  %3 = icmp eq i32 %2, 2139095040
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = fmul float %x, %x
  %6 = fadd float %5, %x
  br label %54

; <label>:7                                       ; preds = %0
  %8 = icmp slt i32 %1, 1
  br i1 %8, label %9, label %17

; <label>:9                                       ; preds = %7
  %10 = and i32 %1, 2147483647
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %54, label %12

; <label>:12                                      ; preds = %9
  %13 = icmp slt i32 %1, 0
  br i1 %13, label %14, label %17

; <label>:14                                      ; preds = %12
  %15 = fsub float %x, %x
  %16 = fdiv float %15, %15
  br label %54

; <label>:17                                      ; preds = %12, %7
  %18 = ashr i32 %1, 23
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %.preheader, label %27

.preheader:                                       ; preds = %17
  %20 = and i32 %1, 8388608
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %i.08 = phi i32 [ %23, %.lr.ph ], [ 0, %.preheader ]
  %ix.07 = phi i32 [ %22, %.lr.ph ], [ %1, %.preheader ]
  %22 = shl i32 %ix.07, 1
  %23 = add nsw i32 %i.08, 1
  %24 = and i32 %22, 8388608
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %i.0.lcssa = phi i32 [ 0, %.preheader ], [ %23, %.lr.ph ]
  %ix.0.lcssa = phi i32 [ %1, %.preheader ], [ %22, %.lr.ph ]
  %26 = sub i32 1, %i.0.lcssa
  br label %27

; <label>:27                                      ; preds = %._crit_edge, %17
  %m.0 = phi i32 [ %26, %._crit_edge ], [ %18, %17 ]
  %ix.1 = phi i32 [ %ix.0.lcssa, %._crit_edge ], [ %1, %17 ]
  %28 = add nsw i32 %m.0, -127
  %29 = and i32 %ix.1, 8388607
  %30 = or i32 %29, 8388608
  %31 = and i32 %28, 1
  %ix.2 = shl nuw nsw i32 %30, %31
  %ix.32 = shl nsw i32 %ix.2, 1
  br label %32

; <label>:32                                      ; preds = %39, %27
  %ix.36 = phi i32 [ %ix.32, %27 ], [ %ix.3, %39 ]
  %r.05 = phi i32 [ 16777216, %27 ], [ %40, %39 ]
  %s.04 = phi i32 [ 0, %27 ], [ %s.1, %39 ]
  %q.03 = phi i32 [ 0, %27 ], [ %q.1, %39 ]
  %33 = add i32 %r.05, %s.04
  %34 = icmp sgt i32 %33, %ix.36
  br i1 %34, label %39, label %35

; <label>:35                                      ; preds = %32
  %36 = add i32 %33, %r.05
  %37 = sub nsw i32 %ix.36, %33
  %38 = add i32 %r.05, %q.03
  br label %39

; <label>:39                                      ; preds = %35, %32
  %q.1 = phi i32 [ %38, %35 ], [ %q.03, %32 ]
  %s.1 = phi i32 [ %36, %35 ], [ %s.04, %32 ]
  %ix.4 = phi i32 [ %37, %35 ], [ %ix.36, %32 ]
  %40 = lshr i32 %r.05, 1
  %ix.3 = shl nsw i32 %ix.4, 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %32

; <label>:42                                      ; preds = %39
  %43 = icmp eq i32 %ix.3, 0
  br i1 %43, label %47, label %44

; <label>:44                                      ; preds = %42
  %45 = and i32 %q.1, 1
  %46 = add nsw i32 %45, %q.1
  br label %47

; <label>:47                                      ; preds = %44, %42
  %q.2 = phi i32 [ %46, %44 ], [ %q.1, %42 ]
  %48 = ashr i32 %q.2, 1
  %49 = shl i32 %28, 22
  %50 = add i32 %49, 1056964608
  %51 = and i32 %50, -8388608
  %52 = add i32 %51, %48
  %53 = bitcast i32 %52 to float
  br label %54

; <label>:54                                      ; preds = %47, %14, %9, %4
  %.0 = phi float [ %6, %4 ], [ %16, %14 ], [ %53, %47 ], [ %x, %9 ]
  ret float %.0
}

define double @sqrt(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = and i32 %3, 2146435072
  %6 = icmp eq i32 %5, 2146435072
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = fmul double %x, %x
  %9 = fadd double %8, %x
  br label %113

; <label>:10                                      ; preds = %0
  %11 = icmp slt i32 %3, 1
  br i1 %11, label %12, label %21

; <label>:12                                      ; preds = %10
  %13 = and i32 %3, 2147483647
  %14 = or i32 %13, %4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %113, label %16

; <label>:16                                      ; preds = %12
  %17 = icmp slt i32 %3, 0
  br i1 %17, label %18, label %21

; <label>:18                                      ; preds = %16
  %19 = fsub double %x, %x
  %20 = fdiv double %19, %19
  br label %113

; <label>:21                                      ; preds = %16, %10
  %22 = ashr i32 %3, 20
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %.preheader23, label %40

.preheader23:                                     ; preds = %21
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %.lr.ph27, label %.preheader19

..preheader19_crit_edge:                          ; preds = %.lr.ph27
  %phitmp = add i32 %m.024, -20
  br label %.preheader19

.preheader19:                                     ; preds = %..preheader19_crit_edge, %.preheader23
  %ix1.0.lcssa = phi i32 [ %29, %..preheader19_crit_edge ], [ %4, %.preheader23 ]
  %ix0.0.lcssa = phi i32 [ %28, %..preheader19_crit_edge ], [ %3, %.preheader23 ]
  %m.0.lcssa = phi i32 [ %phitmp, %..preheader19_crit_edge ], [ 1, %.preheader23 ]
  %25 = and i32 %ix0.0.lcssa, 1048576
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %.lr.ph, label %._crit_edge

.lr.ph27:                                         ; preds = %.lr.ph27, %.preheader23
  %ix1.026 = phi i32 [ %29, %.lr.ph27 ], [ %4, %.preheader23 ]
  %m.024 = phi i32 [ %27, %.lr.ph27 ], [ 0, %.preheader23 ]
  %27 = add nsw i32 %m.024, -21
  %28 = lshr i32 %ix1.026, 11
  %29 = shl i32 %ix1.026, 21
  %30 = icmp eq i32 %28, 0
  br i1 %30, label %.lr.ph27, label %..preheader19_crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader19
  %ix0.121 = phi i32 [ %31, %.lr.ph ], [ %ix0.0.lcssa, %.preheader19 ]
  %i.020 = phi i32 [ %32, %.lr.ph ], [ 0, %.preheader19 ]
  %31 = shl i32 %ix0.121, 1
  %32 = add nsw i32 %i.020, 1
  %33 = and i32 %31, 1048576
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader19
  %ix0.1.lcssa = phi i32 [ %ix0.0.lcssa, %.preheader19 ], [ %31, %.lr.ph ]
  %i.0.lcssa = phi i32 [ 0, %.preheader19 ], [ %32, %.lr.ph ]
  %35 = sub i32 %m.0.lcssa, %i.0.lcssa
  %36 = sub nsw i32 32, %i.0.lcssa
  %37 = lshr i32 %ix1.0.lcssa, %36
  %38 = or i32 %37, %ix0.1.lcssa
  %39 = shl i32 %ix1.0.lcssa, %i.0.lcssa
  br label %40

; <label>:40                                      ; preds = %._crit_edge, %21
  %m.1 = phi i32 [ %35, %._crit_edge ], [ %22, %21 ]
  %ix0.2 = phi i32 [ %38, %._crit_edge ], [ %3, %21 ]
  %ix1.1 = phi i32 [ %39, %._crit_edge ], [ %4, %21 ]
  %41 = add nsw i32 %m.1, -1023
  %42 = and i32 %ix0.2, 1048575
  %43 = or i32 %42, 1048576
  %44 = and i32 %41, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %51, label %46

; <label>:46                                      ; preds = %40
  %47 = lshr i32 %ix1.1, 31
  %48 = add i32 %47, %43
  %49 = add i32 %48, %43
  %50 = shl i32 %ix1.1, 1
  br label %51

; <label>:51                                      ; preds = %46, %40
  %ix0.3 = phi i32 [ %49, %46 ], [ %43, %40 ]
  %ix1.2 = phi i32 [ %50, %46 ], [ %ix1.1, %40 ]
  %52 = lshr i32 %ix1.2, 31
  %factor = shl nsw i32 %ix0.3, 1
  %53 = or i32 %factor, %52
  %ix1.312 = shl i32 %ix1.2, 1
  br label %54

; <label>:54                                      ; preds = %61, %51
  %ix1.318 = phi i32 [ %ix1.312, %51 ], [ %ix1.3, %61 ]
  %ix1.3.in17 = phi i32 [ %ix1.2, %51 ], [ %ix1.318, %61 ]
  %ix0.416 = phi i32 [ %53, %51 ], [ %64, %61 ]
  %s0.015 = phi i32 [ 0, %51 ], [ %s0.1, %61 ]
  %q.014 = phi i32 [ 0, %51 ], [ %q.1, %61 ]
  %r.013 = phi i32 [ 2097152, %51 ], [ %65, %61 ]
  %55 = add i32 %s0.015, %r.013
  %56 = icmp sgt i32 %55, %ix0.416
  br i1 %56, label %61, label %57

; <label>:57                                      ; preds = %54
  %58 = add i32 %55, %r.013
  %59 = sub nsw i32 %ix0.416, %55
  %60 = add i32 %q.014, %r.013
  br label %61

; <label>:61                                      ; preds = %57, %54
  %q.1 = phi i32 [ %60, %57 ], [ %q.014, %54 ]
  %s0.1 = phi i32 [ %58, %57 ], [ %s0.015, %54 ]
  %ix0.5 = phi i32 [ %59, %57 ], [ %ix0.416, %54 ]
  %62 = lshr i32 %ix1.3.in17, 30
  %63 = and i32 %62, 1
  %factor3 = shl i32 %ix0.5, 1
  %64 = or i32 %factor3, %63
  %65 = lshr i32 %r.013, 1
  %ix1.3 = shl i32 %ix1.318, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %.preheader, label %54

.preheader:                                       ; preds = %82, %61
  %q1.011 = phi i32 [ %q1.1, %82 ], [ 0, %61 ]
  %ix1.410 = phi i32 [ %85, %82 ], [ %ix1.3, %61 ]
  %ix0.69 = phi i32 [ %84, %82 ], [ %64, %61 ]
  %s0.28 = phi i32 [ %s0.4, %82 ], [ %s0.1, %61 ]
  %r.16 = phi i32 [ %86, %82 ], [ -2147483648, %61 ]
  %s1.05 = phi i32 [ %s1.1, %82 ], [ 0, %61 ]
  %67 = add i32 %r.16, %s1.05
  %68 = icmp slt i32 %s0.28, %ix0.69
  br i1 %68, label %72, label %69

; <label>:69                                      ; preds = %.preheader
  %70 = icmp ne i32 %s0.28, %ix0.69
  %71 = icmp ugt i32 %67, %ix1.410
  %or.cond = or i1 %70, %71
  br i1 %or.cond, label %82, label %72

; <label>:72                                      ; preds = %69, %.preheader
  %73 = add i32 %67, %r.16
  %74 = icmp slt i32 %67, 0
  br i1 %74, label %75, label %76

; <label>:75                                      ; preds = %72
  %.lobit = lshr i32 %73, 31
  %.lobit.not = xor i32 %.lobit, 1
  %.s0.2 = add nsw i32 %.lobit.not, %s0.28
  br label %76

; <label>:76                                      ; preds = %75, %72
  %s0.3 = phi i32 [ %s0.28, %72 ], [ %.s0.2, %75 ]
  %77 = icmp ult i32 %ix1.410, %67
  %78 = sext i1 %77 to i32
  %79 = sub i32 %ix0.69, %s0.28
  %ix0.7 = add i32 %79, %78
  %80 = sub i32 %ix1.410, %67
  %81 = add i32 %q1.011, %r.16
  br label %82

; <label>:82                                      ; preds = %76, %69
  %s1.1 = phi i32 [ %73, %76 ], [ %s1.05, %69 ]
  %s0.4 = phi i32 [ %s0.3, %76 ], [ %s0.28, %69 ]
  %ix0.8 = phi i32 [ %ix0.7, %76 ], [ %ix0.69, %69 ]
  %ix1.5 = phi i32 [ %80, %76 ], [ %ix1.410, %69 ]
  %q1.1 = phi i32 [ %81, %76 ], [ %q1.011, %69 ]
  %83 = lshr i32 %ix1.5, 31
  %factor4 = shl i32 %ix0.8, 1
  %84 = or i32 %factor4, %83
  %85 = shl i32 %ix1.5, 1
  %86 = lshr i32 %r.16, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %.preheader

; <label>:88                                      ; preds = %82
  %89 = or i32 %85, %84
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %98, label %91

; <label>:91                                      ; preds = %88
  %92 = icmp eq i32 %q1.1, -1
  br i1 %92, label %93, label %95

; <label>:93                                      ; preds = %91
  %94 = add nsw i32 %q.1, 1
  br label %98

; <label>:95                                      ; preds = %91
  %96 = and i32 %q1.1, 1
  %97 = add i32 %96, %q1.1
  br label %98

; <label>:98                                      ; preds = %95, %93, %88
  %q.3 = phi i32 [ %94, %93 ], [ %q.1, %95 ], [ %q.1, %88 ]
  %q1.2 = phi i32 [ 0, %93 ], [ %97, %95 ], [ %q1.1, %88 ]
  %99 = ashr i32 %q.3, 1
  %100 = lshr i32 %q1.2, 1
  %101 = and i32 %q.3, 1
  %102 = icmp eq i32 %101, 0
  %103 = or i32 %100, -2147483648
  %ix1.6 = select i1 %102, i32 %100, i32 %103
  %104 = shl i32 %41, 19
  %105 = add i32 %104, 1071644672
  %106 = and i32 %105, -1048576
  %107 = add i32 %106, %99
  %108 = zext i32 %107 to i64
  %109 = shl nuw i64 %108, 32
  %110 = zext i32 %ix1.6 to i64
  %111 = or i64 %110, %109
  %112 = bitcast i64 %111 to double
  br label %113

; <label>:113                                     ; preds = %98, %18, %12, %7
  %.0 = phi double [ %9, %7 ], [ %20, %18 ], [ %112, %98 ], [ %x, %12 ]
  ret double %.0
}

define void @srand48(i64 %seed) nounwind uwtable optsize {
  %1 = alloca [3 x i16], align 2
  %2 = getelementptr inbounds [3 x i16]* %1, i64 0, i64 0
  store i16 13070, i16* %2, align 2, !tbaa !8
  %3 = getelementptr inbounds [3 x i16]* %1, i64 0, i64 1
  %4 = trunc i64 %seed to i16
  store i16 %4, i16* %3, align 2, !tbaa !8
  %5 = getelementptr inbounds [3 x i16]* %1, i64 0, i64 2
  %6 = lshr i64 %seed, 16
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %5, align 2, !tbaa !8
  %8 = call i16* @seed48(i16* %2) nounwind optsize
  ret void
}

define i32 @sscanf(i8* %s, i8* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.637], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.637]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.637]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vsscanf(i8* %s, i8* %fmt, %struct.__va_list_tag.637* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define void @_start() nounwind uwtable optsize {
  tail call void @_Exit(i32 1) nounwind optsize
  ret void
}

define i32 @stat(i8* %path, %struct.stat.104* %buf) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint %struct.stat.104* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 195, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @__statfs(i8* %path, %struct.statfs* %buf) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint %struct.statfs* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 266, i64 %1, i64 120, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @__fstatfs(i32 %fd, %struct.statfs* %buf) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.statfs* %buf to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 267, i64 %1, i64 120, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @statvfs(i8* %path, %struct.statvfs* nocapture %buf) nounwind uwtable optsize {
  %kbuf = alloca %struct.statfs, align 8
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint %struct.statfs* %kbuf to i64
  %3 = call i64 (i64, ...)* @__syscall(i64 266, i64 %1, i64 120, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %38, label %7

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 1
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 0
  store i64 %9, i64* %10, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 1
  store i64 %9, i64* %11, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 2
  %13 = load i64* %12, align 8, !tbaa !9
  %14 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 2
  store i64 %13, i64* %14, align 8, !tbaa !9
  %15 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 3
  %16 = load i64* %15, align 8, !tbaa !9
  %17 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 3
  store i64 %16, i64* %17, align 8, !tbaa !9
  %18 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 4
  %19 = load i64* %18, align 8, !tbaa !9
  %20 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 4
  store i64 %19, i64* %20, align 8, !tbaa !9
  %21 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 5
  %22 = load i64* %21, align 8, !tbaa !9
  %23 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 5
  store i64 %22, i64* %23, align 8, !tbaa !9
  %24 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 6
  %25 = load i64* %24, align 8, !tbaa !9
  %26 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 6
  store i64 %25, i64* %26, align 8, !tbaa !9
  %27 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 7
  store i64 0, i64* %27, align 8, !tbaa !9
  %28 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 7, i32 0, i64 0
  %29 = load i32* %28, align 8, !tbaa !6
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 8
  store i64 %30, i64* %31, align 8, !tbaa !5
  %32 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 10
  %33 = load i64* %32, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 9
  store i64 %33, i64* %34, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 8
  %36 = load i64* %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 10
  store i64 %36, i64* %37, align 8, !tbaa !5
  br label %38

; <label>:38                                      ; preds = %7, %0
  %.0 = phi i32 [ 0, %7 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @fstatvfs(i32 %fd, %struct.statvfs* nocapture %buf) nounwind uwtable optsize {
  %kbuf = alloca %struct.statfs, align 8
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.statfs* %kbuf to i64
  %3 = call i64 (i64, ...)* @__syscall(i64 267, i64 %1, i64 120, i64 %2, i32 0, i32 0, i32 0) nounwind optsize
  %4 = call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %38, label %7

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 1
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 0
  store i64 %9, i64* %10, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 1
  store i64 %9, i64* %11, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 2
  %13 = load i64* %12, align 8, !tbaa !9
  %14 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 2
  store i64 %13, i64* %14, align 8, !tbaa !9
  %15 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 3
  %16 = load i64* %15, align 8, !tbaa !9
  %17 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 3
  store i64 %16, i64* %17, align 8, !tbaa !9
  %18 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 4
  %19 = load i64* %18, align 8, !tbaa !9
  %20 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 4
  store i64 %19, i64* %20, align 8, !tbaa !9
  %21 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 5
  %22 = load i64* %21, align 8, !tbaa !9
  %23 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 5
  store i64 %22, i64* %23, align 8, !tbaa !9
  %24 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 6
  %25 = load i64* %24, align 8, !tbaa !9
  %26 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 6
  store i64 %25, i64* %26, align 8, !tbaa !9
  %27 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 7
  store i64 0, i64* %27, align 8, !tbaa !9
  %28 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 7, i32 0, i64 0
  %29 = load i32* %28, align 8, !tbaa !6
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 8
  store i64 %30, i64* %31, align 8, !tbaa !5
  %32 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 10
  %33 = load i64* %32, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 9
  store i64 %33, i64* %34, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.statfs* %kbuf, i64 0, i32 8
  %36 = load i64* %35, align 8, !tbaa !5
  %37 = getelementptr inbounds %struct.statvfs* %buf, i64 0, i32 10
  store i64 %36, i64* %37, align 8, !tbaa !5
  br label %38

; <label>:38                                      ; preds = %7, %0
  %.0 = phi i32 [ 0, %7 ], [ -1, %0 ]
  ret i32 %.0
}

define i32 @__stdio_close(%struct.__FILE_s.642* nocapture %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.642* %f, i64 0, i32 15
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = sext i32 %2 to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 6, i64 %3, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i64 @__stdio_read(%struct.__FILE_s.643* %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %iov = alloca [2 x %struct.iovec.644], align 16
  %__cb = alloca %struct.__ptcb, align 8
  %1 = getelementptr inbounds [2 x %struct.iovec.644]* %iov, i64 0, i64 0, i32 0
  store i8* %buf, i8** %1, align 16, !tbaa !7
  %2 = getelementptr inbounds [2 x %struct.iovec.644]* %iov, i64 0, i64 0, i32 1
  %3 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 12
  %4 = load i64* %3, align 8, !tbaa !5
  %5 = icmp ne i64 %4, 0
  %6 = zext i1 %5 to i64
  %7 = sub i64 %len, %6
  store i64 %7, i64* %2, align 8, !tbaa !5
  %8 = getelementptr inbounds [2 x %struct.iovec.644]* %iov, i64 0, i64 1, i32 0
  %9 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 11
  %10 = load i8** %9, align 8, !tbaa !7
  store i8* %10, i8** %8, align 16, !tbaa !7
  %11 = getelementptr inbounds [2 x %struct.iovec.644]* %iov, i64 0, i64 1, i32 1
  store i64 %4, i64* %11, align 8, !tbaa !5
  %12 = bitcast %struct.__FILE_s.643* %f to i8*
  call void @_pthread_cleanup_push(%struct.__ptcb* %__cb, void (i8*)* @cleanup737, i8* %12) nounwind optsize
  %13 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 15
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = sext i32 %14 to i64
  %16 = ptrtoint [2 x %struct.iovec.644]* %iov to i64
  %17 = call i64 @__syscall_cp(i64 145, i64 %15, i64 %16, i64 2, i64 0, i64 0, i64 0) nounwind optsize
  %18 = call i64 @__syscall_ret(i64 %17) nounwind optsize
  call void @_pthread_cleanup_pop(%struct.__ptcb* %__cb, i32 0) nounwind optsize
  %19 = icmp slt i64 %18, 1
  br i1 %19, label %20, label %30

; <label>:20                                      ; preds = %0
  %21 = and i64 %18, 48
  %22 = xor i64 %21, 16
  %23 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 0
  %24 = load i32* %23, align 4, !tbaa !6
  %25 = zext i32 %24 to i64
  %26 = or i64 %25, %22
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %23, align 4, !tbaa !6
  %28 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 2
  store i8* null, i8** %28, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 1
  store i8* null, i8** %29, align 8, !tbaa !7
  br label %46

; <label>:30                                      ; preds = %0
  %31 = load i64* %2, align 8, !tbaa !5
  %32 = icmp ugt i64 %18, %31
  br i1 %32, label %33, label %46

; <label>:33                                      ; preds = %30
  %34 = sub i64 %18, %31
  %35 = load i8** %9, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 1
  store i8* %35, i8** %36, align 8, !tbaa !7
  %37 = getelementptr inbounds i8* %35, i64 %34
  %38 = getelementptr inbounds %struct.__FILE_s.643* %f, i64 0, i32 2
  store i8* %37, i8** %38, align 8, !tbaa !7
  %39 = load i64* %3, align 8, !tbaa !5
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %46, label %41

; <label>:41                                      ; preds = %33
  %42 = getelementptr inbounds i8* %35, i64 1
  store i8* %42, i8** %36, align 8, !tbaa !7
  %43 = load i8* %35, align 1, !tbaa !0
  %44 = add i64 %len, -1
  %45 = getelementptr inbounds i8* %buf, i64 %44
  store i8 %43, i8* %45, align 1, !tbaa !0
  br label %46

; <label>:46                                      ; preds = %41, %33, %30, %20
  %.0 = phi i64 [ %18, %20 ], [ %18, %30 ], [ %len, %33 ], [ %len, %41 ]
  ret i64 %.0
}

define internal void @cleanup737(i8* %p) nounwind uwtable optsize {
  %1 = getelementptr inbounds i8* %p, i64 128
  %2 = bitcast i8* %1 to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = bitcast i8* %p to %struct.__FILE_s.643*
  tail call void bitcast (void (%struct.__FILE_s.69*)* @__unlockfile to void (%struct.__FILE_s.643*)*)(%struct.__FILE_s.643* %6) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %5, %0
  ret void
}

define i64 @__stdio_seek(%struct.__FILE_s.646* nocapture %f, i64 %off, i32 %whence) nounwind uwtable optsize {
  %ret = alloca i64, align 8
  %1 = getelementptr inbounds %struct.__FILE_s.646* %f, i64 0, i32 15
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = sext i32 %2 to i64
  %4 = ashr i64 %off, 32
  %5 = ptrtoint i64* %ret to i64
  %6 = sext i32 %whence to i64
  %7 = call i64 (i64, ...)* @__syscall(i64 140, i64 %3, i64 %4, i64 %off, i64 %5, i64 %6, i32 0) nounwind optsize
  %8 = call i64 @__syscall_ret(i64 %7) nounwind optsize
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %10, label %._crit_edge

._crit_edge:                                      ; preds = %0
  %.pre = load i64* %ret, align 8, !tbaa !5
  br label %11

; <label>:10                                      ; preds = %0
  store i64 -1, i64* %ret, align 8, !tbaa !5
  br label %11

; <label>:11                                      ; preds = %10, %._crit_edge
  %12 = phi i64 [ %.pre, %._crit_edge ], [ -1, %10 ]
  ret i64 %12
}

define i64 @__stdio_write(%struct.__FILE_s.647* nocapture %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %iovs = alloca [2 x %struct.iovec.648], align 16
  %1 = getelementptr inbounds [2 x %struct.iovec.648]* %iovs, i64 0, i64 0, i32 0
  %2 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 7
  %3 = load i8** %2, align 8, !tbaa !7
  store i8* %3, i8** %1, align 16, !tbaa !7
  %4 = getelementptr inbounds [2 x %struct.iovec.648]* %iovs, i64 0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 5
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = ptrtoint i8* %6 to i64
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %7, %8
  store i64 %9, i64* %4, align 8, !tbaa !5
  %10 = getelementptr inbounds [2 x %struct.iovec.648]* %iovs, i64 0, i64 1, i32 0
  store i8* %buf, i8** %10, align 16, !tbaa !7
  %11 = getelementptr inbounds [2 x %struct.iovec.648]* %iovs, i64 0, i64 1, i32 1
  store i64 %len, i64* %11, align 8, !tbaa !5
  %12 = getelementptr inbounds [2 x %struct.iovec.648]* %iovs, i64 0, i64 0
  %13 = add i64 %9, %len
  %14 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 15
  %15 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 11
  br label %16

; <label>:16                                      ; preds = %62, %0
  %17 = phi i64 [ %len, %0 ], [ %.pre7, %62 ]
  %18 = phi i8* [ %buf, %0 ], [ %.pre6, %62 ]
  %19 = phi i64 [ %9, %0 ], [ %.pre5, %62 ]
  %20 = phi i8* [ %3, %0 ], [ %.pre, %62 ]
  %iov.0 = phi %struct.iovec.648* [ %12, %0 ], [ %iov.1, %62 ]
  %rem.0 = phi i64 [ %13, %0 ], [ %48, %62 ]
  %iovcnt.0 = phi i32 [ 2, %0 ], [ %iovcnt.1, %62 ]
  %21 = load i32* %14, align 4, !tbaa !6
  %22 = sext i32 %21 to i64
  %23 = ptrtoint i8* %20 to i64
  %24 = call i64 @__syscall_cp(i64 4, i64 %22, i64 %23, i64 %19, i64 0, i64 0, i64 0) nounwind optsize
  %25 = call i64 @__syscall_ret(i64 %24) nounwind optsize
  %26 = load i32* %14, align 4, !tbaa !6
  %27 = sext i32 %26 to i64
  %28 = ptrtoint i8* %18 to i64
  %29 = call i64 @__syscall_cp(i64 4, i64 %27, i64 %28, i64 %17, i64 0, i64 0, i64 0) nounwind optsize
  %30 = call i64 @__syscall_ret(i64 %29) nounwind optsize
  %31 = add nsw i64 %30, %25
  %32 = icmp eq i64 %31, %rem.0
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %16
  %34 = load i8** %15, align 8, !tbaa !7
  store i8* %34, i8** %2, align 8, !tbaa !7
  store i8* %34, i8** %5, align 8, !tbaa !7
  br label %69

; <label>:35                                      ; preds = %16
  %36 = icmp slt i64 %31, 0
  br i1 %36, label %37, label %47

; <label>:37                                      ; preds = %35
  %38 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 4
  store i8* null, i8** %38, align 8, !tbaa !7
  store i8* null, i8** %2, align 8, !tbaa !7
  store i8* null, i8** %5, align 8, !tbaa !7
  %39 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 0
  %40 = load i32* %39, align 4, !tbaa !6
  %41 = or i32 %40, 32
  store i32 %41, i32* %39, align 4, !tbaa !6
  %42 = icmp eq i32 %iovcnt.0, 2
  br i1 %42, label %69, label %43

; <label>:43                                      ; preds = %37
  %44 = getelementptr inbounds %struct.iovec.648* %iov.0, i64 0, i32 1
  %45 = load i64* %44, align 8, !tbaa !5
  %46 = sub i64 %len, %45
  br label %69

; <label>:47                                      ; preds = %35
  %48 = sub i64 %rem.0, %31
  %49 = getelementptr inbounds %struct.iovec.648* %iov.0, i64 0, i32 1
  %50 = load i64* %49, align 8, !tbaa !5
  %51 = icmp ugt i64 %31, %50
  br i1 %51, label %52, label %57

; <label>:52                                      ; preds = %47
  %53 = load i8** %15, align 8, !tbaa !7
  store i8* %53, i8** %2, align 8, !tbaa !7
  store i8* %53, i8** %5, align 8, !tbaa !7
  %54 = sub i64 %31, %50
  %55 = getelementptr inbounds %struct.iovec.648* %iov.0, i64 1
  %56 = add nsw i32 %iovcnt.0, -1
  %.phi.trans.insert = getelementptr inbounds %struct.iovec.648* %iov.0, i64 1, i32 1
  %.pre8 = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br label %62

; <label>:57                                      ; preds = %47
  %58 = icmp eq i32 %iovcnt.0, 2
  br i1 %58, label %59, label %62

; <label>:59                                      ; preds = %57
  %60 = load i8** %2, align 8, !tbaa !7
  %61 = getelementptr inbounds i8* %60, i64 %31
  store i8* %61, i8** %2, align 8, !tbaa !7
  br label %62

; <label>:62                                      ; preds = %59, %57, %52
  %63 = phi i64 [ %.pre8, %52 ], [ %50, %59 ], [ %50, %57 ]
  %iov.1 = phi %struct.iovec.648* [ %55, %52 ], [ %iov.0, %59 ], [ %iov.0, %57 ]
  %iovcnt.1 = phi i32 [ %56, %52 ], [ 2, %59 ], [ %iovcnt.0, %57 ]
  %cnt.0 = phi i64 [ %54, %52 ], [ %31, %59 ], [ %31, %57 ]
  %64 = getelementptr inbounds %struct.iovec.648* %iov.1, i64 0, i32 0
  %65 = load i8** %64, align 8, !tbaa !7
  %66 = getelementptr inbounds i8* %65, i64 %cnt.0
  store i8* %66, i8** %64, align 8, !tbaa !7
  %67 = getelementptr inbounds %struct.iovec.648* %iov.1, i64 0, i32 1
  %68 = sub i64 %63, %cnt.0
  store i64 %68, i64* %67, align 8, !tbaa !5
  %.pre = load i8** %1, align 16, !tbaa !7
  %.pre5 = load i64* %4, align 8, !tbaa !5
  %.pre6 = load i8** %10, align 16, !tbaa !7
  %.pre7 = load i64* %11, align 8, !tbaa !5
  br label %16

; <label>:69                                      ; preds = %43, %37, %33
  %.0 = phi i64 [ %len, %33 ], [ %46, %43 ], [ 0, %37 ]
  ret i64 %.0
}

define i64 @__stdout_write(%struct.__FILE_s.647* %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %tio = alloca %struct.termios.651, align 4
  %1 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 9
  store {}* bitcast (i64 (%struct.__FILE_s.647*, i8*, i64)* @__stdio_write to {}*), {}** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 0
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = and i32 %3, 64
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 15
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = sext i32 %8 to i64
  %10 = ptrtoint %struct.termios.651* %tio to i64
  %11 = call i64 (i64, ...)* @__syscall(i64 54, i64 %9, i64 21505, i64 %10, i32 0, i32 0, i32 0) nounwind optsize
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %15, label %13

; <label>:13                                      ; preds = %6
  %14 = getelementptr inbounds %struct.__FILE_s.647* %f, i64 0, i32 20
  store i8 -1, i8* %14, align 1, !tbaa !0
  br label %15

; <label>:15                                      ; preds = %13, %6, %0
  %16 = call i64 @__stdio_write(%struct.__FILE_s.647* %f, i8* %buf, i64 %len) nounwind optsize
  ret i64 %16
}

define i32 @stime(i64* nocapture %t) nounwind uwtable optsize {
  %tv = alloca %struct.timeval.572, align 8
  %1 = getelementptr inbounds %struct.timeval.572* %tv, i64 0, i32 0
  %2 = load i64* %t, align 8, !tbaa !5
  store i64 %2, i64* %1, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.timeval.572* %tv, i64 0, i32 1
  store i64 0, i64* %3, align 8, !tbaa !5
  %4 = call i32 @settimeofday(%struct.timeval.572* %tv, i8* null) nounwind optsize
  ret i32 %4
}

define i8* @__stpcpy(i8* %d, i8* %s) nounwind uwtable optsize {
  %1 = ptrtoint i8* %s to i64
  %2 = ptrtoint i8* %d to i64
  %3 = xor i64 %1, %2
  %4 = and i64 %3, 7
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %.preheader11, label %.preheader

.preheader11:                                     ; preds = %12, %0
  %.02 = phi i8* [ %13, %12 ], [ %s, %0 ]
  %.01 = phi i8* [ %14, %12 ], [ %d, %0 ]
  %6 = load i8* %.02, align 1, !tbaa !0
  store i8 %6, i8* %.01, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %.preheader11
  %9 = ptrtoint i8* %.02 to i64
  %10 = and i64 %9, 7
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %.critedge, label %12

; <label>:12                                      ; preds = %8
  %13 = getelementptr inbounds i8* %.02, i64 1
  %14 = getelementptr inbounds i8* %.01, i64 1
  br label %.preheader11

.critedge:                                        ; preds = %8, %.preheader11
  %15 = load i8* %.02, align 1, !tbaa !0
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %.loopexit, label %17

; <label>:17                                      ; preds = %.critedge
  %18 = bitcast i8* %.01 to i64*
  %19 = bitcast i8* %.02 to i64*
  %20 = load i64* %19, align 8, !tbaa !5
  %21 = add i64 %20, -72340172838076673
  %22 = and i64 %20, -9187201950435737472
  %23 = xor i64 %22, -9187201950435737472
  %24 = and i64 %23, %21
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %.lr.ph8, label %._crit_edge

.lr.ph8:                                          ; preds = %.lr.ph8, %17
  %26 = phi i64 [ %29, %.lr.ph8 ], [ %20, %17 ]
  %wd.07 = phi i64* [ %28, %.lr.ph8 ], [ %18, %17 ]
  %ws.06 = phi i64* [ %27, %.lr.ph8 ], [ %19, %17 ]
  %27 = getelementptr inbounds i64* %ws.06, i64 1
  %28 = getelementptr inbounds i64* %wd.07, i64 1
  store i64 %26, i64* %wd.07, align 8, !tbaa !5
  %29 = load i64* %27, align 8, !tbaa !5
  %30 = add i64 %29, -72340172838076673
  %31 = and i64 %29, -9187201950435737472
  %32 = xor i64 %31, -9187201950435737472
  %33 = and i64 %32, %30
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %.lr.ph8, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph8, %17
  %wd.0.lcssa = phi i64* [ %18, %17 ], [ %28, %.lr.ph8 ]
  %ws.0.lcssa = phi i64* [ %19, %17 ], [ %27, %.lr.ph8 ]
  %35 = bitcast i64* %wd.0.lcssa to i8*
  %36 = bitcast i64* %ws.0.lcssa to i8*
  br label %.preheader

.preheader:                                       ; preds = %._crit_edge, %0
  %.13.ph = phi i8* [ %s, %0 ], [ %36, %._crit_edge ]
  %.1.ph = phi i8* [ %d, %0 ], [ %35, %._crit_edge ]
  %37 = load i8* %.13.ph, align 1, !tbaa !0
  store i8 %37, i8* %.1.ph, align 1, !tbaa !0
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.15 = phi i8* [ %40, %.lr.ph ], [ %.1.ph, %.preheader ]
  %.134 = phi i8* [ %39, %.lr.ph ], [ %.13.ph, %.preheader ]
  %39 = getelementptr inbounds i8* %.134, i64 1
  %40 = getelementptr inbounds i8* %.15, i64 1
  %41 = load i8* %39, align 1, !tbaa !0
  store i8 %41, i8* %40, align 1, !tbaa !0
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %.loopexit, label %.lr.ph

.loopexit:                                        ; preds = %.lr.ph, %.preheader, %.critedge
  %.0 = phi i8* [ %.01, %.critedge ], [ %.1.ph, %.preheader ], [ %40, %.lr.ph ]
  ret i8* %.0
}

define i8* @__stpncpy(i8* %d, i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = ptrtoint i8* %s to i64
  %2 = ptrtoint i8* %d to i64
  %3 = xor i64 %1, %2
  %4 = and i64 %3, 7
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %.preheader9, label %.preheader

.preheader9:                                      ; preds = %13, %0
  %.06 = phi i64 [ %14, %13 ], [ %n, %0 ]
  %.04 = phi i8* [ %15, %13 ], [ %s, %0 ]
  %.0 = phi i8* [ %16, %13 ], [ %d, %0 ]
  %6 = ptrtoint i8* %.04 to i64
  %7 = and i64 %6, 7
  %8 = icmp eq i64 %7, 0
  %9 = icmp eq i64 %.06, 0
  %or.cond = or i1 %8, %9
  br i1 %or.cond, label %.critedge, label %10

; <label>:10                                      ; preds = %.preheader9
  %11 = load i8* %.04, align 1, !tbaa !0
  store i8 %11, i8* %.0, align 1, !tbaa !0
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %.critedge, label %13

; <label>:13                                      ; preds = %10
  %14 = add i64 %.06, -1
  %15 = getelementptr inbounds i8* %.04, i64 1
  %16 = getelementptr inbounds i8* %.0, i64 1
  br label %.preheader9

.critedge:                                        ; preds = %10, %.preheader9
  br i1 %9, label %.critedge3, label %17

; <label>:17                                      ; preds = %.critedge
  %18 = load i8* %.04, align 1, !tbaa !0
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %.critedge3, label %20

; <label>:20                                      ; preds = %17
  %21 = bitcast i8* %.0 to i64*
  %22 = bitcast i8* %.04 to i64*
  br label %23

; <label>:23                                      ; preds = %32, %20
  %ws.0 = phi i64* [ %22, %20 ], [ %34, %32 ]
  %wd.0 = phi i64* [ %21, %20 ], [ %35, %32 ]
  %.17 = phi i64 [ %.06, %20 ], [ %33, %32 ]
  %24 = icmp ugt i64 %.17, 7
  br i1 %24, label %25, label %.critedge2

; <label>:25                                      ; preds = %23
  %26 = load i64* %ws.0, align 8, !tbaa !5
  %27 = add i64 %26, -72340172838076673
  %28 = and i64 %26, -9187201950435737472
  %29 = xor i64 %28, -9187201950435737472
  %30 = and i64 %29, %27
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %.critedge2

; <label>:32                                      ; preds = %25
  store i64 %26, i64* %wd.0, align 8, !tbaa !5
  %33 = add i64 %.17, -8
  %34 = getelementptr inbounds i64* %ws.0, i64 1
  %35 = getelementptr inbounds i64* %wd.0, i64 1
  br label %23

.critedge2:                                       ; preds = %25, %23
  %36 = bitcast i64* %wd.0 to i8*
  %37 = bitcast i64* %ws.0 to i8*
  br label %.preheader

.preheader:                                       ; preds = %42, %.critedge2, %0
  %.28 = phi i64 [ %43, %42 ], [ %n, %0 ], [ %.17, %.critedge2 ]
  %.15 = phi i8* [ %44, %42 ], [ %s, %0 ], [ %37, %.critedge2 ]
  %.1 = phi i8* [ %45, %42 ], [ %d, %0 ], [ %36, %.critedge2 ]
  %38 = icmp eq i64 %.28, 0
  br i1 %38, label %.critedge3, label %39

; <label>:39                                      ; preds = %.preheader
  %40 = load i8* %.15, align 1, !tbaa !0
  store i8 %40, i8* %.1, align 1, !tbaa !0
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %.critedge3, label %42

; <label>:42                                      ; preds = %39
  %43 = add i64 %.28, -1
  %44 = getelementptr inbounds i8* %.15, i64 1
  %45 = getelementptr inbounds i8* %.1, i64 1
  br label %.preheader

.critedge3:                                       ; preds = %39, %.preheader, %17, %.critedge
  %.3 = phi i64 [ %.06, %17 ], [ 0, %.critedge ], [ %.28, %39 ], [ 0, %.preheader ]
  %.2 = phi i8* [ %.0, %17 ], [ %.0, %.critedge ], [ %.1, %39 ], [ %.1, %.preheader ]
  %46 = tail call i8* @memset(i8* %.2, i32 0, i64 %.3) nounwind optsize
  ret i8* %.2
}

define i32 @strcasecmp_l(i8* %l, i8* %r, %struct.__locale.653* nocapture %loc) nounwind uwtable optsize {
  %1 = tail call i32 @strcasecmp(i8* %l, i8* %r) nounwind optsize
  ret i32 %1
}

define i32 @strcasecmp(i8* nocapture %_l, i8* nocapture %_r) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %.critedge2, %0
  %l.0 = phi i8* [ %_l, %0 ], [ %16, %.critedge2 ]
  %r.0 = phi i8* [ %_r, %0 ], [ %17, %.critedge2 ]
  %2 = load i8* %l.0, align 1, !tbaa !0
  %3 = zext i8 %2 to i32
  %4 = icmp eq i8 %2, 0
  br i1 %4, label %.critedge, label %5

; <label>:5                                       ; preds = %1
  %6 = load i8* %r.0, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = icmp eq i8 %2, %6
  br i1 %9, label %.critedge2, label %10

; <label>:10                                      ; preds = %8
  %11 = tail call i32 @tolower(i32 %3) nounwind optsize
  %12 = load i8* %r.0, align 1, !tbaa !0
  %13 = zext i8 %12 to i32
  %14 = tail call i32 @tolower(i32 %13) nounwind optsize
  %15 = icmp eq i32 %11, %14
  br i1 %15, label %.critedge2, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %10
  %.pre = load i8* %l.0, align 1, !tbaa !0
  br label %.critedge

.critedge2:                                       ; preds = %10, %8
  %16 = getelementptr inbounds i8* %l.0, i64 1
  %17 = getelementptr inbounds i8* %r.0, i64 1
  br label %1

.critedge:                                        ; preds = %..critedge_crit_edge, %5, %1
  %18 = phi i8 [ %.pre, %..critedge_crit_edge ], [ %2, %5 ], [ 0, %1 ]
  %19 = zext i8 %18 to i32
  %20 = tail call i32 @tolower(i32 %19) nounwind optsize
  %21 = load i8* %r.0, align 1, !tbaa !0
  %22 = zext i8 %21 to i32
  %23 = tail call i32 @tolower(i32 %22) nounwind optsize
  %24 = sub nsw i32 %20, %23
  ret i32 %24
}

define i8* @strcasestr(i8* %h, i8* %n) nounwind uwtable optsize {
  %1 = tail call i8* @strstr(i8* %h, i8* %n) nounwind optsize
  ret i8* %1
}

define i8* @strcat(i8* %dest, i8* %src) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %dest) nounwind optsize
  %2 = getelementptr inbounds i8* %dest, i64 %1
  %3 = tail call i8* @strcpy(i8* %2, i8* %src) nounwind optsize
  ret i8* %dest
}

define i8* @strchrnul(i8* %s, i32 %c) nounwind uwtable optsize {
  %1 = tail call i8* @strchr(i8* %s, i32 %c) nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @strlen(i8* %s) nounwind optsize
  %5 = getelementptr inbounds i8* %s, i64 %4
  br label %6

; <label>:6                                       ; preds = %3, %0
  %7 = phi i8* [ %5, %3 ], [ %1, %0 ]
  ret i8* %7
}

define i8* @strchr(i8* %s, i32 %c) nounwind uwtable optsize {
  %1 = and i32 %c, 255
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %.preheader

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @strlen(i8* %s) nounwind optsize
  %5 = getelementptr inbounds i8* %s, i64 %4
  br label %.loopexit

.preheader:                                       ; preds = %15, %0
  %.01 = phi i8* [ %16, %15 ], [ %s, %0 ]
  %6 = ptrtoint i8* %.01 to i64
  %7 = and i64 %6, 7
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %17, label %9

; <label>:9                                       ; preds = %.preheader
  %10 = load i8* %.01, align 1, !tbaa !0
  %11 = zext i8 %10 to i32
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %.loopexit, label %13

; <label>:13                                      ; preds = %9
  %14 = icmp eq i8 %10, 0
  br i1 %14, label %.loopexit, label %15

; <label>:15                                      ; preds = %13
  %16 = getelementptr inbounds i8* %.01, i64 1
  br label %.preheader

; <label>:17                                      ; preds = %.preheader
  %18 = zext i32 %1 to i64
  %19 = mul i64 %18, 72340172838076673
  %20 = bitcast i8* %.01 to i64*
  br label %21

; <label>:21                                      ; preds = %36, %17
  %w.0 = phi i64* [ %20, %17 ], [ %37, %36 ]
  %22 = load i64* %w.0, align 8, !tbaa !5
  %23 = add i64 %22, -72340172838076673
  %24 = and i64 %22, -9187201950435737472
  %25 = xor i64 %24, -9187201950435737472
  %26 = and i64 %25, %23
  %27 = icmp eq i64 %26, 0
  %28 = trunc i64 %22 to i8
  br i1 %27, label %29, label %.critedge

; <label>:29                                      ; preds = %21
  %30 = xor i64 %22, %19
  %31 = add i64 %30, -72340172838076673
  %32 = and i64 %30, -9187201950435737472
  %33 = xor i64 %32, -9187201950435737472
  %34 = and i64 %33, %31
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %.critedge

; <label>:36                                      ; preds = %29
  %37 = getelementptr inbounds i64* %w.0, i64 1
  br label %21

.critedge:                                        ; preds = %29, %21
  %38 = bitcast i64* %w.0 to i8*
  br label %39

; <label>:39                                      ; preds = %45, %.critedge
  %40 = phi i8 [ %28, %.critedge ], [ %.pre, %45 ]
  %.1 = phi i8* [ %38, %.critedge ], [ %46, %45 ]
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %.loopexit, label %42

; <label>:42                                      ; preds = %39
  %43 = zext i8 %40 to i32
  %44 = icmp eq i32 %43, %1
  br i1 %44, label %.loopexit, label %45

; <label>:45                                      ; preds = %42
  %46 = getelementptr inbounds i8* %.1, i64 1
  %.pre = load i8* %46, align 1, !tbaa !0
  br label %39

.loopexit:                                        ; preds = %42, %39, %13, %9, %3
  %.0 = phi i8* [ %5, %3 ], [ null, %39 ], [ %.1, %42 ], [ null, %13 ], [ %.01, %9 ]
  ret i8* %.0
}

define i32 @strcmp(i8* nocapture %l, i8* nocapture %r) nounwind uwtable readonly optsize {
  %1 = load i8* %l, align 1, !tbaa !0
  %2 = load i8* %r, align 1, !tbaa !0
  %3 = icmp ne i8 %1, %2
  %4 = icmp eq i8 %1, 0
  %or.cond5 = or i1 %3, %4
  %5 = icmp eq i8 %2, 0
  %or.cond36 = or i1 %or.cond5, %5
  br i1 %or.cond36, label %.critedge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.08 = phi i8* [ %6, %.lr.ph ], [ %l, %0 ]
  %.027 = phi i8* [ %7, %.lr.ph ], [ %r, %0 ]
  %6 = getelementptr inbounds i8* %.08, i64 1
  %7 = getelementptr inbounds i8* %.027, i64 1
  %8 = load i8* %6, align 1, !tbaa !0
  %9 = load i8* %7, align 1, !tbaa !0
  %10 = icmp ne i8 %8, %9
  %11 = icmp eq i8 %8, 0
  %or.cond = or i1 %10, %11
  %12 = icmp eq i8 %9, 0
  %or.cond3 = or i1 %or.cond, %12
  br i1 %or.cond3, label %.critedge, label %.lr.ph

.critedge:                                        ; preds = %.lr.ph, %0
  %.lcssa4 = phi i8 [ %2, %0 ], [ %9, %.lr.ph ]
  %.lcssa = phi i8 [ %1, %0 ], [ %8, %.lr.ph ]
  %13 = zext i8 %.lcssa to i32
  %14 = zext i8 %.lcssa4 to i32
  %15 = sub nsw i32 %13, %14
  ret i32 %15
}

define i32 @strcoll_l(i8* %l, i8* %r, %struct.__locale.654* nocapture %loc) nounwind uwtable optsize {
  %1 = tail call i32 @strcoll(i8* %l, i8* %r) nounwind optsize
  ret i32 %1
}

define i32 @strcoll(i8* %l, i8* %r) nounwind uwtable optsize {
  %1 = tail call i32 @strcmp(i8* %l, i8* %r) nounwind optsize
  ret i32 %1
}

define i8* @strcpy(i8* %dest, i8* %src) nounwind uwtable optsize {
  %1 = tail call i8* @__stpcpy(i8* %dest, i8* %src) nounwind optsize
  ret i8* %dest
}

define i64 @strcspn(i8* %s, i8* nocapture %c) nounwind uwtable optsize {
  %byteset = alloca [4 x i64], align 16
  %1 = load i8* %c, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = call i64 @strlen(i8* %s) nounwind optsize
  br label %51

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %c, i64 1
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %5
  %10 = sext i8 %1 to i32
  %11 = call i8* @strchr(i8* %s, i32 %10) nounwind optsize
  %12 = icmp eq i8* %11, null
  br i1 %12, label %17, label %13

; <label>:13                                      ; preds = %9
  %14 = ptrtoint i8* %11 to i64
  %15 = ptrtoint i8* %s to i64
  %16 = sub i64 %14, %15
  br label %51

; <label>:17                                      ; preds = %9
  %18 = call i64 @strlen(i8* %s) nounwind optsize
  br label %51

; <label>:19                                      ; preds = %5
  %20 = bitcast [4 x i64]* %byteset to i8*
  %21 = call i8* @memset(i8* %20, i32 0, i64 32) nounwind optsize
  %22 = load i8* %c, align 1, !tbaa !0
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %.critedge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %19
  %24 = phi i8 [ %33, %.lr.ph ], [ %22, %19 ]
  %.034 = phi i8* [ %32, %.lr.ph ], [ %c, %19 ]
  %25 = zext i8 %24 to i64
  %26 = and i64 %25, 63
  %27 = shl i64 1, %26
  %28 = lshr i64 %25, 6
  %29 = getelementptr inbounds [4 x i64]* %byteset, i64 0, i64 %28
  %30 = load i64* %29, align 8, !tbaa !5
  %31 = or i64 %30, %27
  store i64 %31, i64* %29, align 8, !tbaa !5
  %32 = getelementptr inbounds i8* %.034, i64 1
  %33 = load i8* %32, align 1, !tbaa !0
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %.critedge, label %.lr.ph

.critedge:                                        ; preds = %46, %.lr.ph, %19
  %.02 = phi i8* [ %47, %46 ], [ %s, %.lr.ph ], [ %s, %19 ]
  %35 = load i8* %.02, align 1, !tbaa !0
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %.critedge1, label %37

; <label>:37                                      ; preds = %.critedge
  %38 = zext i8 %35 to i64
  %39 = lshr i64 %38, 6
  %40 = getelementptr inbounds [4 x i64]* %byteset, i64 0, i64 %39
  %41 = load i64* %40, align 8, !tbaa !5
  %42 = and i64 %38, 63
  %43 = shl i64 1, %42
  %44 = and i64 %41, %43
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %.critedge1

; <label>:46                                      ; preds = %37
  %47 = getelementptr inbounds i8* %.02, i64 1
  br label %.critedge

.critedge1:                                       ; preds = %37, %.critedge
  %48 = ptrtoint i8* %.02 to i64
  %49 = ptrtoint i8* %s to i64
  %50 = sub i64 %48, %49
  br label %51

; <label>:51                                      ; preds = %.critedge1, %17, %13, %3
  %.0 = phi i64 [ %50, %.critedge1 ], [ %4, %3 ], [ %16, %13 ], [ %18, %17 ]
  ret i64 %.0
}

define i8* @__strdup(i8* %s) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %s) nounwind optsize
  %2 = add i64 %1, 1
  %3 = tail call i8* @malloc(i64 %2) optsize
  %4 = icmp eq i8* %3, null
  br i1 %4, label %7, label %5

; <label>:5                                       ; preds = %0
  %6 = tail call i8* @memcpy(i8* %3, i8* %s, i64 %2) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %5, %0
  %.0 = phi i8* [ %6, %5 ], [ null, %0 ]
  ret i8* %.0
}

define i8* @strerror_l(i32 %err, %struct.__locale.655* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i8* @strerror(i32 %err) nounwind optsize
  ret i8* %1
}

define i8* @strerror(i32 %e) nounwind uwtable readonly optsize {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %indvars.iv = phi i64 [ %indvars.iv.next, %10 ], [ 0, %0 ]
  %i.0 = phi i32 [ %11, %10 ], [ 0, %0 ]
  %2 = trunc i64 %indvars.iv to i32
  %3 = icmp eq i32 %2, 84
  br i1 %3, label %.preheader, label %5

.critedge.preheader:                              ; preds = %5
  %4 = icmp eq i32 %i.0, 0
  br i1 %4, label %.critedge._crit_edge, label %.preheader

; <label>:5                                       ; preds = %1
  %6 = getelementptr inbounds [85 x i8]* @errid, i64 0, i64 %indvars.iv
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = zext i8 %7 to i32
  %9 = icmp eq i32 %8, %e
  br i1 %9, label %.critedge.preheader, label %10

; <label>:10                                      ; preds = %5
  %indvars.iv.next = add i64 %indvars.iv, 1
  %11 = add nsw i32 %i.0, 1
  br label %1

.preheader:                                       ; preds = %.critedge, %.critedge.preheader, %1
  %i.12 = phi i32 [ %16, %.critedge ], [ %i.0, %.critedge.preheader ], [ 84, %1 ]
  %s.01 = phi i8* [ %15, %.critedge ], [ getelementptr inbounds ([1862 x i8]* @errmsg, i64 0, i64 0), %.critedge.preheader ], [ getelementptr inbounds ([1862 x i8]* @errmsg, i64 0, i64 0), %1 ]
  br label %12

; <label>:12                                      ; preds = %12, %.preheader
  %s.1 = phi i8* [ %15, %12 ], [ %s.01, %.preheader ]
  %13 = load i8* %s.1, align 1, !tbaa !0
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds i8* %s.1, i64 1
  br i1 %14, label %.critedge, label %12

.critedge:                                        ; preds = %12
  %16 = add nsw i32 %i.12, -1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %.critedge._crit_edge, label %.preheader

.critedge._crit_edge:                             ; preds = %.critedge, %.critedge.preheader
  %s.0.lcssa = phi i8* [ getelementptr inbounds ([1862 x i8]* @errmsg, i64 0, i64 0), %.critedge.preheader ], [ %15, %.critedge ]
  ret i8* %s.0.lcssa
}

define i32 @strerror_r(i32 %err, i8* %buf, i64 %buflen) nounwind uwtable optsize {
  %1 = tail call i8* @strerror(i32 %err) nounwind optsize
  %2 = tail call i64 @strlen(i8* %1) nounwind optsize
  %3 = icmp ult i64 %2, %buflen
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %0
  %5 = tail call i8* @strcpy(i8* %buf, i8* %1) nounwind optsize
  br label %6

; <label>:6                                       ; preds = %4, %0
  %.0 = phi i32 [ 0, %4 ], [ 34, %0 ]
  ret i32 %.0
}

define i64 @strftime_l(i8* %s, i64 %n, i8* %f, %struct.tm.656* %tm, %struct.__locale.657* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i64 @strftime(i8* %s, i64 %n, i8* %f, %struct.tm.656* %tm) nounwind optsize
  ret i64 %1
}

define i64 @strftime(i8* %s, i64 %n, i8* nocapture %f, %struct.tm.656* %tm) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 6
  %2 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 4
  %3 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 5
  %4 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 3
  %5 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 2
  %6 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 7
  %7 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 1
  %8 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 0
  %9 = getelementptr inbounds %struct.tm.656* %tm, i64 0, i32 8
  br label %10

; <label>:10                                      ; preds = %.loopexit8, %0
  %.02 = phi i8* [ %f, %0 ], [ %143, %.loopexit8 ]
  %l.0 = phi i64 [ 0, %0 ], [ %l.1, %.loopexit8 ]
  %11 = load i8* %.02, align 1, !tbaa !0
  %12 = icmp ne i8 %11, 0
  %13 = icmp ult i64 %l.0, %n
  %or.cond3 = and i1 %12, %13
  br i1 %or.cond3, label %14, label %.critedge

; <label>:14                                      ; preds = %10
  %15 = icmp eq i8 %11, 37
  br i1 %15, label %.preheader, label %.loopexit4

.preheader:                                       ; preds = %.preheader, %.preheader, %14
  %.1 = phi i8* [ %.02, %14 ], [ %16, %.preheader ], [ %16, %.preheader ]
  %16 = getelementptr inbounds i8* %.1, i64 1
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = sext i8 %17 to i32
  switch i32 %18, label %.loopexit [
    i32 37, label %.loopexit4
    i32 69, label %.preheader
    i32 79, label %.preheader
    i32 97, label %19
    i32 65, label %22
    i32 104, label %25
    i32 98, label %25
    i32 66, label %28
    i32 99, label %.loopexit5
    i32 67, label %31
    i32 100, label %35
    i32 68, label %.loopexit6
    i32 101, label %37
    i32 70, label %138
    i32 103, label %.loopexit7
    i32 71, label %123
    i32 72, label %39
    i32 73, label %41
    i32 106, label %47
    i32 109, label %50
    i32 77, label %53
    i32 110, label %55
    i32 112, label %58
    i32 114, label %136
    i32 82, label %62
    i32 83, label %63
    i32 116, label %65
    i32 84, label %68
    i32 117, label %69
    i32 85, label %.loopexit8
    i32 86, label %.loopexit8
    i32 87, label %.loopexit8
    i32 119, label %73
    i32 120, label %75
    i32 88, label %76
    i32 121, label %77
    i32 89, label %80
    i32 122, label %83
    i32 90, label %102
  ]

; <label>:19                                      ; preds = %.preheader
  %20 = load i32* %1, align 4, !tbaa !6
  %21 = add nsw i32 %20, 131072
  br label %129

; <label>:22                                      ; preds = %.preheader
  %23 = load i32* %1, align 4, !tbaa !6
  %24 = add nsw i32 %23, 131079
  br label %129

; <label>:25                                      ; preds = %.preheader, %.preheader
  %26 = load i32* %2, align 4, !tbaa !6
  %27 = add nsw i32 %26, 131086
  br label %129

; <label>:28                                      ; preds = %.preheader
  %29 = load i32* %2, align 4, !tbaa !6
  %30 = add nsw i32 %29, 131098
  br label %129

; <label>:31                                      ; preds = %.preheader
  %32 = load i32* %3, align 4, !tbaa !6
  %33 = add nsw i32 %32, 1900
  %34 = sdiv i32 %33, 100
  br label %123

; <label>:35                                      ; preds = %.preheader
  %36 = load i32* %4, align 4, !tbaa !6
  br label %123

; <label>:37                                      ; preds = %.preheader
  %38 = load i32* %4, align 4, !tbaa !6
  br label %123

; <label>:39                                      ; preds = %.preheader
  %40 = load i32* %5, align 4, !tbaa !6
  br label %123

; <label>:41                                      ; preds = %.preheader
  %42 = load i32* %5, align 4, !tbaa !6
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %123, label %44

; <label>:44                                      ; preds = %41
  %45 = add nsw i32 %42, -12
  %46 = icmp sgt i32 %42, 12
  %. = select i1 %46, i32 %45, i32 %42
  br label %123

; <label>:47                                      ; preds = %.preheader
  %48 = load i32* %6, align 4, !tbaa !6
  %49 = add nsw i32 %48, 1
  br label %123

; <label>:50                                      ; preds = %.preheader
  %51 = load i32* %2, align 4, !tbaa !6
  %52 = add nsw i32 %51, 1
  br label %123

; <label>:53                                      ; preds = %.preheader
  %54 = load i32* %7, align 4, !tbaa !6
  br label %123

; <label>:55                                      ; preds = %.preheader
  %56 = add i64 %l.0, 1
  %57 = getelementptr inbounds i8* %s, i64 %l.0
  store i8 10, i8* %57, align 1, !tbaa !0
  br label %.loopexit8

; <label>:58                                      ; preds = %.preheader
  %59 = load i32* %5, align 4, !tbaa !6
  %60 = icmp sgt i32 %59, 11
  %61 = select i1 %60, i32 131111, i32 131110
  br label %129

; <label>:62                                      ; preds = %.preheader
  br label %138

; <label>:63                                      ; preds = %.preheader
  %64 = load i32* %8, align 4, !tbaa !6
  br label %123

; <label>:65                                      ; preds = %.preheader
  %66 = add i64 %l.0, 1
  %67 = getelementptr inbounds i8* %s, i64 %l.0
  store i8 9, i8* %67, align 1, !tbaa !0
  br label %.loopexit8

; <label>:68                                      ; preds = %.preheader
  br label %138

; <label>:69                                      ; preds = %.preheader
  %70 = load i32* %1, align 4, !tbaa !6
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, i32 7, i32 %70
  br label %123

; <label>:73                                      ; preds = %.preheader
  %74 = load i32* %1, align 4, !tbaa !6
  br label %123

; <label>:75                                      ; preds = %.preheader
  br label %136

; <label>:76                                      ; preds = %.preheader
  br label %136

; <label>:77                                      ; preds = %.preheader
  %78 = load i32* %3, align 4, !tbaa !6
  %79 = srem i32 %78, 100
  br label %123

; <label>:80                                      ; preds = %.preheader
  %81 = load i32* %3, align 4, !tbaa !6
  %82 = add nsw i32 %81, 1900
  br label %123

; <label>:83                                      ; preds = %.preheader
  %84 = load i32* %9, align 4, !tbaa !6
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %.loopexit8, label %86

; <label>:86                                      ; preds = %83
  %87 = load i64* @__timezone, align 8, !tbaa !5
  %88 = icmp ne i32 %84, 0
  %89 = load i32* @__dst_offset, align 4, !tbaa !6
  %90 = zext i32 %89 to i64
  %.op = sub i64 0, %90
  %.neg = select i1 %88, i64 %.op, i64 0
  %91 = sub i64 %.neg, %87
  %92 = trunc i64 %91 to i32
  %93 = getelementptr inbounds i8* %s, i64 %l.0
  %94 = sub i64 %n, %l.0
  %95 = sdiv i32 %92, 3600
  %96 = srem i32 %92, 3600
  %97 = tail call i32 @abs(i32 %96) nounwind optsize
  %98 = sdiv i32 %97, 60
  %99 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %93, i64 %94, i8* getelementptr inbounds ([10 x i8]* @.str9, i64 0, i64 0), i32 %95, i32 %98) nounwind optsize
  %100 = sext i32 %99 to i64
  %101 = add i64 %100, %l.0
  br label %.loopexit8

; <label>:102                                     ; preds = %.preheader
  %103 = load i32* %9, align 4, !tbaa !6
  %104 = icmp sgt i32 %103, -1
  %105 = load i8** getelementptr inbounds ([2 x i8*]* @__tzname, i64 0, i64 0), align 8, !tbaa !7
  %106 = icmp ne i8* %105, null
  %or.cond = and i1 %104, %106
  br i1 %or.cond, label %107, label %.loopexit8

; <label>:107                                     ; preds = %102
  %108 = load i8* %105, align 1, !tbaa !0
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %.loopexit8, label %110

; <label>:110                                     ; preds = %107
  %111 = getelementptr inbounds i8* %s, i64 %l.0
  %112 = sub i64 %n, %l.0
  %113 = icmp ne i32 %103, 0
  %114 = zext i1 %113 to i64
  %115 = getelementptr inbounds [2 x i8*]* @__tzname, i64 0, i64 %114
  %116 = load i8** %115, align 8, !tbaa !7
  %117 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %111, i64 %112, i8* getelementptr inbounds ([3 x i8]* @.str10, i64 0, i64 0), i8* %116) nounwind optsize
  %118 = sext i32 %117 to i64
  %119 = add i64 %118, %l.0
  br label %.loopexit8

.loopexit4:                                       ; preds = %.preheader, %14
  %120 = phi i8 [ %11, %14 ], [ %17, %.preheader ]
  %.2 = phi i8* [ %.02, %14 ], [ %16, %.preheader ]
  %121 = add i64 %l.0, 1
  %122 = getelementptr inbounds i8* %s, i64 %l.0
  store i8 %120, i8* %122, align 1, !tbaa !0
  br label %.loopexit8

.loopexit7:                                       ; preds = %.preheader
  br label %123

; <label>:123                                     ; preds = %.loopexit7, %80, %77, %73, %69, %63, %53, %50, %47, %44, %41, %39, %37, %35, %31, %.preheader
  %val.1 = phi i32 [ %82, %80 ], [ %79, %77 ], [ %74, %73 ], [ %64, %63 ], [ %54, %53 ], [ %52, %50 ], [ %49, %47 ], [ %40, %39 ], [ %38, %37 ], [ %36, %35 ], [ %34, %31 ], [ 12, %41 ], [ %., %44 ], [ %72, %69 ], [ 0, %.loopexit7 ], [ 0, %.preheader ]
  %fmt.0 = phi i8* [ getelementptr inbounds ([5 x i8]* @.str4, i64 0, i64 0), %80 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %77 ], [ getelementptr inbounds ([3 x i8]* @.str8, i64 0, i64 0), %73 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %63 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %53 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %50 ], [ getelementptr inbounds ([5 x i8]* @.str5, i64 0, i64 0), %47 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %39 ], [ getelementptr inbounds ([4 x i8]* @.str2770, i64 0, i64 0), %37 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %35 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %31 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %41 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %44 ], [ getelementptr inbounds ([3 x i8]* @.str8, i64 0, i64 0), %69 ], [ getelementptr inbounds ([5 x i8]* @.str768, i64 0, i64 0), %.loopexit7 ], [ getelementptr inbounds ([5 x i8]* @.str4, i64 0, i64 0), %.preheader ]
  %124 = getelementptr inbounds i8* %s, i64 %l.0
  %125 = sub i64 %n, %l.0
  %126 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %124, i64 %125, i8* %fmt.0, i32 %val.1) nounwind optsize
  %127 = sext i32 %126 to i64
  %128 = add i64 %127, %l.0
  br label %.loopexit8

; <label>:129                                     ; preds = %58, %28, %25, %22, %19
  %item.0 = phi i32 [ %61, %58 ], [ %30, %28 ], [ %27, %25 ], [ %24, %22 ], [ %21, %19 ]
  %130 = getelementptr inbounds i8* %s, i64 %l.0
  %131 = sub i64 %n, %l.0
  %132 = tail call i8* @__langinfo(i32 %item.0) nounwind optsize
  %133 = tail call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %130, i64 %131, i8* getelementptr inbounds ([3 x i8]* @.str10, i64 0, i64 0), i8* %132) nounwind optsize
  %134 = sext i32 %133 to i64
  %135 = add i64 %134, %l.0
  br label %.loopexit8

.loopexit5:                                       ; preds = %.preheader
  br label %136

; <label>:136                                     ; preds = %.loopexit5, %76, %75, %.preheader
  %item.1 = phi i32 [ 131114, %76 ], [ 131113, %75 ], [ 131112, %.loopexit5 ], [ 131115, %.preheader ]
  %137 = tail call i8* @__langinfo(i32 %item.1) nounwind optsize
  br label %138

.loopexit6:                                       ; preds = %.preheader
  br label %138

; <label>:138                                     ; preds = %.loopexit6, %136, %68, %62, %.preheader
  %fmt.1 = phi i8* [ %137, %136 ], [ getelementptr inbounds ([9 x i8]* @.str7, i64 0, i64 0), %68 ], [ getelementptr inbounds ([6 x i8]* @.str6, i64 0, i64 0), %62 ], [ getelementptr inbounds ([9 x i8]* @.str1769, i64 0, i64 0), %.loopexit6 ], [ getelementptr inbounds ([9 x i8]* @.str3771, i64 0, i64 0), %.preheader ]
  %139 = getelementptr inbounds i8* %s, i64 %l.0
  %140 = sub i64 %n, %l.0
  %141 = tail call i64 @strftime(i8* %139, i64 %140, i8* %fmt.1, %struct.tm.656* %tm) optsize
  %142 = add i64 %141, %l.0
  br label %.loopexit8

.loopexit8:                                       ; preds = %138, %129, %123, %.loopexit4, %110, %107, %102, %86, %83, %65, %55, %.preheader, %.preheader, %.preheader
  %.3 = phi i8* [ %16, %110 ], [ %16, %107 ], [ %16, %102 ], [ %16, %83 ], [ %16, %86 ], [ %16, %123 ], [ %16, %138 ], [ %16, %65 ], [ %16, %129 ], [ %16, %55 ], [ %.2, %.loopexit4 ], [ %16, %.preheader ], [ %16, %.preheader ], [ %16, %.preheader ]
  %l.1 = phi i64 [ %119, %110 ], [ %l.0, %107 ], [ %l.0, %102 ], [ %l.0, %83 ], [ %101, %86 ], [ %128, %123 ], [ %142, %138 ], [ %66, %65 ], [ %135, %129 ], [ %56, %55 ], [ %121, %.loopexit4 ], [ %l.0, %.preheader ], [ %l.0, %.preheader ], [ %l.0, %.preheader ]
  %143 = getelementptr inbounds i8* %.3, i64 1
  br label %10

.critedge:                                        ; preds = %10
  br i1 %13, label %144, label %.loopexit

; <label>:144                                     ; preds = %.critedge
  %145 = getelementptr inbounds i8* %s, i64 %l.0
  store i8 0, i8* %145, align 1, !tbaa !0
  br label %.loopexit

.loopexit:                                        ; preds = %144, %.critedge, %.preheader
  %.0 = phi i64 [ %l.0, %144 ], [ 0, %.critedge ], [ 0, %.preheader ]
  ret i64 %.0
}

define i64 @strlcat(i8* %d, i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i64 @strnlen(i8* %d, i64 %n) nounwind optsize
  %2 = icmp eq i64 %1, %n
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @strlen(i8* %s) nounwind optsize
  br label %9

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i8* %d, i64 %1
  %7 = sub i64 %n, %1
  %8 = tail call i64 @strlcpy(i8* %6, i8* %s, i64 %7) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %5, %3
  %.pn = phi i64 [ %4, %3 ], [ %8, %5 ]
  %.0 = add i64 %.pn, %1
  ret i64 %.0
}

define i64 @strlcpy(i8* %d, i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = add i64 %n, -1
  %2 = icmp eq i64 %n, 0
  br i1 %2, label %._crit_edge, label %3

._crit_edge:                                      ; preds = %0
  %.pre = ptrtoint i8* %d to i64
  br label %49

; <label>:3                                       ; preds = %0
  %4 = ptrtoint i8* %s to i64
  %5 = ptrtoint i8* %d to i64
  %6 = xor i64 %4, %5
  %7 = and i64 %6, 7
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %.preheader10, label %.preheader

.preheader:                                       ; preds = %16, %3
  %.07 = phi i64 [ %17, %16 ], [ %1, %3 ]
  %.04 = phi i8* [ %18, %16 ], [ %s, %3 ]
  %.0 = phi i8* [ %19, %16 ], [ %d, %3 ]
  %9 = ptrtoint i8* %.04 to i64
  %10 = and i64 %9, 7
  %11 = icmp eq i64 %10, 0
  %12 = icmp eq i64 %.07, 0
  %or.cond = or i1 %11, %12
  br i1 %or.cond, label %.critedge, label %13

; <label>:13                                      ; preds = %.preheader
  %14 = load i8* %.04, align 1, !tbaa !0
  store i8 %14, i8* %.0, align 1, !tbaa !0
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %.critedge, label %16

; <label>:16                                      ; preds = %13
  %17 = add i64 %.07, -1
  %18 = getelementptr inbounds i8* %.04, i64 1
  %19 = getelementptr inbounds i8* %.0, i64 1
  br label %.preheader

.critedge:                                        ; preds = %13, %.preheader
  br i1 %12, label %.preheader10, label %20

; <label>:20                                      ; preds = %.critedge
  %21 = load i8* %.04, align 1, !tbaa !0
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %.preheader10, label %23

; <label>:23                                      ; preds = %20
  %24 = bitcast i8* %.0 to i64*
  %25 = bitcast i8* %.04 to i64*
  br label %26

; <label>:26                                      ; preds = %35, %23
  %wd.0 = phi i64* [ %24, %23 ], [ %38, %35 ]
  %ws.0 = phi i64* [ %25, %23 ], [ %37, %35 ]
  %.18 = phi i64 [ %.07, %23 ], [ %36, %35 ]
  %27 = icmp ugt i64 %.18, 7
  br i1 %27, label %28, label %.critedge2

; <label>:28                                      ; preds = %26
  %29 = load i64* %ws.0, align 8, !tbaa !5
  %30 = add i64 %29, -72340172838076673
  %31 = and i64 %29, -9187201950435737472
  %32 = xor i64 %31, -9187201950435737472
  %33 = and i64 %32, %30
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %.critedge2

; <label>:35                                      ; preds = %28
  store i64 %29, i64* %wd.0, align 8, !tbaa !5
  %36 = add i64 %.18, -8
  %37 = getelementptr inbounds i64* %ws.0, i64 1
  %38 = getelementptr inbounds i64* %wd.0, i64 1
  br label %26

.critedge2:                                       ; preds = %28, %26
  %39 = bitcast i64* %wd.0 to i8*
  %40 = bitcast i64* %ws.0 to i8*
  br label %.preheader10

.preheader10:                                     ; preds = %45, %.critedge2, %20, %.critedge, %3
  %.29 = phi i64 [ %46, %45 ], [ %.07, %20 ], [ 0, %.critedge ], [ %1, %3 ], [ %.18, %.critedge2 ]
  %.15 = phi i8* [ %47, %45 ], [ %.04, %20 ], [ %.04, %.critedge ], [ %s, %3 ], [ %40, %.critedge2 ]
  %.1 = phi i8* [ %48, %45 ], [ %.0, %20 ], [ %.0, %.critedge ], [ %d, %3 ], [ %39, %.critedge2 ]
  %41 = icmp eq i64 %.29, 0
  br i1 %41, label %.critedge3, label %42

; <label>:42                                      ; preds = %.preheader10
  %43 = load i8* %.15, align 1, !tbaa !0
  store i8 %43, i8* %.1, align 1, !tbaa !0
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %.critedge3, label %45

; <label>:45                                      ; preds = %42
  %46 = add i64 %.29, -1
  %47 = getelementptr inbounds i8* %.15, i64 1
  %48 = getelementptr inbounds i8* %.1, i64 1
  br label %.preheader10

.critedge3:                                       ; preds = %42, %.preheader10
  store i8 0, i8* %.1, align 1, !tbaa !0
  br label %49

; <label>:49                                      ; preds = %.critedge3, %._crit_edge
  %.pre-phi = phi i64 [ %.pre, %._crit_edge ], [ %5, %.critedge3 ]
  %.26 = phi i8* [ %s, %._crit_edge ], [ %.15, %.critedge3 ]
  %.2 = phi i8* [ %d, %._crit_edge ], [ %.1, %.critedge3 ]
  %50 = ptrtoint i8* %.2 to i64
  %51 = tail call i64 @strlen(i8* %.26) nounwind optsize
  %52 = sub i64 %51, %.pre-phi
  %53 = add i64 %52, %50
  ret i64 %53
}

define i64 @strlen(i8* %s) nounwind uwtable readonly optsize {
  br label %1

; <label>:1                                       ; preds = %7, %0
  %.0 = phi i8* [ %s, %0 ], [ %8, %7 ]
  %2 = ptrtoint i8* %.0 to i64
  %3 = and i64 %2, 7
  %4 = icmp eq i64 %3, 0
  %.pr = load i8* %.0, align 1
  %5 = icmp eq i8 %.pr, 0
  br i1 %4, label %.critedge, label %6

; <label>:6                                       ; preds = %1
  br i1 %5, label %.critedge.thread, label %7

; <label>:7                                       ; preds = %6
  %8 = getelementptr inbounds i8* %.0, i64 1
  br label %1

.critedge:                                        ; preds = %1
  br i1 %5, label %.critedge.thread, label %9

; <label>:9                                       ; preds = %.critedge
  %10 = bitcast i8* %.0 to i64*
  %11 = load i64* %10, align 8, !tbaa !5
  %12 = add i64 %11, -72340172838076673
  %13 = and i64 %11, -9187201950435737472
  %14 = xor i64 %13, -9187201950435737472
  %15 = and i64 %14, %12
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %.lr.ph3, label %._crit_edge

.lr.ph3:                                          ; preds = %.lr.ph3, %9
  %w.02 = phi i64* [ %17, %.lr.ph3 ], [ %10, %9 ]
  %17 = getelementptr inbounds i64* %w.02, i64 1
  %18 = load i64* %17, align 8, !tbaa !5
  %19 = add i64 %18, -72340172838076673
  %20 = and i64 %18, -9187201950435737472
  %21 = xor i64 %20, -9187201950435737472
  %22 = and i64 %21, %19
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %.lr.ph3, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph3, %9
  %w.0.lcssa = phi i64* [ %10, %9 ], [ %17, %.lr.ph3 ]
  %24 = bitcast i64* %w.0.lcssa to i8*
  %25 = load i8* %24, align 1, !tbaa !0
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %.critedge.thread, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %._crit_edge
  %.11 = phi i8* [ %27, %.lr.ph ], [ %24, %._crit_edge ]
  %27 = getelementptr inbounds i8* %.11, i64 1
  %28 = load i8* %27, align 1, !tbaa !0
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %.critedge.thread, label %.lr.ph

.critedge.thread:                                 ; preds = %.lr.ph, %._crit_edge, %.critedge, %6
  %.2 = phi i8* [ %.0, %.critedge ], [ %24, %._crit_edge ], [ %27, %.lr.ph ], [ %.0, %6 ]
  %30 = ptrtoint i8* %.2 to i64
  %31 = ptrtoint i8* %s to i64
  %32 = sub i64 %30, %31
  ret i64 %32
}

define i32 @strncasecmp_l(i8* %l, i8* %r, i64 %n, %struct.__locale.659* nocapture %loc) nounwind uwtable optsize {
  %1 = tail call i32 @strncasecmp(i8* %l, i8* %r, i64 %n) nounwind optsize
  ret i32 %1
}

define i32 @strncasecmp(i8* nocapture %_l, i8* nocapture %_r, i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %26, label %.preheader

.preheader:                                       ; preds = %.critedge3, %0
  %.04.in = phi i64 [ %.04, %.critedge3 ], [ %n, %0 ]
  %l.0 = phi i8* [ %17, %.critedge3 ], [ %_l, %0 ]
  %r.0 = phi i8* [ %18, %.critedge3 ], [ %_r, %0 ]
  %.04 = add i64 %.04.in, -1
  %2 = load i8* %l.0, align 1, !tbaa !0
  %3 = zext i8 %2 to i32
  %4 = icmp eq i8 %2, 0
  br i1 %4, label %.critedge, label %5

; <label>:5                                       ; preds = %.preheader
  %6 = load i8* %r.0, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 0
  %8 = icmp eq i64 %.04, 0
  %or.cond = or i1 %7, %8
  br i1 %or.cond, label %.critedge, label %9

; <label>:9                                       ; preds = %5
  %10 = icmp eq i8 %2, %6
  br i1 %10, label %.critedge3, label %11

; <label>:11                                      ; preds = %9
  %12 = tail call i32 @tolower(i32 %3) nounwind optsize
  %13 = load i8* %r.0, align 1, !tbaa !0
  %14 = zext i8 %13 to i32
  %15 = tail call i32 @tolower(i32 %14) nounwind optsize
  %16 = icmp eq i32 %12, %15
  br i1 %16, label %.critedge3, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %11
  %.pre = load i8* %l.0, align 1, !tbaa !0
  br label %.critedge

.critedge3:                                       ; preds = %11, %9
  %17 = getelementptr inbounds i8* %l.0, i64 1
  %18 = getelementptr inbounds i8* %r.0, i64 1
  br label %.preheader

.critedge:                                        ; preds = %..critedge_crit_edge, %5, %.preheader
  %19 = phi i8 [ %.pre, %..critedge_crit_edge ], [ %2, %5 ], [ 0, %.preheader ]
  %20 = zext i8 %19 to i32
  %21 = tail call i32 @tolower(i32 %20) nounwind optsize
  %22 = load i8* %r.0, align 1, !tbaa !0
  %23 = zext i8 %22 to i32
  %24 = tail call i32 @tolower(i32 %23) nounwind optsize
  %25 = sub nsw i32 %21, %24
  br label %26

; <label>:26                                      ; preds = %.critedge, %0
  %.0 = phi i32 [ %25, %.critedge ], [ 0, %0 ]
  ret i32 %.0
}

define i8* @strncat(i8* %d, i8* nocapture %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %d) nounwind optsize
  %2 = getelementptr inbounds i8* %d, i64 %1
  br label %3

; <label>:3                                       ; preds = %8, %0
  %.02 = phi i64 [ %n, %0 ], [ %9, %8 ]
  %.01 = phi i8* [ %s, %0 ], [ %10, %8 ]
  %.0 = phi i8* [ %2, %0 ], [ %11, %8 ]
  %4 = icmp eq i64 %.02, 0
  br i1 %4, label %.critedge, label %5

; <label>:5                                       ; preds = %3
  %6 = load i8* %.01, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = add i64 %.02, -1
  %10 = getelementptr inbounds i8* %.01, i64 1
  %11 = getelementptr inbounds i8* %.0, i64 1
  store i8 %6, i8* %.0, align 1, !tbaa !0
  br label %3

.critedge:                                        ; preds = %5, %3
  store i8 0, i8* %.0, align 1, !tbaa !0
  ret i8* %d
}

define i32 @strncmp(i8* nocapture %_l, i8* nocapture %_r, i64 %n) nounwind uwtable readonly optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %12, label %.preheader

.preheader:                                       ; preds = %6, %0
  %.03.in = phi i64 [ %.03, %6 ], [ %n, %0 ]
  %l.0 = phi i8* [ %7, %6 ], [ %_l, %0 ]
  %r.0 = phi i8* [ %8, %6 ], [ %_r, %0 ]
  %.03 = add i64 %.03.in, -1
  %2 = load i8* %l.0, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 0
  %.pre = load i8* %r.0, align 1, !tbaa !0
  br i1 %3, label %.critedge, label %4

; <label>:4                                       ; preds = %.preheader
  %notlhs = icmp ne i8 %.pre, 0
  %notrhs = icmp ne i64 %.03, 0
  %or.cond.not = and i1 %notrhs, %notlhs
  %5 = icmp eq i8 %2, %.pre
  %or.cond4 = and i1 %or.cond.not, %5
  br i1 %or.cond4, label %6, label %.critedge

; <label>:6                                       ; preds = %4
  %7 = getelementptr inbounds i8* %l.0, i64 1
  %8 = getelementptr inbounds i8* %r.0, i64 1
  br label %.preheader

.critedge:                                        ; preds = %4, %.preheader
  %9 = zext i8 %2 to i32
  %10 = zext i8 %.pre to i32
  %11 = sub nsw i32 %9, %10
  br label %12

; <label>:12                                      ; preds = %.critedge, %0
  %.0 = phi i32 [ %11, %.critedge ], [ 0, %0 ]
  ret i32 %.0
}

define i8* @strncpy(i8* %d, i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i8* @__stpncpy(i8* %d, i8* %s, i64 %n) nounwind optsize
  ret i8* %d
}

define i8* @strndup(i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i64 @strnlen(i8* %s, i64 %n) nounwind optsize
  %2 = add i64 %1, 1
  %3 = tail call i8* @malloc(i64 %2) optsize
  %4 = icmp eq i8* %3, null
  br i1 %4, label %8, label %5

; <label>:5                                       ; preds = %0
  %6 = tail call i8* @memcpy(i8* %3, i8* %s, i64 %1) nounwind optsize
  %7 = getelementptr inbounds i8* %3, i64 %1
  store i8 0, i8* %7, align 1, !tbaa !0
  br label %8

; <label>:8                                       ; preds = %5, %0
  %.0 = phi i8* [ %3, %5 ], [ null, %0 ]
  ret i8* %.0
}

define i64 @strnlen(i8* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i8* @memchr(i8* %s, i32 0, i64 %n) nounwind optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %s to i64
  %6 = sub i64 %4, %5
  br label %7

; <label>:7                                       ; preds = %3, %0
  %8 = phi i64 [ %6, %3 ], [ %n, %0 ]
  ret i64 %8
}

define i8* @strpbrk(i8* %s, i8* %b) nounwind uwtable optsize {
  %1 = tail call i64 @strcspn(i8* %s, i8* %b) nounwind optsize
  %2 = getelementptr inbounds i8* %s, i64 %1
  %3 = load i8* %2, align 1, !tbaa !0
  %4 = icmp ne i8 %3, 0
  %5 = select i1 %4, i8* %2, i8* null
  ret i8* %5
}

define i8* @strptime(i8* %s, i8* %f, %struct.tm.136* %tm) nounwind uwtable optsize {
  %1 = alloca i8*, align 8
  store i8* %f, i8** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 6
  %3 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 4
  %4 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 3
  %5 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 2
  %6 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 7
  %7 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 1
  %8 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 0
  %9 = getelementptr inbounds %struct.tm.136* %tm, i64 0, i32 5
  br label %.critedge1

.critedge1:                                       ; preds = %.critedge1.backedge, %0
  %10 = phi i8* [ %f, %0 ], [ %.pre, %.critedge1.backedge ]
  %.03 = phi i8* [ %s, %0 ], [ %.03.be, %.critedge1.backedge ]
  %11 = load i8* %10, align 1, !tbaa !0
  switch i8 %11, label %12 [
    i8 0, label %186
    i8 37, label %33
  ]

; <label>:12                                      ; preds = %.critedge1
  %13 = sext i8 %11 to i32
  %14 = call i32 @isspace(i32 %13) nounwind optsize
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %.preheader10

.preheader10:                                     ; preds = %22, %12
  %.1 = phi i8* [ %23, %22 ], [ %.03, %12 ]
  %16 = load i8* %.1, align 1, !tbaa !0
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %.critedge.loopexit, label %18

; <label>:18                                      ; preds = %.preheader10
  %19 = sext i8 %16 to i32
  %20 = call i32 @isspace(i32 %19) nounwind optsize
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %.critedge.loopexit, label %22

; <label>:22                                      ; preds = %18
  %23 = getelementptr inbounds i8* %.1, i64 1
  br label %.preheader10

; <label>:24                                      ; preds = %12
  %25 = load i8* %.03, align 1, !tbaa !0
  %26 = load i8** %1, align 8, !tbaa !7
  %27 = load i8* %26, align 1, !tbaa !0
  %28 = icmp eq i8 %25, %27
  br i1 %28, label %29, label %186

; <label>:29                                      ; preds = %24
  %30 = getelementptr inbounds i8* %.03, i64 1
  br label %.critedge

.critedge.loopexit:                               ; preds = %18, %.preheader10
  %.pre16 = load i8** %1, align 8, !tbaa !7
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %29
  %31 = phi i8* [ %26, %29 ], [ %.pre16, %.critedge.loopexit ]
  %.2 = phi i8* [ %30, %29 ], [ %.1, %.critedge.loopexit ]
  %32 = getelementptr inbounds i8* %31, i64 1
  store i8* %32, i8** %1, align 8, !tbaa !7
  br label %.critedge1.backedge

.critedge1.backedge:                              ; preds = %.loopexit, %169, %141, %114, %107, %103, %99, %95, %91, %87, %79, %68, %.preheader, %58, %54, %48, %.critedge
  %.03.be = phi i8* [ %.2, %.critedge ], [ %.03, %48 ], [ %115, %114 ], [ %.6, %169 ], [ %.4, %141 ], [ %.03, %87 ], [ %.03, %79 ], [ %.3, %.preheader ], [ %.3, %68 ], [ %56, %54 ], [ %59, %58 ], [ %93, %91 ], [ %96, %95 ], [ %100, %99 ], [ %105, %103 ], [ %109, %107 ], [ %.7, %.loopexit ]
  %.pre = load i8** %1, align 8, !tbaa !7
  br label %.critedge1

; <label>:33                                      ; preds = %.critedge1
  %34 = getelementptr inbounds i8* %10, i64 1
  store i8* %34, i8** %1, align 8, !tbaa !7
  %35 = load i8* %34, align 1, !tbaa !0
  %36 = icmp eq i8 %35, 43
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %33
  %38 = getelementptr inbounds i8* %10, i64 2
  store i8* %38, i8** %1, align 8, !tbaa !7
  %.pre17 = load i8* %38, align 1, !tbaa !0
  br label %39

; <label>:39                                      ; preds = %37, %33
  %40 = phi i8 [ %.pre17, %37 ], [ %35, %33 ]
  %41 = phi i8* [ %38, %37 ], [ %34, %33 ]
  %42 = sext i8 %40 to i32
  %43 = add i32 %42, -48
  %44 = icmp ult i32 %43, 10
  br i1 %44, label %45, label %48

; <label>:45                                      ; preds = %39
  %46 = call i64 @strtoul(i8* %41, i8** %1, i32 10) nounwind optsize
  %47 = trunc i64 %46 to i32
  %.pre18 = load i8** %1, align 8, !tbaa !7
  br label %48

; <label>:48                                      ; preds = %45, %39
  %49 = phi i8* [ %.pre18, %45 ], [ %41, %39 ]
  %w.0 = phi i32 [ %47, %45 ], [ -1, %39 ]
  %50 = getelementptr inbounds i8* %49, i64 1
  store i8* %50, i8** %1, align 8, !tbaa !7
  %51 = load i8* %49, align 1, !tbaa !0
  %52 = sext i8 %51 to i32
  switch i32 %52, label %.critedge1.backedge [
    i32 97, label %172
    i32 65, label %172
    i32 98, label %53
    i32 66, label %53
    i32 104, label %53
    i32 99, label %54
    i32 67, label %118
    i32 100, label %118
    i32 101, label %118
    i32 68, label %58
    i32 72, label %61
    i32 73, label %62
    i32 106, label %63
    i32 109, label %64
    i32 77, label %65
    i32 110, label %.preheader
    i32 116, label %.preheader
    i32 112, label %74
    i32 114, label %91
    i32 82, label %95
    i32 83, label %98
    i32 84, label %99
    i32 85, label %186
    i32 87, label %186
    i32 119, label %102
    i32 120, label %103
    i32 88, label %107
    i32 121, label %186
    i32 89, label %111
    i32 37, label %114
  ]

; <label>:53                                      ; preds = %48, %48, %48
  br label %172

; <label>:54                                      ; preds = %48
  %55 = call i8* @nl_langinfo(i32 131112) nounwind optsize
  %56 = call i8* @strptime(i8* %.03, i8* %55, %struct.tm.136* %tm) optsize
  %57 = icmp eq i8* %56, null
  br i1 %57, label %186, label %.critedge1.backedge

; <label>:58                                      ; preds = %48
  %59 = call i8* @strptime(i8* %.03, i8* getelementptr inbounds ([9 x i8]* @.str786, i64 0, i64 0), %struct.tm.136* %tm) optsize
  %60 = icmp eq i8* %59, null
  br i1 %60, label %186, label %.critedge1.backedge

; <label>:61                                      ; preds = %48
  br label %118

; <label>:62                                      ; preds = %48
  br label %118

; <label>:63                                      ; preds = %48
  br label %118

; <label>:64                                      ; preds = %48
  br label %118

; <label>:65                                      ; preds = %48
  br label %118

.preheader:                                       ; preds = %72, %48, %48
  %.3 = phi i8* [ %73, %72 ], [ %.03, %48 ], [ %.03, %48 ]
  %66 = load i8* %.3, align 1, !tbaa !0
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %.critedge1.backedge, label %68

; <label>:68                                      ; preds = %.preheader
  %69 = sext i8 %66 to i32
  %70 = call i32 @isspace(i32 %69) nounwind optsize
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %.critedge1.backedge, label %72

; <label>:72                                      ; preds = %68
  %73 = getelementptr inbounds i8* %.3, i64 1
  br label %.preheader

; <label>:74                                      ; preds = %48
  %75 = call i8* @nl_langinfo(i32 131110) nounwind optsize
  %76 = call i64 @strlen(i8* %75) nounwind optsize
  %77 = call i32 @strncasecmp(i8* %.03, i8* %75, i64 %76) nounwind optsize
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

; <label>:79                                      ; preds = %74
  %80 = load i32* %5, align 4, !tbaa !6
  %81 = srem i32 %80, 12
  store i32 %81, i32* %5, align 4, !tbaa !6
  br label %.critedge1.backedge

; <label>:82                                      ; preds = %74
  %83 = call i8* @nl_langinfo(i32 131111) nounwind optsize
  %84 = call i64 @strlen(i8* %83) nounwind optsize
  %85 = call i32 @strncasecmp(i8* %.03, i8* %83, i64 %84) nounwind optsize
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %186

; <label>:87                                      ; preds = %82
  %88 = load i32* %5, align 4, !tbaa !6
  %89 = srem i32 %88, 12
  %90 = add nsw i32 %89, 12
  store i32 %90, i32* %5, align 4, !tbaa !6
  br label %.critedge1.backedge

; <label>:91                                      ; preds = %48
  %92 = call i8* @nl_langinfo(i32 131115) nounwind optsize
  %93 = call i8* @strptime(i8* %.03, i8* %92, %struct.tm.136* %tm) optsize
  %94 = icmp eq i8* %93, null
  br i1 %94, label %186, label %.critedge1.backedge

; <label>:95                                      ; preds = %48
  %96 = call i8* @strptime(i8* %.03, i8* getelementptr inbounds ([6 x i8]* @.str1787, i64 0, i64 0), %struct.tm.136* %tm) optsize
  %97 = icmp eq i8* %96, null
  br i1 %97, label %186, label %.critedge1.backedge

; <label>:98                                      ; preds = %48
  br label %118

; <label>:99                                      ; preds = %48
  %100 = call i8* @strptime(i8* %.03, i8* getelementptr inbounds ([9 x i8]* @.str2788, i64 0, i64 0), %struct.tm.136* %tm) optsize
  %101 = icmp eq i8* %100, null
  br i1 %101, label %186, label %.critedge1.backedge

; <label>:102                                     ; preds = %48
  br label %118

; <label>:103                                     ; preds = %48
  %104 = call i8* @nl_langinfo(i32 131113) nounwind optsize
  %105 = call i8* @strptime(i8* %.03, i8* %104, %struct.tm.136* %tm) optsize
  %106 = icmp eq i8* %105, null
  br i1 %106, label %186, label %.critedge1.backedge

; <label>:107                                     ; preds = %48
  %108 = call i8* @nl_langinfo(i32 131114) nounwind optsize
  %109 = call i8* @strptime(i8* %.03, i8* %108, %struct.tm.136* %tm) optsize
  %110 = icmp eq i8* %109, null
  br i1 %110, label %186, label %.critedge1.backedge

; <label>:111                                     ; preds = %48
  %112 = icmp slt i32 %w.0, 0
  %w.1 = select i1 %112, i32 4, i32 %w.0
  %113 = load i8* %.03, align 1, !tbaa !0
  switch i8 %113, label %147 [
    i8 43, label %143
    i8 45, label %145
  ]

; <label>:114                                     ; preds = %48
  %115 = getelementptr inbounds i8* %.03, i64 1
  %116 = load i8* %.03, align 1, !tbaa !0
  %117 = icmp eq i8 %116, 37
  br i1 %117, label %.critedge1.backedge, label %186

; <label>:118                                     ; preds = %102, %98, %65, %64, %63, %62, %61, %48, %48, %48
  %dest.0 = phi i32* [ %2, %102 ], [ %8, %98 ], [ %7, %65 ], [ %3, %64 ], [ %6, %63 ], [ %5, %62 ], [ %5, %61 ], [ %4, %48 ], [ %4, %48 ], [ %4, %48 ]
  %range.0 = phi i32 [ 7, %102 ], [ 61, %98 ], [ 60, %65 ], [ 12, %64 ], [ 366, %63 ], [ 12, %62 ], [ 24, %61 ], [ 31, %48 ], [ 31, %48 ], [ 31, %48 ]
  %min.0 = phi i32 [ 0, %102 ], [ 0, %98 ], [ 0, %65 ], [ 1, %64 ], [ 1, %63 ], [ 1, %62 ], [ 0, %61 ], [ 1, %48 ], [ 1, %48 ], [ 1, %48 ]
  %adj.0 = phi i32 [ 0, %102 ], [ 0, %98 ], [ 0, %65 ], [ 1, %64 ], [ 0, %63 ], [ 0, %62 ], [ 0, %61 ], [ 0, %48 ], [ 0, %48 ], [ 0, %48 ]
  %119 = load i8* %.03, align 1, !tbaa !0
  %120 = sext i8 %119 to i32
  %121 = add i32 %120, -48
  %122 = icmp ult i32 %121, 10
  br i1 %122, label %123, label %186

; <label>:123                                     ; preds = %118
  store i32 0, i32* %dest.0, align 4, !tbaa !6
  %124 = add nsw i32 %min.0, %range.0
  br label %125

; <label>:125                                     ; preds = %133, %123
  %126 = phi i32 [ 0, %123 ], [ %137, %133 ]
  %i.0 = phi i32 [ 1, %123 ], [ %138, %133 ]
  %.4 = phi i8* [ %.03, %123 ], [ %135, %133 ]
  %127 = icmp sgt i32 %i.0, %124
  br i1 %127, label %.thread, label %128

; <label>:128                                     ; preds = %125
  %129 = load i8* %.4, align 1, !tbaa !0
  %130 = sext i8 %129 to i32
  %131 = add i32 %130, -48
  %132 = icmp ult i32 %131, 10
  br i1 %132, label %133, label %.thread

; <label>:133                                     ; preds = %128
  %134 = mul nsw i32 %126, 10
  %135 = getelementptr inbounds i8* %.4, i64 1
  %136 = add i32 %134, -48
  %137 = add i32 %136, %130
  store i32 %137, i32* %dest.0, align 4, !tbaa !6
  %138 = mul nsw i32 %i.0, 10
  br label %125

.thread:                                          ; preds = %128, %125
  %139 = sub nsw i32 %126, %min.0
  %140 = icmp ult i32 %139, %range.0
  br i1 %140, label %141, label %186

; <label>:141                                     ; preds = %.thread
  %142 = sub nsw i32 %126, %adj.0
  store i32 %142, i32* %dest.0, align 4, !tbaa !6
  br label %.critedge1.backedge

; <label>:143                                     ; preds = %111
  %144 = getelementptr inbounds i8* %.03, i64 1
  br label %147

; <label>:145                                     ; preds = %111
  %146 = getelementptr inbounds i8* %.03, i64 1
  br label %147

; <label>:147                                     ; preds = %145, %143, %111
  %neg.0 = phi i32 [ 0, %143 ], [ 1, %145 ], [ 0, %111 ]
  %.5 = phi i8* [ %144, %143 ], [ %146, %145 ], [ %.03, %111 ]
  %148 = load i8* %.5, align 1, !tbaa !0
  %149 = sext i8 %148 to i32
  %150 = add i32 %149, -48
  %151 = icmp ult i32 %150, 10
  br i1 %151, label %152, label %186

; <label>:152                                     ; preds = %147
  store i32 0, i32* %9, align 4, !tbaa !6
  br label %153

; <label>:153                                     ; preds = %161, %152
  %154 = phi i32 [ 0, %152 ], [ %164, %161 ]
  %i.1 = phi i32 [ 0, %152 ], [ %165, %161 ]
  %.6 = phi i8* [ %.5, %152 ], [ %163, %161 ]
  %155 = icmp slt i32 %i.1, %w.1
  br i1 %155, label %156, label %.critedge2

; <label>:156                                     ; preds = %153
  %157 = load i8* %.6, align 1, !tbaa !0
  %158 = sext i8 %157 to i32
  %159 = add i32 %158, -48
  %160 = icmp ult i32 %159, 10
  br i1 %160, label %161, label %.critedge2

; <label>:161                                     ; preds = %156
  %162 = mul nsw i32 %154, 10
  %163 = getelementptr inbounds i8* %.6, i64 1
  %164 = add i32 %159, %162
  store i32 %164, i32* %9, align 4, !tbaa !6
  %165 = add nsw i32 %i.1, 1
  br label %153

.critedge2:                                       ; preds = %156, %153
  %166 = icmp eq i32 %neg.0, 0
  br i1 %166, label %169, label %167

; <label>:167                                     ; preds = %.critedge2
  %168 = sub nsw i32 0, %154
  store i32 %168, i32* %9, align 4, !tbaa !6
  br label %169

; <label>:169                                     ; preds = %167, %.critedge2
  %170 = phi i32 [ %154, %.critedge2 ], [ %168, %167 ]
  %171 = add nsw i32 %170, -1900
  store i32 %171, i32* %9, align 4, !tbaa !6
  br label %.critedge1.backedge

; <label>:172                                     ; preds = %53, %48, %48
  %dest.1 = phi i32* [ %3, %53 ], [ %2, %48 ], [ %2, %48 ]
  %range.1 = phi i32 [ 12, %53 ], [ 7, %48 ], [ 7, %48 ]
  %min.1 = phi i32 [ 131086, %53 ], [ 131072, %48 ], [ 131072, %48 ]
  %173 = shl nuw nsw i32 %range.1, 1
  br label %174

; <label>:174                                     ; preds = %176, %172
  %i.2.in = phi i32 [ %173, %172 ], [ %i.2, %176 ]
  %i.2 = add nsw i32 %i.2.in, -1
  %175 = icmp sgt i32 %i.2.in, 0
  br i1 %175, label %176, label %.loopexit

; <label>:176                                     ; preds = %174
  %177 = add nsw i32 %i.2, %min.1
  %178 = call i8* @nl_langinfo(i32 %177) nounwind optsize
  %179 = call i64 @strlen(i8* %178) nounwind optsize
  %180 = call i32 @strncasecmp(i8* %.03, i8* %178, i64 %179) nounwind optsize
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %174

; <label>:182                                     ; preds = %176
  %183 = getelementptr inbounds i8* %.03, i64 %179
  %184 = srem i32 %i.2, %range.1
  store i32 %184, i32* %dest.1, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %182, %174
  %.7 = phi i8* [ %183, %182 ], [ %.03, %174 ]
  %185 = icmp slt i32 %i.2, 0
  br i1 %185, label %186, label %.critedge1.backedge

; <label>:186                                     ; preds = %.loopexit, %147, %.thread, %118, %114, %107, %103, %99, %95, %91, %82, %58, %54, %48, %48, %48, %24, %.critedge1
  %.0 = phi i8* [ null, %24 ], [ null, %54 ], [ null, %58 ], [ null, %82 ], [ null, %91 ], [ null, %95 ], [ null, %99 ], [ null, %48 ], [ null, %48 ], [ null, %103 ], [ null, %107 ], [ null, %48 ], [ null, %114 ], [ null, %118 ], [ null, %.thread ], [ null, %147 ], [ null, %.loopexit ], [ %.03, %.critedge1 ]
  ret i8* %.0
}

define i8* @strrchr(i8* %s, i32 %c) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %s) nounwind optsize
  %2 = tail call i8* @__memrchr(i8* %s, i32 %c, i64 %1) nounwind optsize
  ret i8* %2
}

define i8* @strsep(i8** nocapture %str, i8* %sep) nounwind uwtable optsize {
  %1 = load i8** %str, align 8, !tbaa !7
  %2 = icmp eq i8* %1, null
  br i1 %2, label %11, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @strcspn(i8* %1, i8* %sep) nounwind optsize
  %5 = getelementptr inbounds i8* %1, i64 %4
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %3
  %.sum = add i64 %4, 1
  %9 = getelementptr inbounds i8* %1, i64 %.sum
  store i8 0, i8* %5, align 1, !tbaa !0
  br label %10

; <label>:10                                      ; preds = %8, %3
  %end.0 = phi i8* [ %9, %8 ], [ null, %3 ]
  store i8* %end.0, i8** %str, align 8, !tbaa !7
  br label %11

; <label>:11                                      ; preds = %10, %0
  %.0 = phi i8* [ %1, %10 ], [ null, %0 ]
  ret i8* %.0
}

define i8* @strsignal(i32 %signum) nounwind uwtable readonly optsize {
  %1 = add i32 %signum, -1
  %2 = icmp ugt i32 %1, 31
  %3 = icmp eq i32 %signum, 0
  %or.cond = or i1 %2, %3
  br i1 %or.cond, label %._crit_edge, label %.preheader

.loopexit:                                        ; preds = %6
  %4 = add nsw i32 %.in, -1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %._crit_edge, label %.preheader

.preheader:                                       ; preds = %.loopexit, %0
  %.in = phi i32 [ %4, %.loopexit ], [ %signum, %0 ]
  %s.02 = phi i8* [ %9, %.loopexit ], [ getelementptr inbounds ([502 x i8]* @strings, i64 0, i64 0), %0 ]
  br label %6

; <label>:6                                       ; preds = %6, %.preheader
  %s.1 = phi i8* [ %9, %6 ], [ %s.02, %.preheader ]
  %7 = load i8* %s.1, align 1, !tbaa !0
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds i8* %s.1, i64 1
  br i1 %8, label %.loopexit, label %6

._crit_edge:                                      ; preds = %.loopexit, %0
  %s.0.lcssa = phi i8* [ %9, %.loopexit ], [ getelementptr inbounds ([502 x i8]* @strings, i64 0, i64 0), %0 ]
  ret i8* %s.0.lcssa
}

define i64 @strspn(i8* %s, i8* nocapture %c) nounwind uwtable readonly optsize {
  %byteset = alloca [4 x i64], align 16
  %1 = bitcast [4 x i64]* %byteset to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 32, i32 16, i1 false)
  %2 = load i8* %c, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %43, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %c, i64 1
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %.preheader5, label %.lr.ph

.preheader5:                                      ; preds = %4
  %8 = load i8* %s, align 1, !tbaa !0
  %9 = icmp eq i8 %8, %2
  br i1 %9, label %.lr.ph7, label %._crit_edge

.lr.ph7:                                          ; preds = %.lr.ph7, %.preheader5
  %.026 = phi i8* [ %10, %.lr.ph7 ], [ %s, %.preheader5 ]
  %10 = getelementptr inbounds i8* %.026, i64 1
  %11 = load i8* %10, align 1, !tbaa !0
  %12 = icmp eq i8 %11, %2
  br i1 %12, label %.lr.ph7, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph7, %.preheader5
  %.02.lcssa = phi i8* [ %s, %.preheader5 ], [ %10, %.lr.ph7 ]
  %13 = ptrtoint i8* %.02.lcssa to i64
  %14 = ptrtoint i8* %s to i64
  %15 = sub i64 %13, %14
  br label %43

.lr.ph:                                           ; preds = %.lr.ph, %4
  %16 = phi i8 [ %25, %.lr.ph ], [ %2, %4 ]
  %.034 = phi i8* [ %24, %.lr.ph ], [ %c, %4 ]
  %17 = zext i8 %16 to i64
  %18 = and i64 %17, 63
  %19 = shl i64 1, %18
  %20 = lshr i64 %17, 6
  %21 = getelementptr inbounds [4 x i64]* %byteset, i64 0, i64 %20
  %22 = load i64* %21, align 8, !tbaa !5
  %23 = or i64 %22, %19
  store i64 %23, i64* %21, align 8, !tbaa !5
  %24 = getelementptr inbounds i8* %.034, i64 1
  %25 = load i8* %24, align 1, !tbaa !0
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %.critedge, label %.lr.ph

.critedge:                                        ; preds = %38, %.lr.ph
  %.1 = phi i8* [ %39, %38 ], [ %s, %.lr.ph ]
  %27 = load i8* %.1, align 1, !tbaa !0
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %.critedge1, label %29

; <label>:29                                      ; preds = %.critedge
  %30 = zext i8 %27 to i64
  %31 = lshr i64 %30, 6
  %32 = getelementptr inbounds [4 x i64]* %byteset, i64 0, i64 %31
  %33 = load i64* %32, align 8, !tbaa !5
  %34 = and i64 %30, 63
  %35 = shl i64 1, %34
  %36 = and i64 %33, %35
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %.critedge1, label %38

; <label>:38                                      ; preds = %29
  %39 = getelementptr inbounds i8* %.1, i64 1
  br label %.critedge

.critedge1:                                       ; preds = %29, %.critedge
  %40 = ptrtoint i8* %.1 to i64
  %41 = ptrtoint i8* %s to i64
  %42 = sub i64 %40, %41
  br label %43

; <label>:43                                      ; preds = %.critedge1, %._crit_edge, %0
  %.0 = phi i64 [ %42, %.critedge1 ], [ %15, %._crit_edge ], [ 0, %0 ]
  ret i64 %.0
}

define i8* @strstr(i8* %h, i8* %n) nounwind uwtable optsize {
  %byteset.i = alloca [4 x i64], align 16
  %shift.i = alloca [256 x i64], align 16
  %1 = load i8* %n, align 1, !tbaa !0
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %twoway_strstr.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = sext i8 %1 to i32
  %5 = call i8* @strchr(i8* %h, i32 %4) nounwind optsize
  %6 = icmp eq i8* %5, null
  br i1 %6, label %twoway_strstr.exit, label %7

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds i8* %n, i64 1
  %9 = load i8* %8, align 1, !tbaa !0
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %twoway_strstr.exit, label %11

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds i8* %5, i64 1
  %13 = load i8* %12, align 1, !tbaa !0
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %twoway_strstr.exit, label %15

; <label>:15                                      ; preds = %11
  %16 = getelementptr inbounds i8* %n, i64 2
  %17 = load i8* %16, align 1, !tbaa !0
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %44

; <label>:19                                      ; preds = %15
  %20 = load i8* %n, align 1, !tbaa !0
  %21 = zext i8 %20 to i32
  %22 = shl nuw nsw i32 %21, 8
  %23 = zext i8 %9 to i32
  %24 = or i32 %22, %23
  %25 = load i8* %5, align 1, !tbaa !0
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 8
  %28 = zext i8 %13 to i32
  %29 = or i32 %27, %28
  br label %30

; <label>:30                                      ; preds = %36, %19
  %31 = phi i8 [ %13, %19 ], [ %39, %36 ]
  %hw.0.i = phi i32 [ %29, %19 ], [ %41, %36 ]
  %.0.i = phi i8* [ %12, %19 ], [ %38, %36 ]
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %twobyte_strstr.exit, label %33

; <label>:33                                      ; preds = %30
  %34 = and i32 %hw.0.i, 65535
  %35 = icmp eq i32 %34, %24
  br i1 %35, label %twobyte_strstr.exit, label %36

; <label>:36                                      ; preds = %33
  %37 = shl nuw nsw i32 %34, 8
  %38 = getelementptr inbounds i8* %.0.i, i64 1
  %39 = load i8* %38, align 1, !tbaa !0
  %40 = zext i8 %39 to i32
  %41 = or i32 %40, %37
  br label %30

twobyte_strstr.exit:                              ; preds = %33, %30
  %42 = getelementptr inbounds i8* %.0.i, i64 -1
  %43 = select i1 %32, i8* null, i8* %42
  br label %twoway_strstr.exit

; <label>:44                                      ; preds = %15
  %45 = getelementptr inbounds i8* %5, i64 2
  %46 = load i8* %45, align 1, !tbaa !0
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %twoway_strstr.exit, label %48

; <label>:48                                      ; preds = %44
  %49 = getelementptr inbounds i8* %n, i64 3
  %50 = load i8* %49, align 1, !tbaa !0
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %81

; <label>:52                                      ; preds = %48
  %53 = load i8* %n, align 1, !tbaa !0
  %54 = zext i8 %53 to i32
  %55 = shl nuw i32 %54, 24
  %56 = zext i8 %9 to i32
  %57 = shl nuw nsw i32 %56, 16
  %58 = zext i8 %17 to i32
  %59 = shl nuw nsw i32 %58, 8
  %60 = or i32 %59, %57
  %61 = or i32 %60, %55
  %62 = load i8* %5, align 1, !tbaa !0
  %63 = zext i8 %62 to i32
  %64 = shl nuw i32 %63, 24
  %65 = zext i8 %13 to i32
  %66 = shl nuw nsw i32 %65, 16
  %67 = zext i8 %46 to i32
  %68 = shl nuw nsw i32 %67, 8
  %69 = or i32 %68, %66
  %70 = or i32 %69, %64
  %71 = icmp eq i32 %70, %61
  br i1 %71, label %threebyte_strstr.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %52
  %.03.i = phi i8* [ %72, %.lr.ph.i ], [ %45, %52 ]
  %hw.02.i = phi i32 [ %76, %.lr.ph.i ], [ %70, %52 ]
  %72 = getelementptr inbounds i8* %.03.i, i64 1
  %73 = load i8* %72, align 1, !tbaa !0
  %74 = zext i8 %73 to i32
  %75 = or i32 %74, %hw.02.i
  %76 = shl i32 %75, 8
  %77 = icmp eq i8 %73, 0
  %78 = icmp eq i32 %76, %61
  %or.cond.i2 = or i1 %77, %78
  br i1 %or.cond.i2, label %threebyte_strstr.exit, label %.lr.ph.i

threebyte_strstr.exit:                            ; preds = %.lr.ph.i, %52
  %.lcssa.i = phi i1 [ false, %52 ], [ %77, %.lr.ph.i ]
  %.0.lcssa.i = phi i8* [ %45, %52 ], [ %72, %.lr.ph.i ]
  %79 = getelementptr inbounds i8* %.0.lcssa.i, i64 -2
  %80 = select i1 %.lcssa.i, i8* null, i8* %79
  br label %twoway_strstr.exit

; <label>:81                                      ; preds = %48
  %82 = getelementptr inbounds i8* %5, i64 3
  %83 = load i8* %82, align 1, !tbaa !0
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %twoway_strstr.exit, label %85

; <label>:85                                      ; preds = %81
  %86 = getelementptr inbounds i8* %n, i64 4
  %87 = load i8* %86, align 1, !tbaa !0
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %89, label %122

; <label>:89                                      ; preds = %85
  %90 = load i8* %n, align 1, !tbaa !0
  %91 = zext i8 %90 to i32
  %92 = shl nuw i32 %91, 24
  %93 = zext i8 %9 to i32
  %94 = shl nuw nsw i32 %93, 16
  %95 = zext i8 %17 to i32
  %96 = shl nuw nsw i32 %95, 8
  %97 = zext i8 %50 to i32
  %98 = or i32 %96, %94
  %99 = or i32 %98, %97
  %100 = or i32 %99, %92
  %101 = load i8* %5, align 1, !tbaa !0
  %102 = zext i8 %101 to i32
  %103 = shl nuw i32 %102, 24
  %104 = zext i8 %13 to i32
  %105 = shl nuw nsw i32 %104, 16
  %106 = zext i8 %46 to i32
  %107 = shl nuw nsw i32 %106, 8
  %108 = zext i8 %83 to i32
  %109 = or i32 %107, %105
  %110 = or i32 %109, %108
  %111 = or i32 %110, %103
  %112 = icmp eq i32 %111, %100
  br i1 %112, label %fourbyte_strstr.exit, label %.lr.ph.i8

.lr.ph.i8:                                        ; preds = %.lr.ph.i8, %89
  %.03.i5 = phi i8* [ %114, %.lr.ph.i8 ], [ %82, %89 ]
  %hw.02.i6 = phi i32 [ %117, %.lr.ph.i8 ], [ %111, %89 ]
  %113 = shl i32 %hw.02.i6, 8
  %114 = getelementptr inbounds i8* %.03.i5, i64 1
  %115 = load i8* %114, align 1, !tbaa !0
  %116 = zext i8 %115 to i32
  %117 = or i32 %116, %113
  %118 = icmp eq i8 %115, 0
  %119 = icmp eq i32 %117, %100
  %or.cond.i7 = or i1 %118, %119
  br i1 %or.cond.i7, label %fourbyte_strstr.exit, label %.lr.ph.i8

fourbyte_strstr.exit:                             ; preds = %.lr.ph.i8, %89
  %.lcssa.i9 = phi i1 [ false, %89 ], [ %118, %.lr.ph.i8 ]
  %.0.lcssa.i10 = phi i8* [ %82, %89 ], [ %114, %.lr.ph.i8 ]
  %120 = getelementptr inbounds i8* %.0.lcssa.i10, i64 -3
  %121 = select i1 %.lcssa.i9, i8* null, i8* %120
  br label %twoway_strstr.exit

; <label>:122                                     ; preds = %85
  %123 = bitcast [4 x i64]* %byteset.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %123) nounwind
  %124 = bitcast [256 x i64]* %shift.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %124) nounwind
  call void @llvm.memset.p0i8.i64(i8* %123, i8 0, i64 32, i32 16, i1 false) nounwind
  br label %125

; <label>:125                                     ; preds = %133, %122
  %l.0.i = phi i64 [ 0, %122 ], [ %141, %133 ]
  %126 = getelementptr inbounds i8* %n, i64 %l.0.i
  %127 = load i8* %126, align 1, !tbaa !0
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %.outer14.outer.i, label %129

; <label>:129                                     ; preds = %125
  %130 = getelementptr inbounds i8* %5, i64 %l.0.i
  %131 = load i8* %130, align 1, !tbaa !0
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %twoway_strstr.exit, label %133

; <label>:133                                     ; preds = %129
  %134 = zext i8 %127 to i64
  %135 = and i64 %134, 63
  %136 = shl i64 1, %135
  %137 = lshr i64 %134, 6
  %138 = getelementptr inbounds [4 x i64]* %byteset.i, i64 0, i64 %137
  %139 = load i64* %138, align 8, !tbaa !5
  %140 = or i64 %139, %136
  store i64 %140, i64* %138, align 8, !tbaa !5
  %141 = add i64 %l.0.i, 1
  %142 = getelementptr inbounds [256 x i64]* %shift.i, i64 0, i64 %134
  store i64 %141, i64* %142, align 8, !tbaa !5
  br label %125

.outer14.outer.i:                                 ; preds = %163, %125
  %jp.0.ph.ph.i = phi i64 [ %164, %163 ], [ 0, %125 ]
  %ip.0.ph.ph.i = phi i64 [ %jp.0.ph16.i, %163 ], [ -1, %125 ]
  br label %.outer14.i

.outer14.i:                                       ; preds = %161, %.outer14.outer.i
  %p.0.ph.i = phi i64 [ %162, %161 ], [ 1, %.outer14.outer.i ]
  %jp.0.ph.i = phi i64 [ %144, %161 ], [ %jp.0.ph.ph.i, %.outer14.outer.i ]
  br label %.outer15.i

.outer15.i:                                       ; preds = %155, %.outer14.i
  %jp.0.ph16.i = phi i64 [ %156, %155 ], [ %jp.0.ph.i, %.outer14.i ]
  br label %143

; <label>:143                                     ; preds = %157, %.outer15.i
  %k.0.i = phi i64 [ %158, %157 ], [ 1, %.outer15.i ]
  %144 = add i64 %k.0.i, %jp.0.ph16.i
  %145 = icmp ult i64 %144, %l.0.i
  br i1 %145, label %146, label %.outer.outer.i

; <label>:146                                     ; preds = %143
  %147 = add i64 %k.0.i, %ip.0.ph.ph.i
  %148 = getelementptr inbounds i8* %n, i64 %147
  %149 = load i8* %148, align 1, !tbaa !0
  %150 = getelementptr inbounds i8* %n, i64 %144
  %151 = load i8* %150, align 1, !tbaa !0
  %152 = icmp eq i8 %149, %151
  br i1 %152, label %153, label %159

; <label>:153                                     ; preds = %146
  %154 = icmp eq i64 %k.0.i, %p.0.ph.i
  br i1 %154, label %155, label %157

; <label>:155                                     ; preds = %153
  %156 = add i64 %jp.0.ph16.i, %p.0.ph.i
  br label %.outer15.i

; <label>:157                                     ; preds = %153
  %158 = add i64 %k.0.i, 1
  br label %143

; <label>:159                                     ; preds = %146
  %160 = icmp ugt i8 %149, %151
  br i1 %160, label %161, label %163

; <label>:161                                     ; preds = %159
  %162 = sub i64 %144, %ip.0.ph.ph.i
  br label %.outer14.i

; <label>:163                                     ; preds = %159
  %164 = add i64 %jp.0.ph16.i, 1
  br label %.outer14.outer.i

; <label>:165                                     ; preds = %179, %.outer5.i
  %k.1.i = phi i64 [ %180, %179 ], [ 1, %.outer5.i ]
  %166 = add i64 %k.1.i, %jp.1.ph6.i
  %167 = icmp ult i64 %166, %l.0.i
  br i1 %167, label %168, label %187

; <label>:168                                     ; preds = %165
  %169 = add i64 %k.1.i, %ip.1.ph.ph.i
  %170 = getelementptr inbounds i8* %n, i64 %169
  %171 = load i8* %170, align 1, !tbaa !0
  %172 = getelementptr inbounds i8* %n, i64 %166
  %173 = load i8* %172, align 1, !tbaa !0
  %174 = icmp eq i8 %171, %173
  br i1 %174, label %175, label %181

; <label>:175                                     ; preds = %168
  %176 = icmp eq i64 %k.1.i, %p.1.ph.i
  br i1 %176, label %177, label %179

; <label>:177                                     ; preds = %175
  %178 = add i64 %jp.1.ph6.i, %p.1.ph.i
  br label %.outer5.i

.outer5.i:                                        ; preds = %.outer.i, %177
  %jp.1.ph6.i = phi i64 [ %178, %177 ], [ %jp.1.ph.i, %.outer.i ]
  br label %165

; <label>:179                                     ; preds = %175
  %180 = add i64 %k.1.i, 1
  br label %165

; <label>:181                                     ; preds = %168
  %182 = icmp ult i8 %171, %173
  br i1 %182, label %183, label %185

; <label>:183                                     ; preds = %181
  %184 = sub i64 %166, %ip.1.ph.ph.i
  br label %.outer.i

.outer.i:                                         ; preds = %.outer.outer.i, %183
  %p.1.ph.i = phi i64 [ %184, %183 ], [ 1, %.outer.outer.i ]
  %jp.1.ph.i = phi i64 [ %166, %183 ], [ %jp.1.ph.ph.i, %.outer.outer.i ]
  br label %.outer5.i

; <label>:185                                     ; preds = %181
  %186 = add i64 %jp.1.ph6.i, 1
  br label %.outer.outer.i

.outer.outer.i:                                   ; preds = %185, %143
  %jp.1.ph.ph.i = phi i64 [ %186, %185 ], [ 0, %143 ]
  %ip.1.ph.ph.i = phi i64 [ %jp.1.ph6.i, %185 ], [ -1, %143 ]
  br label %.outer.i

; <label>:187                                     ; preds = %165
  %188 = add i64 %ip.1.ph.ph.i, 1
  %189 = add i64 %ip.0.ph.ph.i, 1
  %190 = icmp ugt i64 %188, %189
  %ip.1.ip.0.i = select i1 %190, i64 %ip.1.ph.ph.i, i64 %ip.0.ph.ph.i
  %p.1.p.0.i = select i1 %190, i64 %p.1.ph.i, i64 %p.0.ph.i
  %191 = getelementptr inbounds i8* %n, i64 %p.1.p.0.i
  %192 = add i64 %ip.1.ip.0.i, 1
  %193 = call i32 @memcmp(i8* %n, i8* %191, i64 %192) nounwind optsize
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %200, label %195

; <label>:195                                     ; preds = %187
  %196 = sub i64 %l.0.i, %ip.1.ip.0.i
  %197 = add i64 %196, -1
  %198 = icmp ugt i64 %ip.1.ip.0.i, %197
  %ip.1.ip.0..i = select i1 %198, i64 %ip.1.ip.0.i, i64 %197
  %199 = add i64 %ip.1.ip.0..i, 1
  br label %202

; <label>:200                                     ; preds = %187
  %201 = sub i64 %l.0.i, %p.1.p.0.i
  br label %202

; <label>:202                                     ; preds = %200, %195
  %p.3.i = phi i64 [ %199, %195 ], [ %p.1.p.0.i, %200 ]
  %mem0.0.i = phi i64 [ 0, %195 ], [ %201, %200 ]
  %203 = or i64 %l.0.i, 63
  %204 = add i64 %l.0.i, -1
  %205 = icmp eq i64 %mem0.0.i, 0
  %206 = sub i64 %l.0.i, %p.3.i
  br label %.backedge.i

.backedge.i:                                      ; preds = %267, %.critedge.i, %242, %240, %202
  %mem.0.i = phi i64 [ 0, %202 ], [ 0, %240 ], [ 0, %.critedge.i ], [ %mem0.0.i, %267 ], [ 0, %242 ]
  %z.0.i = phi i8* [ %5, %202 ], [ %z.1.i, %240 ], [ %z.1.i, %.critedge.i ], [ %z.1.i, %267 ], [ %z.1.i, %242 ]
  %.02.i = phi i8* [ %5, %202 ], [ %241, %240 ], [ %257, %.critedge.i ], [ %268, %267 ], [ %243, %242 ]
  %207 = ptrtoint i8* %z.0.i to i64
  %208 = ptrtoint i8* %.02.i to i64
  %209 = sub i64 %207, %208
  %210 = icmp ult i64 %209, %l.0.i
  br i1 %210, label %211, label %220

; <label>:211                                     ; preds = %.backedge.i
  %212 = call i8* @memchr(i8* %z.0.i, i32 0, i64 %203) nounwind optsize
  %213 = icmp eq i8* %212, null
  br i1 %213, label %218, label %214

; <label>:214                                     ; preds = %211
  %215 = ptrtoint i8* %212 to i64
  %216 = sub i64 %215, %208
  %217 = icmp ult i64 %216, %l.0.i
  br i1 %217, label %twoway_strstr.exit, label %220

; <label>:218                                     ; preds = %211
  %219 = getelementptr inbounds i8* %z.0.i, i64 %203
  br label %220

; <label>:220                                     ; preds = %218, %214, %.backedge.i
  %z.1.i = phi i8* [ %212, %214 ], [ %219, %218 ], [ %z.0.i, %.backedge.i ]
  %221 = getelementptr inbounds i8* %.02.i, i64 %204
  %222 = load i8* %221, align 1, !tbaa !0
  %223 = zext i8 %222 to i64
  %224 = lshr i64 %223, 6
  %225 = getelementptr inbounds [4 x i64]* %byteset.i, i64 0, i64 %224
  %226 = load i64* %225, align 8, !tbaa !5
  %227 = and i64 %223, 63
  %228 = shl i64 1, %227
  %229 = and i64 %228, %226
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %242, label %231

; <label>:231                                     ; preds = %220
  %232 = getelementptr inbounds [256 x i64]* %shift.i, i64 0, i64 %223
  %233 = load i64* %232, align 8, !tbaa !5
  %234 = sub i64 %l.0.i, %233
  %235 = icmp eq i64 %l.0.i, %233
  br i1 %235, label %244, label %236

; <label>:236                                     ; preds = %231
  %237 = icmp eq i64 %mem.0.i, 0
  %or.cond.i = or i1 %205, %237
  br i1 %or.cond.i, label %240, label %238

; <label>:238                                     ; preds = %236
  %239 = icmp ult i64 %234, %p.3.i
  %..i = select i1 %239, i64 %206, i64 %234
  br label %240

; <label>:240                                     ; preds = %238, %236
  %k.2.i = phi i64 [ %234, %236 ], [ %..i, %238 ]
  %241 = getelementptr inbounds i8* %.02.i, i64 %k.2.i
  br label %.backedge.i

; <label>:242                                     ; preds = %220
  %243 = getelementptr inbounds i8* %.02.i, i64 %l.0.i
  br label %.backedge.i

; <label>:244                                     ; preds = %231
  %245 = icmp ugt i64 %192, %mem.0.i
  %.mem.0.i = select i1 %245, i64 %192, i64 %mem.0.i
  br label %246

; <label>:246                                     ; preds = %254, %244
  %k.3.i = phi i64 [ %.mem.0.i, %244 ], [ %255, %254 ]
  %247 = getelementptr inbounds i8* %n, i64 %k.3.i
  %248 = load i8* %247, align 1, !tbaa !0
  %249 = icmp eq i8 %248, 0
  br i1 %249, label %.critedge.thread.i, label %250

; <label>:250                                     ; preds = %246
  %251 = getelementptr inbounds i8* %.02.i, i64 %k.3.i
  %252 = load i8* %251, align 1, !tbaa !0
  %253 = icmp eq i8 %248, %252
  br i1 %253, label %254, label %.critedge.i

; <label>:254                                     ; preds = %250
  %255 = add i64 %k.3.i, 1
  br label %246

.critedge.i:                                      ; preds = %250
  %256 = sub i64 %k.3.i, %ip.1.ip.0.i
  %257 = getelementptr inbounds i8* %.02.i, i64 %256
  br label %.backedge.i

.critedge.thread.i:                               ; preds = %259, %246
  %k.4.i = phi i64 [ %260, %259 ], [ %192, %246 ]
  %258 = icmp ugt i64 %k.4.i, %mem.0.i
  br i1 %258, label %259, label %.critedge1.i

; <label>:259                                     ; preds = %.critedge.thread.i
  %260 = add i64 %k.4.i, -1
  %261 = getelementptr inbounds i8* %n, i64 %260
  %262 = load i8* %261, align 1, !tbaa !0
  %263 = getelementptr inbounds i8* %.02.i, i64 %260
  %264 = load i8* %263, align 1, !tbaa !0
  %265 = icmp eq i8 %262, %264
  br i1 %265, label %.critedge.thread.i, label %.critedge1.i

.critedge1.i:                                     ; preds = %259, %.critedge.thread.i
  %266 = icmp eq i64 %k.4.i, %mem.0.i
  br i1 %266, label %twoway_strstr.exit, label %267

; <label>:267                                     ; preds = %.critedge1.i
  %268 = getelementptr inbounds i8* %.02.i, i64 %p.3.i
  br label %.backedge.i

twoway_strstr.exit:                               ; preds = %.critedge1.i, %214, %129, %fourbyte_strstr.exit, %81, %threebyte_strstr.exit, %44, %twobyte_strstr.exit, %11, %7, %3, %0
  %.0 = phi i8* [ %121, %fourbyte_strstr.exit ], [ %80, %threebyte_strstr.exit ], [ %43, %twobyte_strstr.exit ], [ %h, %0 ], [ %5, %7 ], [ null, %3 ], [ null, %11 ], [ null, %44 ], [ null, %81 ], [ %.02.i, %.critedge1.i ], [ null, %214 ], [ null, %129 ]
  ret i8* %.0
}

define double @strtod(i8* %s, i8** %p) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @strtold(i8* %s, i8** %p) nounwind optsize
  %2 = fptrunc x86_fp80 %1 to double
  ret double %2
}

define float @strtof(i8* %s, i8** %p) nounwind uwtable optsize {
  %1 = tail call x86_fp80 @strtold(i8* %s, i8** %p) nounwind optsize
  %2 = fptrunc x86_fp80 %1 to float
  ret float %2
}

define i64 @strtoimax(i8* %s1, i8** %p, i32 %base) nounwind uwtable optsize {
  %ip = alloca %struct.intparse, align 8
  %1 = bitcast %struct.intparse* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ({ i64, i32, i64, i8, i8, i8, i8, [4 x i8] }* @strtoimax.ip to i8*), i64 32, i32 8, i1 false)
  %2 = icmp ne i8** %p, null
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  store i8* %s1, i8** %p, align 8, !tbaa !7
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = icmp ne i32 %base, 0
  %6 = add i32 %base, -2
  %7 = icmp ugt i32 %6, 34
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %12, label %.preheader

.preheader:                                       ; preds = %4
  %8 = load i8* %s1, align 1, !tbaa !0
  %9 = zext i8 %8 to i32
  %10 = call i32 @isspace(i32 %9) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %._crit_edge, label %.lr.ph

; <label>:12                                      ; preds = %4
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %13, align 4, !tbaa !6
  br label %60

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %s.03 = phi i8* [ %14, %.lr.ph ], [ %s1, %.preheader ]
  %14 = getelementptr inbounds i8* %s.03, i64 1
  %15 = load i8* %14, align 1, !tbaa !0
  %16 = zext i8 %15 to i32
  %17 = call i32 @isspace(i32 %16) nounwind optsize
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %s.0.lcssa = phi i8* [ %s1, %.preheader ], [ %14, %.lr.ph ]
  %19 = trunc i32 %base to i8
  %20 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 4
  store i8 %19, i8* %20, align 1, !tbaa !0
  %21 = call i32 @__intparse(%struct.intparse* %ip, i8* %s.0.lcssa, i64 -1) nounwind optsize
  %22 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %23 = load i8* %22, align 1, !tbaa !0
  br i1 %2, label %24, label %._crit_edge4

; <label>:24                                      ; preds = %._crit_edge
  %25 = icmp eq i8 %23, 22
  br i1 %25, label %.thread, label %26

; <label>:26                                      ; preds = %24
  %27 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 2
  %28 = load i64* %27, align 8, !tbaa !5
  %29 = getelementptr inbounds i8* %s.0.lcssa, i64 %28
  store i8* %29, i8** %p, align 8, !tbaa !7
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %26, %._crit_edge
  %30 = icmp eq i8 %23, 0
  br i1 %30, label %42, label %.thread

.thread:                                          ; preds = %._crit_edge4, %24
  %31 = phi i8 [ %23, %._crit_edge4 ], [ 22, %24 ]
  %32 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %33 = sext i8 %31 to i32
  %34 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %33, i32* %34, align 4, !tbaa !6
  %35 = load i8* %32, align 1, !tbaa !0
  %36 = icmp eq i8 %35, 22
  br i1 %36, label %60, label %37

; <label>:37                                      ; preds = %.thread
  %38 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 3
  %39 = load i8* %38, align 8, !tbaa !0
  %40 = icmp ne i8 %39, 0
  %41 = select i1 %40, i64 -9223372036854775808, i64 9223372036854775807
  br label %60

; <label>:42                                      ; preds = %._crit_edge4
  %43 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 0
  %44 = load i64* %43, align 8, !tbaa !9
  %45 = icmp slt i64 %44, 0
  %46 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 3
  %47 = load i8* %46, align 8, !tbaa !0
  %48 = icmp ne i8 %47, 0
  br i1 %45, label %49, label %57

; <label>:49                                      ; preds = %42
  %50 = icmp eq i64 %44, -9223372036854775808
  %or.cond2 = and i1 %48, %50
  br i1 %or.cond2, label %53, label %51

; <label>:51                                      ; preds = %49
  %52 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %52, align 4, !tbaa !6
  %.pre = load i8* %46, align 8, !tbaa !0
  br label %53

; <label>:53                                      ; preds = %51, %49
  %54 = phi i8 [ %47, %49 ], [ %.pre, %51 ]
  %55 = icmp ne i8 %54, 0
  %56 = select i1 %55, i64 -9223372036854775808, i64 9223372036854775807
  br label %60

; <label>:57                                      ; preds = %42
  %58 = sub i64 0, %44
  %59 = select i1 %48, i64 %58, i64 %44
  br label %60

; <label>:60                                      ; preds = %57, %53, %37, %.thread, %12
  %.0 = phi i64 [ 0, %12 ], [ %41, %37 ], [ %56, %53 ], [ %59, %57 ], [ 0, %.thread ]
  ret i64 %.0
}

define i8* @strtok(i8* %s, i8* %sep) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = load i8** @strtok.p, align 8, !tbaa !7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %19, label %5

; <label>:5                                       ; preds = %2, %0
  %.01 = phi i8* [ %s, %0 ], [ %3, %2 ]
  %6 = tail call i64 @strspn(i8* %.01, i8* %sep) nounwind optsize
  %7 = getelementptr inbounds i8* %.01, i64 %6
  %8 = load i8* %7, align 1, !tbaa !0
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %5
  store i8* null, i8** @strtok.p, align 8, !tbaa !7
  br label %19

; <label>:11                                      ; preds = %5
  %12 = tail call i64 @strcspn(i8* %7, i8* %sep) nounwind optsize
  %.sum = add i64 %12, %6
  %13 = getelementptr inbounds i8* %.01, i64 %.sum
  store i8* %13, i8** @strtok.p, align 8, !tbaa !7
  %14 = load i8* %13, align 1, !tbaa !0
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %11
  %.sum2 = add i64 %.sum, 1
  %17 = getelementptr inbounds i8* %.01, i64 %.sum2
  store i8* %17, i8** @strtok.p, align 8, !tbaa !7
  store i8 0, i8* %13, align 1, !tbaa !0
  br label %19

; <label>:18                                      ; preds = %11
  store i8* null, i8** @strtok.p, align 8, !tbaa !7
  br label %19

; <label>:19                                      ; preds = %18, %16, %10, %2
  %.0 = phi i8* [ null, %10 ], [ null, %2 ], [ %7, %18 ], [ %7, %16 ]
  ret i8* %.0
}

define i8* @strtok_r(i8* %s, i8* %sep, i8** nocapture %p) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = load i8** %p, align 8, !tbaa !7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %19, label %5

; <label>:5                                       ; preds = %2, %0
  %.01 = phi i8* [ %s, %0 ], [ %3, %2 ]
  %6 = tail call i64 @strspn(i8* %.01, i8* %sep) nounwind optsize
  %7 = getelementptr inbounds i8* %.01, i64 %6
  %8 = load i8* %7, align 1, !tbaa !0
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %5
  store i8* null, i8** %p, align 8, !tbaa !7
  br label %19

; <label>:11                                      ; preds = %5
  %12 = tail call i64 @strcspn(i8* %7, i8* %sep) nounwind optsize
  %.sum = add i64 %12, %6
  %13 = getelementptr inbounds i8* %.01, i64 %.sum
  store i8* %13, i8** %p, align 8, !tbaa !7
  %14 = load i8* %13, align 1, !tbaa !0
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %11
  %.sum2 = add i64 %.sum, 1
  %17 = getelementptr inbounds i8* %.01, i64 %.sum2
  store i8* %17, i8** %p, align 8, !tbaa !7
  store i8 0, i8* %13, align 1, !tbaa !0
  br label %19

; <label>:18                                      ; preds = %11
  store i8* null, i8** %p, align 8, !tbaa !7
  br label %19

; <label>:19                                      ; preds = %18, %16, %10, %2
  %.0 = phi i8* [ null, %10 ], [ null, %2 ], [ %7, %18 ], [ %7, %16 ]
  ret i8* %.0
}

define x86_fp80 @strtold(i8* %s1, i8** %p) nounwind uwtable optsize {
.preheader63:
  %0 = alloca i8*, align 8
  %s = alloca i8*, align 8
  store i8* %s1, i8** %0, align 8, !tbaa !7
  store i8* %s1, i8** %s, align 8, !tbaa !7
  %1 = call i32* @__errno_location() nounwind readnone optsize
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq i8** %p, null
  %.01.ph = select i1 %3, i8** %0, i8** %p
  %4 = load i8* %s1, align 1, !tbaa !0
  %5 = zext i8 %4 to i32
  %6 = call i32 @isspace(i32 %5) nounwind optsize
  %7 = icmp eq i32 %6, 0
  %8 = load i8** %s, align 8, !tbaa !7
  br i1 %7, label %._crit_edge66, label %.lr.ph65

.lr.ph65:                                         ; preds = %.lr.ph65, %.preheader63
  %9 = phi i8* [ %15, %.lr.ph65 ], [ %8, %.preheader63 ]
  %10 = getelementptr inbounds i8* %9, i64 1
  store i8* %10, i8** %s, align 8, !tbaa !7
  %11 = load i8* %10, align 1, !tbaa !0
  %12 = zext i8 %11 to i32
  %13 = call i32 @isspace(i32 %12) nounwind optsize
  %14 = icmp eq i32 %13, 0
  %15 = load i8** %s, align 8, !tbaa !7
  br i1 %14, label %._crit_edge66, label %.lr.ph65

._crit_edge66:                                    ; preds = %.lr.ph65, %.preheader63
  %16 = phi i8* [ %8, %.preheader63 ], [ %15, %.lr.ph65 ]
  %17 = load i8* %16, align 1, !tbaa !0
  switch i8 %17, label %24 [
    i8 45, label %18
    i8 43, label %22
  ]

; <label>:18                                      ; preds = %._crit_edge66
  %19 = getelementptr inbounds i8* %16, i64 1
  store i8* %19, i8** %s, align 8, !tbaa !7
  %20 = load i8* %16, align 1, !tbaa !0
  %21 = zext i8 %20 to i32
  br label %24

; <label>:22                                      ; preds = %._crit_edge66
  %23 = getelementptr inbounds i8* %16, i64 1
  store i8* %23, i8** %s, align 8, !tbaa !7
  br label %24

; <label>:24                                      ; preds = %22, %18, %._crit_edge66
  %25 = phi i8* [ %19, %18 ], [ %23, %22 ], [ %16, %._crit_edge66 ]
  %sign.0 = phi i32 [ %21, %18 ], [ 0, %22 ], [ 0, %._crit_edge66 ]
  %26 = load i8* %25, align 1, !tbaa !0
  %27 = zext i8 %26 to i32
  %28 = or i32 %27, 32
  switch i32 %28, label %.thread [
    i32 105, label %29
    i32 110, label %47
  ]

; <label>:29                                      ; preds = %24
  %30 = getelementptr inbounds i8* %25, i64 1
  %31 = load i8* %30, align 1, !tbaa !0
  %32 = zext i8 %31 to i32
  %33 = or i32 %32, 32
  %34 = icmp eq i32 %33, 110
  br i1 %34, label %35, label %.thread

; <label>:35                                      ; preds = %29
  %36 = getelementptr inbounds i8* %25, i64 2
  %37 = load i8* %36, align 1, !tbaa !0
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, 32
  %40 = icmp eq i32 %39, 102
  br i1 %40, label %41, label %45

; <label>:41                                      ; preds = %35
  %42 = getelementptr inbounds i8* %25, i64 3
  store i8* %42, i8** %.01.ph, align 8, !tbaa !7
  %43 = icmp ne i32 %sign.0, 0
  %44 = select i1 %43, x86_fp80 0xKFFFF8000000000000000, x86_fp80 0xK7FFF8000000000000000
  br label %244

; <label>:45                                      ; preds = %35
  %46 = icmp eq i32 %28, 110
  br i1 %46, label %47, label %.thread

; <label>:47                                      ; preds = %45, %24
  %48 = getelementptr inbounds i8* %25, i64 1
  %49 = load i8* %48, align 1, !tbaa !0
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, 32
  %52 = icmp eq i32 %51, 97
  br i1 %52, label %53, label %.thread

; <label>:53                                      ; preds = %47
  %54 = getelementptr inbounds i8* %25, i64 2
  %55 = load i8* %54, align 1, !tbaa !0
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, 32
  %58 = icmp eq i32 %57, 110
  br i1 %58, label %59, label %.thread

; <label>:59                                      ; preds = %53
  %60 = getelementptr inbounds i8* %25, i64 3
  store i8* %60, i8** %.01.ph, align 8, !tbaa !7
  br label %244

.thread:                                          ; preds = %53, %47, %45, %29, %24
  %61 = icmp eq i8 %26, 48
  br i1 %61, label %62, label %166

; <label>:62                                      ; preds = %.thread
  %63 = getelementptr inbounds i8* %25, i64 1
  %64 = load i8* %63, align 1, !tbaa !0
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, 32
  %67 = icmp eq i32 %66, 120
  br i1 %67, label %68, label %166

; <label>:68                                      ; preds = %62
  %69 = getelementptr inbounds i8* %25, i64 2
  %70 = load i8* %69, align 1, !tbaa !0
  %71 = zext i8 %70 to i32
  %72 = call i32 @isxdigit(i32 %71) nounwind optsize
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %88

; <label>:74                                      ; preds = %68
  %75 = load i8** %s, align 8, !tbaa !7
  %76 = getelementptr inbounds i8* %75, i64 2
  %77 = load i8* %76, align 1, !tbaa !0
  %78 = icmp eq i8 %77, 46
  br i1 %78, label %79, label %85

; <label>:79                                      ; preds = %74
  %80 = getelementptr inbounds i8* %75, i64 3
  %81 = load i8* %80, align 1, !tbaa !0
  %82 = zext i8 %81 to i32
  %83 = call i32 @isxdigit(i32 %82) nounwind optsize
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %._crit_edge83, label %88

._crit_edge83:                                    ; preds = %79
  %.pre84 = load i8** %s, align 8, !tbaa !7
  br label %85

; <label>:85                                      ; preds = %._crit_edge83, %74
  %86 = phi i8* [ %.pre84, %._crit_edge83 ], [ %75, %74 ]
  %87 = getelementptr inbounds i8* %86, i64 1
  store i8* %87, i8** %s, align 8, !tbaa !7
  store i8* %87, i8** %.01.ph, align 8, !tbaa !7
  br label %244

; <label>:88                                      ; preds = %79, %68
  %89 = load i8** %s, align 8, !tbaa !7
  %90 = getelementptr inbounds i8* %89, i64 2
  store i8* %90, i8** %s, align 8
  %91 = load i8* %90, align 1, !tbaa !0
  %92 = zext i8 %91 to i32
  %93 = call i32 @isxdigit(i32 %92) nounwind optsize
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %._crit_edge60, label %.lr.ph59

.lr.ph59:                                         ; preds = %104, %88
  %x.057 = phi x86_fp80 [ %107, %104 ], [ 0xK00000000000000000000, %88 ]
  %nonzero.056 = phi i32 [ %nonzero.1, %104 ], [ 0, %88 ]
  %95 = fmul x86_fp80 %x.057, 0xK40038000000000000000
  %96 = load i8** %s, align 8, !tbaa !7
  %97 = load i8* %96, align 1, !tbaa !0
  %98 = zext i8 %97 to i32
  %99 = add i32 %98, -48
  %100 = icmp ult i32 %99, 10
  br i1 %100, label %104, label %101

; <label>:101                                     ; preds = %.lr.ph59
  %102 = or i32 %98, 32
  %103 = add nsw i32 %102, -87
  br label %104

; <label>:104                                     ; preds = %101, %.lr.ph59
  %105 = phi i32 [ %103, %101 ], [ %99, %.lr.ph59 ]
  %106 = sitofp i32 %105 to x86_fp80
  %107 = fadd x86_fp80 %95, %106
  %108 = icmp eq i8 %97, 48
  %nonzero.1 = select i1 %108, i32 %nonzero.056, i32 1
  %109 = getelementptr inbounds i8* %96, i64 1
  store i8* %109, i8** %s, align 8
  %110 = load i8* %109, align 1, !tbaa !0
  %111 = zext i8 %110 to i32
  %112 = call i32 @isxdigit(i32 %111) nounwind optsize
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %._crit_edge60, label %.lr.ph59

._crit_edge60:                                    ; preds = %104, %88
  %x.0.lcssa = phi x86_fp80 [ 0xK00000000000000000000, %88 ], [ %107, %104 ]
  %nonzero.0.lcssa = phi i32 [ 0, %88 ], [ %nonzero.1, %104 ]
  %114 = load i8** %s, align 8, !tbaa !7
  %115 = load i8* %114, align 1, !tbaa !0
  %116 = icmp eq i8 %115, 46
  br i1 %116, label %.preheader47, label %140

.preheader47:                                     ; preds = %._crit_edge60
  %storemerge349 = getelementptr inbounds i8* %114, i64 1
  store i8* %storemerge349, i8** %s, align 8
  %117 = load i8* %storemerge349, align 1, !tbaa !0
  %118 = zext i8 %117 to i32
  %119 = call i32 @isxdigit(i32 %118) nounwind optsize
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %.loopexit48, label %.lr.ph53

.lr.ph53:                                         ; preds = %129, %.preheader47
  %x.152 = phi x86_fp80 [ %133, %129 ], [ %x.0.lcssa, %.preheader47 ]
  %frac.051 = phi x86_fp80 [ %134, %129 ], [ 0xK3FFB8000000000000000, %.preheader47 ]
  %nonzero.250 = phi i32 [ %nonzero.3, %129 ], [ %nonzero.0.lcssa, %.preheader47 ]
  %121 = load i8** %s, align 8, !tbaa !7
  %122 = load i8* %121, align 1, !tbaa !0
  %123 = zext i8 %122 to i32
  %124 = add i32 %123, -48
  %125 = icmp ult i32 %124, 10
  br i1 %125, label %129, label %126

; <label>:126                                     ; preds = %.lr.ph53
  %127 = or i32 %123, 32
  %128 = add nsw i32 %127, -87
  br label %129

; <label>:129                                     ; preds = %126, %.lr.ph53
  %130 = phi i32 [ %128, %126 ], [ %124, %.lr.ph53 ]
  %131 = sitofp i32 %130 to x86_fp80
  %132 = fmul x86_fp80 %frac.051, %131
  %133 = fadd x86_fp80 %x.152, %132
  %134 = fmul x86_fp80 %frac.051, 0xK3FFB8000000000000000
  %135 = icmp eq i8 %122, 48
  %nonzero.3 = select i1 %135, i32 %nonzero.250, i32 1
  %storemerge3 = getelementptr inbounds i8* %121, i64 1
  store i8* %storemerge3, i8** %s, align 8
  %136 = load i8* %storemerge3, align 1, !tbaa !0
  %137 = zext i8 %136 to i32
  %138 = call i32 @isxdigit(i32 %137) nounwind optsize
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %.loopexit48, label %.lr.ph53

.loopexit48:                                      ; preds = %129, %.preheader47
  %x.1.lcssa = phi x86_fp80 [ %x.0.lcssa, %.preheader47 ], [ %133, %129 ]
  %nonzero.2.lcssa = phi i32 [ %nonzero.0.lcssa, %.preheader47 ], [ %nonzero.3, %129 ]
  %.pre = load i8** %s, align 8, !tbaa !7
  %.pre82 = load i8* %.pre, align 1, !tbaa !0
  br label %140

; <label>:140                                     ; preds = %.loopexit48, %._crit_edge60
  %141 = phi i8 [ %115, %._crit_edge60 ], [ %.pre82, %.loopexit48 ]
  %142 = phi i8* [ %114, %._crit_edge60 ], [ %.pre, %.loopexit48 ]
  %nonzero.4 = phi i32 [ %nonzero.0.lcssa, %._crit_edge60 ], [ %nonzero.2.lcssa, %.loopexit48 ]
  %x.2 = phi x86_fp80 [ %x.0.lcssa, %._crit_edge60 ], [ %x.1.lcssa, %.loopexit48 ]
  %143 = zext i8 %141 to i32
  %144 = or i32 %143, 32
  %145 = icmp eq i32 %144, 112
  br i1 %145, label %146, label %.critedge8

; <label>:146                                     ; preds = %140
  %147 = getelementptr inbounds i8* %142, i64 1
  %148 = load i8* %147, align 1, !tbaa !0
  %149 = zext i8 %148 to i32
  %150 = add i32 %149, -48
  %151 = icmp ult i32 %150, 10
  br i1 %151, label %.critedge, label %152

; <label>:152                                     ; preds = %146
  switch i8 %148, label %.critedge8 [
    i8 43, label %valid_exp.exit
    i8 45, label %valid_exp.exit
  ]

valid_exp.exit:                                   ; preds = %152, %152
  %153 = getelementptr inbounds i8* %142, i64 2
  %154 = load i8* %153, align 1, !tbaa !0
  %155 = zext i8 %154 to i32
  %156 = add i32 %155, -48
  %157 = icmp ult i32 %156, 10
  br i1 %157, label %.critedge, label %.critedge8

.critedge:                                        ; preds = %valid_exp.exit, %146
  %158 = call i64 @strtol(i8* %147, i8** %s, i32 10) nounwind optsize
  %159 = icmp sgt i64 %158, 0
  br i1 %159, label %.lr.ph44, label %.preheader36

.preheader36:                                     ; preds = %.critedge
  %160 = icmp slt i64 %158, 0
  br i1 %160, label %.lr.ph40, label %.critedge8

.lr.ph44:                                         ; preds = %.lr.ph44, %.critedge
  %x.343 = phi x86_fp80 [ %161, %.lr.ph44 ], [ %x.2, %.critedge ]
  %e.042 = phi i64 [ %162, %.lr.ph44 ], [ %158, %.critedge ]
  %161 = fmul x86_fp80 %x.343, 0xK40008000000000000000
  %162 = add nsw i64 %e.042, -1
  %163 = icmp sgt i64 %162, 0
  br i1 %163, label %.lr.ph44, label %.critedge8

.lr.ph40:                                         ; preds = %.lr.ph40, %.preheader36
  %x.439 = phi x86_fp80 [ %164, %.lr.ph40 ], [ %x.2, %.preheader36 ]
  %e.138 = phi i64 [ %165, %.lr.ph40 ], [ %158, %.preheader36 ]
  %164 = fmul x86_fp80 %x.439, 0xK3FFE8000000000000000
  %165 = add nsw i64 %e.138, 1
  %exitcond76 = icmp eq i64 %165, 0
  br i1 %exitcond76, label %.critedge8, label %.lr.ph40

; <label>:166                                     ; preds = %62, %.thread
  %167 = add i32 %27, -48
  %168 = icmp ult i32 %167, 10
  br i1 %168, label %.lr.ph31, label %169

.preheader27:                                     ; preds = %171
  br i1 %168, label %.lr.ph31, label %._crit_edge

; <label>:169                                     ; preds = %166
  %170 = icmp eq i8 %26, 46
  br i1 %170, label %171, label %177

; <label>:171                                     ; preds = %169
  %172 = getelementptr inbounds i8* %25, i64 1
  %173 = load i8* %172, align 1, !tbaa !0
  %174 = zext i8 %173 to i32
  %175 = add i32 %174, -48
  %176 = icmp ult i32 %175, 10
  br i1 %176, label %.preheader27, label %177

; <label>:177                                     ; preds = %171, %169
  store i8* %s1, i8** %.01.ph, align 8, !tbaa !7
  br label %244

.lr.ph31:                                         ; preds = %.lr.ph31, %.preheader27, %166
  %178 = phi i32 [ %188, %.lr.ph31 ], [ %27, %.preheader27 ], [ %27, %166 ]
  %179 = phi i8 [ %187, %.lr.ph31 ], [ %26, %.preheader27 ], [ %26, %166 ]
  %180 = phi i8* [ %186, %.lr.ph31 ], [ %25, %.preheader27 ], [ %25, %166 ]
  %x.530 = phi x86_fp80 [ %184, %.lr.ph31 ], [ 0xK00000000000000000000, %.preheader27 ], [ 0xK00000000000000000000, %166 ]
  %nonzero.529 = phi i32 [ %nonzero.6, %.lr.ph31 ], [ 0, %.preheader27 ], [ 0, %166 ]
  %181 = fmul x86_fp80 %x.530, 0xK4002A000000000000000
  %182 = sitofp i32 %178 to x86_fp80
  %183 = fadd x86_fp80 %181, %182
  %184 = fadd x86_fp80 %183, 0xKC004C000000000000000
  %185 = icmp eq i8 %179, 48
  %nonzero.6 = select i1 %185, i32 %nonzero.529, i32 1
  %186 = getelementptr inbounds i8* %180, i64 1
  store i8* %186, i8** %s, align 8, !tbaa !7
  %187 = load i8* %186, align 1, !tbaa !0
  %188 = zext i8 %187 to i32
  %189 = add i32 %188, -48
  %190 = icmp ult i32 %189, 10
  br i1 %190, label %.lr.ph31, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph31, %.preheader27
  %191 = phi i8 [ %26, %.preheader27 ], [ %187, %.lr.ph31 ]
  %192 = phi i8* [ %25, %.preheader27 ], [ %186, %.lr.ph31 ]
  %x.5.lcssa = phi x86_fp80 [ 0xK00000000000000000000, %.preheader27 ], [ %184, %.lr.ph31 ]
  %nonzero.5.lcssa = phi i32 [ 0, %.preheader27 ], [ %nonzero.6, %.lr.ph31 ]
  %193 = icmp eq i8 %191, 46
  br i1 %193, label %.preheader18, label %.loopexit

.preheader18:                                     ; preds = %._crit_edge
  %storemerge19 = getelementptr inbounds i8* %192, i64 1
  store i8* %storemerge19, i8** %s, align 8
  %194 = load i8* %storemerge19, align 1, !tbaa !0
  %195 = zext i8 %194 to i32
  %196 = add i32 %195, -48
  %197 = icmp ult i32 %196, 10
  br i1 %197, label %.lr.ph24, label %.loopexit

.lr.ph24:                                         ; preds = %.lr.ph24, %.preheader18
  %198 = phi i32 [ %207, %.lr.ph24 ], [ %195, %.preheader18 ]
  %199 = phi i8 [ %206, %.lr.ph24 ], [ %194, %.preheader18 ]
  %storemerge23 = phi i8* [ %storemerge, %.lr.ph24 ], [ %storemerge19, %.preheader18 ]
  %x.622 = phi x86_fp80 [ %203, %.lr.ph24 ], [ %x.5.lcssa, %.preheader18 ]
  %frac.121 = phi x86_fp80 [ %204, %.lr.ph24 ], [ 0xK4002A000000000000000, %.preheader18 ]
  %nonzero.720 = phi i32 [ %nonzero.8, %.lr.ph24 ], [ %nonzero.5.lcssa, %.preheader18 ]
  %200 = add nsw i32 %198, -48
  %201 = sitofp i32 %200 to x86_fp80
  %202 = fdiv x86_fp80 %201, %frac.121
  %203 = fadd x86_fp80 %x.622, %202
  %204 = fmul x86_fp80 %frac.121, 0xK4002A000000000000000
  %205 = icmp eq i8 %199, 48
  %nonzero.8 = select i1 %205, i32 %nonzero.720, i32 1
  %storemerge = getelementptr inbounds i8* %storemerge23, i64 1
  store i8* %storemerge, i8** %s, align 8
  %206 = load i8* %storemerge, align 1, !tbaa !0
  %207 = zext i8 %206 to i32
  %208 = add i32 %207, -48
  %209 = icmp ult i32 %208, 10
  br i1 %209, label %.lr.ph24, label %.loopexit

.loopexit:                                        ; preds = %.lr.ph24, %.preheader18, %._crit_edge
  %210 = phi i8 [ %191, %._crit_edge ], [ %194, %.preheader18 ], [ %206, %.lr.ph24 ]
  %211 = phi i8* [ %192, %._crit_edge ], [ %storemerge19, %.preheader18 ], [ %storemerge, %.lr.ph24 ]
  %nonzero.9 = phi i32 [ %nonzero.5.lcssa, %._crit_edge ], [ %nonzero.5.lcssa, %.preheader18 ], [ %nonzero.8, %.lr.ph24 ]
  %x.7 = phi x86_fp80 [ %x.5.lcssa, %._crit_edge ], [ %x.5.lcssa, %.preheader18 ], [ %203, %.lr.ph24 ]
  %212 = zext i8 %210 to i32
  %213 = or i32 %212, 32
  %214 = icmp eq i32 %213, 101
  br i1 %214, label %215, label %.critedge8

; <label>:215                                     ; preds = %.loopexit
  %216 = getelementptr inbounds i8* %211, i64 1
  %217 = load i8* %216, align 1, !tbaa !0
  %218 = zext i8 %217 to i32
  %219 = add i32 %218, -48
  %220 = icmp ult i32 %219, 10
  br i1 %220, label %.critedge9, label %221

; <label>:221                                     ; preds = %215
  switch i8 %217, label %.critedge8 [
    i8 43, label %valid_exp.exit7
    i8 45, label %valid_exp.exit7
  ]

valid_exp.exit7:                                  ; preds = %221, %221
  %222 = getelementptr inbounds i8* %211, i64 2
  %223 = load i8* %222, align 1, !tbaa !0
  %224 = zext i8 %223 to i32
  %225 = add i32 %224, -48
  %226 = icmp ult i32 %225, 10
  br i1 %226, label %.critedge9, label %.critedge8

.critedge9:                                       ; preds = %valid_exp.exit7, %215
  store i8* %216, i8** %s, align 8, !tbaa !7
  %227 = call i64 @strtol(i8* %216, i8** %s, i32 10) nounwind optsize
  %228 = icmp sgt i64 %227, 0
  br i1 %228, label %.lr.ph15, label %.preheader

.preheader:                                       ; preds = %.critedge9
  %229 = icmp slt i64 %227, 0
  br i1 %229, label %.lr.ph, label %.critedge8

.lr.ph15:                                         ; preds = %.lr.ph15, %.critedge9
  %x.814 = phi x86_fp80 [ %230, %.lr.ph15 ], [ %x.7, %.critedge9 ]
  %e.213 = phi i64 [ %231, %.lr.ph15 ], [ %227, %.critedge9 ]
  %230 = fmul x86_fp80 %x.814, 0xK4002A000000000000000
  %231 = add nsw i64 %e.213, -1
  %232 = icmp sgt i64 %231, 0
  br i1 %232, label %.lr.ph15, label %.critedge8

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %x.912 = phi x86_fp80 [ %233, %.lr.ph ], [ %x.7, %.preheader ]
  %e.311 = phi i64 [ %234, %.lr.ph ], [ %227, %.preheader ]
  %233 = fdiv x86_fp80 %x.912, 0xK4002A000000000000000
  %234 = add nsw i64 %e.311, 1
  %exitcond = icmp eq i64 %234, 0
  br i1 %exitcond, label %.critedge8, label %.lr.ph

.critedge8:                                       ; preds = %.lr.ph, %.lr.ph15, %.preheader, %valid_exp.exit7, %221, %.loopexit, %.lr.ph40, %.lr.ph44, %.preheader36, %valid_exp.exit, %152, %140
  %nonzero.10 = phi i32 [ %nonzero.4, %valid_exp.exit ], [ %nonzero.4, %140 ], [ %nonzero.9, %valid_exp.exit7 ], [ %nonzero.9, %.loopexit ], [ %nonzero.4, %152 ], [ %nonzero.9, %221 ], [ %nonzero.9, %.lr.ph ], [ %nonzero.9, %.lr.ph15 ], [ %nonzero.9, %.preheader ], [ %nonzero.4, %.lr.ph40 ], [ %nonzero.4, %.lr.ph44 ], [ %nonzero.4, %.preheader36 ]
  %x.10 = phi x86_fp80 [ %x.2, %valid_exp.exit ], [ %x.2, %140 ], [ %x.7, %valid_exp.exit7 ], [ %x.7, %.loopexit ], [ %x.2, %152 ], [ %x.7, %221 ], [ %233, %.lr.ph ], [ %230, %.lr.ph15 ], [ %x.7, %.preheader ], [ %164, %.lr.ph40 ], [ %161, %.lr.ph44 ], [ %x.2, %.preheader36 ]
  %235 = icmp eq i32 %nonzero.10, 0
  %236 = fcmp une x86_fp80 %x.10, 0xK00000000000000000000
  %or.cond = or i1 %235, %236
  %237 = fdiv x86_fp80 0xK3FFF8000000000000000, %x.10
  %238 = fcmp une x86_fp80 %237, 0xK00000000000000000000
  %or.cond6 = and i1 %or.cond, %238
  %239 = select i1 %or.cond6, i32 %2, i32 34
  store i32 %239, i32* %1, align 4, !tbaa !6
  %240 = load i8** %s, align 8, !tbaa !7
  store i8* %240, i8** %.01.ph, align 8, !tbaa !7
  %241 = icmp eq i32 %sign.0, 0
  br i1 %241, label %244, label %242

; <label>:242                                     ; preds = %.critedge8
  %243 = fsub x86_fp80 0xK80000000000000000000, %x.10
  br label %244

; <label>:244                                     ; preds = %242, %.critedge8, %177, %85, %59, %41
  %.0 = phi x86_fp80 [ %44, %41 ], [ 0xK7FFF4000000000000000, %59 ], [ 0xK00000000000000000000, %85 ], [ 0xK00000000000000000000, %177 ], [ %243, %242 ], [ %x.10, %.critedge8 ]
  ret x86_fp80 %.0
}

define i64 @strtoll(i8* %s, i8** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @strtoimax(i8* %s, i8** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @strtol(i8* %s, i8** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @strtoimax(i8* %s, i8** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @strtoull(i8* %s, i8** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @strtoumax(i8* %s, i8** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @strtoul(i8* %s, i8** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @strtoumax(i8* %s, i8** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @strtoumax(i8* %s1, i8** %p, i32 %base) nounwind uwtable optsize {
  %ip = alloca %struct.intparse, align 8
  %1 = bitcast %struct.intparse* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ({ i64, i32, i64, i8, i8, i8, i8, [4 x i8] }* @strtoumax.ip to i8*), i64 32, i32 8, i1 false)
  %2 = icmp ne i8** %p, null
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  store i8* %s1, i8** %p, align 8, !tbaa !7
  br label %4

; <label>:4                                       ; preds = %3, %0
  %5 = icmp ne i32 %base, 0
  %6 = add i32 %base, -2
  %7 = icmp ugt i32 %6, 34
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %12, label %.preheader

.preheader:                                       ; preds = %4
  %8 = load i8* %s1, align 1, !tbaa !0
  %9 = zext i8 %8 to i32
  %10 = call i32 @isspace(i32 %9) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %._crit_edge, label %.lr.ph

; <label>:12                                      ; preds = %4
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %13, align 4, !tbaa !6
  br label %44

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %s.02 = phi i8* [ %14, %.lr.ph ], [ %s1, %.preheader ]
  %14 = getelementptr inbounds i8* %s.02, i64 1
  %15 = load i8* %14, align 1, !tbaa !0
  %16 = zext i8 %15 to i32
  %17 = call i32 @isspace(i32 %16) nounwind optsize
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %s.0.lcssa = phi i8* [ %s1, %.preheader ], [ %14, %.lr.ph ]
  %19 = trunc i32 %base to i8
  %20 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 4
  store i8 %19, i8* %20, align 1, !tbaa !0
  %21 = call i32 @__intparse(%struct.intparse* %ip, i8* %s.0.lcssa, i64 -1) nounwind optsize
  %22 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %23 = load i8* %22, align 1, !tbaa !0
  br i1 %2, label %24, label %._crit_edge3

; <label>:24                                      ; preds = %._crit_edge
  %25 = icmp eq i8 %23, 22
  br i1 %25, label %.thread, label %26

; <label>:26                                      ; preds = %24
  %27 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 2
  %28 = load i64* %27, align 8, !tbaa !5
  %29 = getelementptr inbounds i8* %s.0.lcssa, i64 %28
  store i8* %29, i8** %p, align 8, !tbaa !7
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %26, %._crit_edge
  %30 = icmp eq i8 %23, 0
  br i1 %30, label %36, label %.thread

.thread:                                          ; preds = %._crit_edge3, %24
  %31 = phi i8 [ %23, %._crit_edge3 ], [ 22, %24 ]
  %32 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %33 = sext i8 %31 to i32
  %34 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %33, i32* %34, align 4, !tbaa !6
  %35 = load i8* %32, align 1, !tbaa !0
  %not. = icmp ne i8 %35, 22
  %. = sext i1 %not. to i64
  br label %44

; <label>:36                                      ; preds = %._crit_edge3
  %37 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 3
  %38 = load i8* %37, align 8, !tbaa !0
  %39 = icmp ne i8 %38, 0
  %40 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 0
  %41 = load i64* %40, align 8, !tbaa !9
  %42 = sub i64 0, %41
  %43 = select i1 %39, i64 %42, i64 %41
  br label %44

; <label>:44                                      ; preds = %36, %.thread, %12
  %.0 = phi i64 [ 0, %12 ], [ %43, %36 ], [ %., %.thread ]
  ret i64 %.0
}

define i32 @strverscmp(i8* %l, i8* %r) nounwind uwtable optsize {
  %1 = tail call i32 @strcmp(i8* %l, i8* %r) nounwind optsize
  ret i32 %1
}

define i64 @strxfrm_l(i8* %dest, i8* %src, i64 %n, %struct.__locale.663* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i64 @strxfrm(i8* %dest, i8* %src, i64 %n) nounwind optsize
  ret i64 %1
}

define i64 @strxfrm(i8* %dest, i8* %src, i64 %n) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %src) nounwind optsize
  %2 = icmp ult i64 %1, %n
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @strcpy(i8* %dest, i8* %src) nounwind optsize
  br label %5

; <label>:5                                       ; preds = %3, %0
  ret i64 %1
}

define void @swab(i8* nocapture %_src, i8* nocapture %_dest, i64 %n) nounwind uwtable optsize {
  %1 = icmp sgt i64 %n, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %0
  %dest.03 = phi i8* [ %6, %.lr.ph ], [ %_dest, %0 ]
  %src.02 = phi i8* [ %7, %.lr.ph ], [ %_src, %0 ]
  %.01 = phi i64 [ %8, %.lr.ph ], [ %n, %0 ]
  %2 = getelementptr inbounds i8* %src.02, i64 1
  %3 = load i8* %2, align 1, !tbaa !0
  store i8 %3, i8* %dest.03, align 1, !tbaa !0
  %4 = load i8* %src.02, align 1, !tbaa !0
  %5 = getelementptr inbounds i8* %dest.03, i64 1
  store i8 %4, i8* %5, align 1, !tbaa !0
  %6 = getelementptr inbounds i8* %dest.03, i64 2
  %7 = getelementptr inbounds i8* %src.02, i64 2
  %8 = add nsw i64 %.01, -2
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %0
  ret void
}

define i32 @swapoff(i8* %path) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 115, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @swapon(i8* %path, i32 %flags) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = sext i32 %flags to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 87, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @swprintf(i32* %s, i64 %n, i32* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.664], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.664]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.664]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vswprintf(i32* %s, i64 %n, i32* %fmt, %struct.__va_list_tag.664* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @swscanf(i32* %s, i32* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.665], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.665]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.665]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vswscanf(i32* %s, i32* %fmt, %struct.__va_list_tag.665* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i32 @symlinkat(i8* %existing, i32 %fd, i8* %new) nounwind uwtable optsize {
  %1 = ptrtoint i8* %existing to i64
  %2 = sext i32 %fd to i64
  %3 = ptrtoint i8* %new to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 331, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @symlink(i8* %existing, i8* %new) nounwind uwtable optsize {
  %1 = ptrtoint i8* %existing to i64
  %2 = ptrtoint i8* %new to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 83, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define void @sync() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 36, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  ret void
}

define i64 @syscall(i64 %n, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.666], align 16
  %1 = bitcast [1 x %struct.__va_list_tag.666]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 0
  %3 = load i32* %2, align 16
  %4 = icmp ult i32 %3, 41
  br i1 %4, label %10, label %.thread

.thread:                                          ; preds = %0
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 2
  %6 = load i8** %5, align 8
  %7 = getelementptr i8* %6, i64 8
  store i8* %7, i8** %5, align 8
  %8 = bitcast i8* %6 to i64*
  %9 = load i64* %8, align 8
  br label %25

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 3
  %12 = load i8** %11, align 16
  %13 = sext i32 %3 to i64
  %14 = getelementptr i8* %12, i64 %13
  %15 = add i32 %3, 8
  store i32 %15, i32* %2, align 16
  %16 = bitcast i8* %14 to i64*
  %17 = load i64* %16, align 8
  %18 = icmp ult i32 %15, 41
  br i1 %18, label %19, label %25

; <label>:19                                      ; preds = %10
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 3
  %21 = load i8** %20, align 16
  %22 = sext i32 %15 to i64
  %23 = getelementptr i8* %21, i64 %22
  %24 = add i32 %3, 16
  store i32 %24, i32* %2, align 16
  br label %30

; <label>:25                                      ; preds = %10, %.thread
  %26 = phi i64 [ %9, %.thread ], [ %17, %10 ]
  %.pr610 = phi i32 [ %3, %.thread ], [ %15, %10 ]
  %27 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 2
  %28 = load i8** %27, align 8
  %29 = getelementptr i8* %28, i64 8
  store i8* %29, i8** %27, align 8
  br label %30

; <label>:30                                      ; preds = %25, %19
  %31 = phi i64 [ %26, %25 ], [ %17, %19 ]
  %.pr7 = phi i32 [ %.pr610, %25 ], [ %24, %19 ]
  %.in1 = phi i8* [ %28, %25 ], [ %23, %19 ]
  %32 = bitcast i8* %.in1 to i64*
  %33 = load i64* %32, align 8
  %34 = icmp ult i32 %.pr7, 41
  br i1 %34, label %35, label %41

; <label>:35                                      ; preds = %30
  %36 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 3
  %37 = load i8** %36, align 16
  %38 = sext i32 %.pr7 to i64
  %39 = getelementptr i8* %37, i64 %38
  %40 = add i32 %.pr7, 8
  store i32 %40, i32* %2, align 16
  br label %45

; <label>:41                                      ; preds = %30
  %42 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 2
  %43 = load i8** %42, align 8
  %44 = getelementptr i8* %43, i64 8
  store i8* %44, i8** %42, align 8
  br label %45

; <label>:45                                      ; preds = %41, %35
  %.pr8 = phi i32 [ %.pr7, %41 ], [ %40, %35 ]
  %.in2 = phi i8* [ %43, %41 ], [ %39, %35 ]
  %46 = bitcast i8* %.in2 to i64*
  %47 = load i64* %46, align 8
  %48 = icmp ult i32 %.pr8, 41
  br i1 %48, label %49, label %55

; <label>:49                                      ; preds = %45
  %50 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 3
  %51 = load i8** %50, align 16
  %52 = sext i32 %.pr8 to i64
  %53 = getelementptr i8* %51, i64 %52
  %54 = add i32 %.pr8, 8
  store i32 %54, i32* %2, align 16
  br label %59

; <label>:55                                      ; preds = %45
  %56 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 2
  %57 = load i8** %56, align 8
  %58 = getelementptr i8* %57, i64 8
  store i8* %58, i8** %56, align 8
  br label %59

; <label>:59                                      ; preds = %55, %49
  %.pr9 = phi i32 [ %.pr8, %55 ], [ %54, %49 ]
  %.in3 = phi i8* [ %57, %55 ], [ %53, %49 ]
  %60 = bitcast i8* %.in3 to i64*
  %61 = load i64* %60, align 8
  %62 = icmp ult i32 %.pr9, 41
  br i1 %62, label %63, label %69

; <label>:63                                      ; preds = %59
  %64 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 3
  %65 = load i8** %64, align 16
  %66 = sext i32 %.pr9 to i64
  %67 = getelementptr i8* %65, i64 %66
  %68 = add i32 %.pr9, 8
  store i32 %68, i32* %2, align 16
  br label %73

; <label>:69                                      ; preds = %59
  %70 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 2
  %71 = load i8** %70, align 8
  %72 = getelementptr i8* %71, i64 8
  store i8* %72, i8** %70, align 8
  br label %73

; <label>:73                                      ; preds = %69, %63
  %74 = phi i32 [ %.pr9, %69 ], [ %68, %63 ]
  %.in4 = phi i8* [ %71, %69 ], [ %67, %63 ]
  %75 = bitcast i8* %.in4 to i64*
  %76 = load i64* %75, align 8
  %77 = icmp ult i32 %74, 41
  br i1 %77, label %78, label %84

; <label>:78                                      ; preds = %73
  %79 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 3
  %80 = load i8** %79, align 16
  %81 = sext i32 %74 to i64
  %82 = getelementptr i8* %80, i64 %81
  %83 = add i32 %74, 8
  store i32 %83, i32* %2, align 16
  br label %88

; <label>:84                                      ; preds = %73
  %85 = getelementptr inbounds [1 x %struct.__va_list_tag.666]* %ap, i64 0, i64 0, i32 2
  %86 = load i8** %85, align 8
  %87 = getelementptr i8* %86, i64 8
  store i8* %87, i8** %85, align 8
  br label %88

; <label>:88                                      ; preds = %84, %78
  %.in5 = phi i8* [ %82, %78 ], [ %86, %84 ]
  %89 = bitcast i8* %.in5 to i64*
  %90 = load i64* %89, align 8
  call void @llvm.va_end(i8* %1)
  %91 = call i64 (i64, ...)* @__syscall(i64 %n, i64 %31, i64 %33, i64 %47, i64 %61, i64 %76, i64 %90) nounwind optsize
  %92 = call i64 @__syscall_ret(i64 %91) nounwind optsize
  ret i64 %92
}

define i64 @__syscall_ret(i64 %r) nounwind uwtable optsize {
  %1 = icmp ugt i64 %r, -4096
  br i1 %1, label %2, label %6

; <label>:2                                       ; preds = %0
  %3 = sub i64 0, %r
  %4 = trunc i64 %3 to i32
  %5 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 %4, i32* %5, align 4, !tbaa !6
  br label %6

; <label>:6                                       ; preds = %2, %0
  %.0 = phi i64 [ -1, %2 ], [ %r, %0 ]
  ret i64 %.0
}

define i64 @sysconf(i32 %name) nounwind uwtable optsize {
  %1 = icmp ugt i32 %name, 249
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %0
  %3 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %3, align 4, !tbaa !6
  br label %13

; <label>:4                                       ; preds = %0
  %5 = sext i32 %name to i64
  %6 = getelementptr inbounds [249 x i16]* @sysconf.values, i64 0, i64 %5
  %7 = load i16* %6, align 2, !tbaa !8
  %8 = icmp eq i16 %7, -2
  br i1 %8, label %13, label %9

; <label>:9                                       ; preds = %4
  switch i32 %name, label %11 [
    i32 0, label %13
    i32 33, label %10
  ]

; <label>:10                                      ; preds = %9
  br label %13

; <label>:11                                      ; preds = %9
  %12 = sext i16 %7 to i64
  br label %13

; <label>:13                                      ; preds = %11, %10, %9, %4, %2
  %.0 = phi i64 [ -1, %2 ], [ 2147483647, %10 ], [ %12, %11 ], [ 200809, %4 ], [ 131072, %9 ]
  ret i64 %.0
}

define i32 @sysinfo(%struct.sysinfo* %info) nounwind uwtable optsize {
  %1 = ptrtoint %struct.sysinfo* %info to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 116, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @setlogmask(i32 %maskpri) nounwind uwtable optsize {
  %1 = load i32* @log_mask, align 4, !tbaa !6
  %2 = icmp eq i32 %maskpri, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  store i32 %maskpri, i32* @log_mask, align 4, !tbaa !6
  br label %4

; <label>:4                                       ; preds = %3, %0
  ret i32 %1
}

define void @closelog() nounwind uwtable optsize {
  %cs = alloca i32, align 4
  %1 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %2 = load i32* @log_fd, align 4, !tbaa !6
  %3 = call i32 @close(i32 %2) nounwind optsize
  store i32 -1, i32* @log_fd, align 4, !tbaa !6
  %4 = load i32* %cs, align 4, !tbaa !6
  %5 = call i32 @pthread_setcancelstate(i32 %4, i32* null) nounwind optsize
  ret void
}

define void @openlog(i8* %ident, i32 %opt, i32 %facility) nounwind uwtable optsize {
  %cs = alloca i32, align 4
  %1 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  call fastcc void @__openlog(i8* %ident, i32 %opt, i32 %facility) optsize
  %2 = load i32* %cs, align 4, !tbaa !6
  %3 = call i32 @pthread_setcancelstate(i32 %2, i32* null) nounwind optsize
  ret void
}

define internal fastcc void @__openlog(i8* %ident, i32 %opt, i32 %facility) nounwind uwtable optsize {
  store i8* %ident, i8** @log_ident, align 8, !tbaa !7
  store i32 %opt, i32* @log_opt, align 4, !tbaa !6
  store i32 %facility, i32* @log_facility, align 4, !tbaa !6
  %1 = and i32 %opt, 8
  %2 = icmp eq i32 %1, 0
  %3 = load i32* @log_fd, align 4, !tbaa !6
  %4 = icmp sgt i32 %3, -1
  %or.cond = or i1 %2, %4
  br i1 %or.cond, label %8, label %5

; <label>:5                                       ; preds = %0
  %6 = tail call i32 @socket(i32 1, i32 2, i32 0) nounwind optsize
  store i32 %6, i32* @log_fd, align 4, !tbaa !6
  %7 = tail call i32 (i32, i32, ...)* @fcntl(i32 %6, i32 2, i32 1) nounwind optsize
  br label %8

; <label>:8                                       ; preds = %5, %0
  ret void
}

define void @__vsyslog(i32 %priority, i8* %message, %struct.__va_list_tag.635* %ap) nounwind uwtable optsize {
  %timebuf.i = alloca [16 x i8], align 16
  %now.i = alloca i64, align 8
  %tm.i = alloca %struct.tm.197, align 8
  %buf.i = alloca [256 x i8], align 16
  %cs = alloca i32, align 4
  %1 = load i32* @log_mask, align 4, !tbaa !6
  %2 = and i32 %priority, 7
  %3 = shl i32 1, %2
  %4 = and i32 %1, %3
  %5 = icmp eq i32 %4, 0
  %6 = icmp ugt i32 %priority, 1023
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %63, label %7

; <label>:7                                       ; preds = %0
  %8 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %9 = getelementptr inbounds [16 x i8]* %timebuf.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 -1, i8* %9) nounwind
  %10 = bitcast i64* %now.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %10) nounwind
  %11 = bitcast %struct.tm.197* %tm.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %11) nounwind
  %12 = getelementptr inbounds [256 x i8]* %buf.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 -1, i8* %12) nounwind
  %13 = load i32* @log_fd, align 4, !tbaa !6
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %22

; <label>:15                                      ; preds = %7
  %16 = load i8** @log_ident, align 8, !tbaa !7
  %17 = load i32* @log_opt, align 4, !tbaa !6
  %18 = or i32 %17, 8
  %19 = load i32* @log_facility, align 4, !tbaa !6
  call fastcc void @__openlog(i8* %16, i32 %18, i32 %19) nounwind optsize
  %20 = load i32* @log_fd, align 4, !tbaa !6
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %_vsyslog.exit, label %22

; <label>:22                                      ; preds = %15, %7
  %23 = call i64 @time(i64* null) nounwind optsize
  store i64 %23, i64* %now.i, align 8, !tbaa !5
  %24 = call %struct.tm.197* @gmtime_r(i64* %now.i, %struct.tm.197* %tm.i) nounwind optsize
  %25 = call i64 bitcast (i64 (i8*, i64, i8*, %struct.tm.656*)* @strftime to i64 (i8*, i64, i8*, %struct.tm.197*)*)(i8* %9, i64 16, i8* getelementptr inbounds ([9 x i8]* @.str813, i64 0, i64 0), %struct.tm.197* %tm.i) nounwind optsize
  %26 = load i32* @log_opt, align 4, !tbaa !6
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %31, label %29

; <label>:29                                      ; preds = %22
  %30 = call i32 @getpid() nounwind optsize
  br label %31

; <label>:31                                      ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ 0, %22 ]
  %33 = load i8** @log_ident, align 8, !tbaa !7
  %34 = icmp ne i8* %33, null
  %35 = select i1 %34, i8* %33, i8* getelementptr inbounds ([1 x i8]* @.str2815, i64 0, i64 0)
  %36 = icmp eq i32 %32, 0
  %37 = zext i1 %36 to i64
  %38 = getelementptr inbounds [2 x i8]* @.str3816, i64 0, i64 %37
  %39 = getelementptr inbounds [2 x i8]* @.str4817, i64 0, i64 %37
  %40 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %12, i64 256, i8* getelementptr inbounds ([20 x i8]* @.str1814, i64 0, i64 0), i32 %priority, i8* %9, i8* %35, i8* %38, i32 %32, i8* %39) nounwind optsize
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [256 x i8]* %buf.i, i64 0, i64 %41
  %43 = sub i64 256, %41
  %44 = call i32 @vsnprintf(i8* %42, i64 %43, i8* %message, %struct.__va_list_tag.635* %ap) nounwind optsize
  %45 = icmp sgt i32 %44, -1
  br i1 %45, label %46, label %_vsyslog.exit

; <label>:46                                      ; preds = %31
  %47 = add nsw i32 %44, %40
  %48 = add nsw i32 %47, -1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [256 x i8]* %buf.i, i64 0, i64 %49
  %51 = load i8* %50, align 1, !tbaa !0
  %52 = icmp eq i8 %51, 10
  br i1 %52, label %57, label %53

; <label>:53                                      ; preds = %46
  %54 = add nsw i32 %47, 1
  %55 = sext i32 %47 to i64
  %56 = getelementptr inbounds [256 x i8]* %buf.i, i64 0, i64 %55
  store i8 10, i8* %56, align 1, !tbaa !0
  br label %57

; <label>:57                                      ; preds = %53, %46
  %l.0.i = phi i32 [ %54, %53 ], [ %47, %46 ]
  %58 = load i32* @log_fd, align 4, !tbaa !6
  %59 = sext i32 %l.0.i to i64
  %60 = call i64 @sendto(i32 %58, i8* %12, i64 %59, i32 0, %struct.sockaddr.24* bitcast ({ i16, [9 x i8], i8 }* @log_addr to %struct.sockaddr.24*), i32 11) nounwind optsize
  br label %_vsyslog.exit

_vsyslog.exit:                                    ; preds = %57, %31, %15
  call void @llvm.lifetime.end(i64 -1, i8* %9) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %10) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %11) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %12) nounwind
  %61 = load i32* %cs, align 4, !tbaa !6
  %62 = call i32 @pthread_setcancelstate(i32 %61, i32* null) nounwind optsize
  br label %63

; <label>:63                                      ; preds = %_vsyslog.exit, %0
  ret void
}

define void @syslog(i32 %priority, i8* %message, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.635], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.635]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.635]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  call void @__vsyslog(i32 %priority, i8* %message, %struct.__va_list_tag.635* %1) optsize
  call void @llvm.va_end(i8* %2)
  ret void
}

define i32 @system(i8* %cmd) nounwind uwtable optsize {
  %old = alloca %struct.sigset_t.590, align 8
  %new = alloca %struct.sigset_t.590, align 8
  %sa = alloca %struct.sigaction.671, align 8
  %oldint = alloca %struct.sigaction.671, align 8
  %oldquit = alloca %struct.sigaction.671, align 8
  %status = alloca i32, align 4
  %1 = icmp eq i8* %cmd, null
  br i1 %1, label %31, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.sigaction.671* %sa, i64 0, i32 0, i32 0
  store void (i32)* inttoptr (i64 1 to void (i32)*), void (i32)** %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.sigaction.671* %sa, i64 0, i32 1
  %5 = call i32 @sigemptyset(%struct.sigset_t.590* %4) nounwind optsize
  %6 = getelementptr inbounds %struct.sigaction.671* %sa, i64 0, i32 2
  store i32 0, i32* %6, align 8, !tbaa !6
  %7 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.671*, %struct.sigaction.671*)*)(i32 2, %struct.sigaction.671* %sa, %struct.sigaction.671* %oldint) nounwind optsize
  %8 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.671*, %struct.sigaction.671*)*)(i32 3, %struct.sigaction.671* %sa, %struct.sigaction.671* %oldquit) nounwind optsize
  %9 = call i32 bitcast (i32 (%struct.sigset_t.588*, i32)* @sigaddset to i32 (%struct.sigset_t.590*, i32)*)(%struct.sigset_t.590* %4, i32 17) nounwind optsize
  %10 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 0, %struct.sigset_t.590* %new, %struct.sigset_t.590* %old) nounwind optsize
  %11 = call i32 @fork() nounwind optsize
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %13, label %.preheader

; <label>:13                                      ; preds = %2
  %14 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.671*, %struct.sigaction.671*)*)(i32 2, %struct.sigaction.671* %oldint, %struct.sigaction.671* null) nounwind optsize
  %15 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.671*, %struct.sigaction.671*)*)(i32 3, %struct.sigaction.671* %oldquit, %struct.sigaction.671* null) nounwind optsize
  %16 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 2, %struct.sigset_t.590* %old, %struct.sigset_t.590* null) nounwind optsize
  %17 = icmp eq i32 %11, 0
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %13
  %19 = call i32 (i8*, i8*, ...)* @execl(i8* getelementptr inbounds ([8 x i8]* @.str818, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str1819, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str2820, i64 0, i64 0), i8* %cmd, i8* null) nounwind optsize
  call void @_exit(i32 127) nounwind optsize
  br label %31

.preheader:                                       ; preds = %22, %2
  %20 = call i32 @waitpid(i32 %11, i32* %status, i32 0) nounwind optsize
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %.loopexit

; <label>:22                                      ; preds = %.preheader
  %23 = call i32* @__errno_location() nounwind readnone optsize
  %24 = load i32* %23, align 4, !tbaa !6
  %25 = icmp eq i32 %24, 4
  br i1 %25, label %.preheader, label %26

; <label>:26                                      ; preds = %22
  store i32 -1, i32* %status, align 4, !tbaa !6
  br label %.loopexit

.loopexit:                                        ; preds = %26, %.preheader
  %27 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.671*, %struct.sigaction.671*)*)(i32 2, %struct.sigaction.671* %oldint, %struct.sigaction.671* null) nounwind optsize
  %28 = call i32 bitcast (i32 (i32, %struct.sigaction.585*, %struct.sigaction.585*)* @sigaction to i32 (i32, %struct.sigaction.671*, %struct.sigaction.671*)*)(i32 3, %struct.sigaction.671* %oldquit, %struct.sigaction.671* null) nounwind optsize
  %29 = call i32 bitcast (i32 (i32, %struct.sigset_t.335*, %struct.sigset_t.335*)* @sigprocmask to i32 (i32, %struct.sigset_t.590*, %struct.sigset_t.590*)*)(i32 2, %struct.sigset_t.590* %old, %struct.sigset_t.590* null) nounwind optsize
  %30 = load i32* %status, align 4, !tbaa !6
  br label %31

; <label>:31                                      ; preds = %.loopexit, %18, %13, %0
  %.0 = phi i32 [ %30, %.loopexit ], [ 1, %0 ], [ -1, %18 ], [ -1, %13 ]
  ret i32 %.0
}

define float @__tandf(double %x, i32 %iy) nounwind uwtable readnone optsize {
  %1 = fmul double %x, %x
  %2 = fmul double %1, 0x3F8362B9BF971BCD
  %3 = fadd double %2, 0x3F685DADFCECF44E
  %4 = fmul double %1, 0x3F991DF3908C33CE
  %5 = fadd double %4, 0x3FAB54C91D865AFE
  %6 = fmul double %1, %1
  %7 = fmul double %1, %x
  %8 = fmul double %1, 0x3FC112FD38999F72
  %9 = fadd double %8, 0x3FD5554D3418C99F
  %10 = fmul double %7, %9
  %11 = fadd double %10, %x
  %12 = fmul double %7, %6
  %13 = fmul double %6, %3
  %14 = fadd double %5, %13
  %15 = fmul double %12, %14
  %16 = fadd double %11, %15
  %17 = icmp eq i32 %iy, 1
  br i1 %17, label %20, label %18

; <label>:18                                      ; preds = %0
  %19 = fdiv double -1.000000e+00, %16
  br label %20

; <label>:20                                      ; preds = %18, %0
  %.0.in = phi double [ %19, %18 ], [ %16, %0 ]
  %.0 = fptrunc double %.0.in to float
  ret float %.0
}

define float @tanf(float %x) nounwind uwtable optsize {
  %y = alloca double, align 8
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ult i32 %2, 1061752795
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = icmp ult i32 %2, 964689920
  %6 = fptosi float %x to i32
  %7 = icmp eq i32 %6, 0
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %66, label %8

; <label>:8                                       ; preds = %4
  %9 = fpext float %x to double
  %10 = call float @__tandf(double %9, i32 1) nounwind optsize
  br label %66

; <label>:11                                      ; preds = %0
  %12 = icmp ult i32 %2, 1081824210
  br i1 %12, label %13, label %33

; <label>:13                                      ; preds = %11
  %14 = icmp ult i32 %2, 1075235812
  %15 = icmp sgt i32 %1, 0
  %16 = fpext float %x to double
  br i1 %14, label %17, label %25

; <label>:17                                      ; preds = %13
  br i1 %15, label %18, label %20

; <label>:18                                      ; preds = %17
  %19 = fadd double %16, 0xBFF921FB54442D18
  br label %22

; <label>:20                                      ; preds = %17
  %21 = fadd double %16, 0x3FF921FB54442D18
  br label %22

; <label>:22                                      ; preds = %20, %18
  %23 = phi double [ %19, %18 ], [ %21, %20 ]
  %24 = call float @__tandf(double %23, i32 -1) nounwind optsize
  br label %66

; <label>:25                                      ; preds = %13
  br i1 %15, label %26, label %28

; <label>:26                                      ; preds = %25
  %27 = fadd double %16, 0xC00921FB54442D18
  br label %30

; <label>:28                                      ; preds = %25
  %29 = fadd double %16, 0x400921FB54442D18
  br label %30

; <label>:30                                      ; preds = %28, %26
  %31 = phi double [ %27, %26 ], [ %29, %28 ]
  %32 = call float @__tandf(double %31, i32 1) nounwind optsize
  br label %66

; <label>:33                                      ; preds = %11
  %34 = icmp ult i32 %2, 1088565718
  br i1 %34, label %35, label %55

; <label>:35                                      ; preds = %33
  %36 = icmp ult i32 %2, 1085271520
  %37 = icmp sgt i32 %1, 0
  %38 = fpext float %x to double
  br i1 %36, label %39, label %47

; <label>:39                                      ; preds = %35
  br i1 %37, label %40, label %42

; <label>:40                                      ; preds = %39
  %41 = fadd double %38, 0xC012D97C7F3321D2
  br label %44

; <label>:42                                      ; preds = %39
  %43 = fadd double %38, 0x4012D97C7F3321D2
  br label %44

; <label>:44                                      ; preds = %42, %40
  %45 = phi double [ %41, %40 ], [ %43, %42 ]
  %46 = call float @__tandf(double %45, i32 -1) nounwind optsize
  br label %66

; <label>:47                                      ; preds = %35
  br i1 %37, label %48, label %50

; <label>:48                                      ; preds = %47
  %49 = fadd double %38, 0xC01921FB54442D18
  br label %52

; <label>:50                                      ; preds = %47
  %51 = fadd double %38, 0x401921FB54442D18
  br label %52

; <label>:52                                      ; preds = %50, %48
  %53 = phi double [ %49, %48 ], [ %51, %50 ]
  %54 = call float @__tandf(double %53, i32 1) nounwind optsize
  br label %66

; <label>:55                                      ; preds = %33
  %56 = icmp ugt i32 %2, 2139095039
  br i1 %56, label %57, label %59

; <label>:57                                      ; preds = %55
  %58 = fsub float %x, %x
  br label %66

; <label>:59                                      ; preds = %55
  %60 = call i32 @__rem_pio2f(float %x, double* %y) nounwind optsize
  %61 = load double* %y, align 8, !tbaa !3
  %62 = shl i32 %60, 1
  %63 = and i32 %62, 2
  %64 = sub nsw i32 1, %63
  %65 = call float @__tandf(double %61, i32 %64) nounwind optsize
  br label %66

; <label>:66                                      ; preds = %59, %57, %52, %44, %30, %22, %8, %4
  %.0 = phi float [ %10, %8 ], [ %24, %22 ], [ %32, %30 ], [ %46, %44 ], [ %54, %52 ], [ %58, %57 ], [ %65, %59 ], [ %x, %4 ]
  ret float %.0
}

define float @tanhf(float %x) nounwind uwtable optsize {
  %1 = bitcast float %x to i32
  %2 = and i32 %1, 2147483647
  %3 = icmp ugt i32 %2, 2139095039
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = icmp sgt i32 %1, -1
  %6 = fdiv float 1.000000e+00, %x
  br i1 %5, label %7, label %9

; <label>:7                                       ; preds = %4
  %8 = fadd float %6, 1.000000e+00
  br label %36

; <label>:9                                       ; preds = %4
  %10 = fadd float %6, -1.000000e+00
  br label %36

; <label>:11                                      ; preds = %0
  %12 = icmp ult i32 %2, 1091567616
  br i1 %12, label %13, label %32

; <label>:13                                      ; preds = %11
  %14 = icmp ult i32 %2, 964689920
  %15 = fadd float %x, 0x46293E5940000000
  %16 = fcmp ogt float %15, 1.000000e+00
  %or.cond = and i1 %14, %16
  br i1 %or.cond, label %36, label %17

; <label>:17                                      ; preds = %13
  %18 = icmp ugt i32 %2, 1065353215
  %19 = tail call float @fabsf(float %x) nounwind optsize
  br i1 %18, label %20, label %26

; <label>:20                                      ; preds = %17
  %21 = fmul float %19, 2.000000e+00
  %22 = tail call float @expm1f(float %21) nounwind optsize
  %23 = fadd float %22, 2.000000e+00
  %24 = fdiv float 2.000000e+00, %23
  %25 = fsub float 1.000000e+00, %24
  br label %32

; <label>:26                                      ; preds = %17
  %27 = fmul float %19, -2.000000e+00
  %28 = tail call float @expm1f(float %27) nounwind optsize
  %29 = fsub float -0.000000e+00, %28
  %30 = fadd float %28, 2.000000e+00
  %31 = fdiv float %29, %30
  br label %32

; <label>:32                                      ; preds = %26, %20, %11
  %z.0 = phi float [ %25, %20 ], [ %31, %26 ], [ 1.000000e+00, %11 ]
  %33 = icmp sgt i32 %1, -1
  br i1 %33, label %36, label %34

; <label>:34                                      ; preds = %32
  %35 = fsub float -0.000000e+00, %z.0
  br label %36

; <label>:36                                      ; preds = %34, %32, %13, %9, %7
  %.0 = phi float [ %8, %7 ], [ %10, %9 ], [ %x, %13 ], [ %35, %34 ], [ %z.0, %32 ]
  ret float %.0
}

define x86_fp80 @tanhl(x86_fp80 %x) nounwind uwtable optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = lshr i80 %1, 32
  %5 = trunc i80 %4 to i32
  %6 = and i32 %3, 32767
  %7 = icmp eq i32 %6, 32767
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %0
  %9 = and i32 %3, 32768
  %10 = icmp eq i32 %9, 0
  %11 = fdiv x86_fp80 0xK3FFF8000000000000000, %x
  br i1 %10, label %14, label %12

; <label>:12                                      ; preds = %8
  %13 = fadd x86_fp80 %11, 0xKBFFF8000000000000000
  br label %47

; <label>:14                                      ; preds = %8
  %15 = fadd x86_fp80 %11, 0xK3FFF8000000000000000
  br label %47

; <label>:16                                      ; preds = %0
  %17 = icmp ult i32 %6, 16387
  br i1 %17, label %21, label %18

; <label>:18                                      ; preds = %16
  %19 = icmp eq i32 %6, 16387
  %20 = icmp ult i32 %5, -1207959552
  %or.cond = and i1 %19, %20
  br i1 %or.cond, label %21, label %42

; <label>:21                                      ; preds = %18, %16
  %22 = or i80 %4, %1
  %23 = trunc i80 %22 to i32
  %24 = or i32 %23, %6
  %25 = icmp eq i32 %24, 0
  %26 = icmp ult i32 %6, 16328
  %or.cond1 = or i1 %25, %26
  br i1 %or.cond1, label %47, label %27

; <label>:27                                      ; preds = %21
  %28 = icmp ugt i32 %6, 16382
  %29 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  br i1 %28, label %30, label %36

; <label>:30                                      ; preds = %27
  %31 = fmul x86_fp80 %29, 0xK40008000000000000000
  %32 = tail call x86_fp80 @expm1l(x86_fp80 %31) nounwind optsize
  %33 = fadd x86_fp80 %32, 0xK40008000000000000000
  %34 = fdiv x86_fp80 0xK40008000000000000000, %33
  %35 = fsub x86_fp80 0xK3FFF8000000000000000, %34
  br label %42

; <label>:36                                      ; preds = %27
  %37 = fmul x86_fp80 %29, 0xKC0008000000000000000
  %38 = tail call x86_fp80 @expm1l(x86_fp80 %37) nounwind optsize
  %39 = fsub x86_fp80 0xK80000000000000000000, %38
  %40 = fadd x86_fp80 %38, 0xK40008000000000000000
  %41 = fdiv x86_fp80 %39, %40
  br label %42

; <label>:42                                      ; preds = %36, %30, %18
  %z.0 = phi x86_fp80 [ %35, %30 ], [ %41, %36 ], [ 0xK3FFF8000000000000000, %18 ]
  %43 = and i32 %3, 32768
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

; <label>:45                                      ; preds = %42
  %46 = fsub x86_fp80 0xK80000000000000000000, %z.0
  br label %47

; <label>:47                                      ; preds = %45, %42, %21, %14, %12
  %.0 = phi x86_fp80 [ %13, %12 ], [ %15, %14 ], [ %x, %21 ], [ %46, %45 ], [ %z.0, %42 ]
  ret x86_fp80 %.0
}

define double @tanh(double %x) nounwind uwtable optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ugt i32 %4, 2146435071
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %0
  %7 = icmp sgt i32 %3, -1
  %8 = fdiv double 1.000000e+00, %x
  br i1 %7, label %9, label %11

; <label>:9                                       ; preds = %6
  %10 = fadd double %8, 1.000000e+00
  br label %39

; <label>:11                                      ; preds = %6
  %12 = fadd double %8, -1.000000e+00
  br label %39

; <label>:13                                      ; preds = %0
  %14 = icmp ult i32 %4, 1077280768
  br i1 %14, label %15, label %35

; <label>:15                                      ; preds = %13
  %16 = icmp ult i32 %4, 1043333120
  br i1 %16, label %17, label %20

; <label>:17                                      ; preds = %15
  %18 = fadd double %x, 1.000000e+300
  %19 = fcmp ogt double %18, 1.000000e+00
  br i1 %19, label %39, label %20

; <label>:20                                      ; preds = %17, %15
  %21 = icmp ugt i32 %4, 1072693247
  %22 = tail call double @fabs(double %x) nounwind optsize
  br i1 %21, label %23, label %29

; <label>:23                                      ; preds = %20
  %24 = fmul double %22, 2.000000e+00
  %25 = tail call double @expm1(double %24) nounwind optsize
  %26 = fadd double %25, 2.000000e+00
  %27 = fdiv double 2.000000e+00, %26
  %28 = fsub double 1.000000e+00, %27
  br label %35

; <label>:29                                      ; preds = %20
  %30 = fmul double %22, -2.000000e+00
  %31 = tail call double @expm1(double %30) nounwind optsize
  %32 = fsub double -0.000000e+00, %31
  %33 = fadd double %31, 2.000000e+00
  %34 = fdiv double %32, %33
  br label %35

; <label>:35                                      ; preds = %29, %23, %13
  %z.0 = phi double [ %28, %23 ], [ %34, %29 ], [ 1.000000e+00, %13 ]
  %36 = icmp sgt i32 %3, -1
  br i1 %36, label %39, label %37

; <label>:37                                      ; preds = %35
  %38 = fsub double -0.000000e+00, %z.0
  br label %39

; <label>:39                                      ; preds = %37, %35, %17, %11, %9
  %.0 = phi double [ %10, %9 ], [ %12, %11 ], [ %x, %17 ], [ %38, %37 ], [ %z.0, %35 ]
  ret double %.0
}

define x86_fp80 @__tanl(x86_fp80 %x, x86_fp80 %y, i32 %iy) nounwind uwtable optsize {
  %1 = icmp eq i32 %iy, 1
  %2 = fcmp oge x86_fp80 %x, 0xK00000000000000000000
  %3 = select i1 %2, x86_fp80 0xK3FFF8000000000000000, x86_fp80 0xKBFFF8000000000000000
  %4 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %5 = fcmp ult x86_fp80 %4, 0xK3FFEACA18BD66277C800
  br i1 %5, label %25, label %6

; <label>:6                                       ; preds = %0
  %7 = fcmp olt x86_fp80 %x, 0xK00000000000000000000
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fsub x86_fp80 0xK80000000000000000000, %x
  %10 = fsub x86_fp80 0xK80000000000000000000, %y
  br label %11

; <label>:11                                      ; preds = %8, %6
  %.02 = phi x86_fp80 [ %10, %8 ], [ %y, %6 ]
  %.01 = phi x86_fp80 [ %9, %8 ], [ %x, %6 ]
  %12 = load volatile double* @pio4_hi, align 8, !tbaa !3
  %13 = fpext double %12 to x86_fp80
  %14 = load volatile double* @pio4_lo, align 8, !tbaa !3
  %15 = fpext double %14 to x86_fp80
  %16 = fadd x86_fp80 %13, %15
  %17 = fsub x86_fp80 %16, %.01
  %18 = load volatile double* @pio4lo_hi, align 8, !tbaa !3
  %19 = fpext double %18 to x86_fp80
  %20 = load volatile double* @pio4lo_lo, align 8, !tbaa !3
  %21 = fpext double %20 to x86_fp80
  %22 = fadd x86_fp80 %19, %21
  %23 = fsub x86_fp80 %22, %.02
  %24 = fadd x86_fp80 %17, %23
  br label %25

; <label>:25                                      ; preds = %11, %0
  %i.0 = phi i1 [ true, %11 ], [ false, %0 ]
  %.13 = phi x86_fp80 [ 0xK00000000000000000000, %11 ], [ %y, %0 ]
  %.1 = phi x86_fp80 [ %24, %11 ], [ %x, %0 ]
  %26 = fmul x86_fp80 %.1, %.1
  %27 = fmul x86_fp80 %26, %26
  %28 = load volatile double* @T5hi, align 8, !tbaa !3
  %29 = fpext double %28 to x86_fp80
  %30 = load volatile double* @T5lo, align 8, !tbaa !3
  %31 = fpext double %30 to x86_fp80
  %32 = fadd x86_fp80 %29, %31
  %33 = fmul x86_fp80 %27, 0xK3FEC9C1AA1B60643F800
  %34 = fadd x86_fp80 %33, 0xK3FEE835AC8A0D3659800
  %35 = fmul x86_fp80 %27, %34
  %36 = fadd x86_fp80 %35, 0xK3FEF97AF2B1F2A43F000
  %37 = fmul x86_fp80 %27, %36
  %38 = fadd x86_fp80 %37, 0xK3FF1CBBF7E134037A000
  %39 = fmul x86_fp80 %27, %38
  %40 = fadd x86_fp80 %39, 0xK3FF49AAC9AC342DC1800
  %41 = fmul x86_fp80 %27, %40
  %42 = fadd x86_fp80 %41, 0xK3FF6EB69E8C2EBFFC000
  %43 = fmul x86_fp80 %27, %42
  %44 = fadd x86_fp80 %43, 0xK3FF9B327A441660E1000
  %45 = fmul x86_fp80 %27, %44
  %46 = fadd x86_fp80 %32, %45
  %47 = load volatile double* @T7hi, align 8, !tbaa !3
  %48 = fpext double %47 to x86_fp80
  %49 = load volatile double* @T7lo, align 8, !tbaa !3
  %50 = fpext double %49 to x86_fp80
  %51 = fadd x86_fp80 %48, %50
  %52 = fmul x86_fp80 %27, 0xKBFECDAD5F79DD25AC800
  %53 = fadd x86_fp80 %52, 0xK3FECA2606C066344B000
  %54 = fmul x86_fp80 %27, %53
  %55 = fadd x86_fp80 %54, 0xK3FF0A13AD04D9E756000
  %56 = fmul x86_fp80 %27, %55
  %57 = fadd x86_fp80 %56, 0xK3FF2FAB1210135ADF000
  %58 = fmul x86_fp80 %27, %57
  %59 = fadd x86_fp80 %58, 0xK3FF5BED1AA551FCB5800
  %60 = fmul x86_fp80 %27, %59
  %61 = fadd x86_fp80 %60, 0xK3FF891371AAE0BB09000
  %62 = fmul x86_fp80 %27, %61
  %63 = fadd x86_fp80 %51, %62
  %64 = fmul x86_fp80 %26, %63
  %65 = fmul x86_fp80 %26, %.1
  %66 = fadd x86_fp80 %46, %64
  %67 = fmul x86_fp80 %65, %66
  %68 = fadd x86_fp80 %67, %.13
  %69 = fmul x86_fp80 %26, %68
  %70 = fadd x86_fp80 %.13, %69
  %71 = load volatile double* @T3hi, align 8, !tbaa !3
  %72 = fpext double %71 to x86_fp80
  %73 = load volatile double* @T3lo, align 8, !tbaa !3
  %74 = fpext double %73 to x86_fp80
  %75 = fadd x86_fp80 %72, %74
  %76 = fmul x86_fp80 %75, %65
  %77 = fadd x86_fp80 %70, %76
  %78 = fadd x86_fp80 %.1, %77
  br i1 %i.0, label %79, label %89

; <label>:79                                      ; preds = %25
  %80 = select i1 %1, x86_fp80 0xKBFFF8000000000000000, x86_fp80 0xK3FFF8000000000000000
  %81 = fmul x86_fp80 %78, %78
  %82 = fadd x86_fp80 %78, %80
  %83 = fdiv x86_fp80 %81, %82
  %84 = fsub x86_fp80 %83, %77
  %85 = fsub x86_fp80 %.1, %84
  %86 = fmul x86_fp80 %85, 0xK40008000000000000000
  %87 = fsub x86_fp80 %80, %86
  %88 = fmul x86_fp80 %3, %87
  br label %104

; <label>:89                                      ; preds = %25
  br i1 %1, label %90, label %104

; <label>:90                                      ; preds = %89
  %91 = fadd x86_fp80 %78, 0xK401F8000000000000000
  %92 = fadd x86_fp80 %91, 0xKC01F8000000000000000
  %93 = fsub x86_fp80 %92, %.1
  %94 = fsub x86_fp80 %77, %93
  %95 = fdiv x86_fp80 0xKBFFF8000000000000000, %78
  %96 = fadd x86_fp80 %95, 0xK401F8000000000000000
  %97 = fadd x86_fp80 %96, 0xKC01F8000000000000000
  %98 = fmul x86_fp80 %97, %92
  %99 = fadd x86_fp80 %98, 0xK3FFF8000000000000000
  %100 = fmul x86_fp80 %97, %94
  %101 = fadd x86_fp80 %99, %100
  %102 = fmul x86_fp80 %95, %101
  %103 = fadd x86_fp80 %97, %102
  br label %104

; <label>:104                                     ; preds = %90, %89, %79
  %.0 = phi x86_fp80 [ %88, %79 ], [ %103, %90 ], [ %78, %89 ]
  ret x86_fp80 %.0
}

define x86_fp80 @tanl(x86_fp80 %x) nounwind uwtable optsize {
  %tx.i = alloca [3 x double], align 16
  %ty.i = alloca [2 x double], align 16
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  switch i32 %4, label %8 [
    i32 0, label %132
    i32 32767, label %5
  ]

; <label>:5                                       ; preds = %0
  %6 = fsub x86_fp80 %x, %x
  %7 = fdiv x86_fp80 %6, %6
  br label %132

; <label>:8                                       ; preds = %0
  %ins = and i80 %1, 604462909807314587353087
  %9 = bitcast i80 %ins to x86_fp80
  %10 = fcmp olt x86_fp80 %9, 0xK3FFEC90FDAA22168C000
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %8
  %12 = call x86_fp80 @__tanl(x86_fp80 %9, x86_fp80 0xK00000000000000000000, i32 0) nounwind optsize
  %13 = icmp slt i80 %1, 0
  br i1 %13, label %14, label %132

; <label>:14                                      ; preds = %11
  %15 = fsub x86_fp80 0xK80000000000000000000, %12
  br label %132

; <label>:16                                      ; preds = %8
  %17 = bitcast [3 x double]* %tx.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %17) nounwind
  %18 = bitcast [2 x double]* %ty.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %18) nounwind
  %19 = lshr i80 %1, 48
  %.tr.i = trunc i80 %19 to i32
  %sext.i = ashr i32 %.tr.i, 16
  %20 = and i32 %sext.i, 32767
  %21 = icmp ult i32 %20, 16408
  br i1 %21, label %27, label %22

; <label>:22                                      ; preds = %16
  switch i32 %20, label %89 [
    i32 16408, label %23
    i32 32767, label %__rem_pio2l.exit.thread
  ]

; <label>:23                                      ; preds = %22
  %24 = lshr i80 %1, 32
  %25 = trunc i80 %24 to i32
  %26 = icmp ult i32 %25, -921707870
  br i1 %26, label %27, label %89

; <label>:27                                      ; preds = %23, %16
  %28 = load volatile double* @invpio2hi823, align 8, !tbaa !3
  %29 = fpext double %28 to x86_fp80
  %30 = load volatile double* @invpio2lo824, align 8, !tbaa !3
  %31 = fpext double %30 to x86_fp80
  %32 = fadd x86_fp80 %29, %31
  %33 = fmul x86_fp80 %32, %x
  %34 = fadd x86_fp80 %33, 0xK403EC000000000000000
  %35 = fadd x86_fp80 %34, 0xKC03EC000000000000000
  %36 = fptosi x86_fp80 %35 to i32
  %37 = fmul x86_fp80 %35, 0xK3FFFC90FDAA222000000
  %38 = fsub x86_fp80 %x, %37
  %39 = load volatile double* @pio2_1thi825, align 8, !tbaa !3
  %40 = fpext double %39 to x86_fp80
  %41 = load volatile double* @pio2_1tlo826, align 8, !tbaa !3
  %42 = fpext double %41 to x86_fp80
  %43 = fadd x86_fp80 %40, %42
  %44 = fmul x86_fp80 %35, %43
  %45 = fsub x86_fp80 %38, %44
  %46 = bitcast x86_fp80 %45 to i80
  %47 = lshr i80 %46, 64
  %48 = trunc i80 %47 to i32
  %49 = and i32 %48, 32767
  %50 = sub nsw i32 %20, %49
  %51 = icmp sgt i32 %50, 22
  br i1 %51, label %52, label %84

; <label>:52                                      ; preds = %27
  %53 = fmul x86_fp80 %35, 0xKBFD7973DCB3B3A000000
  %54 = fsub x86_fp80 %38, %53
  %55 = load volatile double* @pio2_2thi827, align 8, !tbaa !3
  %56 = fpext double %55 to x86_fp80
  %57 = load volatile double* @pio2_2tlo828, align 8, !tbaa !3
  %58 = fpext double %57 to x86_fp80
  %59 = fadd x86_fp80 %56, %58
  %60 = fmul x86_fp80 %35, %59
  %61 = fsub x86_fp80 %38, %54
  %62 = fsub x86_fp80 %61, %53
  %63 = fsub x86_fp80 %60, %62
  %64 = fsub x86_fp80 %54, %63
  %65 = bitcast x86_fp80 %64 to i80
  %66 = lshr i80 %65, 64
  %67 = trunc i80 %66 to i32
  %68 = and i32 %67, 32767
  %69 = sub nsw i32 %20, %68
  %70 = icmp sgt i32 %69, 61
  br i1 %70, label %71, label %84

; <label>:71                                      ; preds = %52
  %72 = fmul x86_fp80 %35, 0xK3FAEC51701B83A000000
  %73 = fsub x86_fp80 %54, %72
  %74 = load volatile double* @pio2_3thi829, align 8, !tbaa !3
  %75 = fpext double %74 to x86_fp80
  %76 = load volatile double* @pio2_3tlo830, align 8, !tbaa !3
  %77 = fpext double %76 to x86_fp80
  %78 = fadd x86_fp80 %75, %77
  %79 = fmul x86_fp80 %35, %78
  %80 = fsub x86_fp80 %54, %73
  %81 = fsub x86_fp80 %80, %72
  %82 = fsub x86_fp80 %79, %81
  %83 = fsub x86_fp80 %73, %82
  br label %84

; <label>:84                                      ; preds = %71, %52, %27
  %85 = phi x86_fp80 [ %83, %71 ], [ %64, %52 ], [ %45, %27 ]
  %r.0.i = phi x86_fp80 [ %73, %71 ], [ %54, %52 ], [ %38, %27 ]
  %w.0.i = phi x86_fp80 [ %82, %71 ], [ %63, %52 ], [ %44, %27 ]
  %86 = fsub x86_fp80 %r.0.i, %85
  %87 = fsub x86_fp80 %86, %w.0.i
  br label %__rem_pio2l.exit

__rem_pio2l.exit.thread:                          ; preds = %22
  %88 = fsub x86_fp80 %x, %x
  call void @llvm.lifetime.end(i64 -1, i8* %17) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %18) nounwind
  br label %126

; <label>:89                                      ; preds = %23, %22
  %mask5.i = and i80 %1, 18446744073709551615
  %ins6.i = or i80 %mask5.i, 302637283273278903812096
  %90 = bitcast i80 %ins6.i to x86_fp80
  br label %91

; <label>:91                                      ; preds = %91, %89
  %indvars.iv16.i = phi i64 [ 0, %89 ], [ %indvars.iv.next17.i, %91 ]
  %z.015.i = phi x86_fp80 [ %90, %89 ], [ %97, %91 ]
  %92 = fptosi x86_fp80 %z.015.i to i32
  %93 = sitofp i32 %92 to double
  %94 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %indvars.iv16.i
  store double %93, double* %94, align 8, !tbaa !3
  %95 = fpext double %93 to x86_fp80
  %96 = fsub x86_fp80 %z.015.i, %95
  %97 = fmul x86_fp80 %96, 0xK40178000000000000000
  %indvars.iv.next17.i = add i64 %indvars.iv16.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next17.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 2
  br i1 %exitcond, label %98, label %91

; <label>:98                                      ; preds = %91
  %99 = add nsw i32 %20, -16406
  %100 = fptrunc x86_fp80 %97 to double
  %101 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 2
  store double %100, double* %101, align 16, !tbaa !3
  %102 = fcmp oeq double %100, 0.000000e+00
  br i1 %102, label %._crit_edge.i, label %._crit_edge

._crit_edge.i:                                    ; preds = %._crit_edge.i, %98
  %nx.0.i5 = phi i32 [ %103, %._crit_edge.i ], [ 3, %98 ]
  %indvars.iv.i4 = phi i64 [ %phitmp.i, %._crit_edge.i ], [ 2, %98 ]
  %103 = add nsw i32 %nx.0.i5, -1
  %phitmp.i = add i64 %indvars.iv.i4, -1
  %104 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 %phitmp.i
  %105 = load double* %104, align 8, !tbaa !3
  %106 = fcmp oeq double %105, 0.000000e+00
  br i1 %106, label %._crit_edge.i, label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.i, %98
  %nx.0.i.lcssa = phi i32 [ 3, %98 ], [ %103, %._crit_edge.i ]
  %107 = getelementptr inbounds [3 x double]* %tx.i, i64 0, i64 0
  %108 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 0
  %109 = call i32 @__rem_pio2_large(double* %107, double* %108, i32 %99, i32 %nx.0.i.lcssa, i32 2) nounwind optsize
  %110 = load double* %108, align 16, !tbaa !3
  %111 = fpext double %110 to x86_fp80
  %112 = getelementptr inbounds [2 x double]* %ty.i, i64 0, i64 1
  %113 = load double* %112, align 8, !tbaa !3
  %114 = fpext double %113 to x86_fp80
  %115 = fadd x86_fp80 %111, %114
  %116 = fsub x86_fp80 %115, %111
  %117 = fsub x86_fp80 %114, %116
  %118 = icmp slt i32 %sext.i, 0
  br i1 %118, label %119, label %__rem_pio2l.exit

; <label>:119                                     ; preds = %._crit_edge
  %120 = fsub x86_fp80 0xK80000000000000000000, %115
  %121 = fsub x86_fp80 0xK80000000000000000000, %117
  %122 = sub nsw i32 0, %109
  br label %__rem_pio2l.exit

__rem_pio2l.exit:                                 ; preds = %119, %._crit_edge, %84
  %123 = phi x86_fp80 [ %87, %84 ], [ %121, %119 ], [ %117, %._crit_edge ]
  %124 = phi x86_fp80 [ %85, %84 ], [ %120, %119 ], [ %115, %._crit_edge ]
  %.0.i = phi i32 [ %36, %84 ], [ %122, %119 ], [ %109, %._crit_edge ]
  call void @llvm.lifetime.end(i64 -1, i8* %17) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %18) nounwind
  %125 = and i32 %.0.i, 3
  switch i32 %125, label %132 [
    i32 0, label %126
    i32 2, label %126
    i32 1, label %130
    i32 3, label %130
  ]

; <label>:126                                     ; preds = %__rem_pio2l.exit, %__rem_pio2l.exit, %__rem_pio2l.exit.thread
  %127 = phi x86_fp80 [ %88, %__rem_pio2l.exit.thread ], [ %124, %__rem_pio2l.exit ], [ %124, %__rem_pio2l.exit ]
  %128 = phi x86_fp80 [ %88, %__rem_pio2l.exit.thread ], [ %123, %__rem_pio2l.exit ], [ %123, %__rem_pio2l.exit ]
  %129 = call x86_fp80 @__tanl(x86_fp80 %127, x86_fp80 %128, i32 0) nounwind optsize
  br label %132

; <label>:130                                     ; preds = %__rem_pio2l.exit, %__rem_pio2l.exit
  %131 = call x86_fp80 @__tanl(x86_fp80 %124, x86_fp80 %123, i32 1) nounwind optsize
  br label %132

; <label>:132                                     ; preds = %130, %126, %__rem_pio2l.exit, %14, %11, %5, %0
  %.0 = phi x86_fp80 [ %7, %5 ], [ %x, %0 ], [ %15, %14 ], [ %12, %11 ], [ %124, %__rem_pio2l.exit ], [ %131, %130 ], [ %129, %126 ]
  ret x86_fp80 %.0
}

define double @__tan(double %x, double %y, i32 %iy) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483640
  %5 = icmp ugt i32 %4, 1072010279
  br i1 %5, label %6, label %15

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %3, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fsub double -0.000000e+00, %x
  %10 = fsub double -0.000000e+00, %y
  br label %11

; <label>:11                                      ; preds = %8, %6
  %.04 = phi double [ %10, %8 ], [ %y, %6 ]
  %.03 = phi double [ %9, %8 ], [ %x, %6 ]
  %12 = fsub double 0x3FE921FB54442D18, %.03
  %13 = fsub double 0x3C81A62633145C07, %.04
  %14 = fadd double %12, %13
  br label %15

; <label>:15                                      ; preds = %11, %0
  %.15 = phi double [ 0.000000e+00, %11 ], [ %y, %0 ]
  %.1 = phi double [ %14, %11 ], [ %x, %0 ]
  %16 = fmul double %.1, %.1
  %17 = fmul double %16, %16
  %18 = fmul double %17, 0xBEF375CBDB605373
  %19 = fadd double %18, 0x3F147E88A03792A6
  %20 = fmul double %17, %19
  %21 = fadd double %20, 0x3F4344D8F2F26501
  %22 = fmul double %17, %21
  %23 = fadd double %22, 0x3F6D6D22C9560328
  %24 = fmul double %17, %23
  %25 = fadd double %24, 0x3F9664F48406D637
  %26 = fmul double %17, %25
  %27 = fadd double %26, 0x3FC111111110FE7A
  %28 = fmul double %17, 0x3EFB2A7074BF7AD4
  %29 = fadd double %28, 0x3F12B80F32F0A7E9
  %30 = fmul double %17, %29
  %31 = fadd double %30, 0x3F3026F71A8D1068
  %32 = fmul double %17, %31
  %33 = fadd double %32, 0x3F57DBC8FEE08315
  %34 = fmul double %17, %33
  %35 = fadd double %34, 0x3F8226E3E96E8493
  %36 = fmul double %17, %35
  %37 = fadd double %36, 0x3FABA1BA1BB341FE
  %38 = fmul double %16, %37
  %39 = fmul double %16, %.1
  %40 = fadd double %27, %38
  %41 = fmul double %39, %40
  %42 = fadd double %41, %.15
  %43 = fmul double %16, %42
  %44 = fadd double %.15, %43
  %45 = fmul double %39, 0x3FD5555555555563
  %46 = fadd double %44, %45
  %47 = fadd double %.1, %46
  br i1 %5, label %48, label %63

; <label>:48                                      ; preds = %15
  %49 = sitofp i32 %iy to double
  %50 = lshr i64 %1, 62
  %51 = trunc i64 %50 to i32
  %52 = and i32 %51, 2
  %53 = sub nsw i32 1, %52
  %54 = sitofp i32 %53 to double
  %55 = fmul double %47, %47
  %56 = fadd double %47, %49
  %57 = fdiv double %55, %56
  %58 = fsub double %57, %46
  %59 = fsub double %.1, %58
  %60 = fmul double %59, 2.000000e+00
  %61 = fsub double %49, %60
  %62 = fmul double %54, %61
  br label %81

; <label>:63                                      ; preds = %15
  %64 = icmp eq i32 %iy, 1
  br i1 %64, label %81, label %65

; <label>:65                                      ; preds = %63
  %66 = bitcast double %47 to i64
  %67 = and i64 %66, -4294967296
  %68 = bitcast i64 %67 to double
  %69 = fsub double %68, %.1
  %70 = fsub double %46, %69
  %71 = fdiv double -1.000000e+00, %47
  %72 = bitcast double %71 to i64
  %73 = and i64 %72, -4294967296
  %74 = bitcast i64 %73 to double
  %75 = fmul double %74, %68
  %76 = fadd double %75, 1.000000e+00
  %77 = fmul double %74, %70
  %78 = fadd double %76, %77
  %79 = fmul double %71, %78
  %80 = fadd double %74, %79
  br label %81

; <label>:81                                      ; preds = %65, %63, %48
  %.0 = phi double [ %62, %48 ], [ %80, %65 ], [ %47, %63 ]
  ret double %.0
}

define double @tan(double %x) nounwind uwtable optsize {
  %y = alloca [2 x double], align 16
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 2147483647
  %5 = icmp ult i32 %4, 1072243196
  br i1 %5, label %6, label %13

; <label>:6                                       ; preds = %0
  %7 = icmp ult i32 %4, 1044381696
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %6
  %9 = fptosi double %x to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %27, label %11

; <label>:11                                      ; preds = %8, %6
  %12 = call double @__tan(double %x, double 0.000000e+00, i32 1) nounwind optsize
  br label %27

; <label>:13                                      ; preds = %0
  %14 = icmp ugt i32 %4, 2146435071
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %13
  %16 = fsub double %x, %x
  br label %27

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds [2 x double]* %y, i64 0, i64 0
  %19 = call i32 @__rem_pio2(double %x, double* %18) nounwind optsize
  %20 = load double* %18, align 16, !tbaa !3
  %21 = getelementptr inbounds [2 x double]* %y, i64 0, i64 1
  %22 = load double* %21, align 8, !tbaa !3
  %23 = shl i32 %19, 1
  %24 = and i32 %23, 2
  %25 = sub nsw i32 1, %24
  %26 = call double @__tan(double %20, double %22, i32 %25) nounwind optsize
  br label %27

; <label>:27                                      ; preds = %17, %15, %11, %8
  %.0 = phi double [ %12, %11 ], [ %16, %15 ], [ %26, %17 ], [ %x, %8 ]
  ret double %.0
}

define i32 @tcdrain(i32 %fd) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = tail call i64 @__syscall_cp(i64 54, i64 %1, i64 21513, i64 1, i64 0, i64 0, i64 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @tcflow(i32 %fd, i32 %action) nounwind uwtable optsize {
  %1 = tail call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21514, i32 %action) nounwind optsize
  ret i32 %1
}

define i32 @tcflush(i32 %fd, i32 %queue) nounwind uwtable optsize {
  %1 = tail call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21515, i32 %queue) nounwind optsize
  ret i32 %1
}

define i32 @tcgetattr(i32 %fd, %struct.termios.162* %tio) nounwind uwtable optsize {
  %1 = tail call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21505, %struct.termios.162* %tio) nounwind optsize
  %not. = icmp ne i32 %1, 0
  %. = sext i1 %not. to i32
  ret i32 %.
}

define i32 @tcgetpgrp(i32 %fd) nounwind uwtable optsize {
  %pgrp = alloca i32, align 4
  %1 = call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21519, i32* %pgrp) nounwind optsize
  %2 = icmp slt i32 %1, 0
  %3 = load i32* %pgrp, align 4, !tbaa !6
  %.0 = select i1 %2, i32 -1, i32 %3
  ret i32 %.0
}

define i32 @tcgetsid(i32 %fd) nounwind uwtable optsize {
  %sid = alloca i32, align 4
  %1 = call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21545, i32* %sid) nounwind optsize
  %2 = icmp slt i32 %1, 0
  %3 = load i32* %sid, align 4, !tbaa !6
  %.0 = select i1 %2, i32 -1, i32 %3
  ret i32 %.0
}

define i32 @tcsendbreak(i32 %fd, i32 %dur) nounwind uwtable optsize {
  %1 = tail call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21513, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @tcsetattr(i32 %fd, i32 %act, %struct.termios.162* %tio) nounwind uwtable optsize {
  %1 = icmp ugt i32 %act, 2
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %0
  %3 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %3, align 4, !tbaa !6
  br label %7

; <label>:4                                       ; preds = %0
  %5 = add nsw i32 %act, 21506
  %6 = tail call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 %5, %struct.termios.162* %tio) nounwind optsize
  br label %7

; <label>:7                                       ; preds = %4, %2
  %.0 = phi i32 [ -1, %2 ], [ %6, %4 ]
  ret i32 %.0
}

define i32 @tcsetpgrp(i32 %fd, i32 %pgrp) nounwind uwtable optsize {
  %pgrp_int = alloca i32, align 4
  store i32 %pgrp, i32* %pgrp_int, align 4, !tbaa !6
  %1 = call i32 (i32, i32, ...)* @ioctl(i32 %fd, i32 21520, i32* %pgrp_int) nounwind optsize
  ret i32 %1
}

define i64 @telldir(%struct.__DIR_s.675* nocapture %dir) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.__DIR_s.675* %dir, i64 0, i32 2
  %2 = load i64* %1, align 8, !tbaa !5
  ret i64 %2
}

define i8* @tempnam(i8* %dir, i8* %pfx) nounwind uwtable optsize {
  %s = alloca i8*, align 8
  %ts = alloca %struct.timespec.29, align 8
  %1 = call i32 @getpid() nounwind optsize
  %2 = icmp eq i8* %dir, null
  %.01 = select i1 %2, i8* getelementptr inbounds ([5 x i8]* @.str839, i64 0, i64 0), i8* %dir
  %3 = icmp eq i8* %pfx, null
  %.02 = select i1 %3, i8* getelementptr inbounds ([5 x i8]* @.str1840, i64 0, i64 0), i8* %pfx
  %4 = call i32 @access(i8* %.01, i32 7) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %41

; <label>:6                                       ; preds = %0
  %7 = call i64 @strlen(i8* %.01) nounwind optsize
  %8 = call i64 @strlen(i8* %.02) nounwind optsize
  %9 = add i64 %7, 44
  %10 = add i64 %9, %8
  %11 = call i8* @malloc(i64 %10) optsize
  store i8* %11, i8** %s, align 8, !tbaa !7
  %12 = icmp eq i8* %11, null
  br i1 %12, label %41, label %.preheader

.preheader:                                       ; preds = %6
  %13 = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 1
  %14 = ptrtoint i8** %s to i64
  br label %15

; <label>:15                                      ; preds = %35, %.preheader
  %try.0 = phi i32 [ %36, %35 ], [ 0, %.preheader ]
  %16 = call i32 @clock_gettime(i32 0, %struct.timespec.29* %ts) nounwind optsize
  %17 = load i64* %13, align 8, !tbaa !5
  %18 = load i8** %s, align 8, !tbaa !7
  %19 = ptrtoint i8* %18 to i64
  %20 = xor i64 %17, %14
  %21 = xor i64 %20, %19
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %27, %15
  %22 = load volatile i32* @tempnam.index, align 4, !tbaa !6
  %23 = add nsw i32 %22, 1
  br label %24

; <label>:24                                      ; preds = %27, %a_cas.exit.i
  %25 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %22, i32 %23, i32* @tempnam.index) nounwind optsize
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %a_fetch_add.exit, label %27

; <label>:27                                      ; preds = %24
  %28 = load volatile i32* @tempnam.index, align 4, !tbaa !6
  %29 = icmp eq i32 %28, %22
  br i1 %29, label %24, label %a_cas.exit.i

a_fetch_add.exit:                                 ; preds = %24
  %30 = trunc i64 %21 to i32
  %31 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %18, i64 %10, i8* getelementptr inbounds ([15 x i8]* @.str2841, i64 0, i64 0), i8* %.01, i8* %.02, i32 %1, i32 %22, i32 %30) nounwind optsize
  %32 = load i8** %s, align 8, !tbaa !7
  %33 = call i32 @access(i8* %32, i32 0) nounwind optsize
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %.critedge

; <label>:35                                      ; preds = %a_fetch_add.exit
  %36 = add nsw i32 %try.0, 1
  %37 = icmp slt i32 %try.0, 100
  br i1 %37, label %15, label %.critedge

.critedge:                                        ; preds = %35, %a_fetch_add.exit
  %try.1 = phi i32 [ %try.0, %a_fetch_add.exit ], [ %36, %35 ]
  %38 = icmp sgt i32 %try.1, 99
  %39 = load i8** %s, align 8, !tbaa !7
  br i1 %38, label %40, label %41

; <label>:40                                      ; preds = %.critedge
  call void @free(i8* %39) optsize
  br label %41

; <label>:41                                      ; preds = %40, %.critedge, %6, %0
  %.0 = phi i8* [ null, %40 ], [ null, %0 ], [ null, %6 ], [ %39, %.critedge ]
  ret i8* %.0
}

define x86_fp80 @tgammal(x86_fp80 %x) nounwind uwtable optsize {
  store i32 1, i32* @signgam, align 4, !tbaa !6
  %1 = tail call i32 @__fpclassifyl(x86_fp80 %x) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %91, label %3

; <label>:3                                       ; preds = %0
  %4 = fcmp oeq x86_fp80 %x, 0xK7FFF8000000000000000
  br i1 %4, label %91, label %5

; <label>:5                                       ; preds = %3
  %6 = fcmp oeq x86_fp80 %x, 0xKFFFF8000000000000000
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %5
  %8 = fsub x86_fp80 %x, %x
  br label %91

; <label>:9                                       ; preds = %5
  %10 = tail call x86_fp80 @fabsl(x86_fp80 %x) nounwind optsize
  %11 = fcmp ogt x86_fp80 %10, 0xK4002D000000000000000
  br i1 %11, label %13, label %.preheader12

.preheader12:                                     ; preds = %9
  %12 = fcmp ult x86_fp80 %x, 0xK4000C000000000000000
  br i1 %12, label %.preheader5, label %.lr.ph15

; <label>:13                                      ; preds = %9
  %14 = fcmp ogt x86_fp80 %10, 0xK4009DB6E8F5C28F5C28F
  br i1 %14, label %42, label %15

; <label>:15                                      ; preds = %13
  %16 = fcmp olt x86_fp80 %x, 0xK00000000000000000000
  br i1 %16, label %17, label %49

; <label>:17                                      ; preds = %15
  %18 = tail call x86_fp80 @floorl(x86_fp80 %10) nounwind optsize
  %19 = fcmp oeq x86_fp80 %18, %10
  br i1 %19, label %20, label %23

; <label>:20                                      ; preds = %17
  %21 = fsub x86_fp80 %x, %x
  %22 = fdiv x86_fp80 %21, %21
  br label %91

; <label>:23                                      ; preds = %17
  %24 = fptosi x86_fp80 %18 to i32
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

; <label>:27                                      ; preds = %23
  store i32 -1, i32* @signgam, align 4, !tbaa !6
  br label %28

; <label>:28                                      ; preds = %27, %23
  %29 = fsub x86_fp80 %10, %18
  %30 = fcmp ogt x86_fp80 %29, 0xK3FFE8000000000000000
  br i1 %30, label %31, label %34

; <label>:31                                      ; preds = %28
  %32 = fadd x86_fp80 %18, 0xK3FFF8000000000000000
  %33 = fsub x86_fp80 %10, %32
  br label %34

; <label>:34                                      ; preds = %31, %28
  %z.0 = phi x86_fp80 [ %33, %31 ], [ %29, %28 ]
  %35 = fmul x86_fp80 %z.0, 0xK4000C90FDAA22168C235
  %36 = tail call x86_fp80 @sinl(x86_fp80 %35) nounwind optsize
  %37 = fmul x86_fp80 %10, %36
  %38 = tail call x86_fp80 @fabsl(x86_fp80 %37) nounwind optsize
  %39 = tail call fastcc x86_fp80 @stirf(x86_fp80 %10) optsize
  %40 = fmul x86_fp80 %38, %39
  %41 = fcmp ugt x86_fp80 %40, 0xK00006487ED5110B4611B
  br i1 %41, label %47, label %42

; <label>:42                                      ; preds = %34, %13
  %43 = load i32* @signgam, align 4, !tbaa !6
  %44 = sitofp i32 %43 to float
  %45 = fmul float %44, 0x7FF0000000000000
  %46 = fpext float %45 to x86_fp80
  br label %91

; <label>:47                                      ; preds = %34
  %48 = fdiv x86_fp80 0xK4000C90FDAA22168C235, %40
  br label %51

; <label>:49                                      ; preds = %15
  %50 = tail call fastcc x86_fp80 @stirf(x86_fp80 %x) optsize
  br label %51

; <label>:51                                      ; preds = %49, %47
  %z.1 = phi x86_fp80 [ %48, %47 ], [ %50, %49 ]
  %52 = load i32* @signgam, align 4, !tbaa !6
  %53 = sitofp i32 %52 to x86_fp80
  %54 = fmul x86_fp80 %53, %z.1
  br label %91

.preheader5:                                      ; preds = %.lr.ph15, %.preheader12
  %.01.lcssa = phi x86_fp80 [ %x, %.preheader12 ], [ %56, %.lr.ph15 ]
  %z.2.lcssa = phi x86_fp80 [ 0xK3FFF8000000000000000, %.preheader12 ], [ %57, %.lr.ph15 ]
  %55 = fcmp olt x86_fp80 %.01.lcssa, 0xKBFFA8000000000000000
  br i1 %55, label %.lr.ph8, label %._crit_edge9

.lr.ph15:                                         ; preds = %.lr.ph15, %.preheader12
  %.0114 = phi x86_fp80 [ %56, %.lr.ph15 ], [ %x, %.preheader12 ]
  %z.213 = phi x86_fp80 [ %57, %.lr.ph15 ], [ 0xK3FFF8000000000000000, %.preheader12 ]
  %56 = fadd x86_fp80 %.0114, 0xKBFFF8000000000000000
  %57 = fmul x86_fp80 %z.213, %56
  %58 = fcmp ult x86_fp80 %56, 0xK4000C000000000000000
  br i1 %58, label %.preheader5, label %.lr.ph15

.lr.ph8:                                          ; preds = %.lr.ph8, %.preheader5
  %.17 = phi x86_fp80 [ %60, %.lr.ph8 ], [ %.01.lcssa, %.preheader5 ]
  %z.36 = phi x86_fp80 [ %59, %.lr.ph8 ], [ %z.2.lcssa, %.preheader5 ]
  %59 = fdiv x86_fp80 %z.36, %.17
  %60 = fadd x86_fp80 %.17, 0xK3FFF8000000000000000
  %61 = fcmp olt x86_fp80 %60, 0xKBFFA8000000000000000
  br i1 %61, label %.lr.ph8, label %._crit_edge9

._crit_edge9:                                     ; preds = %.lr.ph8, %.preheader5
  %.1.lcssa = phi x86_fp80 [ %.01.lcssa, %.preheader5 ], [ %60, %.lr.ph8 ]
  %z.3.lcssa = phi x86_fp80 [ %z.2.lcssa, %.preheader5 ], [ %59, %.lr.ph8 ]
  %62 = fcmp ugt x86_fp80 %.1.lcssa, 0xK3FFA8000000000000000
  br i1 %62, label %.preheader, label %76

.preheader:                                       ; preds = %._crit_edge9
  %63 = fcmp olt x86_fp80 %.1.lcssa, 0xK40008000000000000000
  br i1 %63, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.23 = phi x86_fp80 [ %65, %.lr.ph ], [ %.1.lcssa, %.preheader ]
  %z.42 = phi x86_fp80 [ %64, %.lr.ph ], [ %z.3.lcssa, %.preheader ]
  %64 = fdiv x86_fp80 %z.42, %.23
  %65 = fadd x86_fp80 %.23, 0xK3FFF8000000000000000
  %66 = fcmp olt x86_fp80 %65, 0xK40008000000000000000
  br i1 %66, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %.2.lcssa = phi x86_fp80 [ %.1.lcssa, %.preheader ], [ %65, %.lr.ph ]
  %z.4.lcssa = phi x86_fp80 [ %z.3.lcssa, %.preheader ], [ %64, %.lr.ph ]
  %67 = fcmp oeq x86_fp80 %.2.lcssa, 0xK40008000000000000000
  br i1 %67, label %91, label %68

; <label>:68                                      ; preds = %._crit_edge
  %69 = fadd x86_fp80 %.2.lcssa, 0xKC0008000000000000000
  %70 = tail call x86_fp80 @__polevll(x86_fp80 %69, x86_fp80* getelementptr inbounds ([8 x x86_fp80]* @P842, i64 0, i64 0), i32 7) nounwind optsize
  %71 = tail call x86_fp80 @__polevll(x86_fp80 %69, x86_fp80* getelementptr inbounds ([9 x x86_fp80]* @Q843, i64 0, i64 0), i32 8) nounwind optsize
  %72 = fmul x86_fp80 %z.4.lcssa, %70
  %73 = fdiv x86_fp80 %72, %71
  %74 = fcmp olt x86_fp80 %73, 0xK00000000000000000000
  br i1 %74, label %75, label %91

; <label>:75                                      ; preds = %68
  store i32 -1, i32* @signgam, align 4, !tbaa !6
  br label %91

; <label>:76                                      ; preds = %._crit_edge9
  %77 = fcmp oeq x86_fp80 %.1.lcssa, 0xK00000000000000000000
  br i1 %77, label %78, label %81

; <label>:78                                      ; preds = %76
  %79 = fsub x86_fp80 %.1.lcssa, %.1.lcssa
  %80 = fdiv x86_fp80 %79, %79
  br label %91

; <label>:81                                      ; preds = %76
  %82 = fcmp olt x86_fp80 %.1.lcssa, 0xK00000000000000000000
  br i1 %82, label %83, label %87

; <label>:83                                      ; preds = %81
  %84 = fsub x86_fp80 0xK80000000000000000000, %.1.lcssa
  %85 = tail call x86_fp80 @__polevll(x86_fp80 %84, x86_fp80* getelementptr inbounds ([9 x x86_fp80]* @SN, i64 0, i64 0), i32 8) nounwind optsize
  %86 = fmul x86_fp80 %85, %84
  store i32 -1, i32* @signgam, align 4, !tbaa !6
  br label %90

; <label>:87                                      ; preds = %81
  %88 = tail call x86_fp80 @__polevll(x86_fp80 %.1.lcssa, x86_fp80* getelementptr inbounds ([9 x x86_fp80]* @S844, i64 0, i64 0), i32 8) nounwind optsize
  %89 = fmul x86_fp80 %.1.lcssa, %88
  br label %90

; <label>:90                                      ; preds = %87, %83
  %.pn = phi x86_fp80 [ %86, %83 ], [ %89, %87 ]
  %q.0 = fdiv x86_fp80 %z.3.lcssa, %.pn
  br label %91

; <label>:91                                      ; preds = %90, %78, %75, %68, %._crit_edge, %51, %42, %20, %7, %3, %0
  %.0 = phi x86_fp80 [ %8, %7 ], [ %46, %42 ], [ %22, %20 ], [ %54, %51 ], [ %80, %78 ], [ %q.0, %90 ], [ 0xK7FFF4000000000000000, %0 ], [ 0xK7FFF8000000000000000, %3 ], [ %z.4.lcssa, %._crit_edge ], [ %73, %75 ], [ %73, %68 ]
  ret x86_fp80 %.0
}

define internal fastcc x86_fp80 @stirf(x86_fp80 %x) nounwind uwtable optsize {
  %1 = fdiv x86_fp80 0xK3FFF8000000000000000, %x
  %2 = fcmp ogt x86_fp80 %x, 0xK40098000000000000000
  br i1 %2, label %.thread, label %20

.thread:                                          ; preds = %0
  %3 = fmul x86_fp80 %1, 0xK3FF1923B0241CE01C3F2
  %4 = fadd x86_fp80 %3, 0xK3FF4CD87FB43A79620E4
  %5 = fmul x86_fp80 %4, %1
  %6 = fadd x86_fp80 %5, 0xKBFF2F09E7232FD42CAB1
  %7 = fmul x86_fp80 %6, %1
  %8 = fadd x86_fp80 %7, 0xKBFF6AFB93476D5A63DF2
  %9 = fmul x86_fp80 %8, %1
  %10 = fadd x86_fp80 %9, 0xK3FF6E38E38E38E38E38E
  %11 = fmul x86_fp80 %10, %1
  %12 = fadd x86_fp80 %11, 0xK3FFBAAAAAAAAAAAAAAAB
  %13 = fmul x86_fp80 %12, %1
  %14 = tail call x86_fp80 @expl(x86_fp80 %x) nounwind optsize
  %15 = fmul x86_fp80 %x, 0xK3FFE8000000000000000
  %16 = fadd x86_fp80 %15, 0xKBFFD8000000000000000
  %17 = tail call x86_fp80 @powl(x86_fp80 %x, x86_fp80 %16) nounwind optsize
  %18 = fdiv x86_fp80 %17, %14
  %19 = fmul x86_fp80 %17, %18
  br label %27

; <label>:20                                      ; preds = %0
  %21 = tail call x86_fp80 @__polevll(x86_fp80 %1, x86_fp80* getelementptr inbounds ([9 x x86_fp80]* @STIR, i64 0, i64 0), i32 8) nounwind optsize
  %22 = fmul x86_fp80 %1, %21
  %23 = tail call x86_fp80 @expl(x86_fp80 %x) nounwind optsize
  %24 = fadd x86_fp80 %x, 0xKBFFE8000000000000000
  %25 = tail call x86_fp80 @powl(x86_fp80 %x, x86_fp80 %24) nounwind optsize
  %26 = fdiv x86_fp80 %25, %23
  br label %27

; <label>:27                                      ; preds = %20, %.thread
  %w.02.in = phi x86_fp80 [ %13, %.thread ], [ %22, %20 ]
  %y.0 = phi x86_fp80 [ %19, %.thread ], [ %26, %20 ]
  %w.02 = fadd x86_fp80 %w.02.in, 0xK3FFF8000000000000000
  %28 = fmul x86_fp80 %y.0, 0xK4000A06C98FFB1382CB3
  %29 = fmul x86_fp80 %28, %w.02
  ret x86_fp80 %29
}

define i32 @__timedwait(i32* %addr, i32 %val, i32 %clk, %struct.timespec* %at, void (i8*)* %cleanup, i8* %arg, i32 %priv) nounwind uwtable optsize {
  %to.i = alloca %struct.timespec, align 8
  %cs = alloca i32, align 4
  %__cb = alloca %struct.__ptcb, align 8
  %1 = icmp ne void (i8*)* %cleanup, null
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  br label %4

; <label>:4                                       ; preds = %2, %0
  call void @_pthread_cleanup_push(%struct.__ptcb* %__cb, void (i8*)* %cleanup, i8* %arg) nounwind optsize
  %5 = bitcast %struct.timespec* %to.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %5) nounwind
  %6 = icmp eq %struct.timespec* %at, null
  br i1 %6, label %32, label %7

; <label>:7                                       ; preds = %4
  %8 = getelementptr inbounds %struct.timespec* %at, i64 0, i32 1
  %9 = load i64* %8, align 8, !tbaa !5
  %10 = icmp ugt i64 %9, 999999999
  br i1 %10, label %do_wait.exit, label %11

; <label>:11                                      ; preds = %7
  %12 = call i32 bitcast (i32 (i32, %struct.timespec.29*)* @clock_gettime to i32 (i32, %struct.timespec*)*)(i32 %clk, %struct.timespec* %to.i) nounwind optsize
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %do_wait.exit

; <label>:14                                      ; preds = %11
  %15 = getelementptr inbounds %struct.timespec* %at, i64 0, i32 0
  %16 = load i64* %15, align 8, !tbaa !5
  %17 = getelementptr inbounds %struct.timespec* %to.i, i64 0, i32 0
  %18 = load i64* %17, align 8, !tbaa !5
  %19 = sub nsw i64 %16, %18
  store i64 %19, i64* %17, align 8, !tbaa !5
  %20 = load i64* %8, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.timespec* %to.i, i64 0, i32 1
  %22 = load i64* %21, align 8, !tbaa !5
  %23 = sub nsw i64 %20, %22
  store i64 %23, i64* %21, align 8, !tbaa !5
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %14
  %26 = add nsw i64 %19, -1
  store i64 %26, i64* %17, align 8, !tbaa !5
  %27 = add nsw i64 %23, 1000000000
  store i64 %27, i64* %21, align 8, !tbaa !5
  br label %28

; <label>:28                                      ; preds = %25, %14
  %29 = phi i64 [ %26, %25 ], [ %19, %14 ]
  %30 = icmp slt i64 %29, 0
  br i1 %30, label %do_wait.exit, label %31

; <label>:31                                      ; preds = %28
  %phitmp.i = ptrtoint %struct.timespec* %to.i to i64
  br label %32

; <label>:32                                      ; preds = %31, %4
  %top.0.i = phi i64 [ %phitmp.i, %31 ], [ 0, %4 ]
  %33 = ptrtoint i32* %addr to i64
  %34 = sext i32 %val to i64
  %35 = call i64 @__syscall_cp(i64 240, i64 %33, i64 0, i64 %34, i64 %top.0.i, i64 0, i64 0) nounwind optsize
  %36 = sub nsw i64 0, %35
  %37 = trunc i64 %36 to i32
  switch i32 %37, label %38 [
    i32 110, label %do_wait.exit
    i32 22, label %do_wait.exit
    i32 4, label %do_wait.exit
  ]

; <label>:38                                      ; preds = %32
  br label %do_wait.exit

do_wait.exit:                                     ; preds = %38, %32, %32, %32, %28, %11, %7
  %.0.i = phi i32 [ 0, %38 ], [ 22, %7 ], [ 22, %11 ], [ 110, %28 ], [ %37, %32 ], [ %37, %32 ], [ %37, %32 ]
  call void @llvm.lifetime.end(i64 -1, i8* %5) nounwind
  call void @_pthread_cleanup_pop(%struct.__ptcb* %__cb, i32 0) nounwind optsize
  br i1 %1, label %42, label %39

; <label>:39                                      ; preds = %do_wait.exit
  %40 = load i32* %cs, align 4, !tbaa !6
  %41 = call i32 @pthread_setcancelstate(i32 %40, i32* null) nounwind optsize
  br label %42

; <label>:42                                      ; preds = %39, %do_wait.exit
  ret i32 %.0.i
}

define i64 @time(i64* %t) nounwind uwtable optsize {
  %ts = alloca %struct.timespec.29, align 8
  %1 = call i32 @__clock_gettime(i32 0, %struct.timespec.29* %ts) nounwind optsize
  %2 = icmp eq i64* %t, null
  %.phi.trans.insert = getelementptr inbounds %struct.timespec.29* %ts, i64 0, i32 0
  %.pre = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br i1 %2, label %._crit_edge, label %3

; <label>:3                                       ; preds = %0
  store i64 %.pre, i64* %t, align 8, !tbaa !5
  br label %._crit_edge

._crit_edge:                                      ; preds = %3, %0
  ret i64 %.pre
}

define i32 @timer_delete(i8* %t) nounwind uwtable optsize {
  %1 = icmp ugt i8* %t, inttoptr (i64 1048575 to i8*)
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds i8* %t, i64 220
  %4 = bitcast i8* %3 to i32*
  store i32 1, i32* %4, align 4, !tbaa !6
  tail call void @__wake(i32* %4, i32 1, i32 1) nounwind optsize
  br label %9

; <label>:5                                       ; preds = %0
  %6 = ptrtoint i8* %t to i64
  %7 = tail call i64 (i64, ...)* @__syscall(i64 261, i64 %6, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %8 = trunc i64 %7 to i32
  br label %9

; <label>:9                                       ; preds = %5, %2
  %.0 = phi i32 [ 0, %2 ], [ %8, %5 ]
  ret i32 %.0
}

define i32 @timer_getoverrun(i8* %t) nounwind uwtable optsize {
  %1 = icmp ugt i8* %t, inttoptr (i64 1048575 to i8*)
  br i1 %1, label %2, label %6

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds i8* %t, i64 96
  %4 = bitcast i8* %3 to i8**
  %5 = load i8** %4, align 8, !tbaa !7
  br label %6

; <label>:6                                       ; preds = %2, %0
  %.0 = phi i8* [ %5, %2 ], [ %t, %0 ]
  %7 = ptrtoint i8* %.0 to i64
  %8 = tail call i64 (i64, ...)* @__syscall(i64 260, i64 %7, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %9 = tail call i64 @__syscall_ret(i64 %8) nounwind optsize
  %10 = trunc i64 %9 to i32
  ret i32 %10
}

define i32 @timer_gettime(i8* %t, %struct.itimerspec* %val) nounwind uwtable optsize {
  %1 = icmp ugt i8* %t, inttoptr (i64 1048575 to i8*)
  br i1 %1, label %2, label %6

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds i8* %t, i64 96
  %4 = bitcast i8* %3 to i8**
  %5 = load i8** %4, align 8, !tbaa !7
  br label %6

; <label>:6                                       ; preds = %2, %0
  %.0 = phi i8* [ %5, %2 ], [ %t, %0 ]
  %7 = ptrtoint i8* %.0 to i64
  %8 = ptrtoint %struct.itimerspec* %val to i64
  %9 = tail call i64 (i64, ...)* @__syscall(i64 259, i64 %7, i64 %8, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %10 = tail call i64 @__syscall_ret(i64 %9) nounwind optsize
  %11 = trunc i64 %10 to i32
  ret i32 %11
}

define i32 @timer_settime(i8* %t, i32 %flags, %struct.itimerspec.681* %val, %struct.itimerspec.681* %old) nounwind uwtable optsize {
  %1 = icmp ugt i8* %t, inttoptr (i64 1048575 to i8*)
  br i1 %1, label %2, label %6

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds i8* %t, i64 96
  %4 = bitcast i8* %3 to i8**
  %5 = load i8** %4, align 8, !tbaa !7
  br label %6

; <label>:6                                       ; preds = %2, %0
  %.0 = phi i8* [ %5, %2 ], [ %t, %0 ]
  %7 = ptrtoint i8* %.0 to i64
  %8 = sext i32 %flags to i64
  %9 = ptrtoint %struct.itimerspec.681* %val to i64
  %10 = ptrtoint %struct.itimerspec.681* %old to i64
  %11 = tail call i64 (i64, ...)* @__syscall(i64 258, i64 %7, i64 %8, i64 %9, i64 %10, i32 0, i32 0) nounwind optsize
  %12 = tail call i64 @__syscall_ret(i64 %11) nounwind optsize
  %13 = trunc i64 %12 to i32
  ret i32 %13
}

define i64 @times(%struct.tms.683* %tms) nounwind uwtable optsize {
  %1 = ptrtoint %struct.tms.683* %tms to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 43, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  ret i64 %3
}

define %struct.tm.197* @__time_to_tm(i64 %t, %struct.tm.197* %tm) nounwind uwtable optsize {
  %1 = add nsw i64 %t, -951868800
  %2 = icmp sgt i64 %1, 0
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = sdiv i64 %1, 86400
  br label %8

; <label>:5                                       ; preds = %0
  %6 = sub i64 951955199, %t
  %7 = sdiv i64 %6, -86400
  br label %8

; <label>:8                                       ; preds = %5, %3
  %9 = phi i64 [ %4, %3 ], [ %7, %5 ]
  %10 = mul i64 %9, -86400
  %11 = add i64 %10, %1
  %12 = trunc i64 %11 to i32
  %13 = sdiv i32 %12, 3600
  %14 = mul i32 %13, -3600
  %15 = add i32 %12, %14
  %16 = sdiv i32 %15, 60
  %17 = mul i32 %16, -60
  %18 = add i32 %15, %17
  %19 = add nsw i64 %9, 3
  %20 = srem i64 %19, 7
  %21 = trunc i64 %20 to i32
  %22 = add nsw i32 %21, 7
  %23 = icmp slt i32 %21, 0
  %. = select i1 %23, i32 %22, i32 %21
  %24 = icmp sgt i64 %9, 0
  br i1 %24, label %25, label %27

; <label>:25                                      ; preds = %8
  %26 = sdiv i64 %9, 146097
  br label %30

; <label>:27                                      ; preds = %8
  %28 = sub i64 146096, %9
  %29 = sdiv i64 %28, -146097
  br label %30

; <label>:30                                      ; preds = %27, %25
  %31 = phi i64 [ %26, %25 ], [ %29, %27 ]
  %32 = trunc i64 %31 to i32
  %33 = mul nsw i32 %32, 146097
  %34 = zext i32 %33 to i64
  %35 = sub nsw i64 %9, %34
  %36 = trunc i64 %35 to i32
  %37 = udiv i32 %36, 36524
  %.off = add i32 %36, -146096
  %38 = icmp ult i32 %.off, 36524
  %39 = sext i1 %38 to i32
  %year100.0 = add i32 %39, %37
  %40 = mul i32 %year100.0, -36524
  %41 = add i32 %40, %36
  %42 = udiv i32 %41, 1461
  %.off1 = add i32 %41, -36525
  %43 = icmp ult i32 %.off1, 1461
  %44 = sext i1 %43 to i32
  %year4.0 = add i32 %44, %42
  %45 = mul i32 %year4.0, -1461
  %46 = add i32 %45, %41
  %47 = udiv i32 %46, 365
  %.off2 = add i32 %46, -1460
  %48 = icmp ult i32 %.off2, 365
  %49 = sext i1 %48 to i32
  %year.0 = add nsw i32 %49, %47
  %50 = mul i32 %year.0, -365
  %51 = add i32 %50, %46
  %52 = icmp eq i32 %year.0, 0
  br i1 %52, label %53, label %57

; <label>:53                                      ; preds = %30
  %54 = icmp eq i32 %year4.0, 0
  br i1 %54, label %55, label %57

; <label>:55                                      ; preds = %53
  %56 = icmp eq i32 %year100.0, 0
  br label %57

; <label>:57                                      ; preds = %55, %53, %30
  %58 = phi i1 [ false, %30 ], [ true, %53 ], [ %56, %55 ]
  %59 = zext i1 %58 to i32
  %60 = add i32 %51, 59
  %61 = add i32 %60, %59
  %62 = select i1 %58, i32 366, i32 365
  %63 = icmp slt i32 %61, %62
  %64 = select i1 %63, i32 0, i32 %62
  %.3 = sub nsw i32 %61, %64
  %65 = shl nsw i32 %year4.0, 2
  %66 = mul i32 %year100.0, 100
  %67 = mul nsw i32 %32, 400
  %68 = add i32 %67, 100
  %69 = add i32 %68, %66
  %70 = add i32 %69, %65
  %71 = add i32 %70, %year.0
  %72 = icmp ult i32 %51, 31
  br i1 %72, label %.thread, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %57
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %57 ]
  %month.05 = phi i32 [ %73, %.lr.ph ], [ 0, %57 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %73 = add nsw i32 %month.05, 1
  %74 = getelementptr inbounds [12 x i32]* @__time_to_tm.days_thru_month, i64 0, i64 %indvars.iv.next
  %75 = load i32* %74, align 4, !tbaa !6
  %76 = icmp ugt i32 %75, %51
  br i1 %76, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph
  %77 = icmp eq i32 %73, 0
  br i1 %77, label %.thread, label %78

; <label>:78                                      ; preds = %._crit_edge
  %79 = sext i32 %month.05 to i64
  %80 = getelementptr inbounds [12 x i32]* @__time_to_tm.days_thru_month, i64 0, i64 %79
  %81 = load i32* %80, align 4, !tbaa !6
  %82 = sub i32 %51, %81
  %83 = add nsw i32 %month.05, 3
  %84 = icmp sgt i32 %83, 11
  br i1 %84, label %85, label %.thread

; <label>:85                                      ; preds = %78
  %86 = add nsw i32 %month.05, -9
  %87 = add nsw i32 %71, 1
  br label %.thread

.thread:                                          ; preds = %85, %78, %._crit_edge, %57
  %day.04 = phi i32 [ %82, %85 ], [ %82, %78 ], [ %51, %._crit_edge ], [ %51, %57 ]
  %month.1 = phi i32 [ %86, %85 ], [ %83, %78 ], [ 2, %._crit_edge ], [ 2, %57 ]
  %year.1 = phi i32 [ %87, %85 ], [ %71, %78 ], [ %71, %._crit_edge ], [ %71, %57 ]
  %88 = add i32 %day.04, 1
  %89 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 0
  store i32 %18, i32* %89, align 4, !tbaa !6
  %90 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 1
  store i32 %16, i32* %90, align 4, !tbaa !6
  %91 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 2
  store i32 %13, i32* %91, align 4, !tbaa !6
  %92 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 3
  store i32 %88, i32* %92, align 4, !tbaa !6
  %93 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 4
  store i32 %month.1, i32* %93, align 4, !tbaa !6
  %94 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 5
  store i32 %year.1, i32* %94, align 4, !tbaa !6
  %95 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 6
  store i32 %., i32* %95, align 4, !tbaa !6
  %96 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 7
  store i32 %.3, i32* %96, align 4, !tbaa !6
  ret %struct.tm.197* %tm
}

define %struct.__FILE_s.61* @tmpfile() nounwind uwtable optsize {
  %buf = alloca [20 x i8], align 16
  %1 = getelementptr inbounds [20 x i8]* %buf, i64 0, i64 0
  br label %2

; <label>:2                                       ; preds = %16, %0
  %try.0 = phi i32 [ 0, %0 ], [ %17, %16 ]
  %3 = icmp slt i32 %try.0, 100
  br i1 %3, label %4, label %.loopexit

; <label>:4                                       ; preds = %2
  %5 = call i8* @tmpnam(i8* %1) nounwind optsize
  %6 = icmp eq i8* %5, null
  br i1 %6, label %.loopexit, label %7

; <label>:7                                       ; preds = %4
  %8 = ptrtoint i8* %5 to i64
  %9 = call i64 (i64, ...)* @__syscall(i64 5, i64 %8, i64 194, i64 384, i32 0, i32 0, i32 0) nounwind optsize
  %10 = call i64 @__syscall_ret(i64 %9) nounwind optsize
  %11 = trunc i64 %10 to i32
  %12 = icmp sgt i32 %11, -1
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %7
  %14 = call %struct.__FILE_s.61* @__fdopen(i32 %11, i8* getelementptr inbounds ([3 x i8]* @.str851, i64 0, i64 0)) nounwind optsize
  %15 = call i64 (i64, ...)* @__syscall(i64 10, i64 %8, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  br label %.loopexit

; <label>:16                                      ; preds = %7
  %17 = add nsw i32 %try.0, 1
  br label %2

.loopexit:                                        ; preds = %13, %4, %2
  %.0 = phi %struct.__FILE_s.61* [ %14, %13 ], [ null, %4 ], [ null, %2 ]
  ret %struct.__FILE_s.61* %.0
}

define i8* @tmpnam(i8* %s) nounwind uwtable optsize {
  %1 = alloca i8*, align 8
  %ts = alloca %struct.timespec.686, align 8
  %2 = icmp eq i8* %s, null
  %storemerge = select i1 %2, i8* getelementptr inbounds ([20 x i8]* @tmpnam.s2, i64 0, i64 0), i8* %s
  store i8* %storemerge, i8** %1, align 8
  %3 = call i64 (i64, ...)* @__syscall(i64 33, i64 ptrtoint ([5 x i8]* @.str852 to i64), i64 7, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %.preheader, label %35

.preheader:                                       ; preds = %0
  %5 = ptrtoint %struct.timespec.686* %ts to i64
  %6 = getelementptr inbounds %struct.timespec.686* %ts, i64 0, i32 1
  %7 = ptrtoint i8** %1 to i64
  br label %8

; <label>:8                                       ; preds = %29, %.preheader
  %try.0 = phi i32 [ %30, %29 ], [ 0, %.preheader ]
  %9 = call i64 (i64, ...)* @__syscall(i64 263, i64 0, i64 %5, i64 0, i32 0, i32 0, i32 0) nounwind optsize
  %10 = load i64* %6, align 8, !tbaa !5
  %11 = load i8** %1, align 8, !tbaa !7
  %12 = ptrtoint i8* %11 to i64
  %13 = xor i64 %10, %7
  %14 = xor i64 %13, %12
  br label %a_cas.exit.i

a_cas.exit.i:                                     ; preds = %20, %8
  %15 = load volatile i32* @tmpnam.index, align 4, !tbaa !6
  %16 = add nsw i32 %15, 1
  br label %17

; <label>:17                                      ; preds = %20, %a_cas.exit.i
  %18 = call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %15, i32 %16, i32* @tmpnam.index) nounwind optsize
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %a_fetch_add.exit, label %20

; <label>:20                                      ; preds = %17
  %21 = load volatile i32* @tmpnam.index, align 4, !tbaa !6
  %22 = icmp eq i32 %21, %15
  br i1 %22, label %17, label %a_cas.exit.i

a_fetch_add.exit:                                 ; preds = %17
  %23 = trunc i64 %14 to i32
  %24 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %11, i64 20, i8* getelementptr inbounds ([12 x i8]* @.str1853, i64 0, i64 0), i32 %15, i32 %23) nounwind optsize
  %25 = load i8** %1, align 8, !tbaa !7
  %26 = ptrtoint i8* %25 to i64
  %27 = call i64 (i64, ...)* @__syscall(i64 33, i64 %26, i64 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %.critedge

; <label>:29                                      ; preds = %a_fetch_add.exit
  %30 = add nsw i32 %try.0, 1
  %31 = icmp slt i32 %try.0, 100
  br i1 %31, label %8, label %.critedge

.critedge:                                        ; preds = %29, %a_fetch_add.exit
  %try.1 = phi i32 [ %try.0, %a_fetch_add.exit ], [ %30, %29 ]
  %32 = icmp sgt i32 %try.1, 99
  %33 = load i8** %1, align 8, !tbaa !7
  %34 = select i1 %32, i8* null, i8* %33
  br label %35

; <label>:35                                      ; preds = %.critedge, %0
  %.0 = phi i8* [ %34, %.critedge ], [ null, %0 ]
  ret i8* %.0
}

define i64 @__tm_to_time(%struct.tm.197* nocapture %tm) nounwind uwtable readonly optsize {
  %1 = alloca [12 x i32], align 4
  %2 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 5
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = add nsw i32 %3, -100
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 4
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 3
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = icmp sgt i32 %7, 11
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %0
  %12 = sdiv i32 %7, 12
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %13, %5
  %15 = srem i32 %7, 12
  br label %27

; <label>:16                                      ; preds = %0
  %17 = icmp slt i32 %7, 0
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %16
  %19 = sdiv i32 %7, 12
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %20, %5
  %22 = srem i32 %7, 12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

; <label>:24                                      ; preds = %18
  %25 = add nsw i32 %22, 12
  %26 = add nsw i64 %21, -1
  br label %27

; <label>:27                                      ; preds = %24, %18, %16, %11
  %month.0 = phi i32 [ %15, %11 ], [ %25, %24 ], [ 0, %18 ], [ %7, %16 ]
  %year.0 = phi i64 [ %14, %11 ], [ %26, %24 ], [ %21, %18 ], [ %5, %16 ]
  %28 = icmp slt i32 %month.0, 2
  %29 = zext i1 %28 to i64
  %30 = sub nsw i64 %year.0, %29
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %34

; <label>:32                                      ; preds = %27
  %33 = sdiv i64 %30, 4
  br label %37

; <label>:34                                      ; preds = %27
  %35 = sub i64 3, %30
  %36 = sdiv i64 %35, -4
  br label %37

; <label>:37                                      ; preds = %34, %32
  %38 = phi i64 [ %33, %32 ], [ %36, %34 ]
  %39 = trunc i64 %38 to i32
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %43

; <label>:41                                      ; preds = %37
  %42 = sdiv i32 %39, 25
  br label %46

; <label>:43                                      ; preds = %37
  %44 = sub i32 24, %39
  %45 = sdiv i32 %44, -25
  br label %46

; <label>:46                                      ; preds = %43, %41
  %47 = phi i32 [ %42, %41 ], [ %45, %43 ]
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %51

; <label>:49                                      ; preds = %46
  %50 = sdiv i32 %47, 4
  br label %54

; <label>:51                                      ; preds = %46
  %52 = sub i32 3, %47
  %53 = sdiv i32 %52, -4
  br label %54

; <label>:54                                      ; preds = %51, %49
  %55 = phi i32 [ %50, %49 ], [ %53, %51 ]
  %56 = mul nsw i64 %year.0, 365
  %57 = zext i32 %47 to i64
  %58 = zext i32 %55 to i64
  %59 = sext i32 %month.0 to i64
  %60 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 0
  store i32 0, i32* %60, align 4, !tbaa !6
  %61 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 1
  store i32 31, i32* %61, align 4, !tbaa !6
  %62 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 2
  store i32 59, i32* %62, align 4, !tbaa !6
  %63 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 3
  store i32 90, i32* %63, align 4, !tbaa !6
  %64 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 4
  store i32 120, i32* %64, align 4, !tbaa !6
  %65 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 5
  store i32 151, i32* %65, align 4, !tbaa !6
  %66 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 6
  store i32 181, i32* %66, align 4, !tbaa !6
  %67 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 7
  store i32 212, i32* %67, align 4, !tbaa !6
  %68 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 8
  store i32 243, i32* %68, align 4, !tbaa !6
  %69 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 9
  store i32 273, i32* %69, align 4, !tbaa !6
  %70 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 10
  store i32 304, i32* %70, align 4, !tbaa !6
  %71 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 11
  store i32 335, i32* %71, align 4, !tbaa !6
  %72 = getelementptr inbounds [12 x i32]* %1, i64 0, i64 %59
  %73 = load i32* %72, align 4, !tbaa !6
  %74 = zext i32 %73 to i64
  %75 = zext i32 %9 to i64
  %76 = add i64 %56, %75
  %77 = add i64 %76, %38
  %78 = sub i64 %77, %57
  %79 = add i64 %78, %58
  %80 = add i64 %79, %74
  %sext = shl i64 %80, 32
  %81 = ashr exact i64 %sext, 32
  %82 = mul nsw i64 %81, 86400
  %83 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 2
  %84 = load i32* %83, align 4, !tbaa !6
  %85 = mul nsw i32 %84, 3600
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 1
  %88 = load i32* %87, align 4, !tbaa !6
  %89 = mul nsw i32 %88, 60
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.tm.197* %tm, i64 0, i32 0
  %92 = load i32* %91, align 4, !tbaa !6
  %93 = sext i32 %92 to i64
  %94 = add i64 %86, 946684800
  %95 = add i64 %94, %93
  %96 = add i64 %95, %90
  %97 = add i64 %96, %82
  ret i64 %97
}

define i32 @toascii(i32 %c) nounwind uwtable readnone optsize {
  %1 = and i32 %c, 127
  ret i32 %1
}

define i32 @tolower_l(i32 %c, %struct.__locale.688* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @tolower(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @tolower(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -65
  %2 = icmp ult i32 %1, 26
  %3 = or i32 %c, 32
  %.0 = select i1 %2, i32 %3, i32 %c
  ret i32 %.0
}

define i32 @__toread(%struct.__FILE_s.689* %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 19
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = add i8 %2, -1
  %4 = or i8 %3, %2
  store i8 %4, i8* %1, align 1, !tbaa !0
  %5 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 5
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 11
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = icmp ugt i8* %6, %8
  br i1 %9, label %10, label %14

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 9
  %12 = load i64 (%struct.__FILE_s.689*, i8*, i64)** %11, align 8, !tbaa !7
  %13 = tail call i64 %12(%struct.__FILE_s.689* %f, i8* null, i64 0) nounwind optsize
  br label %14

; <label>:14                                      ; preds = %10, %0
  %15 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 4
  store i8* null, i8** %15, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 7
  store i8* null, i8** %16, align 8, !tbaa !7
  store i8* null, i8** %5, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 0
  %18 = load i32* %17, align 4, !tbaa !6
  %19 = and i32 %18, 20
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %26, label %21

; <label>:21                                      ; preds = %14
  %22 = and i32 %18, 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %30, label %24

; <label>:24                                      ; preds = %21
  %25 = or i32 %18, 32
  store i32 %25, i32* %17, align 4, !tbaa !6
  br label %30

; <label>:26                                      ; preds = %14
  %27 = load i8** %7, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 2
  store i8* %27, i8** %28, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.__FILE_s.689* %f, i64 0, i32 1
  store i8* %27, i8** %29, align 8, !tbaa !7
  br label %30

; <label>:30                                      ; preds = %26, %24, %21
  %.0 = phi i32 [ 0, %26 ], [ -1, %21 ], [ -1, %24 ]
  ret i32 %.0
}

define i32 @toupper_l(i32 %c, %struct.__locale.690* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @toupper(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @toupper(i32 %c) nounwind uwtable readnone optsize {
  %1 = add i32 %c, -97
  %2 = icmp ult i32 %1, 26
  %3 = and i32 %c, 95
  %.0 = select i1 %2, i32 %3, i32 %c
  ret i32 %.0
}

define i32 @towctrans_l(i32 %c, i32 %t, %struct.__locale.691* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @towctrans(i32 %c, i32 %t) nounwind optsize
  ret i32 %1
}

define i32 @towupper(i32 %wc) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @__towcase(i32 %wc, i32 0) optsize
  ret i32 %1
}

define internal fastcc i32 @__towcase(i32 %wc, i32 %lower) nounwind uwtable optsize {
  %1 = shl nsw i32 %lower, 1
  %2 = add nsw i32 %1, -1
  %3 = add nsw i32 %lower, -1
  %4 = add i32 %wc, -66560
  %5 = icmp ult i32 %4, 80
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %0
  %7 = mul nsw i32 %2, 40
  %8 = add nsw i32 %7, %wc
  br label %75

; <label>:9                                       ; preds = %0
  %10 = tail call i32 @iswalpha(i32 %wc) nounwind optsize
  %11 = icmp eq i32 %10, 0
  %12 = add i32 %wc, -1536
  %13 = icmp ult i32 %12, 2560
  %or.cond = or i1 %11, %13
  %14 = add i32 %wc, -11776
  %15 = icmp ult i32 %14, 30976
  %or.cond3 = or i1 %or.cond, %15
  %16 = add i32 %wc, -43008
  %17 = icmp ult i32 %16, 22272
  %or.cond5 = or i1 %or.cond3, %17
  br i1 %or.cond5, label %75, label %18

; <label>:18                                      ; preds = %9
  %19 = add i32 %wc, -4256
  %20 = icmp ult i32 %19, 38
  %21 = add i32 %wc, -11520
  %22 = icmp ult i32 %21, 38
  %or.cond7 = or i1 %20, %22
  br i1 %or.cond7, label %23, label %.preheader15

; <label>:23                                      ; preds = %18
  %24 = mul nsw i32 %2, 7264
  %25 = add nsw i32 %24, %wc
  br label %75

.preheader15:                                     ; preds = %54, %18
  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %54 ], [ 0, %18 ]
  %26 = trunc i64 %indvars.iv21 to i32
  %27 = icmp eq i32 %26, 55
  br i1 %27, label %.preheader, label %30

.preheader:                                       ; preds = %.preheader15
  %28 = sub nsw i32 1, %lower
  %29 = sext i32 %28 to i64
  br label %55

; <label>:30                                      ; preds = %.preheader15
  %31 = getelementptr inbounds [56 x %struct.anon.692]* @casemaps, i64 0, i64 %indvars.iv21, i32 2
  %32 = load i8* %31, align 1, !tbaa !0
  %33 = getelementptr inbounds [56 x %struct.anon.692]* @casemaps, i64 0, i64 %indvars.iv21, i32 0
  %34 = load i16* %33, align 4, !tbaa !8
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds [56 x %struct.anon.692]* @casemaps, i64 0, i64 %indvars.iv21, i32 1
  %37 = load i8* %36, align 2, !tbaa !0
  %38 = sext i8 %37 to i32
  %39 = and i32 %38, %3
  %.neg9 = sub i32 %wc, %35
  %40 = sub i32 %.neg9, %39
  %41 = zext i8 %32 to i32
  %42 = icmp ult i32 %40, %41
  br i1 %42, label %43, label %54

; <label>:43                                      ; preds = %30
  %44 = lshr i64 17785700157944060, %indvars.iv21
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %51, label %47

; <label>:47                                      ; preds = %43
  %48 = and i32 %.neg9, 1
  %49 = add i32 %lower, %wc
  %50 = sub i32 %49, %48
  br label %75

; <label>:51                                      ; preds = %43
  %52 = mul nsw i32 %38, %2
  %53 = add nsw i32 %52, %wc
  br label %75

; <label>:54                                      ; preds = %30
  %indvars.iv.next22 = add i64 %indvars.iv21, 1
  br label %.preheader15

; <label>:55                                      ; preds = %67, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %67 ]
  %56 = getelementptr inbounds [112 x [2 x i16]]* @pairs, i64 0, i64 %indvars.iv, i64 %29
  %57 = load i16* %56, align 2, !tbaa !8
  %58 = icmp eq i16 %57, 0
  br i1 %58, label %68, label %59

; <label>:59                                      ; preds = %55
  %60 = zext i16 %57 to i32
  %61 = icmp eq i32 %60, %wc
  br i1 %61, label %62, label %67

; <label>:62                                      ; preds = %59
  %63 = sext i32 %lower to i64
  %64 = getelementptr inbounds [112 x [2 x i16]]* @pairs, i64 0, i64 %indvars.iv, i64 %63
  %65 = load i16* %64, align 2, !tbaa !8
  %66 = zext i16 %65 to i32
  br label %75

; <label>:67                                      ; preds = %59
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %55

; <label>:68                                      ; preds = %55
  %tmp11 = mul i32 %lower, 40
  %69 = add i32 %wc, -66600
  %70 = add i32 %69, %tmp11
  %71 = icmp ult i32 %70, 40
  br i1 %71, label %72, label %75

; <label>:72                                      ; preds = %68
  %tmp13 = mul i32 %lower, 1088
  %73 = add i32 %wc, -40
  %74 = add i32 %73, %tmp13
  br label %75

; <label>:75                                      ; preds = %72, %68, %62, %51, %47, %23, %9, %6
  %.0 = phi i32 [ %8, %6 ], [ %25, %23 ], [ %50, %47 ], [ %53, %51 ], [ %66, %62 ], [ %74, %72 ], [ %wc, %9 ], [ %wc, %68 ]
  ret i32 %.0
}

define i32 @towlower(i32 %wc) nounwind uwtable optsize {
  %1 = tail call fastcc i32 @__towcase(i32 %wc, i32 1) optsize
  ret i32 %1
}

define i32 @towlower_l(i32 %c, %struct.__locale.693* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @towlower(i32 %c) nounwind optsize
  ret i32 %1
}

define i32 @__towrite(%struct.__FILE_s.694* nocapture %f) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 19
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = add i8 %2, -1
  %4 = or i8 %3, %2
  store i8 %4, i8* %1, align 1, !tbaa !0
  %5 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 0
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = and i32 %6, 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

; <label>:9                                       ; preds = %0
  %10 = or i32 %6, 32
  store i32 %10, i32* %5, align 4, !tbaa !6
  br label %22

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 2
  store i8* null, i8** %12, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 1
  store i8* null, i8** %13, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 11
  %15 = load i8** %14, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 7
  store i8* %15, i8** %16, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 5
  store i8* %15, i8** %17, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 12
  %19 = load i64* %18, align 8, !tbaa !5
  %20 = getelementptr inbounds i8* %15, i64 %19
  %21 = getelementptr inbounds %struct.__FILE_s.694* %f, i64 0, i32 4
  store i8* %20, i8** %21, align 8, !tbaa !7
  br label %22

; <label>:22                                      ; preds = %11, %9
  %.0 = phi i32 [ -1, %9 ], [ 0, %11 ]
  ret i32 %.0
}

define void @__fflush_on_exit() nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (%struct.__FILE_s.67*)* @fflush to i32 (%struct.__FILE_s.694*)*)(%struct.__FILE_s.694* null) nounwind optsize
  ret void
}

define i32 @towupper_l(i32 %c, %struct.__locale.695* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @towupper(i32 %c) nounwind optsize
  ret i32 %1
}

define %struct.tre_mem_struct* @__tre_mem_new_impl(i32 %provided, i8* %provided_block) nounwind uwtable optsize {
  %1 = icmp eq i32 %provided, 0
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i8* @memset(i8* %provided_block, i32 0, i64 48) nounwind optsize
  br label %6

; <label>:4                                       ; preds = %0
  %5 = tail call i8* @calloc(i64 1, i64 48) nounwind optsize
  br label %6

; <label>:6                                       ; preds = %4, %2
  %mem.0.in = phi i8* [ %provided_block, %2 ], [ %5, %4 ]
  %7 = icmp eq i8* %mem.0.in, null
  br i1 %7, label %9, label %8

; <label>:8                                       ; preds = %6
  %mem.0 = bitcast i8* %mem.0.in to %struct.tre_mem_struct*
  br label %9

; <label>:9                                       ; preds = %8, %6
  %.0 = phi %struct.tre_mem_struct* [ %mem.0, %8 ], [ null, %6 ]
  ret %struct.tre_mem_struct* %.0
}

define void @__tre_mem_destroy(%struct.tre_mem_struct* %mem) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 0
  %2 = load %struct.tre_list** %1, align 8, !tbaa !7
  %3 = icmp eq %struct.tre_list* %2, null
  br i1 %3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %l.01 = phi %struct.tre_list* [ %7, %.lr.ph ], [ %2, %0 ]
  %4 = getelementptr inbounds %struct.tre_list* %l.01, i64 0, i32 0
  %5 = load i8** %4, align 8, !tbaa !7
  tail call void @free(i8* %5) optsize
  %6 = getelementptr inbounds %struct.tre_list* %l.01, i64 0, i32 1
  %7 = load %struct.tre_list** %6, align 8, !tbaa !7
  %8 = bitcast %struct.tre_list* %l.01 to i8*
  tail call void @free(i8* %8) optsize
  %9 = icmp eq %struct.tre_list* %7, null
  br i1 %9, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  %10 = bitcast %struct.tre_mem_struct* %mem to i8*
  tail call void @free(i8* %10) optsize
  ret void
}

define i8* @__tre_mem_alloc_impl(%struct.tre_mem_struct* nocapture %mem, i32 %provided, i8* %provided_block, i32 %zero, i64 %size) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 4
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %60

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 3
  %6 = load i64* %5, align 8, !tbaa !5
  %7 = icmp ult i64 %6, %size
  br i1 %7, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %4
  %.phi.trans.insert = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 2
  %.pre = load i8** %.phi.trans.insert, align 8, !tbaa !7
  br label %45

; <label>:8                                       ; preds = %4
  %9 = icmp eq i32 %provided, 0
  br i1 %9, label %15, label %10

; <label>:10                                      ; preds = %8
  %11 = icmp eq i8* %provided_block, null
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %10
  store i32 1, i32* %1, align 4, !tbaa !6
  br label %60

; <label>:13                                      ; preds = %10
  %14 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 2
  store i8* %provided_block, i8** %14, align 8, !tbaa !7
  store i64 1024, i64* %5, align 8, !tbaa !5
  br label %45

; <label>:15                                      ; preds = %8
  %16 = shl i64 %size, 3
  %17 = icmp ugt i64 %16, 1024
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %15
  %sext = shl i64 %size, 35
  %phitmp = ashr exact i64 %sext, 32
  br label %19

; <label>:19                                      ; preds = %18, %15
  %block_size.0 = phi i64 [ %phitmp, %18 ], [ 1024, %15 ]
  %20 = tail call i8* @malloc(i64 16) optsize
  %21 = bitcast i8* %20 to %struct.tre_list*
  %22 = icmp eq i8* %20, null
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %19
  store i32 1, i32* %1, align 4, !tbaa !6
  br label %60

; <label>:24                                      ; preds = %19
  %25 = tail call i8* @malloc(i64 %block_size.0) optsize
  %26 = bitcast i8* %20 to i8**
  store i8* %25, i8** %26, align 8, !tbaa !7
  %27 = icmp eq i8* %25, null
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %24
  tail call void @free(i8* %20) optsize
  store i32 1, i32* %1, align 4, !tbaa !6
  br label %60

; <label>:29                                      ; preds = %24
  %30 = getelementptr inbounds i8* %20, i64 8
  %31 = bitcast i8* %30 to %struct.tre_list**
  store %struct.tre_list* null, %struct.tre_list** %31, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 1
  %33 = load %struct.tre_list** %32, align 8, !tbaa !7
  %34 = icmp eq %struct.tre_list* %33, null
  br i1 %34, label %37, label %35

; <label>:35                                      ; preds = %29
  %36 = getelementptr inbounds %struct.tre_list* %33, i64 0, i32 1
  store %struct.tre_list* %21, %struct.tre_list** %36, align 8, !tbaa !7
  br label %37

; <label>:37                                      ; preds = %35, %29
  %38 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 0
  %39 = load %struct.tre_list** %38, align 8, !tbaa !7
  %40 = icmp eq %struct.tre_list* %39, null
  br i1 %40, label %41, label %42

; <label>:41                                      ; preds = %37
  store %struct.tre_list* %21, %struct.tre_list** %38, align 8, !tbaa !7
  br label %42

; <label>:42                                      ; preds = %41, %37
  store %struct.tre_list* %21, %struct.tre_list** %32, align 8, !tbaa !7
  %43 = load i8** %26, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 2
  store i8* %43, i8** %44, align 8, !tbaa !7
  store i64 %block_size.0, i64* %5, align 8, !tbaa !5
  br label %45

; <label>:45                                      ; preds = %42, %13, %._crit_edge
  %46 = phi i8* [ %provided_block, %13 ], [ %43, %42 ], [ %.pre, %._crit_edge ]
  %47 = phi i64 [ 1024, %13 ], [ %block_size.0, %42 ], [ %6, %._crit_edge ]
  %48 = getelementptr inbounds %struct.tre_mem_struct* %mem, i64 0, i32 2
  %49 = ptrtoint i8* %46 to i64
  %50 = add i64 %49, %size
  %51 = and i64 %50, 7
  %52 = sub i64 8, %51
  %53 = icmp eq i64 %51, 0
  %. = select i1 %53, i64 0, i64 %52
  %54 = add i64 %., %size
  %55 = getelementptr inbounds i8* %46, i64 %54
  store i8* %55, i8** %48, align 8, !tbaa !7
  %56 = sub i64 %47, %54
  store i64 %56, i64* %5, align 8, !tbaa !5
  %57 = icmp eq i32 %zero, 0
  br i1 %57, label %60, label %58

; <label>:58                                      ; preds = %45
  %59 = tail call i8* @memset(i8* %46, i32 0, i64 %54) nounwind optsize
  br label %60

; <label>:60                                      ; preds = %58, %45, %28, %23, %12, %0
  %.0 = phi i8* [ null, %12 ], [ null, %23 ], [ null, %28 ], [ null, %0 ], [ %46, %45 ], [ %46, %58 ]
  ret i8* %.0
}

define i32 @truncate(i8* %path, i64 %length) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 193, i64 %1, i64 0, i64 %length, i64 undef, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define float @truncf(float %x) nounwind uwtable readnone optsize {
  %1 = bitcast float %x to i32
  %2 = lshr i32 %1, 23
  %3 = and i32 %2, 255
  %4 = add nsw i32 %3, -127
  %5 = icmp slt i32 %4, 23
  br i1 %5, label %6, label %23

; <label>:6                                       ; preds = %0
  %7 = icmp slt i32 %4, 0
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %6
  %9 = fadd float %x, 0x46293E5940000000
  %10 = fcmp ogt float %9, 0.000000e+00
  br i1 %10, label %11, label %27

; <label>:11                                      ; preds = %8
  %12 = and i32 %1, -2147483648
  br label %27

; <label>:13                                      ; preds = %6
  %14 = lshr i32 8388607, %4
  %15 = and i32 %14, %1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %29, label %17

; <label>:17                                      ; preds = %13
  %18 = fadd float %x, 0x46293E5940000000
  %19 = fcmp ogt float %18, 0.000000e+00
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %17
  %21 = xor i32 %14, -1
  %22 = and i32 %1, %21
  br label %27

; <label>:23                                      ; preds = %0
  %24 = icmp eq i32 %4, 128
  br i1 %24, label %25, label %29

; <label>:25                                      ; preds = %23
  %26 = fadd float %x, %x
  br label %29

; <label>:27                                      ; preds = %20, %17, %11, %8
  %i0.0 = phi i32 [ %12, %11 ], [ %1, %8 ], [ %22, %20 ], [ %1, %17 ]
  %28 = bitcast i32 %i0.0 to float
  br label %29

; <label>:29                                      ; preds = %27, %25, %23, %13
  %.0 = phi float [ %28, %27 ], [ %26, %25 ], [ %x, %13 ], [ %x, %23 ]
  ret float %.0
}

define x86_fp80 @truncl(x86_fp80 %x) nounwind uwtable readnone optsize {
  %1 = bitcast x86_fp80 %x to i80
  %2 = lshr i80 %1, 64
  %3 = trunc i80 %2 to i32
  %4 = and i32 %3, 32767
  %5 = add nsw i32 %4, -16383
  %6 = icmp slt i32 %5, 31
  br i1 %6, label %7, label %39

; <label>:7                                       ; preds = %0
  %8 = icmp slt i32 %5, 0
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %7
  %10 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %11 = fcmp ogt x86_fp80 %10, 0xK00000000000000000000
  br i1 %11, label %12, label %56

; <label>:12                                      ; preds = %9
  %13 = lshr i80 %1, 79
  %14 = trunc i80 %13 to i64
  %15 = getelementptr inbounds [2 x float]* @zero878, i64 0, i64 %14
  %16 = load float* %15, align 4, !tbaa !2
  %17 = fpext float %16 to x86_fp80
  %18 = bitcast x86_fp80 %17 to i80
  br label %56

; <label>:19                                      ; preds = %7
  %20 = add nsw i32 %4, -16382
  %21 = zext i32 %20 to i64
  %22 = lshr i64 4294967295, %21
  %23 = lshr i80 %1, 32
  %24 = trunc i80 %23 to i64
  %25 = and i64 %24, 4294967295
  %26 = and i64 %22, %25
  %27 = trunc i80 %1 to i64
  %28 = and i64 %27, 4294967295
  %29 = or i64 %26, %28
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %58, label %31

; <label>:31                                      ; preds = %19
  %32 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %33 = fcmp ogt x86_fp80 %32, 0xK00000000000000000000
  br i1 %33, label %34, label %56

; <label>:34                                      ; preds = %31
  %35 = xor i64 %22, -1
  %36 = and i64 %25, %35
  %37 = zext i64 %36 to i80
  %38 = shl nuw nsw i80 %37, 32
  %mask5 = and i80 %1, -18446744073709551616
  %mask3 = or i80 %38, %mask5
  br label %56

; <label>:39                                      ; preds = %0
  %40 = icmp slt i32 %5, 63
  br i1 %40, label %41, label %56

; <label>:41                                      ; preds = %39
  %42 = add nsw i32 %4, -16382
  %43 = zext i32 %42 to i64
  %44 = lshr i64 -1, %43
  %45 = trunc i80 %1 to i64
  %46 = and i64 %45, 4294967295
  %47 = and i64 %44, %46
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %58, label %49

; <label>:49                                      ; preds = %41
  %50 = fadd x86_fp80 %x, 0xK43E3BF21E44003ACE000
  %51 = fcmp ogt x86_fp80 %50, 0xK00000000000000000000
  br i1 %51, label %52, label %56

; <label>:52                                      ; preds = %49
  %53 = xor i64 %44, 4294967295
  %54 = and i64 %53, %46
  %55 = zext i64 %54 to i80
  %mask = and i80 %1, -4294967296
  %ins = or i80 %55, %mask
  br label %56

; <label>:56                                      ; preds = %52, %49, %39, %34, %31, %12, %9
  %u.0.off0 = phi i80 [ %18, %12 ], [ %1, %9 ], [ %mask3, %34 ], [ %1, %31 ], [ %ins, %52 ], [ %1, %49 ], [ %1, %39 ]
  %57 = bitcast i80 %u.0.off0 to x86_fp80
  br label %58

; <label>:58                                      ; preds = %56, %41, %19
  %.0 = phi x86_fp80 [ %57, %56 ], [ %x, %19 ], [ %x, %41 ]
  ret x86_fp80 %.0
}

define double @trunc(double %x) nounwind uwtable readnone optsize {
  %1 = bitcast double %x to i64
  %2 = lshr i64 %1, 32
  %3 = trunc i64 %2 to i32
  %4 = trunc i64 %1 to i32
  %5 = lshr i64 %1, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = add nsw i32 %7, -1023
  %9 = icmp slt i32 %8, 20
  br i1 %9, label %10, label %28

; <label>:10                                      ; preds = %0
  %11 = icmp slt i32 %8, 0
  br i1 %11, label %12, label %17

; <label>:12                                      ; preds = %10
  %13 = fadd double %x, 1.000000e+300
  %14 = fcmp ogt double %13, 0.000000e+00
  br i1 %14, label %15, label %45

; <label>:15                                      ; preds = %12
  %16 = and i32 %3, -2147483648
  br label %45

; <label>:17                                      ; preds = %10
  %18 = lshr i32 1048575, %8
  %19 = and i32 %18, %3
  %20 = or i32 %19, %4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %51, label %22

; <label>:22                                      ; preds = %17
  %23 = fadd double %x, 1.000000e+300
  %24 = fcmp ogt double %23, 0.000000e+00
  br i1 %24, label %25, label %45

; <label>:25                                      ; preds = %22
  %26 = xor i32 %18, -1
  %27 = and i32 %3, %26
  br label %45

; <label>:28                                      ; preds = %0
  %29 = icmp sgt i32 %8, 51
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %28
  %31 = icmp eq i32 %8, 1024
  br i1 %31, label %32, label %51

; <label>:32                                      ; preds = %30
  %33 = fadd double %x, %x
  br label %51

; <label>:34                                      ; preds = %28
  %35 = add nsw i32 %7, -1043
  %36 = lshr i32 -1, %35
  %37 = and i32 %36, %4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %51, label %39

; <label>:39                                      ; preds = %34
  %40 = fadd double %x, 1.000000e+300
  %41 = fcmp ogt double %40, 0.000000e+00
  br i1 %41, label %42, label %45

; <label>:42                                      ; preds = %39
  %43 = xor i32 %36, -1
  %44 = and i32 %4, %43
  br label %45

; <label>:45                                      ; preds = %42, %39, %25, %22, %15, %12
  %i1.0 = phi i32 [ 0, %15 ], [ %4, %12 ], [ 0, %25 ], [ %4, %22 ], [ %44, %42 ], [ %4, %39 ]
  %i0.0 = phi i32 [ %16, %15 ], [ %3, %12 ], [ %27, %25 ], [ %3, %22 ], [ %3, %42 ], [ %3, %39 ]
  %46 = zext i32 %i0.0 to i64
  %47 = shl nuw i64 %46, 32
  %48 = zext i32 %i1.0 to i64
  %49 = or i64 %47, %48
  %50 = bitcast i64 %49 to double
  br label %51

; <label>:51                                      ; preds = %45, %34, %32, %30, %17
  %.0 = phi double [ %50, %45 ], [ %33, %32 ], [ %x, %17 ], [ %x, %30 ], [ %x, %34 ]
  ret double %.0
}

define i8* @tdelete(i8* noalias %key, i8** noalias nocapture %rootp, i32 (i8*, i8*)* %compar) nounwind uwtable optsize {
  %1 = bitcast i8** %rootp to %struct.node.698**
  %2 = load i8** %rootp, align 8, !tbaa !7
  %3 = bitcast i8* %2 to %struct.node.698*
  %4 = tail call fastcc %struct.node.698* @remove879(%struct.node.698** %1, i8* %key, i32 (i8*, i8*)* %compar, %struct.node.698* %3) optsize
  %5 = bitcast %struct.node.698* %4 to i8*
  ret i8* %5
}

define internal fastcc %struct.node.698* @remove879(%struct.node.698** nocapture %n, i8* %k, i32 (i8*, i8*)* %cmp, %struct.node.698* %parent) nounwind uwtable optsize {
  %1 = load %struct.node.698** %n, align 8, !tbaa !7
  %2 = icmp eq %struct.node.698* %1, null
  br i1 %2, label %30, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.node.698* %1, i64 0, i32 0
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = tail call i32 %cmp(i8* %k, i8* %5) nounwind optsize
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %3
  %9 = load %struct.node.698** %n, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.node.698* %9, i64 0, i32 1
  %11 = load %struct.node.698** %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.node.698* %9, i64 0, i32 2
  %13 = load %struct.node.698** %12, align 8, !tbaa !7
  %14 = tail call fastcc %struct.node.698* @movr(%struct.node.698* %11, %struct.node.698* %13) optsize
  store %struct.node.698* %14, %struct.node.698** %n, align 8, !tbaa !7
  %15 = bitcast %struct.node.698* %9 to i8*
  tail call void @free(i8* %15) optsize
  br label %30

; <label>:16                                      ; preds = %3
  %17 = icmp slt i32 %6, 0
  %18 = load %struct.node.698** %n, align 8, !tbaa !7
  br i1 %17, label %19, label %22

; <label>:19                                      ; preds = %16
  %20 = getelementptr inbounds %struct.node.698* %18, i64 0, i32 1
  %21 = tail call fastcc %struct.node.698* @remove879(%struct.node.698** %20, i8* %k, i32 (i8*, i8*)* %cmp, %struct.node.698* %18) optsize
  br label %25

; <label>:22                                      ; preds = %16
  %23 = getelementptr inbounds %struct.node.698* %18, i64 0, i32 2
  %24 = tail call fastcc %struct.node.698* @remove879(%struct.node.698** %23, i8* %k, i32 (i8*, i8*)* %cmp, %struct.node.698* %18) optsize
  br label %25

; <label>:25                                      ; preds = %22, %19
  %.01 = phi %struct.node.698* [ %21, %19 ], [ %24, %22 ]
  %26 = icmp eq %struct.node.698* %.01, null
  br i1 %26, label %30, label %27

; <label>:27                                      ; preds = %25
  %28 = load %struct.node.698** %n, align 8, !tbaa !7
  %29 = tail call fastcc %struct.node.698* @balance(%struct.node.698* %28) optsize
  store %struct.node.698* %29, %struct.node.698** %n, align 8, !tbaa !7
  br label %30

; <label>:30                                      ; preds = %27, %25, %8, %0
  %.0 = phi %struct.node.698* [ %parent, %8 ], [ null, %0 ], [ null, %25 ], [ %.01, %27 ]
  ret %struct.node.698* %.0
}

define i8* @tfind(i8* %key, i8** nocapture %rootp, i32 (i8*, i8*)* nocapture %compar) nounwind uwtable optsize {
  %1 = load i8** %rootp, align 8, !tbaa !7
  %2 = bitcast i8* %1 to %struct.node.698*
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %tailrecurse.backedge.i, %0
  %n.tr.i = phi %struct.node.698* [ %2, %0 ], [ %n.tr.be.i, %tailrecurse.backedge.i ]
  %3 = icmp eq %struct.node.698* %n.tr.i, null
  br i1 %3, label %find.exit, label %4

; <label>:4                                       ; preds = %tailrecurse.i
  %5 = getelementptr inbounds %struct.node.698* %n.tr.i, i64 0, i32 0
  %6 = load i8** %5, align 8, !tbaa !7
  %7 = tail call i32 %compar(i8* %key, i8* %6) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %find.exit, label %tailrecurse.backedge.i

tailrecurse.backedge.i:                           ; preds = %4
  %9 = icmp slt i32 %7, 0
  %10 = getelementptr inbounds %struct.node.698* %n.tr.i, i64 0, i32 1
  %11 = getelementptr inbounds %struct.node.698* %n.tr.i, i64 0, i32 2
  %n.tr.be.in.i = select i1 %9, %struct.node.698** %10, %struct.node.698** %11
  %n.tr.be.i = load %struct.node.698** %n.tr.be.in.i, align 8
  br label %tailrecurse.i

find.exit:                                        ; preds = %4, %tailrecurse.i
  %.0.i = phi %struct.node.698* [ null, %tailrecurse.i ], [ %n.tr.i, %4 ]
  %12 = bitcast %struct.node.698* %.0.i to i8*
  ret i8* %12
}

define i8* @tsearch(i8* %key, i8** nocapture %rootp, i32 (i8*, i8*)* %compar) nounwind uwtable optsize {
  %new = alloca i32, align 4
  store i32 0, i32* %new, align 4, !tbaa !6
  %1 = bitcast i8** %rootp to %struct.node.698**
  %2 = call fastcc %struct.node.698* @insert(%struct.node.698** %1, i8* %key, i32 (i8*, i8*)* %compar, i32* %new) optsize
  %3 = bitcast %struct.node.698* %2 to i8*
  ret i8* %3
}

define internal fastcc %struct.node.698* @insert(%struct.node.698** nocapture %n, i8* %k, i32 (i8*, i8*)* %cmp, i32* %new) nounwind uwtable optsize {
  %1 = load %struct.node.698** %n, align 8, !tbaa !7
  %2 = icmp eq %struct.node.698* %1, null
  br i1 %2, label %3, label %16

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @malloc(i64 32) optsize
  %5 = bitcast i8* %4 to %struct.node.698*
  store %struct.node.698* %5, %struct.node.698** %n, align 8, !tbaa !7
  %6 = icmp eq i8* %4, null
  br i1 %6, label %15, label %7

; <label>:7                                       ; preds = %3
  %8 = bitcast i8* %4 to i8**
  store i8* %k, i8** %8, align 8, !tbaa !7
  %9 = getelementptr inbounds i8* %4, i64 16
  %10 = bitcast i8* %9 to %struct.node.698**
  store %struct.node.698* null, %struct.node.698** %10, align 8, !tbaa !7
  %11 = getelementptr inbounds i8* %4, i64 8
  %12 = bitcast i8* %11 to %struct.node.698**
  store %struct.node.698* null, %struct.node.698** %12, align 8, !tbaa !7
  %13 = getelementptr inbounds i8* %4, i64 24
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 4, !tbaa !6
  br label %15

; <label>:15                                      ; preds = %7, %3
  store i32 1, i32* %new, align 4, !tbaa !6
  br label %35

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds %struct.node.698* %1, i64 0, i32 0
  %18 = load i8** %17, align 8, !tbaa !7
  %19 = tail call i32 %cmp(i8* %k, i8* %18) nounwind optsize
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %35, label %21

; <label>:21                                      ; preds = %16
  %22 = icmp slt i32 %19, 0
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %21
  %24 = getelementptr inbounds %struct.node.698* %1, i64 0, i32 1
  %25 = tail call fastcc %struct.node.698* @insert(%struct.node.698** %24, i8* %k, i32 (i8*, i8*)* %cmp, i32* %new) optsize
  br label %29

; <label>:26                                      ; preds = %21
  %27 = getelementptr inbounds %struct.node.698* %1, i64 0, i32 2
  %28 = tail call fastcc %struct.node.698* @insert(%struct.node.698** %27, i8* %k, i32 (i8*, i8*)* %cmp, i32* %new) optsize
  br label %29

; <label>:29                                      ; preds = %26, %23
  %r.0 = phi %struct.node.698* [ %25, %23 ], [ %28, %26 ]
  %30 = load i32* %new, align 4, !tbaa !6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

; <label>:32                                      ; preds = %29
  %33 = load %struct.node.698** %n, align 8, !tbaa !7
  %34 = tail call fastcc %struct.node.698* @balance(%struct.node.698* %33) optsize
  store %struct.node.698* %34, %struct.node.698** %n, align 8, !tbaa !7
  br label %35

; <label>:35                                      ; preds = %32, %29, %16, %15
  %.0 = phi %struct.node.698* [ %5, %15 ], [ %1, %16 ], [ %r.0, %29 ], [ %r.0, %32 ]
  ret %struct.node.698* %.0
}

define void @twalk(i8* %root, void (i8*, i32, i32)* %action) nounwind uwtable optsize {
  %1 = bitcast i8* %root to %struct.node.698*
  tail call fastcc void @walk(%struct.node.698* %1, void (i8*, i32, i32)* %action, i32 0) optsize
  ret void
}

define internal fastcc void @walk(%struct.node.698* %r, void (i8*, i32, i32)* %action, i32 %d) nounwind uwtable optsize {
  %1 = icmp eq %struct.node.698* %r, null
  br i1 %1, label %16, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.node.698* %r, i64 0, i32 1
  %4 = load %struct.node.698** %3, align 8, !tbaa !7
  %5 = icmp eq %struct.node.698* %4, null
  %6 = getelementptr inbounds %struct.node.698* %r, i64 0, i32 2
  br i1 %5, label %7, label %._crit_edge

; <label>:7                                       ; preds = %2
  %8 = load %struct.node.698** %6, align 8, !tbaa !7
  %9 = icmp eq %struct.node.698* %8, null
  br i1 %9, label %10, label %._crit_edge

; <label>:10                                      ; preds = %7
  %11 = bitcast %struct.node.698* %r to i8*
  tail call void %action(i8* %11, i32 3, i32 %d) nounwind optsize
  br label %16

._crit_edge:                                      ; preds = %7, %2
  %12 = bitcast %struct.node.698* %r to i8*
  tail call void %action(i8* %12, i32 0, i32 %d) nounwind optsize
  %13 = load %struct.node.698** %3, align 8, !tbaa !7
  %14 = add nsw i32 %d, 1
  tail call fastcc void @walk(%struct.node.698* %13, void (i8*, i32, i32)* %action, i32 %14) optsize
  tail call void %action(i8* %12, i32 1, i32 %d) nounwind optsize
  %15 = load %struct.node.698** %6, align 8, !tbaa !7
  tail call fastcc void @walk(%struct.node.698* %15, void (i8*, i32, i32)* %action, i32 %14) optsize
  tail call void %action(i8* %12, i32 2, i32 %d) nounwind optsize
  ret void

; <label>:16                                      ; preds = %10, %0
  ret void
}

define internal fastcc %struct.node.698* @balance(%struct.node.698* %n) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.node.698* %n, i64 0, i32 1
  %2 = load %struct.node.698** %1, align 8, !tbaa !7
  %3 = icmp eq %struct.node.698* %2, null
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.node.698* %2, i64 0, i32 3
  %6 = load i32* %5, align 4, !tbaa !6
  br label %7

; <label>:7                                       ; preds = %4, %0
  %8 = phi i32 [ %6, %4 ], [ 0, %0 ]
  %9 = getelementptr inbounds %struct.node.698* %n, i64 0, i32 2
  %10 = load %struct.node.698** %9, align 8, !tbaa !7
  %11 = icmp eq %struct.node.698* %10, null
  br i1 %11, label %delta.exit, label %12

; <label>:12                                      ; preds = %7
  %13 = getelementptr inbounds %struct.node.698* %10, i64 0, i32 3
  %14 = load i32* %13, align 4, !tbaa !6
  br label %delta.exit

delta.exit:                                       ; preds = %12, %7
  %15 = phi i32 [ %14, %12 ], [ 0, %7 ]
  %16 = sub nsw i32 %8, %15
  %17 = icmp slt i32 %16, -1
  br i1 %17, label %18, label %43

; <label>:18                                      ; preds = %delta.exit
  %19 = getelementptr inbounds %struct.node.698* %10, i64 0, i32 1
  %20 = load %struct.node.698** %19, align 8, !tbaa !7
  %21 = icmp eq %struct.node.698* %20, null
  br i1 %21, label %25, label %22

; <label>:22                                      ; preds = %18
  %23 = getelementptr inbounds %struct.node.698* %20, i64 0, i32 3
  %24 = load i32* %23, align 4, !tbaa !6
  br label %25

; <label>:25                                      ; preds = %22, %18
  %26 = phi i32 [ %24, %22 ], [ 0, %18 ]
  %27 = getelementptr inbounds %struct.node.698* %10, i64 0, i32 2
  %28 = load %struct.node.698** %27, align 8, !tbaa !7
  %29 = icmp eq %struct.node.698* %28, null
  br i1 %29, label %delta.exit1, label %30

; <label>:30                                      ; preds = %25
  %31 = getelementptr inbounds %struct.node.698* %28, i64 0, i32 3
  %32 = load i32* %31, align 4, !tbaa !6
  br label %delta.exit1

delta.exit1:                                      ; preds = %30, %25
  %33 = phi i32 [ %32, %30 ], [ 0, %25 ]
  %34 = sub nsw i32 %26, %33
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %39

; <label>:36                                      ; preds = %delta.exit1
  %37 = getelementptr inbounds %struct.node.698* %20, i64 0, i32 2
  %38 = load %struct.node.698** %37, align 8, !tbaa !7
  store %struct.node.698* %38, %struct.node.698** %19, align 8, !tbaa !7
  store %struct.node.698* %10, %struct.node.698** %37, align 8, !tbaa !7
  tail call fastcc void @updateheight(%struct.node.698* %10) nounwind optsize
  tail call fastcc void @updateheight(%struct.node.698* %20) nounwind optsize
  store %struct.node.698* %20, %struct.node.698** %9, align 8, !tbaa !7
  %.phi.trans.insert = getelementptr inbounds %struct.node.698* %20, i64 0, i32 1
  %.pre = load %struct.node.698** %.phi.trans.insert, align 8, !tbaa !7
  br label %39

; <label>:39                                      ; preds = %36, %delta.exit1
  %40 = phi %struct.node.698* [ %.pre, %36 ], [ %20, %delta.exit1 ]
  %41 = phi %struct.node.698* [ %20, %36 ], [ %10, %delta.exit1 ]
  %42 = getelementptr inbounds %struct.node.698* %41, i64 0, i32 1
  store %struct.node.698* %40, %struct.node.698** %9, align 8, !tbaa !7
  store %struct.node.698* %n, %struct.node.698** %42, align 8, !tbaa !7
  tail call fastcc void @updateheight(%struct.node.698* %n) nounwind optsize
  tail call fastcc void @updateheight(%struct.node.698* %41) nounwind optsize
  br label %71

; <label>:43                                      ; preds = %delta.exit
  %44 = icmp sgt i32 %16, 1
  br i1 %44, label %45, label %70

; <label>:45                                      ; preds = %43
  %46 = getelementptr inbounds %struct.node.698* %2, i64 0, i32 1
  %47 = load %struct.node.698** %46, align 8, !tbaa !7
  %48 = icmp eq %struct.node.698* %47, null
  br i1 %48, label %52, label %49

; <label>:49                                      ; preds = %45
  %50 = getelementptr inbounds %struct.node.698* %47, i64 0, i32 3
  %51 = load i32* %50, align 4, !tbaa !6
  br label %52

; <label>:52                                      ; preds = %49, %45
  %53 = phi i32 [ %51, %49 ], [ 0, %45 ]
  %54 = getelementptr inbounds %struct.node.698* %2, i64 0, i32 2
  %55 = load %struct.node.698** %54, align 8, !tbaa !7
  %56 = icmp eq %struct.node.698* %55, null
  br i1 %56, label %delta.exit2, label %57

; <label>:57                                      ; preds = %52
  %58 = getelementptr inbounds %struct.node.698* %55, i64 0, i32 3
  %59 = load i32* %58, align 4, !tbaa !6
  br label %delta.exit2

delta.exit2:                                      ; preds = %57, %52
  %60 = phi i32 [ %59, %57 ], [ 0, %52 ]
  %61 = sub nsw i32 %53, %60
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %66

; <label>:63                                      ; preds = %delta.exit2
  %64 = getelementptr inbounds %struct.node.698* %55, i64 0, i32 1
  %65 = load %struct.node.698** %64, align 8, !tbaa !7
  store %struct.node.698* %65, %struct.node.698** %54, align 8, !tbaa !7
  store %struct.node.698* %2, %struct.node.698** %64, align 8, !tbaa !7
  tail call fastcc void @updateheight(%struct.node.698* %2) nounwind optsize
  tail call fastcc void @updateheight(%struct.node.698* %55) nounwind optsize
  store %struct.node.698* %55, %struct.node.698** %1, align 8, !tbaa !7
  %.phi.trans.insert3 = getelementptr inbounds %struct.node.698* %55, i64 0, i32 2
  %.pre4 = load %struct.node.698** %.phi.trans.insert3, align 8, !tbaa !7
  br label %66

; <label>:66                                      ; preds = %63, %delta.exit2
  %67 = phi %struct.node.698* [ %.pre4, %63 ], [ %55, %delta.exit2 ]
  %68 = phi %struct.node.698* [ %55, %63 ], [ %2, %delta.exit2 ]
  %69 = getelementptr inbounds %struct.node.698* %68, i64 0, i32 2
  store %struct.node.698* %67, %struct.node.698** %1, align 8, !tbaa !7
  store %struct.node.698* %n, %struct.node.698** %69, align 8, !tbaa !7
  tail call fastcc void @updateheight(%struct.node.698* %n) nounwind optsize
  tail call fastcc void @updateheight(%struct.node.698* %68) nounwind optsize
  br label %71

; <label>:70                                      ; preds = %43
  tail call fastcc void @updateheight(%struct.node.698* %n) optsize
  br label %71

; <label>:71                                      ; preds = %70, %66, %39
  %.0 = phi %struct.node.698* [ %41, %39 ], [ %68, %66 ], [ %n, %70 ]
  ret %struct.node.698* %.0
}

define internal fastcc void @updateheight(%struct.node.698* nocapture %n) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.node.698* %n, i64 0, i32 3
  store i32 0, i32* %1, align 4, !tbaa !6
  %2 = getelementptr inbounds %struct.node.698* %n, i64 0, i32 1
  %3 = load %struct.node.698** %2, align 8, !tbaa !7
  %4 = icmp eq %struct.node.698* %3, null
  br i1 %4, label %10, label %5

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.node.698* %3, i64 0, i32 3
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %5
  store i32 %7, i32* %1, align 4, !tbaa !6
  br label %10

; <label>:10                                      ; preds = %9, %5, %0
  %11 = phi i32 [ 0, %0 ], [ %7, %9 ], [ 0, %5 ]
  %12 = getelementptr inbounds %struct.node.698* %n, i64 0, i32 2
  %13 = load %struct.node.698** %12, align 8, !tbaa !7
  %14 = icmp eq %struct.node.698* %13, null
  br i1 %14, label %20, label %15

; <label>:15                                      ; preds = %10
  %16 = getelementptr inbounds %struct.node.698* %13, i64 0, i32 3
  %17 = load i32* %16, align 4, !tbaa !6
  %18 = icmp sgt i32 %17, %11
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %15
  store i32 %17, i32* %1, align 4, !tbaa !6
  br label %20

; <label>:20                                      ; preds = %19, %15, %10
  %21 = phi i32 [ %11, %10 ], [ %17, %19 ], [ %11, %15 ]
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %1, align 4, !tbaa !6
  ret void
}

define internal fastcc %struct.node.698* @movr(%struct.node.698* %n, %struct.node.698* %r) nounwind uwtable optsize {
  %1 = icmp eq %struct.node.698* %n, null
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.node.698* %n, i64 0, i32 2
  %4 = load %struct.node.698** %3, align 8, !tbaa !7
  %5 = tail call fastcc %struct.node.698* @movr(%struct.node.698* %4, %struct.node.698* %r) optsize
  store %struct.node.698* %5, %struct.node.698** %3, align 8, !tbaa !7
  %6 = tail call fastcc %struct.node.698* @balance(%struct.node.698* %n) optsize
  ret %struct.node.698* %6

; <label>:7                                       ; preds = %0
  ret %struct.node.698* %r
}

define i8* @ttyname(i32 %fd) nounwind uwtable optsize {
  %1 = tail call i32 @ttyname_r(i32 %fd, i8* getelementptr inbounds ([20 x i8]* @ttyname.buf, i64 0, i64 0), i64 20) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 %1, i32* %4, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %3, %0
  %.0 = phi i8* [ null, %3 ], [ getelementptr inbounds ([20 x i8]* @ttyname.buf, i64 0, i64 0), %0 ]
  ret i8* %.0
}

define i32 @ttyname_r(i32 %fd, i8* %name, i64 %size) nounwind uwtable optsize {
  %procname = alloca [29 x i8], align 16
  %1 = call i32 @isatty(i32 %fd) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %13, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds [29 x i8]* %procname, i64 0, i64 0
  %5 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %4, i64 29, i8* getelementptr inbounds ([17 x i8]* @.str880, i64 0, i64 0), i32 %fd) nounwind optsize
  %6 = call i64 @readlink(i8* %4, i8* %name, i64 %size) nounwind optsize
  %7 = icmp slt i64 %6, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %3
  %9 = call i32* @__errno_location() nounwind readnone optsize
  %10 = load i32* %9, align 4, !tbaa !6
  br label %13

; <label>:11                                      ; preds = %3
  %12 = icmp eq i64 %6, %size
  %. = select i1 %12, i32 34, i32 0
  br label %13

; <label>:13                                      ; preds = %11, %8, %0
  %.0 = phi i32 [ %10, %8 ], [ 25, %0 ], [ %., %11 ]
  ret i32 %.0
}

define void @tzset() nounwind uwtable optsize {
  %z = alloca i8*, align 8
  %1 = call i8* @strcpy(i8* getelementptr inbounds ([7 x i8]* @std_name, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str889, i64 0, i64 0)) nounwind optsize
  %2 = call i8* @strcpy(i8* getelementptr inbounds ([7 x i8]* @dst_name, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str889, i64 0, i64 0)) nounwind optsize
  store i8* getelementptr inbounds ([7 x i8]* @std_name, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*]* @__tzname, i64 0, i64 0), align 16, !tbaa !7
  store i8* getelementptr inbounds ([7 x i8]* @dst_name, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*]* @__tzname, i64 0, i64 1), align 8, !tbaa !7
  store i64 0, i64* @__timezone, align 8, !tbaa !5
  store i32 0, i32* @__daylight, align 4, !tbaa !6
  %3 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8]* @.str1890, i64 0, i64 0)) nounwind optsize
  store i8* %3, i8** %z, align 8, !tbaa !7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %34, label %5

; <label>:5                                       ; preds = %0
  %6 = load i8* %3, align 1, !tbaa !0
  %7 = sext i8 %6 to i32
  %8 = or i32 %7, 32
  %9 = add i32 %8, -97
  %10 = icmp ult i32 %9, 26
  br i1 %10, label %11, label %34

; <label>:11                                      ; preds = %5
  call fastcc void @zname(i8* getelementptr inbounds ([7 x i8]* @std_name, i64 0, i64 0), i8** %z) optsize
  %12 = call fastcc i32 @hhmmss(i8** %z) optsize
  %13 = sext i32 %12 to i64
  store i64 %13, i64* @__timezone, align 8, !tbaa !5
  call fastcc void @zname(i8* getelementptr inbounds ([7 x i8]* @dst_name, i64 0, i64 0), i8** %z) optsize
  %14 = load i8* getelementptr inbounds ([7 x i8]* @dst_name, i64 0, i64 0), align 1, !tbaa !0
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %17, label %16

; <label>:16                                      ; preds = %11
  store i32 1, i32* @__daylight, align 4, !tbaa !6
  br label %17

; <label>:17                                      ; preds = %16, %11
  %18 = load i8** %z, align 8, !tbaa !7
  %19 = call fastcc i32 @hhmmss(i8** %z) optsize
  %20 = zext i32 %19 to i64
  %21 = load i64* @__timezone, align 8, !tbaa !5
  %22 = sub nsw i64 %20, %21
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* @__dst_offset, align 4, !tbaa !6
  %24 = load i8** %z, align 8, !tbaa !7
  %25 = icmp eq i8* %24, %18
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %17
  store i32 -3600, i32* @__dst_offset, align 4, !tbaa !6
  br label %27

; <label>:27                                      ; preds = %26, %17
  %28 = call fastcc i32 @dstrule(%struct.rule* @__dst_start, i8** %z) optsize
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %33

; <label>:30                                      ; preds = %27
  %31 = call fastcc i32 @dstrule(%struct.rule* @__dst_end, i8** %z) optsize
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

; <label>:33                                      ; preds = %30, %27
  store i32 0, i32* @__daylight, align 4, !tbaa !6
  br label %34

; <label>:34                                      ; preds = %33, %30, %5, %0
  ret void
}

define internal fastcc void @zname(i8* nocapture %d, i8** nocapture %s) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %indvars.iv = phi i64 [ %indvars.iv.next, %12 ], [ 0, %0 ]
  %i.0 = phi i32 [ %13, %12 ], [ 0, %0 ]
  %2 = trunc i64 %indvars.iv to i32
  %3 = icmp slt i32 %2, 6
  br i1 %3, label %4, label %.critedge

; <label>:4                                       ; preds = %1
  %5 = load i8** %s, align 8, !tbaa !7
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = getelementptr inbounds i8* %d, i64 %indvars.iv
  store i8 %6, i8* %7, align 1, !tbaa !0
  %8 = sext i8 %6 to i32
  %9 = or i32 %8, 32
  %10 = add i32 %9, -97
  %11 = icmp ult i32 %10, 26
  br i1 %11, label %12, label %.critedge

; <label>:12                                      ; preds = %4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %13 = add nsw i32 %i.0, 1
  %14 = load i8** %s, align 8, !tbaa !7
  %15 = getelementptr inbounds i8* %14, i64 1
  store i8* %15, i8** %s, align 8, !tbaa !7
  br label %1

.critedge:                                        ; preds = %4, %1
  %16 = sext i32 %i.0 to i64
  %17 = getelementptr inbounds i8* %d, i64 %16
  store i8 0, i8* %17, align 1, !tbaa !0
  ret void
}

define internal fastcc i32 @hhmmss(i8** %s) nounwind uwtable optsize {
  %1 = load i8** %s, align 8, !tbaa !7
  %2 = tail call i64 @strtol(i8* %1, i8** %s, i32 10) nounwind optsize
  %3 = mul nsw i64 %2, 3600
  %4 = trunc i64 %3 to i32
  %5 = icmp sgt i32 %4, -1
  %6 = load i8** %s, align 8, !tbaa !7
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = icmp eq i8 %7, 58
  br i1 %5, label %9, label %23

; <label>:9                                       ; preds = %0
  br i1 %8, label %10, label %.thread

; <label>:10                                      ; preds = %9
  %11 = getelementptr inbounds i8* %6, i64 1
  %12 = tail call i64 @strtol(i8* %11, i8** %s, i32 10) nounwind optsize
  %13 = mul nsw i64 %12, 60
  %14 = and i64 %3, 4294967280
  %15 = add nsw i64 %13, %14
  %16 = trunc i64 %15 to i32
  %.pre = load i8** %s, align 8, !tbaa !7
  %.pre1 = load i8* %.pre, align 1, !tbaa !0
  %17 = icmp eq i8 %.pre1, 58
  br i1 %17, label %18, label %.thread

; <label>:18                                      ; preds = %10
  %19 = getelementptr inbounds i8* %.pre, i64 1
  %20 = tail call i64 @strtol(i8* %19, i8** %s, i32 10) nounwind optsize
  %21 = add nsw i64 %20, %15
  %22 = trunc i64 %21 to i32
  br label %.thread

; <label>:23                                      ; preds = %0
  br i1 %8, label %24, label %.thread

; <label>:24                                      ; preds = %23
  %25 = getelementptr inbounds i8* %6, i64 1
  %26 = tail call i64 @strtol(i8* %25, i8** %s, i32 10) nounwind optsize
  %27 = and i64 %3, 4294967280
  %28 = mul i64 %26, -60
  %29 = add i64 %28, %27
  %30 = trunc i64 %29 to i32
  %.pre2 = load i8** %s, align 8, !tbaa !7
  %.pre3 = load i8* %.pre2, align 1, !tbaa !0
  %31 = icmp eq i8 %.pre3, 58
  br i1 %31, label %32, label %.thread

; <label>:32                                      ; preds = %24
  %33 = getelementptr inbounds i8* %.pre2, i64 1
  %34 = tail call i64 @strtol(i8* %33, i8** %s, i32 10) nounwind optsize
  %35 = sub nsw i64 %29, %34
  %36 = trunc i64 %35 to i32
  br label %.thread

.thread:                                          ; preds = %32, %24, %23, %18, %10, %9
  %ofs.2 = phi i32 [ %22, %18 ], [ %16, %10 ], [ %36, %32 ], [ %30, %24 ], [ %4, %9 ], [ %4, %23 ]
  ret i32 %ofs.2
}

define internal fastcc i32 @dstrule(%struct.rule* nocapture %rule, i8** %s) nounwind uwtable optsize {
  %1 = load i8** %s, align 8, !tbaa !7
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 44
  br i1 %3, label %4, label %61

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8* %1, i64 1
  store i8* %5, i8** %s, align 8, !tbaa !7
  %6 = load i8* %5, align 1, !tbaa !0
  %7 = sext i8 %6 to i32
  switch i32 %7, label %44 [
    i32 74, label %8
    i32 77, label %16
  ]

; <label>:8                                       ; preds = %4
  %9 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 0
  store i8 74, i8* %9, align 1, !tbaa !0
  %10 = load i8** %s, align 8, !tbaa !7
  %11 = getelementptr inbounds i8* %10, i64 1
  %12 = tail call i64 @strtol(i8* %11, i8** %s, i32 10) nounwind optsize
  %13 = add nsw i64 %12, 65535
  %14 = trunc i64 %13 to i16
  %15 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 2
  store i16 %14, i16* %15, align 2, !tbaa !8
  br label %51

; <label>:16                                      ; preds = %4
  %17 = getelementptr inbounds i8* %1, i64 2
  %18 = tail call i64 @strtol(i8* %17, i8** %s, i32 10) nounwind optsize
  %19 = add nsw i64 %18, 255
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 0
  store i8 %20, i8* %21, align 1, !tbaa !0
  %22 = load i8** %s, align 8, !tbaa !7
  %23 = load i8* %22, align 1, !tbaa !0
  %24 = icmp ne i8 %23, 46
  %25 = icmp slt i8 %20, 0
  %or.cond = or i1 %24, %25
  %26 = icmp sgt i8 %20, 11
  %or.cond1 = or i1 %or.cond, %26
  br i1 %or.cond1, label %61, label %27

; <label>:27                                      ; preds = %16
  %28 = getelementptr inbounds i8* %22, i64 1
  %29 = tail call i64 @strtol(i8* %28, i8** %s, i32 10) nounwind optsize
  %30 = add nsw i64 %29, 255
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 1
  store i8 %31, i8* %32, align 1, !tbaa !0
  %33 = load i8** %s, align 8, !tbaa !7
  %34 = load i8* %33, align 1, !tbaa !0
  %35 = icmp ne i8 %34, 46
  %36 = icmp slt i8 %31, 0
  %or.cond2 = or i1 %35, %36
  %37 = icmp sgt i8 %31, 4
  %or.cond3 = or i1 %or.cond2, %37
  br i1 %or.cond3, label %61, label %38

; <label>:38                                      ; preds = %27
  %39 = getelementptr inbounds i8* %33, i64 1
  %40 = tail call i64 @strtol(i8* %39, i8** %s, i32 10) nounwind optsize
  %41 = trunc i64 %40 to i16
  %42 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 2
  store i16 %41, i16* %42, align 2, !tbaa !8
  %43 = icmp ugt i16 %41, 6
  br i1 %43, label %61, label %51

; <label>:44                                      ; preds = %4
  %45 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 0
  store i8 76, i8* %45, align 1, !tbaa !0
  %46 = load i8** %s, align 8, !tbaa !7
  %47 = getelementptr inbounds i8* %46, i64 1
  %48 = tail call i64 @strtol(i8* %47, i8** %s, i32 10) nounwind optsize
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 2
  store i16 %49, i16* %50, align 2, !tbaa !8
  br label %51

; <label>:51                                      ; preds = %44, %38, %8
  %52 = load i8** %s, align 8, !tbaa !7
  %53 = load i8* %52, align 1, !tbaa !0
  %54 = icmp eq i8 %53, 47
  br i1 %54, label %55, label %59

; <label>:55                                      ; preds = %51
  %56 = getelementptr inbounds i8* %52, i64 1
  store i8* %56, i8** %s, align 8, !tbaa !7
  %57 = tail call fastcc i32 @hhmmss(i8** %s) optsize
  %58 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 3
  store i32 %57, i32* %58, align 4, !tbaa !6
  br label %61

; <label>:59                                      ; preds = %51
  %60 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 3
  store i32 7200, i32* %60, align 4, !tbaa !6
  br label %61

; <label>:61                                      ; preds = %59, %55, %38, %27, %16, %0
  %.0 = phi i32 [ -1, %0 ], [ -1, %16 ], [ -1, %27 ], [ -1, %38 ], [ 0, %59 ], [ 0, %55 ]
  ret i32 %.0
}

define void @__tzset() nounwind uwtable optsize {
  %.b = load i1* @__tzset.init.b, align 1
  br i1 %.b, label %2, label %1

; <label>:1                                       ; preds = %0
  tail call void @tzset() optsize
  store i1 true, i1* @__tzset.init.b, align 1
  br label %2

; <label>:2                                       ; preds = %1, %0
  ret void
}

define %struct.tm* @__dst_adjust(%struct.tm* %tm) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 8
  %2 = load i32* %1, align 4, !tbaa !6
  %3 = icmp sgt i32 %2, -1
  br i1 %3, label %47, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* @__daylight, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %4
  store i32 0, i32* %1, align 4, !tbaa !6
  br label %47

; <label>:8                                       ; preds = %4
  %9 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 2
  %10 = load i32* %9, align 4, !tbaa !6
  %11 = mul nsw i32 %10, 3600
  %12 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 1
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = mul nsw i32 %13, 60
  %15 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 0
  %16 = load i32* %15, align 4, !tbaa !6
  %17 = add i32 %16, %11
  %18 = add i32 %17, %14
  %19 = tail call fastcc i32 @cutoff_yday(%struct.tm* %tm, %struct.rule* @__dst_start) optsize
  %20 = tail call fastcc i32 @cutoff_yday(%struct.tm* %tm, %struct.rule* @__dst_end) optsize
  %21 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 7
  %22 = load i32* %21, align 4, !tbaa !6
  %23 = icmp sgt i32 %22, %19
  br i1 %23, label %29, label %24

; <label>:24                                      ; preds = %8
  %25 = icmp eq i32 %22, %19
  br i1 %25, label %26, label %29

; <label>:26                                      ; preds = %24
  %27 = load i32* getelementptr inbounds (%struct.rule* @__dst_start, i64 0, i32 3), align 4, !tbaa !6
  %28 = icmp sge i32 %18, %27
  br label %29

; <label>:29                                      ; preds = %26, %24, %8
  %30 = phi i1 [ true, %8 ], [ false, %24 ], [ %28, %26 ]
  %31 = icmp slt i32 %22, %20
  br i1 %31, label %37, label %32

; <label>:32                                      ; preds = %29
  %33 = icmp eq i32 %22, %20
  br i1 %33, label %34, label %.thread

; <label>:34                                      ; preds = %32
  %35 = load i32* getelementptr inbounds (%struct.rule* @__dst_end, i64 0, i32 3), align 4, !tbaa !6
  %36 = icmp slt i32 %18, %35
  br label %37

; <label>:37                                      ; preds = %34, %29
  %38 = phi i1 [ true, %29 ], [ %36, %34 ]
  %brmerge.demorgan = and i1 %30, %38
  br i1 %brmerge.demorgan, label %41, label %.thread

.thread:                                          ; preds = %37, %32
  %39 = phi i1 [ %38, %37 ], [ false, %32 ]
  %40 = icmp slt i32 %20, %19
  %brmerge2 = or i1 %30, %39
  %or.cond = and i1 %40, %brmerge2
  br i1 %or.cond, label %41, label %46

; <label>:41                                      ; preds = %.thread, %37
  %42 = load i32* @__dst_offset, align 4, !tbaa !6
  %43 = sub nsw i32 %16, %42
  store i32 %43, i32* %15, align 4, !tbaa !6
  store i32 1, i32* %1, align 4, !tbaa !6
  %44 = tail call i64 bitcast (i64 (%struct.tm.197*)* @__tm_to_time to i64 (%struct.tm*)*)(%struct.tm* %tm) nounwind optsize
  %45 = tail call %struct.tm* bitcast (%struct.tm.197* (i64, %struct.tm.197*)* @__time_to_tm to %struct.tm* (i64, %struct.tm*)*)(i64 %44, %struct.tm* %tm) nounwind optsize
  br label %47

; <label>:46                                      ; preds = %.thread
  store i32 0, i32* %1, align 4, !tbaa !6
  br label %47

; <label>:47                                      ; preds = %46, %41, %7, %0
  %.0 = phi %struct.tm* [ %45, %41 ], [ %tm, %46 ], [ %tm, %7 ], [ %tm, %0 ]
  ret %struct.tm* %.0
}

define internal fastcc i32 @cutoff_yday(%struct.tm* nocapture %tm, %struct.rule* nocapture %rule) nounwind uwtable readonly optsize {
  %1 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 0
  %2 = load i8* %1, align 1, !tbaa !0
  %3 = sext i8 %2 to i32
  switch i32 %3, label %30 [
    i32 74, label %4
    i32 76, label %26
  ]

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 2
  %6 = load i16* %5, align 2, !tbaa !8
  %7 = sext i16 %6 to i32
  %8 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 4
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %11, label %is_leap.exit

; <label>:11                                      ; preds = %4
  %12 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 5
  %13 = load i32* %12, align 4, !tbaa !6
  %14 = add nsw i32 %13, -100
  %15 = and i32 %14, 3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %is_leap.exit

; <label>:17                                      ; preds = %11
  %18 = srem i32 %14, 100
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %is_leap.exit

; <label>:20                                      ; preds = %17
  %21 = srem i32 %14, 400
  %22 = icmp eq i32 %21, 0
  br label %is_leap.exit

is_leap.exit:                                     ; preds = %20, %17, %11, %4
  %23 = phi i1 [ false, %4 ], [ false, %11 ], [ true, %17 ], [ %22, %20 ]
  %24 = zext i1 %23 to i32
  %25 = add nsw i32 %24, %7
  br label %76

; <label>:26                                      ; preds = %0
  %27 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 2
  %28 = load i16* %27, align 2, !tbaa !8
  %29 = sext i16 %28 to i32
  br label %76

; <label>:30                                      ; preds = %0
  %31 = sext i8 %2 to i64
  %32 = getelementptr inbounds [12 x i32]* @cutoff_yday.first_day, i64 0, i64 %31
  %33 = load i32* %32, align 4, !tbaa !6
  %34 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 5
  %35 = load i32* %34, align 4, !tbaa !6
  %36 = add nsw i32 %35, -100
  %37 = and i32 %36, 3
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %is_leap.exit2

; <label>:39                                      ; preds = %30
  %40 = srem i32 %36, 100
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %is_leap.exit2

; <label>:42                                      ; preds = %39
  %43 = srem i32 %36, 400
  %44 = icmp eq i32 %43, 0
  br label %is_leap.exit2

is_leap.exit2:                                    ; preds = %42, %39, %30
  %45 = phi i1 [ false, %30 ], [ true, %39 ], [ %44, %42 ]
  %46 = icmp sgt i8 %2, 1
  br i1 %46, label %47, label %49

; <label>:47                                      ; preds = %is_leap.exit2
  %48 = zext i1 %45 to i32
  %. = add nsw i32 %48, %33
  br label %49

; <label>:49                                      ; preds = %47, %is_leap.exit2
  %yday.0 = phi i32 [ %33, %is_leap.exit2 ], [ %., %47 ]
  %50 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 2
  %51 = load i16* %50, align 2, !tbaa !8
  %52 = sext i16 %51 to i32
  %53 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 6
  %54 = load i32* %53, align 4, !tbaa !6
  %55 = getelementptr inbounds %struct.tm* %tm, i64 0, i32 7
  %56 = load i32* %55, align 4, !tbaa !6
  %.neg3 = sub i32 1400, %yday.0
  %57 = add i32 %.neg3, %52
  %58 = sub i32 %57, %54
  %59 = add i32 %58, %56
  %60 = srem i32 %59, 7
  %61 = getelementptr inbounds %struct.rule* %rule, i64 0, i32 1
  %62 = load i8* %61, align 1, !tbaa !0
  %63 = sext i8 %62 to i32
  %64 = mul nsw i32 %63, 7
  %65 = add nsw i32 %64, %60
  %66 = getelementptr inbounds [12 x i8]* @cutoff_yday.days_in_month, i64 0, i64 %31
  %67 = load i8* %66, align 1, !tbaa !0
  %68 = sext i8 %67 to i32
  %69 = icmp eq i8 %2, 1
  %70 = and i1 %69, %45
  %71 = zext i1 %70 to i32
  %72 = add nsw i32 %71, %68
  %73 = add nsw i32 %65, -7
  %74 = icmp slt i32 %65, %72
  %.1 = select i1 %74, i32 %65, i32 %73
  %75 = add nsw i32 %.1, %yday.0
  br label %76

; <label>:76                                      ; preds = %49, %26, %is_leap.exit
  %.0 = phi i32 [ %75, %49 ], [ %29, %26 ], [ %25, %is_leap.exit ]
  ret i32 %.0
}

define i32 @ualarm(i32 %value, i32 %interval) nounwind uwtable optsize {
  %it = alloca %struct.itimerval.568, align 8
  %1 = getelementptr inbounds %struct.itimerval.568* %it, i64 0, i32 0, i32 0
  store i64 0, i64* %1, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.itimerval.568* %it, i64 0, i32 0, i32 1
  %3 = zext i32 %interval to i64
  store i64 %3, i64* %2, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.itimerval.568* %it, i64 0, i32 1, i32 0
  store i64 0, i64* %4, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.itimerval.568* %it, i64 0, i32 1, i32 1
  %6 = zext i32 %value to i64
  store i64 %6, i64* %5, align 8, !tbaa !5
  %7 = call i32 @setitimer(i32 0, %struct.itimerval.568* %it, %struct.itimerval.568* %it) nounwind optsize
  %8 = load i64* %4, align 8, !tbaa !5
  %9 = mul nsw i64 %8, 1000000
  %10 = load i64* %5, align 8, !tbaa !5
  %11 = add nsw i64 %9, %10
  %12 = trunc i64 %11 to i32
  ret i32 %12
}

define i32 @__uflow(%struct.__FILE_s.69* %f) nounwind uwtable optsize {
  %c = alloca i8, align 1
  %1 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 2
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %0
  %5 = call i32 bitcast (i32 (%struct.__FILE_s.689*)* @__toread to i32 (%struct.__FILE_s.69*)*)(%struct.__FILE_s.69* %f) nounwind optsize
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %15

; <label>:7                                       ; preds = %4, %0
  %8 = getelementptr inbounds %struct.__FILE_s.69* %f, i64 0, i32 8
  %9 = load i64 (%struct.__FILE_s.69*, i8*, i64)** %8, align 8, !tbaa !7
  %10 = call i64 %9(%struct.__FILE_s.69* %f, i8* %c, i64 1) nounwind optsize
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %7
  %13 = load i8* %c, align 1, !tbaa !0
  %14 = zext i8 %13 to i32
  br label %15

; <label>:15                                      ; preds = %12, %7, %4
  %.0 = phi i32 [ %14, %12 ], [ -1, %4 ], [ -1, %7 ]
  ret i32 %.0
}

define i64 @ulimit(i32 %cmd, ...) nounwind uwtable optsize {
  %rl = alloca %struct.rlimit, align 8
  %ap = alloca [1 x %struct.__va_list_tag.704], align 16
  %1 = call i32 @getrlimit(i32 1, %struct.rlimit* %rl) nounwind optsize
  %2 = icmp eq i32 %cmd, 2
  br i1 %2, label %3, label %._crit_edge

._crit_edge:                                      ; preds = %0
  %.pre = getelementptr inbounds %struct.rlimit* %rl, i64 0, i32 0
  br label %25

; <label>:3                                       ; preds = %0
  %4 = bitcast [1 x %struct.__va_list_tag.704]* %ap to i8*
  call void @llvm.va_start(i8* %4)
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag.704]* %ap, i64 0, i64 0, i32 0
  %6 = load i32* %5, align 16
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

; <label>:8                                       ; preds = %3
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag.704]* %ap, i64 0, i64 0, i32 3
  %10 = load i8** %9, align 16
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8* %10, i64 %11
  %13 = add i32 %6, 8
  store i32 %13, i32* %5, align 16
  br label %18

; <label>:14                                      ; preds = %3
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag.704]* %ap, i64 0, i64 0, i32 2
  %16 = load i8** %15, align 8
  %17 = getelementptr i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

; <label>:18                                      ; preds = %14, %8
  %.in = phi i8* [ %12, %8 ], [ %16, %14 ]
  %19 = bitcast i8* %.in to i64*
  %20 = load i64* %19, align 8
  call void @llvm.va_end(i8* %4)
  %21 = shl i64 %20, 9
  %22 = getelementptr inbounds %struct.rlimit* %rl, i64 0, i32 0
  store i64 %21, i64* %22, align 8, !tbaa !9
  %23 = call i32 bitcast (i32 (i32, %struct.rlimit.571*)* @setrlimit to i32 (i32, %struct.rlimit*)*)(i32 1, %struct.rlimit* %rl) nounwind optsize
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %18, %._crit_edge
  %.pre-phi = phi i64* [ %.pre, %._crit_edge ], [ %22, %18 ]
  %26 = load i64* %.pre-phi, align 8, !tbaa !9
  %27 = lshr i64 %26, 9
  br label %28

; <label>:28                                      ; preds = %25, %18
  %.0 = phi i64 [ %27, %25 ], [ -1, %18 ]
  ret i64 %.0
}

define i32 @umask(i32 %mode) nounwind uwtable optsize {
  %1 = zext i32 %mode to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 60, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @umount2(i8* %special, i32 %flags) nounwind uwtable optsize {
  %1 = ptrtoint i8* %special to i64
  %2 = sext i32 %flags to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 52, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @umount(i8* %special) nounwind uwtable optsize {
  %1 = ptrtoint i8* %special to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 52, i64 %1, i64 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @uname(%struct.utsname* %uts) nounwind uwtable optsize {
  %1 = ptrtoint %struct.utsname* %uts to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 122, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @ungetc(i32 %c, %struct.__FILE_s.706* %f) nounwind uwtable optsize {
  %1 = icmp eq i32 %c, -1
  br i1 %1, label %22, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.__FILE_s.706* %f, i64 0, i32 2
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %2
  %7 = tail call i32 bitcast (i32 (%struct.__FILE_s.689*)* @__toread to i32 (%struct.__FILE_s.706*)*)(%struct.__FILE_s.706* %f) nounwind optsize
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %22

; <label>:9                                       ; preds = %6, %2
  %10 = getelementptr inbounds %struct.__FILE_s.706* %f, i64 0, i32 1
  %11 = load i8** %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.__FILE_s.706* %f, i64 0, i32 11
  %13 = load i8** %12, align 8, !tbaa !7
  %14 = getelementptr inbounds i8* %13, i64 -8
  %15 = icmp ugt i8* %11, %14
  br i1 %15, label %16, label %22

; <label>:16                                      ; preds = %9
  %17 = trunc i32 %c to i8
  %18 = getelementptr inbounds i8* %11, i64 -1
  store i8* %18, i8** %10, align 8, !tbaa !7
  store i8 %17, i8* %18, align 1, !tbaa !0
  %19 = getelementptr inbounds %struct.__FILE_s.706* %f, i64 0, i32 0
  %20 = load i32* %19, align 4, !tbaa !6
  %21 = and i32 %20, -17
  store i32 %21, i32* %19, align 4, !tbaa !6
  br label %22

; <label>:22                                      ; preds = %16, %9, %6, %0
  %.0 = phi i32 [ %c, %16 ], [ -1, %0 ], [ -1, %9 ], [ -1, %6 ]
  ret i32 %.0
}

define i32 @ungetwc(i32 %c, %struct.__FILE_s.707* %f) nounwind uwtable optsize {
  %mbc = alloca [4 x i8], align 1
  %1 = icmp eq i32 %c, -1
  br i1 %1, label %45, label %2

; <label>:2                                       ; preds = %0
  %3 = call i32 @isascii(i32 %c) nounwind optsize
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %2
  %6 = getelementptr inbounds [4 x i8]* %mbc, i64 0, i64 0
  %7 = call i32 @wctomb(i8* %6, i32 %c) nounwind optsize
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %45, label %9

; <label>:9                                       ; preds = %5, %2
  %l.0 = phi i32 [ 1, %2 ], [ %7, %5 ]
  %10 = getelementptr inbounds %struct.__FILE_s.707* %f, i64 0, i32 19
  %11 = load i8* %10, align 1, !tbaa !0
  %12 = add i8 %11, 1
  %13 = or i8 %12, %11
  store i8 %13, i8* %10, align 1, !tbaa !0
  %14 = getelementptr inbounds %struct.__FILE_s.707* %f, i64 0, i32 2
  %15 = load i8** %14, align 8, !tbaa !7
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %20

; <label>:17                                      ; preds = %9
  %18 = call i32 bitcast (i32 (%struct.__FILE_s.689*)* @__toread to i32 (%struct.__FILE_s.707*)*)(%struct.__FILE_s.707* %f) nounwind optsize
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %45

; <label>:20                                      ; preds = %17, %9
  %21 = getelementptr inbounds %struct.__FILE_s.707* %f, i64 0, i32 1
  %22 = load i8** %21, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.__FILE_s.707* %f, i64 0, i32 11
  %24 = load i8** %23, align 8, !tbaa !7
  %25 = sext i32 %l.0 to i64
  %.sum = add i64 %25, -8
  %26 = getelementptr inbounds i8* %24, i64 %.sum
  %27 = icmp ult i8* %22, %26
  br i1 %27, label %45, label %28

; <label>:28                                      ; preds = %20
  %29 = call i32 @isascii(i32 %c) nounwind optsize
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

; <label>:31                                      ; preds = %28
  %32 = trunc i32 %c to i8
  %33 = load i8** %21, align 8, !tbaa !7
  %34 = getelementptr inbounds i8* %33, i64 -1
  store i8* %34, i8** %21, align 8, !tbaa !7
  store i8 %32, i8* %34, align 1, !tbaa !0
  br label %41

; <label>:35                                      ; preds = %28
  %36 = load i8** %21, align 8, !tbaa !7
  %37 = sub i64 0, %25
  %38 = getelementptr inbounds i8* %36, i64 %37
  store i8* %38, i8** %21, align 8, !tbaa !7
  %39 = getelementptr inbounds [4 x i8]* %mbc, i64 0, i64 0
  %40 = call i8* @memcpy(i8* %38, i8* %39, i64 %25) nounwind optsize
  br label %41

; <label>:41                                      ; preds = %35, %31
  %42 = getelementptr inbounds %struct.__FILE_s.707* %f, i64 0, i32 0
  %43 = load i32* %42, align 4, !tbaa !6
  %44 = and i32 %43, -17
  store i32 %44, i32* %42, align 4, !tbaa !6
  br label %45

; <label>:45                                      ; preds = %41, %20, %17, %5, %0
  %.0 = phi i32 [ %c, %41 ], [ -1, %0 ], [ -1, %5 ], [ -1, %17 ], [ -1, %20 ]
  ret i32 %.0
}

define i32 @unlinkat(i32 %fd, i8* %path, i32 %flag) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = sext i32 %flag to i64
  %4 = tail call i64 (i64, ...)* @__syscall(i64 328, i64 %1, i64 %2, i64 %3, i32 0, i32 0, i32 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define i32 @unlink(i8* %path) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = tail call i64 (i64, ...)* @__syscall(i64 10, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %3 = tail call i64 @__syscall_ret(i64 %2) nounwind optsize
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

define i32 @unsetenv(i8* %name) nounwind uwtable optsize {
  %1 = tail call i64 @strlen(i8* %name) nounwind optsize
  %2 = load i8* %name, align 1, !tbaa !0
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %7, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i8* @strchr(i8* %name, i32 61) nounwind optsize
  %6 = icmp eq i8* %5, null
  br i1 %6, label %.preheader8, label %7

; <label>:7                                       ; preds = %4, %0
  %8 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %8, align 4, !tbaa !6
  br label %.loopexit9

.preheader8:                                      ; preds = %51, %.preheader4, %.critedge1, %4
  %i.0 = phi i32 [ 0, %4 ], [ %24, %.critedge1 ], [ 0, %51 ], [ 0, %.preheader4 ]
  %9 = sext i32 %i.0 to i64
  %10 = load i8*** @__environ, align 8, !tbaa !7
  %11 = getelementptr inbounds i8** %10, i64 %9
  %12 = load i8** %11, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %.loopexit9, label %14

; <label>:14                                      ; preds = %.preheader8
  %15 = tail call i32 @memcmp(i8* %name, i8* %12, i64 %1) nounwind optsize
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %.critedge1

; <label>:17                                      ; preds = %14
  %18 = load i8*** @__environ, align 8, !tbaa !7
  %19 = getelementptr inbounds i8** %18, i64 %9
  %20 = load i8** %19, align 8, !tbaa !7
  %21 = getelementptr inbounds i8* %20, i64 %1
  %22 = load i8* %21, align 1, !tbaa !0
  %23 = icmp eq i8 %22, 61
  br i1 %23, label %.critedge, label %.critedge1

.critedge1:                                       ; preds = %17, %14
  %24 = add nsw i32 %i.0, 1
  br label %.preheader8

.critedge:                                        ; preds = %17
  %25 = icmp eq i8* %20, null
  br i1 %25, label %.loopexit9, label %26

; <label>:26                                      ; preds = %.critedge
  %27 = load i8*** @__env_map, align 8, !tbaa !7
  %28 = icmp eq i8** %27, null
  br i1 %28, label %.lr.ph7, label %.preheader

.preheader:                                       ; preds = %33, %26
  %indvars.iv = phi i64 [ %indvars.iv.next, %33 ], [ 0, %26 ]
  %j.0 = phi i32 [ %34, %33 ], [ 0, %26 ]
  %29 = getelementptr inbounds i8** %27, i64 %indvars.iv
  %30 = load i8** %29, align 8, !tbaa !7
  %31 = icmp eq i8* %30, null
  %32 = icmp eq i8* %30, %20
  %or.cond = or i1 %31, %32
  br i1 %or.cond, label %.critedge2, label %33

; <label>:33                                      ; preds = %.preheader
  %indvars.iv.next = add i64 %indvars.iv, 1
  %34 = add nsw i32 %j.0, 1
  br label %.preheader

.critedge2:                                       ; preds = %.preheader
  tail call void @free(i8* %30) optsize
  %35 = sext i32 %j.0 to i64
  %36 = load i8*** @__env_map, align 8, !tbaa !7
  %37 = getelementptr inbounds i8** %36, i64 %35
  %38 = load i8** %37, align 8, !tbaa !7
  %39 = icmp eq i8* %38, null
  br i1 %39, label %.preheader4, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.critedge2
  %indvars.iv10 = phi i64 [ %indvars.iv.next11, %.lr.ph ], [ %35, %.critedge2 ]
  %40 = phi i8** [ %45, %.lr.ph ], [ %37, %.critedge2 ]
  %41 = phi i8** [ %44, %.lr.ph ], [ %36, %.critedge2 ]
  %indvars.iv.next11 = add i64 %indvars.iv10, 1
  %42 = getelementptr inbounds i8** %41, i64 %indvars.iv.next11
  %43 = load i8** %42, align 8, !tbaa !7
  store i8* %43, i8** %40, align 8, !tbaa !7
  %44 = load i8*** @__env_map, align 8, !tbaa !7
  %45 = getelementptr inbounds i8** %44, i64 %indvars.iv.next11
  %46 = load i8** %45, align 8, !tbaa !7
  %47 = icmp eq i8* %46, null
  br i1 %47, label %.preheader4, label %.lr.ph

.preheader4:                                      ; preds = %.lr.ph, %.critedge2
  %.pre = load i8*** @__environ, align 8, !tbaa !7
  %.phi.trans.insert = getelementptr inbounds i8** %.pre, i64 %9
  %.pre14 = load i8** %.phi.trans.insert, align 8, !tbaa !7
  %48 = icmp eq i8* %.pre14, null
  br i1 %48, label %.preheader8, label %.lr.ph7

.lr.ph7:                                          ; preds = %.preheader4, %26
  %49 = phi i8** [ %.pre, %.preheader4 ], [ %18, %26 ]
  %50 = getelementptr inbounds i8** %49, i64 %9
  br label %51

; <label>:51                                      ; preds = %51, %.lr.ph7
  %indvars.iv12 = phi i64 [ %9, %.lr.ph7 ], [ %indvars.iv.next13, %51 ]
  %52 = phi i8** [ %50, %.lr.ph7 ], [ %57, %51 ]
  %53 = phi i8** [ %49, %.lr.ph7 ], [ %56, %51 ]
  %indvars.iv.next13 = add i64 %indvars.iv12, 1
  %54 = getelementptr inbounds i8** %53, i64 %indvars.iv.next13
  %55 = load i8** %54, align 8, !tbaa !7
  store i8* %55, i8** %52, align 8, !tbaa !7
  %56 = load i8*** @__environ, align 8, !tbaa !7
  %57 = getelementptr inbounds i8** %56, i64 %indvars.iv.next13
  %58 = load i8** %57, align 8, !tbaa !7
  %59 = icmp eq i8* %58, null
  br i1 %59, label %.preheader8, label %51

.loopexit9:                                       ; preds = %.critedge, %.preheader8, %7
  %.0 = phi i32 [ -1, %7 ], [ 0, %.critedge ], [ 0, %.preheader8 ]
  ret i32 %.0
}

define %struct.__locale.109* @uselocale(%struct.__locale.109* %l) nounwind uwtable optsize {
  %1 = tail call %struct.__pthread* @pthread_self() nounwind readnone optsize
  %2 = getelementptr inbounds %struct.__pthread* %1, i64 0, i32 25
  %3 = load %struct.__locale.109** %2, align 8, !tbaa !7
  %4 = icmp eq %struct.__locale.109* %l, null
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  store %struct.__locale.109* %l, %struct.__locale.109** %2, align 8, !tbaa !7
  br label %6

; <label>:6                                       ; preds = %5, %0
  ret %struct.__locale.109* %3
}

define i32 @usleep(i32 %useconds) nounwind uwtable optsize {
  %tv = alloca %struct.timespec.281, align 8
  %1 = getelementptr inbounds %struct.timespec.281* %tv, i64 0, i32 0
  %2 = udiv i32 %useconds, 1000000
  %3 = zext i32 %2 to i64
  store i64 %3, i64* %1, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.timespec.281* %tv, i64 0, i32 1
  %5 = urem i32 %useconds, 1000000
  %6 = mul i32 %5, 1000
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %4, align 8, !tbaa !5
  %8 = call i32 @nanosleep(%struct.timespec.281* %tv, %struct.timespec.281* %tv) nounwind optsize
  ret i32 %8
}

define i32 @utimensat(i32 %fd, i8* %path, %struct.timespec.114* %times, i32 %flags) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %path to i64
  %3 = ptrtoint %struct.timespec.114* %times to i64
  %4 = sext i32 %flags to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 348, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @utime(i8* %path, %struct.utimbuf* %times) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint %struct.utimbuf* %times to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 30, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define i32 @utimes(i8* %path, %struct.timeval.716* %times) nounwind uwtable optsize {
  %1 = ptrtoint i8* %path to i64
  %2 = ptrtoint %struct.timeval.716* %times to i64
  %3 = tail call i64 (i64, ...)* @__syscall(i64 30, i64 %1, i64 %2, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

define void @endutxent() nounwind uwtable readnone optsize {
  ret void
}

define void @setutxent() nounwind uwtable readnone optsize {
  ret void
}

define noalias %struct.utmpx* @getutxent() nounwind uwtable readnone optsize {
  ret %struct.utmpx* null
}

define noalias %struct.utmpx* @getutxid(%struct.utmpx* nocapture %ut) nounwind uwtable readnone optsize {
  ret %struct.utmpx* null
}

define noalias %struct.utmpx* @getutxline(%struct.utmpx* nocapture %ut) nounwind uwtable readnone optsize {
  ret %struct.utmpx* null
}

define noalias %struct.utmpx* @pututxline(%struct.utmpx* nocapture %ut) nounwind uwtable readnone optsize {
  ret %struct.utmpx* null
}

define void @updwtmpx(i8* nocapture %f, %struct.utmpx* nocapture %u) nounwind uwtable readnone optsize {
  ret void
}

define i32 @vasprintf(i8** nocapture %s, i8* %fmt, %struct.__va_list_tag* %ap) nounwind uwtable optsize {
  %ap2 = alloca [1 x %struct.__va_list_tag], align 16
  %1 = call i8* @malloc(i64 240) optsize
  %2 = icmp eq i8* %1, null
  br i1 %2, label %24, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap2, i64 0, i64 0
  %5 = bitcast [1 x %struct.__va_list_tag]* %ap2 to i8*
  %6 = bitcast %struct.__va_list_tag* %ap to i8*
  call void @llvm.va_copy(i8* %5, i8* %6)
  %7 = call i32 bitcast (i32 (i8*, i64, i8*, %struct.__va_list_tag.635*)* @vsnprintf to i32 (i8*, i64, i8*, %struct.__va_list_tag*)*)(i8* %1, i64 240, i8* %fmt, %struct.__va_list_tag* %4) nounwind optsize
  call void @llvm.va_end(i8* %5)
  %8 = icmp ult i32 %7, 240
  br i1 %8, label %9, label %15

; <label>:9                                       ; preds = %3
  %10 = add i32 %7, 1
  %11 = zext i32 %10 to i64
  %12 = call i8* @realloc(i8* %1, i64 %11) nounwind optsize
  %13 = icmp ne i8* %12, null
  %14 = select i1 %13, i8* %12, i8* %1
  store i8* %14, i8** %s, align 8, !tbaa !7
  br label %24

; <label>:15                                      ; preds = %3
  call void @free(i8* %1) optsize
  %16 = icmp slt i32 %7, 0
  br i1 %16, label %24, label %17

; <label>:17                                      ; preds = %15
  %18 = add i32 %7, 1
  %19 = zext i32 %18 to i64
  %20 = call i8* @malloc(i64 %19) optsize
  store i8* %20, i8** %s, align 8, !tbaa !7
  %21 = icmp eq i8* %20, null
  br i1 %21, label %24, label %22

; <label>:22                                      ; preds = %17
  %23 = call i32 bitcast (i32 (i8*, i64, i8*, %struct.__va_list_tag.635*)* @vsnprintf to i32 (i8*, i64, i8*, %struct.__va_list_tag*)*)(i8* %20, i64 %19, i8* %fmt, %struct.__va_list_tag* %ap) nounwind optsize
  br label %24

; <label>:24                                      ; preds = %22, %17, %15, %9, %0
  %.0 = phi i32 [ %7, %9 ], [ %23, %22 ], [ -1, %0 ], [ -1, %17 ], [ -1, %15 ]
  ret i32 %.0
}

define i32 @vdprintf(i32 %fd, i8* %fmt, %struct.__va_list_tag.42* %ap) nounwind uwtable optsize {
  %f = alloca %struct.__FILE_s.721, align 8
  %1 = bitcast %struct.__FILE_s.721* %f to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 184, i32 8, i1 false)
  %2 = getelementptr inbounds %struct.__FILE_s.721* %f, i64 0, i32 9
  store i64 (%struct.__FILE_s.721*, i8*, i64)* @wrap_write, i64 (%struct.__FILE_s.721*, i8*, i64)** %2, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.721* %f, i64 0, i32 11
  store i8* %fmt, i8** %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.__FILE_s.721* %f, i64 0, i32 12
  store i64 0, i64* %4, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.__FILE_s.721* %f, i64 0, i32 15
  store i32 %fd, i32* %5, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.__FILE_s.721* %f, i64 0, i32 20
  store i8 -1, i8* %6, align 1, !tbaa !0
  %7 = getelementptr inbounds %struct.__FILE_s.721* %f, i64 0, i32 21
  store i32 -1, i32* %7, align 4, !tbaa !6
  %8 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s.721*, i8*, %struct.__va_list_tag.42*)*)(%struct.__FILE_s.721* %f, i8* %fmt, %struct.__va_list_tag.42* %ap) nounwind optsize
  ret i32 %8
}

define internal i64 @wrap_write(%struct.__FILE_s.721* %f, i8* %buf, i64 %len) nounwind uwtable optsize {
  %1 = tail call i64 bitcast (i64 (%struct.__FILE_s.647*, i8*, i64)* @__stdio_write to i64 (%struct.__FILE_s.721*, i8*, i64)*)(%struct.__FILE_s.721* %f, i8* %buf, i64 %len) nounwind optsize
  ret i64 %1
}

define i32 @__vfork() nounwind uwtable optsize {
  %1 = tail call i64 (i64, ...)* @__syscall(i64 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) nounwind optsize
  %2 = tail call i64 @__syscall_ret(i64 %1) nounwind optsize
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

define i32 @vfprintf(%struct.__FILE_s.85* %f, i8* %fmt, %struct.__va_list_tag.723* %ap) nounwind uwtable optsize {
  %ap2 = alloca [1 x %struct.__va_list_tag.723], align 16
  %nl_type = alloca [10 x i32], align 16
  %nl_arg = alloca [10 x %union.arg], align 16
  %internal_buf = alloca [80 x i8], align 16
  %1 = bitcast [10 x i32]* %nl_type to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 40, i32 16, i1 false)
  %2 = bitcast [1 x %struct.__va_list_tag.723]* %ap2 to i8*
  %3 = bitcast %struct.__va_list_tag.723* %ap to i8*
  call void @llvm.va_copy(i8* %2, i8* %3)
  %4 = getelementptr inbounds [10 x %union.arg]* %nl_arg, i64 0, i64 0
  %5 = getelementptr inbounds [10 x i32]* %nl_type, i64 0, i64 0
  %6 = call fastcc i32 @printf_core(%struct.__FILE_s.85* null, i8* %fmt, [1 x %struct.__va_list_tag.723]* %ap2, %union.arg* %4, i32* %5) optsize
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %29, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 12
  %10 = load i64* %9, align 8, !tbaa !5
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %.thread

.thread:                                          ; preds = %8
  %12 = call fastcc i32 @printf_core(%struct.__FILE_s.85* %f, i8* %fmt, [1 x %struct.__va_list_tag.723]* %ap2, %union.arg* %4, i32* %5) optsize
  br label %28

; <label>:13                                      ; preds = %8
  %14 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 11
  %15 = load i8** %14, align 8, !tbaa !7
  %16 = getelementptr inbounds [80 x i8]* %internal_buf, i64 0, i64 0
  store i8* %16, i8** %14, align 8, !tbaa !7
  store i64 80, i64* %9, align 8, !tbaa !5
  %17 = call fastcc i32 @printf_core(%struct.__FILE_s.85* %f, i8* %fmt, [1 x %struct.__va_list_tag.723]* %ap2, %union.arg* %4, i32* %5) optsize
  %18 = icmp eq i8* %15, null
  br i1 %18, label %28, label %19

; <label>:19                                      ; preds = %13
  %20 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 9
  %21 = load i64 (%struct.__FILE_s.85*, i8*, i64)** %20, align 8, !tbaa !7
  %22 = call i64 %21(%struct.__FILE_s.85* %f, i8* null, i64 0) nounwind optsize
  %23 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 5
  %24 = load i8** %23, align 8, !tbaa !7
  %25 = icmp eq i8* %24, null
  %ret.0 = select i1 %25, i32 -1, i32 %17
  store i8* %15, i8** %14, align 8, !tbaa !7
  store i64 0, i64* %9, align 8, !tbaa !5
  %26 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 4
  store i8* null, i8** %26, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.__FILE_s.85* %f, i64 0, i32 7
  store i8* null, i8** %27, align 8, !tbaa !7
  store i8* null, i8** %23, align 8, !tbaa !7
  br label %28

; <label>:28                                      ; preds = %19, %13, %.thread
  %ret.1 = phi i32 [ %ret.0, %19 ], [ %17, %13 ], [ %12, %.thread ]
  call void @llvm.va_end(i8* %2)
  br label %29

; <label>:29                                      ; preds = %28, %0
  %.0 = phi i32 [ %ret.1, %28 ], [ -1, %0 ]
  ret i32 %.0
}

define internal fastcc i32 @printf_core(%struct.__FILE_s.85* %f, i8* %fmt, [1 x %struct.__va_list_tag.723]* %ap, %union.arg* nocapture %nl_arg, i32* nocapture %nl_type) nounwind uwtable optsize {
  %arg = alloca %union.arg, align 8
  %buf = alloca [43 x i8], align 16
  %wc = alloca [2 x i32], align 4
  %mb = alloca [4 x i8], align 1
  %1 = icmp ne %struct.__FILE_s.85* %f, null
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %5 = getelementptr inbounds [43 x i8]* %buf, i64 0, i64 43
  %6 = bitcast %union.arg* %arg to i8**
  %7 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  %8 = ptrtoint i8* %5 to i64
  %9 = getelementptr inbounds [43 x i8]* %buf, i64 0, i64 42
  %10 = getelementptr inbounds [2 x i32]* %wc, i64 0, i64 0
  %11 = getelementptr inbounds [2 x i32]* %wc, i64 0, i64 1
  %.c = ptrtoint [2 x i32]* %wc to i64
  %12 = getelementptr inbounds [4 x i8]* %mb, i64 0, i64 0
  br label %.backedge

.backedge:                                        ; preds = %379, %.thread29, %248, %244, %241, %237, %233, %229, %226, %225, %221, %221, %221, %221, %221, %221, %221, %221, %209, %206, %42, %0
  %13 = phi i8* [ %fmt, %0 ], [ %34, %42 ], [ %191, %379 ], [ %191, %221 ], [ %191, %221 ], [ %191, %221 ], [ %191, %221 ], [ %191, %221 ], [ %191, %221 ], [ %191, %221 ], [ %191, %221 ], [ %191, %.thread29 ], [ %191, %225 ], [ %191, %248 ], [ %191, %244 ], [ %191, %241 ], [ %191, %237 ], [ %191, %233 ], [ %191, %229 ], [ %191, %226 ], [ %191, %206 ], [ %191, %209 ]
  %cnt.0 = phi i32 [ 0, %0 ], [ %cnt.1, %42 ], [ %cnt.1, %379 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %221 ], [ %cnt.1, %.thread29 ], [ %cnt.1, %225 ], [ %cnt.1, %248 ], [ %cnt.1, %244 ], [ %cnt.1, %241 ], [ %cnt.1, %237 ], [ %cnt.1, %233 ], [ %cnt.1, %229 ], [ %cnt.1, %226 ], [ %cnt.1, %206 ], [ %cnt.1, %209 ]
  %l.0 = phi i32 [ 0, %0 ], [ %38, %42 ], [ %w.2, %379 ], [ %38, %221 ], [ %38, %221 ], [ %38, %221 ], [ %38, %221 ], [ %38, %221 ], [ %38, %221 ], [ %38, %221 ], [ %38, %221 ], [ %378, %.thread29 ], [ %38, %225 ], [ %38, %248 ], [ %38, %244 ], [ %38, %241 ], [ %38, %237 ], [ %38, %233 ], [ %38, %229 ], [ %38, %226 ], [ %38, %206 ], [ %38, %209 ]
  %l10n.0 = phi i32 [ 0, %0 ], [ %l10n.0, %42 ], [ %l10n.3, %379 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %221 ], [ %l10n.3, %.thread29 ], [ %l10n.3, %225 ], [ %l10n.3, %248 ], [ %l10n.3, %244 ], [ %l10n.3, %241 ], [ %l10n.3, %237 ], [ %l10n.3, %233 ], [ %l10n.3, %229 ], [ %l10n.3, %226 ], [ %l10n.3, %206 ], [ %l10n.3, %209 ]
  %14 = icmp sgt i32 %cnt.0, -1
  br i1 %14, label %15, label %22

; <label>:15                                      ; preds = %.backedge
  %16 = sub nsw i32 2147483647, %cnt.0
  %17 = icmp sgt i32 %l.0, %16
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %15
  %19 = call i32* @__errno_location() nounwind readnone optsize
  store i32 75, i32* %19, align 4, !tbaa !6
  br label %22

; <label>:20                                      ; preds = %15
  %21 = add nsw i32 %l.0, %cnt.0
  br label %22

; <label>:22                                      ; preds = %20, %18, %.backedge
  %cnt.1 = phi i32 [ -1, %18 ], [ %21, %20 ], [ %cnt.0, %.backedge ]
  %23 = load i8* %13, align 1, !tbaa !0
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %393, label %.preheader39

.preheader39:                                     ; preds = %27, %22
  %25 = phi i8 [ %.pre, %27 ], [ %23, %22 ]
  %26 = phi i8* [ %28, %27 ], [ %13, %22 ]
  switch i8 %25, label %27 [
    i8 0, label %.critedge
    i8 37, label %.critedge
  ]

; <label>:27                                      ; preds = %.preheader39
  %28 = getelementptr inbounds i8* %26, i64 1
  %.pre = load i8* %28, align 1, !tbaa !0
  br label %.preheader39

.critedge:                                        ; preds = %.preheader39, %.preheader39
  %29 = call i64 @strspn(i8* %26, i8* getelementptr inbounds ([2 x i8]* @.str909, i64 0, i64 0)) nounwind optsize
  %30 = lshr i64 %29, 1
  %31 = and i64 %30, 4294967295
  %32 = getelementptr inbounds i8* %26, i64 %31
  %33 = and i64 %29, 4294967294
  %34 = getelementptr inbounds i8* %26, i64 %33
  %35 = ptrtoint i8* %32 to i64
  %36 = ptrtoint i8* %13 to i64
  %37 = sub i64 %35, %36
  %38 = trunc i64 %37 to i32
  br i1 %1, label %39, label %42

; <label>:39                                      ; preds = %.critedge
  %40 = sext i32 %38 to i64
  %41 = call i64 @__fwritex(i8* %13, i64 %40, %struct.__FILE_s.85* %f) nounwind optsize
  br label %42

; <label>:42                                      ; preds = %39, %.critedge
  %43 = icmp eq i32 %38, 0
  br i1 %43, label %44, label %.backedge

; <label>:44                                      ; preds = %42
  %.sum30 = or i64 %33, 1
  %45 = getelementptr inbounds i8* %26, i64 %.sum30
  %46 = load i8* %45, align 1, !tbaa !0
  %47 = sext i8 %46 to i32
  %48 = add i32 %47, -48
  %49 = icmp ult i32 %48, 10
  br i1 %49, label %50, label %56

; <label>:50                                      ; preds = %44
  %.sum = add i64 %33, 2
  %51 = getelementptr inbounds i8* %26, i64 %.sum
  %52 = load i8* %51, align 1, !tbaa !0
  %53 = icmp eq i8 %52, 36
  br i1 %53, label %54, label %56

; <label>:54                                      ; preds = %50
  %.sum31 = add i64 %33, 3
  %55 = getelementptr inbounds i8* %26, i64 %.sum31
  br label %56

; <label>:56                                      ; preds = %54, %50, %44
  %storemerge = phi i8* [ %55, %54 ], [ %45, %50 ], [ %45, %44 ]
  %argpos.0 = phi i32 [ %48, %54 ], [ -1, %50 ], [ -1, %44 ]
  %l10n.1 = phi i32 [ 1, %54 ], [ %l10n.0, %50 ], [ %l10n.0, %44 ]
  br label %57

; <label>:57                                      ; preds = %66, %56
  %storemerge6 = phi i8* [ %storemerge, %56 ], [ %68, %66 ]
  %fl.0 = phi i32 [ 0, %56 ], [ %67, %66 ]
  %58 = load i8* %storemerge6, align 1, !tbaa !0
  %59 = sext i8 %58 to i32
  %60 = add i32 %59, -32
  %61 = icmp ult i32 %60, 32
  br i1 %61, label %62, label %.thread

; <label>:62                                      ; preds = %57
  %63 = shl i32 1, %60
  %64 = and i32 %63, 75913
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %.thread, label %66

; <label>:66                                      ; preds = %62
  %67 = or i32 %63, %fl.0
  %68 = getelementptr inbounds i8* %storemerge6, i64 1
  br label %57

.thread:                                          ; preds = %62, %57
  %69 = icmp eq i8 %58, 42
  br i1 %69, label %70, label %112

; <label>:70                                      ; preds = %.thread
  %71 = getelementptr inbounds i8* %storemerge6, i64 1
  %72 = load i8* %71, align 1, !tbaa !0
  %73 = sext i8 %72 to i32
  %74 = add i32 %73, -48
  %75 = icmp ult i32 %74, 10
  br i1 %75, label %76, label %90

; <label>:76                                      ; preds = %70
  %77 = getelementptr inbounds i8* %storemerge6, i64 2
  %78 = load i8* %77, align 1, !tbaa !0
  %79 = icmp eq i8 %78, 36
  br i1 %79, label %80, label %90

; <label>:80                                      ; preds = %76
  %81 = sext i32 %74 to i64
  %82 = getelementptr inbounds i32* %nl_type, i64 %81
  store i32 10, i32* %82, align 4, !tbaa !6
  %83 = load i8* %71, align 1, !tbaa !0
  %84 = sext i8 %83 to i64
  %85 = add i64 %84, -48
  %86 = getelementptr inbounds %union.arg* %nl_arg, i64 %85, i32 0
  %87 = load i64* %86, align 8, !tbaa !9
  %88 = trunc i64 %87 to i32
  %89 = getelementptr inbounds i8* %storemerge6, i64 3
  br label %107

; <label>:90                                      ; preds = %76, %70
  %91 = icmp eq i32 %l10n.1, 0
  br i1 %91, label %92, label %.critedge1.thread

; <label>:92                                      ; preds = %90
  br i1 %1, label %93, label %.thread23

; <label>:93                                      ; preds = %92
  %94 = load i32* %2, align 4
  %95 = icmp ult i32 %94, 41
  br i1 %95, label %96, label %101

; <label>:96                                      ; preds = %93
  %97 = load i8** %3, align 8
  %98 = sext i32 %94 to i64
  %99 = getelementptr i8* %97, i64 %98
  %100 = add i32 %94, 8
  store i32 %100, i32* %2, align 4
  br label %104

; <label>:101                                     ; preds = %93
  %102 = load i8** %4, align 8
  %103 = getelementptr i8* %102, i64 8
  store i8* %103, i8** %4, align 8
  br label %104

; <label>:104                                     ; preds = %101, %96
  %.in8 = phi i8* [ %99, %96 ], [ %102, %101 ]
  %105 = bitcast i8* %.in8 to i32*
  %106 = load i32* %105, align 4
  br label %107

; <label>:107                                     ; preds = %104, %80
  %storemerge7 = phi i8* [ %89, %80 ], [ %71, %104 ]
  %w.0 = phi i32 [ %88, %80 ], [ %106, %104 ]
  %l10n.2 = phi i32 [ 1, %80 ], [ %l10n.1, %104 ]
  %108 = icmp slt i32 %w.0, 0
  br i1 %108, label %109, label %.thread23

; <label>:109                                     ; preds = %107
  %110 = or i32 %fl.0, 8192
  %111 = sub nsw i32 0, %w.0
  br label %.thread23

; <label>:112                                     ; preds = %.thread
  %113 = add i32 %59, -48
  %114 = icmp ult i32 %113, 10
  br i1 %114, label %.lr.ph.i, label %.thread23

.lr.ph.i:                                         ; preds = %.lr.ph.i, %112
  %115 = phi i32 [ %122, %.lr.ph.i ], [ %59, %112 ]
  %116 = phi i8* [ %120, %.lr.ph.i ], [ %storemerge6, %112 ]
  %i.01.i = phi i32 [ %119, %.lr.ph.i ], [ 0, %112 ]
  %117 = mul nsw i32 %i.01.i, 10
  %118 = add i32 %115, -48
  %119 = add i32 %118, %117
  %120 = getelementptr inbounds i8* %116, i64 1
  %121 = load i8* %120, align 1, !tbaa !0
  %122 = sext i8 %121 to i32
  %123 = add i32 %122, -48
  %124 = icmp ult i32 %123, 10
  br i1 %124, label %.lr.ph.i, label %getint.exit

getint.exit:                                      ; preds = %.lr.ph.i
  %125 = icmp slt i32 %119, 0
  br i1 %125, label %.critedge1.thread, label %.thread23

.thread23:                                        ; preds = %getint.exit, %112, %109, %107, %92
  %126 = phi i8* [ %storemerge7, %109 ], [ %120, %getint.exit ], [ %71, %92 ], [ %storemerge6, %112 ], [ %storemerge7, %107 ]
  %w.1 = phi i32 [ %111, %109 ], [ %119, %getint.exit ], [ 0, %92 ], [ 0, %112 ], [ %w.0, %107 ]
  %fl.1 = phi i32 [ %110, %109 ], [ %fl.0, %getint.exit ], [ %fl.0, %92 ], [ %fl.0, %112 ], [ %fl.0, %107 ]
  %l10n.3 = phi i32 [ %l10n.2, %109 ], [ %l10n.1, %getint.exit ], [ 0, %92 ], [ %l10n.1, %112 ], [ %l10n.2, %107 ]
  %127 = load i8* %126, align 1, !tbaa !0
  %128 = icmp eq i8 %127, 46
  br i1 %128, label %129, label %getint.exit16

; <label>:129                                     ; preds = %.thread23
  %130 = getelementptr inbounds i8* %126, i64 1
  %131 = load i8* %130, align 1, !tbaa !0
  %132 = icmp eq i8 %131, 42
  br i1 %132, label %133, label %170

; <label>:133                                     ; preds = %129
  %134 = getelementptr inbounds i8* %126, i64 2
  %135 = load i8* %134, align 1, !tbaa !0
  %136 = sext i8 %135 to i32
  %137 = add i32 %136, -48
  %138 = icmp ult i32 %137, 10
  br i1 %138, label %139, label %153

; <label>:139                                     ; preds = %133
  %140 = getelementptr inbounds i8* %126, i64 3
  %141 = load i8* %140, align 1, !tbaa !0
  %142 = icmp eq i8 %141, 36
  br i1 %142, label %143, label %153

; <label>:143                                     ; preds = %139
  %144 = sext i32 %137 to i64
  %145 = getelementptr inbounds i32* %nl_type, i64 %144
  store i32 10, i32* %145, align 4, !tbaa !6
  %146 = load i8* %134, align 1, !tbaa !0
  %147 = sext i8 %146 to i64
  %148 = add i64 %147, -48
  %149 = getelementptr inbounds %union.arg* %nl_arg, i64 %148, i32 0
  %150 = load i64* %149, align 8, !tbaa !9
  %151 = trunc i64 %150 to i32
  %152 = getelementptr inbounds i8* %126, i64 4
  br label %getint.exit16

; <label>:153                                     ; preds = %139, %133
  %154 = icmp eq i32 %l10n.3, 0
  br i1 %154, label %155, label %.critedge1.thread

; <label>:155                                     ; preds = %153
  br i1 %1, label %156, label %getint.exit16

; <label>:156                                     ; preds = %155
  %157 = load i32* %2, align 4
  %158 = icmp ult i32 %157, 41
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %156
  %160 = load i8** %3, align 8
  %161 = sext i32 %157 to i64
  %162 = getelementptr i8* %160, i64 %161
  %163 = add i32 %157, 8
  store i32 %163, i32* %2, align 4
  br label %167

; <label>:164                                     ; preds = %156
  %165 = load i8** %4, align 8
  %166 = getelementptr i8* %165, i64 8
  store i8* %166, i8** %4, align 8
  br label %167

; <label>:167                                     ; preds = %164, %159
  %.in = phi i8* [ %162, %159 ], [ %165, %164 ]
  %168 = bitcast i8* %.in to i32*
  %169 = load i32* %168, align 4
  br label %getint.exit16

; <label>:170                                     ; preds = %129
  %171 = sext i8 %131 to i32
  %172 = add i32 %171, -48
  %173 = icmp ult i32 %172, 10
  br i1 %173, label %.lr.ph.i14, label %getint.exit16

.lr.ph.i14:                                       ; preds = %.lr.ph.i14, %170
  %174 = phi i32 [ %181, %.lr.ph.i14 ], [ %171, %170 ]
  %175 = phi i8* [ %179, %.lr.ph.i14 ], [ %130, %170 ]
  %i.01.i13 = phi i32 [ %178, %.lr.ph.i14 ], [ 0, %170 ]
  %176 = mul nsw i32 %i.01.i13, 10
  %177 = add i32 %174, -48
  %178 = add i32 %177, %176
  %179 = getelementptr inbounds i8* %175, i64 1
  %180 = load i8* %179, align 1, !tbaa !0
  %181 = sext i8 %180 to i32
  %182 = add i32 %181, -48
  %183 = icmp ult i32 %182, 10
  br i1 %183, label %.lr.ph.i14, label %getint.exit16

getint.exit16:                                    ; preds = %.lr.ph.i14, %170, %167, %155, %143, %.thread23
  %184 = phi i8* [ %152, %143 ], [ %134, %155 ], [ %134, %167 ], [ %130, %170 ], [ %126, %.thread23 ], [ %179, %.lr.ph.i14 ]
  %p.0 = phi i32 [ %151, %143 ], [ 0, %155 ], [ %169, %167 ], [ 0, %170 ], [ -1, %.thread23 ], [ %178, %.lr.ph.i14 ]
  br label %._crit_edge103

._crit_edge103:                                   ; preds = %190, %getint.exit16
  %185 = phi i8* [ %184, %getint.exit16 ], [ %191, %190 ]
  %st.0 = phi i32 [ 0, %getint.exit16 ], [ %197, %190 ]
  %186 = load i8* %185, align 1, !tbaa !0
  %187 = sext i8 %186 to i32
  %188 = add i32 %187, -65
  %189 = icmp ugt i32 %188, 57
  br i1 %189, label %.critedge1.thread, label %190

; <label>:190                                     ; preds = %._crit_edge103
  %191 = getelementptr inbounds i8* %185, i64 1
  %192 = sext i8 %186 to i64
  %193 = add i64 %192, -65
  %194 = zext i32 %st.0 to i64
  %195 = getelementptr inbounds [8 x [58 x i8]]* @states, i64 0, i64 %194, i64 %193
  %196 = load i8* %195, align 1, !tbaa !0
  %197 = zext i8 %196 to i32
  %198 = add i32 %197, -1
  %199 = icmp ult i32 %198, 8
  br i1 %199, label %._crit_edge103, label %200

; <label>:200                                     ; preds = %190
  %201 = icmp eq i8 %196, 0
  br i1 %201, label %.critedge1.thread, label %202

; <label>:202                                     ; preds = %200
  %203 = icmp eq i8 %196, 21
  %204 = icmp sgt i32 %argpos.0, -1
  br i1 %203, label %205, label %207

; <label>:205                                     ; preds = %202
  br i1 %204, label %.critedge1.thread, label %206

; <label>:206                                     ; preds = %205
  br i1 %1, label %._crit_edge102, label %.backedge

; <label>:207                                     ; preds = %202
  br i1 %204, label %209, label %208

; <label>:208                                     ; preds = %207
  br i1 %1, label %.thread25, label %.critedge1.thread

.thread25:                                        ; preds = %208
  call fastcc void @pop_arg(%union.arg* %arg, i32 %197, [1 x %struct.__va_list_tag.723]* %ap) optsize
  br label %._crit_edge102

; <label>:209                                     ; preds = %207
  %210 = sext i32 %argpos.0 to i64
  %211 = getelementptr inbounds i32* %nl_type, i64 %210
  store i32 %197, i32* %211, align 4, !tbaa !6
  %212 = getelementptr inbounds %union.arg* %nl_arg, i64 %210, i32 0
  %213 = load i64* %212, align 8
  store i64 %213, i64* %7, align 8
  br i1 %1, label %._crit_edge102, label %.backedge

._crit_edge102:                                   ; preds = %209, %.thread25, %206
  %214 = load i8* %185, align 1, !tbaa !0
  %215 = sext i8 %214 to i32
  %216 = icmp eq i32 %st.0, 0
  br i1 %216, label %221, label %217

; <label>:217                                     ; preds = %._crit_edge102
  %218 = and i32 %215, 15
  %219 = and i32 %215, -33
  %220 = icmp eq i32 %218, 3
  %. = select i1 %220, i32 %219, i32 %215
  br label %221

; <label>:221                                     ; preds = %217, %._crit_edge102
  %t.0 = phi i32 [ %215, %._crit_edge102 ], [ %., %217 ]
  %222 = and i32 %fl.1, 8192
  %223 = and i32 %fl.1, -65537
  %224 = icmp eq i32 %222, 0
  %fl.1. = select i1 %224, i32 %fl.1, i32 %223
  switch i32 %t.0, label %379 [
    i32 110, label %225
    i32 112, label %252
    i32 120, label %._crit_edge107
    i32 88, label %._crit_edge107
    i32 111, label %276
    i32 100, label %._crit_edge106
    i32 105, label %._crit_edge106
    i32 117, label %._crit_edge99
    i32 99, label %323
    i32 109, label %326
    i32 115, label %330
    i32 67, label %345
    i32 83, label %._crit_edge
    i32 101, label %.backedge
    i32 102, label %.backedge
    i32 103, label %.backedge
    i32 97, label %.backedge
    i32 69, label %.backedge
    i32 70, label %.backedge
    i32 71, label %.backedge
    i32 65, label %.backedge
  ]

._crit_edge99:                                    ; preds = %221
  %.pre104 = load i64* %7, align 8, !tbaa !9
  br label %301

._crit_edge:                                      ; preds = %221
  %.pre105 = load i8** %6, align 8, !tbaa !7
  br label %349

; <label>:225                                     ; preds = %221
  switch i32 %st.0, label %.backedge [
    i32 0, label %226
    i32 1, label %229
    i32 2, label %233
    i32 3, label %237
    i32 4, label %241
    i32 6, label %244
    i32 7, label %248
  ]

; <label>:226                                     ; preds = %225
  %227 = load i8** %6, align 8, !tbaa !7
  %228 = bitcast i8* %227 to i32*
  store i32 %cnt.1, i32* %228, align 4, !tbaa !6
  br label %.backedge

; <label>:229                                     ; preds = %225
  %230 = sext i32 %cnt.1 to i64
  %231 = load i8** %6, align 8, !tbaa !7
  %232 = bitcast i8* %231 to i64*
  store i64 %230, i64* %232, align 8, !tbaa !5
  br label %.backedge

; <label>:233                                     ; preds = %225
  %234 = sext i32 %cnt.1 to i64
  %235 = load i8** %6, align 8, !tbaa !7
  %236 = bitcast i8* %235 to i64*
  store i64 %234, i64* %236, align 8, !tbaa !9
  br label %.backedge

; <label>:237                                     ; preds = %225
  %238 = trunc i32 %cnt.1 to i16
  %239 = load i8** %6, align 8, !tbaa !7
  %240 = bitcast i8* %239 to i16*
  store i16 %238, i16* %240, align 2, !tbaa !8
  br label %.backedge

; <label>:241                                     ; preds = %225
  %242 = trunc i32 %cnt.1 to i8
  %243 = load i8** %6, align 8, !tbaa !7
  store i8 %242, i8* %243, align 1, !tbaa !0
  br label %.backedge

; <label>:244                                     ; preds = %225
  %245 = sext i32 %cnt.1 to i64
  %246 = load i8** %6, align 8, !tbaa !7
  %247 = bitcast i8* %246 to i64*
  store i64 %245, i64* %247, align 8, !tbaa !5
  br label %.backedge

; <label>:248                                     ; preds = %225
  %249 = sext i32 %cnt.1 to i64
  %250 = load i8** %6, align 8, !tbaa !7
  %251 = bitcast i8* %250 to i64*
  store i64 %249, i64* %251, align 8, !tbaa !9
  br label %.backedge

; <label>:252                                     ; preds = %221
  %253 = icmp ugt i32 %p.0, 16
  %254 = select i1 %253, i32 %p.0, i32 16
  %255 = or i32 %fl.1., 8
  br label %._crit_edge107

._crit_edge107:                                   ; preds = %252, %221, %221
  %p.1 = phi i32 [ %254, %252 ], [ %p.0, %221 ], [ %p.0, %221 ]
  %fl.3 = phi i32 [ %255, %252 ], [ %fl.1., %221 ], [ %fl.1., %221 ]
  %t.1 = phi i32 [ 120, %252 ], [ %t.0, %221 ], [ %t.0, %221 ]
  %256 = load i64* %7, align 8, !tbaa !9
  %257 = and i32 %t.1, 32
  %258 = icmp eq i64 %256, 0
  br i1 %258, label %fmt_u.exit, label %.lr.ph.i17

.lr.ph.i17:                                       ; preds = %.lr.ph.i17, %._crit_edge107
  %.03.i = phi i64 [ %266, %.lr.ph.i17 ], [ %256, %._crit_edge107 ]
  %.012.i = phi i8* [ %265, %.lr.ph.i17 ], [ %5, %._crit_edge107 ]
  %259 = and i64 %.03.i, 15
  %260 = getelementptr inbounds [16 x i8]* @xdigits, i64 0, i64 %259
  %261 = load i8* %260, align 1, !tbaa !0
  %262 = zext i8 %261 to i32
  %263 = or i32 %262, %257
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds i8* %.012.i, i64 -1
  store i8 %264, i8* %265, align 1, !tbaa !0
  %266 = lshr i64 %.03.i, 4
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %fmt_x.exit, label %.lr.ph.i17

fmt_x.exit:                                       ; preds = %.lr.ph.i17
  %.pr26 = load i64* %7, align 8
  %268 = icmp eq i64 %.pr26, 0
  br i1 %268, label %fmt_u.exit, label %269

; <label>:269                                     ; preds = %fmt_x.exit
  %270 = and i32 %fl.3, 8
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %fmt_u.exit, label %272

; <label>:272                                     ; preds = %269
  %273 = ashr i32 %t.1, 4
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds [10 x i8]* @.str1910, i64 0, i64 %274
  br label %fmt_u.exit

; <label>:276                                     ; preds = %221
  %277 = load i64* %7, align 8, !tbaa !9
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %fmt_o.exit, label %.lr.ph.i20

.lr.ph.i20:                                       ; preds = %.lr.ph.i20, %276
  %.03.i18 = phi i64 [ %283, %.lr.ph.i20 ], [ %277, %276 ]
  %.012.i19 = phi i8* [ %282, %.lr.ph.i20 ], [ %5, %276 ]
  %279 = and i64 %.03.i18, 7
  %280 = or i64 %279, 48
  %281 = trunc i64 %280 to i8
  %282 = getelementptr inbounds i8* %.012.i19, i64 -1
  store i8 %281, i8* %282, align 1, !tbaa !0
  %283 = lshr i64 %.03.i18, 3
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %fmt_o.exit, label %.lr.ph.i20

fmt_o.exit:                                       ; preds = %.lr.ph.i20, %276
  %.01.lcssa.i21 = phi i8* [ %5, %276 ], [ %282, %.lr.ph.i20 ]
  %285 = and i32 %fl.1., 8
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %fmt_u.exit, label %287

; <label>:287                                     ; preds = %fmt_o.exit
  %288 = load i64* %7, align 8, !tbaa !9
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %fmt_u.exit, label %290

; <label>:290                                     ; preds = %287
  br label %fmt_u.exit

._crit_edge106:                                   ; preds = %221, %221
  %291 = load i64* %7, align 8, !tbaa !9
  %292 = icmp slt i64 %291, 0
  br i1 %292, label %293, label %295

; <label>:293                                     ; preds = %._crit_edge106
  %294 = sub i64 0, %291
  store i64 %294, i64* %7, align 8, !tbaa !9
  br label %301

; <label>:295                                     ; preds = %._crit_edge106
  %296 = and i32 %fl.1., 2048
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %301

; <label>:298                                     ; preds = %295
  %299 = and i32 %fl.1., 1
  %300 = icmp eq i32 %299, 0
  %.9 = select i1 %300, i8* getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 2)
  br label %301

; <label>:301                                     ; preds = %298, %295, %293, %._crit_edge99
  %302 = phi i64 [ %.pre104, %._crit_edge99 ], [ %294, %293 ], [ %291, %295 ], [ %291, %298 ]
  %prefix.0 = phi i8* [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %._crit_edge99 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %293 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 1), %295 ], [ %.9, %298 ]
  %pl.0 = phi i32 [ 0, %._crit_edge99 ], [ 1, %293 ], [ 1, %295 ], [ %299, %298 ]
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %fmt_u.exit, label %.lr.ph.i22

.lr.ph.i22:                                       ; preds = %.lr.ph.i22, %301
  %.13.i = phi i8* [ %307, %.lr.ph.i22 ], [ %5, %301 ]
  %y.02.i = phi i64 [ %308, %.lr.ph.i22 ], [ %302, %301 ]
  %304 = urem i64 %y.02.i, 10
  %305 = or i64 %304, 48
  %306 = trunc i64 %305 to i8
  %307 = getelementptr inbounds i8* %.13.i, i64 -1
  store i8 %306, i8* %307, align 1, !tbaa !0
  %308 = udiv i64 %y.02.i, 10
  %309 = icmp ult i64 %y.02.i, 10
  br i1 %309, label %fmt_u.exit, label %.lr.ph.i22

fmt_u.exit:                                       ; preds = %.lr.ph.i22, %301, %290, %287, %fmt_o.exit, %272, %269, %fmt_x.exit, %._crit_edge107
  %p.2 = phi i32 [ %p.0, %290 ], [ %p.0, %287 ], [ %p.1, %272 ], [ %p.1, %269 ], [ %p.1, %fmt_x.exit ], [ %p.0, %301 ], [ %p.1, %._crit_edge107 ], [ %p.0, %fmt_o.exit ], [ %p.0, %.lr.ph.i22 ]
  %fl.4 = phi i32 [ %fl.1., %290 ], [ %fl.1., %287 ], [ %fl.3, %272 ], [ %fl.3, %269 ], [ %fl.3, %fmt_x.exit ], [ %fl.1., %301 ], [ %fl.3, %._crit_edge107 ], [ %fl.1., %fmt_o.exit ], [ %fl.1., %.lr.ph.i22 ]
  %a.0 = phi i8* [ %.01.lcssa.i21, %290 ], [ %.01.lcssa.i21, %287 ], [ %265, %272 ], [ %265, %269 ], [ %265, %fmt_x.exit ], [ %5, %301 ], [ %5, %._crit_edge107 ], [ %.01.lcssa.i21, %fmt_o.exit ], [ %307, %.lr.ph.i22 ]
  %prefix.1 = phi i8* [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 5), %290 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %287 ], [ %275, %272 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %269 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %fmt_x.exit ], [ %prefix.0, %301 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %._crit_edge107 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %fmt_o.exit ], [ %prefix.0, %.lr.ph.i22 ]
  %pl.1 = phi i32 [ 1, %290 ], [ 0, %287 ], [ 2, %272 ], [ 0, %269 ], [ 0, %fmt_x.exit ], [ %pl.0, %301 ], [ 0, %._crit_edge107 ], [ 0, %fmt_o.exit ], [ %pl.0, %.lr.ph.i22 ]
  %310 = icmp sgt i32 %p.2, -1
  %311 = and i32 %fl.4, -65537
  %fl.5 = select i1 %310, i32 %311, i32 %fl.4
  %312 = load i64* %7, align 8, !tbaa !9
  %313 = icmp eq i64 %312, 0
  %314 = icmp eq i32 %p.2, 0
  %or.cond = and i1 %313, %314
  br i1 %or.cond, label %379, label %315

; <label>:315                                     ; preds = %fmt_u.exit
  %316 = sext i32 %p.2 to i64
  %317 = ptrtoint i8* %a.0 to i64
  %318 = sub i64 %8, %317
  %319 = zext i1 %313 to i64
  %320 = add nsw i64 %319, %318
  %321 = icmp sgt i64 %316, %320
  %.11 = select i1 %321, i64 %316, i64 %320
  %322 = trunc i64 %.11 to i32
  br label %379

; <label>:323                                     ; preds = %221
  %324 = load i64* %7, align 8, !tbaa !9
  %325 = trunc i64 %324 to i8
  store i8 %325, i8* %9, align 2, !tbaa !0
  br label %379

; <label>:326                                     ; preds = %221
  %327 = call i32* @__errno_location() nounwind readnone optsize
  %328 = load i32* %327, align 4, !tbaa !6
  %329 = call i8* @strerror(i32 %328) nounwind optsize
  br label %334

; <label>:330                                     ; preds = %221
  %331 = load i8** %6, align 8, !tbaa !7
  %332 = icmp eq i8* %331, null
  %333 = select i1 %332, i8* getelementptr inbounds ([7 x i8]* @.str2911, i64 0, i64 0), i8* %331
  br label %334

; <label>:334                                     ; preds = %330, %326
  %a.1 = phi i8* [ %329, %326 ], [ %333, %330 ]
  %335 = sext i32 %p.0 to i64
  %336 = call i8* @memchr(i8* %a.1, i32 0, i64 %335) nounwind optsize
  %337 = icmp eq i8* %336, null
  br i1 %337, label %338, label %340

; <label>:338                                     ; preds = %334
  %339 = getelementptr inbounds i8* %a.1, i64 %335
  br label %379

; <label>:340                                     ; preds = %334
  %341 = ptrtoint i8* %336 to i64
  %342 = ptrtoint i8* %a.1 to i64
  %343 = sub i64 %341, %342
  %344 = trunc i64 %343 to i32
  br label %379

; <label>:345                                     ; preds = %221
  %346 = load i64* %7, align 8, !tbaa !9
  %347 = trunc i64 %346 to i32
  store i32 %347, i32* %10, align 4, !tbaa !6
  store i32 0, i32* %11, align 4, !tbaa !6
  store i64 %.c, i64* %7, align 8, !tbaa !7
  %348 = bitcast [2 x i32]* %wc to i8*
  br label %349

; <label>:349                                     ; preds = %345, %._crit_edge
  %350 = phi i8* [ %.pre105, %._crit_edge ], [ %348, %345 ]
  %p.4 = phi i32 [ %p.0, %._crit_edge ], [ -1, %345 ]
  %351 = bitcast i8* %350 to i32*
  br label %352

; <label>:352                                     ; preds = %362, %349
  %l.1 = phi i32 [ 0, %349 ], [ %357, %362 ]
  %i.0 = phi i32 [ 0, %349 ], [ %363, %362 ]
  %ws.0 = phi i32* [ %351, %349 ], [ %356, %362 ]
  %353 = load i32* %ws.0, align 4, !tbaa !6
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %.critedge1, label %355

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds i32* %ws.0, i64 1
  %357 = call i32 @wctomb(i8* %12, i32 %353) nounwind optsize
  %358 = icmp sgt i32 %357, -1
  br i1 %358, label %359, label %.critedge1.thread

; <label>:359                                     ; preds = %355
  %360 = sub i32 %p.4, %i.0
  %361 = icmp ugt i32 %357, %360
  br i1 %361, label %.critedge1.thread27, label %362

; <label>:362                                     ; preds = %359
  %363 = add nsw i32 %357, %i.0
  br label %352

.critedge1:                                       ; preds = %352
  %364 = icmp slt i32 %l.1, 0
  br i1 %364, label %.critedge1.thread, label %.critedge1.thread27

.critedge1.thread27:                              ; preds = %.critedge1, %359
  call fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext 32, i32 %w.1, i32 %i.0, i32 %fl.1.) optsize
  br label %365

; <label>:365                                     ; preds = %372, %.critedge1.thread27
  %i.1 = phi i32 [ 0, %.critedge1.thread27 ], [ %370, %372 ]
  %ws.1 = phi i32* [ %351, %.critedge1.thread27 ], [ %373, %372 ]
  %366 = load i32* %ws.1, align 4, !tbaa !6
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %.thread29, label %368

; <label>:368                                     ; preds = %365
  %369 = call i32 @wctomb(i8* %12, i32 %366) nounwind optsize
  %370 = add nsw i32 %369, %i.1
  %371 = icmp sgt i32 %370, %i.0
  br i1 %371, label %.thread29, label %372

; <label>:372                                     ; preds = %368
  %373 = getelementptr inbounds i32* %ws.1, i64 1
  %374 = sext i32 %369 to i64
  %375 = call i64 @__fwritex(i8* %12, i64 %374, %struct.__FILE_s.85* %f) nounwind optsize
  br label %365

.thread29:                                        ; preds = %368, %365
  %376 = xor i32 %fl.1., 8192
  call fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext 32, i32 %w.1, i32 %i.0, i32 %376) optsize
  %377 = icmp sgt i32 %w.1, %i.0
  %378 = select i1 %377, i32 %w.1, i32 %i.0
  br label %.backedge

; <label>:379                                     ; preds = %340, %338, %323, %315, %fmt_u.exit, %221
  %p.5 = phi i32 [ %p.0, %221 ], [ 1, %323 ], [ %322, %315 ], [ %p.2, %fmt_u.exit ], [ %344, %340 ], [ %p.0, %338 ]
  %fl.6 = phi i32 [ %fl.1., %221 ], [ %223, %323 ], [ %fl.5, %315 ], [ %fl.5, %fmt_u.exit ], [ %223, %340 ], [ %223, %338 ]
  %z.1 = phi i8* [ %5, %221 ], [ %5, %323 ], [ %5, %315 ], [ %5, %fmt_u.exit ], [ %336, %340 ], [ %339, %338 ]
  %a.2 = phi i8* [ %13, %221 ], [ %9, %323 ], [ %a.0, %315 ], [ %5, %fmt_u.exit ], [ %a.1, %340 ], [ %a.1, %338 ]
  %prefix.2 = phi i8* [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %221 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %323 ], [ %prefix.1, %315 ], [ %prefix.1, %fmt_u.exit ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %340 ], [ getelementptr inbounds ([10 x i8]* @.str1910, i64 0, i64 0), %338 ]
  %pl.2 = phi i32 [ 0, %221 ], [ 0, %323 ], [ %pl.1, %315 ], [ %pl.1, %fmt_u.exit ], [ 0, %340 ], [ 0, %338 ]
  %380 = sext i32 %p.5 to i64
  %381 = ptrtoint i8* %z.1 to i64
  %382 = ptrtoint i8* %a.2 to i64
  %383 = sub i64 %381, %382
  %384 = icmp slt i64 %380, %383
  %385 = trunc i64 %383 to i32
  %p.6 = select i1 %384, i32 %385, i32 %p.5
  %386 = add nsw i32 %p.6, %pl.2
  %387 = icmp slt i32 %w.1, %386
  %w.2 = select i1 %387, i32 %386, i32 %w.1
  call fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext 32, i32 %w.2, i32 %386, i32 %fl.6) optsize
  %388 = sext i32 %pl.2 to i64
  %389 = call i64 @__fwritex(i8* %prefix.2, i64 %388, %struct.__FILE_s.85* %f) nounwind optsize
  %390 = xor i32 %fl.6, 65536
  call fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext 48, i32 %w.2, i32 %386, i32 %390) optsize
  call fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext 48, i32 %p.6, i32 %385, i32 0) optsize
  %391 = call i64 @__fwritex(i8* %a.2, i64 %383, %struct.__FILE_s.85* %f) nounwind optsize
  %392 = xor i32 %fl.6, 8192
  call fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext 32, i32 %w.2, i32 %386, i32 %392) optsize
  br label %.backedge

; <label>:393                                     ; preds = %22
  %394 = icmp eq %struct.__FILE_s.85* %f, null
  br i1 %394, label %395, label %.critedge1.thread

; <label>:395                                     ; preds = %393
  %396 = icmp eq i32 %l10n.0, 0
  br i1 %396, label %.critedge1.thread, label %.preheader

.preheader:                                       ; preds = %403, %395
  %indvars.iv67 = phi i64 [ %indvars.iv.next68, %403 ], [ 1, %395 ]
  %397 = trunc i64 %indvars.iv67 to i32
  %398 = icmp slt i32 %397, 10
  br i1 %398, label %399, label %.critedge3

; <label>:399                                     ; preds = %.preheader
  %400 = getelementptr inbounds i32* %nl_type, i64 %indvars.iv67
  %401 = load i32* %400, align 4, !tbaa !6
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %.critedge3, label %403

; <label>:403                                     ; preds = %399
  %404 = getelementptr inbounds %union.arg* %nl_arg, i64 %indvars.iv67
  call fastcc void @pop_arg(%union.arg* %404, i32 %401, [1 x %struct.__va_list_tag.723]* %ap) optsize
  %indvars.iv.next68 = add i64 %indvars.iv67, 1
  br label %.preheader

.critedge3:                                       ; preds = %411, %399, %.preheader
  %indvars.iv65 = phi i64 [ %indvars.iv.next66, %411 ], [ %indvars.iv67, %.preheader ], [ %indvars.iv67, %399 ]
  %405 = trunc i64 %indvars.iv65 to i32
  %406 = icmp slt i32 %405, 10
  br i1 %406, label %407, label %.critedge4

; <label>:407                                     ; preds = %.critedge3
  %408 = getelementptr inbounds i32* %nl_type, i64 %indvars.iv65
  %409 = load i32* %408, align 4, !tbaa !6
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %411, label %.critedge4

; <label>:411                                     ; preds = %407
  %indvars.iv.next66 = add i64 %indvars.iv65, 1
  br label %.critedge3

.critedge4:                                       ; preds = %407, %.critedge3
  %.12 = select i1 %406, i32 -1, i32 1
  br label %.critedge1.thread

.critedge1.thread:                                ; preds = %.critedge4, %395, %393, %.critedge1, %355, %208, %205, %200, %._crit_edge103, %153, %getint.exit, %90
  %.0 = phi i32 [ %cnt.1, %393 ], [ 0, %395 ], [ %.12, %.critedge4 ], [ -1, %._crit_edge103 ], [ -1, %355 ], [ -1, %.critedge1 ], [ 0, %208 ], [ -1, %205 ], [ -1, %200 ], [ -1, %153 ], [ -1, %getint.exit ], [ -1, %90 ]
  ret i32 %.0
}

define internal fastcc void @pop_arg(%union.arg* nocapture %arg, i32 %type, [1 x %struct.__va_list_tag.723]* %ap) nounwind uwtable optsize {
  %1 = icmp ugt i32 %type, 22
  br i1 %1, label %193, label %2

; <label>:2                                       ; preds = %0
  switch i32 %type, label %193 [
    i32 9, label %3
    i32 10, label %21
    i32 11, label %40
    i32 13, label %59
    i32 14, label %77
    i32 12, label %95
    i32 15, label %113
    i32 16, label %133
    i32 17, label %153
    i32 18, label %173
  ]

; <label>:3                                       ; preds = %2
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %5 = load i32* %4, align 4
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %9 = load i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8* %9, i64 %10
  %12 = add i32 %5, 8
  store i32 %12, i32* %4, align 4
  br label %17

; <label>:13                                      ; preds = %3
  %14 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %15 = load i8** %14, align 8
  %16 = getelementptr i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

; <label>:17                                      ; preds = %13, %7
  %.in10 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %18 = bitcast i8* %.in10 to i8**
  %19 = load i8** %18, align 8
  %20 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  %.c = ptrtoint i8* %19 to i64
  store i64 %.c, i64* %20, align 8, !tbaa !7
  br label %193

; <label>:21                                      ; preds = %2
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp ult i32 %23, 41
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %21
  %26 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %27 = load i8** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr i8* %27, i64 %28
  %30 = add i32 %23, 8
  store i32 %30, i32* %22, align 4
  br label %35

; <label>:31                                      ; preds = %21
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %33 = load i8** %32, align 8
  %34 = getelementptr i8* %33, i64 8
  store i8* %34, i8** %32, align 8
  br label %35

; <label>:35                                      ; preds = %31, %25
  %.in9 = phi i8* [ %29, %25 ], [ %33, %31 ]
  %36 = bitcast i8* %.in9 to i32*
  %37 = load i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %38, i64* %39, align 8, !tbaa !9
  br label %193

; <label>:40                                      ; preds = %2
  %41 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %42 = load i32* %41, align 4
  %43 = icmp ult i32 %42, 41
  br i1 %43, label %44, label %50

; <label>:44                                      ; preds = %40
  %45 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %46 = load i8** %45, align 8
  %47 = sext i32 %42 to i64
  %48 = getelementptr i8* %46, i64 %47
  %49 = add i32 %42, 8
  store i32 %49, i32* %41, align 4
  br label %54

; <label>:50                                      ; preds = %40
  %51 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %52 = load i8** %51, align 8
  %53 = getelementptr i8* %52, i64 8
  store i8* %53, i8** %51, align 8
  br label %54

; <label>:54                                      ; preds = %50, %44
  %.in8 = phi i8* [ %48, %44 ], [ %52, %50 ]
  %55 = bitcast i8* %.in8 to i32*
  %56 = load i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %57, i64* %58, align 8, !tbaa !9
  br label %193

; <label>:59                                      ; preds = %2
  %60 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %61 = load i32* %60, align 4
  %62 = icmp ult i32 %61, 41
  br i1 %62, label %63, label %69

; <label>:63                                      ; preds = %59
  %64 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %65 = load i8** %64, align 8
  %66 = sext i32 %61 to i64
  %67 = getelementptr i8* %65, i64 %66
  %68 = add i32 %61, 8
  store i32 %68, i32* %60, align 4
  br label %73

; <label>:69                                      ; preds = %59
  %70 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %71 = load i8** %70, align 8
  %72 = getelementptr i8* %71, i64 8
  store i8* %72, i8** %70, align 8
  br label %73

; <label>:73                                      ; preds = %69, %63
  %.in7 = phi i8* [ %67, %63 ], [ %71, %69 ]
  %74 = bitcast i8* %.in7 to i64*
  %75 = load i64* %74, align 8
  %76 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %75, i64* %76, align 8, !tbaa !9
  br label %193

; <label>:77                                      ; preds = %2
  %78 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %79 = load i32* %78, align 4
  %80 = icmp ult i32 %79, 41
  br i1 %80, label %81, label %87

; <label>:81                                      ; preds = %77
  %82 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %83 = load i8** %82, align 8
  %84 = sext i32 %79 to i64
  %85 = getelementptr i8* %83, i64 %84
  %86 = add i32 %79, 8
  store i32 %86, i32* %78, align 4
  br label %91

; <label>:87                                      ; preds = %77
  %88 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %89 = load i8** %88, align 8
  %90 = getelementptr i8* %89, i64 8
  store i8* %90, i8** %88, align 8
  br label %91

; <label>:91                                      ; preds = %87, %81
  %.in6 = phi i8* [ %85, %81 ], [ %89, %87 ]
  %92 = bitcast i8* %.in6 to i64*
  %93 = load i64* %92, align 8
  %94 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %93, i64* %94, align 8, !tbaa !9
  br label %193

; <label>:95                                      ; preds = %2
  %96 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %97 = load i32* %96, align 4
  %98 = icmp ult i32 %97, 41
  br i1 %98, label %99, label %105

; <label>:99                                      ; preds = %95
  %100 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %101 = load i8** %100, align 8
  %102 = sext i32 %97 to i64
  %103 = getelementptr i8* %101, i64 %102
  %104 = add i32 %97, 8
  store i32 %104, i32* %96, align 4
  br label %109

; <label>:105                                     ; preds = %95
  %106 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %107 = load i8** %106, align 8
  %108 = getelementptr i8* %107, i64 8
  store i8* %108, i8** %106, align 8
  br label %109

; <label>:109                                     ; preds = %105, %99
  %.in5 = phi i8* [ %103, %99 ], [ %107, %105 ]
  %110 = bitcast i8* %.in5 to i64*
  %111 = load i64* %110, align 8
  %112 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %111, i64* %112, align 8, !tbaa !9
  br label %193

; <label>:113                                     ; preds = %2
  %114 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %115 = load i32* %114, align 4
  %116 = icmp ult i32 %115, 41
  br i1 %116, label %117, label %123

; <label>:117                                     ; preds = %113
  %118 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %119 = load i8** %118, align 8
  %120 = sext i32 %115 to i64
  %121 = getelementptr i8* %119, i64 %120
  %122 = add i32 %115, 8
  store i32 %122, i32* %114, align 4
  br label %127

; <label>:123                                     ; preds = %113
  %124 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %125 = load i8** %124, align 8
  %126 = getelementptr i8* %125, i64 8
  store i8* %126, i8** %124, align 8
  br label %127

; <label>:127                                     ; preds = %123, %117
  %.in3 = phi i8* [ %121, %117 ], [ %125, %123 ]
  %128 = bitcast i8* %.in3 to i32*
  %129 = load i32* %128, align 4
  %130 = zext i32 %129 to i64
  %sext4 = shl i64 %130, 48
  %131 = ashr exact i64 %sext4, 48
  %132 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %131, i64* %132, align 8, !tbaa !9
  br label %193

; <label>:133                                     ; preds = %2
  %134 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %135 = load i32* %134, align 4
  %136 = icmp ult i32 %135, 41
  br i1 %136, label %137, label %143

; <label>:137                                     ; preds = %133
  %138 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %139 = load i8** %138, align 8
  %140 = sext i32 %135 to i64
  %141 = getelementptr i8* %139, i64 %140
  %142 = add i32 %135, 8
  store i32 %142, i32* %134, align 4
  br label %147

; <label>:143                                     ; preds = %133
  %144 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %145 = load i8** %144, align 8
  %146 = getelementptr i8* %145, i64 8
  store i8* %146, i8** %144, align 8
  br label %147

; <label>:147                                     ; preds = %143, %137
  %.in2 = phi i8* [ %141, %137 ], [ %145, %143 ]
  %148 = bitcast i8* %.in2 to i32*
  %149 = load i32* %148, align 4
  %150 = zext i32 %149 to i64
  %151 = and i64 %150, 65535
  %152 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %151, i64* %152, align 8, !tbaa !9
  br label %193

; <label>:153                                     ; preds = %2
  %154 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %155 = load i32* %154, align 4
  %156 = icmp ult i32 %155, 41
  br i1 %156, label %157, label %163

; <label>:157                                     ; preds = %153
  %158 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %159 = load i8** %158, align 8
  %160 = sext i32 %155 to i64
  %161 = getelementptr i8* %159, i64 %160
  %162 = add i32 %155, 8
  store i32 %162, i32* %154, align 4
  br label %167

; <label>:163                                     ; preds = %153
  %164 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %165 = load i8** %164, align 8
  %166 = getelementptr i8* %165, i64 8
  store i8* %166, i8** %164, align 8
  br label %167

; <label>:167                                     ; preds = %163, %157
  %.in1 = phi i8* [ %161, %157 ], [ %165, %163 ]
  %168 = bitcast i8* %.in1 to i32*
  %169 = load i32* %168, align 4
  %170 = zext i32 %169 to i64
  %sext = shl i64 %170, 56
  %171 = ashr exact i64 %sext, 56
  %172 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %171, i64* %172, align 8, !tbaa !9
  br label %193

; <label>:173                                     ; preds = %2
  %174 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 0
  %175 = load i32* %174, align 4
  %176 = icmp ult i32 %175, 41
  br i1 %176, label %177, label %183

; <label>:177                                     ; preds = %173
  %178 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 3
  %179 = load i8** %178, align 8
  %180 = sext i32 %175 to i64
  %181 = getelementptr i8* %179, i64 %180
  %182 = add i32 %175, 8
  store i32 %182, i32* %174, align 4
  br label %187

; <label>:183                                     ; preds = %173
  %184 = getelementptr inbounds [1 x %struct.__va_list_tag.723]* %ap, i64 0, i64 0, i32 2
  %185 = load i8** %184, align 8
  %186 = getelementptr i8* %185, i64 8
  store i8* %186, i8** %184, align 8
  br label %187

; <label>:187                                     ; preds = %183, %177
  %.in = phi i8* [ %181, %177 ], [ %185, %183 ]
  %188 = bitcast i8* %.in to i32*
  %189 = load i32* %188, align 4
  %190 = zext i32 %189 to i64
  %191 = and i64 %190, 255
  %192 = getelementptr inbounds %union.arg* %arg, i64 0, i32 0
  store i64 %191, i64* %192, align 8, !tbaa !9
  br label %193

; <label>:193                                     ; preds = %187, %167, %147, %127, %109, %91, %73, %54, %35, %17, %2, %0
  ret void
}

define internal fastcc void @pad(%struct.__FILE_s.85* %f, i8 signext %c, i32 %w, i32 %l, i32 %fl) nounwind uwtable optsize {
  %pad = alloca [256 x i8], align 16
  %1 = and i32 %fl, 73728
  %2 = icmp eq i32 %1, 0
  %3 = icmp slt i32 %l, %w
  %or.cond = and i1 %2, %3
  br i1 %or.cond, label %4, label %18

; <label>:4                                       ; preds = %0
  %5 = sub nsw i32 %w, %l
  %6 = getelementptr inbounds [256 x i8]* %pad, i64 0, i64 0
  %7 = sext i8 %c to i32
  %8 = icmp ugt i32 %5, 256
  %9 = sext i32 %5 to i64
  %10 = select i1 %8, i64 256, i64 %9
  %11 = call i8* @memset(i8* %6, i32 %7, i64 %10) nounwind optsize
  %12 = icmp ugt i32 %5, 255
  br i1 %12, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph, %4
  %.01 = phi i32 [ %14, %.lr.ph ], [ %5, %4 ]
  %13 = call i64 @__fwritex(i8* %6, i64 256, %struct.__FILE_s.85* %f) nounwind optsize
  %14 = add i32 %.01, -256
  %15 = icmp ugt i32 %14, 255
  br i1 %15, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %4
  %.0.lcssa = phi i32 [ %5, %4 ], [ %14, %.lr.ph ]
  %16 = sext i32 %.0.lcssa to i64
  %17 = call i64 @__fwritex(i8* %6, i64 %16, %struct.__FILE_s.85* %f) nounwind optsize
  br label %18

; <label>:18                                      ; preds = %._crit_edge, %0
  ret void
}

define i32 @vfscanf(%struct.__FILE_s.94* %f, i8* %fmt, %struct.__va_list_tag.95* %ap) nounwind uwtable optsize {
  %r = alloca %struct.rctx.726, align 8
  %1 = call i64 @strlen(i8* %fmt) nounwind optsize
  %2 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 0
  store void (%struct.rctx.726*)* @f_read, void (%struct.rctx.726*)** %2, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 1
  %4 = bitcast %struct.__FILE_s.94* %f to i8*
  store i8* %4, i8** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 2
  store i32 0, i32* %5, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 3
  store i32 (...)* bitcast (i32 (i32)* @isspace to i32 (...)*), i32 (...)** %6, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 4
  store i32 0, i32* %7, align 8, !tbaa !6
  %8 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 5
  store i32 0, i32* %8, align 4, !tbaa !6
  %9 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 6
  store i32 0, i32* %9, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 7
  store i32 0, i32* %10, align 4, !tbaa !6
  %11 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 8
  store i32 0, i32* %11, align 8, !tbaa !6
  %12 = add i64 %1, 1
  %13 = alloca i32, i64 %12, align 16
  %14 = icmp ugt i64 %1, 1048576
  br i1 %14, label %15, label %.preheader

; <label>:15                                      ; preds = %0
  %16 = call i32* @__errno_location() nounwind readnone optsize
  store i32 12, i32* %16, align 4, !tbaa !6
  br label %32

.preheader:                                       ; preds = %.preheader, %0
  %i.01 = phi i64 [ %21, %.preheader ], [ 0, %0 ]
  %17 = getelementptr inbounds i8* %fmt, i64 %i.01
  %18 = load i8* %17, align 1, !tbaa !0
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i32* %13, i64 %i.01
  store i32 %19, i32* %20, align 4, !tbaa !6
  %21 = add i64 %i.01, 1
  %22 = icmp ugt i64 %21, %1
  br i1 %22, label %23, label %.preheader

; <label>:23                                      ; preds = %.preheader
  %24 = call i32 bitcast (i32 (%struct.rctx*, i32*, %struct.__va_list_tag.541*)* @__scanf to i32 (%struct.rctx.726*, i32*, %struct.__va_list_tag.95*)*)(%struct.rctx.726* %r, i32* %13, %struct.__va_list_tag.95* %ap) nounwind optsize
  %25 = load i32* %10, align 4, !tbaa !6
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %32, label %27

; <label>:27                                      ; preds = %23
  %28 = load i32* %9, align 8, !tbaa !6
  %29 = icmp sgt i32 %28, -1
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %27
  %31 = call i32 bitcast (i32 (i32, %struct.__FILE_s.706*)* @ungetc to i32 (i32, %struct.__FILE_s.94*)*)(i32 %28, %struct.__FILE_s.94* %f) nounwind optsize
  br label %32

; <label>:32                                      ; preds = %30, %27, %23, %15
  %.0 = phi i32 [ -1, %15 ], [ %24, %23 ], [ %24, %30 ], [ %24, %27 ]
  ret i32 %.0
}

define internal void @f_read(%struct.rctx.726* nocapture %r) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds i8* %2, i64 8
  %4 = bitcast i8* %3 to i8**
  %5 = load i8** %4, align 8, !tbaa !7
  %6 = getelementptr inbounds i8* %2, i64 16
  %7 = bitcast i8* %6 to i8**
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = icmp ult i8* %5, %8
  br i1 %9, label %.thread, label %14

.thread:                                          ; preds = %0
  %10 = getelementptr inbounds i8* %5, i64 1
  store i8* %10, i8** %4, align 8, !tbaa !7
  %11 = load i8* %5, align 1, !tbaa !0
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 6
  store i32 %12, i32* %13, align 4, !tbaa !6
  br label %19

; <label>:14                                      ; preds = %0
  %15 = bitcast i8* %2 to %struct.__FILE_s.94*
  %16 = tail call i32 bitcast (i32 (%struct.__FILE_s.69*)* @__uflow to i32 (%struct.__FILE_s.94*)*)(%struct.__FILE_s.94* %15) nounwind optsize
  %17 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 6
  store i32 %16, i32* %17, align 4, !tbaa !6
  %18 = icmp sgt i32 %16, -1
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %14, %.thread
  %20 = getelementptr inbounds %struct.rctx.726* %r, i64 0, i32 4
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %20, align 4, !tbaa !6
  br label %23

; <label>:23                                      ; preds = %19, %14
  ret void
}

define i32 @vfwprintf(%struct.__FILE_s.118* %f, i32* %fmt, %struct.__va_list_tag.119* %ap) nounwind uwtable optsize {
  %ap2 = alloca [1 x %struct.__va_list_tag.119], align 16
  %nl_type = alloca [9 x i32], align 16
  %nl_arg = alloca [9 x %union.arg.729], align 16
  %1 = bitcast [9 x i32]* %nl_type to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 36, i32 16, i1 false)
  %2 = bitcast [1 x %struct.__va_list_tag.119]* %ap2 to i8*
  %3 = bitcast %struct.__va_list_tag.119* %ap to i8*
  call void @llvm.va_copy(i8* %2, i8* %3)
  %4 = getelementptr inbounds [9 x %union.arg.729]* %nl_arg, i64 0, i64 0
  %5 = getelementptr inbounds [9 x i32]* %nl_type, i64 0, i64 0
  %6 = call fastcc i32 @wprintf_core(%struct.__FILE_s.118* null, i32* %fmt, [1 x %struct.__va_list_tag.119]* %ap2, %union.arg.729* %4, i32* %5) optsize
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %10, label %8

; <label>:8                                       ; preds = %0
  %9 = call fastcc i32 @wprintf_core(%struct.__FILE_s.118* %f, i32* %fmt, [1 x %struct.__va_list_tag.119]* %ap2, %union.arg.729* %4, i32* %5) optsize
  call void @llvm.va_end(i8* %2)
  br label %10

; <label>:10                                      ; preds = %8, %0
  %.0 = phi i32 [ %9, %8 ], [ -1, %0 ]
  ret i32 %.0
}

define internal fastcc i32 @wprintf_core(%struct.__FILE_s.118* %f, i32* %fmt, [1 x %struct.__va_list_tag.119]* %ap, %union.arg.729* nocapture %nl_arg, i32* nocapture %nl_type) nounwind uwtable optsize {
  %arg = alloca %union.arg.729, align 16
  %charfmt = alloca [16 x i8], align 16
  %wc = alloca i32, align 4
  %1 = getelementptr inbounds %struct.__FILE_s.118* %f, i64 0, i32 0
  %2 = icmp ne %struct.__FILE_s.118* %f, null
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %6 = getelementptr inbounds [16 x i8]* %charfmt, i64 0, i64 0
  %7 = getelementptr inbounds %union.arg.729* %arg, i64 0, i32 0
  %8 = bitcast %union.arg.729* %arg to i64*
  %9 = bitcast %union.arg.729* %arg to i8**
  %10 = bitcast %union.arg.729* %arg to i8*
  br label %out.exit28

out.exit28:                                       ; preds = %._crit_edge95, %._crit_edge93, %322, %319, %._crit_edge, %out.exit23, %.lr.ph.i26, %271, %251, %246, %242, %238, %235, %231, %227, %223, %220, %219, %207, %204, %out.exit, %.lr.ph.i, %0
  %11 = phi i32* [ %fmt, %0 ], [ %36, %out.exit ], [ %190, %322 ], [ %190, %._crit_edge95 ], [ %190, %._crit_edge93 ], [ %190, %251 ], [ %190, %246 ], [ %190, %219 ], [ %190, %242 ], [ %190, %238 ], [ %190, %235 ], [ %190, %231 ], [ %190, %227 ], [ %190, %223 ], [ %190, %220 ], [ %190, %204 ], [ %190, %207 ], [ %190, %out.exit23 ], [ %190, %319 ], [ %190, %._crit_edge ], [ %190, %271 ], [ %190, %.lr.ph.i26 ], [ %36, %.lr.ph.i ]
  %l10n.0 = phi i32 [ 0, %0 ], [ %l10n.0, %out.exit ], [ %l10n.3, %322 ], [ %l10n.3, %._crit_edge95 ], [ %l10n.3, %._crit_edge93 ], [ %l10n.3, %251 ], [ %l10n.3, %246 ], [ %l10n.3, %219 ], [ %l10n.3, %242 ], [ %l10n.3, %238 ], [ %l10n.3, %235 ], [ %l10n.3, %231 ], [ %l10n.3, %227 ], [ %l10n.3, %223 ], [ %l10n.3, %220 ], [ %l10n.3, %204 ], [ %l10n.3, %207 ], [ %l10n.3, %out.exit23 ], [ %l10n.3, %319 ], [ %l10n.3, %._crit_edge ], [ %l10n.3, %271 ], [ %l10n.3, %.lr.ph.i26 ], [ %l10n.0, %.lr.ph.i ]
  %cnt.0 = phi i32 [ 0, %0 ], [ %cnt.1, %out.exit ], [ %cnt.1, %322 ], [ %cnt.1, %._crit_edge95 ], [ %cnt.1, %._crit_edge93 ], [ %cnt.1, %251 ], [ %cnt.1, %246 ], [ %cnt.1, %219 ], [ %cnt.1, %242 ], [ %cnt.1, %238 ], [ %cnt.1, %235 ], [ %cnt.1, %231 ], [ %cnt.1, %227 ], [ %cnt.1, %223 ], [ %cnt.1, %220 ], [ %cnt.1, %204 ], [ %cnt.1, %207 ], [ %cnt.1, %out.exit23 ], [ %cnt.1, %319 ], [ %cnt.1, %._crit_edge ], [ %cnt.1, %271 ], [ %cnt.1, %.lr.ph.i26 ], [ %cnt.1, %.lr.ph.i ]
  %l.0 = phi i32 [ 0, %0 ], [ %41, %out.exit ], [ %41, %322 ], [ %353, %._crit_edge95 ], [ %351, %._crit_edge93 ], [ 1, %251 ], [ 1, %246 ], [ %41, %219 ], [ %41, %242 ], [ %41, %238 ], [ %41, %235 ], [ %41, %231 ], [ %41, %227 ], [ %41, %223 ], [ %41, %220 ], [ %41, %204 ], [ %41, %207 ], [ %w.2, %out.exit23 ], [ %w.3, %319 ], [ %w.3, %._crit_edge ], [ %w.2, %271 ], [ %w.2, %.lr.ph.i26 ], [ %41, %.lr.ph.i ]
  %i.0 = phi i32 [ undef, %0 ], [ %i.0, %out.exit ], [ %i.0, %322 ], [ %i.0, %._crit_edge95 ], [ %i.0, %._crit_edge93 ], [ %i.0, %251 ], [ %i.0, %246 ], [ %i.0, %219 ], [ %i.0, %242 ], [ %i.0, %238 ], [ %i.0, %235 ], [ %i.0, %231 ], [ %i.0, %227 ], [ %i.0, %223 ], [ %i.0, %220 ], [ %i.0, %204 ], [ %i.0, %207 ], [ %i.0, %out.exit23 ], [ %i.3.lcssa, %319 ], [ %i.3.lcssa, %._crit_edge ], [ %i.0, %271 ], [ %i.0, %.lr.ph.i26 ], [ %i.0, %.lr.ph.i ]
  %12 = icmp sgt i32 %cnt.0, -1
  br i1 %12, label %13, label %24

; <label>:13                                      ; preds = %out.exit28
  %14 = sub nsw i32 2147483647, %cnt.0
  %15 = icmp sgt i32 %l.0, %14
  br i1 %15, label %16, label %22

; <label>:16                                      ; preds = %13
  %17 = load i32* %1, align 4, !tbaa !6
  %18 = and i32 %17, 32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

; <label>:20                                      ; preds = %16
  %21 = call i32* @__errno_location() nounwind readnone optsize
  store i32 75, i32* %21, align 4, !tbaa !6
  br label %24

; <label>:22                                      ; preds = %13
  %23 = add nsw i32 %l.0, %cnt.0
  br label %24

; <label>:24                                      ; preds = %22, %20, %16, %out.exit28
  %cnt.1 = phi i32 [ %23, %22 ], [ %cnt.0, %out.exit28 ], [ -1, %16 ], [ -1, %20 ]
  %25 = load i32* %11, align 4, !tbaa !6
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %354, label %.preheader40

.preheader40:                                     ; preds = %29, %24
  %27 = phi i32 [ %.pre, %29 ], [ %25, %24 ]
  %28 = phi i32* [ %30, %29 ], [ %11, %24 ]
  switch i32 %27, label %29 [
    i32 0, label %.critedge
    i32 37, label %.critedge
  ]

; <label>:29                                      ; preds = %.preheader40
  %30 = getelementptr inbounds i32* %28, i64 1
  %.pre = load i32* %30, align 4, !tbaa !6
  br label %.preheader40

.critedge:                                        ; preds = %.preheader40, %.preheader40
  %31 = call i64 @wcsspn(i32* %28, i32* bitcast ([8 x i8]* @.str917 to i32*)) nounwind optsize
  %32 = lshr i64 %31, 1
  %33 = and i64 %32, 4294967295
  %34 = getelementptr inbounds i32* %28, i64 %33
  %35 = and i64 %31, 4294967294
  %36 = getelementptr inbounds i32* %28, i64 %35
  %37 = ptrtoint i32* %34 to i64
  %38 = ptrtoint i32* %11 to i64
  %39 = sub i64 %37, %38
  %40 = lshr i64 %39, 2
  %41 = trunc i64 %40 to i32
  %cond = icmp eq i32 %41, 0
  br i1 %2, label %42, label %out.exit

; <label>:42                                      ; preds = %.critedge
  br i1 %cond, label %49, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %42
  %43 = sext i32 %41 to i64
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %.lr.ph.i.preheader
  %.03.i = phi i64 [ %44, %.lr.ph.i ], [ %43, %.lr.ph.i.preheader ]
  %.012.i = phi i32* [ %45, %.lr.ph.i ], [ %11, %.lr.ph.i.preheader ]
  %44 = add i64 %.03.i, -1
  %45 = getelementptr inbounds i32* %.012.i, i64 1
  %46 = load i32* %.012.i, align 4, !tbaa !6
  %47 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @fputwc to i32 (i32, %struct.__FILE_s.118*)*)(i32 %46, %struct.__FILE_s.118* %f) nounwind optsize
  %48 = icmp eq i64 %44, 0
  br i1 %48, label %out.exit28, label %.lr.ph.i

out.exit:                                         ; preds = %.critedge
  br i1 %cond, label %49, label %out.exit28

; <label>:49                                      ; preds = %out.exit, %42
  %.sum32 = or i64 %35, 1
  %50 = getelementptr inbounds i32* %28, i64 %.sum32
  %51 = load i32* %50, align 4, !tbaa !6
  %52 = add i32 %51, -48
  %53 = icmp ult i32 %52, 10
  br i1 %53, label %54, label %60

; <label>:54                                      ; preds = %49
  %.sum = add i64 %35, 2
  %55 = getelementptr inbounds i32* %28, i64 %.sum
  %56 = load i32* %55, align 4, !tbaa !6
  %57 = icmp eq i32 %56, 36
  br i1 %57, label %58, label %60

; <label>:58                                      ; preds = %54
  %.sum33 = add i64 %35, 3
  %59 = getelementptr inbounds i32* %28, i64 %.sum33
  br label %60

; <label>:60                                      ; preds = %58, %54, %49
  %storemerge = phi i32* [ %59, %58 ], [ %50, %54 ], [ %50, %49 ]
  %argpos.0 = phi i32 [ %52, %58 ], [ -1, %54 ], [ -1, %49 ]
  %l10n.1 = phi i32 [ 1, %58 ], [ %l10n.0, %54 ], [ %l10n.0, %49 ]
  br label %61

; <label>:61                                      ; preds = %69, %60
  %storemerge5 = phi i32* [ %storemerge, %60 ], [ %71, %69 ]
  %fl.0 = phi i32 [ 0, %60 ], [ %70, %69 ]
  %62 = load i32* %storemerge5, align 4, !tbaa !6
  %63 = add i32 %62, -32
  %64 = icmp ult i32 %63, 32
  br i1 %64, label %65, label %.thread

; <label>:65                                      ; preds = %61
  %66 = shl i32 1, %63
  %67 = and i32 %66, 75913
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %.thread, label %69

; <label>:69                                      ; preds = %65
  %70 = or i32 %66, %fl.0
  %71 = getelementptr inbounds i32* %storemerge5, i64 1
  br label %61

.thread:                                          ; preds = %65, %61
  %72 = icmp eq i32 %62, 42
  br i1 %72, label %73, label %115

; <label>:73                                      ; preds = %.thread
  %74 = getelementptr inbounds i32* %storemerge5, i64 1
  %75 = load i32* %74, align 4, !tbaa !6
  %76 = add i32 %75, -48
  %77 = icmp ult i32 %76, 10
  br i1 %77, label %78, label %93

; <label>:78                                      ; preds = %73
  %79 = getelementptr inbounds i32* %storemerge5, i64 2
  %80 = load i32* %79, align 4, !tbaa !6
  %81 = icmp eq i32 %80, 36
  br i1 %81, label %82, label %93

; <label>:82                                      ; preds = %78
  %83 = sext i32 %76 to i64
  %84 = getelementptr inbounds i32* %nl_type, i64 %83
  store i32 10, i32* %84, align 4, !tbaa !6
  %85 = load i32* %74, align 4, !tbaa !6
  %86 = add nsw i32 %85, -48
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %union.arg.729* %nl_arg, i64 %87
  %89 = bitcast %union.arg.729* %88 to i64*
  %90 = load i64* %89, align 8, !tbaa !9
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i32* %storemerge5, i64 3
  br label %110

; <label>:93                                      ; preds = %78, %73
  %94 = icmp eq i32 %l10n.1, 0
  br i1 %94, label %95, label %.loopexit47

; <label>:95                                      ; preds = %93
  br i1 %2, label %96, label %.thread29

; <label>:96                                      ; preds = %95
  %97 = load i32* %3, align 4
  %98 = icmp ult i32 %97, 41
  br i1 %98, label %99, label %104

; <label>:99                                      ; preds = %96
  %100 = load i8** %4, align 8
  %101 = sext i32 %97 to i64
  %102 = getelementptr i8* %100, i64 %101
  %103 = add i32 %97, 8
  store i32 %103, i32* %3, align 4
  br label %107

; <label>:104                                     ; preds = %96
  %105 = load i8** %5, align 8
  %106 = getelementptr i8* %105, i64 8
  store i8* %106, i8** %5, align 8
  br label %107

; <label>:107                                     ; preds = %104, %99
  %.in10 = phi i8* [ %102, %99 ], [ %105, %104 ]
  %108 = bitcast i8* %.in10 to i32*
  %109 = load i32* %108, align 4
  br label %110

; <label>:110                                     ; preds = %107, %82
  %storemerge9 = phi i32* [ %92, %82 ], [ %74, %107 ]
  %w.0 = phi i32 [ %91, %82 ], [ %109, %107 ]
  %l10n.2 = phi i32 [ 1, %82 ], [ %l10n.1, %107 ]
  %111 = icmp slt i32 %w.0, 0
  br i1 %111, label %112, label %.thread29

; <label>:112                                     ; preds = %110
  %113 = or i32 %fl.0, 8192
  %114 = sub nsw i32 0, %w.0
  br label %.thread29

; <label>:115                                     ; preds = %.thread
  %116 = add i32 %62, -48
  %117 = icmp ult i32 %116, 10
  br i1 %117, label %.lr.ph.i13, label %.thread29

.lr.ph.i13:                                       ; preds = %.lr.ph.i13, %115
  %118 = phi i32 [ %124, %.lr.ph.i13 ], [ %62, %115 ]
  %119 = phi i32* [ %123, %.lr.ph.i13 ], [ %storemerge5, %115 ]
  %i.01.i = phi i32 [ %122, %.lr.ph.i13 ], [ 0, %115 ]
  %120 = mul nsw i32 %i.01.i, 10
  %121 = add i32 %118, -48
  %122 = add i32 %121, %120
  %123 = getelementptr inbounds i32* %119, i64 1
  %124 = load i32* %123, align 4, !tbaa !6
  %125 = add i32 %124, -48
  %126 = icmp ult i32 %125, 10
  br i1 %126, label %.lr.ph.i13, label %getint.exit

getint.exit:                                      ; preds = %.lr.ph.i13
  %127 = icmp slt i32 %122, 0
  br i1 %127, label %.loopexit47, label %.thread29

.thread29:                                        ; preds = %getint.exit, %115, %112, %110, %95
  %128 = phi i32* [ %storemerge9, %112 ], [ %123, %getint.exit ], [ %74, %95 ], [ %storemerge5, %115 ], [ %storemerge9, %110 ]
  %w.1 = phi i32 [ %114, %112 ], [ %122, %getint.exit ], [ 0, %95 ], [ 0, %115 ], [ %w.0, %110 ]
  %fl.1 = phi i32 [ %113, %112 ], [ %fl.0, %getint.exit ], [ %fl.0, %95 ], [ %fl.0, %115 ], [ %fl.0, %110 ]
  %l10n.3 = phi i32 [ %l10n.2, %112 ], [ %l10n.1, %getint.exit ], [ 0, %95 ], [ %l10n.1, %115 ], [ %l10n.2, %110 ]
  %129 = load i32* %128, align 4, !tbaa !6
  %130 = icmp eq i32 %129, 46
  br i1 %130, label %131, label %getint.exit18

; <label>:131                                     ; preds = %.thread29
  %132 = getelementptr inbounds i32* %128, i64 1
  %133 = load i32* %132, align 4, !tbaa !6
  %134 = icmp eq i32 %133, 42
  br i1 %134, label %135, label %172

; <label>:135                                     ; preds = %131
  %136 = getelementptr inbounds i32* %128, i64 2
  %137 = load i32* %136, align 4, !tbaa !6
  %138 = add i32 %137, -48
  %139 = icmp ult i32 %138, 10
  br i1 %139, label %140, label %155

; <label>:140                                     ; preds = %135
  %141 = getelementptr inbounds i32* %128, i64 3
  %142 = load i32* %141, align 4, !tbaa !6
  %143 = icmp eq i32 %142, 36
  br i1 %143, label %144, label %155

; <label>:144                                     ; preds = %140
  %145 = sext i32 %138 to i64
  %146 = getelementptr inbounds i32* %nl_type, i64 %145
  store i32 10, i32* %146, align 4, !tbaa !6
  %147 = load i32* %136, align 4, !tbaa !6
  %148 = add nsw i32 %147, -48
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %union.arg.729* %nl_arg, i64 %149
  %151 = bitcast %union.arg.729* %150 to i64*
  %152 = load i64* %151, align 8, !tbaa !9
  %153 = trunc i64 %152 to i32
  %154 = getelementptr inbounds i32* %128, i64 4
  br label %getint.exit18

; <label>:155                                     ; preds = %140, %135
  %156 = icmp eq i32 %l10n.3, 0
  br i1 %156, label %157, label %.loopexit47

; <label>:157                                     ; preds = %155
  br i1 %2, label %158, label %getint.exit18

; <label>:158                                     ; preds = %157
  %159 = load i32* %3, align 4
  %160 = icmp ult i32 %159, 41
  br i1 %160, label %161, label %166

; <label>:161                                     ; preds = %158
  %162 = load i8** %4, align 8
  %163 = sext i32 %159 to i64
  %164 = getelementptr i8* %162, i64 %163
  %165 = add i32 %159, 8
  store i32 %165, i32* %3, align 4
  br label %169

; <label>:166                                     ; preds = %158
  %167 = load i8** %5, align 8
  %168 = getelementptr i8* %167, i64 8
  store i8* %168, i8** %5, align 8
  br label %169

; <label>:169                                     ; preds = %166, %161
  %.in = phi i8* [ %164, %161 ], [ %167, %166 ]
  %170 = bitcast i8* %.in to i32*
  %171 = load i32* %170, align 4
  br label %getint.exit18

; <label>:172                                     ; preds = %131
  %173 = add i32 %133, -48
  %174 = icmp ult i32 %173, 10
  br i1 %174, label %.lr.ph.i15, label %getint.exit18

.lr.ph.i15:                                       ; preds = %.lr.ph.i15, %172
  %175 = phi i32 [ %181, %.lr.ph.i15 ], [ %133, %172 ]
  %176 = phi i32* [ %180, %.lr.ph.i15 ], [ %132, %172 ]
  %i.01.i14 = phi i32 [ %179, %.lr.ph.i15 ], [ 0, %172 ]
  %177 = mul nsw i32 %i.01.i14, 10
  %178 = add i32 %175, -48
  %179 = add i32 %178, %177
  %180 = getelementptr inbounds i32* %176, i64 1
  %181 = load i32* %180, align 4, !tbaa !6
  %182 = add i32 %181, -48
  %183 = icmp ult i32 %182, 10
  br i1 %183, label %.lr.ph.i15, label %getint.exit18

getint.exit18:                                    ; preds = %.lr.ph.i15, %172, %169, %157, %144, %.thread29
  %184 = phi i32* [ %154, %144 ], [ %136, %157 ], [ %136, %169 ], [ %132, %172 ], [ %128, %.thread29 ], [ %180, %.lr.ph.i15 ]
  %p.0 = phi i32 [ %153, %144 ], [ 0, %157 ], [ %171, %169 ], [ 0, %172 ], [ -1, %.thread29 ], [ %179, %.lr.ph.i15 ]
  br label %._crit_edge87

._crit_edge87:                                    ; preds = %189, %getint.exit18
  %185 = phi i32* [ %184, %getint.exit18 ], [ %190, %189 ]
  %st.0 = phi i32 [ 0, %getint.exit18 ], [ %195, %189 ]
  %186 = load i32* %185, align 4, !tbaa !6
  %187 = add i32 %186, -65
  %188 = icmp ugt i32 %187, 57
  br i1 %188, label %.loopexit47, label %189

; <label>:189                                     ; preds = %._crit_edge87
  %190 = getelementptr inbounds i32* %185, i64 1
  %191 = sext i32 %187 to i64
  %192 = zext i32 %st.0 to i64
  %193 = getelementptr inbounds [8 x [58 x i8]]* @states916, i64 0, i64 %192, i64 %191
  %194 = load i8* %193, align 1, !tbaa !0
  %195 = zext i8 %194 to i32
  %196 = add i32 %195, -1
  %197 = icmp ult i32 %196, 8
  br i1 %197, label %._crit_edge87, label %198

; <label>:198                                     ; preds = %189
  %199 = icmp eq i8 %194, 0
  br i1 %199, label %.loopexit47, label %200

; <label>:200                                     ; preds = %198
  %201 = icmp eq i8 %194, 21
  %202 = icmp sgt i32 %argpos.0, -1
  br i1 %201, label %203, label %205

; <label>:203                                     ; preds = %200
  br i1 %202, label %.loopexit47, label %204

; <label>:204                                     ; preds = %203
  br i1 %2, label %._crit_edge86, label %out.exit28

; <label>:205                                     ; preds = %200
  br i1 %202, label %207, label %206

; <label>:206                                     ; preds = %205
  br i1 %2, label %.thread31, label %.loopexit47

.thread31:                                        ; preds = %206
  call fastcc void @pop_arg928(%union.arg.729* %arg, i32 %195, [1 x %struct.__va_list_tag.119]* %ap) optsize
  br label %._crit_edge86

; <label>:207                                     ; preds = %205
  %208 = sext i32 %argpos.0 to i64
  %209 = getelementptr inbounds i32* %nl_type, i64 %208
  store i32 %195, i32* %209, align 4, !tbaa !6
  %210 = getelementptr inbounds %union.arg.729* %nl_arg, i64 %208
  %211 = bitcast %union.arg.729* %210 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %211, i64 16, i32 16, i1 false)
  br i1 %2, label %._crit_edge86, label %out.exit28

._crit_edge86:                                    ; preds = %207, %.thread31, %204
  %212 = load i32* %185, align 4, !tbaa !6
  %213 = icmp eq i32 %st.0, 0
  br i1 %213, label %218, label %214

; <label>:214                                     ; preds = %._crit_edge86
  %215 = and i32 %212, 15
  %216 = and i32 %212, -33
  %217 = icmp eq i32 %215, 3
  %. = select i1 %217, i32 %216, i32 %212
  br label %218

; <label>:218                                     ; preds = %214, %._crit_edge86
  %t.0 = phi i32 [ %212, %._crit_edge86 ], [ %., %214 ]
  switch i32 %t.0, label %322 [
    i32 110, label %219
    i32 99, label %246
    i32 67, label %251
    i32 83, label %255
    i32 115, label %290
  ]

; <label>:219                                     ; preds = %218
  switch i32 %st.0, label %out.exit28 [
    i32 0, label %220
    i32 1, label %223
    i32 2, label %227
    i32 3, label %231
    i32 4, label %235
    i32 6, label %238
    i32 7, label %242
  ]

; <label>:220                                     ; preds = %219
  %221 = load i8** %9, align 16, !tbaa !7
  %222 = bitcast i8* %221 to i32*
  store i32 %cnt.1, i32* %222, align 4, !tbaa !6
  br label %out.exit28

; <label>:223                                     ; preds = %219
  %224 = sext i32 %cnt.1 to i64
  %225 = load i8** %9, align 16, !tbaa !7
  %226 = bitcast i8* %225 to i64*
  store i64 %224, i64* %226, align 8, !tbaa !5
  br label %out.exit28

; <label>:227                                     ; preds = %219
  %228 = sext i32 %cnt.1 to i64
  %229 = load i8** %9, align 16, !tbaa !7
  %230 = bitcast i8* %229 to i64*
  store i64 %228, i64* %230, align 8, !tbaa !9
  br label %out.exit28

; <label>:231                                     ; preds = %219
  %232 = trunc i32 %cnt.1 to i16
  %233 = load i8** %9, align 16, !tbaa !7
  %234 = bitcast i8* %233 to i16*
  store i16 %232, i16* %234, align 2, !tbaa !8
  br label %out.exit28

; <label>:235                                     ; preds = %219
  %236 = trunc i32 %cnt.1 to i8
  %237 = load i8** %9, align 16, !tbaa !7
  store i8 %236, i8* %237, align 1, !tbaa !0
  br label %out.exit28

; <label>:238                                     ; preds = %219
  %239 = sext i32 %cnt.1 to i64
  %240 = load i8** %9, align 16, !tbaa !7
  %241 = bitcast i8* %240 to i64*
  store i64 %239, i64* %241, align 8, !tbaa !5
  br label %out.exit28

; <label>:242                                     ; preds = %219
  %243 = sext i32 %cnt.1 to i64
  %244 = load i8** %9, align 16, !tbaa !7
  %245 = bitcast i8* %244 to i64*
  store i64 %243, i64* %245, align 8, !tbaa !9
  br label %out.exit28

; <label>:246                                     ; preds = %218
  %247 = load i64* %8, align 16, !tbaa !9
  %248 = trunc i64 %247 to i32
  %249 = call i32 @btowc(i32 %248) nounwind optsize
  %250 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @fputwc to i32 (i32, %struct.__FILE_s.118*)*)(i32 %249, %struct.__FILE_s.118* %f) nounwind optsize
  br label %out.exit28

; <label>:251                                     ; preds = %218
  %252 = load i64* %8, align 16, !tbaa !9
  %253 = trunc i64 %252 to i32
  %254 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @fputwc to i32 (i32, %struct.__FILE_s.118*)*)(i32 %253, %struct.__FILE_s.118* %f) nounwind optsize
  br label %out.exit28

; <label>:255                                     ; preds = %218
  %256 = load i8** %9, align 16, !tbaa !7
  %257 = bitcast i8* %256 to i32*
  %258 = sext i32 %p.0 to i64
  %259 = call i32* @wmemchr(i32* %257, i32 0, i64 %258) nounwind optsize
  %260 = icmp eq i32* %259, null
  br i1 %260, label %267, label %261

; <label>:261                                     ; preds = %255
  %262 = ptrtoint i32* %259 to i64
  %263 = ptrtoint i8* %256 to i64
  %264 = sub i64 %262, %263
  %265 = lshr i64 %264, 2
  %266 = trunc i64 %265 to i32
  br label %267

; <label>:267                                     ; preds = %261, %255
  %p.1 = phi i32 [ %266, %261 ], [ %p.0, %255 ]
  %268 = icmp slt i32 %w.1, %p.1
  %w.2 = select i1 %268, i32 %p.1, i32 %w.1
  %269 = and i32 %fl.1, 8192
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %.critedge11

; <label>:271                                     ; preds = %267
  %272 = sub nsw i32 %w.2, %p.1
  %273 = call i32 (%struct.__FILE_s.118*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.118*, i8*, ...)*)(%struct.__FILE_s.118* %f, i8* getelementptr inbounds ([5 x i8]* @.str1918, i64 0, i64 0), i32 %272, i8* getelementptr inbounds ([1 x i8]* @.str2919, i64 0, i64 0)) nounwind optsize
  %274 = icmp eq i32 %p.1, 0
  br i1 %274, label %out.exit28, label %.lr.ph.i26.preheader

.lr.ph.i26.preheader:                             ; preds = %271
  %275 = sext i32 %p.1 to i64
  br label %.lr.ph.i26

.lr.ph.i26:                                       ; preds = %.lr.ph.i26, %.lr.ph.i26.preheader
  %.03.i24 = phi i64 [ %276, %.lr.ph.i26 ], [ %275, %.lr.ph.i26.preheader ]
  %.012.i25 = phi i32* [ %277, %.lr.ph.i26 ], [ %257, %.lr.ph.i26.preheader ]
  %276 = add i64 %.03.i24, -1
  %277 = getelementptr inbounds i32* %.012.i25, i64 1
  %278 = load i32* %.012.i25, align 4, !tbaa !6
  %279 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @fputwc to i32 (i32, %struct.__FILE_s.118*)*)(i32 %278, %struct.__FILE_s.118* %f) nounwind optsize
  %280 = icmp eq i64 %276, 0
  br i1 %280, label %out.exit28, label %.lr.ph.i26

.critedge11:                                      ; preds = %267
  %281 = icmp eq i32 %p.1, 0
  br i1 %281, label %out.exit23, label %.lr.ph.i21.preheader

.lr.ph.i21.preheader:                             ; preds = %.critedge11
  %282 = sext i32 %p.1 to i64
  br label %.lr.ph.i21

.lr.ph.i21:                                       ; preds = %.lr.ph.i21, %.lr.ph.i21.preheader
  %.03.i19 = phi i64 [ %283, %.lr.ph.i21 ], [ %282, %.lr.ph.i21.preheader ]
  %.012.i20 = phi i32* [ %284, %.lr.ph.i21 ], [ %257, %.lr.ph.i21.preheader ]
  %283 = add i64 %.03.i19, -1
  %284 = getelementptr inbounds i32* %.012.i20, i64 1
  %285 = load i32* %.012.i20, align 4, !tbaa !6
  %286 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @fputwc to i32 (i32, %struct.__FILE_s.118*)*)(i32 %285, %struct.__FILE_s.118* %f) nounwind optsize
  %287 = icmp eq i64 %283, 0
  br i1 %287, label %out.exit23, label %.lr.ph.i21

out.exit23:                                       ; preds = %.lr.ph.i21, %.critedge11
  %288 = sub nsw i32 %w.2, %p.1
  %289 = call i32 (%struct.__FILE_s.118*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.118*, i8*, ...)*)(%struct.__FILE_s.118* %f, i8* getelementptr inbounds ([5 x i8]* @.str1918, i64 0, i64 0), i32 %288, i8* getelementptr inbounds ([1 x i8]* @.str2919, i64 0, i64 0)) nounwind optsize
  br label %out.exit28

; <label>:290                                     ; preds = %218
  %291 = load i8** %9, align 16, !tbaa !7
  %292 = icmp slt i32 %p.0, 0
  %p.2 = select i1 %292, i32 2147483647, i32 %p.0
  br label %293

; <label>:293                                     ; preds = %298, %290
  %l.1 = phi i32 [ %301, %298 ], [ 0, %290 ]
  %i.1 = phi i32 [ %296, %298 ], [ %i.0, %290 ]
  %bs.0 = phi i8* [ %300, %298 ], [ %291, %290 ]
  %294 = icmp slt i32 %l.1, %p.2
  br i1 %294, label %295, label %.critedge1

; <label>:295                                     ; preds = %293
  %296 = call i32 @mbtowc(i32* %wc, i8* %bs.0, i64 4) nounwind optsize
  %297 = icmp sgt i32 %296, 0
  br i1 %297, label %298, label %.critedge1

; <label>:298                                     ; preds = %295
  %299 = sext i32 %296 to i64
  %300 = getelementptr inbounds i8* %bs.0, i64 %299
  %301 = add nsw i32 %l.1, 1
  br label %293

.critedge1:                                       ; preds = %295, %293
  %i.2 = phi i32 [ %296, %295 ], [ %i.1, %293 ]
  %302 = icmp slt i32 %i.2, 0
  br i1 %302, label %.loopexit47, label %303

; <label>:303                                     ; preds = %.critedge1
  %304 = icmp slt i32 %w.1, %l.1
  %w.3 = select i1 %304, i32 %l.1, i32 %w.1
  %305 = and i32 %fl.1, 8192
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %310, label %307

; <label>:307                                     ; preds = %303
  %308 = sub nsw i32 %w.3, %l.1
  %309 = call i32 (%struct.__FILE_s.118*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.118*, i8*, ...)*)(%struct.__FILE_s.118* %f, i8* getelementptr inbounds ([5 x i8]* @.str1918, i64 0, i64 0), i32 %308, i8* getelementptr inbounds ([1 x i8]* @.str2919, i64 0, i64 0)) nounwind optsize
  br label %310

; <label>:310                                     ; preds = %307, %303
  %311 = icmp eq i32 %l.1, 0
  br i1 %311, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %310
  %bs.135 = phi i8* [ %315, %.lr.ph ], [ %291, %310 ]
  %l.234 = phi i32 [ %312, %.lr.ph ], [ %l.1, %310 ]
  %312 = add nsw i32 %l.234, -1
  %313 = call i32 @mbtowc(i32* %wc, i8* %bs.135, i64 4) nounwind optsize
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i8* %bs.135, i64 %314
  %316 = load i32* %wc, align 4, !tbaa !6
  %317 = call i32 bitcast (i32 (i32, %struct.__FILE_s.85*)* @fputwc to i32 (i32, %struct.__FILE_s.118*)*)(i32 %316, %struct.__FILE_s.118* %f) nounwind optsize
  %318 = icmp eq i32 %312, 0
  br i1 %318, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %310
  %i.3.lcssa = phi i32 [ %i.2, %310 ], [ %313, %.lr.ph ]
  br i1 %306, label %319, label %out.exit28

; <label>:319                                     ; preds = %._crit_edge
  %320 = sub nsw i32 %w.3, %l.1
  %321 = call i32 (%struct.__FILE_s.118*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.118*, i8*, ...)*)(%struct.__FILE_s.118* %f, i8* getelementptr inbounds ([5 x i8]* @.str1918, i64 0, i64 0), i32 %320, i8* getelementptr inbounds ([1 x i8]* @.str2919, i64 0, i64 0)) nounwind optsize
  br label %out.exit28

; <label>:322                                     ; preds = %218
  %323 = lshr i32 %fl.1, 3
  %.lobit = and i32 %323, 1
  %324 = xor i32 %.lobit, 1
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds [2 x i8]* @.str4921, i64 0, i64 %325
  %327 = lshr i32 %fl.1, 11
  %.lobit6 = and i32 %327, 1
  %328 = xor i32 %.lobit6, 1
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds [2 x i8]* @.str5922, i64 0, i64 %329
  %331 = lshr i32 %fl.1, 13
  %.lobit7 = and i32 %331, 1
  %332 = xor i32 %.lobit7, 1
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds [2 x i8]* @.str6923, i64 0, i64 %333
  %335 = and i32 %fl.1, 1
  %336 = xor i32 %335, 1
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds [2 x i8]* @.str7924, i64 0, i64 %337
  %339 = lshr i32 %fl.1, 16
  %.lobit8 = and i32 %339, 1
  %340 = xor i32 %.lobit8, 1
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds [2 x i8]* @.str8925, i64 0, i64 %341
  %343 = or i32 %t.0, 32
  %344 = add nsw i32 %343, -97
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds [24 x i8]* @sizeprefix, i64 0, i64 %345
  %347 = load i8* %346, align 1, !tbaa !0
  %348 = sext i8 %347 to i32
  %349 = call i32 (i8*, i64, i8*, ...)* @snprintf(i8* %6, i64 16, i8* getelementptr inbounds ([20 x i8]* @.str3920, i64 0, i64 0), i8* %326, i8* %330, i8* %334, i8* %338, i8* %342, i32 %348, i32 %t.0) nounwind optsize
  switch i32 %343, label %out.exit28 [
    i32 97, label %._crit_edge93
    i32 101, label %._crit_edge93
    i32 102, label %._crit_edge93
    i32 103, label %._crit_edge93
    i32 100, label %._crit_edge95
    i32 105, label %._crit_edge95
    i32 111, label %._crit_edge95
    i32 117, label %._crit_edge95
    i32 120, label %._crit_edge95
    i32 112, label %._crit_edge95
  ]

._crit_edge93:                                    ; preds = %322, %322, %322, %322
  %350 = load x86_fp80* %7, align 16, !tbaa !4
  %351 = call i32 (%struct.__FILE_s.118*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.118*, i8*, ...)*)(%struct.__FILE_s.118* %f, i8* %6, i32 %w.1, i32 %p.0, x86_fp80 %350) nounwind optsize
  br label %out.exit28

._crit_edge95:                                    ; preds = %322, %322, %322, %322, %322, %322
  %352 = load i64* %8, align 16, !tbaa !9
  %353 = call i32 (%struct.__FILE_s.118*, i8*, ...)* bitcast (i32 (%struct.__FILE_s*, i8*, ...)* @fprintf to i32 (%struct.__FILE_s.118*, i8*, ...)*)(%struct.__FILE_s.118* %f, i8* %6, i32 %w.1, i32 %p.0, i64 %352) nounwind optsize
  br label %out.exit28

; <label>:354                                     ; preds = %24
  %355 = icmp eq %struct.__FILE_s.118* %f, null
  br i1 %355, label %356, label %.loopexit47

; <label>:356                                     ; preds = %354
  %357 = icmp eq i32 %l10n.0, 0
  br i1 %357, label %.loopexit47, label %.preheader

.preheader:                                       ; preds = %364, %356
  %indvars.iv61 = phi i64 [ %indvars.iv.next62, %364 ], [ 1, %356 ]
  %358 = trunc i64 %indvars.iv61 to i32
  %359 = icmp slt i32 %358, 10
  br i1 %359, label %360, label %.critedge2

; <label>:360                                     ; preds = %.preheader
  %361 = getelementptr inbounds i32* %nl_type, i64 %indvars.iv61
  %362 = load i32* %361, align 4, !tbaa !6
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %.critedge2, label %364

; <label>:364                                     ; preds = %360
  %365 = getelementptr inbounds %union.arg.729* %nl_arg, i64 %indvars.iv61
  call fastcc void @pop_arg928(%union.arg.729* %365, i32 %362, [1 x %struct.__va_list_tag.119]* %ap) optsize
  %indvars.iv.next62 = add i64 %indvars.iv61, 1
  br label %.preheader

.critedge2:                                       ; preds = %372, %360, %.preheader
  %indvars.iv59 = phi i64 [ %indvars.iv.next60, %372 ], [ %indvars.iv61, %.preheader ], [ %indvars.iv61, %360 ]
  %366 = trunc i64 %indvars.iv59 to i32
  %367 = icmp slt i32 %366, 10
  br i1 %367, label %368, label %.critedge3

; <label>:368                                     ; preds = %.critedge2
  %369 = getelementptr inbounds i32* %nl_type, i64 %indvars.iv59
  %370 = load i32* %369, align 4, !tbaa !6
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %.critedge3

; <label>:372                                     ; preds = %368
  %indvars.iv.next60 = add i64 %indvars.iv59, 1
  br label %.critedge2

.critedge3:                                       ; preds = %368, %.critedge2
  %.12 = select i1 %367, i32 -1, i32 1
  br label %.loopexit47

.loopexit47:                                      ; preds = %.critedge3, %356, %354, %.critedge1, %206, %203, %198, %._crit_edge87, %155, %getint.exit, %93
  %.0 = phi i32 [ %cnt.1, %354 ], [ 0, %356 ], [ %.12, %.critedge3 ], [ -1, %._crit_edge87 ], [ -1, %.critedge1 ], [ 0, %206 ], [ -1, %203 ], [ -1, %198 ], [ -1, %155 ], [ -1, %getint.exit ], [ -1, %93 ]
  ret i32 %.0
}

define internal fastcc void @pop_arg928(%union.arg.729* nocapture %arg, i32 %type, [1 x %struct.__va_list_tag.119]* %ap) nounwind uwtable optsize {
  %1 = icmp ugt i32 %type, 22
  br i1 %1, label %223, label %2

; <label>:2                                       ; preds = %0
  switch i32 %type, label %223 [
    i32 9, label %3
    i32 10, label %21
    i32 11, label %40
    i32 13, label %59
    i32 14, label %77
    i32 12, label %95
    i32 15, label %113
    i32 16, label %133
    i32 17, label %153
    i32 18, label %173
    i32 19, label %193
    i32 20, label %212
  ]

; <label>:3                                       ; preds = %2
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %5 = load i32* %4, align 4
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %9 = load i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8* %9, i64 %10
  %12 = add i32 %5, 8
  store i32 %12, i32* %4, align 4
  br label %17

; <label>:13                                      ; preds = %3
  %14 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %15 = load i8** %14, align 8
  %16 = getelementptr i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

; <label>:17                                      ; preds = %13, %7
  %.in11 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %18 = bitcast i8* %.in11 to i8**
  %19 = load i8** %18, align 8
  %20 = bitcast %union.arg.729* %arg to i8**
  store i8* %19, i8** %20, align 8, !tbaa !7
  br label %223

; <label>:21                                      ; preds = %2
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %23 = load i32* %22, align 4
  %24 = icmp ult i32 %23, 41
  br i1 %24, label %25, label %31

; <label>:25                                      ; preds = %21
  %26 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %27 = load i8** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr i8* %27, i64 %28
  %30 = add i32 %23, 8
  store i32 %30, i32* %22, align 4
  br label %35

; <label>:31                                      ; preds = %21
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %33 = load i8** %32, align 8
  %34 = getelementptr i8* %33, i64 8
  store i8* %34, i8** %32, align 8
  br label %35

; <label>:35                                      ; preds = %31, %25
  %.in10 = phi i8* [ %29, %25 ], [ %33, %31 ]
  %36 = bitcast i8* %.in10 to i32*
  %37 = load i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = bitcast %union.arg.729* %arg to i64*
  store i64 %38, i64* %39, align 8, !tbaa !9
  br label %223

; <label>:40                                      ; preds = %2
  %41 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %42 = load i32* %41, align 4
  %43 = icmp ult i32 %42, 41
  br i1 %43, label %44, label %50

; <label>:44                                      ; preds = %40
  %45 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %46 = load i8** %45, align 8
  %47 = sext i32 %42 to i64
  %48 = getelementptr i8* %46, i64 %47
  %49 = add i32 %42, 8
  store i32 %49, i32* %41, align 4
  br label %54

; <label>:50                                      ; preds = %40
  %51 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %52 = load i8** %51, align 8
  %53 = getelementptr i8* %52, i64 8
  store i8* %53, i8** %51, align 8
  br label %54

; <label>:54                                      ; preds = %50, %44
  %.in9 = phi i8* [ %48, %44 ], [ %52, %50 ]
  %55 = bitcast i8* %.in9 to i32*
  %56 = load i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = bitcast %union.arg.729* %arg to i64*
  store i64 %57, i64* %58, align 8, !tbaa !9
  br label %223

; <label>:59                                      ; preds = %2
  %60 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %61 = load i32* %60, align 4
  %62 = icmp ult i32 %61, 41
  br i1 %62, label %63, label %69

; <label>:63                                      ; preds = %59
  %64 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %65 = load i8** %64, align 8
  %66 = sext i32 %61 to i64
  %67 = getelementptr i8* %65, i64 %66
  %68 = add i32 %61, 8
  store i32 %68, i32* %60, align 4
  br label %73

; <label>:69                                      ; preds = %59
  %70 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %71 = load i8** %70, align 8
  %72 = getelementptr i8* %71, i64 8
  store i8* %72, i8** %70, align 8
  br label %73

; <label>:73                                      ; preds = %69, %63
  %.in8 = phi i8* [ %67, %63 ], [ %71, %69 ]
  %74 = bitcast i8* %.in8 to i64*
  %75 = load i64* %74, align 8
  %76 = bitcast %union.arg.729* %arg to i64*
  store i64 %75, i64* %76, align 8, !tbaa !9
  br label %223

; <label>:77                                      ; preds = %2
  %78 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %79 = load i32* %78, align 4
  %80 = icmp ult i32 %79, 41
  br i1 %80, label %81, label %87

; <label>:81                                      ; preds = %77
  %82 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %83 = load i8** %82, align 8
  %84 = sext i32 %79 to i64
  %85 = getelementptr i8* %83, i64 %84
  %86 = add i32 %79, 8
  store i32 %86, i32* %78, align 4
  br label %91

; <label>:87                                      ; preds = %77
  %88 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %89 = load i8** %88, align 8
  %90 = getelementptr i8* %89, i64 8
  store i8* %90, i8** %88, align 8
  br label %91

; <label>:91                                      ; preds = %87, %81
  %.in7 = phi i8* [ %85, %81 ], [ %89, %87 ]
  %92 = bitcast i8* %.in7 to i64*
  %93 = load i64* %92, align 8
  %94 = bitcast %union.arg.729* %arg to i64*
  store i64 %93, i64* %94, align 8, !tbaa !9
  br label %223

; <label>:95                                      ; preds = %2
  %96 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %97 = load i32* %96, align 4
  %98 = icmp ult i32 %97, 41
  br i1 %98, label %99, label %105

; <label>:99                                      ; preds = %95
  %100 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %101 = load i8** %100, align 8
  %102 = sext i32 %97 to i64
  %103 = getelementptr i8* %101, i64 %102
  %104 = add i32 %97, 8
  store i32 %104, i32* %96, align 4
  br label %109

; <label>:105                                     ; preds = %95
  %106 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %107 = load i8** %106, align 8
  %108 = getelementptr i8* %107, i64 8
  store i8* %108, i8** %106, align 8
  br label %109

; <label>:109                                     ; preds = %105, %99
  %.in6 = phi i8* [ %103, %99 ], [ %107, %105 ]
  %110 = bitcast i8* %.in6 to i64*
  %111 = load i64* %110, align 8
  %112 = bitcast %union.arg.729* %arg to i64*
  store i64 %111, i64* %112, align 8, !tbaa !9
  br label %223

; <label>:113                                     ; preds = %2
  %114 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %115 = load i32* %114, align 4
  %116 = icmp ult i32 %115, 41
  br i1 %116, label %117, label %123

; <label>:117                                     ; preds = %113
  %118 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %119 = load i8** %118, align 8
  %120 = sext i32 %115 to i64
  %121 = getelementptr i8* %119, i64 %120
  %122 = add i32 %115, 8
  store i32 %122, i32* %114, align 4
  br label %127

; <label>:123                                     ; preds = %113
  %124 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %125 = load i8** %124, align 8
  %126 = getelementptr i8* %125, i64 8
  store i8* %126, i8** %124, align 8
  br label %127

; <label>:127                                     ; preds = %123, %117
  %.in4 = phi i8* [ %121, %117 ], [ %125, %123 ]
  %128 = bitcast i8* %.in4 to i32*
  %129 = load i32* %128, align 4
  %130 = zext i32 %129 to i64
  %sext5 = shl i64 %130, 48
  %131 = ashr exact i64 %sext5, 48
  %132 = bitcast %union.arg.729* %arg to i64*
  store i64 %131, i64* %132, align 8, !tbaa !9
  br label %223

; <label>:133                                     ; preds = %2
  %134 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %135 = load i32* %134, align 4
  %136 = icmp ult i32 %135, 41
  br i1 %136, label %137, label %143

; <label>:137                                     ; preds = %133
  %138 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %139 = load i8** %138, align 8
  %140 = sext i32 %135 to i64
  %141 = getelementptr i8* %139, i64 %140
  %142 = add i32 %135, 8
  store i32 %142, i32* %134, align 4
  br label %147

; <label>:143                                     ; preds = %133
  %144 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %145 = load i8** %144, align 8
  %146 = getelementptr i8* %145, i64 8
  store i8* %146, i8** %144, align 8
  br label %147

; <label>:147                                     ; preds = %143, %137
  %.in3 = phi i8* [ %141, %137 ], [ %145, %143 ]
  %148 = bitcast i8* %.in3 to i32*
  %149 = load i32* %148, align 4
  %150 = zext i32 %149 to i64
  %151 = and i64 %150, 65535
  %152 = bitcast %union.arg.729* %arg to i64*
  store i64 %151, i64* %152, align 8, !tbaa !9
  br label %223

; <label>:153                                     ; preds = %2
  %154 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %155 = load i32* %154, align 4
  %156 = icmp ult i32 %155, 41
  br i1 %156, label %157, label %163

; <label>:157                                     ; preds = %153
  %158 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %159 = load i8** %158, align 8
  %160 = sext i32 %155 to i64
  %161 = getelementptr i8* %159, i64 %160
  %162 = add i32 %155, 8
  store i32 %162, i32* %154, align 4
  br label %167

; <label>:163                                     ; preds = %153
  %164 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %165 = load i8** %164, align 8
  %166 = getelementptr i8* %165, i64 8
  store i8* %166, i8** %164, align 8
  br label %167

; <label>:167                                     ; preds = %163, %157
  %.in2 = phi i8* [ %161, %157 ], [ %165, %163 ]
  %168 = bitcast i8* %.in2 to i32*
  %169 = load i32* %168, align 4
  %170 = zext i32 %169 to i64
  %sext = shl i64 %170, 56
  %171 = ashr exact i64 %sext, 56
  %172 = bitcast %union.arg.729* %arg to i64*
  store i64 %171, i64* %172, align 8, !tbaa !9
  br label %223

; <label>:173                                     ; preds = %2
  %174 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 0
  %175 = load i32* %174, align 4
  %176 = icmp ult i32 %175, 41
  br i1 %176, label %177, label %183

; <label>:177                                     ; preds = %173
  %178 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %179 = load i8** %178, align 8
  %180 = sext i32 %175 to i64
  %181 = getelementptr i8* %179, i64 %180
  %182 = add i32 %175, 8
  store i32 %182, i32* %174, align 4
  br label %187

; <label>:183                                     ; preds = %173
  %184 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %185 = load i8** %184, align 8
  %186 = getelementptr i8* %185, i64 8
  store i8* %186, i8** %184, align 8
  br label %187

; <label>:187                                     ; preds = %183, %177
  %.in1 = phi i8* [ %181, %177 ], [ %185, %183 ]
  %188 = bitcast i8* %.in1 to i32*
  %189 = load i32* %188, align 4
  %190 = zext i32 %189 to i64
  %191 = and i64 %190, 255
  %192 = bitcast %union.arg.729* %arg to i64*
  store i64 %191, i64* %192, align 8, !tbaa !9
  br label %223

; <label>:193                                     ; preds = %2
  %194 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 1
  %195 = load i32* %194, align 4
  %196 = icmp ult i32 %195, 161
  br i1 %196, label %197, label %203

; <label>:197                                     ; preds = %193
  %198 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 3
  %199 = load i8** %198, align 8
  %200 = sext i32 %195 to i64
  %201 = getelementptr i8* %199, i64 %200
  %202 = add i32 %195, 16
  store i32 %202, i32* %194, align 4
  br label %207

; <label>:203                                     ; preds = %193
  %204 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %205 = load i8** %204, align 8
  %206 = getelementptr i8* %205, i64 8
  store i8* %206, i8** %204, align 8
  br label %207

; <label>:207                                     ; preds = %203, %197
  %.in = phi i8* [ %201, %197 ], [ %205, %203 ]
  %208 = bitcast i8* %.in to double*
  %209 = load double* %208, align 8
  %210 = fpext double %209 to x86_fp80
  %211 = getelementptr inbounds %union.arg.729* %arg, i64 0, i32 0
  store x86_fp80 %210, x86_fp80* %211, align 16, !tbaa !4
  br label %223

; <label>:212                                     ; preds = %2
  %213 = getelementptr inbounds [1 x %struct.__va_list_tag.119]* %ap, i64 0, i64 0, i32 2
  %214 = load i8** %213, align 8
  %215 = getelementptr i8* %214, i64 15
  %216 = ptrtoint i8* %215 to i64
  %217 = and i64 %216, -16
  %218 = inttoptr i64 %217 to i8*
  %219 = inttoptr i64 %217 to x86_fp80*
  %220 = getelementptr i8* %218, i64 16
  store i8* %220, i8** %213, align 8
  %221 = load x86_fp80* %219, align 16
  %222 = getelementptr inbounds %union.arg.729* %arg, i64 0, i32 0
  store x86_fp80 %221, x86_fp80* %222, align 16, !tbaa !4
  br label %223

; <label>:223                                     ; preds = %212, %207, %187, %167, %147, %127, %109, %91, %73, %54, %35, %17, %2, %0
  ret void
}

define i32 @vfwscanf(%struct.__FILE_s.121* %f, i32* %fmt, %struct.__va_list_tag.122* %ap) nounwind uwtable optsize {
  %r = alloca %struct.rctx.732, align 8
  %1 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 0
  store void (%struct.rctx.732*)* @f_read931, void (%struct.rctx.732*)** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 1
  %3 = bitcast %struct.__FILE_s.121* %f to i8*
  store i8* %3, i8** %2, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 2
  store i32 1, i32* %4, align 8, !tbaa !6
  %5 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 3
  store i32 (...)* bitcast (i32 (i32)* @iswspace to i32 (...)*), i32 (...)** %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 4
  store i32 0, i32* %6, align 8, !tbaa !6
  %7 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 5
  store i32 0, i32* %7, align 4, !tbaa !6
  %8 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 6
  store i32 0, i32* %8, align 8, !tbaa !6
  %9 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 7
  store i32 0, i32* %9, align 4, !tbaa !6
  %10 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 8
  store i32 0, i32* %10, align 8, !tbaa !6
  %11 = call i32 bitcast (i32 (%struct.rctx*, i32*, %struct.__va_list_tag.541*)* @__scanf to i32 (%struct.rctx.732*, i32*, %struct.__va_list_tag.122*)*)(%struct.rctx.732* %r, i32* %fmt, %struct.__va_list_tag.122* %ap) nounwind optsize
  %12 = load i32* %9, align 4, !tbaa !6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

; <label>:14                                      ; preds = %0
  %15 = load i32* %8, align 8, !tbaa !6
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %14
  %18 = call i32 bitcast (i32 (i32, %struct.__FILE_s.707*)* @ungetwc to i32 (i32, %struct.__FILE_s.121*)*)(i32 %15, %struct.__FILE_s.121* %f) nounwind optsize
  br label %19

; <label>:19                                      ; preds = %17, %14, %0
  ret i32 %11
}

define internal void @f_read931(%struct.rctx.732* nocapture %r) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = bitcast i8* %2 to %struct.__FILE_s.121*
  %4 = tail call i32 bitcast (i32 (%struct.__FILE_s.69*)* @fgetwc to i32 (%struct.__FILE_s.121*)*)(%struct.__FILE_s.121* %3) nounwind optsize
  %5 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 6
  store i32 %4, i32* %5, align 4, !tbaa !6
  %6 = icmp sgt i32 %4, -1
  br i1 %6, label %7, label %11

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.rctx.732* %r, i64 0, i32 4
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %8, align 4, !tbaa !6
  br label %11

; <label>:11                                      ; preds = %7, %0
  ret void
}

define i32 @vprintf(i8* %fmt, %struct.__va_list_tag.342* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.642** @stdout, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s.642*, i8*, %struct.__va_list_tag.342*)*)(%struct.__FILE_s.642* %1, i8* %fmt, %struct.__va_list_tag.342* %ap) nounwind optsize
  ret i32 %2
}

define i32 @vscanf(i8* %fmt, %struct.__va_list_tag.543* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.69** @stdin, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.94*, i8*, %struct.__va_list_tag.95*)* @vfscanf to i32 (%struct.__FILE_s.69*, i8*, %struct.__va_list_tag.543*)*)(%struct.__FILE_s.69* %1, i8* %fmt, %struct.__va_list_tag.543* %ap) nounwind optsize
  ret i32 %2
}

define i32 @vsnprintf(i8* %s, i64 %n, i8* %fmt, %struct.__va_list_tag.635* %ap) nounwind uwtable optsize {
  %b = alloca i8, align 1
  %f = alloca %struct.__FILE_s.737, align 8
  %1 = bitcast %struct.__FILE_s.737* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast (%struct.__FILE_s.737* @vsnprintf.f to i8*), i64 184, i32 8, i1 false)
  %2 = add i64 %n, -1
  %3 = icmp ugt i64 %2, 2147483646
  br i1 %3, label %4, label %8

; <label>:4                                       ; preds = %0
  %5 = icmp eq i64 %n, 0
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %4
  %7 = call i32* @__errno_location() nounwind readnone optsize
  store i32 75, i32* %7, align 4, !tbaa !6
  br label %26

; <label>:8                                       ; preds = %4, %0
  %.02 = phi i64 [ %n, %0 ], [ 1, %4 ]
  %.01 = phi i8* [ %s, %0 ], [ %b, %4 ]
  %9 = ptrtoint i8* %.01 to i64
  %10 = sub i64 -2, %9
  %11 = icmp ugt i64 %.02, %10
  %.1 = select i1 %11, i64 %10, i64 %.02
  %12 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 12
  store i64 %.1, i64* %12, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 5
  store i8* %.01, i8** %13, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 11
  store i8* %.01, i8** %14, align 8, !tbaa !7
  %15 = getelementptr inbounds i8* %.01, i64 %.1
  %16 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 4
  store i8* %15, i8** %16, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 7
  store i8* %15, i8** %17, align 8, !tbaa !7
  %18 = call i32 bitcast (i32 (%struct.__FILE_s.85*, i8*, %struct.__va_list_tag.723*)* @vfprintf to i32 (%struct.__FILE_s.737*, i8*, %struct.__va_list_tag.635*)*)(%struct.__FILE_s.737* %f, i8* %fmt, %struct.__va_list_tag.635* %ap) nounwind optsize
  %19 = icmp eq i64 %.1, 0
  br i1 %19, label %26, label %20

; <label>:20                                      ; preds = %8
  %21 = load i8** %13, align 8, !tbaa !7
  %22 = load i8** %16, align 8, !tbaa !7
  %23 = icmp eq i8* %21, %22
  %24 = sext i1 %23 to i64
  %25 = getelementptr inbounds i8* %21, i64 %24
  store i8 0, i8* %25, align 1, !tbaa !0
  br label %26

; <label>:26                                      ; preds = %20, %8, %6
  %.0 = phi i32 [ -1, %6 ], [ %18, %8 ], [ %18, %20 ]
  ret i32 %.0
}

define internal i64 @sn_write(%struct.__FILE_s.737* nocapture %f, i8* %s, i64 %l) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 4
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.737* %f, i64 0, i32 5
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = ptrtoint i8* %2 to i64
  %6 = ptrtoint i8* %4 to i64
  %7 = sub i64 %5, %6
  %8 = icmp ugt i64 %7, %l
  %k.0 = select i1 %8, i64 %l, i64 %7
  %9 = tail call i8* @memcpy(i8* %4, i8* %s, i64 %k.0) nounwind optsize
  %10 = load i8** %3, align 8, !tbaa !7
  %11 = getelementptr inbounds i8* %10, i64 %k.0
  store i8* %11, i8** %3, align 8, !tbaa !7
  ret i64 %l
}

define i32 @vsprintf(i8* %s, i8* %fmt, %struct.__va_list_tag.636* %ap) nounwind uwtable optsize {
  %1 = tail call i32 bitcast (i32 (i8*, i64, i8*, %struct.__va_list_tag.635*)* @vsnprintf to i32 (i8*, i64, i8*, %struct.__va_list_tag.636*)*)(i8* %s, i64 2147483647, i8* %fmt, %struct.__va_list_tag.636* %ap) nounwind optsize
  ret i32 %1
}

define i32 @vsscanf(i8* %s, i8* %fmt, %struct.__va_list_tag.637* %ap) nounwind uwtable optsize {
  %r = alloca %struct.rctx.741, align 8
  %1 = call i64 @strlen(i8* %fmt) nounwind optsize
  %2 = add i64 %1, 1
  %3 = alloca i32, i64 %2, align 16
  %4 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 0
  store void (%struct.rctx.741*)* @s_read, void (%struct.rctx.741*)** %4, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 1
  store i8* %s, i8** %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 2
  store i32 0, i32* %6, align 8, !tbaa !6
  %7 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 3
  store i32 (...)* bitcast (i32 (i32)* @isspace to i32 (...)*), i32 (...)** %7, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 4
  store i32 0, i32* %8, align 8, !tbaa !6
  %9 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 5
  store i32 0, i32* %9, align 4, !tbaa !6
  %10 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 6
  store i32 0, i32* %10, align 8, !tbaa !6
  %11 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 7
  store i32 0, i32* %11, align 4, !tbaa !6
  %12 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 8
  store i32 0, i32* %12, align 8, !tbaa !6
  br label %13

; <label>:13                                      ; preds = %13, %0
  %i.01 = phi i64 [ 0, %0 ], [ %18, %13 ]
  %14 = getelementptr inbounds i8* %fmt, i64 %i.01
  %15 = load i8* %14, align 1, !tbaa !0
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i32* %3, i64 %i.01
  store i32 %16, i32* %17, align 4, !tbaa !6
  %18 = add i64 %i.01, 1
  %19 = icmp ugt i64 %18, %1
  br i1 %19, label %20, label %13

; <label>:20                                      ; preds = %13
  %21 = call i32 bitcast (i32 (%struct.rctx*, i32*, %struct.__va_list_tag.541*)* @__scanf to i32 (%struct.rctx.741*, i32*, %struct.__va_list_tag.637*)*)(%struct.rctx.741* %r, i32* %3, %struct.__va_list_tag.637* %ap) nounwind optsize
  ret i32 %21
}

define internal void @s_read(%struct.rctx.741* nocapture %r) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 4
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8* %2, i64 %5
  %7 = load i8* %6, align 1, !tbaa !0
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 6
  store i32 -1, i32* %10, align 4, !tbaa !6
  br label %16

; <label>:11                                      ; preds = %0
  %12 = add nsw i32 %4, 1
  store i32 %12, i32* %3, align 4, !tbaa !6
  %13 = load i8* %6, align 1, !tbaa !0
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds %struct.rctx.741* %r, i64 0, i32 6
  store i32 %14, i32* %15, align 4, !tbaa !6
  br label %16

; <label>:16                                      ; preds = %11, %9
  ret void
}

define i32 @vswprintf(i32* %s, i64 %n, i32* %fmt, %struct.__va_list_tag.664* %ap) nounwind uwtable optsize {
  %f = alloca %struct.__FILE_s.743, align 8
  %buf = alloca [256 x i8], align 16
  %c = alloca %struct.cookie, align 8
  %1 = getelementptr inbounds %struct.cookie* %c, i64 0, i32 0
  store i32* %s, i32** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.cookie* %c, i64 0, i32 1
  %3 = add i64 %n, -1
  store i64 %3, i64* %2, align 8, !tbaa !5
  %4 = bitcast %struct.__FILE_s.743* %f to i8*
  %5 = call i8* @memset(i8* %4, i32 0, i64 184) nounwind optsize
  %6 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 20
  store i8 -1, i8* %6, align 1, !tbaa !0
  %7 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 9
  store i64 (%struct.__FILE_s.743*, i8*, i64)* @sw_write, i64 (%struct.__FILE_s.743*, i8*, i64)** %7, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 12
  store i64 256, i64* %8, align 8, !tbaa !5
  %9 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  %10 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 11
  store i8* %9, i8** %10, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 21
  store i32 -1, i32* %11, align 4, !tbaa !6
  %12 = bitcast %struct.cookie* %c to i8*
  %13 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 23
  store i8* %12, i8** %13, align 8, !tbaa !7
  %14 = icmp eq i64 %n, 0
  br i1 %14, label %25, label %15

; <label>:15                                      ; preds = %0
  %16 = icmp ugt i64 %n, 2147483647
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %15
  %18 = call i32* @__errno_location() nounwind readnone optsize
  store i32 75, i32* %18, align 4, !tbaa !6
  br label %25

; <label>:19                                      ; preds = %15
  %20 = call i32 bitcast (i32 (%struct.__FILE_s.118*, i32*, %struct.__va_list_tag.119*)* @vfwprintf to i32 (%struct.__FILE_s.743*, i32*, %struct.__va_list_tag.664*)*)(%struct.__FILE_s.743* %f, i32* %fmt, %struct.__va_list_tag.664* %ap) nounwind optsize
  %21 = call i64 @sw_write(%struct.__FILE_s.743* %f, i8* null, i64 0) optsize
  %22 = sext i32 %20 to i64
  %23 = icmp uge i64 %22, %n
  %24 = select i1 %23, i32 -1, i32 %20
  br label %25

; <label>:25                                      ; preds = %19, %17, %0
  %.0 = phi i32 [ -1, %17 ], [ %24, %19 ], [ -1, %0 ]
  ret i32 %.0
}

define internal i64 @sw_write(%struct.__FILE_s.743* %f, i8* %s, i64 %l) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 23
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 7
  %4 = load i8** %3, align 8, !tbaa !7
  %5 = icmp eq i8* %4, %s
  br i1 %5, label %.preheader, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.__FILE_s.743* %f, i64 0, i32 5
  %8 = load i8** %7, align 8, !tbaa !7
  %9 = ptrtoint i8* %8 to i64
  %10 = ptrtoint i8* %4 to i64
  %11 = sub i64 %9, %10
  %12 = tail call i64 @sw_write(%struct.__FILE_s.743* %f, i8* %4, i64 %11) optsize
  %13 = icmp eq i64 %12, -1
  br i1 %13, label %37, label %.preheader

.preheader:                                       ; preds = %6, %0
  %14 = bitcast i8* %2 to i32**
  %15 = getelementptr inbounds i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  %.pre = load i64* %16, align 8, !tbaa !5
  br label %17

; <label>:17                                      ; preds = %25, %.preheader
  %18 = phi i64 [ %30, %25 ], [ %.pre, %.preheader ]
  %.03 = phi i64 [ %28, %25 ], [ %l, %.preheader ]
  %.02 = phi i8* [ %27, %25 ], [ %s, %.preheader ]
  %i.0 = phi i32 [ %23, %25 ], [ 0, %.preheader ]
  %19 = icmp eq i64 %18, 0
  %20 = icmp eq i64 %.03, 0
  %or.cond = or i1 %19, %20
  br i1 %or.cond, label %.critedge, label %21

; <label>:21                                      ; preds = %17
  %22 = load i32** %14, align 8, !tbaa !7
  %23 = tail call i32 @mbtowc(i32* %22, i8* %.02, i64 %.03) nounwind optsize
  %24 = icmp sgt i32 %23, -1
  br i1 %24, label %25, label %.critedge

; <label>:25                                      ; preds = %21
  %26 = sext i32 %23 to i64
  %27 = getelementptr inbounds i8* %.02, i64 %26
  %28 = sub i64 %.03, %26
  %29 = load i64* %16, align 8, !tbaa !5
  %30 = add i64 %29, -1
  store i64 %30, i64* %16, align 8, !tbaa !5
  %31 = load i32** %14, align 8, !tbaa !7
  %32 = getelementptr inbounds i32* %31, i64 1
  store i32* %32, i32** %14, align 8, !tbaa !7
  br label %17

.critedge:                                        ; preds = %21, %17
  %i.1 = phi i32 [ %i.0, %17 ], [ %23, %21 ]
  %33 = load i32** %14, align 8, !tbaa !7
  store i32 0, i32* %33, align 4, !tbaa !6
  %34 = icmp slt i32 %i.1, 0
  %35 = sext i32 %i.1 to i64
  %36 = select i1 %34, i64 %35, i64 %l
  br label %37

; <label>:37                                      ; preds = %.critedge, %6
  %.0 = phi i64 [ -1, %6 ], [ %36, %.critedge ]
  ret i64 %.0
}

define i32 @vswscanf(i32* %s, i32* %fmt, %struct.__va_list_tag.665* %ap) nounwind uwtable optsize {
  %r = alloca %struct.rctx.745, align 8
  %1 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 0
  store void (%struct.rctx.745*)* @s_read946, void (%struct.rctx.745*)** %1, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 1
  %3 = bitcast i32* %s to i8*
  store i8* %3, i8** %2, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 2
  store i32 1, i32* %4, align 8, !tbaa !6
  %5 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 3
  store i32 (...)* bitcast (i32 (i32)* @iswspace to i32 (...)*), i32 (...)** %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 4
  store i32 0, i32* %6, align 8, !tbaa !6
  %7 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 5
  store i32 0, i32* %7, align 4, !tbaa !6
  %8 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 6
  store i32 0, i32* %8, align 8, !tbaa !6
  %9 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 7
  store i32 0, i32* %9, align 4, !tbaa !6
  %10 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 8
  store i32 0, i32* %10, align 8, !tbaa !6
  %11 = call i32 bitcast (i32 (%struct.rctx*, i32*, %struct.__va_list_tag.541*)* @__scanf to i32 (%struct.rctx.745*, i32*, %struct.__va_list_tag.665*)*)(%struct.rctx.745* %r, i32* %fmt, %struct.__va_list_tag.665* %ap) nounwind optsize
  ret i32 %11
}

define internal void @s_read946(%struct.rctx.745* nocapture %r) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 1
  %2 = load i8** %1, align 8, !tbaa !7
  %3 = bitcast i8* %2 to i32*
  %4 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 4
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32* %3, i64 %6
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 6
  store i32 -1, i32* %11, align 4, !tbaa !6
  br label %16

; <label>:12                                      ; preds = %0
  %13 = add nsw i32 %5, 1
  store i32 %13, i32* %4, align 4, !tbaa !6
  %14 = load i32* %7, align 4, !tbaa !6
  %15 = getelementptr inbounds %struct.rctx.745* %r, i64 0, i32 6
  store i32 %14, i32* %15, align 4, !tbaa !6
  br label %16

; <label>:16                                      ; preds = %12, %10
  ret void
}

define i32 @vwprintf(i32* %fmt, %struct.__va_list_tag.747* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.642** @stdout, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.118*, i32*, %struct.__va_list_tag.119*)* @vfwprintf to i32 (%struct.__FILE_s.642*, i32*, %struct.__va_list_tag.747*)*)(%struct.__FILE_s.642* %1, i32* %fmt, %struct.__va_list_tag.747* %ap) nounwind optsize
  ret i32 %2
}

define i32 @vwscanf(i32* %fmt, %struct.__va_list_tag.749* %ap) nounwind uwtable optsize {
  %1 = load %struct.__FILE_s.69** @stdin, align 8, !tbaa !7
  %2 = tail call i32 bitcast (i32 (%struct.__FILE_s.121*, i32*, %struct.__va_list_tag.122*)* @vfwscanf to i32 (%struct.__FILE_s.69*, i32*, %struct.__va_list_tag.749*)*)(%struct.__FILE_s.69* %1, i32* %fmt, %struct.__va_list_tag.749* %ap) nounwind optsize
  ret i32 %2
}

define i32 @wait3(i32* %status, i32 %options, %struct.rusage.750* %usage) nounwind uwtable optsize {
  %1 = tail call i32 @wait4(i32 -1, i32* %status, i32 %options, %struct.rusage.750* %usage) nounwind optsize
  ret i32 %1
}

define i32 @wait4(i32 %pid, i32* %status, i32 %options, %struct.rusage.750* %usage) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = ptrtoint i32* %status to i64
  %3 = sext i32 %options to i64
  %4 = ptrtoint %struct.rusage.750* %usage to i64
  %5 = tail call i64 (i64, ...)* @__syscall(i64 114, i64 %1, i64 %2, i64 %3, i64 %4, i32 0, i32 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define i32 @waitid(i32 %type, i32 %id, %struct.__siginfo.754* %info, i32 %options) nounwind uwtable optsize {
  %1 = sext i32 %type to i64
  %2 = sext i32 %id to i64
  %3 = ptrtoint %struct.__siginfo.754* %info to i64
  %4 = sext i32 %options to i64
  %5 = tail call i64 @__syscall_cp(i64 280, i64 %1, i64 %2, i64 %3, i64 %4, i64 0, i64 0) nounwind optsize
  %6 = tail call i64 @__syscall_ret(i64 %5) nounwind optsize
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

define void @__wait(i32* %addr, i32* %waiters, i32 %val, i32 %priv) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %3, %0
  %spins.0 = phi i32 [ 10000, %0 ], [ %4, %3 ]
  %2 = icmp eq i32 %spins.0, 0
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %1
  %4 = add nsw i32 %spins.0, -1
  %5 = load volatile i32* %addr, align 4, !tbaa !6
  %6 = icmp eq i32 %5, %val
  br i1 %6, label %1, label %a_dec.exit

; <label>:7                                       ; preds = %1
  %8 = icmp ne i32* %waiters, null
  br i1 %8, label %a_cas.exit.i.i1, label %a_inc.exit.preheader

a_cas.exit.i.i1:                                  ; preds = %18, %7
  %9 = load volatile i32* %waiters, align 4, !tbaa !6
  %10 = add nsw i32 %9, 1
  br label %11

; <label>:11                                      ; preds = %18, %a_cas.exit.i.i1
  %12 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %9, i32 %10, i32* %waiters) nounwind optsize
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %a_inc.exit.preheader, label %18

a_inc.exit.preheader:                             ; preds = %11, %7
  %14 = load volatile i32* %addr, align 4, !tbaa !6
  %15 = icmp eq i32 %14, %val
  br i1 %15, label %.lr.ph, label %a_inc.exit._crit_edge

.lr.ph:                                           ; preds = %a_inc.exit.preheader
  %16 = ptrtoint i32* %addr to i64
  %17 = sext i32 %val to i64
  br label %a_inc.exit

; <label>:18                                      ; preds = %11
  %19 = load volatile i32* %waiters, align 4, !tbaa !6
  %20 = icmp eq i32 %19, %9
  br i1 %20, label %11, label %a_cas.exit.i.i1

a_inc.exit:                                       ; preds = %a_inc.exit, %.lr.ph
  %21 = tail call i64 (i64, ...)* @__syscall(i64 240, i64 %16, i64 0, i64 %17, i64 0, i32 0, i32 0) nounwind optsize
  %22 = load volatile i32* %addr, align 4, !tbaa !6
  %23 = icmp eq i32 %22, %val
  br i1 %23, label %a_inc.exit, label %a_inc.exit._crit_edge

a_inc.exit._crit_edge:                            ; preds = %a_inc.exit, %a_inc.exit.preheader
  br i1 %8, label %a_cas.exit.i.i, label %a_dec.exit

a_cas.exit.i.i:                                   ; preds = %29, %a_inc.exit._crit_edge
  %24 = load volatile i32* %waiters, align 4, !tbaa !6
  %25 = add nsw i32 %24, -1
  br label %26

; <label>:26                                      ; preds = %29, %a_cas.exit.i.i
  %27 = tail call i32 inttoptr (i64 4294905792 to i32 (i32, i32, i32*)*)(i32 %24, i32 %25, i32* %waiters) nounwind optsize
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %a_dec.exit, label %29

; <label>:29                                      ; preds = %26
  %30 = load volatile i32* %waiters, align 4, !tbaa !6
  %31 = icmp eq i32 %30, %24
  br i1 %31, label %26, label %a_cas.exit.i.i

a_dec.exit:                                       ; preds = %26, %a_inc.exit._crit_edge, %3
  ret void
}

define i32 @wait(i32* %status) nounwind uwtable optsize {
  %1 = tail call i32 @waitpid(i32 -1, i32* %status, i32 0) nounwind optsize
  ret i32 %1
}

define i32 @waitpid(i32 %pid, i32* %status, i32 %options) nounwind uwtable optsize {
  %1 = sext i32 %pid to i64
  %2 = ptrtoint i32* %status to i64
  %3 = sext i32 %options to i64
  %4 = tail call i64 @__syscall_cp(i64 114, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

define void @__wake(i32* %addr, i32 %cnt, i32 %priv) nounwind uwtable optsize {
  %1 = icmp slt i32 %cnt, 0
  %2 = ptrtoint i32* %addr to i64
  %3 = sext i32 %cnt to i64
  %4 = select i1 %1, i64 2147483647, i64 %3
  %5 = tail call i64 (i64, ...)* @__syscall(i64 240, i64 %2, i64 1, i64 %4, i32 0, i32 0, i32 0) nounwind optsize
  ret void
}

define i32* @wcpcpy(i32* %d, i32* %s) nounwind uwtable optsize {
  %1 = tail call i32* @wcscpy(i32* %d, i32* %s) nounwind optsize
  %2 = tail call i64 @wcslen(i32* %s) nounwind optsize
  %3 = getelementptr inbounds i32* %1, i64 %2
  ret i32* %3
}

define i32* @wcpncpy(i32* %d, i32* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i32* @wcsncpy(i32* %d, i32* %s, i64 %n) nounwind optsize
  %2 = tail call i64 @wcsnlen(i32* %s, i64 %n) nounwind optsize
  %3 = getelementptr inbounds i32* %1, i64 %2
  ret i32* %3
}

define i64 @wcrtomb(i8* %s, i32 %wc, %struct.mbstate_t.757* nocapture %st) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %56, label %2

; <label>:2                                       ; preds = %0
  %3 = icmp ult i32 %wc, 128
  br i1 %3, label %4, label %6

; <label>:4                                       ; preds = %2
  %5 = trunc i32 %wc to i8
  store i8 %5, i8* %s, align 1, !tbaa !0
  br label %56

; <label>:6                                       ; preds = %2
  %7 = icmp ult i32 %wc, 2048
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %6
  %9 = lshr i32 %wc, 6
  %10 = or i32 %9, 192
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8* %s, i64 1
  store i8 %11, i8* %s, align 1, !tbaa !0
  %13 = and i32 %wc, 63
  %14 = or i32 %13, 128
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !0
  br label %56

; <label>:16                                      ; preds = %6
  %17 = icmp ult i32 %wc, 55296
  %18 = add i32 %wc, -57344
  %19 = icmp ult i32 %18, 8192
  %or.cond = or i1 %17, %19
  br i1 %or.cond, label %20, label %33

; <label>:20                                      ; preds = %16
  %21 = lshr i32 %wc, 12
  %22 = or i32 %21, 224
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds i8* %s, i64 1
  store i8 %23, i8* %s, align 1, !tbaa !0
  %25 = lshr i32 %wc, 6
  %26 = and i32 %25, 63
  %27 = or i32 %26, 128
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds i8* %s, i64 2
  store i8 %28, i8* %24, align 1, !tbaa !0
  %30 = and i32 %wc, 63
  %31 = or i32 %30, 128
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %29, align 1, !tbaa !0
  br label %56

; <label>:33                                      ; preds = %16
  %34 = add i32 %wc, -65536
  %35 = icmp ult i32 %34, 1048576
  br i1 %35, label %36, label %54

; <label>:36                                      ; preds = %33
  %37 = lshr i32 %wc, 18
  %38 = or i32 %37, 240
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds i8* %s, i64 1
  store i8 %39, i8* %s, align 1, !tbaa !0
  %41 = lshr i32 %wc, 12
  %42 = and i32 %41, 63
  %43 = or i32 %42, 128
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8* %s, i64 2
  store i8 %44, i8* %40, align 1, !tbaa !0
  %46 = lshr i32 %wc, 6
  %47 = and i32 %46, 63
  %48 = or i32 %47, 128
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds i8* %s, i64 3
  store i8 %49, i8* %45, align 1, !tbaa !0
  %51 = and i32 %wc, 63
  %52 = or i32 %51, 128
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %50, align 1, !tbaa !0
  br label %56

; <label>:54                                      ; preds = %33
  %55 = tail call i32* @__errno_location() nounwind readnone optsize
  store i32 84, i32* %55, align 4, !tbaa !6
  br label %56

; <label>:56                                      ; preds = %54, %36, %20, %8, %4, %0
  %.0 = phi i64 [ 1, %4 ], [ 2, %8 ], [ 3, %20 ], [ 4, %36 ], [ -1, %54 ], [ 1, %0 ]
  ret i64 %.0
}

define i32 @wcscasecmp_l(i32* %l, i32* %r, %struct.__locale.758* nocapture %locale) nounwind uwtable optsize {
  %1 = tail call i32 @wcscasecmp(i32* %l, i32* %r) nounwind optsize
  ret i32 %1
}

define i32 @wcscasecmp(i32* %l, i32* %r) nounwind uwtable optsize {
  %1 = tail call i32 @wcsncasecmp(i32* %l, i32* %r, i64 -1) nounwind optsize
  ret i32 %1
}

define i32* @wcscat(i32* %dest, i32* %src) nounwind uwtable optsize {
  %1 = tail call i64 @wcslen(i32* %dest) nounwind optsize
  %2 = getelementptr inbounds i32* %dest, i64 %1
  %3 = tail call i32* @wcscpy(i32* %2, i32* %src) nounwind optsize
  ret i32* %dest
}

define i32* @wcschr(i32* %s, i32 %c) nounwind uwtable optsize {
  %1 = icmp eq i32 %c, 0
  br i1 %1, label %5, label %.preheader

.preheader:                                       ; preds = %0
  %2 = load i32* %s, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  %4 = icmp eq i32 %2, %c
  %or.cond2 = or i1 %3, %4
  br i1 %or.cond2, label %.critedge, label %.lr.ph

; <label>:5                                       ; preds = %0
  %6 = tail call i64 @wcslen(i32* %s) nounwind optsize
  %7 = getelementptr inbounds i32* %s, i64 %6
  br label %14

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.013 = phi i32* [ %8, %.lr.ph ], [ %s, %.preheader ]
  %8 = getelementptr inbounds i32* %.013, i64 1
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = icmp eq i32 %9, 0
  %11 = icmp eq i32 %9, %c
  %or.cond = or i1 %10, %11
  br i1 %or.cond, label %.critedge, label %.lr.ph

.critedge:                                        ; preds = %.lr.ph, %.preheader
  %.lcssa = phi i32 [ %2, %.preheader ], [ %9, %.lr.ph ]
  %.01.lcssa = phi i32* [ %s, %.preheader ], [ %8, %.lr.ph ]
  %12 = icmp ne i32 %.lcssa, 0
  %13 = select i1 %12, i32* %.01.lcssa, i32* null
  br label %14

; <label>:14                                      ; preds = %.critedge, %5
  %.0 = phi i32* [ %13, %.critedge ], [ %7, %5 ]
  ret i32* %.0
}

define i32 @wcscmp(i32* nocapture %l, i32* nocapture %r) nounwind uwtable readonly optsize {
  %1 = load i32* %l, align 4, !tbaa !6
  %2 = load i32* %r, align 4, !tbaa !6
  %3 = icmp ne i32 %1, %2
  %4 = icmp eq i32 %1, 0
  %or.cond5 = or i1 %3, %4
  %5 = icmp eq i32 %2, 0
  %or.cond36 = or i1 %or.cond5, %5
  br i1 %or.cond36, label %.critedge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.08 = phi i32* [ %6, %.lr.ph ], [ %l, %0 ]
  %.027 = phi i32* [ %7, %.lr.ph ], [ %r, %0 ]
  %6 = getelementptr inbounds i32* %.08, i64 1
  %7 = getelementptr inbounds i32* %.027, i64 1
  %8 = load i32* %6, align 4, !tbaa !6
  %9 = load i32* %7, align 4, !tbaa !6
  %10 = icmp ne i32 %8, %9
  %11 = icmp eq i32 %8, 0
  %or.cond = or i1 %10, %11
  %12 = icmp eq i32 %9, 0
  %or.cond3 = or i1 %or.cond, %12
  br i1 %or.cond3, label %.critedge, label %.lr.ph

.critedge:                                        ; preds = %.lr.ph, %0
  %.lcssa4 = phi i32 [ %2, %0 ], [ %9, %.lr.ph ]
  %.lcssa = phi i32 [ %1, %0 ], [ %8, %.lr.ph ]
  %13 = sub nsw i32 %.lcssa, %.lcssa4
  ret i32 %13
}

define i32 @wcscoll_l(i32* %l, i32* %r, %struct.__locale.759* nocapture %locale) nounwind uwtable optsize {
  %1 = tail call i32 @wcscoll(i32* %l, i32* %r) nounwind optsize
  ret i32 %1
}

define i32 @wcscoll(i32* %l, i32* %r) nounwind uwtable optsize {
  %1 = tail call i32 @wcscmp(i32* %l, i32* %r) nounwind optsize
  ret i32 %1
}

define i32* @wcscpy(i32* %d, i32* nocapture %s) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %.01 = phi i32* [ %s, %0 ], [ %2, %1 ]
  %.0 = phi i32* [ %d, %0 ], [ %4, %1 ]
  %2 = getelementptr inbounds i32* %.01, i64 1
  %3 = load i32* %.01, align 4, !tbaa !6
  %4 = getelementptr inbounds i32* %.0, i64 1
  store i32 %3, i32* %.0, align 4, !tbaa !6
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %6, label %1

; <label>:6                                       ; preds = %1
  ret i32* %d
}

define i64 @wcscspn(i32* %s, i32* %c) nounwind uwtable optsize {
  %1 = load i32* %c, align 4, !tbaa !6
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @wcslen(i32* %s) nounwind optsize
  br label %30

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds i32* %c, i64 1
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %.preheader

; <label>:9                                       ; preds = %5
  %10 = tail call i32* @wcschr(i32* %s, i32 %1) nounwind optsize
  %11 = icmp eq i32* %10, null
  br i1 %11, label %17, label %12

; <label>:12                                      ; preds = %9
  %13 = ptrtoint i32* %10 to i64
  %14 = ptrtoint i32* %s to i64
  %15 = sub i64 %13, %14
  %16 = ashr exact i64 %15, 2
  br label %30

; <label>:17                                      ; preds = %9
  %18 = tail call i64 @wcslen(i32* %s) nounwind optsize
  br label %30

.preheader:                                       ; preds = %24, %5
  %.01 = phi i32* [ %25, %24 ], [ %s, %5 ]
  %19 = load i32* %.01, align 4, !tbaa !6
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.critedge, label %21

; <label>:21                                      ; preds = %.preheader
  %22 = tail call i32* @wcschr(i32* %c, i32 %19) nounwind optsize
  %23 = icmp eq i32* %22, null
  br i1 %23, label %24, label %.critedge

; <label>:24                                      ; preds = %21
  %25 = getelementptr inbounds i32* %.01, i64 1
  br label %.preheader

.critedge:                                        ; preds = %21, %.preheader
  %26 = ptrtoint i32* %.01 to i64
  %27 = ptrtoint i32* %s to i64
  %28 = sub i64 %26, %27
  %29 = ashr exact i64 %28, 2
  br label %30

; <label>:30                                      ; preds = %.critedge, %17, %12, %3
  %.0 = phi i64 [ %29, %.critedge ], [ %4, %3 ], [ %16, %12 ], [ %18, %17 ]
  ret i64 %.0
}

define i32* @wcsdup(i32* %s) nounwind uwtable optsize {
  %1 = tail call i64 @wcslen(i32* %s) nounwind optsize
  %2 = add i64 %1, 1
  %3 = shl i64 %2, 2
  %4 = tail call i8* @malloc(i64 %3) optsize
  %5 = icmp eq i8* %4, null
  br i1 %5, label %9, label %6

; <label>:6                                       ; preds = %0
  %7 = bitcast i8* %4 to i32*
  %8 = tail call i32* @wmemcpy(i32* %7, i32* %s, i64 %2) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %6, %0
  %.0 = phi i32* [ %8, %6 ], [ null, %0 ]
  ret i32* %.0
}

define i64 @wcsftime(i32* %wcs, i64 %n, i32* nocapture %f, %struct.tm.656* %tm) nounwind uwtable optsize {
  %out = alloca [100 x i8], align 16
  %in = alloca [4 x i8], align 1
  %1 = alloca [1 x i8*], align 8
  %2 = getelementptr inbounds [4 x i8]* %in, i64 0, i64 3
  %3 = getelementptr inbounds [4 x i8]* %in, i64 0, i64 2
  %4 = getelementptr inbounds [4 x i8]* %in, i64 0, i64 0
  %5 = getelementptr inbounds [4 x i8]* %in, i64 0, i64 1
  %6 = getelementptr inbounds [100 x i8]* %out, i64 0, i64 0
  %7 = getelementptr inbounds [1 x i8*]* %1, i64 0, i64 0
  br label %.backedge

.backedge:                                        ; preds = %38, %14, %0
  %.03 = phi i32* [ %f, %0 ], [ %15, %14 ], [ %.1, %38 ]
  %.02 = phi i64 [ %n, %0 ], [ %17, %14 ], [ %40, %38 ]
  %.01 = phi i32* [ %wcs, %0 ], [ %16, %14 ], [ %39, %38 ]
  %8 = load i32* %.03, align 4, !tbaa !6
  %9 = icmp eq i32 %8, 0
  %10 = icmp ne i64 %.02, 0
  br i1 %9, label %41, label %11

; <label>:11                                      ; preds = %.backedge
  br i1 %10, label %12, label %.loopexit

; <label>:12                                      ; preds = %11
  %13 = icmp eq i32 %8, 37
  br i1 %13, label %18, label %14

; <label>:14                                      ; preds = %12
  %15 = getelementptr inbounds i32* %.03, i64 1
  %16 = getelementptr inbounds i32* %.01, i64 1
  store i32 %8, i32* %.01, align 4, !tbaa !6
  %17 = add i64 %.02, -1
  br label %.backedge

; <label>:18                                      ; preds = %12
  store i8 0, i8* %2, align 1, !tbaa !0
  store i8 0, i8* %3, align 1, !tbaa !0
  %19 = getelementptr inbounds i32* %.03, i64 1
  %20 = load i32* %.03, align 4, !tbaa !6
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %4, align 1, !tbaa !0
  %22 = getelementptr inbounds i32* %.03, i64 2
  %23 = load i32* %19, align 4, !tbaa !6
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !0
  %25 = sext i8 %24 to i32
  %26 = call i8* @strchr(i8* getelementptr inbounds ([3 x i8]* @.str963, i64 0, i64 0), i32 %25) nounwind optsize
  %27 = icmp eq i8* %26, null
  br i1 %27, label %32, label %28

; <label>:28                                      ; preds = %18
  %29 = getelementptr inbounds i32* %.03, i64 3
  %30 = load i32* %22, align 4, !tbaa !6
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %3, align 1, !tbaa !0
  br label %32

; <label>:32                                      ; preds = %28, %18
  %.1 = phi i32* [ %29, %28 ], [ %22, %18 ]
  %33 = call i64 @strftime(i8* %6, i64 100, i8* %4, %struct.tm.656* %tm) nounwind optsize
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %.loopexit, label %35

; <label>:35                                      ; preds = %32
  store i8* %6, i8** %7, align 8, !tbaa !7
  %36 = call i64 @mbsrtowcs(i32* %.01, i8** %7, i64 %.02, %struct.mbstate_t* null) nounwind optsize
  %37 = icmp eq i64 %36, -1
  br i1 %37, label %.loopexit, label %38

; <label>:38                                      ; preds = %35
  %39 = getelementptr inbounds i32* %.01, i64 %36
  %40 = sub i64 %.02, %36
  br label %.backedge

; <label>:41                                      ; preds = %.backedge
  br i1 %10, label %42, label %.loopexit

; <label>:42                                      ; preds = %41
  store i32 0, i32* %.01, align 4, !tbaa !6
  %43 = sub i64 %n, %.02
  br label %.loopexit

.loopexit:                                        ; preds = %42, %41, %35, %32, %11
  %.0 = phi i64 [ %43, %42 ], [ 0, %41 ], [ 0, %11 ], [ 0, %32 ], [ 0, %35 ]
  ret i64 %.0
}

define i64 @wcslen(i32* %s) nounwind uwtable readonly optsize {
  %1 = load i32* %s, align 4, !tbaa !6
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.01 = phi i32* [ %3, %.lr.ph ], [ %s, %0 ]
  %3 = getelementptr inbounds i32* %.01, i64 1
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  %.0.lcssa = phi i32* [ %s, %0 ], [ %3, %.lr.ph ]
  %6 = ptrtoint i32* %.0.lcssa to i64
  %7 = ptrtoint i32* %s to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  ret i64 %9
}

define i32 @wcsncasecmp_l(i32* %l, i32* %r, i64 %n, %struct.__locale.762* nocapture %locale) nounwind uwtable optsize {
  %1 = tail call i32 @wcsncasecmp(i32* %l, i32* %r, i64 %n) nounwind optsize
  ret i32 %1
}

define i32 @wcsncasecmp(i32* nocapture %l, i32* nocapture %r, i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %22, label %.preheader

.preheader:                                       ; preds = %.critedge3, %0
  %.06.in = phi i64 [ %.06, %.critedge3 ], [ %n, %0 ]
  %.05 = phi i32* [ %16, %.critedge3 ], [ %r, %0 ]
  %.04 = phi i32* [ %15, %.critedge3 ], [ %l, %0 ]
  %.06 = add i64 %.06.in, -1
  %2 = load i32* %.04, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %.critedge, label %4

; <label>:4                                       ; preds = %.preheader
  %5 = load i32* %.05, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 0
  %7 = icmp eq i64 %.06, 0
  %or.cond = or i1 %6, %7
  br i1 %or.cond, label %.critedge, label %8

; <label>:8                                       ; preds = %4
  %9 = icmp eq i32 %2, %5
  br i1 %9, label %.critedge3, label %10

; <label>:10                                      ; preds = %8
  %11 = tail call i32 @towlower(i32 %2) nounwind optsize
  %12 = load i32* %.05, align 4, !tbaa !6
  %13 = tail call i32 @towlower(i32 %12) nounwind optsize
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %.critedge3, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %10
  %.pre = load i32* %.04, align 4, !tbaa !6
  br label %.critedge

.critedge3:                                       ; preds = %10, %8
  %15 = getelementptr inbounds i32* %.04, i64 1
  %16 = getelementptr inbounds i32* %.05, i64 1
  br label %.preheader

.critedge:                                        ; preds = %..critedge_crit_edge, %4, %.preheader
  %17 = phi i32 [ %.pre, %..critedge_crit_edge ], [ %2, %4 ], [ 0, %.preheader ]
  %18 = tail call i32 @towlower(i32 %17) nounwind optsize
  %19 = load i32* %.05, align 4, !tbaa !6
  %20 = tail call i32 @towlower(i32 %19) nounwind optsize
  %21 = sub nsw i32 %18, %20
  br label %22

; <label>:22                                      ; preds = %.critedge, %0
  %.0 = phi i32 [ %21, %.critedge ], [ 0, %0 ]
  ret i32 %.0
}

define i32* @wcsncat(i32* %d, i32* nocapture %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i64 @wcslen(i32* %d) nounwind optsize
  %2 = getelementptr inbounds i32* %d, i64 %1
  br label %3

; <label>:3                                       ; preds = %8, %0
  %.02 = phi i64 [ %n, %0 ], [ %9, %8 ]
  %.01 = phi i32* [ %s, %0 ], [ %10, %8 ]
  %.0 = phi i32* [ %2, %0 ], [ %11, %8 ]
  %4 = icmp eq i64 %.02, 0
  br i1 %4, label %.critedge, label %5

; <label>:5                                       ; preds = %3
  %6 = load i32* %.01, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = add i64 %.02, -1
  %10 = getelementptr inbounds i32* %.01, i64 1
  %11 = getelementptr inbounds i32* %.0, i64 1
  store i32 %6, i32* %.0, align 4, !tbaa !6
  br label %3

.critedge:                                        ; preds = %5, %3
  store i32 0, i32* %.0, align 4, !tbaa !6
  ret i32* %d
}

define i32 @wcsncmp(i32* nocapture %l, i32* nocapture %r, i64 %n) nounwind uwtable readonly optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %.critedge5, label %..split_crit_edge

..split_crit_edge:                                ; preds = %7, %0
  %.03 = phi i32* [ %9, %7 ], [ %r, %0 ]
  %.0 = phi i32* [ %8, %7 ], [ %l, %0 ]
  %2 = load i32* %.0, align 4, !tbaa !6
  %3 = load i32* %.03, align 4, !tbaa !6
  %4 = icmp ne i32 %2, %3
  %5 = icmp eq i32 %2, 0
  %or.cond = or i1 %4, %5
  %6 = icmp eq i32 %3, 0
  %or.cond4 = or i1 %or.cond, %6
  br i1 %or.cond4, label %.critedge, label %7

; <label>:7                                       ; preds = %..split_crit_edge
  %8 = getelementptr inbounds i32* %.0, i64 1
  %9 = getelementptr inbounds i32* %.03, i64 1
  br label %..split_crit_edge

.critedge:                                        ; preds = %..split_crit_edge
  %10 = sub nsw i32 %2, %3
  br label %.critedge5

.critedge5:                                       ; preds = %.critedge, %0
  %11 = phi i32 [ %10, %.critedge ], [ 0, %0 ]
  ret i32 %11
}

define i32* @wcsncpy(i32* %d, i32* nocapture %s, i64 %n) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %6, %0
  %.02 = phi i64 [ %n, %0 ], [ %7, %6 ]
  %.01 = phi i32* [ %s, %0 ], [ %8, %6 ]
  %.0 = phi i32* [ %d, %0 ], [ %9, %6 ]
  %2 = icmp eq i64 %.02, 0
  br i1 %2, label %.critedge, label %3

; <label>:3                                       ; preds = %1
  %4 = load i32* %.01, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %.critedge, label %6

; <label>:6                                       ; preds = %3
  %7 = add i64 %.02, -1
  %8 = getelementptr inbounds i32* %.01, i64 1
  %9 = getelementptr inbounds i32* %.0, i64 1
  store i32 %4, i32* %.0, align 4, !tbaa !6
  br label %1

.critedge:                                        ; preds = %3, %1
  %10 = tail call i32* @wmemset(i32* %.0, i32 0, i64 %.02) nounwind optsize
  ret i32* %d
}

define i64 @wcsnlen(i32* %s, i64 %n) nounwind uwtable optsize {
  %1 = tail call i32* @wmemchr(i32* %s, i32 0, i64 %n) nounwind optsize
  %2 = icmp eq i32* %1, null
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  %4 = ptrtoint i32* %1 to i64
  %5 = ptrtoint i32* %s to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  br label %8

; <label>:8                                       ; preds = %3, %0
  %.0 = phi i64 [ %7, %3 ], [ %n, %0 ]
  ret i64 %.0
}

define i64 @wcsnrtombs(i8* %dst, i32** nocapture %wcs, i64 %wn, i64 %n, %struct.mbstate_t.89* nocapture %st) nounwind uwtable optsize {
.preheader:
  %buf = alloca [256 x i8], align 16
  %ws = alloca i32*, align 8
  %0 = load i32** %wcs, align 8, !tbaa !7
  store i32* %0, i32** %ws, align 8, !tbaa !7
  %1 = icmp ne i8* %dst, null
  %.pre = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  %n. = select i1 %1, i64 %n, i64 256
  %dst..pre = select i1 %1, i8* %dst, i8* %.pre
  br label %2

; <label>:2                                       ; preds = %15, %.preheader
  %cnt.0 = phi i64 [ %16, %15 ], [ 0, %.preheader ]
  %.03 = phi i64 [ %.14, %15 ], [ %n., %.preheader ]
  %.0 = phi i64 [ %7, %15 ], [ %wn, %.preheader ]
  %s.0 = phi i8* [ %s.1, %15 ], [ %dst..pre, %.preheader ]
  %3 = icmp eq i64 %.03, 0
  br i1 %3, label %.critedge, label %4

; <label>:4                                       ; preds = %2
  %5 = icmp uge i64 %.0, %.03
  %6 = icmp ugt i64 %.0, 32
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %.critedge1, label %.critedge

.critedge1:                                       ; preds = %4
  %n2.0 = select i1 %5, i64 %.03, i64 %.0
  %7 = sub i64 %.0, %n2.0
  %8 = call i64 @wcsrtombs(i8* %s.0, i32** %ws, i64 %n2.0, %struct.mbstate_t.89* null) nounwind optsize
  %9 = icmp eq i64 %8, -1
  br i1 %9, label %.critedge, label %10

; <label>:10                                      ; preds = %.critedge1
  %11 = icmp eq i8* %s.0, %.pre
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %10
  %13 = getelementptr inbounds i8* %s.0, i64 %8
  %14 = sub i64 %.03, %8
  br label %15

; <label>:15                                      ; preds = %12, %10
  %.14 = phi i64 [ %14, %12 ], [ %.03, %10 ]
  %s.1 = phi i8* [ %13, %12 ], [ %s.0, %10 ]
  %16 = add i64 %8, %cnt.0
  br label %2

.critedge:                                        ; preds = %24, %.critedge1, %4, %2
  %cnt.1 = phi i64 [ %30, %24 ], [ -1, %.critedge1 ], [ %cnt.0, %4 ], [ %cnt.0, %2 ]
  %.2 = phi i64 [ %29, %24 ], [ 0, %.critedge1 ], [ %.03, %4 ], [ 0, %2 ]
  %.1 = phi i64 [ %27, %24 ], [ %7, %.critedge1 ], [ %.0, %4 ], [ %.0, %2 ]
  %s.2 = phi i8* [ %28, %24 ], [ %s.0, %.critedge1 ], [ %s.0, %4 ], [ %s.0, %2 ]
  %17 = icmp eq i64 %.2, 0
  %18 = icmp eq i64 %.1, 0
  %or.cond5 = or i1 %17, %18
  br i1 %or.cond5, label %.critedge2, label %19

; <label>:19                                      ; preds = %.critedge
  %20 = load i32** %ws, align 8, !tbaa !7
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = call i64 bitcast (i64 (i8*, i32, %struct.mbstate_t.757*)* @wcrtomb to i64 (i8*, i32, %struct.mbstate_t.89*)*)(i8* %s.2, i32 %21, %struct.mbstate_t.89* null) nounwind optsize
  %23 = icmp eq i64 %22, -1
  br i1 %23, label %.critedge2, label %24

; <label>:24                                      ; preds = %19
  %25 = load i32** %ws, align 8, !tbaa !7
  %26 = getelementptr inbounds i32* %25, i64 1
  store i32* %26, i32** %ws, align 8, !tbaa !7
  %27 = add i64 %.1, -1
  %28 = getelementptr inbounds i8* %s.2, i64 %22
  %29 = sub i64 %.2, %22
  %30 = add i64 %cnt.1, 1
  br label %.critedge

.critedge2:                                       ; preds = %19, %.critedge
  %cnt.2 = phi i64 [ %cnt.1, %.critedge ], [ -1, %19 ]
  br i1 %1, label %31, label %33

; <label>:31                                      ; preds = %.critedge2
  %32 = load i32** %ws, align 8, !tbaa !7
  store i32* %32, i32** %wcs, align 8, !tbaa !7
  br label %33

; <label>:33                                      ; preds = %31, %.critedge2
  ret i64 %cnt.2
}

define i32* @wcspbrk(i32* %s, i32* %b) nounwind uwtable optsize {
  %1 = tail call i64 @wcscspn(i32* %s, i32* %b) nounwind optsize
  %2 = getelementptr inbounds i32* %s, i64 %1
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = icmp ne i32 %3, 0
  %5 = select i1 %4, i32* %2, i32* null
  ret i32* %5
}

define i32* @wcsrchr(i32* %s, i32 %c) nounwind uwtable optsize {
  %1 = tail call i64 @wcslen(i32* %s) nounwind optsize
  %2 = getelementptr inbounds i32* %s, i64 %1
  br label %3

; <label>:3                                       ; preds = %8, %0
  %p.0 = phi i32* [ %2, %0 ], [ %9, %8 ]
  %4 = icmp uge i32* %p.0, %s
  br i1 %4, label %5, label %.critedge

; <label>:5                                       ; preds = %3
  %6 = load i32* %p.0, align 4, !tbaa !6
  %7 = icmp eq i32 %6, %c
  br i1 %7, label %.critedge, label %8

; <label>:8                                       ; preds = %5
  %9 = getelementptr inbounds i32* %p.0, i64 -1
  br label %3

.critedge:                                        ; preds = %5, %3
  %10 = select i1 %4, i32* %p.0, i32* null
  ret i32* %10
}

define i64 @wcsrtombs(i8* %s, i32** nocapture %ws, i64 %n, %struct.mbstate_t.89* nocapture %st) nounwind uwtable optsize {
  %buf = alloca [4 x i8], align 1
  %1 = icmp eq i8* %s, null
  br i1 %1, label %2, label %.preheader

; <label>:2                                       ; preds = %0
  %3 = load i32** %ws, align 8, !tbaa !7
  %4 = getelementptr inbounds [4 x i8]* %buf, i64 0, i64 0
  br label %5

; <label>:5                                       ; preds = %13, %2
  %ws2.0 = phi i32* [ %3, %2 ], [ %14, %13 ]
  %.03 = phi i64 [ 0, %2 ], [ %.14, %13 ]
  %6 = load i32* %ws2.0, align 4, !tbaa !6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %.loopexit, label %8

; <label>:8                                       ; preds = %5
  %9 = icmp sgt i32 %6, 127
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %8
  %11 = call i64 bitcast (i64 (i8*, i32, %struct.mbstate_t.757*)* @wcrtomb to i64 (i8*, i32, %struct.mbstate_t.89*)*)(i8* %4, i32 %6, %struct.mbstate_t.89* null) nounwind optsize
  %12 = icmp eq i64 %11, -1
  br i1 %12, label %.loopexit, label %13

; <label>:13                                      ; preds = %10, %8
  %.pn = phi i64 [ %11, %10 ], [ 1, %8 ]
  %.14 = add i64 %.pn, %.03
  %14 = getelementptr inbounds i32* %ws2.0, i64 1
  br label %5

.preheader:                                       ; preds = %33, %0
  %.25 = phi i64 [ %.36, %33 ], [ %n, %0 ]
  %.02 = phi i8* [ %.1, %33 ], [ %s, %0 ]
  %15 = icmp ugt i64 %.25, 3
  br i1 %15, label %16, label %.critedge.preheader

; <label>:16                                      ; preds = %.preheader
  %17 = load i32** %ws, align 8, !tbaa !7
  %18 = load i32* %17, align 4, !tbaa !6
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %.critedge.preheader, label %21

.critedge.preheader:                              ; preds = %16, %.preheader
  %20 = getelementptr inbounds [4 x i8]* %buf, i64 0, i64 0
  br label %.critedge

; <label>:21                                      ; preds = %16
  %22 = icmp sgt i32 %18, 127
  br i1 %22, label %23, label %29

; <label>:23                                      ; preds = %21
  %24 = call i64 bitcast (i64 (i8*, i32, %struct.mbstate_t.757*)* @wcrtomb to i64 (i8*, i32, %struct.mbstate_t.89*)*)(i8* %.02, i32 %18, %struct.mbstate_t.89* null) nounwind optsize
  %25 = icmp eq i64 %24, -1
  br i1 %25, label %.loopexit, label %26

; <label>:26                                      ; preds = %23
  %27 = getelementptr inbounds i8* %.02, i64 %24
  %28 = sub i64 %.25, %24
  br label %33

; <label>:29                                      ; preds = %21
  %30 = trunc i32 %18 to i8
  %31 = getelementptr inbounds i8* %.02, i64 1
  store i8 %30, i8* %.02, align 1, !tbaa !0
  %32 = add i64 %.25, -1
  br label %33

; <label>:33                                      ; preds = %29, %26
  %.36 = phi i64 [ %28, %26 ], [ %32, %29 ]
  %.1 = phi i8* [ %27, %26 ], [ %31, %29 ]
  %34 = load i32** %ws, align 8, !tbaa !7
  %35 = getelementptr inbounds i32* %34, i64 1
  store i32* %35, i32** %ws, align 8, !tbaa !7
  br label %.preheader

.critedge:                                        ; preds = %60, %.critedge.preheader
  %.4 = phi i64 [ %.5, %60 ], [ %.25, %.critedge.preheader ]
  %.2 = phi i8* [ %.3, %60 ], [ %.02, %.critedge.preheader ]
  %36 = icmp eq i64 %.4, 0
  br i1 %36, label %.critedge7, label %37

; <label>:37                                      ; preds = %.critedge
  %38 = load i32** %ws, align 8, !tbaa !7
  %39 = load i32* %38, align 4, !tbaa !6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %.critedge1, label %41

; <label>:41                                      ; preds = %37
  %42 = icmp sgt i32 %39, 127
  br i1 %42, label %43, label %56

; <label>:43                                      ; preds = %41
  %44 = call i64 bitcast (i64 (i8*, i32, %struct.mbstate_t.757*)* @wcrtomb to i64 (i8*, i32, %struct.mbstate_t.89*)*)(i8* %20, i32 %39, %struct.mbstate_t.89* null) nounwind optsize
  %45 = icmp eq i64 %44, -1
  br i1 %45, label %.loopexit, label %46

; <label>:46                                      ; preds = %43
  %47 = icmp ugt i64 %44, %.4
  br i1 %47, label %48, label %50

; <label>:48                                      ; preds = %46
  %49 = sub i64 %n, %.4
  br label %.loopexit

; <label>:50                                      ; preds = %46
  %51 = load i32** %ws, align 8, !tbaa !7
  %52 = load i32* %51, align 4, !tbaa !6
  %53 = call i64 bitcast (i64 (i8*, i32, %struct.mbstate_t.757*)* @wcrtomb to i64 (i8*, i32, %struct.mbstate_t.89*)*)(i8* %.2, i32 %52, %struct.mbstate_t.89* null) nounwind optsize
  %54 = getelementptr inbounds i8* %.2, i64 %44
  %55 = sub i64 %.4, %44
  br label %60

; <label>:56                                      ; preds = %41
  %57 = trunc i32 %39 to i8
  %58 = getelementptr inbounds i8* %.2, i64 1
  store i8 %57, i8* %.2, align 1, !tbaa !0
  %59 = add i64 %.4, -1
  br label %60

; <label>:60                                      ; preds = %56, %50
  %.5 = phi i64 [ %55, %50 ], [ %59, %56 ]
  %.3 = phi i8* [ %54, %50 ], [ %58, %56 ]
  %61 = load i32** %ws, align 8, !tbaa !7
  %62 = getelementptr inbounds i32* %61, i64 1
  store i32* %62, i32** %ws, align 8, !tbaa !7
  br label %.critedge

.critedge1:                                       ; preds = %37
  store i8 0, i8* %.2, align 1, !tbaa !0
  br label %.critedge7

.critedge7:                                       ; preds = %.critedge1, %.critedge
  %.422 = phi i64 [ %.4, %.critedge1 ], [ 0, %.critedge ]
  store i32* null, i32** %ws, align 8, !tbaa !7
  %63 = sub i64 %n, %.422
  br label %.loopexit

.loopexit:                                        ; preds = %.critedge7, %48, %43, %23, %10, %5
  %.0 = phi i64 [ %49, %48 ], [ %63, %.critedge7 ], [ -1, %43 ], [ -1, %23 ], [ %.03, %5 ], [ -1, %10 ]
  ret i64 %.0
}

define i64 @wcsspn(i32* %s, i32* %c) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %7, %0
  %.0 = phi i32* [ %s, %0 ], [ %8, %7 ]
  %2 = load i32* %.0, align 4, !tbaa !6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %.critedge, label %4

; <label>:4                                       ; preds = %1
  %5 = tail call i32* @wcschr(i32* %c, i32 %2) nounwind optsize
  %6 = icmp eq i32* %5, null
  br i1 %6, label %.critedge, label %7

; <label>:7                                       ; preds = %4
  %8 = getelementptr inbounds i32* %.0, i64 1
  br label %1

.critedge:                                        ; preds = %4, %1
  %9 = ptrtoint i32* %.0 to i64
  %10 = ptrtoint i32* %s to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  ret i64 %12
}

define i32* @wcsstr(i32* %h, i32* %n) nounwind uwtable optsize {
  %1 = load i32* %n, align 4, !tbaa !6
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %twoway_wcsstr.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = load i32* %h, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %twoway_wcsstr.exit, label %6

; <label>:6                                       ; preds = %3
  %7 = tail call i32* @wcschr(i32* %h, i32 %1) nounwind optsize
  %8 = icmp eq i32* %7, null
  br i1 %8, label %twoway_wcsstr.exit, label %9

; <label>:9                                       ; preds = %6
  %10 = getelementptr inbounds i32* %n, i64 1
  %11 = load i32* %10, align 4, !tbaa !6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %twoway_wcsstr.exit, label %13

; <label>:13                                      ; preds = %9
  %14 = getelementptr inbounds i32* %7, i64 1
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %twoway_wcsstr.exit, label %17

; <label>:17                                      ; preds = %13
  %18 = getelementptr inbounds i32* %n, i64 2
  %19 = load i32* %18, align 4, !tbaa !6
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.preheader17, label %21

; <label>:21                                      ; preds = %17
  %22 = getelementptr inbounds i32* %n, i64 3
  %23 = load i32* %22, align 4, !tbaa !6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %.preheader17, label %25

; <label>:25                                      ; preds = %21
  %26 = getelementptr inbounds i32* %n, i64 4
  %27 = load i32* %26, align 4, !tbaa !6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %.preheader17, label %.preheader

.preheader17:                                     ; preds = %._crit_edge.i, %25, %21, %17
  %i.0.i = phi i64 [ %42, %._crit_edge.i ], [ 0, %25 ], [ 0, %21 ], [ 0, %17 ]
  %.0.i = phi i32* [ %.1.lcssa.i, %._crit_edge.i ], [ %7, %25 ], [ %7, %21 ], [ %7, %17 ]
  %29 = getelementptr inbounds i32* %n, i64 %i.0.i
  %30 = load i32* %29, align 4, !tbaa !6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %naive_wcsstr.exit, label %32

; <label>:32                                      ; preds = %.preheader17
  %33 = getelementptr inbounds i32* %.0.i, i64 %i.0.i
  %34 = load i32* %33, align 4, !tbaa !6
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %naive_wcsstr.exit, label %.preheader.i

.preheader.i:                                     ; preds = %32
  %36 = icmp eq i32 %30, %34
  br i1 %36, label %._crit_edge.i, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.preheader.i
  %37 = load i32* %n, align 4, !tbaa !6
  br label %38

; <label>:38                                      ; preds = %38, %.lr.ph.i
  %.11.i = phi i32* [ %.0.i, %.lr.ph.i ], [ %39, %38 ]
  %39 = getelementptr inbounds i32* %.11.i, i64 1
  %40 = load i32* %39, align 4, !tbaa !6
  %41 = icmp eq i32 %37, %40
  br i1 %41, label %._crit_edge.i, label %38

._crit_edge.i:                                    ; preds = %38, %.preheader.i
  %.1.lcssa.i = phi i32* [ %.0.i, %.preheader.i ], [ %39, %38 ]
  %i.1.lcssa.i = phi i64 [ %i.0.i, %.preheader.i ], [ 0, %38 ]
  %42 = add i64 %i.1.lcssa.i, 1
  br label %.preheader17

naive_wcsstr.exit:                                ; preds = %32, %.preheader17
  %43 = icmp ne i32 %30, 0
  %44 = select i1 %43, i32* null, i32* %.0.i
  br label %twoway_wcsstr.exit

.preheader:                                       ; preds = %52, %25
  %l.0.i = phi i64 [ %53, %52 ], [ 0, %25 ]
  %45 = getelementptr inbounds i32* %n, i64 %l.0.i
  %46 = load i32* %45, align 4, !tbaa !6
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %.critedge.thread.outer.outer.i, label %48

; <label>:48                                      ; preds = %.preheader
  %49 = getelementptr inbounds i32* %7, i64 %l.0.i
  %50 = load i32* %49, align 4, !tbaa !6
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %twoway_wcsstr.exit, label %52

; <label>:52                                      ; preds = %48
  %53 = add i64 %l.0.i, 1
  br label %.preheader

.critedge.thread.outer.outer.i:                   ; preds = %73, %.preheader
  %jp.0.ph.ph.i = phi i64 [ %74, %73 ], [ 0, %.preheader ]
  %ip.0.ph.ph.i = phi i64 [ %jp.0.ph16.i, %73 ], [ -1, %.preheader ]
  br label %.critedge.thread.outer.i

.critedge.thread.outer.i:                         ; preds = %71, %.critedge.thread.outer.outer.i
  %p.0.ph.i = phi i64 [ %72, %71 ], [ 1, %.critedge.thread.outer.outer.i ]
  %jp.0.ph.i = phi i64 [ %54, %71 ], [ %jp.0.ph.ph.i, %.critedge.thread.outer.outer.i ]
  br label %.critedge.thread.outer15.i

.critedge.thread.outer15.i:                       ; preds = %65, %.critedge.thread.outer.i
  %jp.0.ph16.i = phi i64 [ %66, %65 ], [ %jp.0.ph.i, %.critedge.thread.outer.i ]
  br label %.critedge.thread.i

.critedge.thread.i:                               ; preds = %67, %.critedge.thread.outer15.i
  %k.0.i = phi i64 [ %68, %67 ], [ 1, %.critedge.thread.outer15.i ]
  %54 = add i64 %k.0.i, %jp.0.ph16.i
  %55 = icmp ult i64 %54, %l.0.i
  br i1 %55, label %56, label %.outer.outer.i

; <label>:56                                      ; preds = %.critedge.thread.i
  %57 = add i64 %k.0.i, %ip.0.ph.ph.i
  %58 = getelementptr inbounds i32* %n, i64 %57
  %59 = load i32* %58, align 4, !tbaa !6
  %60 = getelementptr inbounds i32* %n, i64 %54
  %61 = load i32* %60, align 4, !tbaa !6
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %63, label %69

; <label>:63                                      ; preds = %56
  %64 = icmp eq i64 %k.0.i, %p.0.ph.i
  br i1 %64, label %65, label %67

; <label>:65                                      ; preds = %63
  %66 = add i64 %jp.0.ph16.i, %p.0.ph.i
  br label %.critedge.thread.outer15.i

; <label>:67                                      ; preds = %63
  %68 = add i64 %k.0.i, 1
  br label %.critedge.thread.i

; <label>:69                                      ; preds = %56
  %70 = icmp sgt i32 %59, %61
  br i1 %70, label %71, label %73

; <label>:71                                      ; preds = %69
  %72 = sub i64 %54, %ip.0.ph.ph.i
  br label %.critedge.thread.outer.i

; <label>:73                                      ; preds = %69
  %74 = add i64 %jp.0.ph16.i, 1
  br label %.critedge.thread.outer.outer.i

; <label>:75                                      ; preds = %89, %.outer7.i
  %k.1.i = phi i64 [ %90, %89 ], [ 1, %.outer7.i ]
  %76 = add i64 %k.1.i, %jp.1.ph8.i
  %77 = icmp ult i64 %76, %l.0.i
  br i1 %77, label %78, label %97

; <label>:78                                      ; preds = %75
  %79 = add i64 %k.1.i, %ip.1.ph.ph.i
  %80 = getelementptr inbounds i32* %n, i64 %79
  %81 = load i32* %80, align 4, !tbaa !6
  %82 = getelementptr inbounds i32* %n, i64 %76
  %83 = load i32* %82, align 4, !tbaa !6
  %84 = icmp eq i32 %81, %83
  br i1 %84, label %85, label %91

; <label>:85                                      ; preds = %78
  %86 = icmp eq i64 %k.1.i, %p.1.ph.i
  br i1 %86, label %87, label %89

; <label>:87                                      ; preds = %85
  %88 = add i64 %jp.1.ph8.i, %p.1.ph.i
  br label %.outer7.i

.outer7.i:                                        ; preds = %.outer.i, %87
  %jp.1.ph8.i = phi i64 [ %88, %87 ], [ %jp.1.ph.i, %.outer.i ]
  br label %75

; <label>:89                                      ; preds = %85
  %90 = add i64 %k.1.i, 1
  br label %75

; <label>:91                                      ; preds = %78
  %92 = icmp slt i32 %81, %83
  br i1 %92, label %93, label %95

; <label>:93                                      ; preds = %91
  %94 = sub i64 %76, %ip.1.ph.ph.i
  br label %.outer.i

.outer.i:                                         ; preds = %.outer.outer.i, %93
  %p.1.ph.i = phi i64 [ %94, %93 ], [ 1, %.outer.outer.i ]
  %jp.1.ph.i = phi i64 [ %76, %93 ], [ %jp.1.ph.ph.i, %.outer.outer.i ]
  br label %.outer7.i

; <label>:95                                      ; preds = %91
  %96 = add i64 %jp.1.ph8.i, 1
  br label %.outer.outer.i

.outer.outer.i:                                   ; preds = %95, %.critedge.thread.i
  %jp.1.ph.ph.i = phi i64 [ %96, %95 ], [ 0, %.critedge.thread.i ]
  %ip.1.ph.ph.i = phi i64 [ %jp.1.ph8.i, %95 ], [ -1, %.critedge.thread.i ]
  br label %.outer.i

; <label>:97                                      ; preds = %75
  %98 = add i64 %ip.1.ph.ph.i, 1
  %99 = add i64 %ip.0.ph.ph.i, 1
  %100 = icmp ugt i64 %98, %99
  %ip.1.ip.0.i = select i1 %100, i64 %ip.1.ph.ph.i, i64 %ip.0.ph.ph.i
  %p.1.p.0.i = select i1 %100, i64 %p.1.ph.i, i64 %p.0.ph.i
  %101 = getelementptr inbounds i32* %n, i64 %p.1.p.0.i
  %102 = add i64 %ip.1.ip.0.i, 1
  %103 = tail call i32 @wmemcmp(i32* %n, i32* %101, i64 %102) nounwind optsize
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %110, label %105

; <label>:105                                     ; preds = %97
  %106 = sub i64 %l.0.i, %ip.1.ip.0.i
  %107 = add i64 %106, -1
  %108 = icmp ugt i64 %ip.1.ip.0.i, %107
  %ip.1.ip.0..i = select i1 %108, i64 %ip.1.ip.0.i, i64 %107
  %109 = add i64 %ip.1.ip.0..i, 1
  br label %112

; <label>:110                                     ; preds = %97
  %111 = sub i64 %l.0.i, %p.1.p.0.i
  br label %112

; <label>:112                                     ; preds = %110, %105
  %p.3.i = phi i64 [ %109, %105 ], [ %p.1.p.0.i, %110 ]
  %mem0.0.i = phi i64 [ 0, %105 ], [ %111, %110 ]
  %113 = or i64 %l.0.i, 63
  br label %114

; <label>:114                                     ; preds = %.backedge.i, %112
  %mem.0.i = phi i64 [ 0, %112 ], [ %mem.0.be.i, %.backedge.i ]
  %z.0.i = phi i32* [ %7, %112 ], [ %z.1.i, %.backedge.i ]
  %.03.i = phi i32* [ %7, %112 ], [ %.03.be.i, %.backedge.i ]
  %115 = ptrtoint i32* %z.0.i to i64
  %116 = ptrtoint i32* %.03.i to i64
  %117 = sub i64 %115, %116
  %118 = ashr exact i64 %117, 2
  %119 = icmp ult i64 %118, %l.0.i
  br i1 %119, label %120, label %130

; <label>:120                                     ; preds = %114
  %121 = tail call i32* @wmemchr(i32* %z.0.i, i32 0, i64 %113) nounwind optsize
  %122 = icmp eq i32* %121, null
  br i1 %122, label %128, label %123

; <label>:123                                     ; preds = %120
  %124 = ptrtoint i32* %121 to i64
  %125 = sub i64 %124, %116
  %126 = ashr exact i64 %125, 2
  %127 = icmp ult i64 %126, %l.0.i
  br i1 %127, label %twoway_wcsstr.exit, label %130

; <label>:128                                     ; preds = %120
  %129 = getelementptr inbounds i32* %z.0.i, i64 %113
  br label %130

; <label>:130                                     ; preds = %128, %123, %114
  %z.1.i = phi i32* [ %121, %123 ], [ %129, %128 ], [ %z.0.i, %114 ]
  %131 = icmp ugt i64 %102, %mem.0.i
  %.mem.0.i = select i1 %131, i64 %102, i64 %mem.0.i
  br label %132

; <label>:132                                     ; preds = %140, %130
  %k.2.i = phi i64 [ %.mem.0.i, %130 ], [ %141, %140 ]
  %133 = getelementptr inbounds i32* %n, i64 %k.2.i
  %134 = load i32* %133, align 4, !tbaa !6
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %.critedge1.thread.i, label %136

; <label>:136                                     ; preds = %132
  %137 = getelementptr inbounds i32* %.03.i, i64 %k.2.i
  %138 = load i32* %137, align 4, !tbaa !6
  %139 = icmp eq i32 %134, %138
  br i1 %139, label %140, label %.critedge1.i

; <label>:140                                     ; preds = %136
  %141 = add i64 %k.2.i, 1
  br label %132

.critedge1.i:                                     ; preds = %136
  %142 = sub i64 %k.2.i, %ip.1.ip.0.i
  br label %.backedge.i

.backedge.i:                                      ; preds = %.critedge2.i, %.critedge1.i
  %mem.0.be.i = phi i64 [ 0, %.critedge1.i ], [ %mem0.0.i, %.critedge2.i ]
  %.pn.i = phi i64 [ %142, %.critedge1.i ], [ %p.3.i, %.critedge2.i ]
  %.03.be.i = getelementptr inbounds i32* %.03.i, i64 %.pn.i
  br label %114

.critedge1.thread.i:                              ; preds = %144, %132
  %k.3.i = phi i64 [ %145, %144 ], [ %102, %132 ]
  %143 = icmp ugt i64 %k.3.i, %mem.0.i
  br i1 %143, label %144, label %.critedge2.i

; <label>:144                                     ; preds = %.critedge1.thread.i
  %145 = add i64 %k.3.i, -1
  %146 = getelementptr inbounds i32* %n, i64 %145
  %147 = load i32* %146, align 4, !tbaa !6
  %148 = getelementptr inbounds i32* %.03.i, i64 %145
  %149 = load i32* %148, align 4, !tbaa !6
  %150 = icmp eq i32 %147, %149
  br i1 %150, label %.critedge1.thread.i, label %.critedge2.i

.critedge2.i:                                     ; preds = %144, %.critedge1.thread.i
  %151 = icmp eq i64 %k.3.i, %mem.0.i
  br i1 %151, label %twoway_wcsstr.exit, label %.backedge.i

twoway_wcsstr.exit:                               ; preds = %.critedge2.i, %123, %48, %naive_wcsstr.exit, %13, %9, %6, %3, %0
  %.0 = phi i32* [ %44, %naive_wcsstr.exit ], [ %h, %0 ], [ null, %3 ], [ %7, %9 ], [ null, %6 ], [ null, %13 ], [ %.03.i, %.critedge2.i ], [ null, %123 ], [ null, %48 ]
  ret i32* %.0
}

define i64 @wcstoimax(i32* %s, i32** %p, i32 %base) nounwind uwtable optsize {
  %ip = alloca %struct.intparse, align 8
  %1 = alloca [1 x i8], align 1
  %2 = bitcast %struct.intparse* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ({ i64, i32, i64, i8, i8, i8, i8, [4 x i8] }* @wcstoimax.ip to i8*), i64 32, i32 8, i1 false)
  %3 = icmp ne i32** %p, null
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i32* %s, i32** %p, align 8, !tbaa !7
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = icmp ne i32 %base, 0
  %7 = add i32 %base, -2
  %8 = icmp ugt i32 %7, 34
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %.preheader

.preheader:                                       ; preds = %5
  %9 = load i32* %s, align 4, !tbaa !6
  %10 = call i32 @iswspace(i32 %9) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %._crit_edge7, label %.lr.ph6

; <label>:12                                      ; preds = %5
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %13, align 4, !tbaa !6
  br label %74

.lr.ph6:                                          ; preds = %.lr.ph6, %.preheader
  %.015 = phi i32* [ %14, %.lr.ph6 ], [ %s, %.preheader ]
  %14 = getelementptr inbounds i32* %.015, i64 1
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = call i32 @iswspace(i32 %15) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %._crit_edge7, label %.lr.ph6

._crit_edge7:                                     ; preds = %.lr.ph6, %.preheader
  %.01.lcssa = phi i32* [ %s, %.preheader ], [ %14, %.lr.ph6 ]
  %18 = trunc i32 %base to i8
  %19 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 4
  store i8 %18, i8* %19, align 1, !tbaa !0
  %20 = getelementptr inbounds [1 x i8]* %1, i64 0, i64 0
  %21 = load i32* %.01.lcssa, align 4, !tbaa !6
  %22 = icmp ult i32 %21, 128
  %23 = sext i1 %22 to i32
  %24 = and i32 %23, %21
  %25 = trunc i32 %24 to i8
  store i8 %25, i8* %20, align 1, !tbaa !0
  %26 = call i32 @__intparse(%struct.intparse* %ip, i8* %20, i64 1) nounwind optsize
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %._crit_edge7
  %.14 = phi i32* [ %28, %.lr.ph ], [ %.01.lcssa, %._crit_edge7 ]
  %28 = getelementptr inbounds i32* %.14, i64 1
  %29 = load i32* %28, align 4, !tbaa !6
  %30 = icmp ult i32 %29, 128
  %31 = sext i1 %30 to i32
  %32 = and i32 %31, %29
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* %20, align 1, !tbaa !0
  %34 = call i32 @__intparse(%struct.intparse* %ip, i8* %20, i64 1) nounwind optsize
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge7
  %36 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %37 = load i8* %36, align 1, !tbaa !0
  br i1 %3, label %38, label %._crit_edge8

; <label>:38                                      ; preds = %._crit_edge
  %39 = icmp eq i8 %37, 22
  br i1 %39, label %.thread, label %40

; <label>:40                                      ; preds = %38
  %41 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 2
  %42 = load i64* %41, align 8, !tbaa !5
  %43 = getelementptr inbounds i32* %s, i64 %42
  store i32* %43, i32** %p, align 8, !tbaa !7
  br label %._crit_edge8

._crit_edge8:                                     ; preds = %40, %._crit_edge
  %44 = icmp eq i8 %37, 0
  br i1 %44, label %56, label %.thread

.thread:                                          ; preds = %._crit_edge8, %38
  %45 = phi i8 [ %37, %._crit_edge8 ], [ 22, %38 ]
  %46 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %47 = sext i8 %45 to i32
  %48 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %47, i32* %48, align 4, !tbaa !6
  %49 = load i8* %46, align 1, !tbaa !0
  %50 = icmp eq i8 %49, 22
  br i1 %50, label %74, label %51

; <label>:51                                      ; preds = %.thread
  %52 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 3
  %53 = load i8* %52, align 8, !tbaa !0
  %54 = icmp ne i8 %53, 0
  %55 = select i1 %54, i64 -9223372036854775808, i64 9223372036854775807
  br label %74

; <label>:56                                      ; preds = %._crit_edge8
  %57 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 0
  %58 = load i64* %57, align 8, !tbaa !9
  %59 = icmp slt i64 %58, 0
  %60 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 3
  %61 = load i8* %60, align 8, !tbaa !0
  %62 = icmp ne i8 %61, 0
  br i1 %59, label %63, label %71

; <label>:63                                      ; preds = %56
  %64 = icmp eq i64 %58, -9223372036854775808
  %or.cond3 = and i1 %62, %64
  br i1 %or.cond3, label %67, label %65

; <label>:65                                      ; preds = %63
  %66 = call i32* @__errno_location() nounwind readnone optsize
  store i32 34, i32* %66, align 4, !tbaa !6
  %.pre = load i8* %60, align 8, !tbaa !0
  br label %67

; <label>:67                                      ; preds = %65, %63
  %68 = phi i8 [ %61, %63 ], [ %.pre, %65 ]
  %69 = icmp ne i8 %68, 0
  %70 = select i1 %69, i64 -9223372036854775808, i64 9223372036854775807
  br label %74

; <label>:71                                      ; preds = %56
  %72 = sub i64 0, %58
  %73 = select i1 %62, i64 %72, i64 %58
  br label %74

; <label>:74                                      ; preds = %71, %67, %51, %.thread, %12
  %.0 = phi i64 [ 0, %12 ], [ %55, %51 ], [ %70, %67 ], [ %73, %71 ], [ 0, %.thread ]
  ret i64 %.0
}

define i32* @wcstok(i32* %s, i32* %sep, i32** nocapture %p) nounwind uwtable optsize {
  %1 = icmp eq i32* %s, null
  br i1 %1, label %2, label %5

; <label>:2                                       ; preds = %0
  %3 = load i32** %p, align 8, !tbaa !7
  %4 = icmp eq i32* %3, null
  br i1 %4, label %19, label %5

; <label>:5                                       ; preds = %2, %0
  %.01 = phi i32* [ %s, %0 ], [ %3, %2 ]
  %6 = tail call i64 @wcsspn(i32* %.01, i32* %sep) nounwind optsize
  %7 = getelementptr inbounds i32* %.01, i64 %6
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %5
  store i32* null, i32** %p, align 8, !tbaa !7
  br label %19

; <label>:11                                      ; preds = %5
  %12 = tail call i64 @wcscspn(i32* %7, i32* %sep) nounwind optsize
  %.sum = add i64 %12, %6
  %13 = getelementptr inbounds i32* %.01, i64 %.sum
  store i32* %13, i32** %p, align 8, !tbaa !7
  %14 = load i32* %13, align 4, !tbaa !6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %11
  %.sum2 = add i64 %.sum, 1
  %17 = getelementptr inbounds i32* %.01, i64 %.sum2
  store i32* %17, i32** %p, align 8, !tbaa !7
  store i32 0, i32* %13, align 4, !tbaa !6
  br label %19

; <label>:18                                      ; preds = %11
  store i32* null, i32** %p, align 8, !tbaa !7
  br label %19

; <label>:19                                      ; preds = %18, %16, %10, %2
  %.0 = phi i32* [ null, %10 ], [ null, %2 ], [ %7, %18 ], [ %7, %16 ]
  ret i32* %.0
}

define i64 @wcstoll(i32* %s, i32** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @wcstoimax(i32* %s, i32** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @wcstol(i32* %s, i32** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @wcstoimax(i32* %s, i32** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @wcstombs(i8* %s, i32* %ws, i64 %n) nounwind uwtable optsize {
  %1 = alloca i32*, align 8
  store i32* %ws, i32** %1, align 8, !tbaa !7
  %2 = call i64 @wcsrtombs(i8* %s, i32** %1, i64 %n, %struct.mbstate_t.89* null) nounwind optsize
  ret i64 %2
}

define i64 @wcstoull(i32* %s, i32** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @wcstoumax(i32* %s, i32** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @wcstoul(i32* %s, i32** %p, i32 %base) nounwind uwtable optsize {
  %1 = tail call i64 @wcstoumax(i32* %s, i32** %p, i32 %base) nounwind optsize
  ret i64 %1
}

define i64 @wcstoumax(i32* %s, i32** %p, i32 %base) nounwind uwtable optsize {
  %ip = alloca %struct.intparse, align 8
  %1 = alloca [1 x i8], align 1
  %2 = bitcast %struct.intparse* %ip to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ({ i64, i32, i64, i8, i8, i8, i8, [4 x i8] }* @wcstoumax.ip to i8*), i64 32, i32 8, i1 false)
  %3 = icmp ne i32** %p, null
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i32* %s, i32** %p, align 8, !tbaa !7
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = icmp ne i32 %base, 0
  %7 = add i32 %base, -2
  %8 = icmp ugt i32 %7, 34
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %.preheader

.preheader:                                       ; preds = %5
  %9 = load i32* %s, align 4, !tbaa !6
  %10 = call i32 @iswspace(i32 %9) nounwind optsize
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %._crit_edge6, label %.lr.ph5

; <label>:12                                      ; preds = %5
  %13 = call i32* @__errno_location() nounwind readnone optsize
  store i32 22, i32* %13, align 4, !tbaa !6
  br label %58

.lr.ph5:                                          ; preds = %.lr.ph5, %.preheader
  %.014 = phi i32* [ %14, %.lr.ph5 ], [ %s, %.preheader ]
  %14 = getelementptr inbounds i32* %.014, i64 1
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = call i32 @iswspace(i32 %15) nounwind optsize
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %._crit_edge6, label %.lr.ph5

._crit_edge6:                                     ; preds = %.lr.ph5, %.preheader
  %.01.lcssa = phi i32* [ %s, %.preheader ], [ %14, %.lr.ph5 ]
  %18 = trunc i32 %base to i8
  %19 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 4
  store i8 %18, i8* %19, align 1, !tbaa !0
  %20 = getelementptr inbounds [1 x i8]* %1, i64 0, i64 0
  %21 = load i32* %.01.lcssa, align 4, !tbaa !6
  %22 = icmp ult i32 %21, 128
  %23 = sext i1 %22 to i32
  %24 = and i32 %23, %21
  %25 = trunc i32 %24 to i8
  store i8 %25, i8* %20, align 1, !tbaa !0
  %26 = call i32 @__intparse(%struct.intparse* %ip, i8* %20, i64 1) nounwind optsize
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %._crit_edge6
  %.13 = phi i32* [ %28, %.lr.ph ], [ %.01.lcssa, %._crit_edge6 ]
  %28 = getelementptr inbounds i32* %.13, i64 1
  %29 = load i32* %28, align 4, !tbaa !6
  %30 = icmp ult i32 %29, 128
  %31 = sext i1 %30 to i32
  %32 = and i32 %31, %29
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* %20, align 1, !tbaa !0
  %34 = call i32 @__intparse(%struct.intparse* %ip, i8* %20, i64 1) nounwind optsize
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge6
  %36 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %37 = load i8* %36, align 1, !tbaa !0
  br i1 %3, label %38, label %._crit_edge7

; <label>:38                                      ; preds = %._crit_edge
  %39 = icmp eq i8 %37, 22
  br i1 %39, label %.thread, label %40

; <label>:40                                      ; preds = %38
  %41 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 2
  %42 = load i64* %41, align 8, !tbaa !5
  %43 = getelementptr inbounds i32* %s, i64 %42
  store i32* %43, i32** %p, align 8, !tbaa !7
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %40, %._crit_edge
  %44 = icmp eq i8 %37, 0
  br i1 %44, label %50, label %.thread

.thread:                                          ; preds = %._crit_edge7, %38
  %45 = phi i8 [ %37, %._crit_edge7 ], [ 22, %38 ]
  %46 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 6
  %47 = sext i8 %45 to i32
  %48 = call i32* @__errno_location() nounwind readnone optsize
  store i32 %47, i32* %48, align 4, !tbaa !6
  %49 = load i8* %46, align 1, !tbaa !0
  %not. = icmp ne i8 %49, 22
  %. = sext i1 %not. to i64
  br label %58

; <label>:50                                      ; preds = %._crit_edge7
  %51 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 3
  %52 = load i8* %51, align 8, !tbaa !0
  %53 = icmp ne i8 %52, 0
  %54 = getelementptr inbounds %struct.intparse* %ip, i64 0, i32 0
  %55 = load i64* %54, align 8, !tbaa !9
  %56 = sub i64 0, %55
  %57 = select i1 %53, i64 %56, i64 %55
  br label %58

; <label>:58                                      ; preds = %50, %.thread, %12
  %.0 = phi i64 [ 0, %12 ], [ %57, %50 ], [ %., %.thread ]
  ret i64 %.0
}

define i32* @wcswcs(i32* %haystack, i32* %needle) nounwind uwtable optsize {
  %1 = tail call i32* @wcsstr(i32* %haystack, i32* %needle) nounwind optsize
  ret i32* %1
}

define i32 @wcswidth(i32* nocapture %wcs, i64 %n) nounwind uwtable optsize {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %k.0 = phi i32 [ 0, %0 ], [ %8, %10 ]
  %l.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %.02 = phi i64 [ %n, %0 ], [ %2, %10 ]
  %.0 = phi i32* [ %wcs, %0 ], [ %12, %10 ]
  %2 = add i64 %.02, -1
  %3 = icmp eq i64 %.02, 0
  br i1 %3, label %.critedge, label %4

; <label>:4                                       ; preds = %1
  %5 = load i32* %.0, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.critedge, label %7

; <label>:7                                       ; preds = %4
  %8 = tail call i32 @wcwidth(i32 %5) nounwind optsize
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %10, label %.critedge

; <label>:10                                      ; preds = %7
  %11 = add nsw i32 %8, %l.0
  %12 = getelementptr inbounds i32* %.0, i64 1
  br label %1

.critedge:                                        ; preds = %7, %4, %1
  %k.1 = phi i32 [ %8, %7 ], [ %k.0, %4 ], [ %k.0, %1 ]
  %13 = icmp slt i32 %k.1, 0
  %14 = select i1 %13, i32 %k.1, i32 %l.0
  ret i32 %14
}

define i64 @wcsxfrm_l(i32* %dest, i32* %src, i64 %n, %struct.__locale.768* nocapture %locale) nounwind uwtable optsize {
  %1 = tail call i64 @wcsxfrm(i32* %dest, i32* %src, i64 %n) nounwind optsize
  ret i64 %1
}

define i64 @wcsxfrm(i32* %dest, i32* %src, i64 %n) nounwind uwtable optsize {
  %1 = tail call i64 @wcslen(i32* %src) nounwind optsize
  %2 = icmp ult i64 %1, %n
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = add i64 %n, -1
  %5 = tail call i32* @wmemcpy(i32* %dest, i32* %src, i64 %4) nounwind optsize
  %6 = getelementptr inbounds i32* %dest, i64 %4
  store i32 0, i32* %6, align 4, !tbaa !6
  br label %9

; <label>:7                                       ; preds = %0
  %8 = tail call i32* @wcscpy(i32* %dest, i32* %src) nounwind optsize
  br label %9

; <label>:9                                       ; preds = %7, %3
  ret i64 %1
}

define i32 @wctob(i32 %c) nounwind uwtable readnone optsize {
  %1 = icmp ult i32 %c, 128
  %c. = select i1 %1, i32 %c, i32 -1
  ret i32 %c.
}

define i32 @wctomb(i8* %s, i32 %wc) nounwind uwtable optsize {
  %1 = icmp eq i8* %s, null
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i64 @wcrtomb(i8* %s, i32 %wc, %struct.mbstate_t.757* null) nounwind optsize
  %4 = trunc i64 %3 to i32
  br label %5

; <label>:5                                       ; preds = %2, %0
  %.0 = phi i32 [ %4, %2 ], [ 0, %0 ]
  ret i32 %.0
}

define i32 @wctrans_l(i8* %s, %struct.__locale.770* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @wctrans(i8* %s) nounwind optsize
  ret i32 %1
}

define i32 @wctrans(i8* %class) nounwind uwtable optsize {
  %1 = tail call i32 @strcmp(i8* %class, i8* getelementptr inbounds ([8 x i8]* @.str984, i64 0, i64 0)) nounwind optsize
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @strcmp(i8* %class, i8* getelementptr inbounds ([8 x i8]* @.str1985, i64 0, i64 0)) nounwind optsize
  %5 = icmp eq i32 %4, 0
  %. = select i1 %5, i32 2, i32 0
  br label %6

; <label>:6                                       ; preds = %3, %0
  %.0 = phi i32 [ 1, %0 ], [ %., %3 ]
  ret i32 %.0
}

define i32 @towctrans(i32 %wc, i32 %trans) nounwind uwtable optsize {
  switch i32 %trans, label %5 [
    i32 1, label %1
    i32 2, label %3
  ]

; <label>:1                                       ; preds = %0
  %2 = tail call i32 @towupper(i32 %wc) nounwind optsize
  br label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @towlower(i32 %wc) nounwind optsize
  br label %5

; <label>:5                                       ; preds = %3, %1, %0
  %.0 = phi i32 [ %2, %1 ], [ %4, %3 ], [ %wc, %0 ]
  ret i32 %.0
}

define i32 @wctype_l(i8* %s, %struct.__locale.771* nocapture %l) nounwind uwtable optsize {
  %1 = tail call i32 @wctype(i8* %s) nounwind optsize
  ret i32 %1
}

define i32 @wcwidth(i32 %wc) nounwind uwtable optsize {
  %1 = add i32 %wc, -32
  %2 = icmp ult i32 %1, 95
  br i1 %2, label %41, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i32 @iswprint(i32 %wc) nounwind optsize
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %3
  %7 = icmp ne i32 %wc, 0
  %8 = sext i1 %7 to i32
  br label %41

; <label>:9                                       ; preds = %3
  %10 = add i32 %wc, -131072
  %11 = icmp ult i32 %10, 131072
  br i1 %11, label %41, label %.preheader

.preheader:                                       ; preds = %.preheader, %9
  %a.0 = phi i32 [ %23, %.preheader ], [ 0, %9 ]
  %n.0 = phi i32 [ %12, %.preheader ], [ 149, %9 ]
  %12 = ashr i32 %n.0, 1
  %13 = add nsw i32 %12, 1
  %14 = add nsw i32 %12, %a.0
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [149 x %struct.range.772]* bitcast (<{ { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 } }>* @ranges990 to [149 x %struct.range.772]*), i64 0, i64 %15
  %17 = bitcast %struct.range.772* %16 to i32*
  %18 = load i32* %17, align 4
  %19 = and i32 %18, 1048575
  %20 = sub i32 %19, %wc
  %21 = ashr i32 %20, 31
  %22 = and i32 %21, %13
  %23 = add nsw i32 %22, %a.0
  %24 = icmp eq i32 %12, 0
  br i1 %24, label %25, label %.preheader

; <label>:25                                      ; preds = %.preheader
  %26 = sext i32 %23 to i64
  %27 = getelementptr inbounds [149 x %struct.range.772]* bitcast (<{ { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 }, { i8, i8, i8, i8 } }>* @ranges990 to [149 x %struct.range.772]*), i64 0, i64 %26
  %28 = bitcast %struct.range.772* %27 to i32*
  %29 = load i32* %28, align 4
  %30 = and i32 %29, 1048575
  %31 = sub i32 %30, %wc
  %32 = lshr i32 %29, 21
  %33 = icmp ugt i32 %31, %32
  br i1 %33, label %37, label %34

; <label>:34                                      ; preds = %25
  %35 = lshr i32 %29, 19
  %36 = and i32 %35, 2
  br label %41

; <label>:37                                      ; preds = %25
  %38 = add i32 %wc, -12352
  %39 = icmp ult i32 %38, 42944
  %40 = select i1 %39, i32 2, i32 1
  br label %41

; <label>:41                                      ; preds = %37, %34, %9, %6, %0
  %.0 = phi i32 [ %36, %34 ], [ %40, %37 ], [ %8, %6 ], [ 1, %0 ], [ 2, %9 ]
  ret i32 %.0
}

define i32* @wmemchr(i32* %s, i32 %c, i64 %n) nounwind uwtable readonly optsize {
  br label %1

; <label>:1                                       ; preds = %6, %0
  %.01 = phi i64 [ %n, %0 ], [ %7, %6 ]
  %.0 = phi i32* [ %s, %0 ], [ %8, %6 ]
  %2 = icmp ne i64 %.01, 0
  br i1 %2, label %3, label %.critedge

; <label>:3                                       ; preds = %1
  %4 = load i32* %.0, align 4, !tbaa !6
  %5 = icmp eq i32 %4, %c
  br i1 %5, label %.critedge, label %6

; <label>:6                                       ; preds = %3
  %7 = add i64 %.01, -1
  %8 = getelementptr inbounds i32* %.0, i64 1
  br label %1

.critedge:                                        ; preds = %3, %1
  %9 = select i1 %2, i32* %.0, i32* null
  ret i32* %9
}

define i32 @wmemcmp(i32* nocapture %l, i32* nocapture %r, i64 %n) nounwind uwtable readonly optsize {
  br label %1

; <label>:1                                       ; preds = %7, %0
  %.02 = phi i64 [ %n, %0 ], [ %8, %7 ]
  %.01 = phi i32* [ %r, %0 ], [ %10, %7 ]
  %.0 = phi i32* [ %l, %0 ], [ %9, %7 ]
  %2 = icmp eq i64 %.02, 0
  br i1 %2, label %.critedge3, label %3

; <label>:3                                       ; preds = %1
  %4 = load i32* %.0, align 4, !tbaa !6
  %5 = load i32* %.01, align 4, !tbaa !6
  %6 = icmp eq i32 %4, %5
  br i1 %6, label %7, label %.critedge

; <label>:7                                       ; preds = %3
  %8 = add i64 %.02, -1
  %9 = getelementptr inbounds i32* %.0, i64 1
  %10 = getelementptr inbounds i32* %.01, i64 1
  br label %1

.critedge:                                        ; preds = %3
  %11 = sub nsw i32 %4, %5
  br label %.critedge3

.critedge3:                                       ; preds = %.critedge, %1
  %12 = phi i32 [ %11, %.critedge ], [ 0, %1 ]
  ret i32 %12
}

define i32* @wmemcpy(i32* %d, i32* nocapture %s, i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.05 = phi i32* [ %5, %.lr.ph ], [ %d, %0 ]
  %.014 = phi i32* [ %3, %.lr.ph ], [ %s, %0 ]
  %.023 = phi i64 [ %2, %.lr.ph ], [ %n, %0 ]
  %2 = add i64 %.023, -1
  %3 = getelementptr inbounds i32* %.014, i64 1
  %4 = load i32* %.014, align 4, !tbaa !6
  %5 = getelementptr inbounds i32* %.05, i64 1
  store i32 %4, i32* %.05, align 4, !tbaa !6
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  ret i32* %d
}

define i32* @wmemmove(i32* %d, i32* %s, i64 %n) nounwind uwtable optsize {
  %1 = ptrtoint i32* %d to i64
  %2 = ptrtoint i32* %s to i64
  %3 = sub i64 %1, %2
  %4 = ashr exact i64 %3, 2
  %5 = icmp ult i64 %4, %n
  br i1 %5, label %.preheader, label %12

.preheader:                                       ; preds = %0
  %6 = icmp eq i64 %n, 0
  br i1 %6, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.preheader
  %.in = phi i64 [ %7, %.lr.ph ], [ %n, %.preheader ]
  %7 = add i64 %.in, -1
  %8 = getelementptr inbounds i32* %s, i64 %7
  %9 = load i32* %8, align 4, !tbaa !6
  %10 = getelementptr inbounds i32* %d, i64 %7
  store i32 %9, i32* %10, align 4, !tbaa !6
  %11 = icmp eq i64 %7, 0
  br i1 %11, label %.loopexit, label %.lr.ph

; <label>:12                                      ; preds = %0
  %13 = tail call i32* @wmemcpy(i32* %d, i32* %s, i64 %n) nounwind optsize
  br label %.loopexit

.loopexit:                                        ; preds = %12, %.lr.ph, %.preheader
  %.0 = phi i32* [ %13, %12 ], [ %d, %.lr.ph ], [ %d, %.preheader ]
  ret i32* %.0
}

define i32* @wmemset(i32* %d, i32 %c, i64 %n) nounwind uwtable optsize {
  %1 = icmp eq i64 %n, 0
  br i1 %1, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %0
  %.03 = phi i32* [ %3, %.lr.ph ], [ %d, %0 ]
  %.012 = phi i64 [ %2, %.lr.ph ], [ %n, %0 ]
  %2 = add i64 %.012, -1
  %3 = getelementptr inbounds i32* %.03, i64 1
  store i32 %c, i32* %.03, align 4, !tbaa !6
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %0
  ret i32* %d
}

define i32 @wordexp(i8* %s, %struct.wordexp_t* nocapture %we, i32 %flags) nounwind uwtable optsize {
  %s.i.i = alloca i8*, align 8
  %1 = alloca [1 x i64], align 8
  %status.i = alloca i32, align 4
  %p.i = alloca [2 x i32], align 4
  %cs = alloca i32, align 4
  %2 = call i32 @pthread_setcancelstate(i32 1, i32* %cs) nounwind optsize
  %3 = bitcast i32* %status.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %3) nounwind
  %4 = bitcast [2 x i32]* %p.i to i8*
  call void @llvm.lifetime.start(i64 -1, i8* %4) nounwind
  %5 = and i32 %flags, 16
  %6 = icmp ne i32 %5, 0
  %7 = select i1 %6, i8* getelementptr inbounds ([1 x i8]* @.str1001, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @.str11002, i64 0, i64 0)
  %8 = and i32 %flags, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

; <label>:10                                      ; preds = %0
  call void @wordfree(%struct.wordexp_t* %we) nounwind optsize
  br label %11

; <label>:11                                      ; preds = %10, %0
  %12 = and i32 %flags, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %.loopexit.i, label %.preheader.i

.preheader.i:                                     ; preds = %.thread.i, %11
  %np.0.i = phi i64 [ %np.1.i, %.thread.i ], [ 0, %11 ]
  %dq.0.i = phi i32 [ %dq.1.i, %.thread.i ], [ 0, %11 ]
  %sq.0.i = phi i32 [ %sq.1.i, %.thread.i ], [ 0, %11 ]
  %i.0.i = phi i64 [ %55, %.thread.i ], [ 0, %11 ]
  %14 = getelementptr inbounds i8* %s, i64 %i.0.i
  %15 = load i8* %14, align 1, !tbaa !0
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %.loopexit.i, label %17

; <label>:17                                      ; preds = %.preheader.i
  %18 = sext i8 %15 to i32
  switch i32 %18, label %.thread.i [
    i32 92, label %19
    i32 39, label %22
    i32 34, label %25
    i32 40, label %28
    i32 41, label %31
    i32 10, label %35
    i32 124, label %35
    i32 38, label %35
    i32 59, label %35
    i32 60, label %35
    i32 62, label %35
    i32 123, label %35
    i32 125, label %35
    i32 36, label %40
    i32 96, label %54
  ]

; <label>:19                                      ; preds = %17
  %20 = icmp eq i32 %sq.0.i, 0
  %21 = zext i1 %20 to i64
  %.i.0.i = add i64 %21, %i.0.i
  br label %.thread.i

; <label>:22                                      ; preds = %17
  %23 = icmp eq i32 %dq.0.i, 0
  %24 = zext i1 %23 to i32
  %.sq.0.i = xor i32 %24, %sq.0.i
  br label %.thread.i

; <label>:25                                      ; preds = %17
  %26 = icmp eq i32 %sq.0.i, 0
  %27 = zext i1 %26 to i32
  %.dq.0.i = xor i32 %27, %dq.0.i
  br label %.thread.i

; <label>:28                                      ; preds = %17
  %cond.i = icmp eq i64 %np.0.i, 0
  br i1 %cond.i, label %35, label %29

; <label>:29                                      ; preds = %28
  %30 = add i64 %np.0.i, 1
  br label %.thread.i

; <label>:31                                      ; preds = %17
  %32 = icmp eq i64 %np.0.i, 0
  br i1 %32, label %35, label %33

; <label>:33                                      ; preds = %31
  %34 = add i64 %np.0.i, -1
  br label %.thread.i

; <label>:35                                      ; preds = %31, %28, %17, %17, %17, %17, %17, %17, %17, %17
  %36 = or i32 %sq.0.i, %dq.0.i
  %37 = sext i32 %36 to i64
  %38 = or i64 %37, %np.0.i
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %do_wordexp.exit, label %.thread.i

; <label>:40                                      ; preds = %17
  %41 = add i64 %i.0.i, 1
  %42 = getelementptr inbounds i8* %s, i64 %41
  %43 = load i8* %42, align 1, !tbaa !0
  %44 = icmp eq i8 %43, 40
  br i1 %44, label %45, label %.thread.i

; <label>:45                                      ; preds = %40
  %46 = add i64 %i.0.i, 2
  %47 = getelementptr inbounds i8* %s, i64 %46
  %48 = load i8* %47, align 1, !tbaa !0
  %49 = icmp eq i8 %48, 40
  br i1 %49, label %50, label %52

; <label>:50                                      ; preds = %45
  %51 = add i64 %np.0.i, 2
  br label %.thread.i

; <label>:52                                      ; preds = %45
  %53 = icmp eq i32 %sq.0.i, 0
  br i1 %53, label %do_wordexp.exit, label %.thread.i

; <label>:54                                      ; preds = %17
  %.old.i = icmp eq i32 %sq.0.i, 0
  br i1 %.old.i, label %do_wordexp.exit, label %.thread.i

.thread.i:                                        ; preds = %54, %52, %50, %40, %35, %33, %29, %25, %22, %19, %17
  %np.1.i = phi i64 [ %np.0.i, %17 ], [ %np.0.i, %54 ], [ %51, %50 ], [ %np.0.i, %52 ], [ %np.0.i, %35 ], [ %34, %33 ], [ %30, %29 ], [ %np.0.i, %19 ], [ %np.0.i, %22 ], [ %np.0.i, %25 ], [ %np.0.i, %40 ]
  %dq.1.i = phi i32 [ %dq.0.i, %17 ], [ %dq.0.i, %54 ], [ %dq.0.i, %50 ], [ %dq.0.i, %52 ], [ %dq.0.i, %35 ], [ %dq.0.i, %33 ], [ %dq.0.i, %29 ], [ %dq.0.i, %19 ], [ %dq.0.i, %22 ], [ %.dq.0.i, %25 ], [ %dq.0.i, %40 ]
  %sq.1.i = phi i32 [ %sq.0.i, %17 ], [ %sq.0.i, %54 ], [ %sq.0.i, %50 ], [ %sq.0.i, %52 ], [ %sq.0.i, %35 ], [ %sq.0.i, %33 ], [ %sq.0.i, %29 ], [ %sq.0.i, %19 ], [ %.sq.0.i, %22 ], [ %sq.0.i, %25 ], [ %sq.0.i, %40 ]
  %i.1.i = phi i64 [ %i.0.i, %17 ], [ %i.0.i, %54 ], [ %46, %50 ], [ %i.0.i, %52 ], [ %i.0.i, %35 ], [ %i.0.i, %33 ], [ %i.0.i, %29 ], [ %.i.0.i, %19 ], [ %i.0.i, %22 ], [ %i.0.i, %25 ], [ %i.0.i, %40 ]
  %55 = add i64 %i.1.i, 1
  br label %.preheader.i

.loopexit.i:                                      ; preds = %.preheader.i, %11
  %56 = and i32 %flags, 2
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %.loopexit.i
  %59 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 0
  %60 = load i64* %59, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 1
  %62 = load i8*** %61, align 8, !tbaa !7
  br label %63

; <label>:63                                      ; preds = %58, %.loopexit.i
  %wc.0.i = phi i64 [ %60, %58 ], [ 0, %.loopexit.i ]
  %wv.0.i = phi i8** [ %62, %58 ], [ null, %.loopexit.i ]
  %64 = and i32 %flags, 1
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %72

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 2
  %68 = load i64* %67, align 8, !tbaa !5
  %69 = icmp ugt i64 %68, 576460752303423487
  br i1 %69, label %do_wordexp.exit, label %70

; <label>:70                                      ; preds = %66
  %71 = add i64 %68, %wc.0.i
  br label %72

; <label>:72                                      ; preds = %70, %63
  %i.2.i = phi i64 [ %71, %70 ], [ %wc.0.i, %63 ]
  %73 = getelementptr inbounds [2 x i32]* %p.i, i64 0, i64 0
  %74 = call i32 @pipe(i32* %73) nounwind optsize
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %do_wordexp.exit, label %76

; <label>:76                                      ; preds = %72
  %77 = call i32 @fork() nounwind optsize
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %85

; <label>:79                                      ; preds = %76
  %80 = load i32* %73, align 4, !tbaa !6
  %81 = call i32 @close(i32 %80) nounwind optsize
  %82 = getelementptr inbounds [2 x i32]* %p.i, i64 0, i64 1
  %83 = load i32* %82, align 4, !tbaa !6
  %84 = call i32 @close(i32 %83) nounwind optsize
  br label %do_wordexp.exit

; <label>:85                                      ; preds = %76
  %86 = icmp eq i32 %77, 0
  %87 = getelementptr inbounds [2 x i32]* %p.i, i64 0, i64 1
  br i1 %86, label %88, label %._crit_edge2.i

; <label>:88                                      ; preds = %85
  %89 = load i32* %87, align 4, !tbaa !6
  %90 = call i32 @dup2(i32 %89, i32 1) nounwind optsize
  %91 = load i32* %73, align 4, !tbaa !6
  %92 = call i32 @close(i32 %91) nounwind optsize
  %93 = load i32* %87, align 4, !tbaa !6
  %94 = call i32 @close(i32 %93) nounwind optsize
  %95 = call i32 (i8*, i8*, ...)* @execl(i8* getelementptr inbounds ([8 x i8]* @.str21003, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str31004, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str41005, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8]* @.str51006, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str31004, i64 0, i64 0), i8* %s, i8* %7, i8* null) nounwind optsize
  call void @_exit(i32 1) nounwind optsize
  br label %._crit_edge2.i

._crit_edge2.i:                                   ; preds = %88, %85
  %96 = load i32* %87, align 4, !tbaa !6
  %97 = call i32 @close(i32 %96) nounwind optsize
  %98 = load i32* %73, align 4, !tbaa !6
  %99 = call %struct.__FILE_s.61* @fdopen(i32 %98, i8* getelementptr inbounds ([2 x i8]* @.str61007, i64 0, i64 0)) nounwind optsize
  %100 = icmp eq %struct.__FILE_s.61* %99, null
  br i1 %100, label %101, label %106

; <label>:101                                     ; preds = %._crit_edge2.i
  %102 = load i32* %73, align 4, !tbaa !6
  %103 = call i32 @close(i32 %102) nounwind optsize
  %104 = call i32 @kill(i32 %77, i32 9) nounwind optsize
  %105 = call i32 @waitpid(i32 %77, i32* %status.i, i32 0) nounwind optsize
  br label %do_wordexp.exit

; <label>:106                                     ; preds = %._crit_edge2.i
  %107 = add i64 %i.2.i, 1
  %108 = icmp eq i8** %wv.0.i, null
  %..i = select i1 %108, i64 0, i64 %107
  %109 = bitcast i8** %s.i.i to i8*
  %110 = bitcast [1 x i64]* %1 to i8*
  %111 = getelementptr inbounds [1 x i64]* %1, i64 0, i64 0
  br label %112

; <label>:112                                     ; preds = %131, %106
  %l.0.i = phi i64 [ %..i, %106 ], [ %l.1.i, %131 ]
  %i.3.i = phi i64 [ %i.2.i, %106 ], [ %119, %131 ]
  %wv.1.i = phi i8** [ %wv.0.i, %106 ], [ %wv.2.i, %131 ]
  call void @llvm.lifetime.start(i64 -1, i8* %109) nounwind
  call void @llvm.lifetime.start(i64 -1, i8* %110) nounwind
  store i8* null, i8** %s.i.i, align 8, !tbaa !7
  store i64 0, i64* %111, align 8, !tbaa !5
  %113 = call i64 bitcast (i64 (i8**, i64*, i32, %struct.__FILE_s.138*)* @getdelim to i64 (i8**, i64*, i32, %struct.__FILE_s.61*)*)(i8** %s.i.i, i64* %111, i32 0, %struct.__FILE_s.61* %99) nounwind optsize
  %114 = icmp slt i64 %113, 0
  %115 = load i8** %s.i.i, align 8, !tbaa !7
  %116 = select i1 %114, i8* null, i8* %115
  call void @llvm.lifetime.end(i64 -1, i8* %109) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %110) nounwind
  %117 = icmp eq i8* %116, null
  br i1 %117, label %134, label %118

; <label>:118                                     ; preds = %112
  %119 = add i64 %i.3.i, 1
  %120 = icmp ult i64 %119, %l.0.i
  br i1 %120, label %131, label %121

; <label>:121                                     ; preds = %118
  %122 = lshr i64 %l.0.i, 1
  %123 = add i64 %l.0.i, 10
  %124 = add i64 %123, %122
  %125 = bitcast i8** %wv.1.i to i8*
  %126 = shl i64 %124, 3
  %127 = call i8* @realloc(i8* %125, i64 %126) nounwind optsize
  %128 = icmp eq i8* %127, null
  br i1 %128, label %134, label %129

; <label>:129                                     ; preds = %121
  %130 = bitcast i8* %127 to i8**
  br label %131

; <label>:131                                     ; preds = %129, %118
  %l.1.i = phi i64 [ %124, %129 ], [ %l.0.i, %118 ]
  %wv.2.i = phi i8** [ %130, %129 ], [ %wv.1.i, %118 ]
  %132 = getelementptr inbounds i8** %wv.2.i, i64 %i.3.i
  store i8* %116, i8** %132, align 8, !tbaa !7
  %133 = getelementptr inbounds i8** %wv.2.i, i64 %119
  store i8* null, i8** %133, align 8, !tbaa !7
  br label %112

; <label>:134                                     ; preds = %121, %112
  %135 = call i32 bitcast (i32 (%struct.__FILE_s.64*)* @feof to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %99) nounwind optsize
  %136 = icmp eq i32 %135, 0
  %err.0.i = zext i1 %136 to i32
  %137 = call i32 bitcast (i32 (%struct.__FILE_s.52*)* @fclose to i32 (%struct.__FILE_s.61*)*)(%struct.__FILE_s.61* %99) nounwind optsize
  %138 = call i32 @waitpid(i32 %77, i32* %status.i, i32 0) nounwind optsize
  %139 = load i32* %status.i, align 4, !tbaa !6
  %140 = and i32 %139, 65280
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %._crit_edge.i, label %142

._crit_edge.i:                                    ; preds = %134
  %.pre3.i = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 1
  br label %149

; <label>:142                                     ; preds = %134
  br i1 %57, label %145, label %143

; <label>:143                                     ; preds = %142
  %144 = bitcast i8** %wv.1.i to i8*
  call void @free(i8* %144) nounwind optsize
  br label %do_wordexp.exit

; <label>:145                                     ; preds = %142
  %146 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 1
  %147 = load i8*** %146, align 8, !tbaa !7
  %148 = icmp eq i8** %wv.1.i, %147
  br i1 %148, label %do_wordexp.exit, label %149

; <label>:149                                     ; preds = %145, %._crit_edge.i
  %.pre-phi4.i = phi i8*** [ %.pre3.i, %._crit_edge.i ], [ %146, %145 ]
  store i8** %wv.1.i, i8*** %.pre-phi4.i, align 8, !tbaa !7
  %150 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 0
  store i64 %i.3.i, i64* %150, align 8, !tbaa !5
  br i1 %65, label %151, label %do_wordexp.exit

; <label>:151                                     ; preds = %149
  %152 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 2
  %153 = load i64* %152, align 8, !tbaa !5
  %154 = sub i64 %i.3.i, %153
  store i64 %154, i64* %150, align 8, !tbaa !5
  br label %do_wordexp.exit

do_wordexp.exit:                                  ; preds = %151, %149, %145, %143, %101, %79, %72, %66, %54, %52, %35
  %.0.i = phi i32 [ 1, %79 ], [ 5, %143 ], [ 1, %101 ], [ 1, %66 ], [ 1, %72 ], [ 5, %145 ], [ %err.0.i, %151 ], [ %err.0.i, %149 ], [ 2, %35 ], [ 4, %52 ], [ 4, %54 ]
  call void @llvm.lifetime.end(i64 -1, i8* %3) nounwind
  call void @llvm.lifetime.end(i64 -1, i8* %4) nounwind
  %155 = load i32* %cs, align 4, !tbaa !6
  %156 = call i32 @pthread_setcancelstate(i32 %155, i32* null) nounwind optsize
  ret i32 %.0.i
}

define void @wordfree(%struct.wordexp_t* nocapture %we) nounwind uwtable optsize {
  %1 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 1
  %2 = load i8*** %1, align 8, !tbaa !7
  %3 = icmp eq i8** %2, null
  br i1 %3, label %18, label %.preheader

.preheader:                                       ; preds = %0
  %4 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 0
  %5 = load i64* %4, align 8, !tbaa !5
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %7 = getelementptr inbounds %struct.wordexp_t* %we, i64 0, i32 2
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge2, %.lr.ph
  %8 = phi i8** [ %2, %.lr.ph ], [ %.pre3, %._crit_edge2 ]
  %i.01 = phi i64 [ 0, %.lr.ph ], [ %13, %._crit_edge2 ]
  %9 = load i64* %7, align 8, !tbaa !5
  %10 = add i64 %9, %i.01
  %11 = getelementptr inbounds i8** %8, i64 %10
  %12 = load i8** %11, align 8, !tbaa !7
  tail call void @free(i8* %12) optsize
  %13 = add i64 %i.01, 1
  %14 = load i64* %4, align 8, !tbaa !5
  %15 = icmp ult i64 %13, %14
  %.pre3 = load i8*** %1, align 8, !tbaa !7
  br i1 %15, label %._crit_edge2, label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge2, %.preheader
  %16 = phi i8** [ %2, %.preheader ], [ %.pre3, %._crit_edge2 ]
  %17 = bitcast i8** %16 to i8*
  tail call void @free(i8* %17) optsize
  store i8** null, i8*** %1, align 8, !tbaa !7
  store i64 0, i64* %4, align 8, !tbaa !5
  br label %18

; <label>:18                                      ; preds = %._crit_edge, %0
  ret void
}

define i32 @wprintf(i32* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.747], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.747]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.747]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vwprintf(i32* %fmt, %struct.__va_list_tag.747* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

define i64 @write(i32 %fd, i8* %buf, i64 %count) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint i8* %buf to i64
  %3 = tail call i64 @__syscall_cp(i64 4, i64 %1, i64 %2, i64 %count, i64 0, i64 0, i64 0) nounwind optsize
  %4 = tail call i64 @__syscall_ret(i64 %3) nounwind optsize
  ret i64 %4
}

define i64 @writev(i32 %fd, %struct.iovec.775* %iov, i32 %count) nounwind uwtable optsize {
  %1 = sext i32 %fd to i64
  %2 = ptrtoint %struct.iovec.775* %iov to i64
  %3 = sext i32 %count to i64
  %4 = tail call i64 @__syscall_cp(i64 146, i64 %1, i64 %2, i64 %3, i64 0, i64 0, i64 0) nounwind optsize
  %5 = tail call i64 @__syscall_ret(i64 %4) nounwind optsize
  ret i64 %5
}

define i32 @wscanf(i32* %fmt, ...) nounwind uwtable optsize {
  %ap = alloca [1 x %struct.__va_list_tag.749], align 16
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag.749]* %ap, i64 0, i64 0
  %2 = bitcast [1 x %struct.__va_list_tag.749]* %ap to i8*
  call void @llvm.va_start(i8* %2)
  %3 = call i32 @vwscanf(i32* %fmt, %struct.__va_list_tag.749* %1) nounwind optsize
  call void @llvm.va_end(i8* %2)
  ret i32 %3
}

!0 = metadata !{metadata !"omnipotent char", metadata !1}
!1 = metadata !{metadata !"Simple C/C++ TBAA", null}
!2 = metadata !{metadata !"float", metadata !0}
!3 = metadata !{metadata !"double", metadata !0}
!4 = metadata !{metadata !"long double", metadata !0}
!5 = metadata !{metadata !"long", metadata !0}
!6 = metadata !{metadata !"int", metadata !0}
!7 = metadata !{metadata !"any pointer", metadata !0}
!8 = metadata !{metadata !"short", metadata !0}
!9 = metadata !{metadata !"long long", metadata !0}
