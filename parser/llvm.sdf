%% This file is based on llvm.grm from the LLVM sources.  
%% It was originally a polygen grammar for generating random llvm files.

module llvm
imports
	%% Lexical %% Operators

exports

	context-free start-symbols Module

	lexical syntax
		[\ \t]  -> LAYOUT		
		";" ~[\n]* [\n] -> OneEOL
		[\n] -> OneEOL
		%% EOF? | EOF -> EOL
		%% EOF is defined in context-free
	lexical restrictions
		EOF -/- ~[]
	context-free restrictions
		LAYOUT? -/- [\ \t]

lexical syntax
[0-9]+ -> DecimalDigitSeq
[0-9a-fA-F] -> HexDigit
HexDigit+ -> HexDigitSeq

~[\"\\\n\r] -> BasicStringConstant
"\\" HexDigit HexDigit -> EscapedStringConstant
(BasicStringConstant | EscapedStringConstant)* -> StringConstant

%% UnsignedInt          ::= NonZeroDecimalDigit [^ DecimalDigitSeq ];
"0" -> UnsignedInt
[1-9][0-9]* -> UnsignedInt
%% SignedInt          ::= [ "-" ] ^ UnsignedInt ;
"-"? UnsignedInt -> SignedInt

"%" DecimalDigitSeq -> LocalVarId
"@" DecimalDigitSeq -> GlobalVarId

%% llvm: GlobalVar   @\"[^\"]*\"
%% llvm: GlobalVar   @[-a-zA-Z$._][-a-zA-Z$._0-9]*
%% llvm: GlobalVarID @[0-9]+

[\-a-zA-Z\$\.\_][\-a-zA-Z\$\.\_0-9]* -> Identifier
String -> Identifier
"%" Identifier -> LocalVar
"@" Identifier -> GlobalVar

%% llvm: IntegerType     i[0-9]+
"i" [0-9]+ -> IntegerType

%% STRINGCONSTANT      ::= "\"" ^ StringConstant ^ "\"" ;
"\"" StringConstant "\"" -> String
%% ATSTRINGCONSTANT    ::= "@" ^ STRINGCONSTANT ;
%% "@" STRINGCONSTANT -> ATSTRINGCONSTANT
%% PCTSTRINGCONSTANT   ::= "%" ^ STRINGCONSTANT ;
%% "%" STRINGCONSTANT -> PCTSTRINGCONSTANT

%% llvm: Label           [-a-zA-Z$._0-9]+:
[\-a-zA-Z\$\.\_0-9]+ -> Label

%% llvm: FPConstant        [-+]?[0-9]+[.][0-9]*([eE][-+]?[0-9]+)?
[\-\+]?[0-9]+[\.][0-9]*([eE][\-\+]?[0-9]+)? -> FPVAL

%% FPVAL               ::= ESAPINTVAL ^ "." ^ EUAPINTVAL | "0x" ^ HexDigitSeq ;
%% SignedInt "." [0-9]* -> FPVAL

%% llvm: HexFPConstant     0x[0-9A-Fa-f]+
%% llvm: HexFP80Constant   0xK[0-9A-Fa-f]+
%% llvm: HexFP128Constant  0xL[0-9A-Fa-f]+
%% llvm: HexPPC128Constant 0xM[0-9A-Fa-f]+

"0x" HexDigitSeq -> FPVAL
"0xK" HexDigitSeq -> FPVAL
"0xL" HexDigitSeq -> FPVAL
"0xM" HexDigitSeq -> FPVAL

lexical restrictions

%% (*
%% The rest of this file is derived directly from llvmAsmParser.y.
%% *)
context-free syntax

OneEOL+ -> EOL {cons("EOL")}

SignedInt -> Int64Val {cons("Int64Val")}

%% ArithmeticOps ::= + OptNW add | fadd | OptNW sub | fsub | OptNW mul | fmul |
                  %% udiv | OptExact sdiv | fdiv | urem | srem | frem ;
%% cme3 reversed optNW with op
%% llvm: nuw only applies to integer operations
%% llvm: nsw only applies to integer operations
%% llvm: nuw is "no unsigned wrap" and nsw is "no signed wrap"

"exact" -> Modifier
"nuw" -> Modifier
"nsw" -> Modifier

{Modifier ""}* -> OptModifiers

ArithmeticIntOp OptModifiers -> BinaryOp
ArithmeticFloatOp -> BinaryOp
LogicalOp OptModifiers -> BinaryOp

"add" -> ArithmeticIntOp
"sub" -> ArithmeticIntOp
"mul" -> ArithmeticIntOp
"udiv" -> ArithmeticIntOp
"sdiv" -> ArithmeticIntOp
"urem" -> ArithmeticIntOp
"srem" -> ArithmeticIntOp

"fadd" -> ArithmeticFloatOp
"fsub" -> ArithmeticFloatOp
"fmul" -> ArithmeticFloatOp
"fdiv" -> ArithmeticFloatOp
"frem" -> ArithmeticFloatOp

%% LogicalOps    ::= shl | lshr | ashr | and | or | xor;
"shl" -> LogicalOp
"lshr" -> LogicalOp
"ashr" -> LogicalOp
"and" -> LogicalOp
"or" -> LogicalOp
"xor" -> LogicalOp

%% CastOps       ::= trunc | zext | sext | fptrunc | fpext | bitcast |
                  %% uitofp | sitofp | fptoui | fptosi | inttoptr | ptrtoint ;
"trunc" -> CastOps
"zext" -> CastOps
"sext" -> CastOps
"fptrunc" -> CastOps
"fpext" -> CastOps
"bitcast" -> CastOps
"uitofp" -> CastOps
"sitofp" -> CastOps
"fptoui" -> CastOps
"fptosi" -> CastOps
"inttoptr" -> CastOps
"ptrtoint" -> CastOps


%% IPredicates ::= eq | ne | slt | sgt | sle | sge | ult | ugt | ule | uge ;
"eq" -> IPredicates
"ne" -> IPredicates
"slt" -> IPredicates
"sgt" -> IPredicates
"sle" -> IPredicates
"sge" -> IPredicates
"ult" -> IPredicates
"ugt" -> IPredicates
"ule" -> IPredicates
"uge" -> IPredicates

%% FPredicates ::= oeq | one | olt | ogt | ole | oge | ord | uno | ueq | une
              %% | ult | ugt | ule | uge | true | false ;
"oeq" -> FPredicates
"one" -> FPredicates
"olt" -> FPredicates
"ogt" -> FPredicates
"ole" -> FPredicates
"oge" -> FPredicates
"ord" -> FPredicates
"uno" -> FPredicates
"ueq" -> FPredicates
"une" -> FPredicates
"ult" -> FPredicates
"ugt" -> FPredicates
"ule" -> FPredicates
"uge" -> FPredicates
"true" -> FPredicates
"false" -> FPredicates


%% IntegerType ::= IntegerType;
%% IntegerType -> IntegerType
%% FPType  ::= float | double | "ppc_fp128" | fp128 | "x86_fp80";
"float" -> FPType
"double" -> FPType
"ppc_fp128" -> FPType
"fp128" -> FPType
"x86_fp80" -> FPType

%% LocalName ::= LocalVar | STRINGCONSTANT | PCTSTRINGCONSTANT ;
LocalVar -> LocalName {cons("LocalName")}
LocalVarId -> LocalName {cons("LocalName")}

%% OptLocalName ::= LocalName | _ ;
-> OptLocalName
LocalName -> OptLocalName

%% OptAddrSpace ::= - addrspace ^ "(" ^ UnsignedInt ^ ")" | _ ;
-> OptAddrSpace
"addrspace" "(" UnsignedInt ")" -> OptAddrSpace
%% cme3 addition
"unnamed_addr" -> OptAddrSpace

%% OptLocalAssign ::= LocalName "=" | _ ;
LocalName "=" -> OptLocalAssign
-> OptLocalAssign

%% GlobalName ::= GlobalVar | ATSTRINGCONSTANT ;
GlobalVarId -> GlobalName {cons("GlobalName")}
GlobalVar -> GlobalName {cons("GlobalName")}

%% OptGlobalAssign ::= GlobalAssign | _ ;
-> OptGlobalAssign
GlobalAssign -> OptGlobalAssign

%% GlobalAssign ::= GlobalName "=" ;
GlobalName "=" -> GlobalAssign

%% GVInternalLinkage
%% ::= + internal
%% | weak
%% | "weak_odr"
%% | linkonce
%% | "linkonce_odr"
%% | appending
%% | dllexport
%% | common
%% | private
%% | "linker_private"
%% | "linker_private_weak"
%% ;
"internal" -> GVInternalLinkage
"weak" -> GVInternalLinkage
"weak_odr" -> GVInternalLinkage
"linkonce" -> GVInternalLinkage
"linkonce_odr" -> GVInternalLinkage
"appending" -> GVInternalLinkage
"dllexport" -> GVInternalLinkage
"common" -> GVInternalLinkage
"private" -> GVInternalLinkage
"linker_private" -> GVInternalLinkage
"linker_private_weak" -> GVInternalLinkage

%% GVExternalLinkage
  %% ::= dllimport
 %% | "extern_weak"
 %% | + external
 %% ;
"dllimport" -> GVExternalLinkage
"extern_weak" -> GVExternalLinkage
"external" -> GVExternalLinkage

%% GVVisibilityStyle
  %% ::= + _
 %% | default
 %% | hidden
 %% | protected
 %% ;
-> GVVisibilityStyle
"default" -> GVVisibilityStyle
"hidden" -> GVVisibilityStyle
"protected" -> GVVisibilityStyle

%% FunctionDeclareLinkage
  %% ::= + _
 %% | dllimport
 %% | "extern_weak"
 %% ;
-> FunctionDeclareLinkage
"dllimport" -> FunctionDeclareLinkage
"extern_weak" -> FunctionDeclareLinkage

%% FunctionDefineLinkage
  %% ::= + _
 %% | internal
 %% | linkonce
 %% | "linkonce_odr"
 %% | weak
 %% | "weak_odr"
 %% | dllexport
 %% ;
-> FunctionDefineLinkage
"internal" -> FunctionDefineLinkage
"linkonce" -> FunctionDefineLinkage
"linkonce_odr" -> FunctionDefineLinkage
"weak" -> FunctionDefineLinkage
"weak_odr" -> FunctionDefineLinkage
"dllexport" -> FunctionDefineLinkage

%% AliasLinkage ::= + _ | weak | "weak_odr" | internal ;
-> AliasLinkage
"weak" -> AliasLinkage
"weak_odr" -> AliasLinkage
"internal" -> AliasLinkage

%% OptCallingConv ::= + _ |
                 %% ccc |
                 %% fastcc |
                 %% coldcc |
                 %% "x86_stdcallcc" |
                 %% "x86_fastcallcc" |
                 %% cc UnsignedInt ;
-> OptCallingConv
"ccc" -> OptCallingConv
"fastcc" -> OptCallingConv
"coldcc" -> OptCallingConv
"x86_stdcallcc" -> OptCallingConv
"x86_fastcallcc" -> OptCallingConv
"cc" UnsignedInt -> OptCallingConv

%% ParamAttr ::= zeroext
 %% | signext
 %% | inreg
 %% | sret
 %% | noalias
 %% | nocapture
 %% | byval
 %% | nest
 %% | align UnsignedInt
 %% ;
"zeroext" -> ParamAttr
"signext" -> ParamAttr
"inreg" -> ParamAttr
"sret" -> ParamAttr
"noalias" -> ParamAttr
"nocapture" -> ParamAttr
"byval" -> ParamAttr
"nest" -> ParamAttr
"align" UnsignedInt -> ParamAttr

%% OptParamAttrs ::= + _ | OptParamAttrs ParamAttr ;
-> OptParamAttrs
OptParamAttrs ParamAttr -> OptParamAttrs

%% RetAttr       ::= inreg
              %% | zeroext
              %% | signext
              %% | noalias
              %% ;
"inreg" -> RetAttr
"zeroext" -> RetAttr
"signext" -> RetAttr
"noalias" -> RetAttr

%% OptRetAttrs  ::= _
             %% | OptRetAttrs RetAttr
             %% ;
-> OptRetAttrs
OptRetAttrs RetAttr -> OptRetAttrs

%% FuncAttr      ::= noreturn
"noreturn" -> FuncAttr
%% | nounwind
"nounwind" -> FuncAttr
%% | inreg
"inreg" -> FuncAttr
%% | zeroext
"zeroext" -> FuncAttr
%% | signext
"signext" -> FuncAttr
%% | readnone
"readnone" -> FuncAttr
%% | readonly
"readonly" -> FuncAttr
%% | inlinehint
"inlinehint" -> FuncAttr
%% | alignstack
"alignstack" -> FuncAttr
%% | noinline
"noinline" -> FuncAttr
%% | alwaysinline
"alwaysinline" -> FuncAttr
%% | optsize
"optsize" -> FuncAttr
%% | ssp
"ssp" -> FuncAttr
%% | sspreq
"sspreq" -> FuncAttr
%% | returns_twice
"returns_twice" -> FuncAttr
%% | nonlazybind
"nonlazybind" -> FuncAttr
%% ;
%% cme3 addition
"uwtable" -> FuncAttr

%% OptFuncAttrs  ::= + _ | OptFuncAttrs FuncAttr ;
-> OptFuncAttrs {cons("OptFuncAttrs")}
OptFuncAttrs FuncAttr -> OptFuncAttrs {cons("OptFuncAttrs")}

%% OptGC         ::= + _ | gc STRINGCONSTANT ;
-> OptGC
"gc" String -> OptGC

%% OptAlign      ::= + _ | align UnsignedInt ;
-> OptAlign
"align" UnsignedInt -> OptAlign
%% OptCAlign     ::= + _ | ^ "," align UnsignedInt ;
-> OptCAlign
"," "align" UnsignedInt -> OptCAlign

%% SectionString ::= section STRINGCONSTANT ;
"section" String -> SectionString

%% OptSection    ::= + _ | SectionString ;
-> OptSection {cons("OptSection")}
SectionString -> OptSection {cons("OptSection")}

%% GlobalVarAttributes ::= + _ | ^ "," GlobalVarAttribute GlobalVarAttributes ;
-> GlobalVarAttributes
"," GlobalVarAttribute GlobalVarAttributes -> GlobalVarAttributes
%% GlobalVarAttribute  ::= SectionString | align UnsignedInt ;
SectionString -> GlobalVarAttribute
"align" UnsignedInt -> GlobalVarAttribute

%% PrimType ::= IntegerType | float | double | "ppc_fp128" | fp128 | "x86_fp80"
          %% | - label ;
IntegerType -> PrimType
"float" -> PrimType
"double" -> PrimType
"ppc_fp128" -> PrimType
"fp128" -> PrimType
"x86_fp80" -> PrimType
"label" -> PrimType
"void" -> PrimType

%% Types
%% ::= opaque
"opaque" -> Types
%% | PrimType
PrimType -> Types
%% | Types OptAddrSpace ^ "*"
Types OptAddrSpace "*" -> Types
%% | SymbolicValueRef
SymbolicValueRef -> Types
%% | "\\" ^ UnsignedInt
"\\" UnsignedInt -> Types
%% | Types "(" ^ ArgTypeListI ^ ")" OptFuncAttrs
Types "(" ArgTypeListI ")" OptFuncAttrs -> Types
%% | void "(" ^ ArgTypeListI ^ ")" OptFuncAttrs
%% "void" "(" ArgTypeListI ")" OptFuncAttrs -> Types
%% | "[" ^ UnsignedInt "x" Types ^ "]"
"[" UnsignedInt "x" Types "]" -> Types
%% | "<" ^ UnsignedInt "x" Types ^ ">"
"<" UnsignedInt "x" Types ">" -> Types
%% | "{" TypeListI "}"
"{" TypeListI "}" -> Types
%% | "{" ^ "}"
"{" "}" -> Types
%% | "<" ^ "{" TypeListI "}" ^ ">"
"<" "{" TypeListI "}" ">" -> Types
%% | "<" ^ "{" ^ "}" ^ ">"
"<" "{" "}" ">" -> Types
%% ;


%% ArgType ::= Types OptParamAttrs ;
Types OptParamAttrs -> ArgType

%% ResultTypes ::= Types | void ;
Types -> ResultTypes {cons("ResultTypes")}
%% "void" -> ResultTypes {cons("ResultTypes")}

%% ArgTypeList ::= ArgType | ArgTypeList ^ "," ArgType ;
{ArgType ","}+ -> ArgTypeList
%% ArgType -> ArgTypeList
%% ArgTypeList "," ArgType -> ArgTypeList

%% ArgTypeListI ::= ArgTypeList | ArgTypeList ^ "," "..." | "..." | _ ;
-> ArgTypeListI
ArgTypeList -> ArgTypeListI
ArgTypeList "," "..." -> ArgTypeListI
"..." -> ArgTypeListI

%% TypeListI ::= Types | TypeListI ^ "," Types ;
{Types ","}+ -> TypeListI
%% Types -> TypeListI
%% TypeListI "," Types -> TypeListI

%% ConstVal::= Types "[" ^ ConstVector ^ "]"
Types "[" ConstVector "]" -> ConstVal
%% | Types "[" ^ "]"
Types "[" "]" -> ConstVal
%% | Types "c" ^ STRINGCONSTANT
Types "c" String -> ConstVal
%% | Types "<" ^ ConstVector ^ ">"
Types "<" ConstVector ">" -> ConstVal
%% | Types "{" ConstVector "}"
Types "{" ConstVector "}" -> ConstVal
%% | Types "{" ^ "}"
Types "{" "}" -> ConstVal
%% | Types "<" ^ "{" ConstVector "}" ^ ">"
Types "<" "{" ConstVector "}" ">" -> ConstVal
%% | Types "<" ^ "{" ^ "}" ^ ">"
Types "<" "{" "}" ">" -> ConstVal
%% | Types null
Types "null" -> ConstVal
%% | Types undef
Types "undef" -> ConstVal
%% | Types SymbolicValueRef
Types SymbolicValueRef -> ConstVal
%% | Types ConstExpr
Types ConstExpr -> ConstVal
%% | Types zeroinitializer
Types "zeroinitializer" -> ConstVal
%% | Types SignedInt
%% Types SignedInt -> ConstVal
%% | Types UnsignedInt
%% Types UnsignedInt -> ConstVal
Types Int64Val -> ConstVal
%% | Types ESAPINTVAL
%% Types ESAPINTVAL -> ConstVal
%% | Types EUAPINTVAL
%% Types EUAPINTVAL -> ConstVal
%% | Types true
Types "true" -> ConstVal
%% | Types false
Types "false" -> ConstVal
%% | Types FPVAL ;
Types FPVAL -> ConstVal

%% ConstExpr::= CastOps "(" ^ ConstVal to Types ^ ")"
CastOps "(" ConstVal "to" Types ")" -> ConstExpr
%% | getelementptr OptInBounds "(" ^ ConstVal IndexList ^ ")"
"getelementptr" OptInBounds "(" ConstVal IndexList ")" -> ConstExpr
%% | select "(" ^ ConstVal ^ "," ConstVal ^ "," ConstVal ^ ")"
"select" "(" ConstVal "," ConstVal "," ConstVal ")" -> ConstExpr
%% | ArithmeticOps "(" ^ ConstVal ^ "," ConstVal ^ ")"
%% ArithmeticOps OptModifiers "(" ConstVal "," ConstVal ")" -> ConstExpr
%% | LogicalOps "(" ^ ConstVal ^ "," ConstVal ^ ")"
%% LogicalOps OptModifiers "(" ConstVal "," ConstVal ")" -> ConstExpr
%% cme3 addition
BinaryOp "(" ConstVal "," ConstVal ")" -> ConstExpr
%% | icmp IPredicates "(" ^ ConstVal ^ "," ConstVal ^ ")"
"icmp" IPredicates "(" ConstVal "," ConstVal ")" -> ConstExpr
%% | fcmp FPredicates "(" ^ ConstVal ^ "," ConstVal ^ ")"
"fcmp" FPredicates "(" ConstVal "," ConstVal ")" -> ConstExpr
%% | extractelement "(" ^ ConstVal ^ "," ConstVal ^ ")"
"extractelement" "(" ConstVal "," ConstVal ")" -> ConstExpr
%% | insertelement "(" ^ ConstVal ^ "," ConstVal ^ "," ConstVal ^ ")"
"insertelement" "(" ConstVal "," ConstVal "," ConstVal ")" -> ConstExpr
%% | shufflevector "(" ^ ConstVal ^ "," ConstVal ^ "," ConstVal ^ ")"
"shufflevector" "(" ConstVal "," ConstVal "," ConstVal ")" -> ConstExpr
%% | extractvalue "(" ^ ConstVal ^ ConstantIndexList ^ ")"
"extractvalue" "(" ConstVal ConstantIndexList ")" -> ConstExpr
%% | insertvalue "(" ^ ConstVal ^ "," ConstVal ^ ConstantIndexList ^ ")" ;
"insertvalue" "(" ConstVal "," ConstVal ConstantIndexList ")" -> ConstExpr

%% ConstVector ::= ConstVector ^ "," ConstVal | ConstVal ;
{ConstVal ","}+ -> ConstVector
%% ConstVector "," ConstVal -> ConstVector
%% ConstVal -> ConstVector

%% GlobalType ::= global | constant ;
"global" -> GlobalType
"constant" -> GlobalType

%% ThreadLocal ::= - "thread_local" | _ ;
-> ThreadLocal
"thread_local" -> ThreadLocal

%% AliaseeRef ::= ResultTypes SymbolicValueRef
 %% | bitcast "(" ^ AliaseeRef to Types ^ ")" ;
ResultTypes SymbolicValueRef -> AliaseeRef
"bitcast" "(" AliaseeRef "to" Types ")" -> AliaseeRef

%% Module ::= +++ DefinitionList | --- _ ;
%% llvm: module ::= toplevelentity*
EOL? -> Module
EOL? {TopLevelEntity EOL}+ EOL? -> Module {cons("Module")}

%% TopLevelEntity
"define" Function -> TopLevelEntity {cons("FunctionDefinition")}
"declare" FunctionProto -> TopLevelEntity {cons("FunctionDeclaration")}
"module" "asm" AsmBlock -> TopLevelEntity {cons("ModuleAsm")}
OptLocalAssign "type" Types -> TopLevelEntity {cons("GlobalType")}
OptGlobalAssign GVVisibilityStyle ThreadLocal OptAddrSpace GlobalType ConstVal GlobalVarAttributes -> TopLevelEntity {cons("GlobalNoLinkage")}
OptGlobalAssign GVInternalLinkage GVVisibilityStyle ThreadLocal OptAddrSpace GlobalType ConstVal GlobalVarAttributes -> TopLevelEntity {cons("GlobalInternalLinkage")}
OptGlobalAssign GVExternalLinkage GVVisibilityStyle ThreadLocal OptAddrSpace GlobalType Types GlobalVarAttributes -> TopLevelEntity {cons("GlobalExternalLinkage")}
OptGlobalAssign GVVisibilityStyle "alias" AliasLinkage AliaseeRef -> TopLevelEntity {cons("GlobalAlias")}
"target" TargetDefinition -> TopLevelEntity {cons("TargetDefinition")}
"deplibs" "=" LibrariesDefinition -> TopLevelEntity {cons("LibrariesDefinition")}

%% AsmBlock ::= STRINGCONSTANT ;
String -> AsmBlock

%% TargetDefinition ::= triple "=" STRINGCONSTANT
"triple" "=" String -> TargetDefinition
%% | datalayout "=" STRINGCONSTANT ;
"datalayout" "=" String -> TargetDefinition

%% llvm: below seems to be the llvm code for parsing the datalayout string
%% while (!Desc.empty()) {
    %% std::pair<StringRef, StringRef> Split = Desc.split('-');
    %% StringRef Token = Split.first;
    %% Desc = Split.second;

    %% if (Token.empty())
      %% continue;

    %% Split = Token.split(':');
    %% StringRef Specifier = Split.first;
    %% Token = Split.second;

    %% assert(!Specifier.empty() && "Can't be empty here");

    %% switch (Specifier[0]) {
    %% case 'E':
      %% LittleEndian = false;
      %% break;
    %% case 'e':
      %% LittleEndian = true;
      %% break;
    %% case 'p':
      %% Split = Token.split(':');
      %% PointerMemSize = getInt(Split.first) / 8;
      %% Split = Split.second.split(':');
      %% PointerABIAlign = getInt(Split.first) / 8;
      %% Split = Split.second.split(':');
      %% PointerPrefAlign = getInt(Split.first) / 8;
      %% if (PointerPrefAlign == 0)
        %% PointerPrefAlign = PointerABIAlign;
      %% break;
    %% case 'i':
    %% case 'v':
    %% case 'f':
    %% case 'a':
    %% case 's': {
      %% AlignTypeEnum AlignType;
      %% switch (Specifier[0]) {
      %% default:
      %% case 'i': AlignType = INTEGER_ALIGN; break;
      %% case 'v': AlignType = VECTOR_ALIGN; break;
      %% case 'f': AlignType = FLOAT_ALIGN; break;
      %% case 'a': AlignType = AGGREGATE_ALIGN; break;
      %% case 's': AlignType = STACK_ALIGN; break;
      %% }
      %% unsigned Size = getInt(Specifier.substr(1));
      %% Split = Token.split(':');
      %% unsigned ABIAlign = getInt(Split.first) / 8;

      %% Split = Split.second.split(':');
      %% unsigned PrefAlign = getInt(Split.first) / 8;
      %% if (PrefAlign == 0)
        %% PrefAlign = ABIAlign;
      %% setAlignment(AlignType, ABIAlign, PrefAlign, Size);
      %% break;
    %% }
    %% case 'n':  // Native integer types.
      %% Specifier = Specifier.substr(1);
      %% do {
        %% if (unsigned Width = getInt(Specifier))
          %% LegalIntWidths.push_back(Width);
        %% Split = Token.split(':');
        %% Specifier = Split.first;
        %% Token = Split.second;
      %% } while (!Specifier.empty() || !Token.empty());
      %% break;
    %% case 'S': // Stack natural alignment.
      %% StackNaturalAlign = getInt(Specifier.substr(1));
      %% StackNaturalAlign /= 8;
      %% // FIXME: Should we really be truncating these alingments and
      %% // sizes silently?
      %% break;
    %% default:
      %% break;
    %% }
  %% }


%% LibrariesDefinition ::= "[" ( LibList | _ ) "]";
"[" LibList "]" -> LibrariesDefinition
"[" "]" -> LibrariesDefinition

%% LibList ::= LibList ^ "," STRINGCONSTANT | STRINGCONSTANT ;
{String ","}+ -> LibList
%% LibList "," String -> LibList
%% String -> LibList

%% ArgListH ::= ArgListH ^ "," Types OptParamAttrs OptLocalName
 %% | Types OptParamAttrs OptLocalName ;
ArgListH "," Types OptParamAttrs OptLocalName -> ArgListH
Types OptParamAttrs OptLocalName -> ArgListH

%% llvm:
%% ParseArgumentList
%%    ::= '(' ArgTypeListI ')'
%%  ArgTypeListI
%%    ::= /*empty*/
%%    ::= '...'
%%    ::= ArgTypeList ',' '...'
%%    ::= ArgType (',' ArgType)*

%% ArgList ::= ArgListH | ArgListH ^ "," "..." | "..." | _ ;
-> ArgList {cons("ArgList")}
ArgListH -> ArgList {cons("ArgList")}
ArgListH "," "..." -> ArgList {cons("ArgList")}
ArgListH "..." -> ArgList {cons("ArgList")}
"..." -> ArgList {cons("ArgList")}

%% FunctionHeaderH ::= OptCallingConv OptRetAttrs ResultTypes
                  %% GlobalName ^ "(" ^ ArgList ^ ")"
                  %% OptFuncAttrs OptSection OptAlign OptGC ;
OptCallingConv OptRetAttrs ResultTypes GlobalName "(" ArgList ")" OptFuncAttrs OptSection OptAlign OptGC -> FunctionHeaderH
%% BEGIN ::= ( begin | "{" ) ^ "\n";
("begin" | "{") EOL -> BEGIN

%% FunctionHeader ::=
  %% FunctionDefineLinkage GVVisibilityStyle FunctionHeaderH BEGIN ;
FunctionDefineLinkage GVVisibilityStyle FunctionHeaderH BEGIN -> FunctionHeader {cons("FunctionHeader")}

%% END ::= ^ ( end | "}" ) ^ "\n";
("end" | "}") -> END

%% Function ::= BasicBlockList END ;
FunctionHeader BasicBlockList EOL END -> Function

%% FunctionProto ::= FunctionDeclareLinkage GVVisibilityStyle FunctionHeaderH ;
FunctionDeclareLinkage GVVisibilityStyle FunctionHeaderH -> FunctionProto

%% OptSideEffect ::= _ | sideeffect ;
-> OptSideEffect
"sideeffect" -> OptSideEffect

%% ConstValueRef ::= SignedInt
%% SignedInt -> ConstValueRef
%% | UnsignedInt
%% UnsignedInt -> ConstValueRef
Int64Val -> ConstValueRef
%% | FPVAL
FPVAL -> ConstValueRef
%% | true
"true" -> ConstValueRef
%% | false
"false" -> ConstValueRef
%% | null
"null" -> ConstValueRef
%% | undef
"undef" -> ConstValueRef
%% | zeroinitializer
"zeroinitializer" -> ConstValueRef
%% | "<" ConstVector ">"
"<" ConstVector ">" -> ConstValueRef
%% | "[" ConstVector "]"
"[" ConstVector "]" -> ConstValueRef
%% | "[" ^ "]"
"[" "]" -> ConstValueRef
%% | "c" ^ STRINGCONSTANT
"c" String -> ConstValueRef
%% | "{" ConstVector "}"
"{" ConstVector "}" -> ConstValueRef
%% | "{" ^ "}"
"{" "}" -> ConstValueRef
%% | "<" ^ "{" ConstVector "}" ^ ">"
"<" "{" ConstVector "}" ">" -> ConstValueRef
%% | "<" ^ "{" ^ "}" ^ ">"
"<" "{" "}" ">" -> ConstValueRef
%% | ConstExpr
ConstExpr -> ConstValueRef
%% | asm OptSideEffect STRINGCONSTANT ^ "," STRINGCONSTANT ;
"asm" OptSideEffect String "," String -> ConstValueRef

%% SymbolicValueRef ::= LocalVarId
 %% | GlobalVarId
 %% | LocalName
 %% | GlobalName ;
%% LocalVarId -> SymbolicValueRef 
%% GlobalVarId -> SymbolicValueRef
LocalName -> SymbolicValueRef
GlobalName -> SymbolicValueRef

%% ValueRef ::= SymbolicValueRef | ConstValueRef;
SymbolicValueRef -> ValueRef {cons("ValueRef")}
ConstValueRef -> ValueRef {cons("ValueRef")}

%% ResolvedVal ::= Types ValueRef ;
Types ValueRef -> ResolvedVal

%% ReturnedVal ::= ResolvedVal | ReturnedVal ^ "," ResolvedVal ;
{ResolvedVal ","}+ -> ReturnedVal
%% ResolvedVal -> ReturnedVal
%% ReturnedVal "," ResolvedVal -> ReturnedVal

%% BasicBlockList ::= BasicBlockList BasicBlock | FunctionHeader BasicBlock ;
{BasicBlock EOL}+ -> BasicBlockList
%% BasicBlockList BasicBlock -> BasicBlockList
%% BasicBlock -> BasicBlockList

%% BasicBlock ::= InstructionList OptLocalAssign BBTerminatorInst ;
InstructionList OptLocalAssign BBTerminatorInst -> BasicBlock {cons("BasicBlock")}

%% InstructionList ::= +++ InstructionList Inst
%% | - _
%% | ^ Label ^ ":\n" ;
-> InstructionList
InstructionList Inst -> InstructionList
Label ":" EOL -> InstructionList

%% BBTerminatorInst ::= ^ "  " ^
%% ( ret ReturnedVal
"ret" ReturnedVal -> BBTerminatorInst
%% | ret void
"ret" "void" -> BBTerminatorInst
%% | br label ValueRef
"br" "label" ValueRef -> BBTerminatorInst
%% | br IntegerType ValueRef ^ "," label ValueRef ^ "," label ValueRef
"br" IntegerType ValueRef "," "label" ValueRef "," "label" ValueRef -> BBTerminatorInst
%% | switch IntegerType ValueRef ^ "," label ValueRef "[" JumpTable "]"
"switch" IntegerType ValueRef "," "label" ValueRef "[" EOL JumpTable "]" -> BBTerminatorInst
%% | switch IntegerType ValueRef ^ "," label ValueRef "[" ^ "]"
"switch" IntegerType ValueRef "," "label" ValueRef "[" "]" -> BBTerminatorInst
%% | invoke OptCallingConv ResultTypes ValueRef ^ "(" ^ ParamList ^ ")"
%% OptFuncAttrs
%% to label ValueRef unwind label ValueRef
"invoke" OptCallingConv ResultTypes ValueRef "(" ParamList ")" OptFuncAttrs "to" "label" ValueRef "unwind" "label" ValueRef -> BBTerminatorInst
%% | unwind
"unwind" -> BBTerminatorInst
%% | unreachable ) ^ "\n";
"unreachable" -> BBTerminatorInst


%% JumpTable ::= JumpTable IntegerType ConstValueRef ^ "," label ValueRef
 %% | IntegerType ConstValueRef ^ "," label ValueRef ;
{JumpTableEntry EOL}+ EOL? -> JumpTable
%% JumpTable IntegerType ConstValueRef "," "label" ValueRef -> JumpTable
%% IntegerType ConstValueRef "," "label" ValueRef -> JumpTable

IntegerType ConstValueRef "," "label" ValueRef -> JumpTableEntry

%% Inst ::= ^ "  " ^ OptLocalAssign InstVal ^ "\n";
OptLocalAssign InstVal EOL -> Inst {cons ("Instruction")}

%% PHIList ::= Types "[" ValueRef ^ "," ValueRef "]"
 %% | PHIList ^ "," "[" ValueRef ^ "," ValueRef "]" ;
Types "[" ValueRef "," ValueRef "]" -> PHIList
PHIList "," "[" ValueRef "," ValueRef "]" -> PHIList

%% ParamList ::= Types OptParamAttrs ValueRef OptParamAttrs
Types OptParamAttrs ValueRef OptParamAttrs -> ParamList
%% | label OptParamAttrs ValueRef OptParamAttrs
"label" OptParamAttrs ValueRef OptParamAttrs -> ParamList
%% | ParamList ^ "," Types OptParamAttrs ValueRef OptParamAttrs
ParamList "," Types OptParamAttrs ValueRef OptParamAttrs -> ParamList
%% | ParamList ^ "," label OptParamAttrs ValueRef OptParamAttrs
ParamList "," "label" OptParamAttrs ValueRef OptParamAttrs -> ParamList
%% | - _ ;
-> ParamList

%% IndexList ::= _ | IndexList ^ "," ResolvedVal ;
-> IndexList
IndexList "," ResolvedVal -> IndexList

%% ConstantIndexList ::= "," UnsignedInt | ConstantIndexList ^ "," UnsignedInt ;
"," UnsignedInt -> ConstantIndexList
ConstantIndexList "," UnsignedInt -> ConstantIndexList

%% OptTailCall ::= tail call | call ;
"tail" "call" -> OptTailCall
"call" -> OptTailCall

%% InstVal ::=
%% ArithmeticOps Types ValueRef ^ "," ValueRef
%% ArithmeticOps Types ValueRef "," ValueRef -> InstVal {cons("ArithmeticInstVal")}
%% | LogicalOps Types ValueRef ^ "," ValueRef
%% LogicalOps Types ValueRef "," ValueRef -> InstVal {cons("LogicalInstVal")}
BinaryOp Types ValueRef "," ValueRef -> InstVal {cons("BinaryInstVal")}
%% | icmp IPredicates Types ValueRef ^ "," ValueRef
"icmp" IPredicates Types ValueRef "," ValueRef -> InstVal {cons("ICMPInstVal")}
%% | fcmp FPredicates Types ValueRef ^ "," ValueRef
"fcmp" FPredicates Types ValueRef "," ValueRef -> InstVal {cons("FCMPInstVal")}
%% | CastOps ResolvedVal to Types
CastOps ResolvedVal "to" Types -> InstVal {cons("CastInstVal")}
%% | select ResolvedVal ^ "," ResolvedVal ^ "," ResolvedVal
"select" ResolvedVal "," ResolvedVal "," ResolvedVal -> InstVal {cons("SelectInstVal")}
%% | "va_arg" ResolvedVal ^ "," Types
"va_arg" ResolvedVal "," Types -> InstVal {cons("VAArgInstVal")}
%% | extractelement ResolvedVal ^ "," ResolvedVal
"extractelement" ResolvedVal "," ResolvedVal -> InstVal {cons("ExtractInstVal")}
%% | insertelement ResolvedVal ^ "," ResolvedVal ^ "," ResolvedVal
"insertelement" ResolvedVal "," ResolvedVal "," ResolvedVal -> InstVal {cons("InsertInstVal")}
%% | shufflevector ResolvedVal ^ "," ResolvedVal ^ "," ResolvedVal
"shufflevector" ResolvedVal "," ResolvedVal "," ResolvedVal -> InstVal {cons("ShuffleInstVal")}
%% | phi PHIList
"phi" PHIList -> InstVal {cons("PhiInstVal")}
%% | OptTailCall OptCallingConv ResultTypes ValueRef ^ "(" ^ ParamList ^ ")"
%% OptFuncAttrs
%% cme3 added OptParamAttrs
OptTailCall OptCallingConv OptParamAttrs ResultTypes ValueRef "(" ParamList ")" OptFuncAttrs -> InstVal {cons("CallInstVal")}
%% | MemoryInst ;
MemoryInst -> InstVal {cons("MemoryInstVal")}

%% OptVolatile ::= - volatile | _ ;
-> OptVolatile
"volatile" -> OptVolatile
%% OptExact ::= - exact | _ ;
%% OptInBounds  ::= - inbounds | _ ;
-> OptInBounds
"inbounds" -> OptInBounds

%% MemoryInst ::= malloc Types OptCAlign
"malloc" Types OptCAlign -> MemoryInst
%% | malloc Types ^ "," IntegerType ValueRef OptCAlign
"malloc" Types "," IntegerType ValueRef OptCAlign -> MemoryInst
%% | alloca Types OptCAlign
"alloca" Types OptCAlign -> MemoryInst
%% | alloca Types ^ "," IntegerType ValueRef OptCAlign
"alloca" Types "," IntegerType ValueRef OptCAlign -> MemoryInst
%% | free ResolvedVal
"free" ResolvedVal -> MemoryInst
%% | OptVolatile load Types ValueRef OptCAlign
"load" OptVolatile Types ValueRef OptCAlign -> MemoryInst
%% | OptVolatile store ResolvedVal ^ "," Types ValueRef OptCAlign
"store" OptVolatile ResolvedVal "," Types ValueRef OptCAlign -> MemoryInst
%% | getresult Types ValueRef ^ "," UnsignedInt
"getresult" Types ValueRef "," UnsignedInt -> MemoryInst
%% | getelementptr OptInBounds Types ValueRef IndexList
"getelementptr" OptInBounds Types ValueRef IndexList -> MemoryInst
%% | extractvalue Types ValueRef ^ ConstantIndexList 
"extractvalue" Types ValueRef ConstantIndexList -> MemoryInst
%% | insertvalue Types ValueRef ^ "," Types ValueRef ^ ConstantIndexList ;
"insertvalue" Types ValueRef "," Types ValueRef ConstantIndexList -> MemoryInst
